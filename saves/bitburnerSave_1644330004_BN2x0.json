{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":281,\"hp\":10,\"max_hp\":10,\"strength\":2,\"defense\":4,\"dexterity\":2,\"agility\":1,\"charisma\":2,\"intelligence\":96,\"hacking_chance_mult\":1.7329079973142172,\"hacking_speed_mult\":1.701201863824092,\"hacking_money_mult\":1.5717986370196977,\"hacking_grow_mult\":1.5717986370196977,\"hacking_exp\":82577.00915496325,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":10015.510000000031,\"hacking_mult\":2.1627523602320147,\"strength_mult\":2.720028977335326,\"defense_mult\":4.188844625096403,\"dexterity_mult\":2.636000622200256,\"agility_mult\":1.9061987970456393,\"charisma_mult\":2.8816308345361126,\"hacking_exp_mult\":2.609676924526767,\"strength_exp_mult\":2.2092503064776863,\"defense_exp_mult\":2.2092503064776863,\"dexterity_exp_mult\":2.540637852449339,\"agility_exp_mult\":2.2092503064776863,\"charisma_exp_mult\":2.7615628830971075,\"company_rep_mult\":3.949034922828865,\"faction_rep_mult\":2.301302402580924,\"money\":1016123084.7360755,\"city\":\"Sector-12\",\"location\":\"Travel Agency\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":33663.999701868874,\"onlineTimeSeconds\":737.0000000000414,\"ram\":64,\"totalMoneyGenerated\":24810367.780277304,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":33663.999701868874,\"onlineTimeSeconds\":711.8000000000347,\"ram\":64,\"totalMoneyGenerated\":23962034.987790212,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":33663.999701868874,\"onlineTimeSeconds\":693.8000000000296,\"ram\":64,\"totalMoneyGenerated\":23356082.99315657,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":33663.999701868874,\"onlineTimeSeconds\":633.6000000000131,\"ram\":64,\"totalMoneyGenerated\":21329510.21110407,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":33663.999701868874,\"onlineTimeSeconds\":633.6000000000131,\"ram\":64,\"totalMoneyGenerated\":21329510.21110407,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":33663.999701868874,\"onlineTimeSeconds\":613.4000000000087,\"ram\":64,\"totalMoneyGenerated\":20649497.417126317,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":33663.999701868874,\"onlineTimeSeconds\":608.4000000000076,\"ram\":64,\"totalMoneyGenerated\":20481177.418616973,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":33663.999701868874,\"onlineTimeSeconds\":523.9999999999851,\"ram\":64,\"totalMoneyGenerated\":17639935.84377924,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":33663.999701868874,\"onlineTimeSeconds\":523.9999999999851,\"ram\":64,\"totalMoneyGenerated\":17639935.84377924,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":33663.999701868874,\"onlineTimeSeconds\":512.3999999999825,\"ram\":64,\"totalMoneyGenerated\":17249433.447237562,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":33663.999701868874,\"onlineTimeSeconds\":507.3999999999827,\"ram\":64,\"totalMoneyGenerated\":17081113.44872822,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":33663.999701868874,\"onlineTimeSeconds\":502.3999999999831,\"ram\":64,\"totalMoneyGenerated\":16912793.450218875,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":33663.999701868874,\"onlineTimeSeconds\":487.3999999999842,\"ram\":64,\"totalMoneyGenerated\":16407833.454690842,\"name\":\"hacknet-node-12\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Slum Snakes\",\"Sector-12\",\"Netburners\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"PCMatrix\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"ADR-V2 Pheromone Gene\"}],\"augmentations\":[{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":12,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface\"},{\"level\":1,\"name\":\"BrachiBlades\"},{\"level\":1,\"name\":\"INFRARET Enhancement\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"NutriGen Implant\"},{\"level\":1,\"name\":\"SmartSonar Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Combat Rib II\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"DermaForce Particle Barrier\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"HemoRecirculator\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"SmartJaw\"}],\"sourceFiles\":[{\"lvl\":3,\"n\":1},{\"lvl\":1,\"n\":5}],\"numPeopleKilled\":0,\"karma\":-59.40000000000002,\"crime_money_mult\":3.16429080354877,\"crime_success_mult\":2.0011325239834115,\"isWorking\":true,\"focus\":false,\"workType\":\"Working on Create a Program\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"FTPCrack.exe\",\"createProgramReqLvl\":100,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":176000,\"timeWorkedCreateProgram\":246303.00151598398,\"timeNeededToCompleteWork\":1800000,\"work_money_mult\":1.6009060191867295,\"hacknet_node_money_mult\":3.670577332116573,\"hacknet_node_purchase_cost_mult\":0.4838443352544252,\"hacknet_node_ram_cost_mult\":0.6324762552345428,\"hacknet_node_core_cost_mult\":0.6324762552345428,\"hacknet_node_level_cost_mult\":0.5376048169493614,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":{\"ctor\":\"Gang\",\"data\":{\"facName\":\"Slum Snakes\",\"members\":[{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":36206.88649618511,\"hack\":2532,\"str\":4519,\"def\":3106,\"dex\":7772,\"agi\":6,\"cha\":5025,\"hack_exp\":11804.791605038836,\"str_exp\":2139.9387452153956,\"def_exp\":1725.699497754915,\"dex_exp\":18687.332997806534,\"agi_exp\":0,\"cha_exp\":16301.67408227591,\"hack_mult\":1,\"str_mult\":11.453536204830723,\"def_mult\":9.12679340870449,\"dex_mult\":2.2200750000000005,\"agi_mult\":4.857105006673922,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":1245909.3503530123,\"str_asc_points\":112887.72839225724,\"def_asc_points\":104287.1181833566,\"dex_asc_points\":1833289.0390343128,\"agi_asc_points\":3527.757647414713,\"cha_asc_points\":1911737.7688144105,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\"],\"name\":\"g1\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":2907041.686429989,\"hack\":3927,\"str\":6818,\"def\":5221,\"dex\":10923,\"agi\":5,\"cha\":7616,\"hack_exp\":448887.2220296711,\"str_exp\":55350.86213353397,\"def_exp\":47315.78661487842,\"dex_exp\":671773.1378985828,\"agi_exp\":0,\"cha_exp\":632970.0399379937,\"hack_mult\":1,\"str_mult\":8.181097289164803,\"def_mult\":6.519138149074639,\"dex_mult\":2.220075,\"agi_mult\":4.857105006673921,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":658119.2224428661,\"str_asc_points\":61914.796182164566,\"def_asc_points\":61170.4863103667,\"dex_asc_points\":920150.3157485466,\"agi_asc_points\":2713.9799797663813,\"cha_asc_points\":1052908.2068398176,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\"],\"name\":\"g2\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":2838863.177560387,\"hack\":3452,\"str\":5180,\"def\":4118,\"dex\":9823,\"agi\":6,\"cha\":7019,\"hack_exp\":430174.3381161214,\"str_exp\":45973.63736360882,\"def_exp\":40649.07765267245,\"dex_exp\":652779.6880576434,\"agi_exp\":0,\"cha_exp\":631983.0160658956,\"hack_mult\":1,\"str_mult\":8.181097289164803,\"def_mult\":6.519138149074639,\"dex_mult\":2.220075,\"agi_mult\":4.857105006673921,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":515161.36367085896,\"str_asc_points\":38721.399233248805,\"def_asc_points\":40715.93770393824,\"dex_asc_points\":750106.1365129161,\"agi_asc_points\":3972.169924199083,\"cha_asc_points\":894746.6074468488,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Bulletproof Vest\",\"Full Body Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Steyr AUG\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\"],\"name\":\"g3\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":2366822.7023616866,\"hack\":2910,\"str\":5719,\"def\":4463,\"dex\":8791,\"agi\":7,\"cha\":5917,\"hack_exp\":350200.2484668826,\"str_exp\":46792.820499052345,\"def_exp\":40777.31982842846,\"dex_exp\":557998.7419765145,\"agi_exp\":0,\"cha_exp\":513686.4201361825,\"hack_mult\":1,\"str_mult\":8.181097289164803,\"def_mult\":6.519138149074639,\"dex_mult\":2.220075,\"agi_mult\":4.8571050066739225,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":389474.5281937449,\"str_asc_points\":46837.28314909343,\"def_asc_points\":47756.81053572681,\"dex_asc_points\":628049.7930179584,\"agi_asc_points\":4917.034643516272,\"cha_asc_points\":674457.2464116941,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"Bulletproof Vest\",\"Full Body Armor\",\"Ford Flex V20\",\"P90C\",\"Steyr AUG\",\"Liquid Body Armor\",\"ATX1070 Superbike\",\"AK-47\",\"Mercedes-Benz S9001\",\"Graphene Plating Armor\",\"White Ferrari\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\"],\"name\":\"g31\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":1881492.8144979796,\"hack\":2902,\"str\":5750,\"def\":4475,\"dex\":8707,\"agi\":7,\"cha\":5835,\"hack_exp\":289437.69156822556,\"str_exp\":39289.3016818593,\"def_exp\":34188.48554556371,\"dex_exp\":457670.456574391,\"agi_exp\":0,\"cha_exp\":419818.9619654683,\"hack_mult\":1,\"str_mult\":8.181097289164803,\"def_mult\":6.519138149074639,\"dex_mult\":2.220075,\"agi_mult\":4.857105006673921,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":411096.0647251468,\"str_asc_points\":51172.823199737104,\"def_asc_points\":52044.58259130436,\"dex_asc_points\":652663.8224021692,\"agi_asc_points\":4572.518994204923,\"cha_asc_points\":695907.2502717924,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\"],\"name\":\"g41\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":1904120.205718423,\"hack\":2385,\"str\":8069,\"def\":6388,\"dex\":7023,\"agi\":5,\"cha\":4038,\"hack_exp\":292432.0991800356,\"str_exp\":58350.21236321554,\"def_exp\":51607.40801166327,\"dex_exp\":451427.53125560744,\"agi_exp\":0,\"cha_exp\":365358.12384136557,\"hack_mult\":1,\"str_mult\":8.181097289164802,\"def_mult\":6.519138149074638,\"dex_mult\":2.220075,\"agi_mult\":4.857105006673921,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":276811.99073554785,\"str_asc_points\":84808.08165438204,\"def_asc_points\":88194.73736037956,\"dex_asc_points\":426290.19111270644,\"agi_asc_points\":2527.735958692286,\"cha_asc_points\":347669.3969834896,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\"],\"name\":\"g6\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Territory Warfare\",\"earnedRespect\":1647913.7191405839,\"hack\":2140,\"str\":5826,\"def\":4752,\"dex\":6151,\"agi\":385,\"cha\":3360,\"hack_exp\":272473.8559395457,\"str_exp\":60464.082779939126,\"def_exp\":55037.44793900903,\"dex_exp\":411325.4967028803,\"agi_exp\":2117.3847197078762,\"cha_exp\":314860.7657230796,\"hack_mult\":1,\"str_mult\":6.293151760896001,\"def_mult\":5.014721653134337,\"dex_mult\":2.220075,\"agi_mult\":4.857105006673921,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":227733.45422050686,\"str_asc_points\":73619.17814110649,\"def_asc_points\":80239.28339720269,\"dex_asc_points\":336178.904453436,\"agi_asc_points\":4611.141441326999,\"cha_asc_points\":251991.66387582777,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Nanofiber Weave\",\"Bionic Spine\"],\"name\":\"g7\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Territory Warfare\",\"earnedRespect\":0,\"hack\":1305,\"str\":4623,\"def\":3635,\"dex\":3665,\"agi\":505,\"cha\":1576,\"hack_exp\":20378.080013868468,\"str_exp\":32446.440447176054,\"def_exp\":28698.69470599267,\"dex_exp\":41070.26658139127,\"agi_exp\":6408.502101585774,\"cha_exp\":8201.775425907761,\"hack_mult\":1,\"str_mult\":5.472305879040001,\"def_mult\":4.360627524464641,\"dex_mult\":1.9305000000000003,\"agi_mult\":4.223569571020801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":243393.2647055782,\"str_asc_points\":80800.96655625313,\"def_asc_points\":83445.51558098245,\"dex_asc_points\":366013.9655310045,\"agi_asc_points\":4151.775689412132,\"cha_asc_points\":285518.59563425154,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Nanofiber Weave\"],\"name\":\"g8\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Territory Warfare\",\"earnedRespect\":162071.76409611653,\"hack\":857,\"str\":3888,\"def\":3085,\"dex\":2373,\"agi\":711,\"cha\":1278,\"hack_exp\":49996.83455660775,\"str_exp\":43054.80313763629,\"def_exp\":38424.009033675786,\"dex_exp\":86641.16472978872,\"agi_exp\":10349.444047477367,\"cha_exp\":46639.34902739814,\"hack_mult\":1,\"str_mult\":5.472305879040001,\"def_mult\":4.360627524464641,\"dex_mult\":1.9305000000000003,\"agi_mult\":4.223569571020801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":68403.11224661043,\"str_asc_points\":50193.3902324032,\"def_asc_points\":52390.74513023092,\"dex_asc_points\":112362.5664168496,\"agi_asc_points\":5978.9859302994655,\"cha_asc_points\":73699.3223099076,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Nanofiber Weave\"],\"name\":\"g9\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Territory Warfare\",\"earnedRespect\":0,\"hack\":94,\"str\":1788,\"def\":1406,\"dex\":381,\"agi\":1198,\"cha\":45,\"hack_exp\":3390.099194009906,\"str_exp\":17830.847360947064,\"def_exp\":15856.874692991016,\"dex_exp\":8299.511704032175,\"agi_exp\":14650.730389967519,\"cha_exp\":835.08567674661,\"hack_mult\":1,\"str_mult\":5.472305879040001,\"def_mult\":4.360627524464641,\"dex_mult\":1.9305000000000003,\"agi_mult\":4.223569571020801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":4278.028834478011,\"str_asc_points\":16376.667754273287,\"def_asc_points\":17016.232139852436,\"dex_asc_points\":9492.586481275803,\"agi_asc_points\":13780.857379462248,\"cha_asc_points\":158.4320482078199,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Nanofiber Weave\"],\"name\":\"g10\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Territory Warfare\",\"earnedRespect\":0,\"hack\":65,\"str\":1652,\"def\":1256,\"dex\":308,\"agi\":1063,\"cha\":32,\"hack_exp\":1887.7666289678907,\"str_exp\":11724.666123407167,\"def_exp\":10165.69541548564,\"dex_exp\":4927.938047751215,\"agi_exp\":9146.332449799893,\"cha_exp\":513.3768802456666,\"hack_mult\":1,\"str_mult\":5.472305879040001,\"def_mult\":4.360627524464641,\"dex_mult\":1.9305000000000003,\"agi_mult\":4.223569571020801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":3569.1047592685964,\"str_asc_points\":17791.193463043674,\"def_asc_points\":17675.003681447924,\"dex_asc_points\":9004.378622554152,\"agi_asc_points\":14450.918176086143,\"cha_asc_points\":87.27033825962239,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Nanofiber Weave\"],\"name\":\"g11\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Territory Warfare\",\"earnedRespect\":0,\"hack\":45,\"str\":1088,\"def\":805,\"dex\":202,\"agi\":706,\"cha\":32,\"hack_exp\":1479.1208405563011,\"str_exp\":8501.530898623689,\"def_exp\":7249.203562399489,\"dex_exp\":3648.136309506838,\"agi_exp\":6734.272739476706,\"cha_exp\":513.3768802456666,\"hack_mult\":1,\"str_mult\":5.472305879040001,\"def_mult\":4.360627524464641,\"dex_mult\":1.9305000000000003,\"agi_mult\":4.223569571020801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":2191.1393524060218,\"str_asc_points\":9449.526994462396,\"def_asc_points\":9072.069638786805,\"dex_asc_points\":4934.752587655681,\"agi_asc_points\":7833.987582200097,\"cha_asc_points\":50.872545582253245,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Nanofiber Weave\"],\"name\":\"g12\"}}],\"wanted\":26203.128016067378,\"respect\":13744256.611944396,\"isHackingGang\":false,\"respectGainRate\":349.8860069518708,\"wantedGainRate\":0.028892348402358582,\"moneyGainRate\":2327903.0020773704,\"storedCycles\":1,\"storedTerritoryAndPowerCycles\":34,\"territoryClashChance\":0,\"territoryWarfareEngaged\":false,\"notifyMemberDeath\":true}},\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":2,\"lastUpdate\":1644330003380,\"totalPlaytime\":3000462600,\"playtimeSinceLastAug\":770400,\"playtimeSinceLastBitnode\":265149800,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":9106951403.602518,\"hacking\":6536343,\"hacknet\":258849226.50770274,\"hacknet_expenses\":-3326713888.3747554,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":1015123084.7360767,\"work\":0,\"servers\":0,\"other\":0,\"augmentations\":-5030500000}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":1350000000,\"corporation\":0,\"crime\":294988938.4715465,\"gang\":34347388104.520477,\"hacking\":750274564.0525525,\"hacknet\":4022372055.2055473,\"hacknet_expenses\":-7121779981.606329,\"hospitalization\":-4913224.534946108,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":2326602302.923341,\"work\":0,\"servers\":-4643203741.804813,\"other\":-8400000,\"augmentations\":-26660124411.36196}},\"scriptProdSinceLastAug\":6536343,\"exploits\":[\"UndocumentedFunctionCall\",\"Bypass\",\"Unclickable\",\"RealityAlteration\",\"TimeCompression\",\"N00dles\",\"PrototypeTampering\",\"EditSaveFile\",\"YoureNotMeantToAccessThis\"],\"achievements\":[{\"ID\":\"CYBERSEC\",\"unlockedOn\":1641831349068},{\"ID\":\"NITESEC\",\"unlockedOn\":1641831349080},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1641831349084},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1641831349088},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1641831349091},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1641831349095},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1641831349099},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1641831349103},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1641831349108},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1641831349113},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1641831349117},{\"ID\":\"NS2\",\"unlockedOn\":1641831349120},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1641831349122},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1641831349125},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1641831349128},{\"ID\":\"TOR\",\"unlockedOn\":1641831349131},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1641911770908},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1641911770911},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1641911890917},{\"ID\":\"DONATION\",\"unlockedOn\":1641919651447},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1641924992259},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1642040620386},{\"ID\":\"TRAVEL\",\"unlockedOn\":1642040800461},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1642088780181},{\"ID\":\"4S\",\"unlockedOn\":1642220579557},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1642295956244},{\"ID\":\"SF1.1\",\"unlockedOn\":1642393317233},{\"ID\":\"UNDOCUMENTEDFUNCTIONCALL\",\"unlockedOn\":1643121077987},{\"ID\":\"BYPASS\",\"unlockedOn\":1643121317987},{\"ID\":\"UNCLICKABLE\",\"unlockedOn\":1643122337977},{\"ID\":\"REALITYALTERATION\",\"unlockedOn\":1643122481910},{\"ID\":\"TIMECOMPRESSION\",\"unlockedOn\":1643122661782},{\"ID\":\"N00DLES\",\"unlockedOn\":1643122721781},{\"ID\":\"PROTOTYPETAMPERING\",\"unlockedOn\":1643123081783},{\"ID\":\"EDITSAVEFILE\",\"unlockedOn\":1643123929773},{\"ID\":\"DEVMENU\",\"unlockedOn\":1643123929787},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1643640264308},{\"ID\":\"SF5.1\",\"unlockedOn\":1643839768581},{\"ID\":\"GANG\",\"unlockedOn\":1644242713578},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1644317906781},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1644319506423}],\"factionWorkType\":\"Faction Security Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"70.4.9.8\",\"isConnectedTo\":true,\"maxRam\":2048,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"BruteSSH.exe\",\"Formulas.exe\",\"fl1ght.exe\",\"AutoLink.exe\"],\"ramUsed\":1857.15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"gangum.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":767.0100000000499,\"pid\":2,\"ramUsage\":33.8,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"gangum.js\",\"url\":\"blob:https://danielyxie.github.io/b073056b-75a2-47e3-9f12-7db88b78d2c1\",\"moduleSequenceNumber\":5708}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"mcp.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":82577.00915496325,\"onlineMoneyMade\":6536343,\"onlineRunningTime\":767.0100000000499,\"pid\":3,\"ramUsage\":13.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/d5714bec-3ff2-4d05-b270-280df7f13617\",\"moduleSequenceNumber\":3852},{\"filename\":\"mcp.js\",\"url\":\"blob:https://danielyxie.github.io/8f188a2f-f02a-4f4d-9de5-b5b4610dfc31\",\"moduleSequenceNumber\":3878}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"custom-stats.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":767.0100000000499,\"pid\":5,\"ramUsage\":5.5,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/ca16e71e-2311-4b23-8c26-e7a5517f0139\",\"moduleSequenceNumber\":3852},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/de9dc335-2408-4d3f-9b08-1d47c4aa3578\",\"moduleSequenceNumber\":3853},{\"filename\":\"custom-stats.js\",\"url\":\"blob:https://danielyxie.github.io/838d7d2a-1b2b-4ea8-9f94-051dc2c8732f\",\"moduleSequenceNumber\":3880}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"cssedit.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":265.2099999999935,\"pid\":58,\"ramUsage\":1.6,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.44959545082657315],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":192.6099999999976,\"pid\":85,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":211,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/ff421905-959f-4236-8582-792ff06d2a92\",\"moduleSequenceNumber\":5881}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.5768834590192851],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.410000000000096,\"pid\":115,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":69,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/4191fcab-c275-4951-aebd-cb716c5832f5\",\"moduleSequenceNumber\":5815}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.8024067983338175],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.409999999999926,\"pid\":125,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":158,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/4191fcab-c275-4951-aebd-cb716c5832f5\",\"moduleSequenceNumber\":5815}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.624569257635647],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.40999999999993,\"pid\":127,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":190,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/4191fcab-c275-4951-aebd-cb716c5832f5\",\"moduleSequenceNumber\":5815}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",0.649038237722644],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.409999999999965,\"pid\":130,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":76,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/4191fcab-c275-4951-aebd-cb716c5832f5\",\"moduleSequenceNumber\":5815}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",0.47122076479425434],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.209999999999987,\"pid\":133,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":140,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/4191fcab-c275-4951-aebd-cb716c5832f5\",\"moduleSequenceNumber\":5815}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.43633304964178454],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.210000000000003,\"pid\":137,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":76,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/4191fcab-c275-4951-aebd-cb716c5832f5\",\"moduleSequenceNumber\":5815}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",0.16237560569006826],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":138,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":109,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/ff421905-959f-4236-8582-792ff06d2a92\",\"moduleSequenceNumber\":5881}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",0.17272436062201035],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":139,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/4191fcab-c275-4951-aebd-cb716c5832f5\",\"moduleSequenceNumber\":5815}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let paramLength = ns.args[0];\\r\\n    let targetServers = [];\\r\\n    for (var i = 0; i < paramLength / 3; i++) {\\r\\n        targetServers.push({\\r\\n            target: ns.args[i * 3 + 1],\\r\\n            moneyThresh: ns.args[i * 3 + 2],\\r\\n            securityThresh: ns.args[i * 3 + 3]\\r\\n        });\\r\\n    }\\r\\n    ns.print(JSON.stringify(targetServers));\\r\\n    // pick a random server to start on\\r\\n    i = Math.floor(Math.random() * (targetServers.length))\\r\\n    while (true) {\\r\\n        let server = targetServers[i];\\r\\n        ns.print(JSON.stringify(server));\\r\\n        // iterate through the servers\\r\\n        i = i++ % targetServers.length;\\r\\n        const target = server.target;\\r\\n        const moneyThresh = server.moneyThresh;\\r\\n        const securityThresh = server.securityThresh;\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        } else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"early-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"home\",\"moduleSequenceNumber\":5778,\"_hash\":\"c19c706a9b823af7ee4e4830336d2e15969f12690a27821ac003d86bd8a13c76\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var serverlist = [\\r\\n\\t\\\"n00dles\\\"\\r\\n\\t, \\\"CSEC\\\"\\r\\n\\t, \\\"phantasy\\\"\\r\\n\\t, \\\"comptek\\\"\\r\\n\\t, \\\"syscore\\\"\\r\\n\\t, \\\"aevum-police\\\"\\r\\n\\t, \\\"aerocorp\\\"\\r\\n\\t, \\\"netlink\\\"\\r\\n\\t, \\\"omega-net\\\"\\r\\n\\t, \\\"johnson-ortho\\\"\\r\\n\\t, \\\"rothman-uni\\\"\\r\\n\\t, \\\"zb-institute\\\"\\r\\n\\t, \\\"crush-fitness\\\"\\r\\n\\t, \\\"catalyst\\\"\\r\\n\\t, \\\"millenium-fitness\\\"\\r\\n\\t, \\\"snap-fitness\\\"\\r\\n\\t, \\\"unitalife\\\"\\r\\n\\t, \\\"foodnstuff\\\"\\r\\n\\t, \\\"sigma-cosmetics\\\"\\r\\n\\t, \\\"joesguns\\\"\\r\\n\\t, \\\"zer0\\\"\\r\\n\\t, \\\"silver-helix\\\"\\r\\n\\t, \\\"the-hub\\\"\\r\\n\\t, \\\"summit-uni\\\"\\r\\n\\t, \\\"lexo-corp\\\"\\r\\n\\t, \\\"galactic-cyber\\\"\\r\\n\\t, \\\"rho-construction\\\"\\r\\n\\t, \\\"alpha-ent\\\"\\r\\n\\t, \\\"global-pharm\\\"\\r\\n\\t, \\\"omnia\\\"\\r\\n\\t, \\\"icarus\\\"\\r\\n\\t, \\\"univ-energy\\\"\\r\\n\\t, \\\"taiyang-digital\\\"\\r\\n\\t, \\\"solaris\\\"\\r\\n\\t, \\\"zb-def\\\"\\r\\n\\t, \\\"deltaone\\\"\\r\\n\\t, \\\"defcomm\\\"\\r\\n\\t, \\\"zeus-med\\\"\\r\\n\\t, \\\"infocomm\\\"\\r\\n\\t, \\\"nova-med\\\"\\r\\n\\t, \\\"avmnite-02h\\\"\\r\\n\\t, \\\"I.I.I.I\\\"\\r\\n\\t, \\\"nectar-net\\\"\\r\\n\\t, \\\"hong-fang-tea\\\"\\r\\n\\t, \\\"harakiri-sushi\\\"\\r\\n\\t, \\\"iron-gym\\\"\\r\\n\\t, \\\"max-hardware\\\"\\r\\n\\t, \\\"neo-net\\\"\\r\\n];\\r\\nvar pservs = getPurchasedServers();\\r\\nfor (var i = 0; i < pservs.length; i++) {\\r\\n\\tserverlist.push(pservs[i]);\\r\\n}\\r\\nvar length = serverlist.length;\\r\\ntprint(\\\"number of servers \\\" + length);\\r\\nvar script = \\\"early-hack-template.script\\\";\\r\\nvar scriptRam = getScriptRam(script, \\\"home\\\");\\r\\nfor (var i = 0; i < length; i++) {\\r\\n\\tvar host = serverlist[i];\\r\\n\\tvar ports = getServerNumPortsRequired(host);\\r\\n\\tif (host.indexOf(\\\"pserv\\\") < 0 && ports > 5) {\\r\\n\\t\\ttprint(\\\"skip host \\\" + host);\\r\\n\\t\\tcontinue;\\r\\n\\t}\\r\\n\\tscp(script, host);\\r\\n\\ttprint(\\\"copied to \\\" + host);\\r\\n\\tif (!hasRootAccess(host)) {\\r\\n\\t\\ttprint(\\\"no root to \\\" + host);\\r\\n\\t\\tbrutessh(host);\\r\\n\\t\\thttpworm(host);\\r\\n\\t\\tftpcrack(host);\\r\\n\\t\\trelaysmtp(host);\\r\\n\\t\\tsqlinject(host);\\r\\n\\t\\tnuke(host);\\r\\n\\t\\ttprint(\\\"nuked \\\" + host);\\r\\n\\t}\\r\\n\\tscriptKill(script, host);\\r\\n\\tvar hostram = getServerMaxRam(host);\\r\\n\\tvar threads = hostram / scriptRam;\\r\\n\\tif (threads >= 1) {\\r\\n\\t\\texec(script, host, threads);\\r\\n\\t\\ttprint(\\\"exec on \\\" + host + \\\" with threads \\\" + threads);\\r\\n\\t}\\r\\n}\",\"filename\":\"run-all.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.35,\"server\":\"home\",\"moduleSequenceNumber\":5779,\"_hash\":\"c8b12451f941973c1b9bfab8130d57838323c96a5fa016a261be140bc2cc4fa0\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n\\tvar length = serverlist.length;\\r\\n\\tfor (var i = 0; i < length; i++) {\\r\\n\\t\\tvar host = serverlist[i];\\r\\n\\t\\tawait ns.installBackdoor(host);\\r\\n\\t\\tns.tprint(\\\"Backdoored \\\" + host);\\r\\n\\t}\\r\\n}\",\"filename\":\"backdoorEverything.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"home\",\"moduleSequenceNumber\":5780,\"_hash\":\"d24e9230111f6cda67f76b417fc1db64c7f117067a52229f870e50f5d07a1895\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { targets } from 'config.js';\\nimport { list_servers } from 'opened_servers.js';\\nimport { ensureRootAccess } from 'utils.js';\\nexport async function createExecParams(ns) {\\n\\texecParams = [];\\n\\tfor (var i = 0; i < targets().length; i++) {\\n\\t\\texecParams.push(targets()[i]);\\n\\t\\texecParams.push(ns.getServerMaxMoney(targets()[i]) * 0.75);\\n\\t\\texecParams.push(ns.getServerMinSecurityLevel(targets()[i]) + 5)\\n\\t}\\n\\texecParams.unshift(execParams.length);\\n\\treturn execParams;\\n}\\nlet ns;\\nconst script = \\\"early-hack.js\\\";\\nlet scriptRam;\\nlet execParams;\\n/** @param {NS} pns **/\\nexport async function main(pns) {\\n\\tns = pns;\\n\\tscriptRam = await ns.getScriptRam(script, \\\"home\\\");\\n\\texecParams = [];\\n\\tfor (var i = 0; i < targets().length; i++) {\\n\\t\\texecParams.push(targets()[i]);\\n\\t\\texecParams.push(ns.getServerMaxMoney(targets()[i]) * 0.75);\\n\\t\\texecParams.push(ns.getServerMinSecurityLevel(targets()[i]) + 5)\\n\\t}\\n\\texecParams.unshift(execParams.length);\\n\\tconst openedServers = (await list_servers(ns)).filter(s => ns.hasRootAccess(s)).concat(['home']);\\n\\tawait everything(openedServers);\\n}\\nasync function everything(serverList) {\\n\\tfor (var i = 0; i < serverList.length; i++) {\\n\\t\\tvar host = serverList[i];\\n\\t\\tif (!await ns.serverExists(host)) {\\n\\t\\t\\tns.tprint(`Server '${host}' does not exist. Aborting.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (await ensureRootAccess(ns, host)) {\\n\\t\\t\\tawait restartScript(host);\\n\\t\\t}\\n\\t\\tawait ns.sleep(10);\\n\\t}\\n}\\nasync function restartScript(host) {\\n\\tawait ns.scp(script, host);\\n\\tawait ns.scriptKill(script, host);\\n\\tvar threads = Math.floor((await ns.getServerMaxRam(host) - await ns.getServerUsedRam(host)) / scriptRam);\\n\\tif (threads >= 1) {\\n\\t\\tawait ns.exec(script, host, threads, ...execParams);\\n\\t\\tns.tprint(\\\"exec on \\\" + host + \\\" with threads \\\" + threads);\\n\\t}\\n}\",\"filename\":\"run-all.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"config.js\",\"url\":\"blob:https://danielyxie.github.io/dd48428e-6547-4cd6-8b5a-6363be1b1cde\"},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/555a2bd2-215e-4a3f-a56e-f769453865d6\"},{\"filename\":\"config.js\",\"url\":\"blob:https://danielyxie.github.io/dd48428e-6547-4cd6-8b5a-6363be1b1cde\"},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/555a2bd2-215e-4a3f-a56e-f769453865d6\"},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/f1390be8-8af7-47fb-81e0-16ded49a3bae\"},{\"filename\":\"config.js\",\"url\":\"blob:https://danielyxie.github.io/477482c7-3343-4ead-a6c2-f0021f11867e\"},{\"filename\":\"run-all.js\",\"url\":\"blob:https://danielyxie.github.io/118f6c49-db2b-4897-b3bc-480ec6b0f2a5\"}],\"dependents\":[],\"ramUsage\":5.75,\"server\":\"home\",\"moduleSequenceNumber\":5781,\"_hash\":\"d73cfb03970099b49180874c3e04ccc8b7338d93b39728ea919455c2542b783b\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    if (ns.getPlayer().bitNodeN === 2) {\\n        ns.tprint('Not buying servers in bitnode 2');\\n    } else {\\n        // const ram = 32768;\\n        const ram = ns.getServer('home').maxRam / 2;\\n        // const maxRam = 1048576;\\n        let i = ns.getPurchasedServers().length;\\n        while (i < ns.getPurchasedServerLimit()) {\\n            // Check if we have enough money to purchase a server\\n            if (ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n                var hostname = ns.purchaseServer(\\\"pserv-\\\" + i, ram);\\n                ns.tprint('private server purchased, hostname[' + hostname + ']');\\n                ++i;\\n            }\\n            await ns.sleep(3000);\\n        }\\n    }\\n    if (ns.getPlayer().bitNodeN === 5) {\\n        ns.tprint('Not buying hacknet servers in bitnode 5');\\n        return;\\n    }\\n    const maxCores = ns.formulas.hacknetNodes.coreUpgradeCost(1, 15);\\n    const maxRam = ns.formulas.hacknetNodes.ramUpgradeCost(1, 6);\\n    const maxLevel = ns.formulas.hacknetNodes.levelUpgradeCost(1, 199);\\n    const maxHackNetUpgradeCost_preAug = maxCores + maxLevel + maxRam;\\n    // Start the hacknet node purchases\\n    while (ns.hacknet.getPurchaseNodeCost() < 1000000) {\\n\\n        let nodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\n        // Purchase the nodes when we have enough money to do so\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") > (nodeCost + maxHackNetUpgradeCost_preAug)) {\\n\\n            var purchaseIndex = ns.hacknet.purchaseNode();\\n            ns.hacknet.upgradeLevel(purchaseIndex, 199);\\n            ns.hacknet.upgradeRam(purchaseIndex, 6);\\n            ns.hacknet.upgradeCore(purchaseIndex, 15);\\n\\n            ns.tprint('Hacknet node purchased, index[' + purchaseIndex + ']');\\n        }\\n\\n        // wait a few seconds before we have them all\\n        await ns.sleep('5000');\\n    }\\n\\n}\",\"filename\":\"purchase-servers.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"purchase-servers.js\",\"url\":\"blob:https://danielyxie.github.io/8514cd2f-ef43-45b8-a5f7-cb65cb4c515a\",\"moduleSequenceNumber\":5813}],\"dependents\":[],\"ramUsage\":13,\"server\":\"home\",\"moduleSequenceNumber\":5813,\"_hash\":\"b1af83699f444efce3e11ba6c7a23f6e52f1ba000b1153b271ee1e4fbe1dca12\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// export function targets() {\\r\\n// \\treturn [\\\"n00dles\\\", \\\"foodnstuff\\\", \\\"joesguns\\\"];\\r\\n// }\\r\\n// , \\\"johnson-ortho\\\"\\r\\n// , \\\"the-hub\\\"\\r\\nexport function targets() {\\r\\n\\treturn [\\\"silver-helix\\\"\\r\\n\\t\\t, \\\"crush-fitness\\\"\\r\\n\\t\\t, \\\"comptek\\\"\\r\\n\\t];\\r\\n}\\r\\n// 1.001 is a bitnode 5 value\\r\\n// 2.1 is a bitnode 1 value\\r\\nexport const growthFactor = 2.1; //2.1\\r\\n// hack up to 95% of the growth factor to grow a server over time\\r\\nexport const hackFactor = ((growthFactor - 1) * .95); // .5\",\"filename\":\"config.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":5783,\"_hash\":\"c0a10f69acaba0510c4e9b1f33ba5b7c509f8a4b5c280a25da62574375d8cbc8\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst args = ns.flags([[\\\"help\\\", false]]);\\n\\tconst server = ns.args[0];\\n\\tif (args.help || !server) {\\n\\t\\tns.tprint(\\\"This script does a more detailed analysis of a server.\\\");\\n\\t\\tns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\n\\t\\tns.tprint(\\\"Example:\\\");\\n\\t\\tns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n\\t\\treturn;\\n\\t}\\n\\tconst s = ns.getServer(server);\\n\\tconst player = ns.getPlayer();\\n\\tconst maxRam = ns.getServerMaxRam(server);\\n\\tconst usedRam = ns.getServerUsedRam(server);\\n\\tconst money = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst minSec = ns.getServerMinSecurityLevel(server);\\n\\tconst sec = ns.getServerSecurityLevel(server);\\n\\tns.tprint(`\\n${server}:\\n    RAM        : ${usedRam} / ${maxRam} (${usedRam / maxRam * 100}%)\\n    $          : ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${(money / maxMoney * 100).toFixed(2)}%)\\n    security   : ${minSec.toFixed(2)} / ${sec.toFixed(2)}\\n    growth     : ${ns.getServerGrowth(server)}\\n    hack time  : ${ns.tFormat(ns.getHackTime(server))}\\n    hack time  : ${ns.tFormat(ns.formulas.hacking.hackTime(s, player))}\\n    grow time  : ${ns.tFormat(ns.getGrowTime(server))}\\n    grow time  : ${ns.tFormat(ns.formulas.hacking.growTime(s, player))}\\n    weaken time: ${ns.tFormat(ns.getWeakenTime(server))}\\n    weaken time: ${ns.tFormat(ns.formulas.hacking.weakenTime(s, player))}\\n    grow x2    : ${(ns.growthAnalyze(server, 2)).toFixed(2)} threads\\n    grow x3    : ${(ns.growthAnalyze(server, 3)).toFixed(2)} threads\\n    grow x4    : ${(ns.growthAnalyze(server, 4)).toFixed(2)} threads\\n    hack 10%   : ${(.10 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 25%   : ${(.25 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 50%   : ${(.50 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hackChance : ${(ns.hackAnalyzeChance(server) * 100).toFixed(2)}%\\n`);\\n}\\n\\nexport function autocomplete(data, args) {\\n\\treturn data.servers;\\n}\",\"filename\":\"analyze_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"analyze_server.js\",\"url\":\"blob:https://danielyxie.github.io/52170e2c-69ba-4183-869e-296b072216cc\",\"moduleSequenceNumber\":24484}],\"dependents\":[],\"ramUsage\":7.85,\"server\":\"home\",\"moduleSequenceNumber\":5784,\"_hash\":\"91dcb01282737a1ba790ffe2b0a91ff70f2888e7c730f4a1a722ea4efa4c8075\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hackFactor, growthFactor } from 'config.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const flags = ns.flags([\\n        ['refreshrate', 200],\\n        ['help', false],\\n    ])\\n    if (flags.help) {\\n        ns.tprint(\\\"This script helps visualize the money and security of a server.\\\");\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\n        return;\\n    }\\n    ns.tail();\\n    ns.disableLog('ALL');\\n    const servers = flags._[0] ? [flags._[0]] : [];\\n    // ns.tprint(JSON.stringify(servers));\\n    while (true) {\\n        ns.clearLog();\\n        for (var i = 0; i < servers.length; i++) {\\n            const server = servers[i];\\n            const s = ns.getServer(server);\\n            const player = ns.getPlayer();\\n            let maxMoney = ns.getServerMaxMoney(server);\\n            const minSec = ns.getServerMinSecurityLevel(server);\\n            let money = ns.getServerMoneyAvailable(server);\\n            const percentOfMaxMoney = money / (maxMoney || 1);\\n            const sec = ns.getServerSecurityLevel(server);\\n            const currentSecurity = s.hackDifficulty - s.minDifficulty;\\n            const owk = ns.weakenAnalyze(1, 1);\\n            const hackT = ns.formulas.hacking.hackTime(s, player);\\n            const growT = ns.formulas.hacking.growTime(s, player);\\n            const weakT = ns.formulas.hacking.weakenTime(s, player);\\n            const hackChance = ns.formulas.hacking.hackChance(s, player);\\n            s.hackDifficulty = s.minDifficulty;\\n            const growPercent = ns.formulas.hacking.growPercent(s, 1, player, 1);\\n            const hackPercent = ns.formulas.hacking.hackPercent(s, player);\\n            const hackThreads = Math.floor(.5 / hackPercent);\\n            ns.print(`\\n${server}:\\n    $          : ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${(percentOfMaxMoney * 100).toFixed(2)}%)\\n    security   : ${minSec.toFixed(2)} / ${sec.toFixed(2)} +${(currentSecurity).toFixed(2)}\\n    growth     : ${ns.getServerGrowth(server)} (${(growPercent * 100).toFixed(2)}%)\\n    hack time  : ${ns.tFormat(hackT)} (t=${hackThreads}) (${(hackPercent * 100).toFixed(2)}%)\\n    grow time  : ${ns.tFormat(growT)} (t=${maxMoney === 0 ? 'NaN' : Math.ceil(ns.growthAnalyze(server, growthFactor))})(${(growthFactor * 100).toFixed(0)}%) \\n    weaken time: ${ns.tFormat(weakT)} (t=${Math.max(Math.ceil(currentSecurity / owk), 1)})\\n    hackChance : ${(hackChance * 100).toFixed(2)}%\\n`);\\n        }\\n        await ns.sleep(flags.refreshrate);\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return data.servers;\\n}\",\"filename\":\"monitor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"config.js\",\"url\":\"blob:https://danielyxie.github.io/bd3a0ada-a58d-4e27-8a18-869f7225b1cb\",\"moduleSequenceNumber\":189939},{\"filename\":\"monitor.js\",\"url\":\"blob:https://danielyxie.github.io/55872c20-974b-4910-837d-4bacd970cbf9\",\"moduleSequenceNumber\":190125}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":5785,\"_hash\":\"8397cd7b16d2fd5914391c970d442000b728a85d540b028212423f7d73ad8475\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function scan(ns, parent, server, list) {\\n    const children = ns.scan(server);\\n    for (let child of children) {\\n        if (parent == child) {\\n            continue;\\n        }\\n        ensureRootAccess(ns, child);\\n        list.push(child);\\n\\n        scan(ns, server, child, list);\\n    }\\n}\\n\\nexport function list_servers(ns) {\\n    const list = [];\\n    scan(ns, '', 'home', list);\\n\\n    return list;\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script lists all servers on which you can run scripts.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\n        return;\\n    }\\n\\n    const servers = list_servers(ns).filter(s => ns.hasRootAccess(s)).concat(['home']);\\n    for (const server of servers) {\\n        const used = ns.getServerUsedRam(server);\\n        const max = ns.getServerMaxRam(server) || 1;\\n        ns.tprint(`${server} is opened. ${used} GB / ${max} GB (${(100 * used / max).toFixed(2)}%)`)\\n    }\\n}\\n\\nexport function ensureRootAccess(ns, host) {\\n    ns.disableLog('disableLog');\\n    ns.disableLog('hasRootAccess');\\n    ns.disableLog('getServerNumPortsRequired');\\n    ns.disableLog('fileExists');\\n\\n    if (host === \\\"home\\\" || ns.hasRootAccess(host)) return true;\\n    let portsReq = ns.getServerNumPortsRequired(host);\\n    let maxPorts = countPorts(ns);\\n    // ns.tprint(\\\"need to root \\\" + host + \\\" with \\\" + portsReq + \\\" ports required \\\" + maxPorts + \\\" can be opened\\\");\\n    if (portsReq <= maxPorts) {\\n        if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            ns.brutessh(host);\\n        }\\n        if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            ns.httpworm(host);\\n        }\\n        if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ns.ftpcrack(host);\\n        }\\n        if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            ns.relaysmtp(host);\\n        }\\n        if (ns.fileExists(\\\"sqlInject.exe\\\", \\\"home\\\")) {\\n            ns.sqlinject(host);\\n        }\\n        ns.nuke(host);\\n        ns.tprint(\\\"nuked \\\" + host);\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction countPorts(ns) {\\n    let ports = 0\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ports++;\\n    }\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n        ports++;\\n    }\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n        ports++;\\n    }\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n        ports++;\\n    }\\n    if (ns.fileExists(\\\"sqlInject.exe\\\", \\\"home\\\")) {\\n        ports++;\\n    }\\n    return ports\\n}\",\"filename\":\"opened_servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/2c494167-3f45-46c7-ae1f-bec1cdeffe49\",\"moduleSequenceNumber\":2438}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"home\",\"moduleSequenceNumber\":5786,\"_hash\":\"06ce4d2601ca3986016c5ec63d4754fff87fc878ed41b258d88ee6ba15694c79\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { list_servers } from 'opened_servers.js';\\n\\n/** @param {NS} ns **/\\nexport async function runHackScript(ns, script, host, threads, target) {\\n\\tif (!ns.fileExists(script, host)) {\\n\\t\\tawait ns.scp(script, host);\\n\\t}\\n\\treturn Promise.resolve(ns.exec(script, host, threads, target, Math.random()));\\n}\\n\\n/** @param {NS} ns **/\\nexport function getHosts(ns, scriptRam) {\\n\\tconst openedServers = list_servers(ns).filter(s => ns.hasRootAccess(s) && ns.getServerMaxRam(s) > 1);\\n\\tconst serversForExecution = ns.getPurchasedServers().concat(openedServers);\\n\\tconst s = ns.getServer('home');\\n\\t// reserve some ram for other scripts\\n\\tif (s.maxRam >= 64) {\\n\\t\\ts.maxRam = s.maxRam - 32;\\n\\t} else if (host === 'home' && s.maxRam === 32) {\\n\\t\\ts.maxRam = s.maxRam - 16;\\n\\t}\\n\\tconst hostServers = [{\\n\\t\\tserver: s,\\n\\t\\tcpuCores: s.cpuCores,\\n\\t\\tthreadsAvailable: Math.max(Math.floor((s.maxRam - s.ramUsed) / scriptRam), 0)\\n\\t}];\\n\\tfor (const host of serversForExecution) {\\n\\t\\tconst s = ns.getServer(host);\\n\\t\\tconst threadsAvailable = Math.max(Math.floor((s.maxRam - s.ramUsed) / scriptRam), 0);\\n\\t\\thostServers.push({\\n\\t\\t\\tserver: s,\\n\\t\\t\\tcpuCores: s.cpuCores,\\n\\t\\t\\tthreadsAvailable\\n\\t\\t});\\n\\t}\\n\\treturn hostServers;\\n}\\n\\nlet hackList = ['n00dles']\\nlet lastUpdate = Date.now();\\nexport function getHackList(forceRefresh) {\\n\\tif (!forceRefresh && lastUpdate < Date.now() - 60 * 1000) {\\n\\t\\treturn hackList;\\n\\t}\\n\\tconst beforeHackList = hackStatus.length;\\n\\tconst serversToHack = list_servers(ns).filter(s => ns.hasRootAccess(s)\\n\\t\\t&& ns.getServerMaxMoney(s) > 0\\n\\t\\t&& ns.getServerRequiredHackingLevel(s) <= ns.getHackingLevel());\\n\\thackList = [];\\n\\tconst player = ns.getPlayer();\\n\\tfor (const server of serversToHack) {\\n\\t\\tconst s = ns.getServer(server);\\n\\t\\ts.hackDifficulty = s.minDifficulty;\\n\\t\\t// check that hacks will succeed.\\n\\t\\tconst hackChance = ns.formulas.hacking.hackChance(s, player);\\n\\t\\tif (hackChance < .9) {\\n\\t\\t\\t//ns.print(`Hack chance to low ${s} ${(hackChance * 100).toFixed(2)}%`)\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\t// waste of resources to do expensive ram costs on grow\\n\\t\\tif (s.serverGrowth < 40) {\\n\\t\\t\\t//ns.print(`Growth is to low ${s} ${s.serverGrowth}%`)\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\t// ns.exec('monitor.js', 'home', 1, server);\\n\\t\\thackList.push({ server: server });\\n\\t}\\n\\t// after aug install just start hacking on n00dles\\n\\tif (hackList.length === 0) hackStatus.push({ server: 'n00dles' });\\n\\tif (beforeHackList < hackList.length) ns.tprint(`Servers to hack ${hackStatus.length} ${hackStatus.map(o => o.server).join(',')}`);\\n\\tlastUpdate = Date.now();\\n\\treturn hackList;\\n}\\n\\nexport function ramUsage(ns) {\\n\\tconst serversWithRam = ns.getPurchasedServers().concat(\\n\\t\\tlist_servers(ns).filter(s => ns.hasRootAccess(s) && ns.getServerMaxRam(s) > 1));\\n\\treturn serversWithRam.map(o => ns.getServerUsedRam(o) / ns.getServerMaxRam(o)).reduce((a, b) => a + b, 0) / serversWithRam.length;\\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.35,\"server\":\"home\",\"moduleSequenceNumber\":5787,\"_hash\":\"0894d46a0b308b241154ca127120e84f76b3a7b4399137accac07bf645071683\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function recursiveScan(ns, parent, server, target, route) {\\n\\tconst children = ns.scan(server);\\n\\tfor (let child of children) {\\n\\t\\tif (parent == child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child == target) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(server);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\tif (recursiveScan(ns, server, child, target, route)) {\\n\\t\\t\\troute.unshift(server);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst args = ns.flags([[\\\"help\\\", false]]);\\n\\tlet route = [];\\n\\tlet server = args._[0];\\n\\tif (!server || args.help) {\\n\\t\\tns.tprint(\\\"This script helps you find a server on the network and shows you the path to get to it.\\\");\\n\\t\\tns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\n\\t\\tns.tprint(\\\"Example:\\\");\\n\\t\\tns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n\\t\\treturn;\\n\\t}\\n\\n\\tlet connectString = '';\\n\\trecursiveScan(ns, '', 'home', server, route);\\n\\tfor (const i in route) {\\n\\t\\tawait ns.sleep(0);\\n\\t\\tconst extra = i > 0 ? \\\"└ \\\" : \\\"\\\";\\n\\t\\tns.tprint(`${\\\" \\\".repeat(i)}${extra}${route[i]}`);\\n\\t}\\n\\troute.shift();\\n\\tns.tprint(`connect ${route.join(`; connect `)}`);\\n}\\n\\nexport function autocomplete(data, args) {\\n\\treturn data.servers;\\n}\",\"filename\":\"find_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"find_server.js\",\"url\":\"blob:https://danielyxie.github.io/0a82e6d0-0dd8-4525-9d80-a6c8af58133d\",\"moduleSequenceNumber\":326697}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":5788,\"_hash\":\"3b9f505a588b13c309d36d04796340a4ebaa1ba23ac8bb2cf738a08417e8143c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function scan(ns, parent, server, list) {\\n    const children = ns.scan(server);\\n    for (let child of children) {\\n        if (parent == child) {\\n            continue;\\n        }\\n        list.push(child);\\n        \\n        scan(ns, server, child, list);\\n    }\\n}\\n\\nexport function list_servers(ns) {\\n    const list = [];\\n    scan(ns, '', 'home', list);\\n    return list;\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script helps you find an unsolved coding contract.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\n        return;\\n    }\\n\\n    let servers = list_servers(ns);\\n    const boughtServers = ns.getPurchasedServers(ns);\\n    servers = servers.filter(s => !boughtServers.includes(s));\\n    const hostname = servers.find(s => ns.ls(s).find(f => f.endsWith(\\\".cct\\\")))\\n    if(!hostname) {\\n        ns.tprint(\\\"No coding contract found.\\\");\\n        return;\\n    }\\n\\n    ns.tprint(`Found coding contract on '${hostname}'.`)\\n}\",\"filename\":\"find_coding_contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"find_coding_contract.js\",\"url\":\"blob:https://danielyxie.github.io/3a414773-006e-44b8-ab18-f303b48417da\"}],\"dependents\":[],\"ramUsage\":4.25,\"server\":\"home\",\"moduleSequenceNumber\":5789,\"_hash\":\"f7575b403c04875ff0f6e152cd1ea68c59a0ad25d8451a37876469ad338a62ce\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/17bea0ae-3620-4040-8d4a-0ed5e977f899\",\"moduleSequenceNumber\":5848}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":5848,\"_hash\":\"7c3005da5d66c68df85df0df50d2b0b0b00778857a07d88670bbf183a0a4ebec\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/ff421905-959f-4236-8582-792ff06d2a92\",\"moduleSequenceNumber\":5881}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":5881,\"_hash\":\"d23919e9f2448a7ca545faeb9799d8136a808b1dd9c8d5c7ac741c458d2a3156\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/4191fcab-c275-4951-aebd-cb716c5832f5\",\"moduleSequenceNumber\":5815}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":5815,\"_hash\":\"fbec4b055c178ac2b6828ed994c26bf05b233d7383518107ad159953759a8b89\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { list_servers } from 'opened_servers.js';\\nlet ns;\\nconst weaken_script = \\\"weaken.js\\\";\\nconst grow_script = \\\"grow.js\\\";\\nconst hack_script = \\\"hack.js\\\";\\nlet weaken_scriptRam, grow_scriptRam, hack_scriptRam = 1.7;\\nlet serversForExecution = [];\\nlet hackStatus = [];\\n/** @param {NS} pns **/\\nexport async function main(pns) {\\n\\tns = pns;\\n\\tns.disableLog('disableLog');\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('scan');\\n\\tns.disableLog('getScriptRam');\\n\\tns.disableLog('getServerMaxRam');\\n\\tns.disableLog('getServerUsedRam');\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMaxMoney');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('hasRootAccess');\\n\\tns.disableLog('hackAnalyze');\\n\\tns.disableLog('getPurchasedServers');\\n\\tns.disableLog('getHackingLevel');\\n\\tns.disableLog('getServerRequiredHackingLevel');\\n\\tns.disableLog('getServerGrowth');\\n\\tns.tail();\\n\\t// ns.disableLog('ALL');\\n\\tweaken_scriptRam = ns.getScriptRam(weaken_script, \\\"home\\\");\\n\\tgrow_scriptRam = ns.getScriptRam(grow_script, \\\"home\\\");\\n\\thack_scriptRam = ns.getScriptRam(hack_script, \\\"home\\\");\\n\\tawait run();\\n}\\nasync function updateServerLists() {\\n\\tconst openedServers = (await list_servers(ns)).filter(s => ns.hasRootAccess(s))\\n\\tserversForExecution = ['home'].concat(ns.getPurchasedServers()).concat(openedServers);\\n\\tconst beforeHackStatuslength = hackStatus.length;\\n\\tconst serversToHack = (await list_servers(ns)).filter(s => ns.hasRootAccess(s)\\n\\t\\t&& ns.getServerMaxMoney(s) > 0\\n\\t\\t&& ns.getServerRequiredHackingLevel(s) <= ns.getHackingLevel());\\n\\thackStatus = [];\\n\\tconst player = ns.getPlayer();\\n\\tfor (const server of serversToHack) {\\n\\t\\tconst s = ns.getServer(server);\\n\\t\\ts.hackDifficulty = s.minDifficulty;\\n\\t\\t// check that hacks will succeed. Could be redundant check\\n\\t\\tconst hackChance = ns.formulas.hacking.hackChance(s, player);\\n\\t\\tif (hackChance < .99) {\\n\\t\\t\\t//ns.print(`Hack chance to low ${s} ${(hackChance * 100).toFixed(2)}%`)\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (s.serverGrowth < 40) {\\n\\t\\t\\t//ns.print(`Growth is to low ${s} ${s.serverGrowth}%`)\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\thackStatus.push({ server: server });\\n\\t}\\n\\t// after aug install just start hacking on n00dles for the fist 5 mins\\n\\tif (hackStatus.length === 0) hackStatus.push({ server: 'n00dles' });\\n\\tif (beforeHackStatuslength < hackStatus.length) ns.tprint(`Servers to hack ${hackStatus.length} ${hackStatus.map(o => o.server).join(',')}`);\\n}\\n\\nasync function run() {\\n\\tlet i = 0;\\n\\tlet res;\\n\\tawait updateServerLists();\\n\\tlet updateAfter = Date.now().valueOf() + 30 * 1000;\\n\\twhile (true) {\\n\\t\\tconst state = getNextState(hackStatus[i].server, hackStatus[i].nextStateUpdateRequiredAt);\\n\\t\\tif (state) {\\n\\t\\t\\thackStatus[i] = state;\\n\\n\\t\\t\\tswitch (state.nextState) {\\n\\t\\t\\t\\tcase 'weaken':\\n\\t\\t\\t\\t\\tres = await runWeaken(state.server, state.currentSecurity, state.threadsCommitted);\\n\\t\\t\\t\\t\\t// ns.print(`Weak time ${ns.tFormat(res.time)}`);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'grow':\\n\\t\\t\\t\\t\\tres = await runGrow(state.server, state.percentMoney, state.threadsCommitted);\\n\\t\\t\\t\\t\\t// ns.print(`Grow time ${ns.tFormat(res.time)}`);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'hack':\\n\\t\\t\\t\\t\\tres = await runHack(state.server, state.threadsCommitted);\\n\\t\\t\\t\\t\\t// ns.print(`Hack time ${ns.tFormat(res.time)}`);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\n\\t\\t\\tstate.nextStateUpdateRequiredAt = Date.now() + res.time;\\n\\t\\t\\t// ns.print(`Next update at: ${new Date(state.nextStateUpdateRequiredAt).toTimeString()}`);\\n\\t\\t\\tstate.threadsCommitted = res.threadsCommitted\\n\\t\\t}\\n\\t\\ti = (i + 1) % hackStatus.length;\\n\\t\\tawait ns.sleep(1000);\\n\\t\\tif (updateAfter < Date.now()) {\\n\\t\\t\\tupdateAfter = Date.now() + 30 * 1000;\\n\\t\\t\\tawait updateServerLists();\\n\\t\\t\\ti = 0;\\n\\t\\t}\\n\\t}\\n}\\nconst getCores = (host) => ns.getServer(host).cpuCores;\\n\\nasync function runWeaken(target, currentSecurity, threads) {\\n\\tlet time = 0;\\n\\tlet threadsCommitted = 0;\\n\\tconst { host, threads_available } = getHostAndThreads(weaken_scriptRam);\\n\\tif (!host) return { time, threadsCommitted };\\n\\tlet threadToUse = threads_available;\\n\\tconst owk = ns.weakenAnalyze(1, getCores(host));\\n\\tconst threadsNeeded = Math.max(Math.ceil(currentSecurity / owk) - threads, 1);\\n\\tthreadToUse = Math.min(threadToUse, threadsNeeded);\\n\\tif (!ns.fileExists(weaken_script, host)) {\\n\\t\\tawait ns.scp(weaken_script, host);\\n\\t}\\n\\tconst pid = await ns.exec(weaken_script, host, threadToUse, target, Math.random());\\n\\tif (pid > 0) {\\n\\t\\tif (hasFormulas() && threadsNeeded <= threadToUse) {\\n\\t\\t\\ttime = ns.formulas.hacking.weakenTime(ns.getServer(target), ns.getPlayer());\\n\\t\\t}\\n\\t\\t// ns.print(`Weaken ${host}[${threadToUse}] -> ${target}`);\\n\\t\\tthreadsCommitted = threadToUse;\\n\\t}\\n\\treturn { time, threadsCommitted };\\n}\\n\\nasync function runGrow(target, percentMoney, threads) {\\n\\tlet time = 0;\\n\\tlet threadsCommitted = 0;\\n\\tconst { host, threads_available } = getHostAndThreads(grow_scriptRam);\\n\\tif (!host) return { time, threadsCommitted };\\n\\tconst growthFactor = 1 / (percentMoney || 0.0000001);\\n\\tconst threadsNeeded = Math.max(parseInt(ns.growthAnalyze(target, growthFactor, getCores(host)).toFixed(0)) - threads, 1);\\n\\tlet threadToUse = Math.min(threads_available, threadsNeeded);\\n\\tif (!ns.fileExists(grow_script, host)) {\\n\\t\\tawait ns.scp(grow_script, host);\\n\\t}\\n\\n\\tconst pid = await ns.exec(grow_script, host, threadToUse, target, Math.random());\\n\\tif (pid > 0) {\\n\\t\\tif (hasFormulas() && threadsNeeded <= threadToUse) {\\n\\t\\t\\ttime = ns.formulas.hacking.growTime(ns.getServer(target), ns.getPlayer());\\n\\t\\t}\\n\\t\\t// ns.print(`Grow ${host}[${threadToUse}] -> ${target}`);\\n\\t\\tthreadsCommitted = threadToUse;\\n\\t}\\n\\treturn { time, threadsCommitted };\\n}\\n\\nasync function runHack(target, threads) {\\n\\tlet time = 0;\\n\\tlet threadsCommitted = 0;\\n\\tconst { host, threads_available } = getHostAndThreads(hack_scriptRam);\\n\\tif (!host) return { time, threadsCommitted };\\n\\tconst threadsNeeded = Math.max(parseInt((.5 / ns.hackAnalyze(target)).toFixed(0)) - threads, 1);\\n\\tlet threadToUse = Math.min(threads_available, threadsNeeded);\\n\\tif (!ns.fileExists(hack_script, host)) {\\n\\t\\tawait ns.scp(hack_script, host);\\n\\t}\\n\\n\\tconst cashingOut = ns.hackAnalyze(target) * threadToUse * ns.getServerMoneyAvailable(target);\\n\\tconst pid = await ns.exec(hack_script, host, threadToUse, target, Math.random());\\n\\n\\tif (pid > 0) {\\n\\t\\tif (hasFormulas() && threadsNeeded <= threadToUse) {\\n\\t\\t\\ttime = ns.formulas.hacking.hackTime(ns.getServer(target), ns.getPlayer());\\n\\t\\t}\\n\\t\\tns.print(`Hack ${host}[${threadToUse}] -> ${target}[${ns.nFormat(cashingOut, \\\"($ 0.00 a)\\\")}]`);\\n\\t\\tthreadsCommitted = threadToUse;\\n\\t}\\n\\n\\treturn { time, threadsCommitted };\\n}\\nfunction hasFormulas() {\\n\\treturn ns.fileExists('Formulas.exe');\\n}\\nfunction getHostAndThreads(scriptRam) {\\n\\tconst host = serversForExecution.find((host) => {\\n\\t\\tlet maxRam = ns.getServerMaxRam(host);\\n\\t\\t// reserve some ram for other scripts\\n\\t\\tif (host === 'home' && maxRam >= 128) {\\n\\t\\t\\tmaxRam = maxRam - 48;\\n\\t\\t} else if (host === 'home' && maxRam >= 64) {\\n\\t\\t\\tmaxRam = maxRam - 32;\\n\\t\\t} else if (host === 'home' && maxRam === 32) {\\n\\t\\t\\tmaxRam = maxRam - 16;\\n\\t\\t}\\n\\t\\tconst threads_available = Math.floor((maxRam - ns.getServerUsedRam(host)) / scriptRam);\\n\\t\\treturn threads_available >= 1;\\n\\t});\\n\\tif (!host) return { host: null, threads_available: 0 };\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\t// reserve some ram for other scripts\\n\\tif (host === 'home' && maxRam >= 64) {\\n\\t\\tmaxRam = maxRam - 32;\\n\\t} else if (host === 'home' && maxRam === 32) {\\n\\t\\tmaxRam = maxRam - 16;\\n\\t}\\n\\tconst threads_available = Math.floor((maxRam - ns.getServerUsedRam(host)) / scriptRam);\\n\\treturn { host, threads_available };\\n}\\nfunction getNextState(server, nextStateUpdateRequiredAt) {\\n\\tif (nextStateUpdateRequiredAt > Date.now()) return null;\\n\\tlet nextState = 'weaken';\\n\\tconst sec = parseFloat((ns.getServerSecurityLevel(server) - ns.getServerMinSecurityLevel(server)).toFixed(2));\\n\\tconst percentMoney = parseFloat((ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server)).toFixed(2));\\n\\tif (sec > 5) {\\n\\t\\tnextState = 'weaken';\\n\\t} else if (percentMoney < 0.9) {\\n\\t\\tnextState = 'grow';\\n\\t} else {\\n\\t\\tnextState = 'hack';\\n\\t}\\n\\t// \\tns.print(`Next state for ${server} ${nextState} \\n\\t//   $% : ${percentMoney * 100} \\n\\t//   sec: +${sec.toFixed(2)} \\n\\t//   at : ${new Date(nextStateUpdateRequiredAt ? nextStateUpdateRequiredAt : Date.now()).toTimeString()}`);\\n\\treturn {\\n\\t\\tserver: server,\\n\\t\\tnextState: nextState,\\n\\t\\tpercentMoney: percentMoney,\\n\\t\\tcurrentSecurity: sec,\\n\\t\\tnextStateUpdateRequiredAt: 0,\\n\\t\\tthreadsCommitted: 0\\n\\t};\\n}\",\"filename\":\"mcp.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/4a1d17f3-3a8d-4669-b28a-84376b0effa7\",\"moduleSequenceNumber\":5786},{\"filename\":\"mcp.js\",\"url\":\"blob:https://danielyxie.github.io/ff8007c8-4514-4178-8353-96d42d51bc8a\",\"moduleSequenceNumber\":5812}],\"dependents\":[],\"ramUsage\":13.75,\"server\":\"home\",\"moduleSequenceNumber\":5812,\"_hash\":\"40eafd0a62ace6a9ec46bb73cec73dc5213d36aa5cacc77b5a2d69dd95e433ba\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tconst target = 'CSEC';\\n\\tconst server = ns.getServer(target);\\n\\tconst player = ns.getPlayer();\\n\\tns.print(ns.getBitNodeMultipliers())\\n\\tns.print(JSON.stringify(player, null, 2));\\n\\tns.print(ns.gang.getMemberNames())\\n\\tns.print(Math.floor((ns.gang.getMemberNames().length + 1) * .3));\\n\\t// const hnc = ns.hacknet.getPurchaseNodeCost();\\n\\tconst mgr = 0; //ns.hacknet.getNodeStats(200, 64, 16, player.hacknet_node_money_mult)\\n\\t// const htime = ns.formulas.hacking.hackTime(ns.getServer(target), ns.getPlayer());\\n\\n\\t// const owk = ns.weakenAnalyze(1, 4);\\n\\t// const securityLevelToBeat = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\n\\t// const threadsNeeded = Math.ceil(securityLevelToBeat / owk);\\n\\t// const bingo = ns.weakenAnalyze(threads, 4)\\n\\t// ns.print(`${owk} * ${threads} >= ${securityLevelToBeat} `);\\n\\t// ns.tprint(`${ns.hackAnalyze(target)} ${mgr} ${''}`);\\n\\t// ns.print(`${hnc} ${mgr}`);\\n\\t// server.hackDifficulty = server.minDifficulty;\\n\\t// const ht1 = ns.formulas.hacking.growPercent(server, 1, player, 1);\\n\\t// const threads = 2.1 / ht1;\\n\\t// const ht2 = ns.formulas.hacking.growPercent(server, 10000, player, 1);\\n\\t// let percent = 0;\\n\\t// let growThreadsNeeded = 1;\\n\\t// while (percent < 2.1) {\\n\\t// \\tpercent = ns.formulas.hacking.growPercent(server, growThreadsNeeded++, player, 1);\\n\\t// \\tns.print(`${percent}`);\\n\\t// \\tawait ns.sleep(0);\\n\\t// }\\n\\t// server.hackDifficulty = server.minDifficulty;\\n\\t// const ht2 = ns.formulas.hacking.hackPercent(server, player);\\n\\t// ns.print(`${ht1} ${threads} ${ht2} ${growThreadsNeeded} ${percent}`);\\n\\t// let growO = ns.hackAnalyzeSecurity(1);\\n\\t// let growSecurityInc = ns.growthAnalyzeSecurity(1);\\n\\t// ns.print(`${growO} ${1} ${growSecurityInc}`);\\n\\t// \\tconst t = ns.formulas.hacking.weakenTime(server, player);\\n\\t// \\tconst wt1 = Date.now() + ns.formulas.hacking.weakenTime(server, player);\\n\\t// \\tawait ns.sleep(500);\\n\\t// \\tconst wt2 = Date.now() - (wt1 - ns.formulas.hacking.weakenTime(server, player));\\n\\t// \\tns.print(`${t} ${wt2}`);\\n\\n\\t// ns.print(`${ns.hackAnalyze('johnson-ortho')} `);\\n\\n\\n\\tNumber.prototype.toExponential = () => null;\\n\\t// eval('window').performance.now = () => 0;\\n\\n\\n\\t// ns.print(`${ns.alterReality()}`);\\n\\t// ns.print(`${ns.bypass(eval('document'))}`);\\n\\t// eval('document').querySelector(\\\"#unclickable\\\").click()\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"test.js\",\"url\":\"blob:https://danielyxie.github.io/ec8d8817-aa26-4503-bf44-3f41413284fc\",\"moduleSequenceNumber\":2194}],\"dependents\":[],\"ramUsage\":9.1,\"server\":\"home\",\"moduleSequenceNumber\":5794,\"_hash\":\"af2f03b0ce88e6f0b83f35a162009ee18fa7c5b600da8dcfb01a53df06ce6280\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tns.weaken(ns.args[0], ns.args[1]);\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"weaken2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken2.js\",\"url\":\"blob:https://danielyxie.github.io/3ee929bd-de92-40b4-9b91-1be98e1cddd8\"}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":5795,\"_hash\":\"59fe0083f44d8b58fe7e85c4e940b59dd57391e024a7b27fd650669136fbeb41\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tns.hack(ns.args[0], ns.args[1]);\\n\\t\\tawait ns.sleep(3000)\\n\\t}\\n}\",\"filename\":\"hack2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack2.js\",\"url\":\"blob:https://danielyxie.github.io/2ab8d927-5c2f-4378-8ec0-dafe63b9ffdc\"}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":5796,\"_hash\":\"7f8f81ae0c85ddae9ec5f07e78ad809b52f41d08635f7a9d6918518b37bff115\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tns.grow(ns.args[0], ns.args[1]);\\n\\t\\tawait ns.sleep(2000);\\n\\t}\\n}\",\"filename\":\"grow2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow2.js\",\"url\":\"blob:https://danielyxie.github.io/a74a2757-2b5a-4079-8148-b53982e1619d\"}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":5797,\"_hash\":\"714b6ea10fdb7c67e74f1705e57e522f2ca838d748e7de60ac35ada211de7cdb\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { list_servers } from 'opened_servers.js';\\nlet ns;\\nconst weaken_script = \\\"weaken2.js\\\";\\nconst grow_script = \\\"grow2.js\\\";\\nconst hack_script = \\\"hack2.js\\\";\\nlet weaken_scriptRam, grow_scriptRam, hack_scriptRam = 1.75;\\nlet serversForExecution = [];\\n/** @param {NS} pns **/\\nexport async function main(pns) {\\n\\tns = pns;\\n\\t// ns.disableLog('getServerNumPortsRequired');\\n\\t// ns.disableLog('getServerMaxRam');\\n\\t// ns.disableLog('getServerUsedRam');\\n\\t// ns.disableLog('sleep');\\n\\t// ns.disableLog('getServerSecurityLevel');\\n\\t// ns.disableLog('getServerMinSecurityLevel');\\n\\t// ns.disableLog('getServerMaxMoney');\\n\\t// ns.disableLog('getServerMoneyAvailable');\\n\\t// ns.disableLog('scan');\\n\\tns.tail();\\n\\tns.disableLog('ALL');\\n\\tweaken_scriptRam = ns.getScriptRam(weaken_script, \\\"home\\\");\\n\\tgrow_scriptRam = ns.getScriptRam(grow_script, \\\"home\\\");\\n\\thack_scriptRam = ns.getScriptRam(hack_script, \\\"home\\\");\\n\\tconst serversToHack = (await list_servers(ns)).filter(s => ns.hasRootAccess(s)\\n\\t\\t&& ns.getServerMaxMoney(s) > 0\\n\\t\\t&& ns.hackAnalyze(s) > 0);\\n\\tconst hackStatus = []\\n\\tns.tprint(`Servers to hack ${serversToHack.length}`);\\n\\tfor (const server of serversToHack) {\\n\\t\\thackStatus.push({ server: server });\\n\\t\\tawait ns.sleep(10);\\n\\t}\\n\\tserversForExecution = ['home'].concat(ns.getPurchasedServers());\\n\\tawait run(hackStatus);\\n}\\nasync function run(hackStatus) {\\n\\tlet i = 0;\\n\\tconst host = 'home';\\n\\twhile (true) {\\n\\t\\tconst state = hackStatus[i];\\n\\t\\tlet growThreads = await runGrow(host, state.server);\\n\\t\\tlet hackThreads = await runHack(host, state.server);\\n\\t\\tlet pid = await runWeaken(host, state.server, growThreads, hackThreads);\\n\\t\\ti = (i + 1) % hackStatus.length;\\n\\t\\tawait ns.sleep(1);\\n\\t}\\n}\\nconst getCores = (host) => host === 'home' ? 6 : 1;\\n\\nasync function runWeaken(host, target, growThreads, hackThreads) {\\n\\tconst server = ns.getServer(target);\\n\\tlet threadToUse = 1;\\n\\tconst owk = ns.weakenAnalyze(1, getCores(host));\\n\\tconst threadsNeeded = Math.max(Math.ceil(server.minDifficulty / owk), 1);\\n\\t// have the weaken spam work at the maximum between hack or grow security increases\\n\\tserver.hackDifficulty = Math.max(ns.growthAnalyzeSecurity(growThreads), ns.hackAnalyzeSecurity(hackThreads));\\n\\tconst time = ns.formulas.hacking.weakenTime(server, ns.getPlayer());\\n\\tconst hertz = 1000 / time;\\n\\tthreadToUse = Math.ceil(threadsNeeded / hertz);\\n\\n\\tif (!ns.fileExists(weaken_script, host)) {\\n\\t\\tawait ns.scp(weaken_script, host);\\n\\t}\\n\\tconst pid = await ns.exec(weaken_script, host, threadToUse, target, threadsNeeded);\\n\\tif (pid > 0) {\\n\\t\\tns.tprint(`FAILED TO START WEAKEN SPAM ${host}[${threadToUse}] -> ${target}`);\\n\\t}\\n\\treturn pid;\\n}\\n\\nasync function runGrow(host, target) {\\n\\t// try to grow a bit more than hacking to lazily reach equilibrium of 50% of max money hacking\\n\\tconst growthFactor = 2.1;\\n\\tconst threadsNeeded = Math.max(parseInt(ns.growthAnalyze(target, growthFactor, getCores(host)).toFixed(0)), 1);\\n\\tlet threadToUse = 1;\\n\\tconst server = ns.getServer(target);\\n\\t// weaken spam should be keeping this to be true\\n\\tserver.hackDifficulty = server.minDifficulty;\\n\\tconst time = ns.formulas.hacking.growTime(server, ns.getPlayer());\\n\\t// every 2 seconds we grow\\n\\tconst hertz = 2 * 1000 / time;\\n\\tthreadToUse = Math.ceil(threadsNeeded / hertz);\\n\\tif (!ns.fileExists(grow_script, host)) {\\n\\t\\tawait ns.scp(grow_script, host);\\n\\t}\\n\\n\\tconst pid = await ns.exec(grow_script, host, threadToUse, target, threadsNeeded);\\n\\tif (pid > 0) {\\n\\t\\tns.tprint(`FAILED TO START GROW SPAM ${host}[${threadToUse}] -> ${target}`);\\n\\t}\\n\\treturn threadsNeeded;\\n}\\n\\nasync function runHack(host, target) {\\n\\tconst threadsNeeded = Math.max(parseInt((.5 / ns.hackAnalyze(target)).toFixed(0)), 1);\\n\\tlet threadToUse = 1;\\n\\tconst server = ns.getServer(target);\\n\\t// weaken spam should be keeping this to be true\\n\\tserver.hackDifficulty = server.minDifficulty;\\n\\tconst time = ns.formulas.hacking.hackTime(server, ns.getPlayer());\\n\\t// hack a bit slower than grow, ensuring grow stays ahead of hack\\n\\tconst hertz = 2.01 * 1000 / time;\\n\\tthreadToUse = Math.ceil(threadsNeeded / hertz);\\n\\tif (!ns.fileExists(hack_script, host)) {\\n\\t\\tawait ns.scp(hack_script, host);\\n\\t}\\n\\tconst pid = await ns.exec(hack_script, host, threadToUse, target, threadsNeeded);\\n\\tif (pid > 0) {\\n\\t\\tns.tprint(`FAILED TO START HACK SPAM ${host}[${threadToUse}] -> ${target}`);\\n\\t}\\n\\treturn threadsNeeded;\\n}\",\"filename\":\"mcp2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"config.js\",\"url\":\"blob:https://danielyxie.github.io/dd48428e-6547-4cd6-8b5a-6363be1b1cde\"},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/555a2bd2-215e-4a3f-a56e-f769453865d6\"},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/f1390be8-8af7-47fb-81e0-16ded49a3bae\"},{\"filename\":\"mcp2.js\",\"url\":\"blob:https://danielyxie.github.io/c8697b9e-fa10-44ea-9e17-0e0f3626d084\"}],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"home\",\"moduleSequenceNumber\":5798,\"_hash\":\"198d77c32360357fd5a4375dfab57496b962f62b216a5937d67cc65a8b6344c5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ramUsage } from 'utils.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst args = ns.flags([[\\\"help\\\", false]]);\\n\\tif (args.help) {\\n\\t\\tns.tprint(\\\"This script will enhance your HUD (Heads up Display) with custom statistics.\\\");\\n\\t\\tns.tprint(`Usage: run ${ns.getScriptName()}`);\\n\\t\\tns.tprint(\\\"Example:\\\");\\n\\t\\tns.tprint(`> run ${ns.getScriptName()}`);\\n\\t\\treturn;\\n\\t}\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('disableLog');\\n\\tns.disableLog('getServerMaxRam')\\n\\tns.disableLog('getServerUsedRam');\\n\\n\\tconst doc = eval('document');\\n\\tconst hook0 = doc.getElementById('overview-extra-hook-0');\\n\\tconst hook1 = doc.getElementById('overview-extra-hook-1');\\n\\tconst monies = [];\\n\\tlet moneyLastTick = ns.getPlayer().money;\\n\\twhile (true) {\\n\\t\\ttry {\\n\\t\\t\\tconst headers = []\\n\\t\\t\\tconst values = [];\\n\\t\\t\\tconst player = ns.getPlayer();\\n\\n\\t\\t\\theaders.push(\\\"Int\\\");\\n\\t\\t\\tvalues.push(((Math.pow(player.intelligence, 0.8) / 600) * 100).toFixed(2) + '%');\\n\\n\\t\\t\\theaders.push(\\\"Scripts\\\");\\n\\t\\t\\tvalues.push(ns.nFormat(ns.getScriptIncome()[0], \\\"($0.00a)\\\") + '/s');\\n\\n\\t\\t\\tmonies.push(player.money - moneyLastTick);\\n\\t\\t\\tif (monies.length > 600) monies.shift();\\n\\t\\t\\tmoneyLastTick = player.money;\\n\\t\\t\\theaders.push(\\\"Money\\\");\\n\\t\\t\\tvalues.push(ns.nFormat(monies.reduce((a, b) => a + b, 0) / monies.length, \\\"($0.00a)\\\") + '/s');\\n\\n\\t\\t\\theaders.push(\\\"Ram Use\\\");\\n\\t\\t\\tvalues.push((ramUsage(ns) * 100).toFixed(1) + '%');\\n\\n\\t\\t\\theaders.push(\\\"Karma\\\");\\n\\t\\t\\tvalues.push(ns.heart.break().toFixed(0));\\n\\n\\t\\t\\theaders.push(\\\"Kills\\\");\\n\\t\\t\\tvalues.push(player.numPeopleKilled.toFixed(0));\\n\\n\\t\\t\\theaders.push(\\\"Share\\\");\\n\\t\\t\\tvalues.push(((ns.getSharePower() - 1) * 100).toFixed(2) + '%');\\n\\n\\t\\t\\t// Now drop it into the placeholder elements\\n\\t\\t\\thook0.innerText = headers.join(\\\"\\\\n\\\");\\n\\t\\t\\thook1.innerText = values.join(\\\"\\\\n\\\");\\n\\t\\t} catch (err) { // This might come in handy later\\n\\t\\t\\tns.print(\\\"ERROR: Update Skipped: \\\" + String(err));\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"custom-stats.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/2a43823b-d27d-4b4d-a68d-beb0cd565700\",\"moduleSequenceNumber\":5786},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/f415a645-4f18-4f17-8e4c-0c0ffcbe1866\",\"moduleSequenceNumber\":5787},{\"filename\":\"custom-stats.js\",\"url\":\"blob:https://danielyxie.github.io/e84ccc00-bcab-4c0e-83d8-e1623077c698\",\"moduleSequenceNumber\":5814}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"home\",\"moduleSequenceNumber\":5814,\"_hash\":\"4b9469a509c8cf93404e80bb1625b76b7717f843073b3d3bc8f890e2b5eccf59\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getSharePower\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\t\\n\\tns.print(JSON.stringify(ns.getBitNodeMultipliers(), null, 2));\\n\\tns.exec('gangum.js', 'home');\\n\\tns.exec('mcp.js', 'home');\\n\\tns.exec('purchase-servers.js', 'home');\\n\\tns.exec('custom-stats.js', 'home');\\n\\t// ns.exec('charts.js', 'home');\\n\\t// ns.exec('chart_ram.js', 'home');\\n}\",\"filename\":\"init.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"init.js\",\"url\":\"blob:https://danielyxie.github.io/cb350734-05e3-4c4a-acfe-a0a5cd27fa4d\",\"moduleSequenceNumber\":5810}],\"dependents\":[],\"ramUsage\":6.9,\"server\":\"home\",\"moduleSequenceNumber\":5810,\"_hash\":\"7aa01bec4da1f4c16c3d9fb7bd13adf6cfcf9652aa23b26ca06e0fa7ef89f671\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:https://danielyxie.github.io/0d6f74fc-efc3-4caa-861c-6ef8533986bf\",\"moduleSequenceNumber\":279467}],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":5801,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { list_servers } from 'opened_servers.js';\\nconst share_script = \\\"share.js\\\";\\nlet share_scriptRam = 4;\\nlet serversForExecution;\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog('getServerMaxRam');\\n\\tns.disableLog('getServerUsedRam');\\n\\tns.disableLog('sleep');\\n\\tshare_scriptRam = ns.getScriptRam(share_script, \\\"home\\\");\\n\\tconst openedServers = (await list_servers(ns)).filter(s => ns.hasRootAccess(s))\\n\\tserversForExecution = ns.getPurchasedServers().concat(openedServers);\\n\\tlet updateAfter = Date.now().valueOf() + 30 * 1000;\\n\\twhile (true) {\\n\\t\\tif (updateAfter < Date.now()) {\\n\\t\\t\\tconst openedServers = (await list_servers(ns)).filter(s => ns.hasRootAccess(s))\\n\\t\\t\\tserversForExecution = ns.getPurchasedServers().concat(openedServers);\\n\\t\\t\\tupdateAfter = Date.now() + 30 * 1000;\\n\\t\\t}\\n\\t\\tfor (const host of serversForExecution) {\\n\\t\\t\\tconst threadsAvailable = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host)) / share_scriptRam);\\n\\t\\t\\tif (threadsAvailable <= 0) continue;\\n\\t\\t\\tif (!ns.fileExists(share_script, host)) {\\n\\t\\t\\t\\tawait ns.scp(share_script, host);\\n\\t\\t\\t}\\n\\t\\t\\tawait ns.exec(share_script, host, threadsAvailable);\\n\\t\\t\\tawait ns.sleep(0);\\n\\t\\t}\\n\\t\\t// only use max 50% of home for sharing \\n\\t\\tconst threadsAvailable = Math.floor(((ns.getServerMaxRam('home') / 2) - ns.getServerUsedRam('home')) / share_scriptRam);\\n\\t\\tif (threadsAvailable > 0) {\\n\\t\\t\\tawait ns.exec(share_script, 'home', threadsAvailable, Math.random());\\n\\t\\t}\\n\\t\\tawait ns.sleep(0);\\n\\t}\\n}\",\"filename\":\"sharing_is_caring.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/ac5be9c5-0bdd-45fc-abd7-03ac15e67611\",\"moduleSequenceNumber\":277611},{\"filename\":\"sharing_is_caring.js\",\"url\":\"blob:https://danielyxie.github.io/5109b68b-8de2-4598-bed0-41a24e72dde4\",\"moduleSequenceNumber\":279468}],\"dependents\":[],\"ramUsage\":6.7,\"server\":\"home\",\"moduleSequenceNumber\":5802,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//https://github.com/kroitor/asciichart\\n\\n// control sequences for coloring\\n\\nexport const black = \\\"\\\\x1b[30m\\\"\\nexport const red = \\\"\\\\x1b[31m\\\"\\nexport const green = \\\"\\\\x1b[32m\\\"\\nexport const yellow = \\\"\\\\x1b[33m\\\"\\nexport const blue = \\\"\\\\x1b[34m\\\"\\nexport const magenta = \\\"\\\\x1b[35m\\\"\\nexport const cyan = \\\"\\\\x1b[36m\\\"\\nexport const lightgray = \\\"\\\\x1b[37m\\\"\\nexport const adefault = \\\"\\\\x1b[39m\\\"\\nexport const darkgray = \\\"\\\\x1b[90m\\\"\\nexport const lightred = \\\"\\\\x1b[91m\\\"\\nexport const lightgreen = \\\"\\\\x1b[92m\\\"\\nexport const lightyellow = \\\"\\\\x1b[93m\\\"\\nexport const lightblue = \\\"\\\\x1b[94m\\\"\\nexport const lightmagenta = \\\"\\\\x1b[95m\\\"\\nexport const lightcyan = \\\"\\\\x1b[96m\\\"\\nexport const white = \\\"\\\\x1b[97m\\\"\\nexport const reset = \\\"\\\\x1b[0m\\\"\\n\\nexport function colored(char, color) {\\n    // do not color it if color is not specified\\n    return (color === undefined) ? char : (color + char + reset)\\n}\\n\\nexport function plot(series, cfg = undefined) {\\n    // this function takes both one array and array of arrays\\n    // if an array of numbers is passed it is transformed to\\n    // an array of exactly one array with numbers\\n    if (typeof (series[0]) == \\\"number\\\") {\\n        series = [series]\\n    }\\n\\n    cfg = (typeof cfg !== 'undefined') ? cfg : {}\\n\\n    let min = (typeof cfg.min !== 'undefined') ? cfg.min : series[0][0]\\n    let max = (typeof cfg.max !== 'undefined') ? cfg.max : series[0][0]\\n\\n    for (let j = 0; j < series.length; j++) {\\n        for (let i = 0; i < series[j].length; i++) {\\n            min = Math.min(min, series[j][i])\\n            max = Math.max(max, series[j][i])\\n        }\\n    }\\n\\n    let defaultSymbols = ['┼', '┤', '╶', '╴', '─', '╰', '╭', '╮', '╯', '│']\\n    let range = Math.abs(max - min)\\n    let offset = (typeof cfg.offset !== 'undefined') ? cfg.offset : 3\\n    let padding = (typeof cfg.padding !== 'undefined') ? cfg.padding : '           '\\n    let height = (typeof cfg.height !== 'undefined') ? cfg.height : range\\n    let colors = (typeof cfg.colors !== 'undefined') ? cfg.colors : []\\n    let ratio = range !== 0 ? height / range : 1;\\n    let min2 = Math.round(min * ratio)\\n    let max2 = Math.round(max * ratio)\\n    let rows = Math.abs(max2 - min2)\\n    let width = 0\\n    for (let i = 0; i < series.length; i++) {\\n        width = Math.max(width, series[i].length)\\n    }\\n    width = width + offset\\n    let symbols = (typeof cfg.symbols !== 'undefined') ? cfg.symbols : defaultSymbols\\n    let format = (typeof cfg.format !== 'undefined') ? cfg.format : function (x) {\\n        return (padding + x.toFixed(2)).slice(-padding.length)\\n    }\\n\\n    let result = new Array(rows + 1) // empty space\\n    for (let i = 0; i <= rows; i++) {\\n        result[i] = new Array(width)\\n        for (let j = 0; j < width; j++) {\\n            result[i][j] = ' '\\n        }\\n    }\\n    for (let y = min2; y <= max2; ++y) { // axis + labels\\n        let label = format(rows > 0 ? max - (y - min2) * range / rows : y, y - min2)\\n        result[y - min2][Math.max(offset - label.length, 0)] = label\\n        result[y - min2][offset - 1] = (y == 0) ? symbols[0] : symbols[1]\\n    }\\n\\n    for (let j = 0; j < series.length; j++) {\\n        let currentColor = colors[j % colors.length]\\n        let y0 = Math.round(series[j][0] * ratio) - min2\\n        result[rows - y0][offset - 1] = colored(symbols[0], currentColor) // first value\\n\\n        for (let x = 0; x < series[j].length - 1; x++) { // plot the line\\n            let y0 = Math.round(series[j][x + 0] * ratio) - min2\\n            let y1 = Math.round(series[j][x + 1] * ratio) - min2\\n            if (y0 == y1) {\\n                result[rows - y0][x + offset] = colored(symbols[4], currentColor)\\n            } else {\\n                result[rows - y1][x + offset] = colored((y0 > y1) ? symbols[5] : symbols[6], currentColor)\\n                result[rows - y0][x + offset] = colored((y0 > y1) ? symbols[7] : symbols[8], currentColor)\\n                let from = Math.min(y0, y1)\\n                let to = Math.max(y0, y1)\\n                for (let y = from + 1; y < to; y++) {\\n                    result[rows - y][x + offset] = colored(symbols[9], currentColor)\\n                }\\n            }\\n        }\\n    }\\n    return result.map(function (x) { return x.join('') }).join('\\\\n')\\n}\",\"filename\":\"asciichart.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":5803,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as asciichart from 'asciichart.js';\\n//store here to be a bit more persisten to script restarts\\nconst series = { 'n00dles': new Array(50).fill(0) };\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const flags = ns.flags([\\n        ['port', 1],\\n        ['refreshrate', 10000],\\n        ['help', false],\\n    ])\\n    if (flags.help) {\\n        ns.tprint(\\\"This script plots a chart using data from a pipe\\\");\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} PIPE_NUMBER`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} 1`)\\n        return;\\n    }\\n    ns.tail();\\n    ns.disableLog('ALL');\\n    const padding = '       ';\\n    const config = {\\n        offset: 2,    // axis offset from the left (min 2)\\n        padding, // padding string for label formatting (can be overridden)\\n        height: 5,   // any height you want\\n        // the label format function applies default padding\\n        format: function (x, i) { return (padding + ns.nFormat(x, '0.00a')).slice(-padding.length) }\\n    };\\n\\n    const port = flags.port;\\n    ns.print(JSON.stringify(Object.values(series), null, 2));\\n    while (true) {\\n        ns.clearLog();\\n        const dollars = {};\\n        let d = ns.peek(port);\\n        while (d !== 'NULL PORT DATA') {\\n            d = ns.readPort(port)\\n            if (d === 'NULL PORT DATA') continue;\\n            const [target, v] = d.split(':');\\n            const dollar = Math.floor(parseFloat(v));\\n            if (!dollars[target]) dollars[target] = 0;\\n            dollars[target] += dollar;\\n            // ns.toast(`Hacked ${target} ${ns.nFormat(dollar, \\\"$0.000a\\\")}`, 'info', 3000);\\n            series[target] = series[target] || new Array(50).fill(0);\\n        }\\n        ns.print(`Interval ${ns.tFormat(flags.refreshrate)}`)\\n        for (const [target, datum] of Object.entries(series)) {\\n            series[target].push(dollars[target] || 0);\\n            series[target].shift();\\n            ns.print(target);\\n            ns.print(`${asciichart.plot(datum, config)}`);\\n        }\\n        await ns.sleep(flags.refreshrate);\\n    }\\n}\",\"filename\":\"charts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"asciichart.js\",\"url\":\"blob:https://danielyxie.github.io/fa10554f-3439-4c5e-b6fd-3700223e1df1\",\"moduleSequenceNumber\":3101},{\"filename\":\"charts.js\",\"url\":\"blob:https://danielyxie.github.io/c9208acd-fb4b-4bdd-b04a-0a533ee35e58\",\"moduleSequenceNumber\":3113}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":5804,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { runHackScript, getHosts } from 'utils.js';\\nimport { list_servers } from 'opened_servers.js';\\nimport { hackFactor, growthFactor } from 'config.js';\\nlet ns;\\nconst weaken_script = \\\"weaken.js\\\";\\nconst grow_script = \\\"grow.js\\\";\\nconst hack_script = \\\"hack.js\\\";\\nlet hackServers = [];\\nlet importantStuff = {};\\nlet quit = false;\\n/** @param {NS} pns **/\\nexport async function main(pns) {\\n\\tns = pns;\\n\\tns.disableLog('getServerMaxRam');\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('scan');\\n\\tns.disableLog('getHackingLevel');\\n\\tns.disableLog('getServerMaxMoney');\\n\\tns.disableLog('getServerRequiredHackingLevel');\\n\\thackServers = [];\\n\\tquit = false;\\n\\tns.tail();\\n\\trefreshTargets();\\n\\twhile (!quit) {\\n\\t\\tns.clearLog();\\n\\t\\tconst player = ns.getPlayer();\\n\\t\\tfor (const target of hackServers) {\\n\\t\\t\\tawait tryAgain(target, player)\\n\\t\\t\\tns.print(`${target} is: ` + JSON.stringify(importantStuff[target], (k, v) => typeof v === 'number' ? ns.tFormat(Math.ceil(v - Date.now())) : v, 2));\\n\\t\\t}\\n\\t\\tawait ns.sleep(10);\\n\\t}\\n}\\n\\nasync function tryAgain(target, player) {\\n\\timportantStuff[target] = importantStuff[target] || {\\n\\t\\tweakLookAheadG: [],\\n\\t\\tweakLookAheadH: [],\\n\\t\\tgrowLookAhead: [],\\n\\t\\thackLookAhead: [],\\n\\t\\tmostRecentWeakFinish: Date.now()\\n\\t};\\n\\tconst is = importantStuff[target];\\n\\t// filter out any dates in the past\\n\\tis.weakLookAheadG = is.weakLookAheadG.filter(t => t > Date.now());\\n\\tis.weakLookAheadH = is.weakLookAheadH.filter(t => t > Date.now());\\n\\tis.growLookAhead = is.growLookAhead.filter(t => t > Date.now());\\n\\tis.hackLookAhead = is.hackLookAhead.filter(t => t > Date.now());\\n\\tconst server = ns.getServer(target);\\n\\n\\t// Start with adding a weaken its the slowest part of hack\\n\\t// Weaken strength of security increase from a growth factor on a single core host.\\n\\t// No harm to over weaken a server, inefficiency for algorithm simplicity.\\n\\t// Weaken should finish 10s apart so a grow or hack can occur reliably between them\\n\\t// Max 2 weaken calls in weakLookAhead to be popped off by a grow or hack\\n\\tconst weakAt = ns.formulas.hacking.weakenTime(server, player) + Date.now();\\n\\tconst weakWeakDelta = weakAt - is.mostRecentWeakFinish;\\n\\tconst weakMinDelta = 2000;\\n\\tif (weakMinDelta > weakWeakDelta) {\\n\\t\\tns.print(`Next weak in ${ns.tFormat(weakWeakDelta - weakMinDelta)}`);\\n\\t} else if (is.weakLookAheadG.length < 2) {\\n\\t\\tconst currentSecurity = ns.growthAnalyzeSecurity(getGrowThreads(target));\\n\\t\\tconst threads = getWeakThreads(currentSecurity);\\n\\t\\tconst started = await execSomeThreads(weaken_script, threads, target);\\n\\t\\tif (started) {\\n\\t\\t\\tis.mostRecentWeakFinish = weakAt;\\n\\t\\t\\tis.weakLookAheadG.push(is.mostRecentWeakFinish);\\n\\t\\t}\\n\\t} else if (is.weakLookAheadH.length < 2) {\\n\\t\\tconst currentSecurity = ns.hackAnalyzeSecurity(getHackThreads(target));\\n\\t\\tconst threads = getWeakThreads(currentSecurity);\\n\\t\\tconst started = await execSomeThreads(weaken_script, threads, target, true);\\n\\t\\tif (started) {\\n\\t\\t\\tis.mostRecentWeakFinish = weakAt;\\n\\t\\t\\tis.weakLookAheadH.push(is.mostRecentWeakFinish);\\n\\t\\t}\\n\\t}\\n\\tconst currentSecurity = server.hackDifficulty - server.minDifficulty;\\n\\t// wait till security is at minimum before starting the hack grow cycle\\n\\tif (currentSecurity > 0) {\\n\\t\\tns.print(`Waiting for weaken ${target} +${currentSecurity.toFixed(2)}`);\\n\\t\\treturn;\\n\\t}\\n\\t// security is at min to start hack or grow\\n\\tif (is.weakLookAheadG.length > 0 && is.growLookAhead.length == 0) {\\n\\t\\tconst growAt = Date.now() + ns.formulas.hacking.growTime(server, player);\\n\\t\\tconst growWeakDelta = is.weakLookAheadG[0] - growAt;\\n\\t\\tif (500 < growWeakDelta && growWeakDelta < 2000) {\\n\\t\\t\\tns.print(`Next grow window in ${ns.tFormat(growWeakDelta - 500)} growAt ${ns.tFormat(growAt - Date.now())}`);\\n\\t\\t} else {\\n\\t\\t\\tconst threads = getGrowThreads(target);\\n\\t\\t\\tconst started = await execSomeThreads(grow_script, threads, target);\\n\\t\\t\\tif (started) {\\n\\t\\t\\t\\tis.weakLookAheadG.shift();\\n\\t\\t\\t\\tis.growLookAhead.push(growAt);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tif (is.weakLookAheadH.length > 0 && is.growLookAhead.length > 0) {\\n\\t\\tconst hackAt = Date.now() + ns.formulas.hacking.hackTime(server, player);\\n\\t\\tconst hackWeakDelta = is.weakLookAheadH[0] - hackAt;\\n\\t\\tconst hackGrowDelta = is.growLookAhead[0] - hackAt;\\n\\t\\tif ((500 < hackGrowDelta && hackGrowDelta < 5000) && (500 < hackWeakDelta && hackWeakDelta < 2000)) {\\n\\t\\t\\tns.print(`Next hack window in ${ns.tFormat(hackWeakDelta - 500)} growAt ${ns.tFormat(hackAt - Date.now())}`);\\n\\t\\t} else {\\n\\t\\t\\tconst threads = getHackThreads(target);\\n\\t\\t\\tawait execSomeThreads(hack_script, threads, target, true);\\n\\t\\t\\tis.hackLookAhead.push(hackAt);\\n\\t\\t\\tis.growLookAhead.shift();\\n\\t\\t\\tis.weakLookAheadH.shift();\\n\\t\\t}\\n\\t}\\n}\\nconst getWeakThreads = (securityDiff) => Math.ceil(securityDiff / ns.weakenAnalyze(1, 1));\\nconst getGrowThreads = (targetHostname) => Math.ceil(ns.growthAnalyze(targetHostname, growthFactor));\\nconst getHackThreads = (targetHostname) => Math.ceil(Math.floor(hackFactor / ns.hackAnalyze(targetHostname)));\\n\\nasync function execSomeThreads(script, threads, targetName, partial) {\\n\\tlet started = true;\\n\\tconst hosts = findHostsForThreads(threads, ns.getScriptRam(script), partial);\\n\\tif (!hosts.length) {\\n\\t\\tns.print(`No host available for a ${script} of ${targetName}[${threads}]`);\\n\\t\\treturn false;\\n\\t}\\n\\tfor (const host of hosts) {\\n\\t\\tconst pid = await runHackScript(ns, script, host.host, host.threads, targetName);\\n\\t\\tif (pid <= 0) {\\n\\t\\t\\tns.print(`FAILED TO START ${script} ${host.host}[${host.threads}] -> ${targetName}`);\\n\\t\\t\\tstarted = false;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\treturn started;\\n}\\n\\nfunction findHostsForThreads(threads, scriptRam, returnPartial) {\\n\\tlet threadAcc = threads;\\n\\tconst hosts = getHosts(ns, scriptRam);\\n\\tconst res = [];\\n\\tfor (const host of hosts) {\\n\\t\\tif (threadAcc <= 0) break;\\n\\t\\tconst useThreads = Math.min(threadAcc, host.threadsAvailable);\\n\\t\\tif (useThreads > 0) {\\n\\t\\t\\tres.push({ host: host.server.hostname, threads: useThreads });\\n\\t\\t}\\n\\t\\tthreadAcc -= useThreads;\\n\\t}\\n\\tns.print(`threadAcc ${threadAcc}`);\\n\\tif (threadAcc > 0 && !returnPartial) return [];\\n\\treturn res;\\n}\\n\\nfunction refreshTargets() {\\n\\tconst player = ns.getPlayer();\\n\\tconst beforeHackStatuslength = hackServers.length;\\n\\tconst serversToHack = list_servers(ns).filter(s => ns.hasRootAccess(s)\\n\\t\\t&& ns.getServerMaxMoney(s) > 0\\n\\t\\t&& ns.getServerRequiredHackingLevel(s) <= ns.getHackingLevel()\\n\\t\\t&& s === 'n00dles');\\n\\thackServers = [];\\n\\tfor (const s of serversToHack) {\\n\\t\\tconst server = ns.getServer(s);\\n\\t\\tserver.hackDifficulty = server.minDifficulty;\\n\\t\\t// check that hacks will succeed. Could be redundant check\\n\\t\\tconst hackChance = ns.formulas.hacking.hackChance(server, player);\\n\\t\\tif (hackChance < .95) {\\n\\t\\t\\tns.print(`Hack chance to low ${s} ${(hackChance * 100).toFixed(2)}%`)\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (server.serverGrowth < 40) {\\n\\t\\t\\tns.print(`Growth is to low ${s} ${server.serverGrowth}%`)\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\thackServers.push(s);\\n\\t}\\n\\t// new reset from augs just hack n00dles\\n\\tif (hackServers.length === 0) {\\n\\t\\thackServers.push('n00dles');\\n\\t}\\n\\tif (beforeHackStatuslength < hackServers.length) ns.print(`Servers to hack ${hackServers.length}`);\\n}\",\"filename\":\"mcp_advance.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"config.js\",\"url\":\"blob:https://danielyxie.github.io/761c83a0-f723-4b9f-b8ee-06e880e92e89\",\"moduleSequenceNumber\":75},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/c59eaf96-7d51-4b6e-b3a3-5dac24871b96\",\"moduleSequenceNumber\":78},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/d94b2090-43e5-4145-ba36-3030998e9145\",\"moduleSequenceNumber\":78},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/9452c552-276c-4ea8-a59c-fb19aa3047fc\",\"moduleSequenceNumber\":79},{\"filename\":\"mcp_advance.js\",\"url\":\"blob:https://danielyxie.github.io/38a18a93-57a6-44cb-b4be-9fd637387fb0\",\"moduleSequenceNumber\":141}],\"dependents\":[],\"ramUsage\":14.4,\"server\":\"home\",\"moduleSequenceNumber\":5805,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tns.exec('grow.js', 'home', 14, 'foodnstuff');\\n\\t\\tawait ns.sleep(21 * 1000);\\n\\t}\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grower.js\",\"url\":\"blob:https://danielyxie.github.io/a6f9cdc8-09af-4a44-af91-31db63824efd\",\"moduleSequenceNumber\":98435}],\"dependents\":[],\"ramUsage\":2.9,\"server\":\"home\",\"moduleSequenceNumber\":5806,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { list_servers } from \\\"opened_servers.js\\\";\\n\\n/** @param {NS} ns **/\\nexport function main(ns) {\\n    const contracts = list_servers(ns).map((server) => {\\n        const onServer = ns.ls(server, \\\".cct\\\").map((contract) => {\\n            const type = ns.codingcontract.getContractType(contract, server);\\n            const data = ns.codingcontract.getData(contract, server);\\n            const didSolve = solve(type, data, server, contract, ns);\\n            return `${server} - ${contract} - ${type} - ${didSolve || \\\"FAILED!\\\"}`;\\n        });\\n        return onServer;\\n    }).filter(o => o.length);\\n    ns.tprint(`Found ${contracts.length} contracts`);\\n    contracts.forEach((contract) => ns.tprint(contract));\\n}\\n\\nfunction solve(type, data, server, contract, ns) {\\n    let solution;\\n    switch (type) {\\n        case \\\"Algorithmic Stock Trader I\\\":\\n            solution = maxProfit([1, data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader II\\\":\\n            solution = maxProfit([Math.ceil(data.length / 2), data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader III\\\":\\n            solution = maxProfit([2, data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader IV\\\":\\n            solution = maxProfit(data);\\n            break;\\n        case \\\"Minimum Path Sum in a Triangle\\\":\\n            solution = solveTriangleSum(data, ns);\\n            break;\\n        case \\\"Unique Paths in a Grid I\\\":\\n            solution = uniquePathsI(data);\\n            break;\\n        case \\\"Unique Paths in a Grid II\\\":\\n            solution = uniquePathsII(data);\\n            break;\\n        case \\\"Generate IP Addresses\\\":\\n            solution = generateIps(data);\\n            break;\\n        case \\\"Find Largest Prime Factor\\\":\\n            solution = factor(data);\\n            break;\\n        case \\\"Spiralize Matrix\\\":\\n            solution = spiral(data);\\n            break;\\n        case \\\"Merge Overlapping Intervals\\\":\\n            solution = mergeOverlap(data);\\n            break;\\n        case \\\"Subarray with Maximum Sum\\\":\\n            solution = subArrayMaxSum(data);\\n            break;\\n        case \\\"Array Jumping Game\\\":\\n            solution = arrayJump(data);\\n            break;\\n        case \\\"Find All Valid Math Expressions\\\":\\n            solution = allExpressions(data);\\n            break;\\n        case \\\"Sanitize Parentheses in Expression\\\":\\n            solution = sanitizeParentheses(data);\\n            break;\\n        case \\\"Total Ways to Sum\\\":\\n            solution = totalWayToSum(data);\\n            break;\\n        default:\\n            solution = \\\"\\\";\\n            ns.tprint(type + ' No solution implemented');\\n            break;\\n    }\\n    return (solution != \\\"\\\") ? ns.codingcontract.attempt(solution, contract, server, { returnReward: true }) : \\\"\\\";\\n}\\n\\n//ALGORITHMIC STOCK TRADER\\n\\nfunction maxProfit(arrayData) {\\n    let i, j, k;\\n\\n    let maxTrades = arrayData[0];\\n    let stockPrices = arrayData[1];\\n\\n    // WHY?\\n    let tempStr = \\\"[0\\\";\\n    for (i = 0; i < stockPrices.length; i++) {\\n        tempStr += \\\",0\\\";\\n    }\\n    tempStr += \\\"]\\\";\\n    let tempArr = \\\"[\\\" + tempStr;\\n    for (i = 0; i < maxTrades - 1; i++) {\\n        tempArr += \\\",\\\" + tempStr;\\n    }\\n    tempArr += \\\"]\\\";\\n\\n    let highestProfit = JSON.parse(tempArr);\\n\\n    for (i = 0; i < maxTrades; i++) {\\n        for (j = 0; j < stockPrices.length; j++) { // Buy / Start\\n            for (k = j; k < stockPrices.length; k++) { // Sell / End\\n                if (i > 0 && j > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n                } else if (i > 0 && j > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n                } else if (i > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n                } else if (j > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n                } else {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], stockPrices[k] - stockPrices[j]);\\n                }\\n            }\\n        }\\n    }\\n    return highestProfit[maxTrades - 1][stockPrices.length - 1];\\n}\\n\\n//SMALLEST TRIANGLE SUM\\n\\nfunction solveTriangleSum(arrayData, ns) {\\n    let triangle = arrayData;\\n    let nextArray;\\n    let previousArray = triangle[0];\\n\\n    for (let i = 1; i < triangle.length; i++) {\\n        nextArray = [];\\n        for (let j = 0; j < triangle[i].length; j++) {\\n            if (j == 0) {\\n                nextArray.push(previousArray[j] + triangle[i][j]);\\n            } else if (j == triangle[i].length - 1) {\\n                nextArray.push(previousArray[j - 1] + triangle[i][j]);\\n            } else {\\n                nextArray.push(Math.min(previousArray[j], previousArray[j - 1]) + triangle[i][j]);\\n            }\\n\\n        }\\n\\n        previousArray = nextArray;\\n    }\\n\\n    return Math.min.apply(null, nextArray);\\n}\\n\\n//UNIQUE PATHS IN A GRID\\n\\nfunction uniquePathsI(grid) {\\n    const rightMoves = grid[0] - 1;\\n    const downMoves = grid[1] - 1;\\n\\n    return Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / (factorial(downMoves)));\\n}\\n\\nfunction factorial(n) {\\n    return factorialDivision(n, 1);\\n}\\n\\nfunction factorialDivision(n, d) {\\n    if (n == 0 || n == 1 || n == d)\\n        return 1;\\n    return factorialDivision(n - 1, d) * n;\\n}\\n\\nfunction uniquePathsII(grid, ignoreFirst = false, ignoreLast = false) {\\n    const rightMoves = grid[0].length - 1;\\n    const downMoves = grid.length - 1;\\n\\n    let totalPossiblePaths = Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / (factorial(downMoves)));\\n\\n    for (let i = 0; i < grid.length; i++) {\\n        for (let j = 0; j < grid[i].length; j++) {\\n\\n            if (grid[i][j] == 1 && (!ignoreFirst || (i != 0 || j != 0)) && (!ignoreLast || (i != grid.length - 1 || j != grid[i].length - 1))) {\\n                const newArray = [];\\n                for (let k = i; k < grid.length; k++) {\\n                    newArray.push(grid[k].slice(j, grid[i].length));\\n                }\\n\\n                let removedPaths = uniquePathsII(newArray, true, ignoreLast);\\n                removedPaths *= uniquePathsI([i + 1, j + 1]);\\n\\n                totalPossiblePaths -= removedPaths;\\n            }\\n        }\\n\\n    }\\n\\n    return totalPossiblePaths;\\n}\\n\\n//GENERATE IP ADDRESSES\\n\\nfunction generateIps(num) {\\n    num = num.toString();\\n\\n    const length = num.length;\\n\\n    const ips = [];\\n\\n    for (let i = 1; i < length - 2; i++) {\\n        for (let j = i + 1; j < length - 1; j++) {\\n            for (let k = j + 1; k < length; k++) {\\n                const ip = [\\n                    num.slice(0, i),\\n                    num.slice(i, j),\\n                    num.slice(j, k),\\n                    num.slice(k, num.length)\\n                ];\\n                let isValid = true;\\n\\n                ip.forEach(seg => {\\n                    isValid = isValid && isValidIpSegment(seg);\\n                });\\n\\n                if (isValid) ips.push(ip.join(\\\".\\\"));\\n\\n            }\\n\\n        }\\n    }\\n\\n    return ips;\\n\\n}\\n\\nfunction isValidIpSegment(segment) {\\n    if (segment[0] == \\\"0\\\" && segment != \\\"0\\\") return false;\\n    segment = Number(segment);\\n    if (segment < 0 || segment > 255) return false;\\n    return true;\\n}\\n\\n//GREATEST FACTOR\\n\\nfunction factor(num) {\\n    for (let div = 2; div <= Math.sqrt(num); div++) {\\n        if (num % div != 0) {\\n            continue;\\n        }\\n        num = num / div;\\n        div = 1;\\n    }\\n    return num;\\n}\\n\\n//SPIRALIZE Matrix\\n\\nfunction spiral(arr, accum = []) {\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(arr.shift());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(column(arr, arr[0].length - 1));\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(arr.pop().reverse());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(column(arr, 0).reverse());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    return spiral(arr, accum);\\n}\\n\\nfunction column(arr, index) {\\n    const res = [];\\n    for (let i = 0; i < arr.length; i++) {\\n        const elm = arr[i].splice(index, 1)[0];\\n        if (elm) {\\n            res.push(elm);\\n        }\\n    }\\n    return res;\\n}\\n\\n// Merge Overlapping Intervals\\n\\nfunction mergeOverlap(intervals) {\\n    intervals.sort(([minA], [minB]) => minA - minB);\\n    for (let i = 0; i < intervals.length; i++) {\\n        for (let j = i + 1; j < intervals.length; j++) {\\n            const [min, max] = intervals[i];\\n            const [laterMin, laterMax] = intervals[j];\\n            if (laterMin <= max) {\\n                const newMax = laterMax > max ? laterMax : max;\\n                const newInterval = [min, newMax];\\n                intervals[i] = newInterval;\\n                intervals.splice(j, 1);\\n                j = i;\\n            }\\n        }\\n    }\\n    return intervals;\\n}\\n\\n// Subarray with Maximum Sum\\n\\nfunction subArrays(arr, start, end, acc) {\\n    // Stop if we have reached the end of the array    \\n    if (end === arr.length)\\n        return acc;\\n    // Increment the end point and start from 0\\n    else if (start > end)\\n        subArrays(arr, 0, end + 1, acc);\\n    // create the subarray\\n    else {\\n        let subArr = [];\\n        for (var i = start; i < end; i++) {\\n            subArr.push(arr[i]);\\n        }\\n        subArr.push(arr[end]);\\n        acc.push(subArr);\\n\\n        subArrays(arr, start + 1, end, acc);\\n    }\\n    return acc;\\n}\\n\\nfunction subArrayMaxSum(arr) {\\n    arr = arr || [-6, 4, 1, 8, 10, -6];\\n    const arrays = subArrays(arr, 0, 0, []);\\n    const sums = arrays.map(o => o.reduce((a, b) => a + b, 0));\\n    return Math.max(...sums);\\n}\\n\\n\\nfunction arrayJump(arr) {\\n    let n = arr.length;\\n    let jumps = Array.from({ length: n }, (_, i) => 0);\\n    let min;\\n    jumps[n - 1] = 0;\\n    for (let i = n - 2; i >= 0; i--) {\\n        if (arr[i] == 0)\\n            jumps[i] = Number.MAX_VALUE;\\n        else if (arr[i] >= n - i - 1)\\n            jumps[i] = 1;\\n        else {\\n            min = Number.MAX_VALUE;\\n            for (let j = i + 1; j < n && j <= arr[i] + i; j++) {\\n                if (min > jumps[j])\\n                    min = jumps[j];\\n            }\\n            if (min != Number.MAX_VALUE)\\n                jumps[i] = min + 1;\\n            else\\n                jumps[i] = min;\\n        }\\n    }\\n    return jumps[0] < Number.MAX_VALUE ? 1 : 0;\\n}\\n\\n\\n// works for simple answers locks up a browser for large ones\\nfunction allExpressions(data) {\\n    const digits = data[0].split('')\\n    const operators = ['+', '-', '*', '']\\n    let expressions = [digits[0], '-' + digits[0]]\\n        .flatMap(d => operators.map(op => d + op))\\n    for (let i = 1; i < digits.length - 1; i++) {\\n        expressions = expressions\\n            .flatMap(e => operators.map(op => e + digits[i] + op))\\n    }\\n    return expressions.map(e => e + digits[digits.length - 1])\\n        .filter(e => {\\n            try { return eval(e) === data[1] }\\n            catch (e) { return false }\\n        })\\n}\\n\\n// Sanitize Parentheses in Expression\\n\\nfunction sanitizeParentheses(data) {\\n    var solution = Sanitize(data)\\n    if (solution == null) { return ('[\\\"\\\"]') }\\n    else { return (\\\"[\\\" + solution.join(\\\",\\\") + \\\"]\\\") }\\n}\\n\\nfunction Sanitize_removeOneParth(item) {\\n    var possibleAnswers = []\\n    for (let i = 0; i < item.length; i++) {\\n        if (item[i].toLowerCase().indexOf(\\\"(\\\") === -1 && item[i].toLowerCase().indexOf(\\\")\\\") === -1) {\\n            continue\\n        }\\n        let possible = item.substring(0, i) + item.substring(i + 1);\\n        possibleAnswers.push(possible)\\n    }\\n    return possibleAnswers\\n}\\n\\nfunction Sanitize_isValid(item) {\\n    var unclosed = 0\\n    for (var i = 0; i < item.length; i++) {\\n        if (item[i] == \\\"(\\\") { unclosed++ }\\n        else if (item[i] == \\\")\\\") { unclosed-- }\\n        if (unclosed < 0) { return false }\\n    }\\n    return unclosed == 0\\n}\\n\\nfunction Sanitize(data) {\\n    var currentPossible = [data]\\n    for (var i = 0; i < currentPossible.length; i++) {\\n        var newPossible = new Set()\\n        for (var j = 0; j < currentPossible.length; j++) {\\n            let newRemovedPossible = Sanitize_removeOneParth(currentPossible[j])\\n\\n            for (let item of newRemovedPossible) {\\n                newPossible.add(item)\\n            }\\n        }\\n\\n        var validBoolList = []\\n\\n        for (let item of newPossible) {\\n            validBoolList.push(Sanitize_isValid(item))\\n        }\\n        if (validBoolList.includes(true)) {\\n            var finalList = []\\n            newPossible = [...newPossible]\\n\\n            for (var j = 0; j < validBoolList.length; j++) {\\n                if (validBoolList[j]) {\\n                    finalList.push(newPossible[j])\\n                }\\n            }\\n\\n            finalList = new Set(finalList)\\n\\n            return [...finalList]\\n        }\\n        currentPossible = [...newPossible]\\n    }\\n\\n    return null\\n}\\n\\nfunction totalWayToSum(data) {\\n    let cache = {};\\n    let n = data;\\n    return twts(n, n, cache) - 1;\\n}\\n\\nfunction twts(limit, n, cache) {\\n    if (n < 1) { return 1; }\\n    if (limit == 1) { return 1; }\\n    if (n < limit) { return twts(n, n, cache); }\\n\\n    if (n in cache) {\\n        let c = cache[n];\\n        if (limit in c) { return c[limit]; }\\n    }\\n\\n    let s = 0;\\n    for (let i = 1; i <= limit; i++) {\\n        s += twts(i, n - i, cache);\\n    }\\n\\n    if (!(n in cache)) { cache[n] = {}; }\\n    cache[n][limit] = s; return s;\\n}\",\"filename\":\"autosolver.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/e27ff426-e82e-4062-939f-b8a8797164e2\",\"moduleSequenceNumber\":3553},{\"filename\":\"autosolver.js\",\"url\":\"blob:https://danielyxie.github.io/25b415fc-81c1-4b71-9c01-b5330f89293d\",\"moduleSequenceNumber\":3746}],\"dependents\":[],\"ramUsage\":22.55,\"server\":\"home\",\"moduleSequenceNumber\":5807,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as asciichart from 'asciichart.js';\\nimport { ramUsage } from 'utils.js'\\n//store here to be a bit more persisten to script restarts\\nconst series = { 'ramUsage': new Array(53).fill(0) };\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const flags = ns.flags([\\n        ['refreshrate', 5000],\\n        ['help', false],\\n    ])\\n    if (flags.help) {\\n        ns.tprint(\\\"This script plots a chart of ram use\\\");\\n        ns.tprint(`USAGE: run ${ns.getScriptName()}`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\n        return;\\n    }\\n    ns.tail();\\n    ns.disableLog('ALL');\\n    const padding = '    ';\\n    const config = {\\n        offset: 2,    // axis offset from the left (min 2)\\n        padding, // padding string for label formatting (can be overridden)\\n        height: 10,   // any height you want\\n        max: 1.0,\\n        min: 0.0,\\n        // the label format function applies default padding\\n        format: function (x, i) { return (padding + ns.nFormat(x, '0%')).slice(-padding.length) }\\n    };\\n    ns.print(JSON.stringify(Object.values(series), null, 2));\\n    while (true) {\\n        ns.clearLog();\\n        ns.print(`Interval ${ns.tFormat(flags.refreshrate)}`);\\n        const target = 'ramUsage';\\n        series[target].push(ramUsage(ns));\\n        series[target].shift();\\n        ns.print(target);\\n        ns.print(`${asciichart.plot(series[target], config)}`);\\n        await ns.sleep(flags.refreshrate);\\n    }\\n}\",\"filename\":\"chart_ram.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/4115714f-afaf-4d7a-bab4-5d0706549eb5\",\"moduleSequenceNumber\":3084},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/7c4fdf2d-8732-4157-b34e-34d323762f58\",\"moduleSequenceNumber\":3085},{\"filename\":\"asciichart.js\",\"url\":\"blob:https://danielyxie.github.io/972b30b9-1e69-4129-ace9-5a54a1a38504\",\"moduleSequenceNumber\":3101},{\"filename\":\"chart_ram.js\",\"url\":\"blob:https://danielyxie.github.io/0a63868d-0868-4af1-ba81-fca96ad1a77e\",\"moduleSequenceNumber\":3114}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"home\",\"moduleSequenceNumber\":5808,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let ns;\\n\\nlet gang = {};\\nlet members = [];\\nlet tasks = [];\\nconst percentAtWar = .5;\\n\\n/** @param {NS} pns **/\\nexport async function main(pns) {\\n\\tns = pns;\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('gang.purchaseEquipment');\\n\\tns.disableLog('gang.setMemberTask');\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('gang.setTerritoryWarfare');\\n\\tns.clearLog();\\n\\tns.tail();\\n\\tif (!ns.gang.inGang()) {\\n\\t\\t//ns.createGang('Slum Snakes')... todo\\n\\t\\treturn;\\n\\t}\\n\\tconst moneyTask = ns.formulas.gang.moneyGain;\\n\\tconst respectTask = ns.formulas.gang.respectGain;\\n\\tconst wantedTask = (g, m, t) => -1 * ns.formulas.gang.wantedLevelGain(g, m, t);\\n\\twhile (true) {\\n\\t\\tgang = ns.gang.getGangInformation();\\n\\t\\tif (ns.gang.canRecruitMember() && ns.gang.recruitMember('g' + (ns.gang.getMemberNames().length + 1))) {\\n\\t\\t\\tns.toast('Recruited', 'info', 10000);\\n\\t\\t\\tns.print('Recruited');\\n\\t\\t}\\n\\t\\tgetMembersStats();\\n\\t\\tgetTasksStats();\\n\\t\\tascend();\\n\\t\\tsetTasks(moneyTask);\\n\\t\\tequip();\\n\\t\\twar();\\n\\n\\t\\tawait ns.sleep((ns.gang.getBonusTime() ? 6 : 60) * 1000);\\n\\t}\\n}\\n\\nfunction war() {\\n\\tconst og = ns.gang.getOtherGangInformation();\\n\\tconst strongerGangs = Object.values(og).filter(s => s.power > gang.power).length === 0;\\n\\tif (gang.territoryWarfareEngaged !== strongerGangs) {\\n\\t\\tns.print(`Changing warefare to ${strongerGangs}`);\\n\\t\\tns.toast(`Changing warefare to ${strongerGangs}`, strongerGangs ? 'info' : 'warning', 30000);\\n\\t}\\n\\tns.gang.setTerritoryWarfare(strongerGangs);\\n}\\n\\nfunction equip() {\\n\\tconst equipmentNames = ns.gang.getEquipmentNames();\\n\\tfor (const member of members) {\\n\\t\\tfor (const equipName of equipmentNames) {\\n\\t\\t\\tconst stats = ns.gang.getEquipmentStats(equipName);\\n\\t\\t\\tif (ns.gang.getEquipmentCost(equipName) < ns.getServerMoneyAvailable(\\\"home\\\") * .7) {\\n\\t\\t\\t\\tif ((gang.isHacking && (stats.hack || stats.cha)) || (!gang.isHacking && (stats.agi || stats.def || stats.dex || stats.str))) {\\n\\t\\t\\t\\t\\tif (ns.gang.purchaseEquipment(member.name, equipName)) {\\n\\t\\t\\t\\t\\t\\tns.print(`Purchased ${equipName} for ${member.name}`);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\nfunction ascend() {\\n\\tfor (const member of members) {\\n\\t\\tlet multis = member.agi_asc_mult;\\n\\t\\tmultis += member.def_asc_mult;\\n\\t\\tmultis += member.dex_asc_mult;\\n\\t\\tmultis += member.hack_asc_mult;\\n\\t\\tmultis += member.str_asc_mult;\\n\\t\\tconst res = ns.gang.getAscensionResult(member.name);\\n\\t\\tif (!res) continue;\\n\\t\\t// let res_multi = res.agi + res.def + res.dex + res.hack + res.str - 5.1;\\n\\t\\t//if (multis * 2 < res_multi) {\\n\\t\\t// ascend values are kinda odd to get a feel for.\\n\\t\\t// result multiplier are a percentage increase of the current value.\\n\\t\\t// multiply these together if the multipliers go up by 5 times then good enough to ascend\\n\\t\\tlet res_multi = res.agi * res.def * res.dex * res.hack * res.str;\\n\\t\\tif (res_multi > 5) {\\n\\t\\t\\tns.gang.ascendMember(member.name);\\n\\t\\t\\tns.print(`Ascended ${member.name} multis ${multis.toPrecision(4)}, res_multi ${res_multi.toPrecision(4)}`);\\n\\t\\t\\tns.toast(`Ascended ${member.name} multis ${multis.toPrecision(4)}, res_multi ${res_multi.toPrecision(4)}`, 'info', 30000)\\n\\t\\t}\\n\\t}\\n}\\nfunction getMembersStats() {\\n\\tmembers = [];\\n\\tconst names = ns.gang.getMemberNames();\\n\\tfor (const name of names) {\\n\\t\\tmembers.push(ns.gang.getMemberInformation(name));\\n\\t}\\n}\\nfunction getTasksStats() {\\n\\ttasks = [];\\n\\tconst names = ns.gang.getTaskNames();\\n\\tfor (const name of names) {\\n\\t\\ttasks.push(ns.gang.getTaskStats(name));\\n\\t}\\n}\\nlet vigilantesNeeded = 0;\\nfunction setTasks(taskFunc) {\\n\\tlet viglante = 0;\\n\\tif (ns.formulas.gang.wantedPenalty(gang) < 0.99 && gang.wantedLevel > 2) {\\n\\t\\tvigilantesNeeded = (vigilantesNeeded * 1.5) || .15;\\n\\t\\tviglante = Math.floor(members.length * vigilantesNeeded);\\n\\t\\t// little float overflow reversal \\n\\t\\tvigilantesNeeded = viglante >= members.length ? vigilantesNeeded / 2 : vigilantesNeeded;\\n\\t} else {\\n\\t\\tvigilantesNeeded = 0;\\n\\t}\\n\\t// if not skilled enough to do better that nothing or the first task help out with the war effort\\n\\t// Otherwise newest recruits go to war effort\\n\\tconst warriors = Math.round(members.length * percentAtWar);\\n\\t//\\tns.print(`viglante ${viglante} warriors ${warriors}`)\\n\\tlet i = 0;\\n\\tfor (const member of members) {\\n\\t\\ti++;\\n\\t\\tlet prevTask = member.task;\\n\\t\\tlet bestTask = '';\\n\\t\\tlet mg = 0;\\n\\t\\tfor (const task of tasks) {\\n\\t\\t\\tlet nmg = taskFunc(gang, member, task);\\n\\t\\t\\tif (nmg > mg) {\\n\\t\\t\\t\\tbestTask = task.name;\\n\\t\\t\\t\\tmg = nmg;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (bestTask === '' || bestTask === tasks[1].name || members.length - i < warriors) {\\n\\t\\t\\tbestTask = 'Territory Warfare';\\n\\t\\t}\\n\\t\\tif (vigilantesNeeded != 0 && warriors <= members.length - i && members.length - i < viglante + warriors) {\\n\\t\\t\\tbestTask = 'Vigilante Justice';\\n\\t\\t}\\n\\t\\tif (ns.gang.setMemberTask(member.name, bestTask) && prevTask !== bestTask) {\\n\\t\\t\\tns.print(`assigned Gang Member '${member.name}' to '${bestTask}' task`);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gangum.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"gangum.js\",\"url\":\"blob:https://danielyxie.github.io/682e934e-fc48-4857-bb61-8e0b1682c6e6\",\"moduleSequenceNumber\":5811}],\"dependents\":[],\"ramUsage\":33.8,\"server\":\"home\",\"moduleSequenceNumber\":5811,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.canRecruitMember\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.recruitMember\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getOtherGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.setTerritoryWarfare\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentStats\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getAscensionResult\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getTaskNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getTaskStats\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {css} from \\\"/box/css.js\\\";\\nexport let doc=eval(\\\"document\\\"), win=globalThis;\\nlet zIndex=()=>Math.max(9000,...Array.from(doc.querySelectorAll(\\\".box\\\")).map(box=>box.style.zIndex))+1;\\nif (!win._boxEdgeDetect) win._boxEdgeDetect=()=>Array.from(doc.querySelectorAll(\\\".box\\\")).forEach(box=>Object.assign(box.style,{left:Math.max(Math.min(win.innerWidth-box.offsetWidth,box.offsetLeft),0)+\\\"px\\\",top:Math.max(Math.min(win.innerHeight-box.offsetHeight,box.offsetTop),0)+\\\"px\\\"})), win.addEventListener(\\\"resize\\\",win._boxEdgeDetect);\\nlet boxDragStart=(box,e)=>{\\n  e.preventDefault();\\n  let x=e.clientX,y=e.clientY,l=box.offsetLeft,t=box.offsetTop;\\n  let boxDrag=e=>Object.assign(box.style,{left:Math.max(Math.min(win.innerWidth-box.offsetWidth,l+e.clientX-x),0)+\\\"px\\\",top:Math.max(Math.min(win.innerHeight-box.offsetHeight,t+e.clientY-y),0)+\\\"px\\\"});\\n  let boxDragEnd=e=>doc.removeEventListener('mouseup',boxDragEnd)||doc.removeEventListener('mousemove',boxDrag);\\n  doc.addEventListener('mouseup',boxDragEnd)||doc.addEventListener('mousemove',boxDrag);\\n};\\nexport let createBox=(title,mainContent,...extraClasses)=>{\\n  doc.getElementById(\\\"boxCSS\\\")||doc.head.insertAdjacentHTML('beforeend',`<style id='boxCSS'>${css}</style>`);\\n  let box=doc.body.appendChild(new Range().createContextualFragment(`<div class=${extraClasses.length>0?`\\\"box ${extraClasses.join(\\\" \\\")}\\\"`:\\\"box\\\"} style=z-index:${zIndex()}><div class=title><span>${title}</span><a class=toggle></a><a class=close></a></div>${mainContent}</div>`).firstElementChild);\\n\\tObject.assign(box.style,{left:Math.floor(win.innerWidth/2-box.offsetWidth/2)+\\\"px\\\",top:Math.floor(win.innerHeight/2-box.offsetHeight/2)+\\\"px\\\"});\\n\\tbox.querySelector(\\\".title\\\").addEventListener('mousedown',e=>e.target.tagName!=\\\"A\\\"&&boxDragStart(box,e));\\n\\tbox.querySelector(\\\".close\\\").addEventListener('click',e=>box[\\\"remove\\\"]());\\n\\tbox.querySelector(\\\".toggle\\\").addEventListener('click',e=>win._boxEdgeDetect(box.classList.toggle(\\\"min\\\")));\\n\\tbox.addEventListener('mousedown',()=>box.style.zIndex=zIndex());\\n\\tbox.addEventListener('keydown',e=>e.stopPropagation());\\n\\tbox.addLogDiv=width=>box.insertAdjacentHTML('beforeEnd',`<div class=resizer style=min-width:${width}px><div class=log></div></div>`);\\n\\tbox.log=(html,ts=true,elem=box.querySelector(\\\".log\\\"))=>{\\n\\t\\telem.insertAdjacentHTML('beforeEnd',`${elem.innerText?\\\"<br />\\\":\\\"\\\"}${ts?`[<span class=timestamp>${new Date().toLocaleTimeString(\\\"en-gb\\\")}</span>] `:\\\"\\\"}${html}`);\\n\\t\\telem.scrollTop=elem.scrollHeight;\\n\\t}\\n\\tbox.stripTitleButtons=()=>Array.from(box.querySelectorAll(\\\".title a\\\")).forEach(span=>span[\\\"remove\\\"]());\\n\\treturn box;\\n};\\nexport let confirm=text=>{\\n\\tlet box=createBox(\\\"Confirmation Prompt\\\",`<center>${text}</center><div class=g2><button><u>Y</u>es</button><button><u>N</u>o</button></div>`, \\\"prompt\\\");\\n\\tbox.stripTitleButtons();\\n\\tbox.querySelector(\\\"button\\\").focus();\\n\\tbox.addEventListener('keyup',e=>(e.key.toLowerCase()===\\\"y\\\"&&box.querySelector(\\\"button\\\").click())||(e.key.toLowerCase()===\\\"n\\\"&&box.querySelectorAll(\\\"button\\\")[1].click()));\\n\\treturn new Promise(r=>box.querySelectorAll(\\\"button\\\").forEach((button,i)=>button.addEventListener('click',()=>box[\\\"remove\\\"](r(i==0)))));\\n};\\nexport let prompt=text=>{\\n\\tlet box=createBox(\\\"Input Prompt\\\",`<center>${text}</center><div class=g2><input/><button>Submit</button></div>`, \\\"prompt\\\");\\n\\tbox.stripTitleButtons();\\n\\tbox.querySelector(\\\"input\\\").focus();\\n\\tbox.querySelector(\\\"input\\\").addEventListener('keyup',e=>e.key=='Enter'&&box.querySelector(\\\"button\\\").click());\\n\\treturn new Promise(r=>box.querySelector(\\\"button\\\").addEventListener('click',()=>box[\\\"remove\\\"](r(box.querySelector(\\\"input\\\").value))));\\n};\\nexport let select=(text,options)=>{\\n\\tlet box=createBox(\\\"Selection Prompt\\\",`<center>${text}</center><div class=g2><select>${options.map(option=>`<option value=\\\"${option}\\\">${option}</option>`).join(\\\"\\\")}</select><button>Submit</button></div>`, \\\"prompt\\\");\\n\\tbox.stripTitleButtons();\\n\\tbox.querySelector(\\\"select\\\").focus();\\n\\treturn new Promise(r=>box.querySelector(\\\"button\\\").addEventListener('click',()=>box[\\\"remove\\\"](r(box.querySelector(\\\"select\\\").value))));\\n};\\nexport let alert=(text)=>{\\n\\tlet box=createBox(\\\"Alert Message\\\",`<center>${text}<br /><br /><button>Ok</button></center>`, \\\"prompt\\\");\\n\\tbox.stripTitleButtons();\\n\\tbox.querySelector(\\\"button\\\").focus();\\n\\treturn new Promise(r=>box.querySelector(\\\"button\\\").addEventListener('click',()=>r(box[\\\"remove\\\"]())));\\n};\",\"filename\":\"/box/box.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":5949}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export let css=`body{--prilt:#fff;--pri:#F8F8F2;--pridk:#FAFAEB;--successlt:#ADE146;--success:#A6E22E;--successdk:#98E104;--errlt:#FF69A0;--err:#F92672;--errdk:#D10F56;--seclt:#AAA;--sec:#888;--secdk:#666;--warnlt:#E1D992;--warn:#E6DB74;--warndk:#EDDD54;--infolt:#92E1F1;--info:#66D9EF;--infodk:#31CDED;--welllt:#444;--well:#222;--white:#fff;--black:#000;--hp:#F92672;--money:#E6DB74;--hack:#A6E22E;--combat:#75715E;--cha:#AE81FF;--int:#66D9EF;--rep:#E69F66;--disabled:#66cfbc;--bgpri:#272822;--bgsec:#1B1C18;--button:#333;--ff:\\\"Lucida Console\\\",monospace}.box *{font-size:inherit;color:inherit;vertical-align:middle;margin:0;font-family:inherit;font-weight:500}.box{font-family:var(--ff);position:fixed;font-size:14px;background:var(--bgsec);box-shadow:0 0 0 2px var(--welllt);line-height:1.2;color:var(--pri);width:min-content;padding:1px}.box.min *:not(.title, .title *){display:none}.box.prompt{box-shadow:0 0 0 2px var(--welllt), 0 0 0 10000px #0007;min-width:400px}.box .title{user-select:none;display:flex;background:var(--bgpri);font-size:18px;white-space:pre;color:var(--pri);cursor:move;padding:0px 35px;margin-bottom:1px}.box.min .title{padding:0 36px 0 0}.box .title span{margin:0 auto}.box .title a{cursor:pointer;font-family:\\\"codicon\\\"}.box .toggle::after{content:\\\"\\\"}.box.min .toggle::after{content:\\\"\\\"}.box .toggle{margin-left:0px}.box .close{margin-right:-36px}.box .resizer{overflow:hidden;resize:both}.box .scroller{overflow:scroll;width:100%;height:100%}.box .timestamp{color:var(--int)}.box :is(input,select,button,textarea){outline:none;border:none}.box :is(textarea,.log){height:100%;width:100%;overflow-y:scroll;font-size:12px;background:none;padding:0px}.box :is(input,select){padding:3px;background:var(--well);border-bottom:1px solid var(--prilt);transition:border-bottom 250ms}.box input[type=number]{width:80px}.box input:hover{border-bottom:1px solid var(--black)}.box input:focus{border-bottom:1px solid var(--prilt)}.box :is(button,input[type=checkbox]){background:var(--button);transition:background 250ms;border:1px solid var(--well)}.box :is(button,input[type=checkbox]):hover{background:var(--bgsec)}.box :is(button,input[type=checkbox]):focus, .box select{border:1px solid var(--welllt)}.box button{padding:6px 8px;user-select:none}.box input[type=checkbox]{appearance:none;display:inline-flex;align-items:center;justify-content:center;width:22px;height:22px}.box input[type=checkbox]:checked::after{content:\\\"✓\\\";font-size:24px}.box .g2{display:grid;grid-columns-template:max-content max-content;column-gap:10px;grid-auto-rows:minmax(30px, max-content);align-items:center;margin:3px}.box .g2 > *:nth-child(odd){justify-self:end;grid-column:1 / span 1}.box .g2 > *:nth-child(even){justify-self:start;grid-column:2 / span 1}`;\",\"filename\":\"/box/css.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":6115,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {doc,createBox} from \\\"/box/box.js\\\";\\nexport let main=async ns=>{\\n  let shorthand={pri:\\\"primary\\\",sec:\\\"secondary\\\",bg:\\\"background\\\",err:\\\"error\\\",warn:\\\"warning\\\",lt:\\\"light\\\",dk:\\\"dark\\\"}\\n  let convert=(str,k,v=k?0:1)=>{\\n    for (let entry of Object.entries(shorthand)) str=str.replaceAll(entry[k],entry[v]);\\n    return str;\\n  }\\n  let box=createBox(\\\"CSS Editor\\\", `<button>Load from File</button><button>Load from Page</button><button>Save to File</button><button>Save to Page</button><div class=resizer style=\\\"min-width:511px;height:300px\\\"><textarea spellcheck=false></textarea></div><button>Load Theme from Game</button><button>Save Theme to Game</button><button>Minify</button><button>Beautify</button>`),\\n    pageCSS=doc.querySelector(`#boxCSS`),\\n    textArea=box.querySelector('textarea');\\n  let events=[\\n    ()=>textArea.value = ns.read(\\\"/box/css.js\\\").replace(/^export let css=`|`;$/g, \\\"\\\"),\\n    ()=>textArea.value = pageCSS.innerHTML,\\n    ()=>ns.write(\\\"/box/css.js\\\", `export let css=\\\\`${textArea.value}\\\\`;`, \\\"w\\\"),\\n    ()=>pageCSS.innerHTML = textArea.value,\\n    ()=>{\\n      events[6]();\\n      textArea.value = textArea.value.replace(/(?<=body{).*?(?=})/,Object.entries(ns.ui.getTheme()).map(([k,v])=>`--${convert(k,1)}:${v};`).join(\\\"\\\")+`--ff:\\\"${ns.ui.getStyles().fontFamily.replace(/,.*/,\\\"\\\")}\\\"`);      \\n      events[7]();\\n    },\\n    ()=>{\\n      events[6]();\\n      ns.ui.setTheme((JSON.parse(convert((`{\\\"`+textArea.value.match(/(?<=body{).*?(?=;--ff)/)[0]+`\\\"}`).replace(/;/g,'\\\",\\\"').replace(/--/g,\\\"\\\").replace(/:/g,'\\\":\\\"'),0))));\\n      events[7]();\\n    },\\n    ()=>textArea.value = textArea.value.replace(/(?<=[{:;}])\\\\s+/g, \\\"\\\").replace(/\\\\s+(?={)|;(?=})/g, \\\"\\\"),\\n    ()=>textArea.value = textArea.value.replace(/(?<=[{;}])|(?=})/g, \\\"\\\\n  \\\").replace(/\\\\n  }\\\\s+/g, \\\";\\\\n}\\\\n\\\")\\n  ]\\n  Array.from(box.querySelectorAll(\\\"button\\\")).forEach((button,i)=>button.addEventListener('click',events[i]));\\n  events[0]();\\n  while (doc.body.contains(box)) await ns.asleep(1000);\\n};\",\"filename\":\"cssedit.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/box/css.js\",\"url\":\"blob:https://danielyxie.github.io/51a21b90-ff0b-4fe1-8124-448060b3268c\",\"moduleSequenceNumber\":6115},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/e01d97a4-ed30-4a50-a01e-fe3b0247917d\",\"moduleSequenceNumber\":5949},{\"filename\":\"cssedit.js\",\"url\":\"blob:https://danielyxie.github.io/169cb7e2-0d8a-4345-a789-ad7b2fea36a0\",\"moduleSequenceNumber\":6261}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":6261,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"62.0.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":22667846694.800003,\"moneyMax\":113339233474.00003,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1270,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"22.3.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":16608192057.2,\"moneyMax\":83040960286,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1115,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"9.2.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":6867313340.400001,\"moneyMax\":34336566702,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":914,\"serverGrowth\":78}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"52.7.2.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":7814135194,\"moneyMax\":39070675970,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":941,\"serverGrowth\":60}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"52.1.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"ecorp\",\"megacorp\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":9855963733.6,\"moneyMax\":49279818668,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1010,\"serverGrowth\":79}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"24.3.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":8454108116.400001,\"moneyMax\":42270540582,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1046,\"serverGrowth\":51}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"46.7.5.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":5732960692.400001,\"moneyMax\":28664803462,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1092,\"serverGrowth\":95}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"43.6.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":7613164194.8,\"moneyMax\":38065820974,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1001,\"serverGrowth\":96}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"12.2.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":98,\"minDifficulty\":33,\"moneyAvailable\":11048158472.800001,\"moneyMax\":55240792364,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1193,\"serverGrowth\":97}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"63.5.7.9\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":717457420.8000001,\"moneyMax\":3587287104,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1052,\"serverGrowth\":92}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"93.4.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":400000,\"moneyMax\":2000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1260,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"59.7.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":423509465.6,\"moneyMax\":2117547328,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":935,\"serverGrowth\":69}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"31.2.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":350853803.6,\"moneyMax\":1754269018,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":988,\"serverGrowth\":56}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"6.4.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":251950411.60000002,\"moneyMax\":1259752058.0000002,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":890,\"serverGrowth\":70}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"7.2.3.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\"4sigma\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":229282377.20000002,\"moneyMax\":1146411886,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":876,\"serverGrowth\":80}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"12.2.9.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":311520326.40000004,\"moneyMax\":1557601632.0000002,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":856,\"serverGrowth\":78}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"78.0.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":390093747.6,\"moneyMax\":1950468738,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":913,\"serverGrowth\":91}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"86.3.0.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":457964566.40000004,\"moneyMax\":2289822832,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":871,\"serverGrowth\":89}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"22.4.3.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":331604674.8,\"moneyMax\":1658023374,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":872,\"serverGrowth\":72}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"97.1.6.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":278161868.40000004,\"moneyMax\":1390809342.0000002,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":832,\"serverGrowth\":90}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"25.0.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":341175955.6,\"moneyMax\":1705879778.0000002,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":852,\"serverGrowth\":80}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"59.1.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":339849318,\"moneyMax\":1699246590,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":833,\"serverGrowth\":80}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"59.2.3.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":407052293.6,\"moneyMax\":2035261468,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":857,\"serverGrowth\":55}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"49.1.8.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":364167682,\"moneyMax\":1820838410,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":940,\"serverGrowth\":61}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"22.8.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\",\"titan-labs\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":385216928.8,\"moneyMax\":1926084644,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":796,\"serverGrowth\":68}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"16.3.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":286522237.6,\"moneyMax\":1432611188.0000002,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":817,\"serverGrowth\":72}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"15.6.6.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":299007946.8,\"moneyMax\":1495039734,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":825,\"serverGrowth\":76}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"91.9.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\",\"icarus\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":644420434,\"moneyMax\":3222102170,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":801,\"serverGrowth\":68}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"0.0.6.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":647073176,\"moneyMax\":3235365880,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":799,\"serverGrowth\":88}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"26.5.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":467496472,\"moneyMax\":2337482360,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":801,\"serverGrowth\":70}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"80.4.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":573826939.6,\"moneyMax\":2869134698,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":817,\"serverGrowth\":78}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"84.6.6.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":422841084,\"moneyMax\":2114205420,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":815,\"serverGrowth\":75}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"68.5.9.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\",\"galactic-cyber\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":318823610,\"moneyMax\":1594118050,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":717,\"serverGrowth\":58}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"84.6.9.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":209717155.60000002,\"moneyMax\":1048585778.0000002,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":523,\"serverGrowth\":59}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"24.1.8.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":293322331.6,\"moneyMax\":1466611658.0000002,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":531,\"serverGrowth\":57}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"85.5.4.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":101224440,\"moneyMax\":506122200,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":435,\"serverGrowth\":37}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"78.1.3.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":70747159.2,\"moneyMax\":353735796,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":374,\"serverGrowth\":41}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"36.5.7.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"comptek\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":404048991.20000005,\"moneyMax\":2020244956.0000005,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":770,\"serverGrowth\":84}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"22.6.1.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":129603392.80000001,\"moneyMax\":648016964.0000001,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":437,\"serverGrowth\":54}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"16.0.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\",\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":175925384.4,\"moneyMax\":879626922,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":596,\"serverGrowth\":70}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"10.1.2.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":201521912.4,\"moneyMax\":1007609562,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":419,\"serverGrowth\":42}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"63.9.3.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":35,\"hackDifficulty\":35,\"minDifficulty\":12,\"moneyAvailable\":78073239.2,\"moneyMax\":390366196,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":281,\"serverGrowth\":48}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"85.3.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":97563224.80000001,\"moneyMax\":487816124.0000001,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":388,\"serverGrowth\":47}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"97.9.9.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":110000000,\"moneyMax\":550000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":404,\"serverGrowth\":71}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"77.7.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":32675252,\"moneyMax\":163376260,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":296,\"serverGrowth\":61}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"60.8.4.4\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":3.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.9960524713409022],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":183.6099999999981,\"pid\":89,\"ramUsage\":1.75,\"server\":\"n00dles\",\"threads\":1,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/630bd531-d47a-498b-a82f-a71ecf2ab8dd\",\"moduleSequenceNumber\":5985}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",0.09891851244189098],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.409999999999954,\"pid\":129,\"ramUsage\":1.75,\"server\":\"n00dles\",\"threads\":1,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/d1e9578d-0273-4d76-aea9-29b911e8cefd\",\"moduleSequenceNumber\":6260}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/630bd531-d47a-498b-a82f-a71ecf2ab8dd\",\"moduleSequenceNumber\":5985}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":5985,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/d1e9578d-0273-4d76-aea9-29b911e8cefd\",\"moduleSequenceNumber\":6260}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":6260,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":3.181999999999999,\"minDifficulty\":1,\"moneyAvailable\":124016,\"moneyMax\":140000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"31.3.2.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",0.07261473659289419],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.209999999999997,\"pid\":136,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/b71bb0b5-62fc-41d3-960f-0a1cac9eb774\",\"moduleSequenceNumber\":6507}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/ec1a4f60-3b73-4027-bc45-e1028426d046\",\"moduleSequenceNumber\":5988}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":5988,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/b71bb0b5-62fc-41d3-960f-0a1cac9eb774\",\"moduleSequenceNumber\":6507}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":6507,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":800000,\"moneyMax\":4000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"49.7.4.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.7327517056928528],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.41000000000001,\"pid\":120,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"threads\":9,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/ccf6948b-e4b4-4f9d-90f2-6d084caa09c4\",\"moduleSequenceNumber\":5997}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":5997,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/210c5a8b-e94d-411a-8c63-9c31b60055ab\",\"moduleSequenceNumber\":6510}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":6510,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/2a55eca5-f329-4399-9269-c32eb8e15e9b\",\"moduleSequenceNumber\":6516}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":6516,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":920000,\"moneyMax\":4600000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"80.7.0.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.3788304811328205],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":189.60999999999777,\"pid\":86,\"ramUsage\":1.75,\"server\":\"joesguns\",\"threads\":9,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/a392432d-1405-4e25-bcda-aa4c0b99ef4a\",\"moduleSequenceNumber\":6000}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/a392432d-1405-4e25-bcda-aa4c0b99ef4a\",\"moduleSequenceNumber\":6000}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":6000,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/dfefb8cf-a5a5-46b8-af6c-0bf325ddee5f\",\"moduleSequenceNumber\":6267}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":6267,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":1000000,\"moneyMax\":5000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"54.3.9.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.22976668178629667],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.41000000000005,\"pid\":118,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":17,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/7a31067f-e41e-4ebc-bd2e-e5a4f2e851f8\",\"moduleSequenceNumber\":6513}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.2920724475578045],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.40999999999994,\"pid\":128,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/7a31067f-e41e-4ebc-bd2e-e5a4f2e851f8\",\"moduleSequenceNumber\":6513}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/08909487-7b99-4d7c-bc62-83161d5d65e2\",\"moduleSequenceNumber\":5991}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":5991,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/99ccb809-dc88-4fd4-add5-b8e69555e322\",\"moduleSequenceNumber\":6504}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":6504,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/7a31067f-e41e-4ebc-bd2e-e5a4f2e851f8\",\"moduleSequenceNumber\":6513}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":6513,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"foodnstuff\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8.745999999999999,\"minDifficulty\":8,\"moneyAvailable\":6237013.806278766,\"moneyMax\":15000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"45.6.1.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.7034571515256369],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":165.40999999999914,\"pid\":91,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":9,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/df4895a2-5260-4f11-84f2-23161224fc85\",\"moduleSequenceNumber\":6018}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/df4895a2-5260-4f11-84f2-23161224fc85\",\"moduleSequenceNumber\":6018}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":6018,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/615b5f9b-4fd1-4d3f-a119-a3686bc335f1\",\"moduleSequenceNumber\":6276}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":6276,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/5c031f7b-4959-493b-ada2-0ab69a7d8e37\",\"moduleSequenceNumber\":6279}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":6279,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"iron-gym\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":1100000,\"moneyMax\":5500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"95.8.6.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.7006341263668943],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":186.60999999999794,\"pid\":88,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/526cf6ff-6bb1-4b21-b7a2-2d61211b4dd8\",\"moduleSequenceNumber\":6006}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/526cf6ff-6bb1-4b21-b7a2-2d61211b4dd8\",\"moduleSequenceNumber\":6006}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":6006,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/522a0d50-96a7-4a41-bd47-5cef45d94288\",\"moduleSequenceNumber\":6270}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":6270,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"CSEC\",\"netlink\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":2000000,\"moneyMax\":10000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"31.5.2.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":18000000,\"moneyMax\":90000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"8.3.9.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.3777879478486539],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.40999999999997,\"pid\":122,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"threads\":9,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/fda8e530-6b69-4ff3-9662-f116590f3d64\",\"moduleSequenceNumber\":6009}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":6009,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/6d2bba54-a4f9-466b-97b2-46069dd927be\",\"moduleSequenceNumber\":6522}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":6522,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":1200000,\"moneyMax\":6000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"49.0.9.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.9438592792029223],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":204.60999999999692,\"pid\":83,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":8,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/ebe19ab1-e28b-4e7c-94c9-72e48261ac8e\",\"moduleSequenceNumber\":6012}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",0.11836548414861436],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.409999999999954,\"pid\":123,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":1,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/7dad35bc-6acb-4107-8e21-2bab9fd35149\",\"moduleSequenceNumber\":6273}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/ebe19ab1-e28b-4e7c-94c9-72e48261ac8e\",\"moduleSequenceNumber\":6012}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":6012,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/7dad35bc-6acb-4107-8e21-2bab9fd35149\",\"moduleSequenceNumber\":6273}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":6273,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/ae59632b-7b05-4a17-8703-16fb1fb064ae\",\"moduleSequenceNumber\":6336}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":6336,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":10.407999999999998,\"minDifficulty\":5,\"moneyAvailable\":8000000,\"moneyMax\":8000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"34.0.9.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":9600000,\"moneyMax\":48000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"72.5.5.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",0.11693798188664362],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.20999999999999,\"pid\":134,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/e55b2d14-bb33-4a3e-a60b-3805e429a84a\",\"moduleSequenceNumber\":6264}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.6984002901128559],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.209999999999994,\"pid\":135,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":17,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/e55b2d14-bb33-4a3e-a60b-3805e429a84a\",\"moduleSequenceNumber\":6264}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/ef1175bc-4fdb-479e-8114-e0b8c04f5f64\",\"moduleSequenceNumber\":5994}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":5994,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/e55b2d14-bb33-4a3e-a60b-3805e429a84a\",\"moduleSequenceNumber\":6264}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":6264,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/fb8747ff-6e0b-40ea-828f-bccad2a74b6b\",\"moduleSequenceNumber\":6528}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":6528,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"foodnstuff\",\"silver-helix\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":20000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"59.0.0.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"max-hardware\",\"the-hub\",\"comptek\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":26,\"hackDifficulty\":26,\"minDifficulty\":9,\"moneyAvailable\":24757463.6,\"moneyMax\":123787318,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":193,\"serverGrowth\":35}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"31.4.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"summit-uni\",\"syscore\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":42,\"minDifficulty\":14,\"moneyAvailable\":23858817.6,\"moneyMax\":119294088,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":245,\"serverGrowth\":32}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"96.8.9.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",0.9740257195146609],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.409999999999922,\"pid\":126,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":16,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/41b87805-6a07-4bd7-b0fa-41d4cb39c6d8\",\"moduleSequenceNumber\":6525}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.9933434800692453],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.209999999999972,\"pid\":132,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":2,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/41b87805-6a07-4bd7-b0fa-41d4cb39c6d8\",\"moduleSequenceNumber\":6525}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/f550ef22-f6f9-49bb-81ce-ba91ac3049d2\",\"moduleSequenceNumber\":6015}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":6015,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/41b87805-6a07-4bd7-b0fa-41d4cb39c6d8\",\"moduleSequenceNumber\":6525}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":6525,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":8000000,\"moneyMax\":40000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"68.4.4.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":100000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":511,\"serverGrowth\":31}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"30.1.6.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":360000000,\"moneyMax\":1800000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1047,\"serverGrowth\":56}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"12.3.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":180000000,\"moneyMax\":900000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":765,\"serverGrowth\":53}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"16.5.3.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":531,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"46.8.1.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\",\"rho-construction\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":350,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"71.5.8.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":203,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"96.2.7.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"nwo\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":510,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"20.3.8.0\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",0.856590675893802],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.41,\"pid\":121,\"ramUsage\":1.75,\"server\":\"CSEC\",\"threads\":4,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/a14a8d59-7e40-401b-8351-307a739310b1\",\"moduleSequenceNumber\":6003}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":6003,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/f08ec369-e18d-4afb-9b2e-710cccfb1836\",\"moduleSequenceNumber\":6519}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":6519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"joesguns\",\"neo-net\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":53,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"94.9.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"65.4.3.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":15000,\"serverGrowth\":0}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":19.5548,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":1.3254,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":212.0576,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":133422.08908707683}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":1.0381,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":61.9481,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":false}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":10,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":10,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":true,\"EnableBashHotkeys\":true,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":300,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":true,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#FFF\",\"primary\":\"#F8F8F2\",\"primarydark\":\"#FAFAEB\",\"successlight\":\"#ADE146\",\"success\":\"#A6E22E\",\"successdark\":\"#98E104\",\"errorlight\":\"#FF69A0\",\"error\":\"#F92672\",\"errordark\":\"#D10F56\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#E1D992\",\"warning\":\"#E6DB74\",\"warningdark\":\"#EDDD54\",\"infolight\":\"#92E1F1\",\"info\":\"#66D9EF\",\"infodark\":\"#31CDED\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#F92672\",\"money\":\"#E6DB74\",\"hack\":\"#A6E22E\",\"combat\":\"#75715E\",\"cha\":\"#AE81FF\",\"int\":\"#66D9EF\",\"rep\":\"#E69F66\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#272822\",\"backgroundsecondary\":\"#1B1C18\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":\"1.25\",\"fontFamily\":\"monospace\"},\"overview\":{\"x\":-5,\"y\":5,\"opened\":true}}","VersionSave":"10","AllGangsSave":"{\"Slum Snakes\":{\"power\":560.4614736842101,\"territory\":0.14285714285714285},\"Tetrads\":{\"power\":599.1569776893285,\"territory\":0},\"The Syndicate\":{\"power\":643.5633277653587,\"territory\":0},\"The Dark Army\":{\"power\":639.6496783669247,\"territory\":0},\"Speakers for the Dead\":{\"power\":86.35848737712345,\"territory\":0.3273441636046899},\"NiteSec\":{\"power\":704.4135383915439,\"territory\":0},\"The Black Hand\":{\"power\":455.0843279731157,\"territory\":0.5297986935381664}}","LastExportBonus":"1644330003573","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1644330003584"}}