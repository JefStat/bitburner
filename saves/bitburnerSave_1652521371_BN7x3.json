{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":262,\"hp\":3768,\"max_hp\":3768,\"strength\":53182,\"defense\":37587,\"dexterity\":11026,\"agility\":15557,\"charisma\":915,\"intelligence\":177,\"hacking_chance_mult\":1.5801755316807684,\"hacking_speed_mult\":1.6275807976311916,\"hacking_money_mult\":1.7381930848488454,\"hacking_grow_mult\":1.5801755316807684,\"hacking_exp\":68372143.07758689,\"strength_exp\":972083.794610587,\"defense_exp\":997346.1203400912,\"dexterity_exp\":1367969.0628793093,\"agility_exp\":1084216.7532475258,\"charisma_exp\":271344.6313694215,\"intelligence_exp\":132914.64012516238,\"hacking_mult\":1.9910211699177685,\"strength_mult\":220.48275064096794,\"defense_mult\":155.30053205230757,\"dexterity_mult\":43.73099149274025,\"agility_mult\":63.57819736379665,\"charisma_mult\":4.570391086567408,\"hacking_exp_mult\":3.18608185163166,\"strength_exp_mult\":4.516271024687879,\"defense_exp_mult\":4.967898127156667,\"dexterity_exp_mult\":6.284391130853184,\"agility_exp_mult\":4.516271024687879,\"charisma_exp_mult\":4.517947909872947,\"company_rep_mult\":5.593649793176032,\"faction_rep_mult\":3.2597026766760084,\"money\":7414325602180.449,\"city\":\"Sector-12\",\"location\":\"NWO\",\"jobs\":{\"Bachman & Associates\":\"Software Engineering Intern\",\"Clarke Incorporated\":\"Software Engineering Intern\",\"Fulcrum Technologies\":\"Software Engineering Intern\",\"ECorp\":\"IT Intern\",\"NWO\":\"IT Intern\"},\"companyName\":\"NWO\",\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[\"hacknet-node-0\"],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":64,\"hashes\":12.436786492223677,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Daedalus\",\"ECorp\",\"MegaCorp\",\"Bachman & Associates\",\"Blade Industries\",\"NWO\",\"Clarke Incorporated\",\"OmniTek Incorporated\",\"Four Sigma\",\"KuaiGong International\",\"Aevum\",\"Sector-12\",\"Speakers for the Dead\",\"The Syndicate\",\"Tetrads\",\"Slum Snakes\",\"Tian Di Hui\",\"CyberSec\",\"Bladeburners\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Graphene BrachiBlades Upgrade\"},{\"level\":1,\"name\":\"nextSENS Gene Modification\"}],\"augmentations\":[{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":7,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"The Shadow's Simulacrum\"},{\"level\":1,\"name\":\"Power Recirculation Core\"},{\"level\":1,\"name\":\"Neurotrainer III\"},{\"level\":1,\"name\":\"SmartSonar Implant\"},{\"level\":1,\"name\":\"FocusWire\"},{\"level\":1,\"name\":\"Bionic Spine\"},{\"level\":1,\"name\":\"HemoRecirculator\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"},{\"level\":1,\"name\":\"Synfibril Muscle\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Graphene Bionic Spine Upgrade\"},{\"level\":1,\"name\":\"CordiARC Fusion Reactor\"},{\"level\":1,\"name\":\"Xanipher\"},{\"level\":1,\"name\":\"Graphene Bone Lacings\"},{\"level\":1,\"name\":\"NEMEAN Subdermal Weave\"},{\"level\":1,\"name\":\"ADR-V2 Pheromone Gene\"},{\"level\":1,\"name\":\"Bionic Legs\"},{\"level\":1,\"name\":\"Combat Rib II\"},{\"level\":1,\"name\":\"The Blade's Simulacrum\"},{\"level\":1,\"name\":\"Graphene Bionic Legs Upgrade\"},{\"level\":1,\"name\":\"Synthetic Heart\"},{\"level\":1,\"name\":\"HyperSight Corneal Implant\"},{\"level\":1,\"name\":\"SmartJaw\"},{\"level\":1,\"name\":\"BLADE-51b Tesla Armor\"},{\"level\":1,\"name\":\"EsperTech Bladeburner Eyewear\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"GOLEM Serum\"},{\"level\":1,\"name\":\"Blade's Runners\"},{\"level\":1,\"name\":\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\"},{\"level\":1,\"name\":\"ORION-MKIV Shoulder\"},{\"level\":1,\"name\":\"I.N.T.E.R.L.I.N.K.E.D\"},{\"level\":1,\"name\":\"Vangelis Virus\"},{\"level\":1,\"name\":\"PCMatrix\"},{\"level\":1,\"name\":\"Bionic Arms\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Combat Rib III\"},{\"level\":1,\"name\":\"Augmented Targeting III\"},{\"level\":1,\"name\":\"Vangelis Virus 3.0\"},{\"level\":1,\"name\":\"Graphene Bionic Arms Upgrade\"},{\"level\":1,\"name\":\"The Red Pill\"},{\"level\":1,\"name\":\"Neotra\"},{\"level\":1,\"name\":\"Photosynthetic Cells\"},{\"level\":1,\"name\":\"BrachiBlades\"}],\"sourceFiles\":[{\"lvl\":3,\"n\":1},{\"lvl\":3,\"n\":5},{\"lvl\":3,\"n\":2},{\"lvl\":3,\"n\":3},{\"lvl\":3,\"n\":4},{\"lvl\":3,\"n\":10},{\"lvl\":1,\"n\":9},{\"lvl\":3,\"n\":6},{\"lvl\":2,\"n\":7},{\"lvl\":3,\"n\":11}],\"numPeopleKilled\":5542,\"karma\":-461564.85000000003,\"crime_money_mult\":4.1927335152897935,\"crime_success_mult\":2.333347347639538,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Company\",\"workCostMult\":5,\"workExpMult\":4,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0.3504690036794826,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0.12424356752150605,\"workRepGainRate\":6.993323143418289,\"workMoneyGainRate\":534.3355962861227,\"workMoneyLossRate\":0,\"workHackExpGained\":21.028140220768936,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":7.454614051290366,\"workRepGained\":419.59938860509766,\"workMoneyGained\":32060.1357771674,\"createProgramName\":\"\",\"createProgramReqLvl\":100,\"graftAugmentationName\":\"\",\"timeWorkedGraftAugmentation\":0,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":12000,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":28800000,\"work_money_mult\":5.782175777245417,\"hacknet_node_money_mult\":1.4970083984344122,\"hacknet_node_purchase_cost_mult\":0.6116816739179599,\"hacknet_node_ram_cost_mult\":0.6116816739179599,\"hacknet_node_core_cost_mult\":0.6116816739179599,\"hacknet_node_level_cost_mult\":0.6116816739179599,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":{\"ctor\":\"Gang\",\"data\":{\"facName\":\"Slum Snakes\",\"members\":[{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":4493298.30140636,\"hack\":6283,\"str\":2517283,\"def\":722823,\"dex\":28055,\"agi\":4,\"cha\":19278,\"hack_exp\":96426.38072881741,\"str_exp\":7730210.554870533,\"def_exp\":2697594.3764685397,\"dex_exp\":280424.11574727076,\"agi_exp\":0,\"cha_exp\":308399.4102341874,\"hack_mult\":1,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":4.553535943756801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":2816939.3080728473,\"str_asc_points\":157080901.32854927,\"def_asc_points\":57877316.18653749,\"dex_asc_points\":7868745.508868247,\"agi_asc_points\":31.85774378048981,\"cha_asc_points\":8346597.067638202,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Teal\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":748813.8702502741,\"hack\":4749,\"str\":2076686,\"def\":576682,\"dex\":21980,\"agi\":4,\"cha\":14944,\"hack_exp\":20242.131556187636,\"str_exp\":1505862.5171936369,\"def_exp\":521838.6974310898,\"dex_exp\":57450.36155957848,\"agi_exp\":0,\"cha_exp\":62375.63705207945,\"hack_mult\":1,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":4.553535943756801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":3233050.5139661063,\"str_asc_points\":155247863.04960483,\"def_asc_points\":56408155.46050293,\"dex_asc_points\":8601507.261603618,\"agi_asc_points\":29.159011614806456,\"cha_asc_points\":8892555.933026392,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Fawn\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":9149091.743461916,\"hack\":7518,\"str\":2536027,\"def\":729626,\"dex\":31808,\"agi\":4,\"cha\":21433,\"hack_exp\":203113.14795434853,\"str_exp\":14675579.463511456,\"def_exp\":5095017.433134511,\"dex_exp\":573903.3480739658,\"agi_exp\":0,\"cha_exp\":621218.0644124186,\"hack_mult\":1,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":4.553535943756801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":3093246.5452715023,\"str_asc_points\":140114783.22003248,\"def_asc_points\":51097440.01846397,\"dex_asc_points\":8156521.829023735,\"agi_asc_points\":29.159011614806456,\"cha_asc_points\":8381528.528928878,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"TFT\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":9771628.705424614,\"hack\":7589,\"str\":2527755,\"def\":727908,\"dex\":32035,\"agi\":4,\"cha\":21579,\"hack_exp\":216928.0506665675,\"str_exp\":15558066.349764276,\"def_exp\":5402661.674117135,\"dex_exp\":612573.6586820402,\"agi_exp\":0,\"cha_exp\":662939.3103572559,\"hack_mult\":1,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":4.553535943756801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":3083741.77950722,\"str_asc_points\":137629900.62051392,\"def_asc_points\":50214767.12768187,\"dex_asc_points\":8121798.990025914,\"agi_asc_points\":29.113894012957317,\"cha_asc_points\":8342394.725694471,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Turduck'n\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":10742910.20847959,\"hack\":7680,\"str\":2521667,\"def\":727706,\"dex\":32344,\"agi\":4,\"cha\":21779,\"hack_exp\":237868.91398431006,\"str_exp\":16932656.935854465,\"def_exp\":5886391.456216537,\"dex_exp\":671559.4553211331,\"agi_exp\":0,\"cha_exp\":726658.0733080107,\"hack_mult\":1,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":4.553535943756801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":3064679.7644603485,\"str_asc_points\":134745701.72055653,\"def_asc_points\":49269406.76496045,\"dex_asc_points\":8068033.288915721,\"agi_asc_points\":29.113894012957317,\"cha_asc_points\":8284504.54248359,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Fender\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":8124979.064204344,\"hack\":7429,\"str\":2491198,\"def\":716146,\"dex\":31500,\"agi\":4,\"cha\":21233,\"hack_exp\":183730.6279269998,\"str_exp\":13119551.803063715,\"def_exp\":4556686.621419503,\"dex_exp\":519008.94293210993,\"agi_exp\":0,\"cha_exp\":561900.5862694583,\"hack_mult\":1,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":4.553535943756801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":3123998.826755607,\"str_asc_points\":138210399.14014614,\"def_asc_points\":50444683.1525698,\"dex_asc_points\":8233537.1536722435,\"agi_asc_points\":29.243151808589225,\"cha_asc_points\":8463759.749355529,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Just Moe\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":11612535.98461526,\"hack\":7756,\"str\":2508701,\"def\":725173,\"dex\":32581,\"agi\":4,\"cha\":21930,\"hack_exp\":257091.93939842124,\"str_exp\":18137083.809387304,\"def_exp\":6310371.38168924,\"dex_exp\":725365.9840769478,\"agi_exp\":0,\"cha_exp\":784667.4797805814,\"hack_mult\":1,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":4.553535943756801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":3047907.259259483,\"str_asc_points\":131617830.34564266,\"def_asc_points\":48206322.0423629,\"dex_asc_points\":8013610.362282308,\"agi_asc_points\":28.60423207872879,\"cha_asc_points\":8224182.6740046935,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Mixer\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":16296743.15128185,\"hack\":8042,\"str\":2501394,\"def\":726469,\"dex\":33428,\"agi\":4,\"cha\":22445,\"hack_exp\":355098.96990389476,\"str_exp\":24622244.27158634,\"def_exp\":8578573.635345377,\"dex_exp\":998814.4634965343,\"agi_exp\":0,\"cha_exp\":1078570.097844213,\"hack_mult\":1,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":4.553535943756801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":2961133.0823390484,\"str_asc_points\":123529121.4675219,\"def_asc_points\":45368936.58986229,\"dex_asc_points\":7737804.812967884,\"agi_asc_points\":28.66405667978208,\"cha_asc_points\":7913205.899547137,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Hip\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":12390538.355713364,\"hack\":7146,\"str\":2507675,\"def\":728725,\"dex\":30785,\"agi\":4,\"cha\":21052,\"hack_exp\":253270.79096415386,\"str_exp\":19230513.410213437,\"def_exp\":6719140.690740476,\"dex_exp\":730384.0243247873,\"agi_exp\":0,\"cha_exp\":801189.4631012443,\"hack_mult\":1,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":4.553535943756801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":2599841.7859039973,\"str_asc_points\":130050924.76344487,\"def_asc_points\":48036737.90310521,\"dex_asc_points\":7141151.730116725,\"agi_asc_points\":9.275736449486006,\"cha_asc_points\":7536050.10792308,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Brownstone\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":15370029.839219095,\"hack\":6553,\"str\":2587508,\"def\":763734,\"dex\":29453,\"agi\":4,\"cha\":20704,\"hack_exp\":276962.4286691775,\"str_exp\":23550142.171652343,\"def_exp\":8329639.94050986,\"dex_exp\":830601.3646153605,\"agi_exp\":0,\"cha_exp\":933743.734170934,\"hack_mult\":1,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":4.553535943756801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":2124546.396388758,\"str_asc_points\":133280480.24416193,\"def_asc_points\":50448271.58319778,\"dex_asc_points\":6311009.100485808,\"agi_asc_points\":0,\"cha_asc_points\":6994819.5668564085,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Sal\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":247833.35674544502,\"hack\":2654,\"str\":1826583,\"def\":507948,\"dex\":14770,\"agi\":4,\"cha\":10702,\"hack_exp\":6079.391081587729,\"str_exp\":560524.3158330424,\"def_exp\":198124.36908555918,\"dex_exp\":18687.457931859477,\"agi_exp\":0,\"cha_exp\":21259.00582465335,\"hack_mult\":1,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":4.553535943756801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":2121154.4951152722,\"str_asc_points\":156457372.4414293,\"def_asc_points\":59142170.96088199,\"dex_asc_points\":6619750.443961705,\"agi_asc_points\":0,\"cha_asc_points\":7513367.856941945,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Right Hand\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":17342826.598434538,\"hack\":5875,\"str\":2563590,\"def\":759059,\"dex\":27437,\"agi\":4,\"cha\":19572,\"hack_exp\":281150.1860192848,\"str_exp\":26219851.036052097,\"def_exp\":9291462.052124575,\"dex_exp\":872410.4470927585,\"agi_exp\":0,\"cha_exp\":993610.8285443904,\"hack_mult\":1,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":4.553535943756801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":1699448.471777114,\"str_asc_points\":128246839.42122543,\"def_asc_points\":48726890.440334566,\"dex_asc_points\":5404580.496852622,\"agi_asc_points\":0,\"cha_asc_points\":6148377.089008748,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Spine\",\"Nanofiber Weave\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Left Shark\"}}],\"wanted\":418.79225397156966,\"respect\":116290899.97759464,\"isHackingGang\":false,\"respectGainRate\":5031.171432336567,\"wantedGainRate\":0.00007630991947168568,\"moneyGainRate\":57497499.45135715,\"storedCycles\":1,\"storedTerritoryAndPowerCycles\":86,\"territoryClashChance\":0,\"territoryWarfareEngaged\":false,\"notifyMemberDeath\":true}},\"corporation\":{\"ctor\":\"Corporation\",\"data\":{\"name\":\"corp\",\"divisions\":[{\"ctor\":\"Industry\",\"data\":{\"name\":\"Agriculture\",\"type\":\"Agriculture\",\"sciResearch\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Scientific Research\",\"qty\":5013.633320648554,\"qlt\":0,\"dmd\":0,\"dmdR\":[0,0],\"cmp\":0,\"cmpR\":[0,0],\"mv\":0,\"mku\":0,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":0,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"researched\":{\"Hi-Tech R&D Laboratory\":true,\"Market-TA.I\":true},\"reqMats\":{\"Water\":0.5,\"Energy\":0.5},\"prodMats\":[\"Plants\",\"Food\"],\"products\":{},\"makesProducts\":false,\"awareness\":3.0300000000000002,\"popularity\":0.21300000000009,\"startingCost\":40000000000,\"reFac\":0.72,\"sciFac\":0.5,\"hwFac\":0.2,\"robFac\":0.3,\"aiFac\":0.3,\"advFac\":0.04,\"prodMult\":107.78627637386457,\"upgrades\":[0,1],\"state\":\"EXPORT\",\"newInd\":false,\"offices\":{\"Aevum\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"mgJsg7v\",\"mor\":100,\"hap\":99.99807105828299,\"ene\":99.99807105828299,\"int\":86,\"cha\":99,\"exp\":83.50700000000093,\"cre\":60,\"eff\":68,\"sal\":1116,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"mH9vdI3\",\"mor\":100,\"hap\":99.9994316191274,\"ene\":99.9994316191274,\"int\":90,\"cha\":75,\"exp\":101.50700000000093,\"cre\":94,\"eff\":50,\"sal\":1158,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"TWODmnJ\",\"mor\":100,\"hap\":99.99921936356854,\"ene\":99.99921936356854,\"int\":75,\"cha\":95,\"exp\":87.50700000000093,\"cre\":51,\"eff\":60,\"sal\":1032,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"kOrFAdP\",\"mor\":100,\"hap\":99.99929763364928,\"ene\":99.99929763364928,\"int\":84,\"cha\":97,\"exp\":99.50700000000093,\"cre\":51,\"eff\":89,\"sal\":1188,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"kxvrhr4\",\"mor\":100,\"hap\":99.99907507229196,\"ene\":99.99907507229196,\"int\":78,\"cha\":72,\"exp\":97.50700000000093,\"cre\":76,\"eff\":73,\"sal\":1116,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"OwQMBbA\",\"mor\":100,\"hap\":99.99900412831775,\"ene\":99.99900412831775,\"int\":57,\"cha\":55,\"exp\":80.50700000000093,\"cre\":67,\"eff\":57,\"sal\":876,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"AttVkX0\",\"mor\":100,\"hap\":99.99808326367497,\"ene\":99.99808326367497,\"int\":51,\"cha\":96,\"exp\":109.40300000000089,\"cre\":59,\"eff\":82,\"sal\":1122,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"1wSPYgu\",\"mor\":100,\"hap\":99.99975140973126,\"ene\":99.99975140973126,\"int\":76,\"cha\":85,\"exp\":77.40300000000089,\"cre\":67,\"eff\":52,\"sal\":1002,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"MHaEiCT\",\"mor\":100,\"hap\":99.99831173315795,\"ene\":99.99831173315795,\"int\":92,\"cha\":65,\"exp\":84.40300000000089,\"cre\":96,\"eff\":61,\"sal\":1125,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"bJUVfUd\",\"mor\":100,\"hap\":99.99961802409422,\"ene\":99.99961802409422,\"int\":81,\"cha\":69,\"exp\":78.40300000000089,\"cre\":63,\"eff\":91,\"sal\":1077,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"k2JLzAP\",\"mor\":100,\"hap\":99.99786718293872,\"ene\":99.99786718293872,\"int\":84,\"cha\":89,\"exp\":89.40300000000089,\"cre\":65,\"eff\":54,\"sal\":1074,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"NLISJjL\",\"mor\":100,\"hap\":99.9972414836202,\"ene\":99.9972414836202,\"int\":78,\"cha\":93,\"exp\":116.40300000000089,\"cre\":70,\"eff\":90,\"sal\":1272,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"2wL5gL4\",\"mor\":100,\"hap\":99.99706626182007,\"ene\":99.99706626182007,\"int\":73,\"cha\":89,\"exp\":86.38500000000089,\"cre\":53,\"eff\":72,\"sal\":1050,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Onigt58\",\"mor\":100,\"hap\":99.99779548353276,\"ene\":99.99779548353276,\"int\":86,\"cha\":63,\"exp\":79.38500000000089,\"cre\":73,\"eff\":53,\"sal\":993,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"iapIAsX\",\"mor\":100,\"hap\":99.99886760346871,\"ene\":99.99886760346871,\"int\":55,\"cha\":91,\"exp\":107.38500000000089,\"cre\":92,\"eff\":99,\"sal\":1263,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"AufkYr6\",\"mor\":100,\"hap\":99.997742607178,\"ene\":99.997742607178,\"int\":62,\"cha\":84,\"exp\":108.38500000000089,\"cre\":95,\"eff\":58,\"sal\":1152,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"rypIsI0\",\"mor\":100,\"hap\":99.9984684010065,\"ene\":99.9984684010065,\"int\":99,\"cha\":85,\"exp\":112.38500000000089,\"cre\":59,\"eff\":76,\"sal\":1224,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"dKW0oPU\",\"mor\":100,\"hap\":99.99888967701678,\"ene\":99.99888967701678,\"int\":86,\"cha\":99,\"exp\":99.38500000000089,\"cre\":51,\"eff\":55,\"sal\":1101,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ai665oT\",\"mor\":100,\"hap\":99.99995070830673,\"ene\":99.99995070830673,\"int\":81,\"cha\":96,\"exp\":91.38500000000089,\"cre\":71,\"eff\":53,\"sal\":1107,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"FwSKLxJ\",\"mor\":100,\"hap\":99.99944188555551,\"ene\":99.99944188555551,\"int\":76,\"cha\":99,\"exp\":98.38500000000089,\"cre\":66,\"eff\":58,\"sal\":1122,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"HkINGL9\",\"mor\":100,\"hap\":99.99972331909882,\"ene\":99.99972331909882,\"int\":97,\"cha\":94,\"exp\":91.38500000000089,\"cre\":70,\"eff\":71,\"sal\":1200,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"sCGSrAt\",\"mor\":100,\"hap\":99.99866713473806,\"ene\":99.99866713473806,\"int\":91,\"cha\":90,\"exp\":86.38500000000089,\"cre\":96,\"eff\":75,\"sal\":1245,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"cAHhKGu\",\"mor\":100,\"hap\":99.99766932351555,\"ene\":99.99766932351555,\"int\":98,\"cha\":87,\"exp\":89.38500000000089,\"cre\":89,\"eff\":74,\"sal\":1242,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"RyUCWo5\",\"mor\":100,\"hap\":99.99921506333355,\"ene\":99.99921506333355,\"int\":51,\"cha\":89,\"exp\":88.38500000000089,\"cre\":57,\"eff\":99,\"sal\":1083,\"loc\":\"\",\"pos\":\"Business\"}}],\"employeeProd\":{\"Operations\":1689.4032369296272,\"Engineer\":1868.7781130511141,\"Business\":887.4676076957886,\"Management\":2373.8961753059666,\"Research & Development\":2182.4182711155277,\"total\":9001.963404098025,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":5,\"Engineer\":5,\"Business\":4,\"Management\":5,\"Research & Development\":5,\"Training\":0,\"Unassigned\":0,\"total\":24},\"loc\":\"Aevum\",\"size\":24}},\"Chongqing\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"QolIyiE\",\"mor\":100,\"hap\":99.99770041592645,\"ene\":99.99770041592645,\"int\":62,\"cha\":70,\"exp\":94.50400000000093,\"cre\":67,\"eff\":94,\"sal\":1089,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ZXDQqK5\",\"mor\":100,\"hap\":99.99816937296859,\"ene\":99.99816937296859,\"int\":92,\"cha\":64,\"exp\":114.50400000000093,\"cre\":50,\"eff\":52,\"sal\":1044,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"sGs2pCH\",\"mor\":100,\"hap\":99.99842012374842,\"ene\":99.99842012374842,\"int\":94,\"cha\":96,\"exp\":98.50400000000093,\"cre\":57,\"eff\":80,\"sal\":1203,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ZMsh159\",\"mor\":100,\"hap\":99.99778957497563,\"ene\":99.99778957497563,\"int\":88,\"cha\":93,\"exp\":83.50400000000093,\"cre\":55,\"eff\":77,\"sal\":1116,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"nwXawcy\",\"mor\":100,\"hap\":99.9973238495481,\"ene\":99.9973238495481,\"int\":92,\"cha\":59,\"exp\":118.50400000000093,\"cre\":81,\"eff\":63,\"sal\":1167,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"GYgghMo\",\"mor\":100,\"hap\":99.99702736113454,\"ene\":99.99702736113454,\"int\":57,\"cha\":94,\"exp\":99.50400000000093,\"cre\":77,\"eff\":77,\"sal\":1140,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"8p9TEMb\",\"mor\":100,\"hap\":99.9977172274624,\"ene\":99.9977172274624,\"int\":97,\"cha\":69,\"exp\":108.40000000000089,\"cre\":65,\"eff\":92,\"sal\":1224,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"qp1FUXS\",\"mor\":100,\"hap\":99.9992131653051,\"ene\":99.9992131653051,\"int\":57,\"cha\":66,\"exp\":97.40000000000089,\"cre\":71,\"eff\":71,\"sal\":1017,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"JjSKX9u\",\"mor\":100,\"hap\":99.99885323534676,\"ene\":99.99885323534676,\"int\":56,\"cha\":59,\"exp\":103.40000000000089,\"cre\":84,\"eff\":83,\"sal\":1086,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"DeRYqQq\",\"mor\":100,\"hap\":99.99815893890782,\"ene\":99.99815893890782,\"int\":65,\"cha\":87,\"exp\":123.40000000000089,\"cre\":82,\"eff\":81,\"sal\":1245,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"WefX9SF\",\"mor\":100,\"hap\":99.99730275178436,\"ene\":99.99730275178436,\"int\":60,\"cha\":53,\"exp\":116.40000000000089,\"cre\":78,\"eff\":57,\"sal\":1023,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"XT6OOrj\",\"mor\":100,\"hap\":99.9979596169041,\"ene\":99.9979596169041,\"int\":76,\"cha\":51,\"exp\":115.40000000000089,\"cre\":65,\"eff\":100,\"sal\":1152,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"fF6DtSb\",\"mor\":100,\"hap\":99.99967206883905,\"ene\":99.99967206883905,\"int\":75,\"cha\":64,\"exp\":82.40000000000089,\"cre\":90,\"eff\":85,\"sal\":1119,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"JkqZzF3\",\"mor\":100,\"hap\":99.99915353909016,\"ene\":99.99915353909016,\"int\":57,\"cha\":52,\"exp\":76.40000000000089,\"cre\":59,\"eff\":88,\"sal\":927,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"wWbO37f\",\"mor\":100,\"hap\":99.99949124380208,\"ene\":99.99949124380208,\"int\":98,\"cha\":62,\"exp\":102.40000000000089,\"cre\":73,\"eff\":79,\"sal\":1173,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"fDn3w1L\",\"mor\":100,\"hap\":99.99777175348508,\"ene\":99.99777175348508,\"int\":57,\"cha\":96,\"exp\":98.40000000000089,\"cre\":59,\"eff\":99,\"sal\":1158,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"oma967U\",\"mor\":100,\"hap\":99.99948533087145,\"ene\":99.99948533087145,\"int\":75,\"cha\":62,\"exp\":115.40000000000089,\"cre\":100,\"eff\":82,\"sal\":1233,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"u95BLOT\",\"mor\":100,\"hap\":99.99863189687862,\"ene\":99.99863189687862,\"int\":97,\"cha\":63,\"exp\":107.40000000000089,\"cre\":72,\"eff\":58,\"sal\":1122,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"8dOHaTQ\",\"mor\":100,\"hap\":99.9977818014907,\"ene\":99.9977818014907,\"int\":55,\"cha\":69,\"exp\":103.40000000000089,\"cre\":52,\"eff\":60,\"sal\":948,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"YKDUOs5\",\"mor\":100,\"hap\":99.99720198593094,\"ene\":99.99720198593094,\"int\":98,\"cha\":82,\"exp\":84.40000000000089,\"cre\":87,\"eff\":77,\"sal\":1215,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"MnsARGw\",\"mor\":100,\"hap\":99.99703402461141,\"ene\":99.99703402461141,\"int\":59,\"cha\":81,\"exp\":110.40000000000089,\"cre\":71,\"eff\":97,\"sal\":1185,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"A6HBobP\",\"mor\":100,\"hap\":99.99962185457257,\"ene\":99.99962185457257,\"int\":79,\"cha\":92,\"exp\":95.40000000000089,\"cre\":83,\"eff\":66,\"sal\":1176,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"wJPOwmK\",\"mor\":100,\"hap\":99.99878169841097,\"ene\":99.99878169841097,\"int\":98,\"cha\":58,\"exp\":93.40000000000089,\"cre\":78,\"eff\":68,\"sal\":1116,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ESe06AU\",\"mor\":100,\"hap\":99.99711287392422,\"ene\":99.99711287392422,\"int\":68,\"cha\":98,\"exp\":92.40000000000089,\"cre\":82,\"eff\":65,\"sal\":1146,\"loc\":\"\",\"pos\":\"Business\"}}],\"employeeProd\":{\"Operations\":1816.8662591345396,\"Engineer\":2097.0447005238066,\"Business\":930.7969136416315,\"Management\":2170.557916942821,\"Research & Development\":2174.4306315475264,\"total\":9189.696421790328,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":5,\"Engineer\":5,\"Business\":4,\"Management\":5,\"Research & Development\":5,\"Training\":0,\"Unassigned\":0,\"total\":24},\"loc\":\"Chongqing\",\"size\":24}},\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"mzFVjV9\",\"mor\":100,\"hap\":99.99722195842094,\"ene\":99.99722195842094,\"int\":61,\"cha\":90,\"exp\":118.51000000000093,\"cre\":89,\"eff\":63,\"sal\":1191,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"syXQKOM\",\"mor\":100,\"hap\":99.99872578873412,\"ene\":99.99872578873412,\"int\":97,\"cha\":85,\"exp\":92.51000000000093,\"cre\":78,\"eff\":53,\"sal\":1143,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"wdXjMIj\",\"mor\":100,\"hap\":99.99704313166293,\"ene\":99.99704313166293,\"int\":68,\"cha\":68,\"exp\":113.51000000000093,\"cre\":68,\"eff\":60,\"sal\":1059,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"kTInTYA\",\"mor\":100,\"hap\":99.99861588562122,\"ene\":99.99861588562122,\"int\":88,\"cha\":54,\"exp\":74.51000000000093,\"cre\":53,\"eff\":87,\"sal\":996,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"LdwXULk\",\"mor\":100,\"hap\":99.99744034449054,\"ene\":99.99744034449054,\"int\":73,\"cha\":73,\"exp\":115.51000000000093,\"cre\":55,\"eff\":88,\"sal\":1140,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Jb8Vkl8\",\"mor\":100,\"hap\":99.99819455187958,\"ene\":99.99819455187958,\"int\":88,\"cha\":100,\"exp\":117.51000000000093,\"cre\":54,\"eff\":86,\"sal\":1263,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"9ncEmjI\",\"mor\":100,\"hap\":99.99929881926398,\"ene\":99.99929881926398,\"int\":57,\"cha\":70,\"exp\":119.39700000000089,\"cre\":65,\"eff\":56,\"sal\":1032,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"sIgmyvj\",\"mor\":100,\"hap\":99.99980957679732,\"ene\":99.99980957679732,\"int\":73,\"cha\":85,\"exp\":98.39700000000089,\"cre\":97,\"eff\":90,\"sal\":1260,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"MreDQiV\",\"mor\":100,\"hap\":99.99900694334232,\"ene\":99.99900694334232,\"int\":90,\"cha\":51,\"exp\":94.39700000000089,\"cre\":50,\"eff\":52,\"sal\":942,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"muY8qhN\",\"mor\":100,\"hap\":99.9980851064422,\"ene\":99.9980851064422,\"int\":97,\"cha\":88,\"exp\":118.39700000000089,\"cre\":82,\"eff\":55,\"sal\":1251,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ulaOlpq\",\"mor\":100,\"hap\":99.99843729134959,\"ene\":99.99843729134959,\"int\":71,\"cha\":51,\"exp\":104.39700000000089,\"cre\":85,\"eff\":71,\"sal\":1077,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"A08ww3Z\",\"mor\":100,\"hap\":99.99975664381451,\"ene\":99.99975664381451,\"int\":66,\"cha\":93,\"exp\":90.39700000000089,\"cre\":91,\"eff\":84,\"sal\":1203,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"5vuT9Nb\",\"mor\":100,\"hap\":99.99704972185137,\"ene\":99.99704972185137,\"int\":73,\"cha\":87,\"exp\":87.39700000000089,\"cre\":69,\"eff\":80,\"sal\":1119,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"l1dmckO\",\"mor\":100,\"hap\":99.99933494935351,\"ene\":99.99933494935351,\"int\":85,\"cha\":81,\"exp\":120.39700000000089,\"cre\":57,\"eff\":64,\"sal\":1152,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"v6PTYSB\",\"mor\":100,\"hap\":99.9973606769225,\"ene\":99.9973606769225,\"int\":68,\"cha\":55,\"exp\":121.39700000000089,\"cre\":100,\"eff\":100,\"sal\":1263,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"8zsqkul\",\"mor\":100,\"hap\":99.99843254971218,\"ene\":99.99843254971218,\"int\":57,\"cha\":51,\"exp\":74.39700000000089,\"cre\":55,\"eff\":73,\"sal\":861,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"iEgCsEV\",\"mor\":100,\"hap\":99.9980790274389,\"ene\":99.9980790274389,\"int\":95,\"cha\":86,\"exp\":96.39700000000089,\"cre\":100,\"eff\":90,\"sal\":1332,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ILuHHSM\",\"mor\":100,\"hap\":99.997698097165,\"ene\":99.997698097165,\"int\":88,\"cha\":60,\"exp\":120.39700000000089,\"cre\":77,\"eff\":82,\"sal\":1212,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Qcg0nms\",\"mor\":100,\"hap\":99.99831201274604,\"ene\":99.99831201274604,\"int\":80,\"cha\":76,\"exp\":100.39700000000089,\"cre\":64,\"eff\":63,\"sal\":1080,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"5HQeFSk\",\"mor\":100,\"hap\":99.99982213758757,\"ene\":99.99982213758757,\"int\":94,\"cha\":93,\"exp\":76.39700000000089,\"cre\":91,\"eff\":87,\"sal\":1254,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"GOs6RgW\",\"mor\":100,\"hap\":99.9974852681107,\"ene\":99.9974852681107,\"int\":69,\"cha\":99,\"exp\":123.39700000000089,\"cre\":84,\"eff\":64,\"sal\":1248,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"4gJjdRo\",\"mor\":100,\"hap\":99.99930430054202,\"ene\":99.99930430054202,\"int\":55,\"cha\":72,\"exp\":87.39700000000089,\"cre\":54,\"eff\":53,\"sal\":894,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"nlOZlz4\",\"mor\":100,\"hap\":99.99820945555061,\"ene\":99.99820945555061,\"int\":77,\"cha\":54,\"exp\":114.39700000000089,\"cre\":51,\"eff\":84,\"sal\":1071,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ChkKDl1\",\"mor\":100,\"hap\":99.99744680116461,\"ene\":99.99744680116461,\"int\":61,\"cha\":80,\"exp\":114.39700000000089,\"cre\":53,\"eff\":92,\"sal\":1131,\"loc\":\"\",\"pos\":\"Business\"}}],\"employeeProd\":{\"Operations\":1752.60965545031,\"Engineer\":1992.9903703367527,\"Business\":886.2595092897236,\"Management\":2368.010887288197,\"Research & Development\":2248.002951794112,\"total\":9247.873374159095,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":5,\"Engineer\":5,\"Business\":4,\"Management\":5,\"Research & Development\":5,\"Training\":0,\"Unassigned\":0,\"total\":24},\"loc\":\"Sector-12\",\"size\":24}},\"New Tokyo\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"HAWQGqK\",\"mor\":100,\"hap\":99.99706159381604,\"ene\":99.99706159381604,\"int\":80,\"cha\":53,\"exp\":77.50100000000093,\"cre\":73,\"eff\":66,\"sal\":975,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"GRGLUcx\",\"mor\":100,\"hap\":99.99764542234509,\"ene\":99.99764542234509,\"int\":55,\"cha\":54,\"exp\":75.50100000000093,\"cre\":64,\"eff\":65,\"sal\":867,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ht0OION\",\"mor\":100,\"hap\":99.997852223589,\"ene\":99.997852223589,\"int\":93,\"cha\":71,\"exp\":115.50100000000093,\"cre\":53,\"eff\":52,\"sal\":1080,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"1M8WSVS\",\"mor\":100,\"hap\":99.99832937429956,\"ene\":99.99832937429956,\"int\":52,\"cha\":95,\"exp\":74.50100000000093,\"cre\":61,\"eff\":93,\"sal\":1053,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"vlzX7X9\",\"mor\":100,\"hap\":99.99991966750608,\"ene\":99.99991966750608,\"int\":89,\"cha\":85,\"exp\":88.50100000000093,\"cre\":88,\"eff\":86,\"sal\":1236,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"1YRJjKw\",\"mor\":100,\"hap\":99.99980195212358,\"ene\":99.99980195212358,\"int\":64,\"cha\":91,\"exp\":85.50100000000093,\"cre\":73,\"eff\":62,\"sal\":1053,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"8eVcyjK\",\"mor\":100,\"hap\":99.99933686468984,\"ene\":99.99933686468984,\"int\":97,\"cha\":50,\"exp\":90.39400000000089,\"cre\":62,\"eff\":78,\"sal\":1062,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"cKunKcH\",\"mor\":100,\"hap\":99.99776451751008,\"ene\":99.99776451751008,\"int\":59,\"cha\":63,\"exp\":114.39400000000089,\"cre\":76,\"eff\":65,\"sal\":1062,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"yvTVdPc\",\"mor\":100,\"hap\":99.99962033462069,\"ene\":99.99962033462069,\"int\":50,\"cha\":98,\"exp\":103.39400000000089,\"cre\":53,\"eff\":97,\"sal\":1134,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"h1XeqY6\",\"mor\":100,\"hap\":99.99736367252477,\"ene\":99.99736367252477,\"int\":70,\"cha\":54,\"exp\":94.39400000000089,\"cre\":66,\"eff\":75,\"sal\":1008,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"82NzQdP\",\"mor\":100,\"hap\":99.99926968601045,\"ene\":99.99926968601045,\"int\":87,\"cha\":73,\"exp\":114.39400000000089,\"cre\":88,\"eff\":84,\"sal\":1269,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"e3AbNq2\",\"mor\":100,\"hap\":99.9984700650426,\"ene\":99.9984700650426,\"int\":94,\"cha\":94,\"exp\":117.39400000000089,\"cre\":66,\"eff\":78,\"sal\":1278,\"loc\":\"\",\"pos\":\"Business\"}}],\"employeeProd\":{\"Operations\":984.7981857706927,\"Engineer\":1202.6155291169448,\"Business\":498.5583528608375,\"Management\":955.2073524613593,\"Research & Development\":765.4825209042481,\"total\":4406.661941114082,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":3,\"Engineer\":3,\"Business\":2,\"Management\":2,\"Research & Development\":2,\"Training\":0,\"Unassigned\":0,\"total\":12},\"loc\":\"New Tokyo\",\"size\":12}},\"Ishima\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"wYzecrF\",\"mor\":100,\"hap\":99.99734006195457,\"ene\":99.99734006195457,\"int\":58,\"cha\":69,\"exp\":120.49800000000093,\"cre\":98,\"eff\":76,\"sal\":1191,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ehDOw4k\",\"mor\":100,\"hap\":99.99857949465414,\"ene\":99.99857949465414,\"int\":56,\"cha\":93,\"exp\":100.49800000000093,\"cre\":78,\"eff\":98,\"sal\":1203,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"V2Pb7qh\",\"mor\":100,\"hap\":99.998537941932,\"ene\":99.998537941932,\"int\":63,\"cha\":88,\"exp\":87.49800000000093,\"cre\":88,\"eff\":88,\"sal\":1170,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ojL8x1Y\",\"mor\":100,\"hap\":99.99889038343494,\"ene\":99.99889038343494,\"int\":51,\"cha\":92,\"exp\":101.07500000000091,\"cre\":75,\"eff\":68,\"sal\":1089,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"xIecPxb\",\"mor\":100,\"hap\":99.99761592956608,\"ene\":99.99761592956608,\"int\":90,\"cha\":91,\"exp\":76.07500000000091,\"cre\":99,\"eff\":54,\"sal\":1158,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"NHWJdmh\",\"mor\":100,\"hap\":99.99959684023902,\"ene\":99.99959684023902,\"int\":91,\"cha\":80,\"exp\":101.07500000000091,\"cre\":60,\"eff\":59,\"sal\":1101,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"yQeG1IX\",\"mor\":100,\"hap\":99.99852384532252,\"ene\":99.99852384532252,\"int\":77,\"cha\":97,\"exp\":74.39100000000089,\"cre\":83,\"eff\":76,\"sal\":1152,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"xCvE9zb\",\"mor\":100,\"hap\":99.99851997035093,\"ene\":99.99851997035093,\"int\":58,\"cha\":91,\"exp\":109.39100000000089,\"cre\":96,\"eff\":81,\"sal\":1236,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"p9gJb78\",\"mor\":100,\"hap\":99.9971971796233,\"ene\":99.9971971796233,\"int\":74,\"cha\":82,\"exp\":109.39100000000089,\"cre\":91,\"eff\":97,\"sal\":1290,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"3gaB2FN\",\"mor\":100,\"hap\":99.99829094612545,\"ene\":99.99829094612545,\"int\":76,\"cha\":76,\"exp\":121.39100000000089,\"cre\":52,\"eff\":96,\"sal\":1194,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"0CklU4B\",\"mor\":100,\"hap\":99.9971927988179,\"ene\":99.9971927988179,\"int\":94,\"cha\":89,\"exp\":109.39100000000089,\"cre\":82,\"eff\":51,\"sal\":1206,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"25fS6Br\",\"mor\":100,\"hap\":99.99976457548831,\"ene\":99.99976457548831,\"int\":92,\"cha\":97,\"exp\":87.39100000000089,\"cre\":69,\"eff\":97,\"sal\":1257,\"loc\":\"\",\"pos\":\"Business\"}}],\"employeeProd\":{\"Operations\":1072.5656113713085,\"Engineer\":1263.8311529869188,\"Business\":494.54987708864786,\"Management\":936.937282494833,\"Research & Development\":871.883533368346,\"total\":4639.767457310054,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":3,\"Engineer\":3,\"Business\":2,\"Management\":2,\"Research & Development\":2,\"Training\":0,\"Unassigned\":0,\"total\":12},\"loc\":\"Ishima\",\"size\":12}},\"Volhaven\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"x8ik86F\",\"mor\":100,\"hap\":99.99721602337378,\"ene\":99.99721602337378,\"int\":61,\"cha\":86,\"exp\":99.49500000000093,\"cre\":60,\"eff\":83,\"sal\":1095,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"omQT2hk\",\"mor\":100,\"hap\":99.99827851144249,\"ene\":99.99827851144249,\"int\":71,\"cha\":54,\"exp\":101.49500000000093,\"cre\":74,\"eff\":97,\"sal\":1119,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"fE6a6zs\",\"mor\":100,\"hap\":99.99906134565914,\"ene\":99.99906134565914,\"int\":82,\"cha\":76,\"exp\":121.49500000000093,\"cre\":65,\"eff\":65,\"sal\":1155,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"s0POR5X\",\"mor\":100,\"hap\":99.99746202482822,\"ene\":99.99746202482822,\"int\":72,\"cha\":68,\"exp\":91.07200000000091,\"cre\":54,\"eff\":54,\"sal\":945,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"VSLDWo7\",\"mor\":100,\"hap\":99.99983761688867,\"ene\":99.99983761688867,\"int\":57,\"cha\":81,\"exp\":94.07200000000091,\"cre\":53,\"eff\":58,\"sal\":957,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"AlrAf03\",\"mor\":100,\"hap\":99.99935563908612,\"ene\":99.99935563908612,\"int\":82,\"cha\":81,\"exp\":123.07200000000091,\"cre\":51,\"eff\":62,\"sal\":1125,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"EaoE6G4\",\"mor\":100,\"hap\":99.99992854714526,\"ene\":99.99992854714526,\"int\":73,\"cha\":56,\"exp\":104.38800000000089,\"cre\":68,\"eff\":72,\"sal\":1050,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"t2HZ7tV\",\"mor\":100,\"hap\":99.99957283773534,\"ene\":99.99957283773534,\"int\":79,\"cha\":85,\"exp\":100.38800000000089,\"cre\":65,\"eff\":83,\"sal\":1167,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"vJdSOwT\",\"mor\":100,\"hap\":99.99711692734883,\"ene\":99.99711692734883,\"int\":81,\"cha\":93,\"exp\":116.38800000000089,\"cre\":99,\"eff\":57,\"sal\":1269,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"0MJQhnn\",\"mor\":100,\"hap\":99.99728939651007,\"ene\":99.99728939651007,\"int\":89,\"cha\":76,\"exp\":79.38800000000089,\"cre\":65,\"eff\":86,\"sal\":1116,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"grG6Z4c\",\"mor\":100,\"hap\":99.99874885064169,\"ene\":99.99874885064169,\"int\":56,\"cha\":55,\"exp\":83.38800000000089,\"cre\":83,\"eff\":84,\"sal\":1014,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Uv4x7op\",\"mor\":100,\"hap\":99.99919753246398,\"ene\":99.99919753246398,\"int\":88,\"cha\":95,\"exp\":87.38800000000089,\"cre\":51,\"eff\":87,\"sal\":1155,\"loc\":\"\",\"pos\":\"Business\"}}],\"employeeProd\":{\"Operations\":1006.2796005702044,\"Engineer\":1263.2844332466198,\"Business\":495.622815832704,\"Management\":815.2090772682513,\"Research & Development\":899.8735619822319,\"total\":4480.269488900011,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":3,\"Engineer\":3,\"Business\":2,\"Management\":2,\"Research & Development\":2,\"Training\":0,\"Unassigned\":0,\"total\":12},\"loc\":\"Volhaven\",\"size\":12}}},\"lastCycleRevenue\":12622177.406410033,\"lastCycleExpenses\":2947940.750107127,\"thisCycleRevenue\":126117473.7828166,\"thisCycleExpenses\":29483925.547904238,\"warehouses\":{\"Aevum\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":6,\"sizeUsed\":471.25402748589613,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":297.26748150825796,\"loc\":\"Aevum\",\"size\":1440.0000000000002,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":65.94395761312417,\"dmdR\":[65,85],\"cmp\":43.01524173531604,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":148.63290731934896,\"sll\":0,\"prd\":-148.63290731934896,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1379.7771075726846,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":94.86190622888817,\"dmdR\":[80,99],\"cmp\":83.35978405546577,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":148.63290731934896,\"sll\":0,\"prd\":-148.63290731934896,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1960.8258108509708,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":91.5507421431657,\"dmd\":85.77405239431589,\"dmdR\":[70,90],\"cmp\":75.23183528016168,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":297.2658146386979,\"prd\":297.2658146386979,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":6100.351846162752,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":1356.6881606145241}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":91.5507421431657,\"dmd\":57.98953619833245,\"dmdR\":[20,90],\"cmp\":59.65480539676463,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":297.2658146386979,\"prd\":297.2658146386979,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2753.8585474751894,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":1494.0726950494795}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":1033.6712585274324,\"qlt\":0,\"dmd\":87.4499034974089,\"dmdR\":[80,90],\"cmp\":74.44884673344644,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8986.003669520547,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.05328557881294095}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":185.51698243978447,\"qlt\":0,\"dmd\":96.44913806149071,\"dmdR\":[80,99],\"cmp\":87.68852386699561,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":75329.29246958003,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.04177201502282402}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":929.9729183240092,\"qlt\":0,\"dmd\":81.25329052045042,\"dmdR\":[80,99],\"cmp\":89.76095306489512,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":20137.838462101892,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.04085663121974952}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":44695.5937843914,\"qlt\":0,\"dmd\":45.776300109107595,\"dmdR\":[5,99],\"cmp\":63.631608946081265,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":94474.92533033904,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.04620864295642667}}}}},\"Chongqing\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":6,\"sizeUsed\":468.6802028461489,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":298.2730165915881,\"loc\":\"Chongqing\",\"size\":1440.0000000000002,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":76.43871804681618,\"dmdR\":[65,85],\"cmp\":50.30590774188775,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":149.13623666563814,\"sll\":0,\"prd\":-149.13623666563814,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1502.8178702636949,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":82.47481437850453,\"dmdR\":[80,99],\"cmp\":74.52604842899868,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":149.13623666563814,\"sll\":0,\"prd\":-149.13623666563814,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2050.942991056665,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":94.08848823245208,\"dmd\":75.32172193533744,\"dmdR\":[70,90],\"cmp\":43.94120493798424,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":298.2724733312763,\"prd\":298.2724733312763,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5111.40217741468,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":2807.234606879049}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":94.08848823245208,\"dmd\":74.6398492741118,\"dmdR\":[20,90],\"cmp\":61.520659082529896,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":298.2724733312763,\"prd\":298.2724733312763,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2783.8386268947966,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":1909.4710969024832}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":1027.807462381906,\"qlt\":0,\"dmd\":83.92647887787814,\"dmdR\":[80,90],\"cmp\":65.98161099441198,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9733.105790673118,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":185.00534322874321,\"qlt\":0,\"dmd\":98.36845216206358,\"dmdR\":[80,99],\"cmp\":84.22344572187203,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":77463.7668364596,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":925.0267161437143,\"qlt\":0,\"dmd\":85.7507014035538,\"dmdR\":[80,99],\"cmp\":88.29748900038057,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":21693.817069340967,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":44401.2823748983,\"qlt\":0,\"dmd\":51.090865844273516,\"dmdR\":[5,99],\"cmp\":42.9992686393592,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":77286.12738698891,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}},\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":6,\"sizeUsed\":465.62034444790567,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":299.70079132390725,\"loc\":\"Sector-12\",\"size\":1440.0000000000002,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":77.57821466684298,\"dmdR\":[65,85],\"cmp\":46.40870457397374,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":149.84991363391973,\"sll\":0,\"prd\":-149.84991363391973,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1516.006049870221,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":98.85415809937822,\"dmdR\":[80,99],\"cmp\":82.81894422378691,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":149.84991363391973,\"sll\":0,\"prd\":-149.84991363391973,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2000.9599487485718,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":92.93377671106977,\"dmd\":70.52532400786993,\"dmdR\":[70,90],\"cmp\":76.57613346319016,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":299.69982726783945,\"prd\":299.69982726783945,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":4143.9314720031725,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":1070.496893027464}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":92.93377671106977,\"dmd\":51.18701610219044,\"dmdR\":[20,90],\"cmp\":55.778358788860366,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":299.69982726783945,\"prd\":299.69982726783945,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2662.810880048761,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":1466.818593080777}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":1021.097246596284,\"qlt\":0,\"dmd\":88.90120229124365,\"dmdR\":[80,90],\"cmp\":68.46882634885827,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":10627.196814638497,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":183.79750438733097,\"qlt\":0,\"dmd\":89.86173628671013,\"dmdR\":[80,99],\"cmp\":86.80702810600818,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":70218.58959840726,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":918.9875219366565,\"qlt\":0,\"dmd\":91.9147782986213,\"dmdR\":[80,99],\"cmp\":88.52537728285616,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9203.054301279277,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":44111.4010529595,\"qlt\":0,\"dmd\":71.36439871321474,\"dmdR\":[5,99],\"cmp\":55.1345535941709,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":52391.31318147918,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}},\"New Tokyo\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":6,\"sizeUsed\":619.9959875334454,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":231.6039538557498,\"loc\":\"New Tokyo\",\"size\":1440.0000000000002,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":83.50176473129399,\"dmdR\":[65,85],\"cmp\":48.109390298514754,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":115.80117758493819,\"sll\":0,\"prd\":-115.80117758493819,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1483.2798732165743,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":96.07160798287806,\"dmdR\":[80,99],\"cmp\":78.27361870597882,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":115.80117758493819,\"sll\":0,\"prd\":-115.80117758493819,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2018.055578347555,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":84.15337700847488,\"dmd\":86.44231220283613,\"dmdR\":[70,90],\"cmp\":40.33744020643054,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":231.60235516987638,\"prd\":231.60235516987638,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":6852.554971755883,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":2592.9353023997573}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":84.15337700847488,\"dmd\":66.32393465437383,\"dmdR\":[20,90],\"cmp\":49.86100970269384,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":231.60235516987638,\"prd\":231.60235516987638,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3256.8555590820565,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":1671.8961184089915}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":1359.640323538256,\"qlt\":0,\"dmd\":85.57384023583373,\"dmdR\":[80,90],\"cmp\":66.05001671689345,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8235.374492380055,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":244.73525823688647,\"qlt\":0,\"dmd\":81.55283681430078,\"dmdR\":[80,99],\"cmp\":82.2089717020361,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":77150.12125495938,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":1223.6762911844316,\"qlt\":0,\"dmd\":97.91323817867884,\"dmdR\":[80,99],\"cmp\":84.84338584288444,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":15547.276802312052,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":58736.46197685271,\"qlt\":0,\"dmd\":34.82502036692867,\"dmdR\":[5,99],\"cmp\":37.774048754710805,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":138923.81541123195,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}},\"Ishima\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":6,\"sizeUsed\":611.1082434821215,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":235.25590203593046,\"loc\":\"Ishima\",\"size\":1440.0000000000002,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0.008263377338380451,\"qlt\":0,\"dmd\":81.73636694162649,\"dmdR\":[65,85],\"cmp\":48.784175254871606,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":117.62877735569907,\"sll\":0,\"prd\":-117.62795101796523,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1567.08278596366,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0.008263377338380451,\"qlt\":0,\"dmd\":95.90835051281542,\"dmdR\":[80,99],\"cmp\":84.18661129982334,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":117.62877735569907,\"sll\":0,\"prd\":-117.62795101796523,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2098.6684171962206,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":84.8344067825414,\"dmd\":79.5737167760865,\"dmdR\":[70,90],\"cmp\":55.98681128761503,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":235.25590203593046,\"prd\":235.25590203593046,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":4064.5551758398137,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":1771.2556705926866}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":84.8344067825414,\"dmd\":74.91519199637686,\"dmdR\":[20,90],\"cmp\":60.76792486526636,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":235.25590203593046,\"prd\":235.25590203593046,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3019.0770024448666,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":1486.4145677805768}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":1340.014806159063,\"qlt\":0,\"dmd\":86.1268978321648,\"dmdR\":[80,90],\"cmp\":78.6121525457782,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7372.750422883049,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.03470272723300429}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":240.43771294310073,\"qlt\":0,\"dmd\":84.58176905936661,\"dmdR\":[80,99],\"cmp\":91.37987610677041,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":68565.71656672558,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.020119457374279705}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":1206.0800021326972,\"qlt\":0,\"dmd\":80.53030471764873,\"dmdR\":[80,99],\"cmp\":91.91145680416228,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9992.98264915204,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.030669357605569002}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":57976.00052502346,\"qlt\":0,\"dmd\":83.2454423975095,\"dmdR\":[5,99],\"cmp\":38.0911805991904,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":127952.52999430739,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.04438177486008037}}}}},\"Volhaven\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":5,\"sizeUsed\":398.8968533395998,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":227.93403425640864,\"loc\":\"Volhaven\",\"size\":1200.0000000000002,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":72.39422532955606,\"dmdR\":[65,85],\"cmp\":43.73698227198731,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":113.96648580804022,\"sll\":0,\"prd\":-113.96648580804022,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1642.087839625313,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":98.67262247967207,\"dmdR\":[80,99],\"cmp\":78.30123829737511,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":113.96648580804022,\"sll\":0,\"prd\":-113.96648580804022,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2188.637816858375,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":84.82914883310357,\"dmd\":81.0939431754482,\"dmdR\":[70,90],\"cmp\":85,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":227.93297161608044,\"prd\":227.93297161608044,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":4284.539113460216,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":615.506370135017}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":84.82914883310357,\"dmd\":56.86556358186972,\"dmdR\":[20,90],\"cmp\":61.70592343306798,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":227.93297161608044,\"prd\":227.93297161608044,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2633.9476062330587,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":1101.8787902180218}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":874.7738011833325,\"qlt\":0,\"dmd\":88.09471815029679,\"dmdR\":[80,90],\"cmp\":72.14141253245637,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8689.237786421148,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":157.45928421299993,\"qlt\":0,\"dmd\":92.06040840859956,\"dmdR\":[80,99],\"cmp\":93.28686660306796,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":76250.28944603396,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":787.2964210649992,\"qlt\":0,\"dmd\":99,\"dmdR\":[80,99],\"cmp\":98.45212580156995,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8545.788086843717,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":37790.22821111998,\"qlt\":0,\"dmd\":31.69861783922141,\"dmdR\":[5,99],\"cmp\":42.32533909535098,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":68088.16470254652,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}}}}},{\"ctor\":\"Industry\",\"data\":{\"name\":\"Software\",\"type\":\"Software\",\"sciResearch\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Scientific Research\",\"qty\":19050.55385201251,\"qlt\":0,\"dmd\":0,\"dmdR\":[0,0],\"cmp\":0,\"cmpR\":[0,0],\"mv\":0,\"mku\":0,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":0,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"researched\":{\"Hi-Tech R&D Laboratory\":true},\"reqMats\":{\"Hardware\":0.5,\"Energy\":0.5},\"prodMats\":[\"AICores\"],\"products\":{\"Software-10.80\":{\"ctor\":\"Product\",\"data\":{\"name\":\"Software-10.80\",\"dmd\":41.353873196132845,\"cmp\":74.37759999999716,\"mku\":2.748621363061144,\"pCost\":24210.614234993314,\"sCost\":\"MP*1.194\",\"fin\":true,\"prog\":100.23696542467783,\"createCity\":\"Aevum\",\"designCost\":31622776601.683792,\"advCost\":31622776601.683792,\"rat\":1098.056479882117,\"qlt\":1160.9065516311773,\"per\":1090.117467656553,\"dur\":1126.2998866934809,\"rel\":1018.684012687859,\"aes\":1003.2645098974199,\"fea\":1094.2744807415147,\"data\":{\"Aevum\":[618.3409088488297,40.27889757698831,43.44621684439246],\"Chongqing\":[0,28.329286752642922,28.329286752642922],\"Ishima\":[0,25.57155423373776,25.57155423373776],\"New Tokyo\":[0,27.160403419141556,27.160403419141556],\"Sector-12\":[0,28.897656855573892,28.897656855573892],\"Volhaven\":[0,25.548992815969363,25.548992815969363]},\"loc\":\"\",\"siz\":0.034999999999999996,\"reqMats\":{\"Hardware\":0.5,\"Energy\":0.5},\"prdman\":{\"Aevum\":[false,0],\"Chongqing\":[false,0],\"Ishima\":[false,0],\"New Tokyo\":[false,0],\"Sector-12\":[false,0],\"Volhaven\":[false,0]},\"sllman\":{\"Aevum\":[true,\"MAX\"],\"Chongqing\":[true,\"MAX\"],\"Ishima\":[true,\"MAX\"],\"New Tokyo\":[true,\"MAX\"],\"Sector-12\":[true,\"MAX\"],\"Volhaven\":[true,\"MAX\"]},\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":{\"Aevum\":0,\"Chongqing\":0,\"Ishima\":0,\"New Tokyo\":0,\"Sector-12\":0,\"Volhaven\":0},\"maxsll\":38.73239746412524}},\"Software-11.10\":{\"ctor\":\"Product\",\"data\":{\"name\":\"Software-11.10\",\"dmd\":43.97324617768911,\"cmp\":53.695199999997875,\"mku\":2.5722266141179118,\"pCost\":24210.614234993314,\"sCost\":\"MP*1.325\",\"fin\":true,\"prog\":100.02182886289192,\"createCity\":\"Aevum\",\"designCost\":63095734448.019424,\"advCost\":63095734448.019424,\"rat\":1203.8921822750085,\"qlt\":1272.91361802023,\"per\":1196.8776716005846,\"dur\":1233.7038262216788,\"rel\":1115.919594460598,\"aes\":1098.0099355908187,\"fea\":1200.0462010719511,\"data\":{\"Aevum\":[669.630398246323,40.27889757698831,43.15316576505631],\"Chongqing\":[0,28.329286752642922,28.329286752642922],\"Ishima\":[0,25.57155423373776,25.57155423373776],\"New Tokyo\":[0,27.160403419141556,27.160403419141556],\"Sector-12\":[0,28.897656855573892,28.897656855573892],\"Volhaven\":[0,25.548992815969363,25.548992815969363]},\"loc\":\"\",\"siz\":0.034999999999999996,\"reqMats\":{\"Hardware\":0.5,\"Energy\":0.5},\"prdman\":{\"Aevum\":[false,0],\"Chongqing\":[false,0],\"Ishima\":[false,0],\"New Tokyo\":[false,0],\"Sector-12\":[false,0],\"Volhaven\":[false,0]},\"sllman\":{\"Aevum\":[true,\"MAX\"],\"Chongqing\":[true,\"MAX\"],\"Ishima\":[true,\"MAX\"],\"New Tokyo\":[true,\"MAX\"],\"Sector-12\":[true,\"MAX\"],\"Volhaven\":[true,\"MAX\"]},\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":{\"Aevum\":0,\"Chongqing\":0,\"Ishima\":0,\"New Tokyo\":0,\"Sector-12\":0,\"Volhaven\":0},\"maxsll\":38.69342422049684}},\"Software-11.40\":{\"ctor\":\"Product\",\"data\":{\"name\":\"Software-11.40\",\"dmd\":46.789610090335614,\"cmp\":18.888400000000388,\"mku\":2.3736197897123947,\"pCost\":24210.614234993314,\"sCost\":\"MP*1.554\",\"fin\":true,\"prog\":100.22630665410404,\"createCity\":\"Aevum\",\"designCost\":125892541179.41663,\"advCost\":125892541179.41663,\"rat\":1348.5036131343768,\"qlt\":1426.0109158770824,\"per\":1343.515484868266,\"dur\":1379.9364895848837,\"rel\":1248.3499480114176,\"aes\":1226.5844537882856,\"fea\":1344.705227330234,\"data\":{\"Aevum\":[458.05269625013534,39.51600845996607,39.27821177271919],\"Chongqing\":[0,27.56239453677484,27.56239453677484],\"Ishima\":[0,25.22085443669912,25.22085443669912],\"New Tokyo\":[0,20.807808903054706,20.807808903054706],\"Sector-12\":[0,19.129876176913466,19.129876176913466],\"Volhaven\":[0,25.19840885789008,25.19840885789008]},\"loc\":\"\",\"siz\":0.034999999999999996,\"reqMats\":{\"Hardware\":0.5,\"Energy\":0.5},\"prdman\":{\"Aevum\":[false,0],\"Chongqing\":[false,0],\"Ishima\":[false,0],\"New Tokyo\":[false,0],\"Sector-12\":[false,0],\"Volhaven\":[false,0]},\"sllman\":{\"Aevum\":[true,\"MAX\"],\"Chongqing\":[true,\"MAX\"],\"Ishima\":[true,\"MAX\"],\"New Tokyo\":[true,\"MAX\"],\"Sector-12\":[true,\"MAX\"],\"Volhaven\":[true,\"MAX\"]},\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":{\"Aevum\":0,\"Chongqing\":0,\"Ishima\":0,\"New Tokyo\":0,\"Sector-12\":0,\"Volhaven\":0},\"maxsll\":35.35474175428441}}},\"makesProducts\":true,\"awareness\":307.3587943570397,\"popularity\":137.03184851914085,\"startingCost\":25000000000,\"reFac\":0.15,\"sciFac\":0.62,\"hwFac\":0.25,\"robFac\":0.05,\"aiFac\":0.18,\"advFac\":0.16,\"prodMult\":19.990444793071028,\"upgrades\":[0,45],\"state\":\"EXPORT\",\"newInd\":false,\"offices\":{\"Aevum\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"hWNxI7B\",\"mor\":100,\"hap\":99.9974359302186,\"ene\":99.9974359302186,\"int\":79,\"cha\":81,\"exp\":115.01300000000087,\"cre\":63,\"eff\":52,\"sal\":1101,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"laMS30S\",\"mor\":100,\"hap\":99.99979422179399,\"ene\":99.99979422179399,\"int\":74,\"cha\":82,\"exp\":92.01300000000087,\"cre\":95,\"eff\":94,\"sal\":1242,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"mQ6ggqT\",\"mor\":100,\"hap\":99.99947409961273,\"ene\":99.99947409961273,\"int\":99,\"cha\":55,\"exp\":94.01300000000087,\"cre\":69,\"eff\":88,\"sal\":1146,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"3me304P\",\"mor\":100,\"hap\":99.99934982690448,\"ene\":99.99934982690448,\"int\":63,\"cha\":88,\"exp\":85.01300000000087,\"cre\":69,\"eff\":67,\"sal\":1047,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"zdxVuSP\",\"mor\":100,\"hap\":99.99914188875096,\"ene\":99.99914188875096,\"int\":62,\"cha\":72,\"exp\":90.01300000000087,\"cre\":62,\"eff\":60,\"sal\":969,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"VAE5oqC\",\"mor\":100,\"hap\":99.99857614402681,\"ene\":99.99857614402681,\"int\":87,\"cha\":53,\"exp\":97.01300000000087,\"cre\":62,\"eff\":74,\"sal\":1050,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"O8uMlej\",\"mor\":100,\"hap\":99.99732445434243,\"ene\":99.99732445434243,\"int\":54,\"cha\":52,\"exp\":105.01300000000087,\"cre\":79,\"eff\":53,\"sal\":960,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"xvOy63w\",\"mor\":100,\"hap\":99.99869989019291,\"ene\":99.99869989019291,\"int\":89,\"cha\":93,\"exp\":110.01300000000087,\"cre\":96,\"eff\":88,\"sal\":1359,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"P58Lj6B\",\"mor\":100,\"hap\":99.99969452810902,\"ene\":99.99969452810902,\"int\":75,\"cha\":92,\"exp\":90.01300000000087,\"cre\":90,\"eff\":71,\"sal\":1185,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"BNOPVPe\",\"mor\":100,\"hap\":99.99896647811035,\"ene\":99.99896647811035,\"int\":77,\"cha\":55,\"exp\":104.01300000000087,\"cre\":89,\"eff\":87,\"sal\":1167,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"O8eHI2t\",\"mor\":100,\"hap\":99.9979397961978,\"ene\":99.9979397961978,\"int\":68,\"cha\":98,\"exp\":76.01300000000087,\"cre\":82,\"eff\":79,\"sal\":1140,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"YXIo0DK\",\"mor\":100,\"hap\":99.99737409272139,\"ene\":99.99737409272139,\"int\":62,\"cha\":87,\"exp\":101.01300000000087,\"cre\":79,\"eff\":91,\"sal\":1191,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"K3Cmq1t\",\"mor\":100,\"hap\":99.99884832529222,\"ene\":99.99884832529222,\"int\":100,\"cha\":95,\"exp\":77.01300000000087,\"cre\":66,\"eff\":75,\"sal\":1170,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"3NOwO3g\",\"mor\":100,\"hap\":99.9985123944371,\"ene\":99.9985123944371,\"int\":96,\"cha\":85,\"exp\":100.01300000000087,\"cre\":87,\"eff\":82,\"sal\":1281,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"m2mzSCl\",\"mor\":100,\"hap\":99.99982837718507,\"ene\":99.99982837718507,\"int\":98,\"cha\":72,\"exp\":117.01300000000087,\"cre\":73,\"eff\":65,\"sal\":1206,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"f0DL0A2\",\"mor\":100,\"hap\":99.9994508122772,\"ene\":99.9994508122772,\"int\":94,\"cha\":58,\"exp\":91.01300000000087,\"cre\":51,\"eff\":59,\"sal\":990,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"lf6Mg86\",\"mor\":100,\"hap\":99.99751160721337,\"ene\":99.99751160721337,\"int\":92,\"cha\":83,\"exp\":76.01300000000087,\"cre\":75,\"eff\":90,\"sal\":1179,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ZvwcknI\",\"mor\":100,\"hap\":99.99864419085283,\"ene\":99.99864419085283,\"int\":70,\"cha\":81,\"exp\":107.01300000000087,\"cre\":61,\"eff\":79,\"sal\":1125,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"zxlfIhY\",\"mor\":100,\"hap\":99.99727661130298,\"ene\":99.99727661130298,\"int\":100,\"cha\":51,\"exp\":117.01300000000087,\"cre\":87,\"eff\":80,\"sal\":1236,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"yPjfUu0\",\"mor\":100,\"hap\":99.99778980905195,\"ene\":99.99778980905195,\"int\":70,\"cha\":79,\"exp\":81.01300000000087,\"cre\":91,\"eff\":67,\"sal\":1095,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"JUTdkwR\",\"mor\":100,\"hap\":99.99883067150378,\"ene\":99.99883067150378,\"int\":93,\"cha\":70,\"exp\":76.01300000000087,\"cre\":98,\"eff\":63,\"sal\":1131,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"npq1Rha\",\"mor\":100,\"hap\":99.9981990343788,\"ene\":99.9981990343788,\"int\":51,\"cha\":62,\"exp\":106.01300000000087,\"cre\":50,\"eff\":54,\"sal\":900,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"QEHY4O2\",\"mor\":100,\"hap\":99.9989333583105,\"ene\":99.9989333583105,\"int\":54,\"cha\":80,\"exp\":123.01300000000087,\"cre\":100,\"eff\":98,\"sal\":1296,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"5ikQB4C\",\"mor\":100,\"hap\":99.9980633588439,\"ene\":99.9980633588439,\"int\":59,\"cha\":84,\"exp\":113.01300000000087,\"cre\":94,\"eff\":72,\"sal\":1197,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"m6EQ1rc\",\"mor\":100,\"hap\":99.99853892173799,\"ene\":99.99853892173799,\"int\":50,\"cha\":93,\"exp\":78.77900000000064,\"cre\":86,\"eff\":90,\"sal\":1143,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"NZO5GZh\",\"mor\":100,\"hap\":99.99891762729757,\"ene\":99.99891762729757,\"int\":89,\"cha\":52,\"exp\":68.77900000000064,\"cre\":83,\"eff\":86,\"sal\":1086,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"8DHo0IT\",\"mor\":100,\"hap\":99.99794848690304,\"ene\":99.99794848690304,\"int\":85,\"cha\":84,\"exp\":82.77900000000064,\"cre\":97,\"eff\":87,\"sal\":1257,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"knvwgrx\",\"mor\":100,\"hap\":99.99982615743691,\"ene\":99.99982615743691,\"int\":50,\"cha\":97,\"exp\":95.77900000000064,\"cre\":68,\"eff\":63,\"sal\":1071,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"tZgwrhf\",\"mor\":100,\"hap\":99.99832697310096,\"ene\":99.99832697310096,\"int\":96,\"cha\":50,\"exp\":115.77900000000064,\"cre\":68,\"eff\":95,\"sal\":1224,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"TLFqZqV\",\"mor\":100,\"hap\":99.99740184354226,\"ene\":99.99740184354226,\"int\":92,\"cha\":78,\"exp\":114.77900000000064,\"cre\":51,\"eff\":87,\"sal\":1218,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"uhcbsrn\",\"mor\":100,\"hap\":99.99948259118672,\"ene\":99.99948259118672,\"int\":98,\"cha\":52,\"exp\":102.77900000000064,\"cre\":96,\"eff\":90,\"sal\":1266,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"mdXV4Ns\",\"mor\":100,\"hap\":99.99775742397668,\"ene\":99.99775742397668,\"int\":60,\"cha\":99,\"exp\":93.77900000000064,\"cre\":87,\"eff\":69,\"sal\":1176,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"a7UEQSG\",\"mor\":100,\"hap\":99.99970233458087,\"ene\":99.99970233458087,\"int\":69,\"cha\":87,\"exp\":99.77900000000064,\"cre\":51,\"eff\":80,\"sal\":1110,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"bLgpoL3\",\"mor\":100,\"hap\":99.99835157052019,\"ene\":99.99835157052019,\"int\":70,\"cha\":87,\"exp\":112.77900000000064,\"cre\":55,\"eff\":53,\"sal\":1083,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"hkS6ghX\",\"mor\":100,\"hap\":99.99834863037165,\"ene\":99.99834863037165,\"int\":83,\"cha\":69,\"exp\":85.77900000000064,\"cre\":80,\"eff\":78,\"sal\":1137,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"RJKiGz0\",\"mor\":100,\"hap\":99.99804063977294,\"ene\":99.99804063977294,\"int\":94,\"cha\":55,\"exp\":86.77900000000064,\"cre\":65,\"eff\":61,\"sal\":1035,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"1k76Pft\",\"mor\":100,\"hap\":99.99942999026611,\"ene\":99.99942999026611,\"int\":61,\"cha\":94,\"exp\":88.77900000000064,\"cre\":52,\"eff\":97,\"sal\":1128,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"fzUcFWv\",\"mor\":100,\"hap\":99.99891046789966,\"ene\":99.99891046789966,\"int\":64,\"cha\":68,\"exp\":111.77900000000064,\"cre\":66,\"eff\":77,\"sal\":1110,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"TstXgXT\",\"mor\":100,\"hap\":99.99792678320259,\"ene\":99.99792678320259,\"int\":85,\"cha\":92,\"exp\":113.77900000000064,\"cre\":92,\"eff\":63,\"sal\":1287,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"d5T4J0U\",\"mor\":53.07080451,\"hap\":98.84981064754824,\"ene\":99.99729350479718,\"int\":64,\"cha\":67,\"exp\":67.012,\"cre\":91,\"eff\":66,\"sal\":1065,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"8S9Rxkz\",\"mor\":52.0302005,\"hap\":99.9983093796307,\"ene\":73.87704595564054,\"int\":63,\"cha\":87,\"exp\":76.012,\"cre\":100,\"eff\":84,\"sal\":1230,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"dLsMdFD\",\"mor\":100,\"hap\":59.307929940966346,\"ene\":65.55155400096635,\"int\":80,\"cha\":70,\"exp\":60.012,\"cre\":94,\"eff\":99,\"sal\":1209,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"97ekoxw\",\"mor\":81.16711278,\"hap\":64.51146123691113,\"ene\":73.87689732691113,\"int\":90,\"cha\":82,\"exp\":89.012,\"cre\":99,\"eff\":75,\"sal\":1305,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"VKj8Sod\",\"mor\":100,\"hap\":74.91581444299588,\"ene\":87.40306256299588,\"int\":82,\"cha\":51,\"exp\":84.012,\"cre\":61,\"eff\":88,\"sal\":1098,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"1pN0lGb\",\"mor\":82.20771679,\"hap\":65.5501366692618,\"ene\":90.52463290926181,\"int\":54,\"cha\":83,\"exp\":96.012,\"cre\":95,\"eff\":98,\"sal\":1278,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ddHcygK\",\"mor\":73.88288471,\"hap\":66.58824237937576,\"ene\":55.141598269375756,\"int\":79,\"cha\":88,\"exp\":65.012,\"cre\":82,\"eff\":80,\"sal\":1182,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"0mQJvlA\",\"mor\":85.32952882000001,\"hap\":79.0800047467034,\"ene\":99.99753283006612,\"int\":52,\"cha\":69,\"exp\":100.012,\"cre\":58,\"eff\":69,\"sal\":1044,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"z2fMKqd\",\"mor\":89.49194486,\"hap\":79.07952790745428,\"ene\":67.63288379745427,\"int\":52,\"cha\":50,\"exp\":71.012,\"cre\":54,\"eff\":66,\"sal\":879,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Mm3Jyzw\",\"mor\":82.20771679,\"hap\":63.47155486201738,\"ene\":53.06551476201737,\"int\":70,\"cha\":58,\"exp\":78.012,\"cre\":97,\"eff\":97,\"sal\":1200,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"UPRPELd\",\"mor\":54.111408520000005,\"hap\":70.75463130923622,\"ene\":70.75463130923622,\"int\":70,\"cha\":82,\"exp\":53.012,\"cre\":72,\"eff\":58,\"sal\":1005,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"pHkeEEG\",\"mor\":72.8422807,\"hap\":57.22678112816022,\"ene\":73.87644528816021,\"int\":75,\"cha\":87,\"exp\":69.012,\"cre\":74,\"eff\":94,\"sal\":1197,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"oewDLLV\",\"mor\":90.53254887000001,\"hap\":88.4418874053575,\"ene\":54.10195507535752,\"int\":67,\"cha\":82,\"exp\":74.012,\"cre\":98,\"eff\":97,\"sal\":1254,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"I5w0RVv\",\"mor\":68.67986465999999,\"hap\":86.36191913823626,\"ene\":99.99868993198773,\"int\":100,\"cha\":99,\"exp\":90.012,\"cre\":70,\"eff\":60,\"sal\":1257,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"zWRQziu\",\"mor\":100,\"hap\":87.40790145292138,\"ene\":78.04246536292138,\"int\":68,\"cha\":67,\"exp\":97.012,\"cre\":65,\"eff\":91,\"sal\":1164,\"loc\":\"\",\"pos\":\"Business\"}}],\"employeeProd\":{\"Operations\":3333.19572565721,\"Engineer\":3940.685253682992,\"Business\":1930.97889875463,\"Management\":3742.36795786125,\"Research & Development\":4184.742381296613,\"total\":17131.970217252692,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":11,\"Engineer\":11,\"Business\":10,\"Management\":11,\"Research & Development\":11,\"Training\":0,\"Unassigned\":0,\"total\":54},\"loc\":\"Aevum\",\"size\":54}},\"Chongqing\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"1SZxud4\",\"mor\":100,\"hap\":99.99732995246598,\"ene\":99.99732995246598,\"int\":85,\"cha\":100,\"exp\":88.01000000000087,\"cre\":57,\"eff\":83,\"sal\":1170,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ksPeCvG\",\"mor\":100,\"hap\":99.99876494874401,\"ene\":99.99876494874401,\"int\":68,\"cha\":98,\"exp\":84.01000000000087,\"cre\":81,\"eff\":57,\"sal\":1095,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"VO6kdow\",\"mor\":100,\"hap\":99.99712531933993,\"ene\":99.99712531933993,\"int\":92,\"cha\":50,\"exp\":89.01000000000087,\"cre\":92,\"eff\":54,\"sal\":1062,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"2WKtvNL\",\"mor\":100,\"hap\":99.99918853173645,\"ene\":99.99918853173645,\"int\":63,\"cha\":74,\"exp\":91.01000000000087,\"cre\":79,\"eff\":50,\"sal\":1002,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"fVdTqea\",\"mor\":100,\"hap\":99.99781194921644,\"ene\":99.99781194921644,\"int\":78,\"cha\":60,\"exp\":94.01000000000087,\"cre\":87,\"eff\":91,\"sal\":1161,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"7Ti0fRg\",\"mor\":100,\"hap\":99.99821733519319,\"ene\":99.99821733519319,\"int\":70,\"cha\":80,\"exp\":103.01000000000087,\"cre\":86,\"eff\":58,\"sal\":1122,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"LF7lRRA\",\"mor\":100,\"hap\":99.99902872490193,\"ene\":99.99902872490193,\"int\":97,\"cha\":71,\"exp\":66.79400000000064,\"cre\":78,\"eff\":68,\"sal\":1092,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"RPKIjMl\",\"mor\":100,\"hap\":99.99845016778401,\"ene\":99.99845016778401,\"int\":78,\"cha\":100,\"exp\":82.79400000000064,\"cre\":75,\"eff\":54,\"sal\":1119,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"E3kBivl\",\"mor\":100,\"hap\":99.99742513159443,\"ene\":99.99742513159443,\"int\":55,\"cha\":62,\"exp\":67.79400000000064,\"cre\":80,\"eff\":60,\"sal\":924,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"PI7k4eV\",\"mor\":100,\"hap\":99.99842806580456,\"ene\":99.99842806580456,\"int\":71,\"cha\":58,\"exp\":106.79400000000064,\"cre\":58,\"eff\":98,\"sal\":1125,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"zQLyDA7\",\"mor\":100,\"hap\":99.99854324991638,\"ene\":99.99854324991638,\"int\":61,\"cha\":51,\"exp\":73.79400000000064,\"cre\":86,\"eff\":76,\"sal\":993,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ueKpJgF\",\"mor\":100,\"hap\":99.99967266322743,\"ene\":99.99967266322743,\"int\":99,\"cha\":72,\"exp\":116.79400000000064,\"cre\":73,\"eff\":69,\"sal\":1239,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"djtYTNL\",\"mor\":63.878662,\"hap\":98.90653096376649,\"ene\":55.63388896376647,\"int\":71,\"cha\":50,\"exp\":67.009,\"cre\":92,\"eff\":90,\"sal\":1110,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"RwfG5ps\",\"mor\":72.12107,\"hap\":61.8132705379516,\"ene\":99.99715135915584,\"int\":91,\"cha\":66,\"exp\":73.009,\"cre\":55,\"eff\":67,\"sal\":1056,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"jL9oIQj\",\"mor\":56.666555,\"hap\":65.93439310763134,\"ene\":99.93432610763134,\"int\":51,\"cha\":84,\"exp\":72.009,\"cre\":57,\"eff\":74,\"sal\":1014,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"BTG98Jm\",\"mor\":98.90889600000001,\"hap\":87.56801019889879,\"ene\":97.8710201988988,\"int\":53,\"cha\":92,\"exp\":84.009,\"cre\":60,\"eff\":96,\"sal\":1155,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"tLDDwia\",\"mor\":51.51505,\"hap\":97.87266838772821,\"ene\":86.53935738772822,\"int\":91,\"cha\":61,\"exp\":71.009,\"cre\":54,\"eff\":72,\"sal\":1047,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"e8TE5KR\",\"mor\":83.454381,\"hap\":64.90512534686138,\"ene\":56.66271734686138,\"int\":88,\"cha\":78,\"exp\":63.009,\"cre\":91,\"eff\":50,\"sal\":1110,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"7rh2Jcq\",\"mor\":64.908963,\"hap\":75.20650619947386,\"ene\":52.53988419947385,\"int\":93,\"cha\":79,\"exp\":82.009,\"cre\":92,\"eff\":93,\"sal\":1317,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"7dlqBd2\",\"mor\":70.06046800000001,\"hap\":70.05442473183099,\"ene\":87.56954173183098,\"int\":85,\"cha\":59,\"exp\":83.009,\"cre\":53,\"eff\":66,\"sal\":1038,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"gttDNL7\",\"mor\":72.12107,\"hap\":99.9986259421431,\"ene\":96.84649175911453,\"int\":65,\"cha\":85,\"exp\":66.009,\"cre\":72,\"eff\":50,\"sal\":1014,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"CX8Wtvf\",\"mor\":79.33317699999999,\"hap\":74.17906653356971,\"ene\":99.99834099365235,\"int\":71,\"cha\":53,\"exp\":55.009,\"cre\":86,\"eff\":78,\"sal\":1029,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"1ropj66\",\"mor\":92.72709000000002,\"hap\":91.69294182341102,\"ene\":78.29902882341104,\"int\":56,\"cha\":53,\"exp\":52.009,\"cre\":91,\"eff\":95,\"sal\":1041,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"eD9eVrE\",\"mor\":71.090769,\"hap\":86.53908951053431,\"ene\":87.56939051053429,\"int\":66,\"cha\":71,\"exp\":88.009,\"cre\":92,\"eff\":55,\"sal\":1116,\"loc\":\"\",\"pos\":\"Business\"}}],\"employeeProd\":{\"Operations\":1297.8310671002155,\"Engineer\":1463.480422737666,\"Business\":666.5421593927837,\"Management\":1412.3299678665985,\"Research & Development\":1268.4985323953722,\"total\":6108.682149492636,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":5,\"Engineer\":5,\"Business\":4,\"Management\":5,\"Research & Development\":5,\"Training\":0,\"Unassigned\":0,\"total\":24},\"loc\":\"Chongqing\",\"size\":24}},\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"T4OIwCj\",\"mor\":100,\"hap\":99.99788361637559,\"ene\":99.99788361637559,\"int\":76,\"cha\":95,\"exp\":89.01600000000087,\"cre\":57,\"eff\":100,\"sal\":1182,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"6uY6xbR\",\"mor\":100,\"hap\":99.99743883250855,\"ene\":99.99743883250855,\"int\":98,\"cha\":82,\"exp\":120.01600000000087,\"cre\":65,\"eff\":71,\"sal\":1239,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"a9zNElH\",\"mor\":100,\"hap\":99.99986965767475,\"ene\":99.99986965767475,\"int\":59,\"cha\":67,\"exp\":103.01600000000087,\"cre\":81,\"eff\":58,\"sal\":1035,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"DumTNv1\",\"mor\":100,\"hap\":99.99960927078557,\"ene\":99.99960927078557,\"int\":59,\"cha\":56,\"exp\":96.01600000000087,\"cre\":73,\"eff\":60,\"sal\":963,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"kRyGBpT\",\"mor\":100,\"hap\":99.99839281090651,\"ene\":99.99839281090651,\"int\":82,\"cha\":64,\"exp\":93.01600000000087,\"cre\":91,\"eff\":89,\"sal\":1188,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"cvK8HDo\",\"mor\":100,\"hap\":99.99738047001594,\"ene\":99.99738047001594,\"int\":78,\"cha\":56,\"exp\":112.01600000000087,\"cre\":90,\"eff\":92,\"sal\":1215,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"G6hQbsx\",\"mor\":100,\"hap\":99.9980955580215,\"ene\":99.9980955580215,\"int\":97,\"cha\":69,\"exp\":84.79100000000064,\"cre\":51,\"eff\":72,\"sal\":1071,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"rVT7SLP\",\"mor\":100,\"hap\":99.99760676808023,\"ene\":99.99760676808023,\"int\":75,\"cha\":78,\"exp\":95.79100000000064,\"cre\":92,\"eff\":84,\"sal\":1224,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"7AVyel7\",\"mor\":100,\"hap\":99.99818804628133,\"ene\":99.99818804628133,\"int\":78,\"cha\":72,\"exp\":70.79100000000064,\"cre\":69,\"eff\":74,\"sal\":1041,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ueWE7hU\",\"mor\":100,\"hap\":99.9985498995362,\"ene\":99.9985498995362,\"int\":92,\"cha\":52,\"exp\":76.79100000000064,\"cre\":60,\"eff\":62,\"sal\":978,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"nlS4nfJ\",\"mor\":100,\"hap\":99.99795441171287,\"ene\":99.99795441171287,\"int\":67,\"cha\":83,\"exp\":95.79100000000064,\"cre\":87,\"eff\":76,\"sal\":1176,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"eFK6Cym\",\"mor\":100,\"hap\":99.99751584500989,\"ene\":99.99751584500989,\"int\":96,\"cha\":68,\"exp\":101.79100000000064,\"cre\":84,\"eff\":56,\"sal\":1167,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"VGSF42S\",\"mor\":65.2864,\"hap\":92.82608247431841,\"ene\":87.72558247431841,\"int\":99,\"cha\":97,\"exp\":50.006,\"cre\":81,\"eff\":77,\"sal\":1212,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"8Gi6Vtk\",\"mor\":99.9698,\"hap\":63.24198873203538,\"ene\":71.40278873203539,\"int\":63,\"cha\":86,\"exp\":87.006,\"cre\":62,\"eff\":91,\"sal\":1167,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"3KBR6r2\",\"mor\":78.54769999999999,\"hap\":58.141771710893295,\"ene\":77.5236717108933,\"int\":93,\"cha\":69,\"exp\":78.006,\"cre\":82,\"eff\":93,\"sal\":1245,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"bKGFhiy\",\"mor\":84.6683,\"hap\":81.60577736050122,\"ene\":57.123377360501216,\"int\":83,\"cha\":59,\"exp\":53.006,\"cre\":88,\"eff\":100,\"sal\":1149,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"b89HrfL\",\"mor\":99.9698,\"hap\":83.64516565174787,\"ene\":91.80596565174787,\"int\":79,\"cha\":95,\"exp\":71.006,\"cre\":67,\"eff\":95,\"sal\":1221,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"iqSn9QO\",\"mor\":69.36680000000001,\"hap\":99.9986480496167,\"ene\":56.10372132131428,\"int\":87,\"cha\":84,\"exp\":67.006,\"cre\":61,\"eff\":56,\"sal\":1065,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"VwuUwqF\",\"mor\":55.0854,\"hap\":92.82628729619188,\"ene\":94.86648729619189,\"int\":57,\"cha\":98,\"exp\":75.006,\"cre\":82,\"eff\":100,\"sal\":1236,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"LEm4v1v\",\"mor\":100,\"hap\":89.7658467643901,\"ene\":63.24324676439011,\"int\":67,\"cha\":79,\"exp\":67.006,\"cre\":57,\"eff\":98,\"sal\":1104,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"W5iR2AN\",\"mor\":56.1055,\"hap\":57.12292659588877,\"ene\":91.80632659588879,\"int\":79,\"cha\":52,\"exp\":81.006,\"cre\":85,\"eff\":76,\"sal\":1119,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"TUiLgN3\",\"mor\":84.6683,\"hap\":52.02309452896389,\"ene\":64.26429452896389,\"int\":88,\"cha\":66,\"exp\":88.006,\"cre\":83,\"eff\":76,\"sal\":1203,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"z6rFtrd\",\"mor\":67.3266,\"hap\":99.9976897313128,\"ene\":85.68465821195645,\"int\":56,\"cha\":77,\"exp\":84.006,\"cre\":95,\"eff\":96,\"sal\":1224,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"9vqhxoK\",\"mor\":64.2663,\"hap\":78.54411932195566,\"ene\":60.18231932195567,\"int\":100,\"cha\":64,\"exp\":74.006,\"cre\":60,\"eff\":61,\"sal\":1077,\"loc\":\"\",\"pos\":\"Business\"}}],\"employeeProd\":{\"Operations\":1466.715828743117,\"Engineer\":1425.2537586288438,\"Business\":594.409134922299,\"Management\":1377.3072524412505,\"Research & Development\":1496.2847992960387,\"total\":6359.97077403155,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":5,\"Engineer\":5,\"Business\":4,\"Management\":5,\"Research & Development\":5,\"Training\":0,\"Unassigned\":0,\"total\":24},\"loc\":\"Sector-12\",\"size\":24}},\"New Tokyo\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ruQFD92\",\"mor\":100,\"hap\":99.99928837277973,\"ene\":99.99928837277973,\"int\":83,\"cha\":80,\"exp\":105.00700000000087,\"cre\":77,\"eff\":78,\"sal\":1200,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"IfmhR9l\",\"mor\":100,\"hap\":99.99792334729821,\"ene\":99.99792334729821,\"int\":91,\"cha\":54,\"exp\":76.00700000000087,\"cre\":58,\"eff\":85,\"sal\":1023,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"N5Vw702\",\"mor\":100,\"hap\":99.99898763778074,\"ene\":99.99898763778074,\"int\":53,\"cha\":65,\"exp\":107.00700000000087,\"cre\":90,\"eff\":66,\"sal\":1074,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"5Zc3BDV\",\"mor\":100,\"hap\":99.99748294650597,\"ene\":99.99748294650597,\"int\":88,\"cha\":77,\"exp\":121.00700000000087,\"cre\":85,\"eff\":78,\"sal\":1278,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"2gYKEdZ\",\"mor\":100,\"hap\":99.99731021816363,\"ene\":99.99731021816363,\"int\":96,\"cha\":100,\"exp\":108.00700000000087,\"cre\":73,\"eff\":93,\"sal\":1341,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"1F24bmv\",\"mor\":100,\"hap\":99.99746171932067,\"ene\":99.99746171932067,\"int\":72,\"cha\":97,\"exp\":96.00700000000087,\"cre\":67,\"eff\":64,\"sal\":1119,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"U1rxPKu\",\"mor\":100,\"hap\":99.99751900786225,\"ene\":99.99751900786225,\"int\":62,\"cha\":70,\"exp\":95.78800000000064,\"cre\":80,\"eff\":83,\"sal\":1122,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"kfQtbYy\",\"mor\":100,\"hap\":99.99965394187329,\"ene\":99.99965394187329,\"int\":99,\"cha\":58,\"exp\":91.78800000000064,\"cre\":57,\"eff\":54,\"sal\":1029,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ISVmeuA\",\"mor\":100,\"hap\":99.99851228270316,\"ene\":99.99851228270316,\"int\":98,\"cha\":52,\"exp\":82.78800000000064,\"cre\":67,\"eff\":65,\"sal\":1044,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"c0zAB7D\",\"mor\":100,\"hap\":99.99839224625985,\"ene\":99.99839224625985,\"int\":87,\"cha\":90,\"exp\":109.78800000000064,\"cre\":62,\"eff\":99,\"sal\":1293,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"POcfhSx\",\"mor\":100,\"hap\":99.99701739872465,\"ene\":99.99701739872465,\"int\":58,\"cha\":74,\"exp\":75.78800000000064,\"cre\":82,\"eff\":100,\"sal\":1119,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"j5AFOID\",\"mor\":100,\"hap\":99.99985580027962,\"ene\":99.99985580027962,\"int\":94,\"cha\":74,\"exp\":97.78800000000064,\"cre\":71,\"eff\":74,\"sal\":1182,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"sGBD21r\",\"mor\":91.91,\"hap\":51.50901135063858,\"ene\":78.77901135063858,\"int\":89,\"cha\":86,\"exp\":50.003,\"cre\":85,\"eff\":100,\"sal\":1230,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"1bFXK3M\",\"mor\":56.56,\"hap\":84.83814227403941,\"ene\":94.93814227403941,\"int\":52,\"cha\":89,\"exp\":53.003,\"cre\":80,\"eff\":81,\"sal\":1065,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"aFp8sQd\",\"mor\":57.57,\"hap\":52.51892326072096,\"ene\":86.85892326072096,\"int\":50,\"cha\":53,\"exp\":93.003,\"cre\":91,\"eff\":91,\"sal\":1134,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"XnvuO6B\",\"mor\":64.64,\"hap\":97.96859532436429,\"ene\":72.71859532436429,\"int\":55,\"cha\":58,\"exp\":82.003,\"cre\":86,\"eff\":80,\"sal\":1083,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"UE7A5PZ\",\"mor\":95.95,\"hap\":74.73861465963991,\"ene\":88.87861465963991,\"int\":75,\"cha\":64,\"exp\":99.003,\"cre\":68,\"eff\":52,\"sal\":1074,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"l1tX28U\",\"mor\":86.86,\"hap\":55.547453090442936,\"ene\":84.83745309044295,\"int\":54,\"cha\":68,\"exp\":75.003,\"cre\":67,\"eff\":85,\"sal\":1047,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"YfXLSZ7\",\"mor\":62.62,\"hap\":77.76775218951579,\"ene\":81.8077521895158,\"int\":67,\"cha\":71,\"exp\":91.003,\"cre\":86,\"eff\":75,\"sal\":1170,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"RhLyAeT\",\"mor\":87.87,\"hap\":61.60979216343381,\"ene\":81.80979216343381,\"int\":91,\"cha\":57,\"exp\":69.003,\"cre\":51,\"eff\":75,\"sal\":1029,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"FQU6KZ9\",\"mor\":62.62,\"hap\":72.71923997757091,\"ene\":99.9892399775709,\"int\":89,\"cha\":61,\"exp\":69.003,\"cre\":93,\"eff\":83,\"sal\":1185,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"kldk0x9\",\"mor\":74.74,\"hap\":78.77749015854833,\"ene\":98.97749015854833,\"int\":82,\"cha\":84,\"exp\":74.003,\"cre\":76,\"eff\":89,\"sal\":1215,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"w9PjNnV\",\"mor\":75.75,\"hap\":58.57905426905417,\"ene\":71.70905426905416,\"int\":96,\"cha\":97,\"exp\":62.003,\"cre\":81,\"eff\":85,\"sal\":1263,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"PbPruIH\",\"mor\":79.79,\"hap\":89.88801538022024,\"ene\":83.82801538022024,\"int\":62,\"cha\":81,\"exp\":59.003,\"cre\":82,\"eff\":52,\"sal\":1008,\"loc\":\"\",\"pos\":\"Business\"}}],\"employeeProd\":{\"Operations\":1383.813347472221,\"Engineer\":1146.3527706945397,\"Business\":476.7241891551853,\"Management\":1006.2982230709343,\"Research & Development\":981.3952328058834,\"total\":4994.583763198764,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":5,\"Engineer\":3,\"Business\":2,\"Management\":2,\"Research & Development\":2,\"Training\":0,\"Unassigned\":10,\"total\":24},\"loc\":\"New Tokyo\",\"size\":24}},\"Ishima\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"FLgzbsx\",\"mor\":100,\"hap\":99.99713060235031,\"ene\":99.99713060235031,\"int\":60,\"cha\":94,\"exp\":121.00400000000087,\"cre\":78,\"eff\":55,\"sal\":1155,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"SM24y2F\",\"mor\":100,\"hap\":99.9977990249983,\"ene\":99.9977990249983,\"int\":64,\"cha\":68,\"exp\":98.00400000000087,\"cre\":63,\"eff\":97,\"sal\":1101,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"iw8KGN9\",\"mor\":100,\"hap\":99.99769101510685,\"ene\":99.99769101510685,\"int\":63,\"cha\":60,\"exp\":92.00400000000087,\"cre\":86,\"eff\":79,\"sal\":1071,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"LrslIIl\",\"mor\":100,\"hap\":99.99708855012054,\"ene\":99.99708855012054,\"int\":100,\"cha\":88,\"exp\":103.00400000000087,\"cre\":58,\"eff\":53,\"sal\":1137,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"RrSHSae\",\"mor\":100,\"hap\":99.99895685960009,\"ene\":99.99895685960009,\"int\":91,\"cha\":93,\"exp\":100.00400000000087,\"cre\":62,\"eff\":71,\"sal\":1182,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"rwRBx0S\",\"mor\":100,\"hap\":99.99995600869133,\"ene\":99.99995600869133,\"int\":83,\"cha\":56,\"exp\":84.00400000000087,\"cre\":52,\"eff\":62,\"sal\":942,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"df8PYES\",\"mor\":100,\"hap\":99.99864850670257,\"ene\":99.99864850670257,\"int\":67,\"cha\":69,\"exp\":70.78500000000064,\"cre\":53,\"eff\":79,\"sal\":966,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"iHg44FM\",\"mor\":100,\"hap\":99.99916531618152,\"ene\":99.99916531618152,\"int\":57,\"cha\":51,\"exp\":90.78500000000064,\"cre\":59,\"eff\":99,\"sal\":1020,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"KBsGju2\",\"mor\":100,\"hap\":99.99914782053237,\"ene\":99.99914782053237,\"int\":59,\"cha\":51,\"exp\":87.78500000000064,\"cre\":83,\"eff\":57,\"sal\":963,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Uer3lmx\",\"mor\":100,\"hap\":99.99768605994329,\"ene\":99.99768605994329,\"int\":64,\"cha\":51,\"exp\":88.78500000000064,\"cre\":51,\"eff\":79,\"sal\":951,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"fCmjM6C\",\"mor\":100,\"hap\":99.99828932424656,\"ene\":99.99828932424656,\"int\":72,\"cha\":97,\"exp\":109.78500000000064,\"cre\":59,\"eff\":53,\"sal\":1122,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ZsJ23Z6\",\"mor\":100,\"hap\":99.9973896626866,\"ene\":99.9973896626866,\"int\":87,\"cha\":50,\"exp\":92.78500000000064,\"cre\":79,\"eff\":100,\"sal\":1176,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"rUrU2YC\",\"mor\":64,\"hap\":61,\"ene\":63,\"int\":79,\"cha\":97,\"exp\":70,\"cre\":88,\"eff\":75,\"sal\":1227,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"VPEqkrk\",\"mor\":69,\"hap\":84,\"ene\":74,\"int\":99,\"cha\":70,\"exp\":63,\"cre\":82,\"eff\":70,\"sal\":1152,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"om2aWJu\",\"mor\":79,\"hap\":69,\"ene\":94,\"int\":100,\"cha\":58,\"exp\":90,\"cre\":71,\"eff\":51,\"sal\":1110,\"loc\":\"\",\"pos\":\"Unassigned\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"4j5vSGL\",\"mor\":88,\"hap\":85,\"ene\":72,\"int\":96,\"cha\":94,\"exp\":77,\"cre\":57,\"eff\":81,\"sal\":1215,\"loc\":\"\",\"pos\":\"Unassigned\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"QiXQapC\",\"mor\":71,\"hap\":71,\"ene\":66,\"int\":65,\"cha\":50,\"exp\":64,\"cre\":53,\"eff\":61,\"sal\":879,\"loc\":\"\",\"pos\":\"Unassigned\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"9S0zng2\",\"mor\":80,\"hap\":100,\"ene\":100,\"int\":61,\"cha\":99,\"exp\":84,\"cre\":61,\"eff\":81,\"sal\":1158,\"loc\":\"\",\"pos\":\"Unassigned\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"2Gkauto\",\"mor\":91,\"hap\":54,\"ene\":82,\"int\":77,\"cha\":68,\"exp\":93,\"cre\":75,\"eff\":86,\"sal\":1197,\"loc\":\"\",\"pos\":\"Unassigned\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"RzOPfzO\",\"mor\":86,\"hap\":91,\"ene\":66,\"int\":83,\"cha\":65,\"exp\":76,\"cre\":55,\"eff\":54,\"sal\":999,\"loc\":\"\",\"pos\":\"Unassigned\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"VEee3fc\",\"mor\":94,\"hap\":73,\"ene\":81,\"int\":95,\"cha\":77,\"exp\":70,\"cre\":56,\"eff\":75,\"sal\":1119,\"loc\":\"\",\"pos\":\"Unassigned\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ztSBU1U\",\"mor\":82,\"hap\":80,\"ene\":89,\"int\":57,\"cha\":73,\"exp\":81,\"cre\":59,\"eff\":65,\"sal\":1005,\"loc\":\"\",\"pos\":\"Unassigned\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"5e4Sxlz\",\"mor\":54,\"hap\":68,\"ene\":67,\"int\":83,\"cha\":92,\"exp\":61,\"cre\":84,\"eff\":98,\"sal\":1254,\"loc\":\"\",\"pos\":\"Unassigned\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"92rqXq8\",\"mor\":81,\"hap\":68,\"ene\":85,\"int\":82,\"cha\":95,\"exp\":90,\"cre\":88,\"eff\":76,\"sal\":1293,\"loc\":\"\",\"pos\":\"Unassigned\"}}],\"employeeProd\":{\"Operations\":1034.8681956343414,\"Engineer\":1094.1515689348248,\"Business\":366.78483218803797,\"Management\":995.3615792641758,\"Research & Development\":826.987458125119,\"total\":4318.153634146499,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":3,\"Engineer\":3,\"Business\":2,\"Management\":2,\"Research & Development\":2,\"Training\":0,\"Unassigned\":0,\"total\":12},\"loc\":\"Ishima\",\"size\":24}},\"Volhaven\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"zRFGzPc\",\"mor\":100,\"hap\":99.99858671290943,\"ene\":99.99858671290943,\"int\":81,\"cha\":63,\"exp\":98.00100000000087,\"cre\":68,\"eff\":80,\"sal\":1101,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"XI0pJUi\",\"mor\":100,\"hap\":99.99721970612966,\"ene\":99.99721970612966,\"int\":57,\"cha\":86,\"exp\":93.00100000000087,\"cre\":93,\"eff\":69,\"sal\":1125,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"e0PfyzY\",\"mor\":100,\"hap\":99.99874576256643,\"ene\":99.99874576256643,\"int\":85,\"cha\":93,\"exp\":89.00100000000087,\"cre\":77,\"eff\":99,\"sal\":1260,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"9F717HC\",\"mor\":100,\"hap\":99.99973413506018,\"ene\":99.99973413506018,\"int\":90,\"cha\":69,\"exp\":85.00100000000087,\"cre\":65,\"eff\":57,\"sal\":1029,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"N7oCZZB\",\"mor\":100,\"hap\":99.99797281078861,\"ene\":99.99797281078861,\"int\":68,\"cha\":82,\"exp\":111.00100000000087,\"cre\":97,\"eff\":51,\"sal\":1158,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"GL33WVN\",\"mor\":100,\"hap\":99.997324974522,\"ene\":99.997324974522,\"int\":98,\"cha\":91,\"exp\":75.00100000000087,\"cre\":88,\"eff\":68,\"sal\":1191,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"PCBQfYE\",\"mor\":100,\"hap\":99.99731017842336,\"ene\":99.99731017842336,\"int\":54,\"cha\":65,\"exp\":75.78200000000064,\"cre\":84,\"eff\":78,\"sal\":1020,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"UXjl8J4\",\"mor\":100,\"hap\":99.99785734118844,\"ene\":99.99785734118844,\"int\":73,\"cha\":88,\"exp\":99.78200000000064,\"cre\":82,\"eff\":91,\"sal\":1251,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"prVAeiv\",\"mor\":100,\"hap\":99.99920186709488,\"ene\":99.99920186709488,\"int\":82,\"cha\":75,\"exp\":83.78200000000064,\"cre\":92,\"eff\":51,\"sal\":1101,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"mBaIEw2\",\"mor\":100,\"hap\":99.99850246567942,\"ene\":99.99850246567942,\"int\":87,\"cha\":83,\"exp\":103.78200000000064,\"cre\":63,\"eff\":64,\"sal\":1152,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"W3i7KRp\",\"mor\":100,\"hap\":99.99866096391379,\"ene\":99.99866096391379,\"int\":78,\"cha\":96,\"exp\":69.78200000000064,\"cre\":94,\"eff\":78,\"sal\":1197,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"2DNWtaH\",\"mor\":100,\"hap\":99.99962529926574,\"ene\":99.99962529926574,\"int\":93,\"cha\":86,\"exp\":98.78200000000064,\"cre\":82,\"eff\":92,\"sal\":1305,\"loc\":\"\",\"pos\":\"Business\"}}],\"employeeProd\":{\"Operations\":1044.496582710214,\"Engineer\":1219.3725367347024,\"Business\":492.31650130030073,\"Management\":955.9510458707423,\"Research & Development\":877.4108016362197,\"total\":4589.547468252179,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":3,\"Engineer\":3,\"Business\":2,\"Management\":2,\"Research & Development\":2,\"Training\":0,\"Unassigned\":0,\"total\":12},\"loc\":\"Volhaven\",\"size\":24}}},\"lastCycleRevenue\":21449320.132601384,\"lastCycleExpenses\":4251640.797989586,\"thisCycleRevenue\":222907357.89699113,\"thisCycleExpenses\":43687773.65611906,\"warehouses\":{\"Aevum\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":18,\"sizeUsed\":3560.271075951493,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":201.39448788494153,\"loc\":\"Aevum\",\"size\":4320.000000000001,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":75,\"dmdR\":[65,85],\"cmp\":50,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1500,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":88.35959733477739,\"dmdR\":[80,99],\"cmp\":84.5350624545396,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":100.31579938395966,\"sll\":0,\"prd\":-100.31579938395964,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1972.4684551238192,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.24712815309688674}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":88.7151663279905,\"dmdR\":[80,90],\"cmp\":69.89039041690663,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":-100.31579938395964,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9181.756829073305,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.4759818263161212}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":1.0040238225012759,\"qlt\":0,\"dmd\":88.30888862696719,\"dmdR\":[80,99],\"cmp\":94.10697854225826,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":80998.36810201511,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.22253228167636932}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":19258.986468572548,\"qlt\":494.08401476499745,\"dmd\":85.60826080471244,\"dmdR\":[80,99],\"cmp\":98.2423422009842,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":80.55779515397663,\"prd\":80.55779515397663,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":16026.067857992733,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":12412.148214618248}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":314551.9154131804,\"qlt\":0,\"dmd\":38.61874621643096,\"dmdR\":[5,99],\"cmp\":25.551153501019762,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":71206.32658518247,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.52921671523331}}}}},\"Chongqing\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":18,\"sizeUsed\":3665.3256234481687,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":141.64643376321465,\"loc\":\"Chongqing\",\"size\":4320.000000000001,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":75,\"dmdR\":[65,85],\"cmp\":50,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1500,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":82.42003984620635,\"dmdR\":[80,99],\"cmp\":69.81069553558602,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":70.43977077367327,\"sll\":0,\"prd\":-70.43977077367327,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1930.1108196150126,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.30442508104397276}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":87.5303010433953,\"dmdR\":[80,90],\"cmp\":90.62513660672639,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":-70.43977077367327,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7905.595771918867,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.34274428521921085}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":405.2138333134598,\"qlt\":0,\"dmd\":89.42179402664547,\"dmdR\":[80,99],\"cmp\":95.29846476128981,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":70073.48019487159,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.038571477430516185}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":18936.60179941376,\"qlt\":466.5636855592457,\"dmd\":91.42114216359896,\"dmdR\":[80,99],\"cmp\":86.10344873810878,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":56.65857350528586,\"prd\":56.65857350528586,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":18435.92669455954,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":73994.3703182213}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":313811.70537001255,\"qlt\":0,\"dmd\":22.86687542706609,\"dmdR\":[5,99],\"cmp\":65.61295974511312,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":81401.76866795208,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.08606479052442952}}}}},\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":18,\"sizeUsed\":3654.360384539724,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":144.48828427786947,\"loc\":\"Sector-12\",\"size\":4320.000000000001,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":75,\"dmdR\":[65,85],\"cmp\":50,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1500,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":90.78663444103633,\"dmdR\":[80,99],\"cmp\":79.84800252112136,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":67.36025179960453,\"sll\":0,\"prd\":-67.36025179960451,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1967.0022073979924,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.2323986282927305}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":88.20018192067177,\"dmdR\":[80,90],\"cmp\":70.26249300603223,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":-67.36025179960451,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8668.286626906887,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.23107629286582115}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":74.00844259007728,\"qlt\":0,\"dmd\":89.59971642929622,\"dmdR\":[80,99],\"cmp\":86.41858209170896,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":78106.14838060709,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.14244258265061316}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":19771.33996134728,\"qlt\":466.141246317066,\"dmd\":92.21152499850024,\"dmdR\":[80,99],\"cmp\":81.65969936137147,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":57.795313711147784,\"prd\":57.795313711147784,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":15999.412514183967,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":95433.8048357708}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":328044.4334219915,\"qlt\":0,\"dmd\":22.189074724544938,\"dmdR\":[5,99],\"cmp\":31.803537606384914,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":56936.75289554849,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.20408470183654276}}}}},\"New Tokyo\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":18,\"sizeUsed\":3651.1619474832737,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":135.80201709570778,\"loc\":\"New Tokyo\",\"size\":4320.000000000001,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":75,\"dmdR\":[65,85],\"cmp\":50,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1500,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":92.67052090176861,\"dmdR\":[80,99],\"cmp\":77.77900045360948,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":64.72471128981047,\"sll\":0,\"prd\":-64.72471128981047,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1965.607953599778,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.2498967633864543}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":80.67871546981802,\"dmdR\":[80,90],\"cmp\":78.38626165752933,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":-64.72471128981047,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5624.598578646814,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.278174215352955}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":474.7102817967063,\"qlt\":0,\"dmd\":93.18400867948841,\"dmdR\":[80,99],\"cmp\":84.08255741089879,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":80966.64192599813,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.10022438789289333}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":18669.281241178418,\"qlt\":463.04483495355834,\"dmd\":94.19420402426293,\"dmdR\":[80,99],\"cmp\":91.79057030361385,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":54.32080683828311,\"prd\":54.32080683828311,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9759.500795995586,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":40865.47149693792}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":309375.7364934157,\"qlt\":0,\"dmd\":51.91180981242667,\"dmdR\":[5,99],\"cmp\":30.01378251141894,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":173267.66222735567,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.45996858155396236}}}}},\"Ishima\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":18,\"sizeUsed\":3654.935106191099,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":127.8577711686888,\"loc\":\"Ishima\",\"size\":4320.000000000001,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":75,\"dmdR\":[65,85],\"cmp\":50,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1500,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":85.40238952615151,\"dmdR\":[80,99],\"cmp\":78.16599052555306,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":63.75353568582508,\"sll\":0,\"prd\":-63.753535685825085,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2019.1696775960577,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.19808337151016422}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":84.4614910077585,\"dmdR\":[80,90],\"cmp\":81.58488849690862,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":-63.753535685825085,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":6807.988175273133,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.18990070398293699}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":276.10268048595765,\"qlt\":0,\"dmd\":80.75324624618248,\"dmdR\":[80,99],\"cmp\":81.39985995840365,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":72922.52005525971,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.17549537319155387}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":19253.877446954153,\"qlt\":462.46684494954866,\"dmd\":81.77915477863404,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":51.14310846747552,\"prd\":51.14310846747552,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":14178.675437213138,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":80517.45675185483}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":318299.2042505409,\"qlt\":0,\"dmd\":75.75518149024661,\"dmdR\":[5,99],\"cmp\":56.91031035858901,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":90137.76690065992,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.37258810809775883}}}}},\"Volhaven\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":18,\"sizeUsed\":3655.342192161708,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":127.74496407984682,\"loc\":\"Volhaven\",\"size\":4320.000000000001,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":75,\"dmdR\":[65,85],\"cmp\":50,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1500,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":80.3920144955803,\"dmdR\":[80,99],\"cmp\":89.13787637283906,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":63.69719006088377,\"sll\":0,\"prd\":-63.69719006088377,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1845.3423082124857,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.26035712287002605}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":88.48211981506007,\"dmdR\":[80,90],\"cmp\":74.74027035706992,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":-63.69719006088377,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7838.90338578484,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.30919704196735137}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":519.7742904288793,\"qlt\":0,\"dmd\":98.59450568697797,\"dmdR\":[80,99],\"cmp\":95.33783354703198,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":70394.34290390692,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.04814137087895333}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":18572.00867925077,\"qlt\":463.86003988694904,\"dmd\":83.1541388005915,\"dmdR\":[80,99],\"cmp\":95.17052941724096,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":51.09798563193873,\"prd\":51.09798563193873,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9926.5951179155,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":21443.34962445345}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":307650.8358044384,\"qlt\":0,\"dmd\":48.82859909243669,\"dmdR\":[5,99],\"cmp\":53.155941217577784,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":69589.56156032492,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.22761537429154438}}}}}}}}],\"funds\":43194206038.13434,\"revenue\":34071497.53901142,\"expenses\":7199581.548096713,\"fundingRound\":4,\"public\":true,\"totalShares\":1000000000,\"numShares\":100000000,\"shareSalesUntilPriceUpdate\":1000000,\"shareSaleCooldown\":0,\"issueNewSharesCooldown\":0,\"dividendPercentage\":10,\"dividendTaxPercentage\":50,\"issuedShares\":0,\"sharePrice\":308.13053754110024,\"storedCycles\":7,\"avgProfit\":26871915.990914706,\"state\":{\"ctor\":\"CorporationState\",\"data\":{\"state\":0}},\"unlockUpgrades\":[0,1,0,0,0,0,0,1,1],\"upgrades\":[14,14,0,8,6,6,6,6,6,0],\"upgradeMultipliers\":[1.42,2.4000000000000004,1,1.04,1.6,1.6,1.6,1.6,1.06,1]}},\"bladeburner\":{\"ctor\":\"Bladeburner\",\"data\":{\"numHosp\":3,\"moneyLost\":13700000,\"rank\":547061.02870271,\"maxRank\":547061.02870271,\"skillPoints\":348,\"totalSkillPoints\":182353,\"teamSize\":0,\"teamLost\":0,\"hpLost\":285,\"storedCycles\":1,\"randomEventCounter\":549,\"actionTimeToComplete\":63,\"actionTimeCurrent\":33,\"actionTimeOverflow\":0,\"action\":{\"ctor\":\"ActionIdentifier\",\"data\":{\"name\":\"Operation Daedalus\",\"type\":4}},\"cities\":{\"Aevum\":{\"ctor\":\"City\",\"data\":{\"name\":\"Aevum\",\"pop\":3016952204,\"popEst\":3016952204,\"comms\":148,\"chaos\":49.45236930218676}},\"Chongqing\":{\"ctor\":\"City\",\"data\":{\"name\":\"Chongqing\",\"pop\":2023027880,\"popEst\":352219516.169333,\"comms\":20,\"chaos\":73.00291878977423}},\"Sector-12\":{\"ctor\":\"City\",\"data\":{\"name\":\"Sector-12\",\"pop\":725802877,\"popEst\":682005614,\"comms\":0,\"chaos\":130.33098399647986}},\"New Tokyo\":{\"ctor\":\"City\",\"data\":{\"name\":\"New Tokyo\",\"pop\":1689632028,\"popEst\":1443664175,\"comms\":52,\"chaos\":67.09652103105287}},\"Ishima\":{\"ctor\":\"City\",\"data\":{\"name\":\"Ishima\",\"pop\":2769213870,\"popEst\":0,\"comms\":0,\"chaos\":179.7946015486899}},\"Volhaven\":{\"ctor\":\"City\",\"data\":{\"name\":\"Volhaven\",\"pop\":1244462785,\"popEst\":1115372622,\"comms\":29,\"chaos\":101.48236821393874}}},\"city\":\"Aevum\",\"skills\":{\"Short-Circuit\":102,\"Digital Observer\":102,\"Evasive System\":102,\"Reaper\":85,\"Overclock\":90,\"Blade's Intuition\":102,\"Cloak\":129,\"Datamancer\":213,\"Cyber's Edge\":24,\"Hyperdrive\":1,\"Tracer\":1,\"Hands of Midas\":1},\"skillMultipliers\":{\"successChanceAll\":4.0600000000000005,\"successChanceStealth\":8.094999999999999,\"successChanceKill\":6.61,\"successChanceContract\":1.04,\"successChanceOperation\":5.08,\"successChanceEstimate\":11.65,\"actionTime\":0.09999999999999998,\"effHack\":1,\"effStr\":2.7,\"effDef\":2.7,\"effDex\":13.716000000000001,\"effAgi\":13.716000000000001,\"effCha\":1,\"effInt\":1,\"stamina\":1.48,\"money\":1.1,\"expGain\":1.1},\"staminaBonus\":0,\"maxStamina\":35106.24544062094,\"stamina\":35106.24544062094,\"contracts\":{\"Tracking\":{\"ctor\":\"Contract\",\"data\":{\"name\":\"Tracking\",\"level\":58,\"maxLevel\":58,\"autoLevel\":true,\"baseDifficulty\":131.87840227755265,\"difficultyFac\":1.02,\"rewardFac\":1.041,\"successes\":1825,\"failures\":6,\"rankGain\":0.3,\"rankLoss\":0,\"hpLoss\":0.5,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":1.1708333332382044,\"weights\":{\"hack\":0,\"str\":0.05,\"def\":0.05,\"dex\":0.35,\"agi\":0.35,\"cha\":0.1,\"int\":0.05},\"decays\":{\"hack\":0,\"str\":0.91,\"def\":0.91,\"dex\":0.91,\"agi\":0.91,\"cha\":0.9,\"int\":1},\"teamCount\":0}},\"Bounty Hunter\":{\"ctor\":\"Contract\",\"data\":{\"name\":\"Bounty Hunter\",\"level\":58,\"maxLevel\":58,\"autoLevel\":true,\"baseDifficulty\":250.7934621161615,\"difficultyFac\":1.04,\"rewardFac\":1.085,\"successes\":1775,\"failures\":6,\"rankGain\":0.9,\"rankLoss\":0,\"hpLoss\":1,\"hpLost\":0,\"isStealth\":false,\"isKill\":true,\"count\":0.527083333229099,\"weights\":{\"hack\":0,\"str\":0.15,\"def\":0.15,\"dex\":0.25,\"agi\":0.25,\"cha\":0.1,\"int\":0.1},\"decays\":{\"hack\":0,\"str\":0.91,\"def\":0.91,\"dex\":0.91,\"agi\":0.91,\"cha\":0.8,\"int\":0.9},\"teamCount\":0}},\"Retirement\":{\"ctor\":\"Contract\",\"data\":{\"name\":\"Retirement\",\"level\":58,\"maxLevel\":58,\"autoLevel\":true,\"baseDifficulty\":213.3996581175333,\"difficultyFac\":1.03,\"rewardFac\":1.065,\"successes\":1815,\"failures\":9,\"rankGain\":0.6,\"rankLoss\":0,\"hpLoss\":1,\"hpLost\":0,\"isStealth\":false,\"isKill\":true,\"count\":0.5022916665839661,\"weights\":{\"hack\":0,\"str\":0.2,\"def\":0.2,\"dex\":0.2,\"agi\":0.2,\"cha\":0.1,\"int\":0.1},\"decays\":{\"hack\":0,\"str\":0.91,\"def\":0.91,\"dex\":0.91,\"agi\":0.91,\"cha\":0.8,\"int\":0.9},\"teamCount\":0}}},\"operations\":{\"Investigation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Investigation\",\"level\":45,\"maxLevel\":45,\"autoLevel\":true,\"baseDifficulty\":415.971946343594,\"difficultyFac\":1.03,\"rewardFac\":1.07,\"successes\":1078,\"failures\":5,\"rankGain\":2.2,\"rankLoss\":0.2,\"hpLoss\":0,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":1.1404166669594724,\"weights\":{\"hack\":0.25,\"str\":0.05,\"def\":0.05,\"dex\":0.2,\"agi\":0.1,\"cha\":0.25,\"int\":0.1},\"decays\":{\"hack\":0.85,\"str\":0.9,\"def\":0.9,\"dex\":0.9,\"agi\":0.9,\"cha\":0.7,\"int\":0.9},\"teamCount\":0,\"reqdRank\":25}},\"Undercover Operation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Undercover Operation\",\"level\":46,\"maxLevel\":46,\"autoLevel\":true,\"baseDifficulty\":451.8075298076798,\"difficultyFac\":1.04,\"rewardFac\":1.09,\"successes\":1140,\"failures\":9,\"rankGain\":4.4,\"rankLoss\":0.4,\"hpLoss\":2,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":0.9145833336325969,\"weights\":{\"hack\":0.2,\"str\":0.05,\"def\":0.05,\"dex\":0.2,\"agi\":0.2,\"cha\":0.2,\"int\":0.1},\"decays\":{\"hack\":0.8,\"str\":0.9,\"def\":0.9,\"dex\":0.9,\"agi\":0.9,\"cha\":0.7,\"int\":0.9},\"teamCount\":0,\"reqdRank\":100}},\"Sting Operation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Sting Operation\",\"level\":41,\"maxLevel\":41,\"autoLevel\":true,\"baseDifficulty\":688.6266965459424,\"difficultyFac\":1.04,\"rewardFac\":1.095,\"successes\":911,\"failures\":2,\"rankGain\":5.5,\"rankLoss\":0.5,\"hpLoss\":2.5,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":1.0331250003742318,\"weights\":{\"hack\":0.25,\"str\":0.05,\"def\":0.05,\"dex\":0.25,\"agi\":0.1,\"cha\":0.2,\"int\":0.1},\"decays\":{\"hack\":0.8,\"str\":0.85,\"def\":0.85,\"dex\":0.85,\"agi\":0.85,\"cha\":0.7,\"int\":0.9},\"teamCount\":0,\"reqdRank\":500}},\"Raid\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Raid\",\"level\":17,\"maxLevel\":17,\"autoLevel\":true,\"baseDifficulty\":875.8198644540121,\"difficultyFac\":1.045,\"rewardFac\":1.1,\"successes\":168,\"failures\":0,\"rankGain\":55,\"rankLoss\":2.5,\"hpLoss\":50,\"hpLost\":0,\"isStealth\":false,\"isKill\":true,\"count\":802.4700000005013,\"weights\":{\"hack\":0.1,\"str\":0.2,\"def\":0.2,\"dex\":0.2,\"agi\":0.2,\"cha\":0,\"int\":0.1},\"decays\":{\"hack\":0.7,\"str\":0.8,\"def\":0.8,\"dex\":0.8,\"agi\":0.8,\"cha\":0,\"int\":0.9},\"teamCount\":0,\"reqdRank\":3000}},\"Stealth Retirement Operation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Stealth Retirement Operation\",\"level\":7,\"maxLevel\":7,\"autoLevel\":true,\"baseDifficulty\":915.404952337968,\"difficultyFac\":1.05,\"rewardFac\":1.11,\"successes\":35,\"failures\":0,\"rankGain\":22,\"rankLoss\":2,\"hpLoss\":10,\"hpLost\":0,\"isStealth\":true,\"isKill\":true,\"count\":550.3812500011474,\"weights\":{\"hack\":0.1,\"str\":0.1,\"def\":0.1,\"dex\":0.3,\"agi\":0.3,\"cha\":0,\"int\":0.1},\"decays\":{\"hack\":0.7,\"str\":0.8,\"def\":0.8,\"dex\":0.8,\"agi\":0.8,\"cha\":0,\"int\":0.9},\"teamCount\":0,\"reqdRank\":20000}},\"Assassination\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Assassination\",\"level\":33,\"maxLevel\":33,\"autoLevel\":true,\"baseDifficulty\":1503.3788837504771,\"difficultyFac\":1.06,\"rewardFac\":1.14,\"successes\":577,\"failures\":0,\"rankGain\":44,\"rankLoss\":4,\"hpLoss\":5,\"hpLost\":0,\"isStealth\":true,\"isKill\":true,\"count\":0.8554166674864974,\"weights\":{\"hack\":0.1,\"str\":0.1,\"def\":0.1,\"dex\":0.3,\"agi\":0.3,\"cha\":0,\"int\":0.1},\"decays\":{\"hack\":0.6,\"str\":0.8,\"def\":0.8,\"dex\":0.8,\"agi\":0.8,\"cha\":0,\"int\":0.8},\"teamCount\":0,\"reqdRank\":50000}}},\"blackops\":{\"Operation Typhoon\":true,\"Operation Zero\":true,\"Operation X\":true,\"Operation Titan\":true,\"Operation Ares\":true,\"Operation Archangel\":true,\"Operation Juggernaut\":true,\"Operation Red Dragon\":true,\"Operation K\":true,\"Operation Deckard\":true,\"Operation Tyrell\":true,\"Operation Wallace\":true,\"Operation Shoulder of Orion\":true,\"Operation Hyron\":true,\"Operation Morpheus\":true,\"Operation Ion Storm\":true,\"Operation Annihilus\":true,\"Operation Ultron\":true,\"Operation Centurion\":true,\"Operation Vindictus\":true},\"logging\":{\"general\":true,\"contracts\":true,\"ops\":true,\"blackops\":true,\"events\":true},\"automateEnabled\":false,\"automateActionHigh\":{\"ctor\":\"ActionIdentifier\",\"data\":{\"name\":\"\",\"type\":1}},\"automateThreshHigh\":0,\"automateActionLow\":{\"ctor\":\"ActionIdentifier\",\"data\":{\"name\":\"\",\"type\":1}},\"automateThreshLow\":0,\"consoleHistory\":[],\"consoleLogs\":[\"[5/14 05:19:27] Stealth Retirement Operation successfully completed! Gained 26.213 rank\",\"[5/14 05:19:57] Field analysis completed. Gained 0.06 rank, 63.7 hacking exp, and 90.4 charisma exp\",\"[5/14 05:19:58] Investigation successfully completed! Gained 26.546 rank\",\"[5/14 05:19:59] Retirement contract successfully completed! Gained 13.035 rank and $9.960m\",\"[5/14 05:20:29] Field analysis completed. Gained 0.06 rank, 63.7 hacking exp, and 90.4 charisma exp\",\"[5/14 05:20:31] Undercover Operation successfully completed! Gained 134.152 rank\",\"[5/14 05:20:33] Bounty Hunter contract successfully completed! Gained 47.400 rank and $26.509m\",\"[5/14 05:21:03] Field analysis completed. Gained 0.06 rank, 63.7 hacking exp, and 90.4 charisma exp\",\"[5/14 05:21:08] Assassination successfully completed! Gained 1,404.438 rank\",\"[5/14 05:21:10] Sting Operation successfully completed! Gained 117.057 rank\",\"[5/14 05:21:11] Tracking contract successfully completed! Gained 1.655 rank and $2.717m\",\"[5/14 05:21:41] Field analysis completed. Gained 0.06 rank, 63.7 hacking exp, and 90.4 charisma exp\",\"[5/14 05:21:50] Retirement contract successfully completed! Gained 12.080 rank and $9.960m\",\"[5/14 05:22:20] Field analysis completed. Gained 0.06 rank, 63.7 hacking exp, and 90.4 charisma exp\",\"[5/14 05:22:22] Bounty Hunter contract successfully completed! Gained 56.478 rank and $26.509m\",\"[5/14 05:22:52] Field analysis completed. Gained 0.06 rank, 63.7 hacking exp, and 90.4 charisma exp\",\"[5/14 05:22:53] Tracking contract successfully completed! Gained 1.727 rank and $2.717m\",\"[5/14 05:23:23] Field analysis completed. Gained 0.06 rank, 63.7 hacking exp, and 90.4 charisma exp\",\"[5/14 05:23:24] Investigation successfully completed! Gained 27.172 rank\",\"[5/14 05:23:54] Field analysis completed. Gained 0.06 rank, 63.7 hacking exp, and 90.4 charisma exp\",\"[5/14 05:23:56] Undercover Operation successfully completed! Gained 136.411 rank\",\"[5/14 05:23:57] Retirement contract successfully completed! Gained 13.096 rank and $9.960m\",\"[5/14 05:24:07] Intelligence indicates that the Synthoid population of New Tokyo just changed significantly\",\"[5/14 05:24:27] Field analysis completed. Gained 0.06 rank, 63.7 hacking exp, and 90.4 charisma exp\",\"[5/14 05:24:29] Sting Operation successfully completed! Gained 114.404 rank\",\"[5/14 05:24:31] Bounty Hunter contract successfully completed! Gained 56.646 rank and $26.509m\",\"[5/14 05:25:01] Field analysis completed. Gained 0.06 rank, 63.7 hacking exp, and 90.4 charisma exp\",\"[5/14 05:25:03] Tracking contract successfully completed! Gained 1.892 rank and $2.717m\",\"[5/14 05:25:33] Field analysis completed. Gained 0.06 rank, 63.7 hacking exp, and 90.4 charisma exp\",\"[5/14 05:26:03] Field analysis completed. Gained 0.06 rank, 63.7 hacking exp, and 90.4 charisma exp\",\"[5/14 05:26:04] Retirement contract successfully completed! Gained 13.411 rank and $9.960m\",\"[5/14 05:26:34] Field analysis completed. Gained 0.06 rank, 63.7 hacking exp, and 90.4 charisma exp\",\"[5/14 05:26:35] Investigation successfully completed! Gained 26.911 rank\",\"[5/14 05:26:37] Bounty Hunter contract successfully completed! Gained 53.841 rank and $26.509m\",\"[5/14 05:26:38] Tracking contract successfully completed! Gained 1.664 rank and $2.717m\",\"[5/14 05:27:08] Field analysis completed. Gained 0.06 rank, 63.7 hacking exp, and 90.4 charisma exp\",\"[5/14 05:27:10] Undercover Operation successfully completed! Gained 129.469 rank\",\"[5/14 05:27:40] Field analysis completed. Gained 0.06 rank, 63.7 hacking exp, and 90.4 charisma exp\",\"[5/14 05:28:02] Bounty Hunter contract successfully completed! Gained 54.868 rank and $28.763m\",\"[5/14 05:28:03] Retirement contract successfully completed! Gained 13.017 rank and $9.960m\",\"[5/14 05:28:28] Tensions between Synthoids and humans lead to riots in Volhaven! Chaos increased\",\"[5/14 05:28:33] Field analysis completed. Gained 0.06 rank, 63.7 hacking exp, and 90.4 charisma exp\",\"[5/14 05:28:38] Assassination successfully completed! Gained 1,443.545 rank\",\"[5/14 05:28:40] Sting Operation successfully completed! Gained 119.377 rank\",\"[5/14 05:28:41] Tracking contract successfully completed! Gained 1.669 rank and $2.717m\",\"[5/14 05:29:11] Field analysis completed. Gained 0.06 rank, 63.7 hacking exp, and 90.4 charisma exp\",\"[5/14 05:29:28] Investigation successfully completed! Gained 27.097 rank\",\"[5/14 05:29:58] Field analysis completed. Gained 0.06 rank, 63.7 hacking exp, and 90.4 charisma exp\",\"[5/14 05:30:00] Undercover Operation successfully completed! Gained 118.862 rank\",\"[5/14 05:30:30] Field analysis completed. Gained 0.06 rank, 63.7 hacking exp, and 90.4 charisma exp\",\"[5/14 05:30:31] Retirement contract successfully completed! Gained 14.058 rank and $9.960m\",\"[5/14 05:30:33] Bounty Hunter contract successfully completed! Gained 53.160 rank and $28.763m\",\"[5/14 05:30:34] Tracking contract successfully completed! Gained 1.641 rank and $2.717m\",\"[5/14 05:31:04] Field analysis completed. Gained 0.06 rank, 63.7 hacking exp, and 90.4 charisma exp\",\"[5/14 05:31:34] Field analysis completed. Gained 0.06 rank, 63.7 hacking exp, and 90.4 charisma exp\",\"[5/14 05:31:44] Sting Operation successfully completed! Gained 134.245 rank\",\"[5/14 05:32:14] Field analysis completed. Gained 0.06 rank, 63.7 hacking exp, and 90.4 charisma exp\",\"[5/14 05:32:15] Retirement contract successfully completed! Gained 11.989 rank and $9.960m\",\"[5/14 05:32:17] Bounty Hunter contract successfully completed! Gained 51.120 rank and $28.763m\",\"[5/14 05:32:47] Field analysis completed. Gained 0.06 rank, 63.7 hacking exp, and 90.4 charisma exp\",\"[5/14 05:32:48] Investigation successfully completed! Gained 25.136 rank\",\"[5/14 05:32:49] Tracking contract successfully completed! Gained 1.902 rank and $2.717m\",\"[5/14 05:33:19] Field analysis completed. Gained 0.06 rank, 63.7 hacking exp, and 90.4 charisma exp\",\"[5/14 05:33:23] Undercover Operation successfully completed! Gained 127.718 rank\",\"[5/14 05:33:53] Field analysis completed. Gained 0.06 rank, 63.7 hacking exp, and 90.4 charisma exp\",\"[5/14 05:33:59] Bounty Hunter contract successfully completed! Gained 54.324 rank and $28.763m\",\"[5/14 05:34:15] Intelligence indicates that the Synthoid population of Ishima just changed significantly\",\"[5/14 05:34:29] Field analysis completed. Gained 0.06 rank, 63.7 hacking exp, and 90.4 charisma exp\",\"[5/14 05:34:30] Retirement contract successfully completed! Gained 13.143 rank and $9.960m\",\"[5/14 05:34:31] Tracking contract successfully completed! Gained 1.817 rank and $2.717m\",\"[5/14 05:35:01] Field analysis completed. Gained 0.06 rank, 63.7 hacking exp, and 90.4 charisma exp\",\"[5/14 05:35:27] Sting Operation successfully completed! Gained 120.292 rank\",\"[5/14 05:35:57] Field analysis completed. Gained 0.06 rank, 63.7 hacking exp, and 90.4 charisma exp\",\"[5/14 05:35:58] Investigation successfully completed! Gained 27.127 rank\",\"[5/14 05:36:01] Bounty Hunter contract successfully completed! Gained 56.493 rank and $28.763m\",\"[5/14 05:36:02] Retirement contract successfully completed! Gained 13.717 rank and $9.960m\",\"[5/14 05:36:32] Field analysis completed. Gained 0.06 rank, 63.7 hacking exp, and 90.4 charisma exp\",\"[5/14 05:36:37] Assassination successfully completed! Gained 1,668.306 rank\",\"[5/14 05:36:39] Undercover Operation successfully completed! Gained 127.920 rank\",\"[5/14 05:36:40] Tracking contract successfully completed! Gained 1.808 rank and $2.717m\",\"[5/14 05:37:10] Field analysis completed. Gained 0.06 rank, 63.7 hacking exp, and 90.4 charisma exp\",\"[5/14 05:37:40] Field analysis completed. Gained 0.06 rank, 63.7 hacking exp, and 90.4 charisma exp\",\"[5/14 05:37:52] Bounty Hunter contract successfully completed! Gained 60.735 rank and $28.763m\",\"[5/14 05:38:22] Field analysis completed. Gained 0.06 rank, 63.7 hacking exp, and 90.4 charisma exp\",\"[5/14 05:38:23] Retirement contract successfully completed! Gained 12.528 rank and $9.960m\",\"[5/14 05:38:53] Field analysis completed. Gained 0.06 rank, 63.7 hacking exp, and 90.4 charisma exp\",\"[5/14 05:38:54] Tracking contract successfully completed! Gained 1.917 rank and $2.717m\",\"[5/14 05:39:24] Field analysis completed. Gained 0.06 rank, 63.7 hacking exp, and 90.4 charisma exp\",\"[5/14 05:39:26] Sting Operation successfully completed! Gained 122.942 rank\",\"[5/14 05:39:27] Investigation successfully completed! Gained 27.359 rank\",\"[5/14 05:39:57] Field analysis completed. Gained 0.06 rank, 63.7 hacking exp, and 90.4 charisma exp\",\"[5/14 05:39:59] Undercover Operation successfully completed! Gained 120.514 rank\",\"[5/14 05:40:01] Bounty Hunter contract successfully completed! Gained 58.957 rank and $28.763m\",\"[5/14 05:40:31] Field analysis completed. Gained 0.06 rank, 63.7 hacking exp, and 90.4 charisma exp\",\"[5/14 05:40:32] Retirement contract successfully completed! Gained 14.209 rank and $9.960m\",\"[5/14 05:41:02] Field analysis completed. Gained 0.06 rank, 63.7 hacking exp, and 90.4 charisma exp\",\"[5/14 05:41:03] Tracking contract successfully completed! Gained 1.843 rank and $2.717m\",\"[5/14 05:41:33] Field analysis completed. Gained 0.06 rank, 63.7 hacking exp, and 90.4 charisma exp\",\"[5/14 05:41:47] Bounty Hunter contract successfully completed! Gained 55.320 rank and $28.763m\",\"[5/14 05:42:08] Retirement contract successfully completed! Gained 14.209 rank and $9.960m\"]}},\"bladeburner_max_stamina_mult\":1.2936000000000003,\"bladeburner_stamina_gain_mult\":1.2594960000000004,\"bladeburner_analysis_mult\":1.4168,\"bladeburner_success_chance_mult\":1.4303895051264004,\"sleeves\":[{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":1116,\"strength\":99502,\"defense\":81259,\"dexterity\":15036,\"agility\":17821,\"charisma\":1293,\"intelligence\":1,\"hp\":8135,\"max_hp\":8135,\"hacking_exp\":1053569.2859466164,\"strength_exp\":1145188.1624410907,\"defense_exp\":1145188.1624410907,\"dexterity_exp\":1316966.3868202094,\"agility_exp\":1145188.1624410907,\"charisma_exp\":468496.0457575127,\"intelligence_exp\":0,\"hacking_mult\":13.081055489392522,\"strength_mult\":403.7458211949797,\"defense_mult\":329.72149620864525,\"dexterity_mult\":59.923627612024475,\"agility_mult\":72.312896269152,\"charisma_mult\":5.936530279680002,\"hacking_exp_mult\":15.320075574544287,\"strength_exp_mult\":3.2663792700000003,\"defense_exp_mult\":3.2663792700000003,\"dexterity_exp_mult\":3.7563361604999996,\"agility_exp_mult\":3.2663792700000003,\"charisma_exp_mult\":5.997338489142001,\"hacking_chance_mult\":9518.198929558566,\"hacking_speed_mult\":3631.9112247099924,\"hacking_money_mult\":32380007689.937508,\"hacking_grow_mult\":825.0050068497658,\"company_rep_mult\":15.536583404842508,\"faction_rep_mult\":2.3516761125,\"crime_money_mult\":6.092204421875001,\"crime_success_mult\":3.2600425000000004,\"work_money_mult\":2.34564,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"NutriGen Implant\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"INFRARET Enhancement\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"DermaForce Particle Barrier\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"Augmented Targeting III\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"Neurotrainer III\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"Bionic Arms\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"The Black Hand\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"PCMatrix\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"HyperSight Corneal Implant\",\"level\":1},{\"name\":\"Graphene BrachiBlades Upgrade\",\"level\":1},{\"name\":\"SmartJaw\",\"level\":1},{\"name\":\"PC Direct-Neural Interface\",\"level\":1},{\"name\":\"Synfibril Muscle\",\"level\":1},{\"name\":\"nextSENS Gene Modification\",\"level\":1},{\"name\":\"Photosynthetic Cells\",\"level\":1},{\"name\":\"Neotra\",\"level\":1},{\"name\":\"Graphene Bionic Arms Upgrade\",\"level\":1},{\"name\":\"PC Direct-Neural Interface Optimization Submodule\",\"level\":1},{\"name\":\"Synthetic Heart\",\"level\":1},{\"name\":\"Graphene Bionic Legs Upgrade\",\"level\":1},{\"name\":\"NEMEAN Subdermal Weave\",\"level\":1},{\"name\":\"Xanipher\",\"level\":1},{\"name\":\"Graphene Bone Lacings\",\"level\":1},{\"name\":\"CordiARC Fusion Reactor\",\"level\":1},{\"name\":\"SPTN-97 Gene Modification\",\"level\":1},{\"name\":\"PC Direct-Neural Interface NeuroNet Injector\",\"level\":1},{\"name\":\"Graphene Bionic Spine Upgrade\",\"level\":1},{\"name\":\"Unstable Circadian Modulator\",\"level\":1},{\"name\":\"Speech Processor Implant\",\"level\":1},{\"name\":\"TITN-41 Gene-Modification Injection\",\"level\":1},{\"name\":\"Enhanced Social Interaction Implant\",\"level\":1},{\"name\":\"BitWire\",\"level\":1},{\"name\":\"Artificial Bio-neural Network Implant\",\"level\":1},{\"name\":\"Artificial Synaptic Potentiation\",\"level\":1},{\"name\":\"Enhanced Myelin Sheathing\",\"level\":1},{\"name\":\"Neural-Retention Enhancement\",\"level\":1},{\"name\":\"Embedded Netburner Module\",\"level\":1},{\"name\":\"Embedded Netburner Module Core Implant\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V2 Upgrade\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V3 Upgrade\",\"level\":1},{\"name\":\"Neuralstimulator\",\"level\":1},{\"name\":\"Neural Accelerator\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen I\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen II\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen III\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen V\",\"level\":1},{\"name\":\"Neuronal Densification\",\"level\":1},{\"name\":\"OmniTek InfoLoad\",\"level\":1},{\"name\":\"BitRunners Neurolink\",\"level\":1},{\"name\":\"CRTX42-AA Gene Modification\",\"level\":1},{\"name\":\"Neuregen Gene Modification\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":1,\"currentTaskLocation\":\"NWO\",\"currentTaskMaxTime\":0,\"currentTaskTime\":43000,\"earningsForSleeves\":{\"hack\":565829.6566148703,\"str\":156694.24417188021,\"def\":156694.24417188021,\"dex\":171600.2660856559,\"agi\":156694.24417188021,\"cha\":109645.9491450461,\"money\":0},\"earningsForPlayer\":{\"hack\":565829.6566148703,\"str\":156694.24417188021,\"def\":156694.24417188021,\"dex\":171600.2660856559,\"agi\":156694.24417188021,\"cha\":109645.9491450461,\"money\":5798444774.841986},\"earningsForTask\":{\"hack\":362.31978733797234,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":35.45926381705207,\"money\":18029.175449999988},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":1.6852083131998716,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0.16492680845140503,\"money\":83.85663},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":1,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":218,\"strength\":102731,\"defense\":83896,\"dexterity\":15512,\"agility\":18399,\"charisma\":628,\"intelligence\":1,\"hp\":8399,\"max_hp\":8399,\"hacking_exp\":1249522.4879369172,\"strength_exp\":1470478.041409593,\"defense_exp\":1470478.041409593,\"dexterity_exp\":1688270.5476384414,\"agility_exp\":1470478.041409593,\"charisma_exp\":766575.9560788241,\"intelligence_exp\":0,\"hacking_mult\":2.499490224000001,\"strength_mult\":403.7458211949797,\"defense_mult\":329.72149620864525,\"dexterity_mult\":59.923627612024475,\"agility_mult\":72.312896269152,\"charisma_mult\":2.688645960000001,\"hacking_exp_mult\":2.0162834999999997,\"strength_exp_mult\":3.2663792700000003,\"defense_exp_mult\":3.2663792700000003,\"dexterity_exp_mult\":3.7563361604999996,\"agility_exp_mult\":3.2663792700000003,\"charisma_exp_mult\":3.2594230919250005,\"hacking_chance_mult\":1000.1255805247804,\"hacking_speed_mult\":569.5894841331667,\"hacking_money_mult\":115701943.33813903,\"hacking_grow_mult\":153.93679428100586,\"company_rep_mult\":15.536583404842508,\"faction_rep_mult\":2.3516761125,\"crime_money_mult\":3.0461022109375007,\"crime_success_mult\":1.6300212500000002,\"work_money_mult\":2.34564,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"NutriGen Implant\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"INFRARET Enhancement\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"DermaForce Particle Barrier\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"Augmented Targeting III\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"Neurotrainer III\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"Bionic Arms\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"The Black Hand\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"PCMatrix\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"HyperSight Corneal Implant\",\"level\":1},{\"name\":\"Graphene BrachiBlades Upgrade\",\"level\":1},{\"name\":\"Synfibril Muscle\",\"level\":1},{\"name\":\"nextSENS Gene Modification\",\"level\":1},{\"name\":\"SmartJaw\",\"level\":1},{\"name\":\"Photosynthetic Cells\",\"level\":1},{\"name\":\"Synthetic Heart\",\"level\":1},{\"name\":\"Neotra\",\"level\":1},{\"name\":\"NEMEAN Subdermal Weave\",\"level\":1},{\"name\":\"PC Direct-Neural Interface\",\"level\":1},{\"name\":\"Graphene Bionic Arms Upgrade\",\"level\":1},{\"name\":\"Graphene Bone Lacings\",\"level\":1},{\"name\":\"Xanipher\",\"level\":1},{\"name\":\"Graphene Bionic Legs Upgrade\",\"level\":1},{\"name\":\"PC Direct-Neural Interface Optimization Submodule\",\"level\":1},{\"name\":\"SPTN-97 Gene Modification\",\"level\":1},{\"name\":\"CordiARC Fusion Reactor\",\"level\":1},{\"name\":\"Graphene Bionic Spine Upgrade\",\"level\":1},{\"name\":\"PC Direct-Neural Interface NeuroNet Injector\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":2,\"currentTaskLocation\":\"NWO\",\"currentTaskMaxTime\":0,\"currentTaskTime\":73000,\"earningsForSleeves\":{\"hack\":110621.77453024025,\"str\":256022.74331846356,\"def\":256022.74331846356,\"dex\":285680.1514255774,\"agi\":256022.74331846356,\"cha\":95428.53900108297,\"money\":0},\"earningsForPlayer\":{\"hack\":110621.77453024025,\"str\":256022.74331846356,\"def\":256022.74331846356,\"dex\":285680.1514255774,\"agi\":256022.74331846356,\"cha\":95428.53900108297,\"money\":8818509336.366396},\"earningsForTask\":{\"hack\":73.59434774999993,\"str\":178.83426503250018,\"def\":178.83426503250018,\"dex\":205.65940478737508,\"agi\":178.83426503250018,\"cha\":0,\"money\":0},\"factionWorkType\":3,\"gainRatesForTask\":{\"hack\":0.20162834999999998,\"str\":0.4899568905,\"def\":0.4899568905,\"dex\":0.5634504240749999,\"agi\":0.4899568905,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":1,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":217,\"strength\":102653,\"defense\":83832,\"dexterity\":15501,\"agility\":18385,\"charisma\":627,\"intelligence\":1,\"hp\":8393,\"max_hp\":8393,\"hacking_exp\":1247272.0963896692,\"strength_exp\":1461622.4819794337,\"defense_exp\":1461622.4819794337,\"dexterity_exp\":1678885.8542937988,\"agility_exp\":1461622.4819794337,\"charisma_exp\":764875.3875091241,\"intelligence_exp\":0,\"hacking_mult\":2.499490224000001,\"strength_mult\":403.7458211949797,\"defense_mult\":329.72149620864525,\"dexterity_mult\":59.923627612024475,\"agility_mult\":72.312896269152,\"charisma_mult\":2.688645960000001,\"hacking_exp_mult\":2.0162834999999997,\"strength_exp_mult\":3.2663792700000003,\"defense_exp_mult\":3.2663792700000003,\"dexterity_exp_mult\":3.7563361604999996,\"agility_exp_mult\":3.2663792700000003,\"charisma_exp_mult\":3.2594230919250005,\"hacking_chance_mult\":909.2050732043456,\"hacking_speed_mult\":491.4709705328794,\"hacking_money_mult\":65331419.16326317,\"hacking_grow_mult\":153.93679428100586,\"company_rep_mult\":15.536583404842508,\"faction_rep_mult\":2.3516761125,\"crime_money_mult\":3.0461022109375007,\"crime_success_mult\":1.6300212500000002,\"work_money_mult\":2.34564,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"NutriGen Implant\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"INFRARET Enhancement\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"DermaForce Particle Barrier\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"Augmented Targeting III\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"Neurotrainer III\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"Bionic Arms\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"The Black Hand\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"Synfibril Muscle\",\"level\":1},{\"name\":\"nextSENS Gene Modification\",\"level\":1},{\"name\":\"PCMatrix\",\"level\":1},{\"name\":\"Graphene BrachiBlades Upgrade\",\"level\":1},{\"name\":\"HyperSight Corneal Implant\",\"level\":1},{\"name\":\"SmartJaw\",\"level\":1},{\"name\":\"Photosynthetic Cells\",\"level\":1},{\"name\":\"Synthetic Heart\",\"level\":1},{\"name\":\"Neotra\",\"level\":1},{\"name\":\"NEMEAN Subdermal Weave\",\"level\":1},{\"name\":\"PC Direct-Neural Interface\",\"level\":1},{\"name\":\"Graphene Bionic Arms Upgrade\",\"level\":1},{\"name\":\"Graphene Bone Lacings\",\"level\":1},{\"name\":\"Xanipher\",\"level\":1},{\"name\":\"Graphene Bionic Legs Upgrade\",\"level\":1},{\"name\":\"PC Direct-Neural Interface Optimization Submodule\",\"level\":1},{\"name\":\"SPTN-97 Gene Modification\",\"level\":1},{\"name\":\"CordiARC Fusion Reactor\",\"level\":1},{\"name\":\"Graphene Bionic Spine Upgrade\",\"level\":1},{\"name\":\"PC Direct-Neural Interface NeuroNet Injector\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":2,\"currentTaskLocation\":\"ECorp\",\"currentTaskMaxTime\":0,\"currentTaskTime\":38000,\"earningsForSleeves\":{\"hack\":108689.3259122263,\"str\":254630.09290700074,\"def\":254630.09290700074,\"dex\":283792.5475101279,\"agi\":254630.09290700074,\"cha\":93617.15004625768,\"money\":0},\"earningsForPlayer\":{\"hack\":108689.3259122263,\"str\":254630.09290700074,\"def\":254630.09290700074,\"dex\":283792.5475101279,\"agi\":254630.09290700074,\"cha\":93617.15004625768,\"money\":8547533020.546875},\"earningsForTask\":{\"hack\":38.309386499999995,\"str\":93.09180919499995,\"def\":93.09180919499995,\"dex\":107.05558057425004,\"agi\":93.09180919499995,\"cha\":0,\"money\":0},\"factionWorkType\":3,\"gainRatesForTask\":{\"hack\":0.20162834999999998,\"str\":0.4899568905,\"def\":0.4899568905,\"dex\":0.5634504240749999,\"agi\":0.4899568905,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":1,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":217,\"strength\":102572,\"defense\":83766,\"dexterity\":15490,\"agility\":18371,\"charisma\":627,\"intelligence\":1,\"hp\":8386,\"max_hp\":8386,\"hacking_exp\":1244730.5710379195,\"strength_exp\":1452476.4460458355,\"defense_exp\":1452476.4460458355,\"dexterity_exp\":1669033.9129701867,\"agility_exp\":1452476.4460458355,\"charisma_exp\":761941.9067263908,\"intelligence_exp\":0,\"hacking_mult\":2.499490224000001,\"strength_mult\":403.7458211949797,\"defense_mult\":329.72149620864525,\"dexterity_mult\":59.923627612024475,\"agility_mult\":72.312896269152,\"charisma_mult\":2.688645960000001,\"hacking_exp_mult\":2.0162834999999997,\"strength_exp_mult\":3.2663792700000003,\"defense_exp_mult\":3.2663792700000003,\"dexterity_exp_mult\":3.7563361604999996,\"agility_exp_mult\":3.2663792700000003,\"charisma_exp_mult\":3.2594230919250005,\"hacking_chance_mult\":787.1905395708619,\"hacking_speed_mult\":486.97752165943587,\"hacking_money_mult\":63572496.33963685,\"hacking_grow_mult\":153.93679428100586,\"company_rep_mult\":15.536583404842508,\"faction_rep_mult\":2.3516761125,\"crime_money_mult\":3.0461022109375007,\"crime_success_mult\":1.6300212500000002,\"work_money_mult\":2.34564,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"NutriGen Implant\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"INFRARET Enhancement\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"DermaForce Particle Barrier\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"Augmented Targeting III\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"Neurotrainer III\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"Bionic Arms\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"The Black Hand\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"Synfibril Muscle\",\"level\":1},{\"name\":\"nextSENS Gene Modification\",\"level\":1},{\"name\":\"PCMatrix\",\"level\":1},{\"name\":\"Graphene BrachiBlades Upgrade\",\"level\":1},{\"name\":\"HyperSight Corneal Implant\",\"level\":1},{\"name\":\"SmartJaw\",\"level\":1},{\"name\":\"Photosynthetic Cells\",\"level\":1},{\"name\":\"Synthetic Heart\",\"level\":1},{\"name\":\"Neotra\",\"level\":1},{\"name\":\"NEMEAN Subdermal Weave\",\"level\":1},{\"name\":\"PC Direct-Neural Interface\",\"level\":1},{\"name\":\"Graphene Bionic Arms Upgrade\",\"level\":1},{\"name\":\"Graphene Bone Lacings\",\"level\":1},{\"name\":\"Xanipher\",\"level\":1},{\"name\":\"Graphene Bionic Legs Upgrade\",\"level\":1},{\"name\":\"PC Direct-Neural Interface Optimization Submodule\",\"level\":1},{\"name\":\"SPTN-97 Gene Modification\",\"level\":1},{\"name\":\"CordiARC Fusion Reactor\",\"level\":1},{\"name\":\"Graphene Bionic Spine Upgrade\",\"level\":1},{\"name\":\"PC Direct-Neural Interface NeuroNet Injector\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":2,\"currentTaskLocation\":\"Clarke Incorporated\",\"currentTaskMaxTime\":0,\"currentTaskTime\":73000,\"earningsForSleeves\":{\"hack\":106515.59160021011,\"str\":251827.65069295643,\"def\":251827.65069295643,\"dex\":280491.4516708135,\"agi\":251827.65069295643,\"cha\":90864.56724512664,\"money\":0},\"earningsForPlayer\":{\"hack\":106515.59160021011,\"str\":251827.65069295643,\"def\":251827.65069295643,\"dex\":280491.4516708135,\"agi\":251827.65069295643,\"cha\":90864.56724512664,\"money\":8279560071.5625},\"earningsForTask\":{\"hack\":73.59434774999993,\"str\":178.83426503250018,\"def\":178.83426503250018,\"dex\":205.65940478737508,\"agi\":178.83426503250018,\"cha\":0,\"money\":0},\"factionWorkType\":3,\"gainRatesForTask\":{\"hack\":0.20162834999999998,\"str\":0.4899568905,\"def\":0.4899568905,\"dex\":0.5634504240749999,\"agi\":0.4899568905,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":1,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":217,\"strength\":102495,\"defense\":83703,\"dexterity\":15479,\"agility\":18357,\"charisma\":627,\"intelligence\":1,\"hp\":8380,\"max_hp\":8380,\"hacking_exp\":1242102.3454956694,\"strength_exp\":1443875.7286493361,\"defense_exp\":1443875.7286493361,\"dexterity_exp\":1659695.6879642422,\"agility_exp\":1443875.7286493361,\"charisma_exp\":759008.4259436582,\"intelligence_exp\":0,\"hacking_mult\":2.499490224000001,\"strength_mult\":403.7458211949797,\"defense_mult\":329.72149620864525,\"dexterity_mult\":59.923627612024475,\"agility_mult\":72.312896269152,\"charisma_mult\":2.688645960000001,\"hacking_exp_mult\":2.0162834999999997,\"strength_exp_mult\":3.2663792700000003,\"defense_exp_mult\":3.2663792700000003,\"dexterity_exp_mult\":3.7563361604999996,\"agility_exp_mult\":3.2663792700000003,\"charisma_exp_mult\":3.2594230919250005,\"hacking_chance_mult\":787.1905395708619,\"hacking_speed_mult\":486.97752165943587,\"hacking_money_mult\":63572496.33963685,\"hacking_grow_mult\":153.93679428100586,\"company_rep_mult\":15.536583404842508,\"faction_rep_mult\":2.3516761125,\"crime_money_mult\":3.0461022109375007,\"crime_success_mult\":1.6300212500000002,\"work_money_mult\":2.34564,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"NutriGen Implant\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"INFRARET Enhancement\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"DermaForce Particle Barrier\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"Augmented Targeting III\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"Neurotrainer III\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"Bionic Arms\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"The Black Hand\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"Synfibril Muscle\",\"level\":1},{\"name\":\"nextSENS Gene Modification\",\"level\":1},{\"name\":\"PCMatrix\",\"level\":1},{\"name\":\"Graphene BrachiBlades Upgrade\",\"level\":1},{\"name\":\"HyperSight Corneal Implant\",\"level\":1},{\"name\":\"SmartJaw\",\"level\":1},{\"name\":\"Photosynthetic Cells\",\"level\":1},{\"name\":\"Synthetic Heart\",\"level\":1},{\"name\":\"Neotra\",\"level\":1},{\"name\":\"NEMEAN Subdermal Weave\",\"level\":1},{\"name\":\"PC Direct-Neural Interface\",\"level\":1},{\"name\":\"Graphene Bionic Arms Upgrade\",\"level\":1},{\"name\":\"Graphene Bone Lacings\",\"level\":1},{\"name\":\"Xanipher\",\"level\":1},{\"name\":\"Graphene Bionic Legs Upgrade\",\"level\":1},{\"name\":\"PC Direct-Neural Interface Optimization Submodule\",\"level\":1},{\"name\":\"SPTN-97 Gene Modification\",\"level\":1},{\"name\":\"CordiARC Fusion Reactor\",\"level\":1},{\"name\":\"Graphene Bionic Spine Upgrade\",\"level\":1},{\"name\":\"PC Direct-Neural Interface NeuroNet Injector\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":2,\"currentTaskLocation\":\"Bachman & Associates\",\"currentTaskMaxTime\":0,\"currentTaskTime\":33000,\"earningsForSleeves\":{\"hack\":104391.23378834537,\"str\":250581.02033866127,\"def\":250581.02033866127,\"dex\":278734.09025388234,\"agi\":250581.02033866127,\"cha\":88418.37021463623,\"money\":0},\"earningsForPlayer\":{\"hack\":104391.23378834537,\"str\":250581.02033866127,\"def\":250581.02033866127,\"dex\":278734.09025388234,\"agi\":250581.02033866127,\"cha\":88418.37021463623,\"money\":8028779372.578125},\"earningsForTask\":{\"hack\":33.268677749999995,\"str\":80.84288693249997,\"def\":80.84288693249997,\"dex\":92.96931997237503,\"agi\":80.84288693249997,\"cha\":0,\"money\":0},\"factionWorkType\":3,\"gainRatesForTask\":{\"hack\":0.20162834999999998,\"str\":0.4899568905,\"def\":0.4899568905,\"dex\":0.5634504240749999,\"agi\":0.4899568905,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":1,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":217,\"strength\":102387,\"defense\":83615,\"dexterity\":15463,\"agility\":18338,\"charisma\":626,\"intelligence\":1,\"hp\":8371,\"max_hp\":8371,\"hacking_exp\":1236371.1936504694,\"strength_exp\":1431841.6811795405,\"defense_exp\":1431841.6811795405,\"dexterity_exp\":1646242.3333739983,\"agility_exp\":1431841.6811795405,\"charisma_exp\":750207.9835954609,\"intelligence_exp\":0,\"hacking_mult\":2.499490224000001,\"strength_mult\":403.7458211949797,\"defense_mult\":329.72149620864525,\"dexterity_mult\":59.923627612024475,\"agility_mult\":72.312896269152,\"charisma_mult\":2.688645960000001,\"hacking_exp_mult\":2.0162834999999997,\"strength_exp_mult\":3.2663792700000003,\"defense_exp_mult\":3.2663792700000003,\"dexterity_exp_mult\":3.7563361604999996,\"agility_exp_mult\":3.2663792700000003,\"charisma_exp_mult\":3.2594230919250005,\"hacking_chance_mult\":619.5911370097298,\"hacking_speed_mult\":400.6376122372349,\"hacking_money_mult\":34929943.043756485,\"hacking_grow_mult\":153.93679428100586,\"company_rep_mult\":15.536583404842508,\"faction_rep_mult\":2.3516761125,\"crime_money_mult\":3.0461022109375007,\"crime_success_mult\":1.6300212500000002,\"work_money_mult\":2.34564,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"NutriGen Implant\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"INFRARET Enhancement\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"DermaForce Particle Barrier\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"Augmented Targeting III\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"Neurotrainer III\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"Bionic Arms\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"The Black Hand\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"Synfibril Muscle\",\"level\":1},{\"name\":\"nextSENS Gene Modification\",\"level\":1},{\"name\":\"PCMatrix\",\"level\":1},{\"name\":\"Graphene BrachiBlades Upgrade\",\"level\":1},{\"name\":\"HyperSight Corneal Implant\",\"level\":1},{\"name\":\"SmartJaw\",\"level\":1},{\"name\":\"Photosynthetic Cells\",\"level\":1},{\"name\":\"Synthetic Heart\",\"level\":1},{\"name\":\"Neotra\",\"level\":1},{\"name\":\"NEMEAN Subdermal Weave\",\"level\":1},{\"name\":\"PC Direct-Neural Interface\",\"level\":1},{\"name\":\"Graphene Bionic Arms Upgrade\",\"level\":1},{\"name\":\"Graphene Bone Lacings\",\"level\":1},{\"name\":\"Xanipher\",\"level\":1},{\"name\":\"Graphene Bionic Legs Upgrade\",\"level\":1},{\"name\":\"PC Direct-Neural Interface Optimization Submodule\",\"level\":1},{\"name\":\"SPTN-97 Gene Modification\",\"level\":1},{\"name\":\"CordiARC Fusion Reactor\",\"level\":1},{\"name\":\"Graphene Bionic Spine Upgrade\",\"level\":1},{\"name\":\"PC Direct-Neural Interface NeuroNet Injector\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":2,\"currentTaskLocation\":\"OmniTek Incorporated\",\"currentTaskMaxTime\":0,\"currentTaskTime\":73000,\"earningsForSleeves\":{\"hack\":109574.64097488258,\"str\":259020.32461000443,\"def\":259020.32461000443,\"dex\":288418.6934558625,\"agi\":259020.32461000443,\"cha\":97664.37569949924,\"money\":0},\"earningsForPlayer\":{\"hack\":109574.64097488258,\"str\":259020.32461000443,\"def\":259020.32461000443,\"dex\":288418.6934558625,\"agi\":259020.32461000443,\"cha\":97664.37569949924,\"money\":8860001969.53125},\"earningsForTask\":{\"hack\":73.59434774999993,\"str\":178.83426503250018,\"def\":178.83426503250018,\"dex\":205.65940478737508,\"agi\":178.83426503250018,\"cha\":0,\"money\":0},\"factionWorkType\":3,\"gainRatesForTask\":{\"hack\":0.20162834999999998,\"str\":0.4899568905,\"def\":0.4899568905,\"dex\":0.5634504240749999,\"agi\":0.4899568905,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":1,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":217,\"strength\":102212,\"defense\":83472,\"dexterity\":15438,\"agility\":18306,\"charisma\":624,\"intelligence\":1,\"hp\":8357,\"max_hp\":8357,\"hacking_exp\":1225483.2627504575,\"strength_exp\":1412515.2331207977,\"defense_exp\":1412515.2331207977,\"dexterity_exp\":1624270.1181064695,\"agility_exp\":1412515.2331207977,\"charisma_exp\":732607.098899066,\"intelligence_exp\":0,\"hacking_mult\":2.499490224000001,\"strength_mult\":403.7458211949797,\"defense_mult\":329.72149620864525,\"dexterity_mult\":59.923627612024475,\"agility_mult\":72.312896269152,\"charisma_mult\":2.688645960000001,\"hacking_exp_mult\":2.0162834999999997,\"strength_exp_mult\":3.2663792700000003,\"defense_exp_mult\":3.2663792700000003,\"dexterity_exp_mult\":3.7563361604999996,\"agility_exp_mult\":3.2663792700000003,\"charisma_exp_mult\":3.2594230919250005,\"hacking_chance_mult\":681.550250710703,\"hacking_speed_mult\":433.28957763456987,\"hacking_money_mult\":45560795.27446502,\"hacking_grow_mult\":269.38938999176025,\"company_rep_mult\":15.536583404842508,\"faction_rep_mult\":2.3516761125,\"crime_money_mult\":3.0461022109375007,\"crime_success_mult\":1.6300212500000002,\"work_money_mult\":2.34564,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"NutriGen Implant\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"INFRARET Enhancement\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"DermaForce Particle Barrier\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"Augmented Targeting III\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"Neurotrainer III\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"Bionic Arms\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"The Black Hand\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"Synfibril Muscle\",\"level\":1},{\"name\":\"nextSENS Gene Modification\",\"level\":1},{\"name\":\"PCMatrix\",\"level\":1},{\"name\":\"Graphene BrachiBlades Upgrade\",\"level\":1},{\"name\":\"HyperSight Corneal Implant\",\"level\":1},{\"name\":\"SmartJaw\",\"level\":1},{\"name\":\"Photosynthetic Cells\",\"level\":1},{\"name\":\"Synthetic Heart\",\"level\":1},{\"name\":\"Neotra\",\"level\":1},{\"name\":\"NEMEAN Subdermal Weave\",\"level\":1},{\"name\":\"PC Direct-Neural Interface\",\"level\":1},{\"name\":\"Graphene Bionic Arms Upgrade\",\"level\":1},{\"name\":\"Graphene Bone Lacings\",\"level\":1},{\"name\":\"Xanipher\",\"level\":1},{\"name\":\"Graphene Bionic Legs Upgrade\",\"level\":1},{\"name\":\"PC Direct-Neural Interface Optimization Submodule\",\"level\":1},{\"name\":\"SPTN-97 Gene Modification\",\"level\":1},{\"name\":\"CordiARC Fusion Reactor\",\"level\":1},{\"name\":\"Graphene Bionic Spine Upgrade\",\"level\":1},{\"name\":\"PC Direct-Neural Interface NeuroNet Injector\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":2,\"currentTaskLocation\":\"Daedalus\",\"currentTaskMaxTime\":0,\"currentTaskTime\":73000,\"earningsForSleeves\":{\"hack\":109255.66457810575,\"str\":260741.75791201871,\"def\":260741.75791201871,\"dex\":290129.71517393313,\"agi\":260741.75791201871,\"cha\":97358.9677557863,\"money\":0},\"earningsForPlayer\":{\"hack\":109255.66457810575,\"str\":260741.75791201871,\"def\":260741.75791201871,\"dex\":290129.71517393313,\"agi\":260741.75791201871,\"cha\":97358.9677557863,\"money\":8876289719.53125},\"earningsForTask\":{\"hack\":73.59434774999993,\"str\":119.22284335499981,\"def\":119.22284335499981,\"dex\":137.10626985825016,\"agi\":119.22284335499981,\"cha\":118.96894285526228,\"money\":0},\"factionWorkType\":0,\"gainRatesForTask\":{\"hack\":0.20162834999999998,\"str\":0.32663792700000005,\"def\":0.32663792700000005,\"dex\":0.37563361605,\"agi\":0.32663792700000005,\"cha\":0.32594230919250006,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":1,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":217,\"strength\":102042,\"defense\":83333,\"dexterity\":15412,\"agility\":18276,\"charisma\":622,\"intelligence\":1,\"hp\":8343,\"max_hp\":8343,\"hacking_exp\":1214595.3318504568,\"strength_exp\":1394072.7850620877,\"defense_exp\":1394072.7850620877,\"dexterity_exp\":1603181.9028389745,\"agility_exp\":1394072.7850620877,\"charisma_exp\":715006.2142026708,\"intelligence_exp\":0,\"hacking_mult\":2.499490224000001,\"strength_mult\":403.7458211949797,\"defense_mult\":329.72149620864525,\"dexterity_mult\":59.923627612024475,\"agility_mult\":72.312896269152,\"charisma_mult\":2.688645960000001,\"hacking_exp_mult\":2.0162834999999997,\"strength_exp_mult\":3.2663792700000003,\"defense_exp_mult\":3.2663792700000003,\"dexterity_exp_mult\":3.7563361604999996,\"agility_exp_mult\":3.2663792700000003,\"charisma_exp_mult\":3.2594230919250005,\"hacking_chance_mult\":180.3698710933692,\"hacking_speed_mult\":131.15872937160023,\"hacking_money_mult\":1082593.0390980525,\"hacking_grow_mult\":50.26507568359375,\"company_rep_mult\":15.536583404842508,\"faction_rep_mult\":2.3516761125,\"crime_money_mult\":3.0461022109375007,\"crime_success_mult\":1.6300212500000002,\"work_money_mult\":2.34564,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"NutriGen Implant\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"INFRARET Enhancement\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"DermaForce Particle Barrier\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"Augmented Targeting III\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"Neurotrainer III\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"Bionic Arms\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"The Black Hand\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"Synfibril Muscle\",\"level\":1},{\"name\":\"nextSENS Gene Modification\",\"level\":1},{\"name\":\"PCMatrix\",\"level\":1},{\"name\":\"Graphene BrachiBlades Upgrade\",\"level\":1},{\"name\":\"HyperSight Corneal Implant\",\"level\":1},{\"name\":\"SmartJaw\",\"level\":1},{\"name\":\"Photosynthetic Cells\",\"level\":1},{\"name\":\"Synthetic Heart\",\"level\":1},{\"name\":\"Neotra\",\"level\":1},{\"name\":\"NEMEAN Subdermal Weave\",\"level\":1},{\"name\":\"PC Direct-Neural Interface\",\"level\":1},{\"name\":\"Graphene Bionic Arms Upgrade\",\"level\":1},{\"name\":\"Graphene Bone Lacings\",\"level\":1},{\"name\":\"Xanipher\",\"level\":1},{\"name\":\"Graphene Bionic Legs Upgrade\",\"level\":1},{\"name\":\"PC Direct-Neural Interface Optimization Submodule\",\"level\":1},{\"name\":\"SPTN-97 Gene Modification\",\"level\":1},{\"name\":\"CordiARC Fusion Reactor\",\"level\":1},{\"name\":\"Graphene Bionic Spine Upgrade\",\"level\":1},{\"name\":\"PC Direct-Neural Interface NeuroNet Injector\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":2,\"currentTaskLocation\":\"Blade Industries\",\"currentTaskMaxTime\":0,\"currentTaskTime\":73000,\"earningsForSleeves\":{\"hack\":107823.37167172054,\"str\":258172.08337067228,\"def\":258172.08337067228,\"dex\":287161.09323452495,\"agi\":258172.08337067228,\"cha\":93578.03696915452,\"money\":0},\"earningsForPlayer\":{\"hack\":107823.37167172054,\"str\":258172.08337067228,\"def\":258172.08337067228,\"dex\":287161.09323452495,\"agi\":258172.08337067228,\"cha\":93578.03696915452,\"money\":8599751020.546875},\"earningsForTask\":{\"hack\":73.59434774999993,\"str\":178.83426503250018,\"def\":178.83426503250018,\"dex\":205.65940478737508,\"agi\":178.83426503250018,\"cha\":0,\"money\":0},\"factionWorkType\":3,\"gainRatesForTask\":{\"hack\":0.20162834999999998,\"str\":0.4899568905,\"def\":0.4899568905,\"dex\":0.5634504240749999,\"agi\":0.4899568905,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":1,\"sync\":100}}],\"sleevesFromCovenant\":5,\"bitNodeN\":7,\"entropy\":0,\"lastUpdate\":1652521370739,\"lastSave\":1652521321373,\"totalPlaytime\":11191824800,\"playtimeSinceLastAug\":41620600,\"playtimeSinceLastBitnode\":208936600,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":22525868104.35886,\"casino\":10050000000,\"class\":0,\"codingcontract\":2925000000,\"corporation\":242358818.92113498,\"crime\":784266526.7856649,\"gang\":9780020146621.424,\"hacking\":40507045310.74972,\"hacknet\":0,\"hacknet_expenses\":-30584.083695897996,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":12622522.456009552,\"stock\":0,\"total\":7414325601176.449,\"work\":50548828.678470306,\"servers\":0,\"other\":-2425087800000,\"augmentations\":-17704425000}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":24078469978.94667,\"casino\":788601772827,\"class\":0,\"codingcontract\":12862500000,\"corporation\":-149696630752.00543,\"crime\":1513545789.9012105,\"gang\":14516739778287.773,\"hacking\":65595464544.74972,\"hacknet\":0,\"hacknet_expenses\":-2387764.7310166927,\"hospitalization\":-13700000,\"infiltration\":0,\"sleeves\":-598243130713.8367,\"stock\":0,\"total\":10539832113782.51,\"work\":52059719.45081898,\"servers\":-210406582545.68866,\"other\":-2443740000000,\"augmentations\":-1467509045629.1775}},\"scriptProdSinceLastAug\":40502533734,\"exploits\":[\"UndocumentedFunctionCall\",\"Bypass\",\"Unclickable\",\"RealityAlteration\",\"TimeCompression\",\"N00dles\",\"PrototypeTampering\",\"EditSaveFile\",\"YoureNotMeantToAccessThis\",\"INeedARainbow\"],\"achievements\":[{\"ID\":\"CYBERSEC\",\"unlockedOn\":1641831349068},{\"ID\":\"NITESEC\",\"unlockedOn\":1641831349080},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1641831349084},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1641831349088},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1641831349091},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1641831349095},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1641831349099},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1641831349103},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1641831349108},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1641831349113},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1641831349117},{\"ID\":\"NS2\",\"unlockedOn\":1641831349120},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1641831349122},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1641831349125},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1641831349128},{\"ID\":\"TOR\",\"unlockedOn\":1641831349131},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1641911770908},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1641911770911},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1641911890917},{\"ID\":\"DONATION\",\"unlockedOn\":1641919651447},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1641924992259},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1642040620386},{\"ID\":\"TRAVEL\",\"unlockedOn\":1642040800461},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1642088780181},{\"ID\":\"4S\",\"unlockedOn\":1642220579557},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1642295956244},{\"ID\":\"SF1.1\",\"unlockedOn\":1642393317233},{\"ID\":\"UNDOCUMENTEDFUNCTIONCALL\",\"unlockedOn\":1643121077987},{\"ID\":\"BYPASS\",\"unlockedOn\":1643121317987},{\"ID\":\"UNCLICKABLE\",\"unlockedOn\":1643122337977},{\"ID\":\"REALITYALTERATION\",\"unlockedOn\":1643122481910},{\"ID\":\"TIMECOMPRESSION\",\"unlockedOn\":1643122661782},{\"ID\":\"N00DLES\",\"unlockedOn\":1643122721781},{\"ID\":\"PROTOTYPETAMPERING\",\"unlockedOn\":1643123081783},{\"ID\":\"EDITSAVEFILE\",\"unlockedOn\":1643123929773},{\"ID\":\"DEVMENU\",\"unlockedOn\":1643123929787},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1643640264308},{\"ID\":\"SF5.1\",\"unlockedOn\":1643839768581},{\"ID\":\"GANG\",\"unlockedOn\":1644242713578},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1644317906781},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1644319506423},{\"ID\":\"SF2.1\",\"unlockedOn\":1644381062608},{\"ID\":\"FAST_BN\",\"unlockedOn\":1644550423832},{\"ID\":\"WORKOUT\",\"unlockedOn\":1644551683850},{\"ID\":\"GANG_TERRITORY\",\"unlockedOn\":1644764420851},{\"ID\":\"CORPORATION\",\"unlockedOn\":1645195464613},{\"ID\":\"CORPORATION_BRIBE\",\"unlockedOn\":1645593375384},{\"ID\":\"SF3.1\",\"unlockedOn\":1645739905350},{\"ID\":\"FROZE\",\"unlockedOn\":1646454615199},{\"ID\":\"SF4.1\",\"unlockedOn\":1649078749377},{\"ID\":\"RAINBOW\",\"unlockedOn\":1649863203492},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1649963517455},{\"ID\":\"CORPORATION_REAL_ESTATE\",\"unlockedOn\":1650074051205},{\"ID\":\"CORPORATION_PROD_1000\",\"unlockedOn\":1650120923422},{\"ID\":\"MONEY_1Q\",\"unlockedOn\":1650133518302},{\"ID\":\"MAX_RAM\",\"unlockedOn\":1650203744383},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1650215744382},{\"ID\":\"SF10.1\",\"unlockedOn\":1650238596854},{\"ID\":\"QUEUE_40\",\"unlockedOn\":1650363811385},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1650567008902},{\"ID\":\"SLEEVE_8\",\"unlockedOn\":1650587229287},{\"ID\":\"FIRST_HACKNET_SERVER\",\"unlockedOn\":1650587469464},{\"ID\":\"MAX_CACHE\",\"unlockedOn\":1650624669287},{\"ID\":\"ALL_HACKNET_SERVER\",\"unlockedOn\":1650880670062},{\"ID\":\"HACKNET_SERVER_1B\",\"unlockedOn\":1650907131627},{\"ID\":\"SF9.1\",\"unlockedOn\":1650936509084},{\"ID\":\"BLADEBURNER_DIVISION\",\"unlockedOn\":1650976064697},{\"ID\":\"BLADEBURNER_OVERCLOCK\",\"unlockedOn\":1651104026364},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1651136761161},{\"ID\":\"SF6.1\",\"unlockedOn\":1651153482894},{\"ID\":\"SF7.1\",\"unlockedOn\":1651367291296},{\"ID\":\"SF11.1\",\"unlockedOn\":1651671520642},{\"ID\":\"INSTALL_100\",\"unlockedOn\":1651797499985}],\"terminalCommandHistory\":[\"nano casinoBreaker.js\",\"nano bladeburner.js\",\"run bootstrap32GB.js\",\"nano sleeves.js\",\"run init.js\",\"run bootstrap32GB.js\",\"run init.js\",\"nano sleeves.js\",\"run init.js\",\"run casinoBreaker.js\",\"nano workForFaction.js\",\"nano augments.js\",\"nano test.js\",\"run test.js\",\"run init.js\",\"run casinoBreaker.js\",\"run init.js\",\"run casinoBreaker.js\",\"run init.js\",\"run casinoBreaker.js\",\"run farm_int.js\",\"run farm_int.js --money-threshold 10000000000\",\"run bootstrap32GB.js\",\"nano casinoBreaker.js\",\"run test.js\",\"nano aug_buyer.js\",\"run aug_buyer.js\",\"nano gangum.js\",\"nano player.js\",\"nano init.js\",\"run player.js\",\"run test.js\",\"run init.js\",\"nano workForFaction.js\",\"nano autosolver.js\",\"run workForFaction.js\",\"run workForFaction.js --crime-focus\",\"nano workForFaction.js\",\"run workForFaction.js --crime-focus\",\"run init.js\",\"run max_hack.js\",\"nano utils.js\",\"nano au\",\"nano aug\",\"nano augments.js\",\"run farm_int.js --money-threshold 1000000000\",\"run bootstrap32GB.js\",\"nano sleeves.js\",\"nano aug_buyer.js\",\"run farm_int.js --money-threshold 1000000000\"],\"identifier\":\"1137a2b24916d3\",\"factionWorkType\":\"Faction Security Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":3,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"70.4.9.8\",\"isConnectedTo\":true,\"maxRam\":16384,\"messages\":[\"hackers-starting-handbook.lit\",\"truthgazer.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"DeepscanV1.exe\",\"AutoLink.exe\",\"Formulas.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\"],\"ramUsed\":7718.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"spend-hacknet-hash.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":6.225,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41533.20999995628,\"pid\":1,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/20d3db0a-b396-4055-b8f1-da1633b49c4b\",\"moduleSequenceNumber\":1439260},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/029b51fd-1e9a-4345-8a34-fc28767d324a\",\"moduleSequenceNumber\":1439243},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/7db1c5ee-263c-4e02-b8b1-be859ff43ced\",\"moduleSequenceNumber\":1439244},{\"filename\":\"spend-hacknet-hash.js\",\"url\":\"blob:https://danielyxie.github.io/d130f05f-3485-4510-a89b-50ed65de27d1\",\"moduleSequenceNumber\":1439370}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"player.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":6.226999999999999,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41533.20999995628,\"pid\":2,\"ramUsage\":3.7,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"player.js\",\"url\":\"blob:https://danielyxie.github.io/f066aa0b-327c-4208-ac2e-0744b8a808af\",\"moduleSequenceNumber\":1439371}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"sleeves.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":6.262,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41533.20999995628,\"pid\":3,\"ramUsage\":47.7,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"augments.js\",\"url\":\"blob:https://danielyxie.github.io/80e51630-385a-42ce-86c3-36d33b754ef9\",\"moduleSequenceNumber\":1439272},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/2e17bf17-b22d-4d25-bd89-6a2d399867f0\",\"moduleSequenceNumber\":1439260},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/fe4abee3-6c2c-4409-9235-d13b5a6658fd\",\"moduleSequenceNumber\":1439260},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/db729b77-9d9f-4563-8397-c7d071456a51\",\"moduleSequenceNumber\":1439243},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/b94b8bfb-d60d-49f7-a708-6f56612afc16\",\"moduleSequenceNumber\":1439244},{\"filename\":\"sleeves.js\",\"url\":\"blob:https://danielyxie.github.io/aaa1e472-79b1-4873-889a-e681d7aa3470\",\"moduleSequenceNumber\":1439372}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"bladeburner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":6.292,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41533.20999995628,\"pid\":4,\"ramUsage\":68.1,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"augments.js\",\"url\":\"blob:https://danielyxie.github.io/8a52d4ca-b865-4750-98b6-76e0378735ff\",\"moduleSequenceNumber\":1439272},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/a9465ac1-fead-482d-bcc8-90797d7f1190\",\"moduleSequenceNumber\":1439260},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/ddf15475-65c4-42d2-8795-27241286b22a\",\"moduleSequenceNumber\":1439243},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/53ba75bc-bd2a-43f5-a668-09ed9cd28f3b\",\"moduleSequenceNumber\":1439244},{\"filename\":\"bladeburner.js\",\"url\":\"blob:https://danielyxie.github.io/44f3a7df-3f2e-4787-8e2d-ccbc241f1dc0\",\"moduleSequenceNumber\":1439373}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"megacorp.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":6.319,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41533.20999995628,\"pid\":5,\"ramUsage\":1025.5,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/f113ab7a-6192-4eba-a22a-fa23d310c8d0\",\"moduleSequenceNumber\":1439260},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/b7eea45f-ac58-41b7-822b-72fd815e7aea\",\"moduleSequenceNumber\":1439243},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/3316e14b-732b-4afd-b124-586319760c54\",\"moduleSequenceNumber\":1439244},{\"filename\":\"megacorp.js\",\"url\":\"blob:https://danielyxie.github.io/54bf43f2-838c-4618-a0d5-89ebaed7e2b1\",\"moduleSequenceNumber\":1439374}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--crime-focus\"],\"dataMap\":{},\"filename\":\"workForFaction.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":6.343999999999999,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41533.20999995628,\"pid\":6,\"ramUsage\":42.8,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"augments.js\",\"url\":\"blob:https://danielyxie.github.io/46288dde-2d7e-4d1c-95ab-3d1b599f615d\",\"moduleSequenceNumber\":1439272},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/eddd59dd-4465-4660-a968-4e283e2e9896\",\"moduleSequenceNumber\":1439260},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/a5db853a-8691-452f-895e-cc61fe056429\",\"moduleSequenceNumber\":1439243},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/a7d6a070-0297-4070-b3d1-073c93712152\",\"moduleSequenceNumber\":1439244},{\"filename\":\"workForFaction.js\",\"url\":\"blob:https://danielyxie.github.io/3b1e71ae-e17b-454d-b4ab-2d2243c55027\",\"moduleSequenceNumber\":1439375}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"gangum.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":6.356,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41533.20999995628,\"pid\":7,\"ramUsage\":38.6,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/2b05d8e3-e7f9-467a-ada2-a03c8ccb8f5e\",\"moduleSequenceNumber\":1439260},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/563fb59b-9fde-41ca-b83b-39a25cdd872a\",\"moduleSequenceNumber\":1439243},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/8757e6ab-737d-4e03-b1e8-b47793a8ec1d\",\"moduleSequenceNumber\":1439244},{\"filename\":\"gangum.js\",\"url\":\"blob:https://danielyxie.github.io/053241cf-0371-4c0a-b5c7-4706ca962b8a\",\"moduleSequenceNumber\":1439376}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"mcp_hgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":10342.109976184951,\"offlineMoneyMade\":0,\"offlineRunningTime\":6.37,\"onlineExpGained\":67468232.80323228,\"onlineMoneyMade\":40497282606,\"onlineRunningTime\":41533.20999995628,\"pid\":8,\"ramUsage\":12.5,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"growthFunctions.js\",\"url\":\"blob:https://danielyxie.github.io/2d6edec9-6b52-4ef7-ba65-4d56ab579d35\",\"moduleSequenceNumber\":1439268},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/b672480f-6eda-4e35-be76-5c3becbe93e2\",\"moduleSequenceNumber\":1439260},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/891aba6b-6681-43e2-8a26-193719c91e69\",\"moduleSequenceNumber\":1439243},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/09695a5a-c63a-48df-9e01-4f7f5344710c\",\"moduleSequenceNumber\":1439244},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/a060ff4b-89b9-467b-a1ab-b21198d7c965\",\"moduleSequenceNumber\":1439243},{\"filename\":\"mcp_hgw.js\",\"url\":\"blob:https://danielyxie.github.io/ab94c2ab-4d08-4a03-b305-f64ad4590046\",\"moduleSequenceNumber\":1439379}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"custom-stats.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":6.378,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41533.20999995628,\"pid\":9,\"ramUsage\":3.25,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/0e0dc4d7-75c3-4b01-8eee-0ad88a215a82\",\"moduleSequenceNumber\":1439260},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/4b3a55a0-48bc-4f91-bea1-4959ae0da246\",\"moduleSequenceNumber\":1439243},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/50564f6b-b268-427b-b16e-27647e4149c4\",\"moduleSequenceNumber\":1439244},{\"filename\":\"custom-stats.js\",\"url\":\"blob:https://danielyxie.github.io/4db27cf6-44f6-4dc5-97d9-afcd5eea0611\",\"moduleSequenceNumber\":1439380}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.5378815760948084],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":6.381,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":152.60999999999987,\"pid\":10,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":130,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/9350038a-f84c-4e24-a7df-53824f4f752e\",\"moduleSequenceNumber\":1500604}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.9242080022811112],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":6.383,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":92.41000000000076,\"pid\":11,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1643,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/d578961e-cc9a-42df-936c-90b7ce00725f\",\"moduleSequenceNumber\":1500603}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--money-threshold\",1000000000],\"dataMap\":{},\"filename\":\"farm_int.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":6.385,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":69.01000000000045,\"pid\":12,\"ramUsage\":4.1,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"farm_int.js\",\"url\":\"blob:https://danielyxie.github.io/a6f858ea-741a-454b-833b-d87b96f7371d\",\"moduleSequenceNumber\":1852596}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.5259327842316106],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.009999999999991,\"pid\":352,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1825,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/98c57ddf-9237-4b75-aff4-b93c7f9f3317\",\"moduleSequenceNumber\":525}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",0.02276887807684269],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.009999999999991,\"pid\":356,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":97,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/98c57ddf-9237-4b75-aff4-b93c7f9f3317\",\"moduleSequenceNumber\":525}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { boxTailSingleton, copyHackingFiles, tryGetBitNodeMultipliers } from \\\"utils.js\\\"\\nimport { getOwnedAugmentationsStatic } from 'augments.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getServerMoneyAvailable');\\n    ns.disableLog('fileExists');\\n    ns.disableLog('hacknet.upgradeLevel');\\n    ns.disableLog('hacknet.upgradeRam');\\n    ns.disableLog('hacknet.upgradeCore');\\n    ns.disableLog('hacknetNodes.coreUpgradeCost');\\n    ns.disableLog('hacknetNodes.ramUpgradeCost');\\n    ns.disableLog('hacknetNodes.levelUpgradeCost');\\n    ns.disableLog('getServer');\\n    ns.disableLog('getPurchasedServers');\\n    ns.disableLog('getPurchasedServerLimit');\\n    ns.disableLog('getPurchasedServerCost');\\n    //ns.tail();\\n    const multis = tryGetBitNodeMultipliers(ns);\\n    boxTailSingleton(ns, 'purchase pc', '🖳', '100px');\\n    ns.clearLog();\\n    let player = ns.getPlayer();\\n    const bitNodeN = player.bitNodeN;\\n    function purchasePortHacks(player) {\\n        if (!player.tor) return;\\n        // BruteSSH.exe - $500k - Opens up SSH Ports.\\n        // FTPCrack.exe - $1.500m - Opens up FTP Ports.\\n        // relaySMTP.exe - $5.000m - Opens up SMTP Ports.\\n        // HTTPWorm.exe - $30.000m - Opens up HTTP Ports.\\n        // SQLInject.exe - $250.000m - Opens up SQL Ports.\\n        if (!ns.fileExists(\\\"BruteSSH.exe\\\") && player.money > 500000) {\\n            if (ns.purchaseProgram(\\\"BruteSSH.exe\\\"))\\n                ns.print('purchased BruteSSH');\\n        }\\n        if (!ns.fileExists(\\\"FTPCrack.exe\\\") && player.money > 1500000) {\\n            if (ns.purchaseProgram(\\\"FTPCrack.exe\\\"))\\n                ns.print('purchased FTPCrack');\\n        }\\n        if (!ns.fileExists(\\\"relaySMTP.exe\\\") && player.money > 5000000) {\\n            if (ns.purchaseProgram(\\\"relaySMTP.exe\\\"))\\n                ns.print('purchased relaySMTP');\\n        }\\n        if (!ns.fileExists(\\\"HTTPWorm.exe\\\") && player.money > 30000000) {\\n            if (ns.purchaseProgram(\\\"HTTPWorm.exe\\\"))\\n                ns.print('purchased HTTPWorm');\\n        }\\n        if (!ns.fileExists(\\\"SQLInject.exe\\\") && player.money > 250000000) {\\n            if (ns.purchaseProgram(\\\"SQLInject.exe\\\"))\\n                ns.print('purchased SQLInject');\\n        }\\n    }\\n    function purchaseTor(player) {\\n        if (player.money > 200000 && !player.tor) {\\n            if (ns.purchaseTor()) {\\n                ns.print('purchased TOR');\\n                player.tor = true;\\n            }\\n        }\\n        purchasePortHacks(player);\\n    }\\n    purchaseTor(player);\\n    if ([2, 6, 7, 8, 11].includes(bitNodeN) && player.hacking < 200 || (ns.heart.break() > -54000)) {\\n        ns.print(`Not buying servers in bitnode ${bitNodeN}`);\\n    } else {\\n        // PurchasedServerMaxRam\\n        const ram = Math.min(ns.getServer('home').maxRam / 4, 1048576 * multis.PurchasedServerMaxRam);\\n        let i = ns.getPurchasedServers().length;\\n        while (i < ns.getPurchasedServerLimit()) {\\n            player = ns.getPlayer();\\n            purchaseTor(player);\\n            // Check if we have enough money to purchase a server\\n            const cost = ns.getPurchasedServerCost(ram);\\n            // ns.print(ns.nFormat(cost, '0.0a'));\\n            if (player.money > cost) {\\n                const name = \\\"pserv-\\\" + i;\\n                ns.purchaseServer(name, ram);\\n                await copyHackingFiles(ns, { hostname: name, hasAdminRights: true });\\n                ns.print(`purchased server ${name} ${ns.nFormat(cost, '$0.0a')} with ${ns.nFormat(ram, '0a')} ram`)\\n                ++i;\\n            }\\n            await ns.sleep(3000);\\n        }\\n    }\\n}\",\"filename\":\"purchase-servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"augments.js\",\"url\":\"blob:https://danielyxie.github.io/dc84c22a-3b31-4f46-8f4d-2f947dde03b1\",\"moduleSequenceNumber\":1500446},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/2f8881ac-69f4-478a-896c-c4262137609a\",\"moduleSequenceNumber\":1500434},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/e05fb637-0347-4717-b7e5-51fb505b755a\",\"moduleSequenceNumber\":1500417},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/ed58370c-c97d-48ee-9b6c-38ad00a9ed05\",\"moduleSequenceNumber\":1500418},{\"filename\":\"purchase-servers.js\",\"url\":\"blob:https://danielyxie.github.io/582cf3d2-6eee-41ea-b750-191a464d6fe8\",\"moduleSequenceNumber\":1500592}],\"dependents\":[],\"ramUsage\":14.1,\"server\":\"home\",\"moduleSequenceNumber\":256,\"_hash\":\"b1af83699f444efce3e11ba6c7a23f6e52f1ba000b1153b271ee1e4fbe1dca12\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst args = ns.flags([[\\\"help\\\", false]]);\\n\\tconst server = ns.args[0];\\n\\tif (args.help || !server) {\\n\\t\\tns.tprint(\\\"This script does a more detailed analysis of a server.\\\");\\n\\t\\tns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\n\\t\\tns.tprint(\\\"Example:\\\");\\n\\t\\tns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n\\t\\treturn;\\n\\t}\\n\\tconst s = ns.getServer(server);\\n\\tconst player = ns.getPlayer();\\n\\tconst maxRam = ns.getServerMaxRam(server);\\n\\tconst usedRam = ns.getServerUsedRam(server);\\n\\tconst money = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst minSec = ns.getServerMinSecurityLevel(server);\\n\\tconst sec = ns.getServerSecurityLevel(server);\\n\\tns.tprint(`\\n${server}:\\n    RAM        : ${usedRam} / ${maxRam} (${usedRam / maxRam * 100}%)\\n    $          : ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${(money / maxMoney * 100).toFixed(2)}%)\\n    security   : ${minSec.toFixed(2)} / ${sec.toFixed(2)}\\n    growth     : ${ns.getServerGrowth(server)}\\n    hack time  : ${ns.tFormat(ns.getHackTime(server))}\\n    hack time  : ${ns.tFormat(ns.formulas.hacking.hackTime(s, player))}\\n    grow time  : ${ns.tFormat(ns.getGrowTime(server))}\\n    grow time  : ${ns.tFormat(ns.formulas.hacking.growTime(s, player))}\\n    weaken time: ${ns.tFormat(ns.getWeakenTime(server))}\\n    weaken time: ${ns.tFormat(ns.formulas.hacking.weakenTime(s, player))}\\n    grow x2    : ${(ns.growthAnalyze(server, 2)).toFixed(2)} threads\\n    grow x3    : ${(ns.growthAnalyze(server, 3)).toFixed(2)} threads\\n    grow x4    : ${(ns.growthAnalyze(server, 4)).toFixed(2)} threads\\n    hack 10%   : ${(.10 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 25%   : ${(.25 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 50%   : ${(.50 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hackChance : ${(ns.hackAnalyzeChance(server) * 100).toFixed(2)}%\\n`);\\n}\\n\\nexport function autocomplete(data, args) {\\n\\treturn data.servers;\\n}\",\"filename\":\"analyze_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"analyze_server.js\",\"url\":\"blob:https://danielyxie.github.io/ff0c4155-92eb-4804-a5b3-8169b86c3190\",\"moduleSequenceNumber\":56295}],\"dependents\":[],\"ramUsage\":7.85,\"server\":\"home\",\"moduleSequenceNumber\":257,\"_hash\":\"91dcb01282737a1ba790ffe2b0a91ff70f2888e7c730f4a1a722ea4efa4c8075\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const flags = ns.flags([\\n        ['refreshrate', 200],\\n        ['help', false],\\n    ])\\n    if (flags.help) {\\n        ns.tprint(\\\"This script helps visualize the money and security of a server.\\\");\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\n        return;\\n    }\\n    ns.tail();\\n    ns.disableLog('ALL');\\n    const servers = flags._[0] ? [flags._[0]] : [];\\n    // ns.tprint(JSON.stringify(servers));\\n    while (true) {\\n        ns.clearLog();\\n        for (var i = 0; i < servers.length; i++) {\\n            const server = servers[i];\\n            const s = ns.getServer(server);\\n            const player = ns.getPlayer();\\n            let maxMoney = ns.getServerMaxMoney(server);\\n            const minSec = ns.getServerMinSecurityLevel(server);\\n            let money = ns.getServerMoneyAvailable(server);\\n            const percentOfMaxMoney = money / (maxMoney || 1);\\n            const sec = ns.getServerSecurityLevel(server);\\n            const currentSecurity = s.hackDifficulty - s.minDifficulty;\\n            const owk = ns.weakenAnalyze(1, 1);\\n            const hackT = ns.formulas.hacking.hackTime(s, player);\\n            const growT = ns.formulas.hacking.growTime(s, player);\\n            const weakT = ns.formulas.hacking.weakenTime(s, player);\\n            const hackChance = ns.formulas.hacking.hackChance(s, player);\\n            s.hackDifficulty = s.minDifficulty;\\n            const growPercent = ns.formulas.hacking.growPercent(s, 1, player, 1);\\n            const hackPercent = ns.formulas.hacking.hackPercent(s, player);\\n            const hackThreads = Math.floor(.5 / hackPercent);\\n            ns.print(`\\n${server}:\\n    $          : ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${(percentOfMaxMoney * 100).toFixed(2)}%)\\n    security   : ${minSec.toFixed(2)} / ${sec.toFixed(2)} +${(currentSecurity).toFixed(2)}\\n    growth     : ${ns.getServerGrowth(server)} (${(growPercent * 100).toFixed(2)}%)\\n    hack time  : ${ns.tFormat(hackT)} (t=${hackThreads}) (${(hackPercent * 100).toFixed(2)}%)\\n    grow time  : ${ns.tFormat(growT)} (t=${maxMoney === 0 ? 'NaN' : Math.ceil(ns.growthAnalyze(server, growthFactor))})(${(growthFactor * 100).toFixed(0)}%) \\n    weaken time: ${ns.tFormat(weakT)} (t=${Math.max(Math.ceil(currentSecurity / owk), 1)})\\n    hackChance : ${(hackChance * 100).toFixed(2)}%\\n`);\\n        }\\n        await ns.sleep(flags.refreshrate);\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return data.servers;\\n}\",\"filename\":\"monitor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"config.js\",\"url\":\"blob:https://danielyxie.github.io/bd3a0ada-a58d-4e27-8a18-869f7225b1cb\",\"moduleSequenceNumber\":189939},{\"filename\":\"monitor.js\",\"url\":\"blob:https://danielyxie.github.io/55872c20-974b-4910-837d-4bacd970cbf9\",\"moduleSequenceNumber\":190125}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":258,\"_hash\":\"8397cd7b16d2fd5914391c970d442000b728a85d540b028212423f7d73ad8475\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function scan(ns, parent, server, list) {\\n    const children = ns.scan(server);\\n    for (let child of children) {\\n        if (parent == child) {\\n            continue;\\n        }\\n        if (child.indexOf('hacknet-node') < 0)\\n            list.push(child);\\n        scan(ns, server, child, list);\\n    }\\n}\\nexport function list_servers(ns) {\\n    const list = [];\\n    scan(ns, '', 'home', list);\\n    return list;\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.tprint(list_servers(ns));\\n}\\n\\nexport function autocomplete(data, args) {\\n    return data.servers;\\n}\",\"filename\":\"opened_servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/c1552d57-574a-4f5b-8b0a-ab6ca813e240\",\"moduleSequenceNumber\":22477}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":259,\"_hash\":\"06ce4d2601ca3986016c5ec63d4754fff87fc878ed41b258d88ee6ba15694c79\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { list_servers } from 'opened_servers.js';\\nimport { createSidebarItem, sidebar } from \\\"/box/box.js\\\"\\n\\nexport const sleevesPortNumber = 15;\\n\\nexport const findBox = (title) => {\\n\\tlet res = [];\\n\\tsidebar.querySelectorAll('div.sbitem').forEach(sbitem => res.push({ sbitem, title: sbitem.querySelector('div.head > span').innerText }));\\n\\tlet box = res.find(o => o.title === title);\\n\\treturn box ? box.sbitem : box;\\n}\\n\\nexport const boxTailSingleton = (ns, title, icon, height, pinned = \\\"<div/>\\\") => {\\n\\tlet box = findBox(title);\\n\\tif (!box) {\\n\\t\\tbox = createSidebarItem(title, pinned, icon);\\n\\t}\\n\\tlet ci = box.contextItems['kill'];\\n\\tif (!ci) {\\n\\t\\tbox.addContextItem('kill', () => ns.kill());\\n\\t}\\n\\t// update the function with this current ns instance;\\n\\tbox.contextItems['kill'].fn = () => ns.kill();\\n\\n\\tif (height) box.style.height = height;\\n\\n\\t// ns.atExit(function () {\\n\\t// \\tbox.remove();\\n\\t// });\\n\\n\\tconst _clearLog = ns.clearLog;\\n\\tns.clearLog = () => {\\n\\t\\t_clearLog();\\n\\t\\tbox.logDiv = box.body.querySelector('div.log');\\n\\t\\tif (box.logDiv) box.logDiv.replaceChildren([]);\\n\\t}\\n\\tconst logEntryLimit = 500;\\n\\tconst _print = ns.print;\\n\\tns.print = (m) => {\\n\\t\\tbox.log(`<span>${m}</span>`);\\n\\t\\t_print(m);\\n\\t\\tbox.logDiv = box.body.querySelector('div.log');\\n\\t\\twhile (box.logDiv.children.length > logEntryLimit) box.logDiv.children[0].remove();\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nexport async function runHackScript(ns, script, host, threads, target) {\\n\\tif (!ns.fileExists(script, host)) {\\n\\t\\tawait ns.scp(script, host);\\n\\t}\\n\\treturn Promise.resolve(ns.exec(script, host, threads, target, Math.random()));\\n}\\n\\n/** @param {NS} ns **/\\nexport function getHosts(ns, scriptRam) {\\n\\tconst openedServers = list_servers(ns).filter(s => ns.hasRootAccess(s) && ns.getServerMaxRam(s) > 1);\\n\\tconst s = ns.getServer('home');\\n\\t// reserve some ram for other scripts\\n\\tif (s.maxRam >= 64) {\\n\\t\\ts.maxRam = s.maxRam - 32;\\n\\t} else if (host === 'home' && s.maxRam === 32) {\\n\\t\\ts.maxRam = s.maxRam - 16;\\n\\t}\\n\\tconst hostServers = [{\\n\\t\\tserver: s,\\n\\t\\tcpuCores: s.cpuCores,\\n\\t\\tthreadsAvailable: Math.max(Math.floor((s.maxRam - s.ramUsed) / scriptRam), 0)\\n\\t}];\\n\\tfor (const host of openedServers) {\\n\\t\\tconst s = ns.getServer(host);\\n\\t\\tconst threadsAvailable = Math.max(Math.floor((s.maxRam - s.ramUsed) / scriptRam), 0);\\n\\t\\thostServers.push({\\n\\t\\t\\tserver: s,\\n\\t\\t\\tcpuCores: s.cpuCores,\\n\\t\\t\\tthreadsAvailable\\n\\t\\t});\\n\\t}\\n\\treturn hostServers;\\n}\\n/** @param {NS} ns **/\\nexport function ramUsage(ns) {\\n\\tconst serversWithRam = ['home'].concat(list_servers(ns).filter(s => ns.hasRootAccess(s) && ns.getServerMaxRam(s) > 1));\\n\\treturn serversWithRam.map(o => ns.getServerUsedRam(o) / ns.getServerMaxRam(o)).reduce((a, b) => a + b, 0) / serversWithRam.length;\\n}\\n\\nconst weaken_script = \\\"weaken.js\\\";\\nconst grow_script = \\\"grow.js\\\";\\nconst hack_script = \\\"hack.js\\\";\\n/** @param {NS} ns **/\\nexport async function copyHackingFiles(ns, server) {\\n\\tif (server.hasAdminRights) {\\n\\t\\tif (!ns.fileExists(hack_script, server.hostname)) {\\n\\t\\t\\tawait ns.scp(hack_script, server.hostname);\\n\\t\\t}\\n\\t\\tif (!ns.fileExists(grow_script, server.hostname)) {\\n\\t\\t\\tawait ns.scp(grow_script, server.hostname);\\n\\t\\t}\\n\\t\\tif (!ns.fileExists(weaken_script, server.hostname)) {\\n\\t\\t\\tawait ns.scp(weaken_script, server.hostname);\\n\\t\\t}\\n\\t}\\n}\\nexport function tryGetBitNodeMultipliers(ns) {\\n\\treturn JSON.parse(ns.read(`/tmp/getBitNodeMultipliers.txt`));\\n}\\nexport function inGangStatic(ns) {\\n\\treturn ns.read(`/tmp/ingang.txt`);\\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.45,\"server\":\"home\",\"moduleSequenceNumber\":260,\"_hash\":\"0894d46a0b308b241154ca127120e84f76b3a7b4399137accac07bf645071683\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function recursiveScan(ns, parent, server, target, route) {\\n\\tconst children = ns.scan(server);\\n\\tfor (let child of children) {\\n\\t\\tif (parent == child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child == target) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(server);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\tif (recursiveScan(ns, server, child, target, route)) {\\n\\t\\t\\troute.unshift(server);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst args = ns.flags([[\\\"help\\\", false]]);\\n\\tlet route = [];\\n\\tlet server = args._[0];\\n\\tif (!server || args.help) {\\n\\t\\tns.tprint(\\\"This script helps you find a server on the network and shows you the path to get to it.\\\");\\n\\t\\tns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\n\\t\\tns.tprint(\\\"Example:\\\");\\n\\t\\tns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n\\t\\treturn;\\n\\t}\\n\\n\\tlet connectString = '';\\n\\trecursiveScan(ns, '', 'home', server, route);\\n\\tfor (const i in route) {\\n\\t\\tawait ns.sleep(0);\\n\\t\\tconst extra = i > 0 ? \\\"└ \\\" : \\\"\\\";\\n\\t\\tns.tprint(`${\\\" \\\".repeat(i)}${extra}${route[i]}`);\\n\\t}\\n\\troute.shift();\\n\\tns.tprint(`connect ${route.join(`; connect `)}`);\\n}\\n\\nexport function autocomplete(data, args) {\\n\\treturn data.servers;\\n}\",\"filename\":\"find_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"find_server.js\",\"url\":\"blob:https://danielyxie.github.io/aa996dab-2b75-4ac7-82c3-a10106e54f89\",\"moduleSequenceNumber\":634665}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":261,\"_hash\":\"3b9f505a588b13c309d36d04796340a4ebaa1ba23ac8bb2cf738a08417e8143c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/c2b69746-473f-4df8-bec8-d64f7c02b54d\",\"moduleSequenceNumber\":524}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":524,\"_hash\":\"7c3005da5d66c68df85df0df50d2b0b0b00778857a07d88670bbf183a0a4ebec\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/f254e907-1f9a-42ec-a553-2b22797cb878\",\"moduleSequenceNumber\":520}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":520,\"_hash\":\"d23919e9f2448a7ca545faeb9799d8136a808b1dd9c8d5c7ac741c458d2a3156\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/98c57ddf-9237-4b75-aff4-b93c7f9f3317\",\"moduleSequenceNumber\":525}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":525,\"_hash\":\"fbec4b055c178ac2b6828ed994c26bf05b233d7383518107ad159953759a8b89\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { list_servers } from 'opened_servers.js';\\nimport { boxTailSingleton, ramUsage } from 'utils.js';\\n\\nlet ns;\\nconst weaken_script = \\\"weaken.js\\\";\\nconst grow_script = \\\"grow.js\\\";\\nconst hack_script = \\\"hack.js\\\";\\nlet hack_scriptRam = 1.7;\\nlet grow_scriptRam, weaken_scriptRam = 1.75;\\nlet serversForExecution = [];\\nlet hackStatus = [];\\n/** @param {NS} pns **/\\nexport async function main(pns) {\\n\\tns = pns;\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('exec')\\n\\tns.clearLog();\\n\\tns.tail();\\n\\tboxTailSingleton(ns, 'mcp', '🥾', '200px');\\n\\tweaken_scriptRam = ns.getScriptRam(weaken_script, \\\"home\\\");\\n\\tgrow_scriptRam = ns.getScriptRam(grow_script, \\\"home\\\");\\n\\thack_scriptRam = ns.getScriptRam(hack_script, \\\"home\\\");\\n\\tawait run();\\n}\\nlet hackPercent = .5;\\nlet bonusServers = 0;\\nasync function updateServerLists() {\\n\\tserversForExecution = ['home'].concat(list_servers(ns).filter(s => ns.hasRootAccess(s)));\\n\\tconst beforeHackStatusLength = hackStatus.length;\\n\\tconst serversToHack = list_servers(ns).filter(s => ns.hasRootAccess(s)\\n\\t\\t&& ns.getServerMaxMoney(s) > 0\\n\\t\\t&& ns.getServerRequiredHackingLevel(s) <= ns.getHackingLevel() / 2);\\n\\n\\thackStatus = [];\\n\\tconst skippedServer = []\\n\\tconst player = ns.getPlayer();\\n\\tfor (const server of serversToHack) {\\n\\t\\tconst s = ns.getServer(server);\\n\\t\\ts.hackDifficulty = s.minDifficulty;\\n\\t\\t// check that hacks will succeed. Could be redundant check\\n\\t\\tconst hackChance = ns.formulas.hacking.hackChance(s, player);\\n\\t\\tif (hackChance < .99) {\\n\\t\\t\\t//ns.print(`Hack chance to low ${s} ${(hackChance * 100).toFixed(2)}%`)\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (s.serverGrowth < 40) {\\n\\t\\t\\t//ns.print(`Growth is to low ${s} ${s.serverGrowth}%`)\\n\\t\\t\\tskippedServer.push({ server: server });\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\thackStatus.push({ server: server });\\n\\t}\\n\\tconst lowRamUse = ramUsage(ns) < .5;\\n\\tconst oldHackPercent = hackPercent;\\n\\tconst oldBonusServers = bonusServers;\\n\\tif (lowRamUse) {\\n\\t\\thackPercent = Math.min(hackPercent + .1, .95);\\n\\t\\tif (hackPercent === .95) {\\n\\t\\t\\tbonusServers = Math.min(bonusServers + 1, skippedServer.length);\\n\\t\\t\\thackStatus.push(...skippedServer.slice(0, bonusServers));\\n\\t\\t}\\n\\t} else {\\n\\t\\tbonusServers = Math.max(bonusServers - 1, 0);\\n\\t\\tif (bonusServers <= 0) hackPercent = Math.max(hackPercent - .1, .5);\\n\\t}\\n\\tif (oldHackPercent !== hackPercent || oldBonusServers !== bonusServers) ns.tprint(`BonusServers added ${bonusServers} Hack percent ${hackPercent}`);\\n\\t// after aug install just start hacking on n00dles fist\\n\\tif (hackStatus.length === 0) hackStatus.push({ server: 'n00dles' });\\n\\tif (beforeHackStatusLength < hackStatus.length) ns.tprint(`Servers to hack ${hackStatus.length} ${hackStatus.map(o => o.server).join(',')}`);\\n}\\n\\nasync function run() {\\n\\tlet i = 0;\\n\\tlet res;\\n\\tawait updateServerLists();\\n\\tlet updateAfter = Date.now().valueOf() + 30 * 1000;\\n\\twhile (true) {\\n\\t\\tconst state = getNextState(hackStatus[i].server, hackStatus[i].nextStateUpdateRequiredAt);\\n\\t\\tif (state) {\\n\\t\\t\\thackStatus[i] = state;\\n\\n\\t\\t\\tswitch (state.nextState) {\\n\\t\\t\\t\\tcase 'weaken':\\n\\t\\t\\t\\t\\tres = await runWeaken(state.server, state.currentSecurity, state.threadsCommitted);\\n\\t\\t\\t\\t\\t// ns.print(`Weak time ${ns.tFormat(res.time)}`);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'grow':\\n\\t\\t\\t\\t\\tres = await runGrow(state.server, state.percentMoney, state.threadsCommitted);\\n\\t\\t\\t\\t\\t// ns.print(`Grow time ${ns.tFormat(res.time)}`);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'hack':\\n\\t\\t\\t\\t\\tres = await runHack(state.server, state.threadsCommitted);\\n\\t\\t\\t\\t\\t// ns.print(`Hack time ${ns.tFormat(res.time)}`);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\n\\t\\t\\tstate.nextStateUpdateRequiredAt = Date.now() + res.time;\\n\\t\\t\\t// ns.print(`Next update at: ${new Date(state.nextStateUpdateRequiredAt).toTimeString()}`);\\n\\t\\t\\tstate.threadsCommitted = res.threadsCommitted\\n\\t\\t}\\n\\t\\ti = (i + 1) % hackStatus.length;\\n\\t\\tawait ns.sleep(1000);\\n\\t\\tif (updateAfter < Date.now()) {\\n\\t\\t\\tupdateAfter = Date.now() + 30 * 1000;\\n\\t\\t\\tawait updateServerLists();\\n\\t\\t\\ti = 0;\\n\\t\\t}\\n\\t}\\n}\\nconst getCores = (host) => ns.getServer(host).cpuCores;\\n\\nasync function runWeaken(target, currentSecurity, threads) {\\n\\tlet time = 0;\\n\\tlet threadsCommitted = 0;\\n\\tconst { host, threads_available } = getHostAndThreads(weaken_scriptRam);\\n\\tif (!host) return { time, threadsCommitted };\\n\\tlet threadToUse = threads_available;\\n\\tconst owk = ns.weakenAnalyze(1, getCores(host));\\n\\tconst threadsNeeded = Math.max(Math.ceil(currentSecurity / owk) - threads, 1);\\n\\tthreadToUse = Math.min(threadToUse, threadsNeeded);\\n\\tif (!ns.fileExists(weaken_script, host)) {\\n\\t\\tawait ns.scp(weaken_script, host);\\n\\t}\\n\\tconst pid = await ns.exec(weaken_script, host, threadToUse, target, Math.random());\\n\\tif (pid > 0) {\\n\\t\\tif (hasFormulas() && threadsNeeded <= threadToUse) {\\n\\t\\t\\ttime = ns.formulas.hacking.weakenTime(ns.getServer(target), ns.getPlayer());\\n\\t\\t}\\n\\t\\t// ns.print(`Weaken ${host}[${threadToUse}] -> ${target}`);\\n\\t\\tthreadsCommitted = threadToUse;\\n\\t}\\n\\treturn { time, threadsCommitted };\\n}\\n\\nasync function runGrow(target, percentMoney, threads) {\\n\\tlet time = 0;\\n\\tlet threadsCommitted = 0;\\n\\tconst { host, threads_available } = getHostAndThreads(grow_scriptRam);\\n\\tif (!host) return { time, threadsCommitted };\\n\\tconst growthFactor = 1 / (percentMoney || 0.0000001);\\n\\tconst threadsNeeded = Math.max(Math.floor(ns.growthAnalyze(target, growthFactor, getCores(host))) - threads, 1);\\n\\tlet threadToUse = Math.min(threads_available, threadsNeeded);\\n\\tif (!ns.fileExists(grow_script, host)) {\\n\\t\\tawait ns.scp(grow_script, host);\\n\\t}\\n\\n\\tconst pid = await ns.exec(grow_script, host, threadToUse, target, Math.random());\\n\\tif (pid > 0) {\\n\\t\\tif (hasFormulas() && threadsNeeded <= threadToUse) {\\n\\t\\t\\ttime = ns.formulas.hacking.growTime(ns.getServer(target), ns.getPlayer());\\n\\t\\t}\\n\\t\\t// ns.print(`Grow ${host}[${threadToUse}] -> ${target}`);\\n\\t\\tthreadsCommitted = threadToUse;\\n\\t}\\n\\tconst w = await runWeaken(target,ns.growthAnalyzeSecurity(threadsCommitted),0);\\n\\treturn { time:w.time, threadsCommitted: w.threadsCommitted + threadsCommitted };\\n}\\n\\nasync function runHack(target, threads) {\\n\\tlet time = 0;\\n\\tlet threadsCommitted = 0;\\n\\tconst { host, threads_available } = getHostAndThreads(hack_scriptRam);\\n\\tif (!host) return { time, threadsCommitted };\\n\\tconst threadsNeeded = Math.max(parseInt((hackPercent / ns.hackAnalyze(target)).toFixed(0)) - threads, 1);\\n\\tlet threadToUse = Math.min(threads_available, threadsNeeded);\\n\\tif (!ns.fileExists(hack_script, host)) {\\n\\t\\tawait ns.scp(hack_script, host);\\n\\t}\\n\\n\\tconst cashingOut = ns.hackAnalyze(target) * threadToUse * ns.getServerMoneyAvailable(target);\\n\\tconst pid = await ns.exec(hack_script, host, threadToUse, target, Math.random());\\n\\n\\tif (pid > 0) {\\n\\t\\tif (hasFormulas() && threadsNeeded <= threadToUse) {\\n\\t\\t\\ttime = ns.formulas.hacking.hackTime(ns.getServer(target), ns.getPlayer());\\n\\t\\t}\\n\\t\\tns.print(`Hack ${host}[${threadToUse}] -> ${target}[${ns.nFormat(cashingOut, \\\"($ 0.00 a)\\\")}]`);\\n\\t\\tthreadsCommitted = threadToUse;\\n\\t}\\n\\n\\tconst w = await runWeaken(target,ns.hackAnalyzeSecurity(threadsCommitted),0);\\n\\treturn { time:w.time, threadsCommitted: w.threadsCommitted + threadsCommitted };\\n}\\n\\nfunction hasFormulas() {\\n\\treturn ns.fileExists('Formulas.exe');\\n}\\nfunction getHostAndThreads(scriptRam) {\\n\\tconst host = serversForExecution.find((host) => {\\n\\t\\tlet maxRam = ns.getServerMaxRam(host);\\n\\t\\t// reserve some ram for other scripts\\n\\t\\tif (host === 'home') {\\n\\t\\t\\tmaxRam = Math.max(maxRam * .75, maxRam - 128);\\n\\t\\t}\\n\\t\\tconst threads_available = Math.floor((maxRam - ns.getServerUsedRam(host)) / scriptRam);\\n\\t\\treturn threads_available >= 1;\\n\\t});\\n\\tif (!host) return { host: null, threads_available: 0 };\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\t// reserve some ram for other scripts\\n\\tif (host === 'home') {\\n\\t\\tmaxRam = Math.max(maxRam * .75, maxRam - 128);\\n\\t}\\n\\tconst threads_available = Math.floor((maxRam - ns.getServerUsedRam(host)) / scriptRam);\\n\\treturn { host, threads_available };\\n}\\nfunction getNextState(server, nextStateUpdateRequiredAt) {\\n\\tif (nextStateUpdateRequiredAt > Date.now()) return null;\\n\\tlet nextState;\\n\\tconst sec = parseFloat((ns.getServerSecurityLevel(server) - ns.getServerMinSecurityLevel(server)).toFixed(2));\\n\\tconst percentMoney = parseFloat((ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server)).toFixed(2));\\n\\tif (sec > 5) {\\n\\t\\tnextState = 'weaken';\\n\\t} else if (percentMoney < 0.95) {\\n\\t\\tnextState = 'grow';\\n\\t} else {\\n\\t\\tnextState = 'hack';\\n\\t}\\n\\t// \\tns.print(`Next state for ${server} ${nextState} \\n\\t//   $% : ${percentMoney * 100} \\n\\t//   sec: +${sec.toFixed(2)} \\n\\t//   at : ${new Date(nextStateUpdateRequiredAt ? nextStateUpdateRequiredAt : Date.now()).toTimeString()}`);\\n\\treturn {\\n\\t\\tserver: server,\\n\\t\\tnextState: nextState,\\n\\t\\tpercentMoney: percentMoney,\\n\\t\\tcurrentSecurity: sec,\\n\\t\\tnextStateUpdateRequiredAt: 0,\\n\\t\\tthreadsCommitted: 0\\n\\t};\\n}\",\"filename\":\"mcp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/51d7401f-f6da-4383-9e1c-02e92518e750\",\"moduleSequenceNumber\":66217},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/41c83801-606b-42bd-bcfc-dde73d406d0a\",\"moduleSequenceNumber\":66199},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/34b9c5a0-0024-42be-af83-52652d6a5370\",\"moduleSequenceNumber\":336608},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/2b1f73f4-ca97-457e-8df9-81ade5657196\",\"moduleSequenceNumber\":66199},{\"filename\":\"mcp.js\",\"url\":\"blob:https://danielyxie.github.io/de4d6c75-838a-4c4d-9eb8-fc9e0b2ce2d2\",\"moduleSequenceNumber\":337762}],\"dependents\":[],\"ramUsage\":13.6,\"server\":\"home\",\"moduleSequenceNumber\":265,\"_hash\":\"40eafd0a62ace6a9ec46bb73cec73dc5213d36aa5cacc77b5a2d69dd95e433ba\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { copyHackingFiles } from 'utils.js';\\nimport { getAugsRemainingAtFaction, getAllAugmentStats, hasStat } from 'augments.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.clearLog();\\n\\tns.tail();\\n// import { getOwnedAugmentationsStatic, getAugmentsPerFaction, getAllAugmentStats, hasStat } from 'augments.js';\\nfunction wantListGenerator() {\\n\\tconst augmentStats = getAllAugmentStats(ns);\\n\\t// const bladeburnerDesiredStats = ['agi', 'dex', 'str', 'def', 'faction_rep', 'company_rep', 'hacknet'];\\n\\tconst bladeburnerDesiredStats = ['agi', 'dex', 'str', 'def', 'faction_rep'];\\n\\tconst anauglist = Object.entries(augmentStats)\\n\\t\\t.filter(([name, augstats]) =>\\n\\t\\t\\tbladeburnerDesiredStats.filter((stat) => hasStat(stat, augstats)).length > 0)\\n\\t\\t.sort(([, augstatsa], [, augstatsb]) => augstatsa.price - augstatsb.price)\\n\\t\\t.map(([name, augstats]) => name);\\n\\tns.print(JSON.stringify(anauglist, null, 2));\\n}\\nwantListGenerator();\\n\\t// bb want list\\n\\n\\n\\t// const factionAugs = getAugsRemainingAtFaction(ns);\\n\\t// const factionsWithAugs = Object.entries(factionAugs)\\n\\t// \\t.filter(([faction, augList]) =>\\n\\t// \\t\\taugList.filter(aug => aug !== 'NeuroFlux Governor').length > 0 // work for factions with augs other than NFG\\n\\t// \\t\\t&& faction !==  ns.getPlayer().currentWorkFactionName // sleeve 0 is working for this faction\\n\\t// \\t\\t// && !allGangFactions.includes(faction) // can't work for competing gangs\\n\\t// \\t\\t&& ns.getPlayer().factions.includes(faction) // player in faction\\n\\t// \\t\\t&& faction !== 'Bladeburners'\\n\\t// \\t\\t&& faction !== 'Slum Snakes');\\n\\t// let faction = factionsWithAugs[i][0]\\n\\n\\t// const excludedAugs = ['QLink', 'Hydroflame Left Arm'];\\n\\t// const ag = ns.sleeve.getSleevePurchasableAugs(1).filter(a => !excludedAugs.includes(a.name)).sort((a, b) => a.cost - b.cost);\\n\\t//  const factionsWithAugs = Object.entries(factionAugs)\\n\\t//         .filter(([faction, augList]) =>\\n\\t//             augList.filter(aug => aug !== 'NeuroFlux Governor').length > 0 // work for factions with augs other than NFG\\n\\t//             && faction !== playerInfo.currentWorkFactionName // sleeve 0 is working for this faction\\n\\t//             // && !allGangFactions.includes(faction) // can't work for competing gangs\\n\\t//             && playerInfo.factions.includes(faction) // player in faction\\n\\t//             && faction !== 'Bladeburners'\\n\\t//             && faction !== 'Slum Snakes');\\n\\t// const blackOpsNames = ns.bladeburner.getBlackOpNames();\\n\\t// let blackOpsRanks = {};\\n\\t// const blackOpsToBeDone = {};\\n\\t// for (let blackOpsName of blackOpsNames) {\\n\\t// \\tblackOpsRanks[blackOpsName] = ns.bladeburner.getBlackOpRank(blackOpsName);\\n\\t// \\tblackOpsToBeDone[blackOpsName] = ns.bladeburner.getActionCountRemaining(\\\"blackops\\\", blackOpsName);\\n\\t// }\\n\\t// let remainingBlackOpsNames = blackOpsNames.filter(n => blackOpsToBeDone[n] === 1)\\n\\t// \\t.sort((b1, b2) => blackOpsRanks[b1] - blackOpsRanks[b2]);\\n\\t// const currentAction = ns.bladeburner.getCurrentAction();\\n\\t// // Special case: If the user has manually kicked off the last BlackOps, don't interrupt it, let it be our last task\\n\\t// ns.print(`${currentAction?.name} === ${remainingBlackOpsNames[remainingBlackOpsNames.length - 1]} ${currentAction?.name === remainingBlackOpsNames[remainingBlackOpsNames - 1]}`);\\n\\t// const currentDuration = ns.bladeburner.getActionTime(currentAction.type, currentAction.name);\\n\\t// ns.print(`currentDuration ${currentDuration}`);\\n\\t// lastAssignedTask = currentAction;\\n\\n\\n\\t// ns.print(JSON.stringify(getAugsRemainingAtFaction(ns), null, 2));\\n\\n\\t// const s = ns.getPurchasedServers();\\n\\t// for (let server of s) {\\n\\t// \\tawait copyHackingFiles(ns, { hostname: server, hasAdminRights: true });\\n\\t// }\\n\\t// for (let i =0; i<ns.hacknet.numNodes();i++) {\\n\\t// await copyHackingFiles(ns, { hostname: `hacknet-node-${i}`, hasAdminRights: true });\\n\\t// }\\n\\t// let activeAugmentations = getOwnedAugmentationsStatic(ns);\\n\\t//     ns.print(activeAugmentations.includes(\\\"Neuroreceptor Management Implant\\\"));\\n\\t// \\tns.workForFaction(\\\"NiteSec\\\", 'security', false);\\n\\t// ns.print(ns.corporation.hasUnlockUpgrade('Smart Supply'));\\n\\t// ns.print(JSON.stringify(ns.corporation.getWarehouse('Agriculture', 'Sector-12'),null, 2));\\n\\t// ns.print(JSON.stringify(ns.getPlayer(), null, 2));\\n\\t// const words = [\\n\\t// \\t'bitburner', 'hack', 'cpu', 'hacknet', 'augment','install','noodles','noodle','vitalife'\\n\\t// ]\\n\\t// for (let word of words)\\n\\t// \\tns.print(`${word} ${ns.rainbow(word)}`);\\n\\t// const gang = ns.gang.getGangInformation();\\n\\t// const chanceVsOtherGang = Object.entries(ns.gang.getOtherGangInformation())\\n\\t// \\t.filter(([k, s]) => k !== gang.faction && s.territory > 0)\\n\\t// \\t.map(([k, s]) => ns.gang.getChanceToWinClash(k));\\n\\n\\n\\t// let members = [];\\n\\t// let names = ns.gang.getMemberNames();\\n\\t// for (const name of names) {\\n\\t// \\tmembers.push(ns.gang.getMemberInformation(name));\\n\\t// }\\n\\t// let tasks = [];\\n\\t// names = ns.gang.getTaskNames();\\n\\t// for (const name of names) {\\n\\t// \\ttasks.push(ns.gang.getTaskStats(name));\\n\\t// }\\n\\t// let i = 0;\\n\\t// for (const member of members) {\\n\\t// \\ti++;\\n\\t// \\tlet prevTask = member.task;\\n\\t// \\tlet bestTask = '';\\n\\t// \\tlet mg = 0;\\n\\t// \\tfor (const task of tasks) {\\n\\t// \\t\\tlet nmg = ns.formulas.gang.respectGain(gang, member, task);\\n\\t// \\t\\t//if (nmg > 0) \\n\\t// \\t\\tns.print(`${member.name} ${task.name} ${nmg}`);\\n\\t// \\t\\tif (nmg > mg) {\\n\\t// \\t\\t\\tbestTask = task.name;\\n\\t// \\t\\t\\tmg = nmg;\\n\\t// \\t\\t}\\n\\t// \\t}\\n\\t// \\tns.print(`BEST TASK ${member.name} ${bestTask} ${mg}`);\\n\\t// }\\n\\t// const target = 'CSEC';\\n\\t// const server = ns.getServer(target);\\n\\t// const player = ns.getPlayer();\\n\\t// ns.print(ns.getBitNodeMultipliers())\\n\\t// ns.print(JSON.stringify(player, null, 2));\\n\\t// ns.print(ns.gang.getMemberNames())\\n\\t// ns.print(ns.gang.getTaskNames());\\n\\t// const hnc = ns.hacknet.getPurchaseNodeCost();\\n\\t// const mgr = 0; //ns.hacknet.getNodeStats(200, 64, 16, player.hacknet_node_money_mult)\\n\\t// const htime = ns.formulas.hacking.hackTime(ns.getServer(target), ns.getPlayer());\\n\\n\\t// const owk = ns.weakenAnalyze(1, 4);\\n\\t// const securityLevelToBeat = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\n\\t// const threadsNeeded = Math.ceil(securityLevelToBeat / owk);\\n\\t// const bingo = ns.weakenAnalyze(threads, 4)\\n\\t// ns.print(`${owk} * ${threads} >= ${securityLevelToBeat} `);\\n\\t// ns.tprint(`${ns.hackAnalyze(target)} ${mgr} ${''}`);\\n\\t// ns.print(`${hnc} ${mgr}`);\\n\\t// server.hackDifficulty = server.minDifficulty;\\n\\t// const ht1 = ns.formulas.hacking.growPercent(server, 1, player, 1);\\n\\t// const threads = 2.1 / ht1;\\n\\t// const ht2 = ns.formulas.hacking.growPercent(server, 10000, player, 1);\\n\\t// let percent = 0;\\n\\t// let growThreadsNeeded = 1;\\n\\t// while (percent < 2.1) {\\n\\t// \\tpercent = ns.formulas.hacking.growPercent(server, growThreadsNeeded++, player, 1);\\n\\t// \\tns.print(`${percent}`);\\n\\t// \\tawait ns.sleep(0);\\n\\t// }\\n\\t// server.hackDifficulty = server.minDifficulty;\\n\\t// const ht2 = ns.formulas.hacking.hackPercent(server, player);\\n\\t// ns.print(`${ht1} ${threads} ${ht2} ${growThreadsNeeded} ${percent}`);\\n\\t// let growO = ns.hackAnalyzeSecurity(1);\\n\\t// let growSecurityInc = ns.growthAnalyzeSecurity(1);\\n\\t// ns.print(`${growO} ${1} ${growSecurityInc}`);\\n\\t// \\tconst t = ns.formulas.hacking.weakenTime(server, player);\\n\\t// \\tconst wt1 = Date.now() + ns.formulas.hacking.weakenTime(server, player);\\n\\t// \\tawait ns.sleep(500);\\n\\t// \\tconst wt2 = Date.now() - (wt1 - ns.formulas.hacking.weakenTime(server, player));\\n\\t// \\tns.print(`${t} ${wt2}`);\\n\\n\\t// ns.print(`${ns.hackAnalyze('johnson-ortho')} `);\\n\\n\\n\\tNumber.prototype.toExponential = () => null;\\n\\t// eval('window').performance.now = () => 0;\\n\\n\\n\\t// ns.print(`${ns.alterReality()}`);\\n\\t// ns.print(`${ns.bypass(eval('document'))}`);\\n\\t// eval('document').querySelector(\\\"#unclickable\\\").click()\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"augments.js\",\"url\":\"blob:https://danielyxie.github.io/975fd8f1-7ed9-4ffb-ae4a-b3fa71e8399d\",\"moduleSequenceNumber\":1040120},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/35299be7-d0fa-4d10-a9aa-eb7b3989bc77\",\"moduleSequenceNumber\":1040108},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/0c658734-c299-49b5-aaba-2ae1e0257de1\",\"moduleSequenceNumber\":1040091},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/ab40182f-bf71-42c8-916c-df4926e01cee\",\"moduleSequenceNumber\":1040092},{\"filename\":\"test.js\",\"url\":\"blob:https://danielyxie.github.io/bdbf5dd4-4926-403b-bda2-210e6d9b6ccf\",\"moduleSequenceNumber\":1052126}],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"home\",\"moduleSequenceNumber\":266,\"_hash\":\"af2f03b0ce88e6f0b83f35a162009ee18fa7c5b600da8dcfb01a53df06ce6280\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ramUsage } from 'utils.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst args = ns.flags([[\\\"help\\\", false]]);\\n\\tif (args.help) {\\n\\t\\tns.tprint(\\\"This script will enhance your HUD (Heads up Display) with custom statistics.\\\");\\n\\t\\tns.tprint(`Usage: run ${ns.getScriptName()}`);\\n\\t\\tns.tprint(\\\"Example:\\\");\\n\\t\\tns.tprint(`> run ${ns.getScriptName()}`);\\n\\t\\treturn;\\n\\t}\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('disableLog');\\n\\tns.disableLog('getServerMaxRam')\\n\\tns.disableLog('getServerUsedRam');\\n\\n\\tconst doc = eval('document');\\n\\tconst hook0 = doc.getElementById('overview-extra-hook-0');\\n\\tconst hook1 = doc.getElementById('overview-extra-hook-1');\\n\\tconst monies = [];\\n\\tlet moneyLastTick = ns.getPlayer().money;\\n\\twhile (true) {\\n\\t\\ttry {\\n\\t\\t\\tconst headers = []\\n\\t\\t\\tconst values = [];\\n\\t\\t\\tconst player = ns.getPlayer();\\n\\n\\t\\t\\theaders.push(\\\"Scripts\\\");\\n\\t\\t\\tvalues.push(ns.nFormat(ns.getScriptIncome()[0], \\\"($0.00a)\\\") + '/s');\\n\\n\\t\\t\\tmonies.push(player.money - moneyLastTick);\\n\\t\\t\\tif (monies.length > 600) monies.shift();\\n\\t\\t\\tmoneyLastTick = player.money;\\n\\t\\t\\theaders.push(\\\"Money\\\");\\n\\t\\t\\tvalues.push(ns.nFormat(monies.reduce((a, b) => a + b, 0) / monies.length, \\\"($0.00a)\\\") + '/s');\\n\\n\\t\\t\\theaders.push(\\\"Ram Use\\\");\\n\\t\\t\\tvalues.push((ramUsage(ns) * 100).toFixed(1) + '%');\\n\\n\\t\\t\\tif (ns.heart.break() > -54000) {\\n\\t\\t\\t\\theaders.push(\\\"Karma\\\");\\n\\t\\t\\t\\tvalues.push(ns.heart.break().toFixed(0));\\n\\t\\t\\t}\\n\\n\\t\\t\\t// if (ns.fileExists('/tmp/ingang.txt')) {\\n\\t\\t\\t// \\tconst gangInfo = ns.getGangInformation();\\n\\t\\t\\t// \\theaders.push(\\\"Respect\\\");\\n\\t\\t\\t// \\tvalues.push(ns.nFormat(gangInfo.respect, '0.00a'));\\n\\t\\t\\t// \\theaders.push(\\\"Penalty\\\");\\n\\t\\t\\t// \\tvalues.push(ns.nFormat(gangInfo.wantedPenalty, '0.00%'));\\n\\t\\t\\t// \\theaders.push(\\\"Territory\\\");\\n\\t\\t\\t// \\tvalues.push(ns.nFormat(gangInfo.territory, '0.00%'));\\n\\t\\t\\t// }\\n\\n\\t\\t\\tif (ns.getSharePower() > 1) {\\n\\t\\t\\t\\theaders.push(\\\"Share\\\");\\n\\t\\t\\t\\tvalues.push(((ns.getSharePower() - 1) * 100).toFixed(2) + '%');\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Now drop it into the placeholder elements\\n\\t\\t\\thook0.innerText = headers.join(\\\"\\\\n\\\");\\n\\t\\t\\thook1.innerText = values.join(\\\"\\\\n\\\");\\n\\t\\t} catch (err) { // This might come in handy later\\n\\t\\t\\tns.print(\\\"ERROR: Update Skipped: \\\" + String(err));\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"custom-stats.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/3e654c46-d1bb-487f-aaab-3f7477114262\",\"moduleSequenceNumber\":276},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/5278794a-e6fb-4116-a537-78a27595b77b\",\"moduleSequenceNumber\":259},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/152d8f61-4c68-4174-b671-296552b87e38\",\"moduleSequenceNumber\":260},{\"filename\":\"custom-stats.js\",\"url\":\"blob:https://danielyxie.github.io/ca2bd4b2-ab60-47fe-8764-19520997ec6d\",\"moduleSequenceNumber\":519}],\"dependents\":[],\"ramUsage\":3.25,\"server\":\"home\",\"moduleSequenceNumber\":519,\"_hash\":\"4b9469a509c8cf93404e80bb1625b76b7717f843073b3d3bc8f890e2b5eccf59\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getSharePower\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { initAugments } from \\\"./augments\\\";\\nimport { boxTailSingleton } from \\\"utils.js\\\"\\nlet ns;\\n\\n/** @param {NS} pns **/\\nexport async function main(pns) {\\n\\tns = pns;\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('scan');\\n\\tboxTailSingleton(ns, 'init', '🖳', '100px');\\n\\tns.clearLog();\\n\\n\\tconst tmpFiles = ns.ls('home', 'tmp');\\n\\tfor (const tmpFp of tmpFiles) {\\n\\t\\tns.rm(tmpFp, 'home');\\n\\t}\\n\\n\\tif (ns.heart.break() < -54000) {\\n\\t\\tns.print('heart plenty broken tyvm');\\n\\t\\tns.gang.createGang('Slum Snakes');\\n\\t}\\n\\tif (ns.gang.inGang()) {\\n\\t\\tawait ns.write('/tmp/ingang.txt', ns.gang.getGangInformation().faction, 'w');\\n\\t}\\n\\tawait ns.write('/tmp/player.txt', JSON.stringify(ns.getPlayer(), null, 2), \\\"w\\\");\\n\\tconst multis = JSON.stringify(ns.getBitNodeMultipliers(), null, 2);\\n\\tconst fp = `/tmp/getBitNodeMultipliers.txt`;\\n\\tawait ns.write(fp, multis, 'w');\\n\\n\\tns.print('init augs details');\\n\\tawait initAugments(ns);\\n\\tns.print('init sleeves statics');\\n\\tawait writeSleeveData();\\n\\n\\tawait writeServers('', 'home');\\n\\tns.exec('hacknet.js', 'home');\\n\\tns.exec('spend-hacknet-hash.js', 'home');\\n\\tns.exec('player.js', 'home');\\n\\tns.exec('sleeves.js', 'home');\\n\\tns.exec('bladeburner.js', 'home');\\n\\tns.exec('megacorp.js', 'home');\\n\\tns.exec('workForFaction.js', 'home', 1, !ns.gang.inGang() ? `--gang-focus` : '--crime-focus');\\n\\tif (ns.gang.inGang()) ns.exec('gangum.js', 'home');\\n\\tns.exec('purchase-servers.js', 'home');\\n\\tns.exec('ensureRoot.js', 'home');\\n\\tns.exec('mcp_hgw.js', 'home');\\n\\tns.exec('custom-stats.js', 'home');\\n\\t// ns.exec('charts.js', 'home');\\n\\t// ns.exec('chart_ram.js', 'home');\\n}\\nimport { list_servers } from 'opened_servers.js';\\nasync function writeServers() {\\n\\tconst hosts = list_servers(ns);\\n\\tfor (let host of hosts) {\\n\\t\\tconst serverDetails = ns.getServer(host);\\n\\t\\tserverDetails.hasAdminRights = false;\\n\\t\\tserverDetails.backdoorInstalled = false;\\n\\t\\tconst fp = `/tmp/${host.replaceAll(/[\\\\.\\\\s]/g, '_')}.txt`;\\n\\t\\tawait ns.write(fp, JSON.stringify(serverDetails, null, 2), 'w');\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nasync function writeSleeveData() {\\n\\tconst getNumSleeves = ns.sleeve.getNumSleeves();\\n\\tconst data = {\\n\\t\\tgetNumSleeves\\n\\t};\\n\\tawait ns.write('/tmp/sleeves_static.txt', JSON.stringify(data), 'w')\\n}\",\"filename\":\"init.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/dff67ed7-2412-4e8d-9f7f-79aadad3de63\",\"moduleSequenceNumber\":1500417},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/f5e37c33-cf77-4be1-bcbe-08ea5ada032b\",\"moduleSequenceNumber\":1500434},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/db2ae39a-63fa-4397-9ac6-2d48ef9c76f3\",\"moduleSequenceNumber\":1500417},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/4d8771c2-8b2f-40f8-b92d-034915a8e1b3\",\"moduleSequenceNumber\":1500418},{\"filename\":\"augments.js\",\"url\":\"blob:https://danielyxie.github.io/712ef1b1-2b88-4518-9fda-fb36f26920aa\",\"moduleSequenceNumber\":1500446},{\"filename\":\"init.js\",\"url\":\"blob:https://danielyxie.github.io/2a91ccd0-8234-4cfb-a8e6-bc1afb1e4ae8\",\"moduleSequenceNumber\":1500583}],\"dependents\":[],\"ramUsage\":39.3,\"server\":\"home\",\"moduleSequenceNumber\":268,\"_hash\":\"7aa01bec4da1f4c16c3d9fb7bd13adf6cfcf9652aa23b26ca06e0fa7ef89f671\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.createGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrice\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:https://danielyxie.github.io/3b1b54ab-f25c-4150-8ab0-a3aba0cf2cff\",\"moduleSequenceNumber\":265319}],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":269,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { list_servers } from 'opened_servers.js';\\nconst share_script = \\\"share.js\\\";\\nlet share_scriptRam = 4;\\nlet serversForExecution;\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst flags = ns.flags([['allram', false]]);\\n\\tns.disableLog('getServerMaxRam');\\n\\tns.disableLog('getServerUsedRam');\\n\\tns.disableLog('sleep');\\n\\tshare_scriptRam = ns.getScriptRam(share_script, \\\"home\\\");\\n\\tconst openedServers = (await list_servers(ns)).filter(s => ns.hasRootAccess(s))\\n\\tserversForExecution = ns.getPurchasedServers().concat(openedServers);\\n\\tlet updateAfter = Date.now().valueOf() + 30 * 1000;\\n\\twhile (true) {\\n\\t\\tif (updateAfter < Date.now()) {\\n\\t\\t\\tconst openedServers = (await list_servers(ns)).filter(s => ns.hasRootAccess(s))\\n\\t\\t\\tserversForExecution = ns.getPurchasedServers().concat(openedServers);\\n\\t\\t\\tupdateAfter = Date.now() + 30 * 1000;\\n\\t\\t}\\n\\t\\tfor (const host of serversForExecution) {\\n\\t\\t\\tconst threadsAvailable = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host)) / share_scriptRam);\\n\\t\\t\\tif (threadsAvailable <= 0) continue;\\n\\t\\t\\tif (!ns.fileExists(share_script, host)) {\\n\\t\\t\\t\\tawait ns.scp(share_script, host);\\n\\t\\t\\t}\\n\\t\\t\\tawait ns.exec(share_script, host, threadsAvailable);\\n\\t\\t\\tawait ns.sleep(0);\\n\\t\\t}\\n\\t\\t// only use max 75% of home for sharing \\n\\t\\tconst threadsAvailable = Math.floor(((ns.getServerMaxRam('home') * .75) - ns.getServerUsedRam('home')) / share_scriptRam);\\n\\t\\tif (threadsAvailable > 0) {\\n\\t\\t\\tawait ns.exec(share_script, 'home', threadsAvailable, Math.random());\\n\\t\\t}\\n\\t\\tawait ns.sleep(0);\\n\\t}\\n}\",\"filename\":\"sharing_is_caring.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/c9e7c2b2-b650-45c5-8aa9-0c7408df8c08\",\"moduleSequenceNumber\":139654},{\"filename\":\"sharing_is_caring.js\",\"url\":\"blob:https://danielyxie.github.io/0484b4cf-e8ce-469e-94a7-9390769aca10\",\"moduleSequenceNumber\":265219}],\"dependents\":[],\"ramUsage\":6.3,\"server\":\"home\",\"moduleSequenceNumber\":270,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//https://github.com/kroitor/asciichart\\n\\n// control sequences for coloring\\n\\nexport const black = \\\"\\\\x1b[30m\\\"\\nexport const red = \\\"\\\\x1b[31m\\\"\\nexport const green = \\\"\\\\x1b[32m\\\"\\nexport const yellow = \\\"\\\\x1b[33m\\\"\\nexport const blue = \\\"\\\\x1b[34m\\\"\\nexport const magenta = \\\"\\\\x1b[35m\\\"\\nexport const cyan = \\\"\\\\x1b[36m\\\"\\nexport const lightgray = \\\"\\\\x1b[37m\\\"\\nexport const adefault = \\\"\\\\x1b[39m\\\"\\nexport const darkgray = \\\"\\\\x1b[90m\\\"\\nexport const lightred = \\\"\\\\x1b[91m\\\"\\nexport const lightgreen = \\\"\\\\x1b[92m\\\"\\nexport const lightyellow = \\\"\\\\x1b[93m\\\"\\nexport const lightblue = \\\"\\\\x1b[94m\\\"\\nexport const lightmagenta = \\\"\\\\x1b[95m\\\"\\nexport const lightcyan = \\\"\\\\x1b[96m\\\"\\nexport const white = \\\"\\\\x1b[97m\\\"\\nexport const reset = \\\"\\\\x1b[0m\\\"\\n\\nexport function colored(char, color) {\\n    // do not color it if color is not specified\\n    return (color === undefined) ? char : (color + char + reset)\\n}\\n\\nexport function plot(series, cfg = undefined) {\\n    // this function takes both one array and array of arrays\\n    // if an array of numbers is passed it is transformed to\\n    // an array of exactly one array with numbers\\n    if (typeof (series[0]) == \\\"number\\\") {\\n        series = [series]\\n    }\\n\\n    cfg = (typeof cfg !== 'undefined') ? cfg : {}\\n\\n    let min = (typeof cfg.min !== 'undefined') ? cfg.min : series[0][0]\\n    let max = (typeof cfg.max !== 'undefined') ? cfg.max : series[0][0]\\n\\n    for (let j = 0; j < series.length; j++) {\\n        for (let i = 0; i < series[j].length; i++) {\\n            min = Math.min(min, series[j][i])\\n            max = Math.max(max, series[j][i])\\n        }\\n    }\\n\\n    let defaultSymbols = ['┼', '┤', '╶', '╴', '─', '╰', '╭', '╮', '╯', '│']\\n    let range = Math.abs(max - min)\\n    let offset = (typeof cfg.offset !== 'undefined') ? cfg.offset : 3\\n    let padding = (typeof cfg.padding !== 'undefined') ? cfg.padding : '           '\\n    let height = (typeof cfg.height !== 'undefined') ? cfg.height : range\\n    let colors = (typeof cfg.colors !== 'undefined') ? cfg.colors : []\\n    let ratio = range !== 0 ? height / range : 1;\\n    let min2 = Math.round(min * ratio)\\n    let max2 = Math.round(max * ratio)\\n    let rows = Math.abs(max2 - min2)\\n    let width = 0\\n    for (let i = 0; i < series.length; i++) {\\n        width = Math.max(width, series[i].length)\\n    }\\n    width = width + offset\\n    let symbols = (typeof cfg.symbols !== 'undefined') ? cfg.symbols : defaultSymbols\\n    let format = (typeof cfg.format !== 'undefined') ? cfg.format : function (x) {\\n        return (padding + x.toFixed(2)).slice(-padding.length)\\n    }\\n\\n    let result = new Array(rows + 1) // empty space\\n    for (let i = 0; i <= rows; i++) {\\n        result[i] = new Array(width)\\n        for (let j = 0; j < width; j++) {\\n            result[i][j] = ' '\\n        }\\n    }\\n    for (let y = min2; y <= max2; ++y) { // axis + labels\\n        let label = format(rows > 0 ? max - (y - min2) * range / rows : y, y - min2)\\n        result[y - min2][Math.max(offset - label.length, 0)] = label\\n        result[y - min2][offset - 1] = (y == 0) ? symbols[0] : symbols[1]\\n    }\\n\\n    for (let j = 0; j < series.length; j++) {\\n        let currentColor = colors[j % colors.length]\\n        let y0 = Math.round(series[j][0] * ratio) - min2\\n        result[rows - y0][offset - 1] = colored(symbols[0], currentColor) // first value\\n\\n        for (let x = 0; x < series[j].length - 1; x++) { // plot the line\\n            let y0 = Math.round(series[j][x + 0] * ratio) - min2\\n            let y1 = Math.round(series[j][x + 1] * ratio) - min2\\n            if (y0 == y1) {\\n                result[rows - y0][x + offset] = colored(symbols[4], currentColor)\\n            } else {\\n                result[rows - y1][x + offset] = colored((y0 > y1) ? symbols[5] : symbols[6], currentColor)\\n                result[rows - y0][x + offset] = colored((y0 > y1) ? symbols[7] : symbols[8], currentColor)\\n                let from = Math.min(y0, y1)\\n                let to = Math.max(y0, y1)\\n                for (let y = from + 1; y < to; y++) {\\n                    result[rows - y][x + offset] = colored(symbols[9], currentColor)\\n                }\\n            }\\n        }\\n    }\\n    return result.map(function (x) { return x.join('') }).join('\\\\n')\\n}\",\"filename\":\"asciichart.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":271,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as asciichart from 'asciichart.js';\\n//store here to be a bit more persisten to script restarts\\nconst series = { 'n00dles': new Array(50).fill(0) };\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const flags = ns.flags([\\n        ['port', 1],\\n        ['refreshrate', 10000],\\n        ['help', false],\\n    ])\\n    if (flags.help) {\\n        ns.tprint(\\\"This script plots a chart using data from a pipe\\\");\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} PIPE_NUMBER`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} 1`)\\n        return;\\n    }\\n    ns.tail();\\n    ns.disableLog('ALL');\\n    const padding = '       ';\\n    const config = {\\n        offset: 2,    // axis offset from the left (min 2)\\n        padding, // padding string for label formatting (can be overridden)\\n        height: 5,   // any height you want\\n        // the label format function applies default padding\\n        format: function (x, i) { return (padding + ns.nFormat(x, '0.00a')).slice(-padding.length) }\\n    };\\n\\n    const port = flags.port;\\n    ns.print(JSON.stringify(Object.values(series), null, 2));\\n    while (true) {\\n        ns.clearLog();\\n        const dollars = {};\\n        let d = ns.peek(port);\\n        while (d !== 'NULL PORT DATA') {\\n            d = ns.readPort(port)\\n            if (d === 'NULL PORT DATA') continue;\\n            const [target, v] = d.split(':');\\n            const dollar = Math.floor(parseFloat(v));\\n            if (!dollars[target]) dollars[target] = 0;\\n            dollars[target] += dollar;\\n            // ns.toast(`Hacked ${target} ${ns.nFormat(dollar, \\\"$0.000a\\\")}`, 'info', 3000);\\n            series[target] = series[target] || new Array(50).fill(0);\\n        }\\n        ns.print(`Interval ${ns.tFormat(flags.refreshrate)}`)\\n        for (const [target, datum] of Object.entries(series)) {\\n            series[target].push(dollars[target] || 0);\\n            series[target].shift();\\n            ns.print(target);\\n            ns.print(`${asciichart.plot(datum, config)}`);\\n        }\\n        await ns.sleep(flags.refreshrate);\\n    }\\n}\",\"filename\":\"charts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"asciichart.js\",\"url\":\"blob:https://danielyxie.github.io/fa10554f-3439-4c5e-b6fd-3700223e1df1\",\"moduleSequenceNumber\":3101},{\"filename\":\"charts.js\",\"url\":\"blob:https://danielyxie.github.io/c9208acd-fb4b-4bdd-b04a-0a533ee35e58\",\"moduleSequenceNumber\":3113}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":272,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { list_servers } from \\\"opened_servers.js\\\";\\nimport { boxTailSingleton } from 'utils.js';\\n\\n/** @param {NS} ns **/\\nexport function main(ns) {\\n    boxTailSingleton(ns, 'autosolver', '🔎', '20px');\\n    const contracts = list_servers(ns).map((server) => {\\n        const onServer = ns.ls(server, \\\".cct\\\").map((contract) => {\\n            const type = ns.codingcontract.getContractType(contract, server);\\n            const data = ns.codingcontract.getData(contract, server);\\n            const didSolve = solve(type, data, server, contract, ns);\\n            return `${server} - ${contract} - ${type} - ${didSolve || \\\"FAILED!\\\"}`;\\n        });\\n        return onServer;\\n    }).filter(o => o.length);\\n    ns.print(`Found ${contracts.length} contracts`);\\n    contracts.forEach((contract) => ns.print(contract));\\n}\\n\\nfunction solve(type, data, server, contract, ns) {\\n    let solution;\\n    switch (type) {\\n        case \\\"Algorithmic Stock Trader I\\\":\\n            solution = maxProfit([1, data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader II\\\":\\n            solution = maxProfit([Math.ceil(data.length / 2), data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader III\\\":\\n            solution = maxProfit([2, data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader IV\\\":\\n            solution = maxProfit(data);\\n            break;\\n        case \\\"Minimum Path Sum in a Triangle\\\":\\n            solution = solveTriangleSum(data, ns);\\n            break;\\n        case \\\"Unique Paths in a Grid I\\\":\\n            solution = uniquePathsI(data);\\n            break;\\n        case \\\"Unique Paths in a Grid II\\\":\\n            solution = uniquePathsII(data);\\n            break;\\n        case \\\"Generate IP Addresses\\\":\\n            solution = generateIps(data);\\n            break;\\n        case \\\"Find Largest Prime Factor\\\":\\n            solution = factor(data);\\n            break;\\n        case \\\"Spiralize Matrix\\\":\\n            solution = spiral(data);\\n            break;\\n        case \\\"Merge Overlapping Intervals\\\":\\n            solution = mergeOverlap(data);\\n            break;\\n        case \\\"Subarray with Maximum Sum\\\":\\n            solution = subArrayMaxSum(data);\\n            break;\\n        case \\\"Array Jumping Game\\\":\\n            solution = arrayJump(data);\\n            break;\\n        case \\\"Find All Valid Math Expressions\\\":\\n            solution = allExpressions(data);\\n            break;\\n        case \\\"Sanitize Parentheses in Expression\\\":\\n            solution = sanitizeParentheses(data);\\n            break;\\n        case \\\"Total Ways to Sum\\\":\\n            solution = totalWayToSum(data);\\n            break;\\n        case \\\"Total Ways to Sum II\\\":\\n            solution = solveWaysToSumII(data);\\n            break;\\n        case \\\"HammingCodes: Encoded Binary to Integer\\\":\\n            solution = hammingDecode(data);\\n            break;\\n        case \\\"HammingCodes: Integer to encoded Binary\\\":\\n            solution = hammingEncode(data);\\n            break;\\n        case \\\"Array Jumping Game II\\\":\\n            solution = arrayJumpingGameII(data);\\n            break;\\n        case \\\"Shortest Path in a Grid\\\":\\n            solution = shortestPathInAGrid(data);\\n            break;\\n        default:\\n            solution = null;\\n            ns.print(type + ' No solution implemented');\\n            break;\\n    }\\n    return (solution !== null) ? ns.codingcontract.attempt(solution, contract, server, { returnReward: true }) : null;\\n}\\n\\n//ALGORITHMIC STOCK TRADER\\n\\nfunction maxProfit(arrayData) {\\n    let i, j, k;\\n\\n    let maxTrades = arrayData[0];\\n    let stockPrices = arrayData[1];\\n\\n    // WHY?\\n    let tempStr = \\\"[0\\\";\\n    for (i = 0; i < stockPrices.length; i++) {\\n        tempStr += \\\",0\\\";\\n    }\\n    tempStr += \\\"]\\\";\\n    let tempArr = \\\"[\\\" + tempStr;\\n    for (i = 0; i < maxTrades - 1; i++) {\\n        tempArr += \\\",\\\" + tempStr;\\n    }\\n    tempArr += \\\"]\\\";\\n\\n    let highestProfit = JSON.parse(tempArr);\\n\\n    for (i = 0; i < maxTrades; i++) {\\n        for (j = 0; j < stockPrices.length; j++) { // Buy / Start\\n            for (k = j; k < stockPrices.length; k++) { // Sell / End\\n                if (i > 0 && j > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n                } else if (i > 0 && j > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n                } else if (i > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n                } else if (j > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n                } else {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], stockPrices[k] - stockPrices[j]);\\n                }\\n            }\\n        }\\n    }\\n    return highestProfit[maxTrades - 1][stockPrices.length - 1];\\n}\\n\\n//SMALLEST TRIANGLE SUM\\n\\nfunction solveTriangleSum(arrayData, ns) {\\n    let triangle = arrayData;\\n    let nextArray;\\n    let previousArray = triangle[0];\\n\\n    for (let i = 1; i < triangle.length; i++) {\\n        nextArray = [];\\n        for (let j = 0; j < triangle[i].length; j++) {\\n            if (j == 0) {\\n                nextArray.push(previousArray[j] + triangle[i][j]);\\n            } else if (j == triangle[i].length - 1) {\\n                nextArray.push(previousArray[j - 1] + triangle[i][j]);\\n            } else {\\n                nextArray.push(Math.min(previousArray[j], previousArray[j - 1]) + triangle[i][j]);\\n            }\\n\\n        }\\n\\n        previousArray = nextArray;\\n    }\\n\\n    return Math.min.apply(null, nextArray);\\n}\\n\\n//UNIQUE PATHS IN A GRID\\n\\nfunction uniquePathsI(grid) {\\n    const rightMoves = grid[0] - 1;\\n    const downMoves = grid[1] - 1;\\n\\n    return Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / (factorial(downMoves)));\\n}\\n\\nfunction factorial(n) {\\n    return factorialDivision(n, 1);\\n}\\n\\nfunction factorialDivision(n, d) {\\n    if (n == 0 || n == 1 || n == d)\\n        return 1;\\n    return factorialDivision(n - 1, d) * n;\\n}\\n\\nfunction uniquePathsII(grid, ignoreFirst = false, ignoreLast = false) {\\n    const rightMoves = grid[0].length - 1;\\n    const downMoves = grid.length - 1;\\n\\n    let totalPossiblePaths = Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / (factorial(downMoves)));\\n\\n    for (let i = 0; i < grid.length; i++) {\\n        for (let j = 0; j < grid[i].length; j++) {\\n\\n            if (grid[i][j] == 1 && (!ignoreFirst || (i != 0 || j != 0)) && (!ignoreLast || (i != grid.length - 1 || j != grid[i].length - 1))) {\\n                const newArray = [];\\n                for (let k = i; k < grid.length; k++) {\\n                    newArray.push(grid[k].slice(j, grid[i].length));\\n                }\\n\\n                let removedPaths = uniquePathsII(newArray, true, ignoreLast);\\n                removedPaths *= uniquePathsI([i + 1, j + 1]);\\n\\n                totalPossiblePaths -= removedPaths;\\n            }\\n        }\\n\\n    }\\n\\n    return totalPossiblePaths;\\n}\\n\\n//GENERATE IP ADDRESSES\\n\\nfunction generateIps(num) {\\n    num = num.toString();\\n\\n    const length = num.length;\\n\\n    const ips = [];\\n\\n    for (let i = 1; i < length - 2; i++) {\\n        for (let j = i + 1; j < length - 1; j++) {\\n            for (let k = j + 1; k < length; k++) {\\n                const ip = [\\n                    num.slice(0, i),\\n                    num.slice(i, j),\\n                    num.slice(j, k),\\n                    num.slice(k, num.length)\\n                ];\\n                let isValid = true;\\n\\n                ip.forEach(seg => {\\n                    isValid = isValid && isValidIpSegment(seg);\\n                });\\n\\n                if (isValid) ips.push(ip.join(\\\".\\\"));\\n\\n            }\\n\\n        }\\n    }\\n\\n    return ips;\\n\\n}\\n\\nfunction isValidIpSegment(segment) {\\n    if (segment[0] == \\\"0\\\" && segment != \\\"0\\\") return false;\\n    segment = Number(segment);\\n    if (segment < 0 || segment > 255) return false;\\n    return true;\\n}\\n\\n//GREATEST FACTOR\\n\\nfunction factor(num) {\\n    for (let div = 2; div <= Math.sqrt(num); div++) {\\n        if (num % div != 0) {\\n            continue;\\n        }\\n        num = num / div;\\n        div = 1;\\n    }\\n    return num;\\n}\\n\\n//SPIRALIZE Matrix\\n\\nfunction spiral(arr, accum = []) {\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(arr.shift());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(column(arr, arr[0].length - 1));\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(arr.pop().reverse());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(column(arr, 0).reverse());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    return spiral(arr, accum);\\n}\\n\\nfunction column(arr, index) {\\n    const res = [];\\n    for (let i = 0; i < arr.length; i++) {\\n        const elm = arr[i].splice(index, 1)[0];\\n        if (elm) {\\n            res.push(elm);\\n        }\\n    }\\n    return res;\\n}\\n\\n// Merge Overlapping Intervals\\n\\nfunction mergeOverlap(intervals) {\\n    intervals.sort(([minA], [minB]) => minA - minB);\\n    for (let i = 0; i < intervals.length; i++) {\\n        for (let j = i + 1; j < intervals.length; j++) {\\n            const [min, max] = intervals[i];\\n            const [laterMin, laterMax] = intervals[j];\\n            if (laterMin <= max) {\\n                const newMax = laterMax > max ? laterMax : max;\\n                const newInterval = [min, newMax];\\n                intervals[i] = newInterval;\\n                intervals.splice(j, 1);\\n                j = i;\\n            }\\n        }\\n    }\\n    return intervals;\\n}\\n\\n// Subarray with Maximum Sum\\n\\nfunction subArrays(arr, start, end, acc) {\\n    // Stop if we have reached the end of the array    \\n    if (end === arr.length)\\n        return acc;\\n    // Increment the end point and start from 0\\n    else if (start > end)\\n        subArrays(arr, 0, end + 1, acc);\\n    // create the subarray\\n    else {\\n        let subArr = [];\\n        for (let i = start; i < end; i++) {\\n            subArr.push(arr[i]);\\n        }\\n        subArr.push(arr[end]);\\n        acc.push(subArr);\\n\\n        subArrays(arr, start + 1, end, acc);\\n    }\\n    return acc;\\n}\\n\\nfunction subArrayMaxSum(arr) {\\n    arr = arr || [-6, 4, 1, 8, 10, -6];\\n    const arrays = subArrays(arr, 0, 0, []);\\n    const sums = arrays.map(o => o.reduce((a, b) => a + b, 0));\\n    return Math.max(...sums);\\n}\\n\\nfunction arrayJump(arr) {\\n    let n = arr.length;\\n    let jumps = Array.from({ length: n }, (_, i) => 0);\\n    let min;\\n    jumps[n - 1] = 0;\\n    for (let i = n - 2; i >= 0; i--) {\\n        if (arr[i] == 0)\\n            jumps[i] = Number.MAX_VALUE;\\n        else if (arr[i] >= n - i - 1)\\n            jumps[i] = 1;\\n        else {\\n            min = Number.MAX_VALUE;\\n            for (let j = i + 1; j < n && j <= arr[i] + i; j++) {\\n                if (min > jumps[j])\\n                    min = jumps[j];\\n            }\\n            if (min != Number.MAX_VALUE)\\n                jumps[i] = min + 1;\\n            else\\n                jumps[i] = min;\\n        }\\n    }\\n    return jumps[0] < Number.MAX_VALUE ? 1 : 0;\\n}\\n\\n// works for simple answers locks up a browser for large ones\\nfunction allExpressions(data) {\\n    const digits = data[0].split('')\\n    const operators = ['+', '-', '*', '']\\n    let expressions = [digits[0], '-' + digits[0]]\\n        .flatMap(d => operators.map(op => d + op))\\n    for (let i = 1; i < digits.length - 1; i++) {\\n        expressions = expressions\\n            .flatMap(e => operators.map(op => e + digits[i] + op))\\n    }\\n    return expressions.map(e => e + digits[digits.length - 1])\\n        .filter(e => {\\n            try { return eval(e) === data[1] }\\n            catch (e) { return false }\\n        })\\n}\\n\\n// Sanitize Parentheses in Expression\\n\\nfunction sanitizeParentheses(data) {\\n    const solution = Sanitize(data);\\n    if (solution == null) { return ('[\\\"\\\"]') }\\n    else { return (\\\"[\\\" + solution.join(\\\",\\\") + \\\"]\\\") }\\n}\\n\\nfunction Sanitize_removeOneParth(item) {\\n    const possibleAnswers = [];\\n    for (let i = 0; i < item.length; i++) {\\n        if (item[i].toLowerCase().indexOf(\\\"(\\\") === -1 && item[i].toLowerCase().indexOf(\\\")\\\") === -1) {\\n            continue\\n        }\\n        let possible = item.substring(0, i) + item.substring(i + 1);\\n        possibleAnswers.push(possible)\\n    }\\n    return possibleAnswers\\n}\\n\\nfunction Sanitize_isValid(item) {\\n    let unclosed = 0;\\n    for (let i = 0; i < item.length; i++) {\\n        if (item[i] == \\\"(\\\") { unclosed++ }\\n        else if (item[i] == \\\")\\\") { unclosed-- }\\n        if (unclosed < 0) { return false }\\n    }\\n    return unclosed == 0\\n}\\n\\nfunction Sanitize(data) {\\n    let currentPossible = [data];\\n    for (let i = 0; i < currentPossible.length; i++) {\\n        let newPossible = new Set();\\n        for (var j = 0; j < currentPossible.length; j++) {\\n            let newRemovedPossible = Sanitize_removeOneParth(currentPossible[j])\\n\\n            for (let item of newRemovedPossible) {\\n                newPossible.add(item)\\n            }\\n        }\\n\\n        const validBoolList = [];\\n\\n        for (let item of newPossible) {\\n            validBoolList.push(Sanitize_isValid(item))\\n        }\\n        if (validBoolList.includes(true)) {\\n            let finalList = [];\\n            newPossible = [...newPossible]\\n\\n            for (var j = 0; j < validBoolList.length; j++) {\\n                if (validBoolList[j]) {\\n                    finalList.push(newPossible[j])\\n                }\\n            }\\n\\n            finalList = new Set(finalList)\\n\\n            return [...finalList]\\n        }\\n        currentPossible = [...newPossible]\\n    }\\n\\n    return null\\n}\\n\\nfunction totalWayToSum(data) {\\n    let cache = {};\\n    let n = data;\\n    return twts(n, n, cache) - 1;\\n}\\n\\nfunction twts(limit, n, cache) {\\n    if (n < 1) { return 1; }\\n    if (limit == 1) { return 1; }\\n    if (n < limit) { return twts(n, n, cache); }\\n\\n    if (n in cache) {\\n        let c = cache[n];\\n        if (limit in c) { return c[limit]; }\\n    }\\n\\n    let s = 0;\\n    for (let i = 1; i <= limit; i++) {\\n        s += twts(i, n - i, cache);\\n    }\\n\\n    if (!(n in cache)) { cache[n] = {}; }\\n    cache[n][limit] = s; return s;\\n}\\n\\n/**\\n *\\n * @param {number[][]} input [targetNumber,[available numbers]]\\n * @returns\\n */\\nasync function solveWaysToSumII(input) {\\n    /**\\n     *\\n     * @param {number} target\\n     * @param {number[]} nums\\n     * @returns\\n     */\\n    let n = input[0];\\n    let nums = input[1];\\n    let table = new Array(n + 1);\\n    for (let i = 0; i < n + 1; i++) {\\n        table[i] = 0;\\n    }\\n    table[0] = 1;\\n\\n    for (let i of nums) {\\n        if (i >= n) {\\n            continue;\\n        }\\n        for (let j = i; j <= n; j++) {\\n            table[j] += table[j - i];\\n        }\\n        // console.log(table);\\n    }\\n    return table[n];\\n}\\n\\nfunction hammingEncode(data) {\\n    let N = Math.floor(Math.log2(data));\\n    let vec = Array.from({ length: N + 1 }, (_, i) => Math.floor(data / 2 ** (N - i)) % 2);\\n\\n    let masks = [\\n        /*012345678901234567890123456789012345678901234567890123456*/\\n        \\\"111111111111111111111111111111111111111111111111111111111\\\",\\n        \\\"110110101011010101010101011010101010101010101010101010101\\\",\\n        \\\"101101100110110011001100110110011001100110011001100110011\\\",\\n        \\\"011100011110001111000011110001111000011110000111100001111\\\",\\n        \\\"000011111110000000111111110000000111111110000000011111111\\\",\\n        \\\"000000000001111111111111110000000000000001111111111111111\\\",\\n        \\\"000000000000000000000000001111111111111111111111111111111\\\"\\n    ].map(x => x.split(\\\"\\\").map(y => Number(y)));\\n\\n    function hadamard(x, y) {\\n        return Array.from({ length: Math.min(x.length, y.length) }, (_, i) => x[i] * y[i]);\\n    }\\n    let parities = masks.map(mask => hadamard(mask, vec).reduce((a, n) => a + n) % 2);\\n\\n    for (let i = 1; i < parities.length; ++i) { parities[0] += parities[i]; }\\n    parities[0] %= 2;\\n\\n    /*01234567890123456789012345678901234567890123456789012345678901234*/\\n    let p_bit = \\\"11101000100000001000000000000000100000000000000000000000000000001\\\";\\n\\n    let output = [];\\n    for (let i = 0, p = 0, d = 0; d < vec.length; ++i) {\\n        if (p_bit[i] === \\\"1\\\") {\\n            output.push(parities[p++]);\\n        } else {\\n            output.push(vec[d++]);\\n        }\\n    }\\n\\n    return output.join(\\\"\\\");\\n}\\n\\n\\nfunction arrayJumpingGameII(arrayData) {\\n    let n = arrayData.length;\\n    let reach = 0;\\n    let jumps = 0;\\n    let lastJump = -1;\\n    while (reach < n - 1) {\\n        let jumpedFrom = -1;\\n        for (let i = reach; i > lastJump; i--) {\\n            if (i + arrayData[i] > reach) {\\n                reach = i + arrayData[i];\\n                jumpedFrom = i;\\n            }\\n        }\\n        if (jumpedFrom === -1) {\\n            jumps = 0;\\n            break;\\n        }\\n        lastJump = jumpedFrom;\\n        jumps++;\\n    }\\n    return jumps\\n}\\n\\n\\nfunction shortestPathInAGrid(data) {\\n    let H = data.length, W = data[0].length;\\n    let dist = Array.from(Array(H), () => Array(W).fill(Number.POSITIVE_INFINITY));\\n    dist[0][0] = 0;\\n\\n    let queue = [[0, 0]];\\n    while (queue.length > 0) {\\n        let [i, j] = queue.shift();\\n        let d = dist[i][j];\\n\\n        if (i > 0     && d + 1 < dist[i - 1][j] && data[i - 1][j] !== 1)\\n        { dist[i - 1][j] = d + 1; queue.push([i - 1, j]); }\\n        if (i < H - 1 && d + 1 < dist[i + 1][j] && data[i + 1][j] !== 1)\\n        { dist[i + 1][j] = d + 1; queue.push([i + 1, j]); }\\n        if (j > 0     && d + 1 < dist[i][j - 1] && data[i][j - 1] !== 1)\\n        { dist[i][j - 1] = d + 1; queue.push([i, j - 1]); }\\n        if (j < W - 1 && d + 1 < dist[i][j + 1] && data[i][j + 1] !== 1)\\n        { dist[i][j + 1] = d + 1; queue.push([i, j + 1]); }\\n    }\\n\\n    let path = \\\"\\\";\\n    if (Number.isFinite(dist[H - 1][W - 1])) {\\n        let i = H - 1, j = W - 1;\\n        while (i !== 0 || j !== 0) {\\n            let d = dist[i][j];\\n\\n            let new_i = 0, new_j = 0, dir = \\\"\\\";\\n            if (i > 0     && dist[i - 1][j] < d)\\n            { d = dist[i - 1][j]; new_i = i - 1; new_j = j; dir = \\\"D\\\"; }\\n            if (i < H - 1 && dist[i + 1][j] < d)\\n            { d = dist[i + 1][j]; new_i = i + 1; new_j = j; dir = \\\"U\\\"; }\\n            if (j > 0     && dist[i][j - 1] < d)\\n            { d = dist[i][j - 1]; new_i = i; new_j = j - 1; dir = \\\"R\\\"; }\\n            if (j < W - 1 && dist[i][j + 1] < d)\\n            { d = dist[i][j + 1]; new_i = i; new_j = j + 1; dir = \\\"L\\\"; }\\n\\n            i = new_i; j = new_j;\\n            path = dir + path;\\n        }\\n    }\\n\\n    return path;\\n}\\n\\nfunction hammingDecode(_data) {\\n    let _build = _data.split(\\\"\\\"); // ye, an array again\\n    let _testArray = []; //for the \\\"tests\\\". if any is false, it is been altered data, will check and fix it later\\n    let _sum_parity = Math.ceil(Math.log2(_data.length)); // excluding first bit\\n    let count = (arr, val) => arr.reduce((a, v) => (v === val ? a + 1 : a), 0); // count.... again ;)\\n    let _overallParity = _build.splice(0, 1).join(\\\"\\\"); // remove first index, for checking and to use the _build properly later\\n    _testArray.push((_overallParity === (count(_build, \\\"1\\\") % 2).toString())); // checking the \\\"overall\\\" parity\\n    for (var i = 0; i < _sum_parity; i++) {\\n        let _tempIndex = Math.pow(2, i) - 1 // get the parityBits Index\\n        let _tempStep = _tempIndex + 1 // set the stepsize\\n        let _tempData = [..._build] // \\\"copy\\\" the build-data\\n        let _tempArray = [] // init empty array for \\\"testing\\\"\\n        while (_tempData[_tempIndex] !== undefined) { // extract from the copied data until the \\\"starting\\\" index is undefined\\n            var _temp = [..._tempData.splice(_tempIndex, _tempStep * 2)] // extract 2*stepsize\\n            _tempArray.push(..._temp.splice(0, _tempStep)) // and cut again for keeping first half\\n        }\\n        let _tempParity = _tempArray.shift() // and cut the first index for checking with the rest of the data\\n        _testArray.push(((_tempParity === (count(_tempArray, \\\"1\\\") % 2).toString()))) // is the _tempParity the calculated data?\\n    }\\n    let _fixIndex = 0; // init the \\\"fixing\\\" index amd start with -1, bc we already removed the first bit\\n    for (let i = 1; i < _sum_parity + 1; i++) {\\n        _fixIndex += (_testArray[i]) ? 0 : (Math.pow(2, i) / 2)\\n    }\\n    _build.unshift(_overallParity)\\n    // fix the actual hammingcode if there is an error\\n    if (_fixIndex > 0 && _testArray[0] === false) { // if the overall is false and the sum of calculated values is greater equal 0, fix the corresponding hamming-bit\\n        _build[_fixIndex] = (_build[_fixIndex] === \\\"0\\\") ? \\\"1\\\" : \\\"0\\\"\\n    }\\n    else if (_testArray[0] === false) { // otherwise, if the the overall_parity is only wrong, fix that one\\n        _overallParity = (_overallParity === \\\"0\\\") ? \\\"1\\\" : \\\"0\\\"\\n    }\\n    else if (_testArray[0] === true && _testArray.some((truth) => truth === false)) {\\n        return 0 // uhm, there's some strange going on... 2 bits are altered? How?\\n    }\\n    // oof.. halfway through... we fixed the altered bit, now \\\"extract\\\" the parity from the build and parse the binary data\\n    for (let i = _sum_parity; i >= 0; i--) { // start from the last parity down the starting one\\n        _build.splice(Math.pow(2, i), 1)\\n    }\\n    _build.splice(0, 1)\\n    return parseInt(_build.join(\\\"\\\"), 2)\\n}\",\"filename\":\"autosolver.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/4baf006b-e1fc-4f46-80a7-ec6cc432263d\",\"moduleSequenceNumber\":1500434},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/88ac0eec-167e-410e-aaf4-0db41a3d9707\",\"moduleSequenceNumber\":1500417},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/84c64a08-3ef1-4303-94ad-b67e341d7ac3\",\"moduleSequenceNumber\":1500418},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/6d7b681f-3813-466f-b39e-a7319d8cad20\",\"moduleSequenceNumber\":1500417},{\"filename\":\"autosolver.js\",\"url\":\"blob:https://danielyxie.github.io/531e509a-6147-4310-bfc0-ad7f44a8fa3d\",\"moduleSequenceNumber\":1503395}],\"dependents\":[],\"ramUsage\":22.5,\"server\":\"home\",\"moduleSequenceNumber\":273,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as asciichart from 'asciichart.js';\\nimport { ramUsage } from 'utils.js'\\n//store here to be a bit more persisten to script restarts\\nconst series = { 'ramUsage': new Array(53).fill(0) };\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const flags = ns.flags([\\n        ['refreshrate', 5000],\\n        ['help', false],\\n    ])\\n    if (flags.help) {\\n        ns.tprint(\\\"This script plots a chart of ram use\\\");\\n        ns.tprint(`USAGE: run ${ns.getScriptName()}`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\n        return;\\n    }\\n    ns.tail();\\n    ns.disableLog('ALL');\\n    const padding = '    ';\\n    const config = {\\n        offset: 2,    // axis offset from the left (min 2)\\n        padding, // padding string for label formatting (can be overridden)\\n        height: 10,   // any height you want\\n        max: 1.0,\\n        min: 0.0,\\n        // the label format function applies default padding\\n        format: function (x, i) { return (padding + ns.nFormat(x, '0%')).slice(-padding.length) }\\n    };\\n    ns.print(JSON.stringify(Object.values(series), null, 2));\\n    while (true) {\\n        ns.clearLog();\\n        ns.print(`Interval ${ns.tFormat(flags.refreshrate)}`);\\n        const target = 'ramUsage';\\n        series[target].push(ramUsage(ns));\\n        series[target].shift();\\n        ns.print(target);\\n        ns.print(`${asciichart.plot(series[target], config)}`);\\n        await ns.sleep(flags.refreshrate);\\n    }\\n}\",\"filename\":\"chart_ram.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/83fa09fe-32bd-4d59-8717-ac94540e4c08\",\"moduleSequenceNumber\":284738},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/826c67e6-7819-4ab8-8249-f79d6f3a27d5\",\"moduleSequenceNumber\":336741},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/f117f58d-43a7-46f3-9777-dab0feada846\",\"moduleSequenceNumber\":393316},{\"filename\":\"asciichart.js\",\"url\":\"blob:https://danielyxie.github.io/254076b6-d233-4a9c-9b8d-42cd2ae58775\",\"moduleSequenceNumber\":284731},{\"filename\":\"chart_ram.js\",\"url\":\"blob:https://danielyxie.github.io/92a5a2a2-a9c2-4f97-9d21-7b291d9d1707\",\"moduleSequenceNumber\":547735}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"home\",\"moduleSequenceNumber\":274,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { boxTailSingleton } from \\\"utils.js\\\"\\nlet ns;\\n\\nlet gang = {};\\nlet members = [];\\nlet tasks = [];\\nlet maxOtherGangPower;\\nlet chanceVsOtherGang;\\nlet warTracker;\\nlet isEarlyGang = true;\\nlet needMoreMembers = true;\\nconst memberNames = [\\n  'Teal', 'Fawn', 'TFT',\\n  'Turduck\\\\'n', 'Fender', 'Just Moe',\\n  'Mixer', 'Hip', 'Brownstone',\\n  'Sal', 'Right Hand', 'Left Shark'\\n];\\nconst combatAugmentPriorityOrder = ['Bionic Arms', 'Nanofiber Weave', 'Bionic Spine', 'Synfibril Muscle', 'BrachiBlades', 'Synthetic Heart', 'Graphene Bone Lacings'];\\nconst gangumStatus = {};\\n/** @param {NS} pns **/\\nexport async function main(pns) {\\n  ns = pns;\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('gang.purchaseEquipment');\\n  ns.disableLog('gang.setMemberTask');\\n  ns.disableLog('sleep');\\n  ns.disableLog('gang.setTerritoryWarfare');\\n  ns.disableLog('gang.canRecruitMember');\\n  if (!ns.fileExists('/tmp/ingang.txt')) {\\n    ns.print('not in gang');\\n    return;\\n  }\\n  boxTailSingleton(ns, 'gangum', '\\\\u270A', '220px');\\n  ns.clearLog();\\n\\n  warTracker = {\\n    prevPower: -1,\\n    lastPowerChange: Date.now(),\\n    nextTick: -1\\n  };\\n  const moneyTask = (g, m, t) => isEarlyGang && m.str < 10000 ? ns.formulas.gang.moneyGain(g, m, t) : (t.name === 'Traffick Illegal Arms' ? 1 : 0);\\n  const respectTask = ns.formulas.gang.respectGain;\\n  const wantedTask = (g, m, t) => -1 * ns.formulas.gang.wantedLevelGain(g, m, t);\\n  const warTask = (g, m, t) => t.name === 'Territory Warfare' ? 100 : 0;\\n  isEarlyGang = true;\\n  while (true) {\\n    gang = ns.gang.getGangInformation();\\n    const og = ns.gang.getOtherGangInformation();\\n    // seem like there are rounding errors on territory percent so always consider max of all gangs power\\n    // maxOtherGangPower = Math.max(...Object.entries(og).map(([k, s]) => (k === gang.faction ? 0 : (s.territory <= 0 ? 0 : s.power))));\\n    maxOtherGangPower = Math.max(...Object.entries(og).map(([k, s]) => (k === gang.faction ? 0 : s.power)));\\n    const chanceVsOtherGangs = Object.entries(ns.gang.getOtherGangInformation())\\n      .filter(([k, s]) => k !== gang.faction && s.territory > 0)\\n      .map(([k, s]) => ns.gang.getChanceToWinClash(k));\\n    chanceVsOtherGang = chanceVsOtherGangs.reduce((a, b) => a + b, 0) / chanceVsOtherGangs.length\\n    isEarlyGang = gang.respect < 3.2e6\\n    needMoreMembers = gang.respect < 3125; // 15625;//1.6e6;\\n    const curMembers = ns.gang.getMemberNames();\\n    const newMemberNames = memberNames.filter(o => !curMembers.includes(o));\\n    if (ns.gang.canRecruitMember() && ns.gang.recruitMember(newMemberNames[0])) {\\n      ns.toast('Recruited', 'info', 10000);\\n    }\\n\\n    getMembersStats();\\n    getTasksStats();\\n    await equip();\\n    ascend();\\n    war();\\n    let [makeWar, makeWarMsg] = isWartime();\\n    gangumStatus['isWartime'.padEnd(10)] = `${makeWar} ${(gang.territory * 100).toFixed(3)}%`\\n    gangumStatus.makeWarMsg = makeWarMsg || gangumStatus.makeWarMsg;\\n    if (makeWar) {\\n      setTasks(warTask);\\n    } else if (needMoreMembers) {\\n      setTasks(respectTask);\\n    } else {\\n      setTasks(moneyTask);\\n    }\\n\\n    ns.clearLog();\\n    for (let [k, v] of Object.entries(gangumStatus)) {\\n      ns.print(`${k}: ${v}`);\\n    }\\n    await ns.sleep(100);\\n  }\\n}\\n\\nfunction isWartime() {\\n  // no need for war any more\\n  if (gang.territory === 1) {\\n    warTracker.nextTick = Date.now();\\n    return [false, 'Territory maxed No more war'];\\n  }\\n  // too powerful don't get more power\\n  if (maxOtherGangPower * 1.5 < gang.power) {\\n    warTracker.nextTick = Date.now();\\n    return [false, 'Power higher enough no more warfare'];\\n  }\\n  if (warTracker.prevPower === -1) {\\n    warTracker.prevPower = gang.power;\\n  }\\n  let warningMsg = '';\\n  const isBonusTime = ns.gang.getBonusTime() >= 10;\\n  if (warTracker.prevPower !== gang.power) {\\n    warTracker.prevPower = gang.power;\\n    warTracker.lastPowerChange = Date.now();\\n    warTracker.nextTick = warTracker.lastPowerChange + (isBonusTime ? 1.6 : 20) * 1000;\\n    const hour = `${new Date().getHours()}`\\n    const min = `${new Date().getMinutes()}`;\\n    const sec = `${new Date().getSeconds()}`;\\n    warningMsg += `PowerTick ${hour}:${min.padStart(2, '0')}:${sec.padStart(2, '0')} clash ${(chanceVsOtherGang * 100).toPrecision(2)}%`;\\n  }\\n  if (warTracker.nextTick === -1) {\\n    return [false, `waiting for tick`];\\n  }\\n  if (warTracker.prevPower === gang.power) {\\n    if (warTracker.nextTick > Date.now()) {\\n      // waiting for next tick\\n    } else {\\n      // tick was early\\n      warningMsg += `war tick was early by ${Date.now() - warTracker.nextTick}`;\\n      warTracker.nextTick = -1;\\n    }\\n  }\\n  let timeTillTick = warTracker.nextTick - Date.now();\\n  // if before war tick and until just past the tick. Power tick will update nextTick to stop war time\\n  if (-2000 < timeTillTick && timeTillTick < 300) {\\n    //WarTime!\\n    warningMsg += `Wartime remaining ${timeTillTick}`;\\n    return [true, warningMsg];\\n  } else {\\n    return [false, warningMsg];\\n  }\\n}\\n\\nfunction war() {\\n  // if gang power is at max try to continue war for more territory\\n  const enableWar = (chanceVsOtherGang > .6) || (maxOtherGangPower * 1.5 <= gang.power);\\n  if (gang.territoryWarfareEngaged !== enableWar) {\\n    // ns.print(`Changing warfare to ${enableWar}`);\\n    ns.toast(`Changing warfare to ${enableWar}`, enableWar ? 'warning' : 'info', 30000);\\n  }\\n  // ns.print(`maxOtherGangPower ${maxOtherGangPower} strongerGangs ${strongerGangs} gang.power ${gang.power} gang.territoryWarfareEngaged ${gang.territoryWarfareEngaged}`)\\n  ns.gang.setTerritoryWarfare(enableWar);\\n}\\n\\nasync function equip() {\\n  const nameStatsMap = {};\\n  let equipmentNames = ns.gang.getEquipmentNames();\\n  for (const equipName of equipmentNames) {\\n    nameStatsMap[equipName] = ns.gang.getEquipmentStats(equipName);\\n  }\\n  const combatGear = Object.entries(nameStatsMap).filter(([e, stats]) => stats.str || stats.def || stats.cha);\\n  for (const [equipName] of combatGear) {\\n    for (const member of members) {\\n      const augsAndUpgrades = [];\\n      augsAndUpgrades.push(...member.augmentations);\\n      augsAndUpgrades.push(...member.upgrades);\\n      if (augsAndUpgrades.includes(equipName)) {\\n        continue;\\n      }\\n      if (ns.gang.purchaseEquipment(member.name, equipName)) {\\n        // ns.print(`Purchased ${equipName} for ${member.name}`);\\n        gangumStatus[member.name.padEnd(10)] += ' ' + equipName;\\n        if (combatAugmentPriorityOrder.includes(equipName)) {\\n          ns.toast(`Purchased ${equipName} for ${member.name}`, 'success', 10000);\\n        }\\n        // restrict soft reset loop to do so only for the augs\\n        // } else if (combatAugmentPriorityOrder.includes(equipName)) {\\n      } else if (!augsAndUpgrades.includes(equipName)) {\\n        if (ns.getServerMoneyAvailable('home') < ns.gang.getEquipmentCost(equipName) && ns.gang.getEquipmentCost(equipName) < 10e9) {\\n          ns.print(`Resetting to buy ${equipName} for ${member.name}`);\\n          ns.exec('aug_buyer.js', 'home');\\n          await ns.sleep(10000);\\n        }\\n      }\\n    }\\n  }\\n}\\n\\nfunction ascend() {\\n  for (const member of members) {\\n    const res = ns.gang.getAscensionResult(member.name);\\n    if (!res) continue;\\n    let str_mult = 1.6;\\n    if (!isEarlyGang) {\\n      str_mult = 1.1;\\n    }\\n    if (res.str > str_mult) {\\n      ns.gang.ascendMember(member.name);\\n      const msg = `Ascended ${member.name} asc_multi ${member.str_asc_mult.toPrecision(4)}, res_multi ${res.str.toPrecision(4)}`\\n      ns.toast(msg, 'info', 30000);\\n    }\\n  }\\n}\\n\\nfunction getMembersStats() {\\n  members = [];\\n  const names = ns.gang.getMemberNames();\\n  for (const name of names) {\\n    members.push(ns.gang.getMemberInformation(name));\\n  }\\n}\\n\\nfunction getTasksStats() {\\n  tasks = [];\\n  const names = ns.gang.getTaskNames();\\n  for (const name of names) {\\n    tasks.push(ns.gang.getTaskStats(name));\\n  }\\n}\\n\\nlet vigilantesNeeded = 0;\\n\\nfunction setTasks(taskFunc) {\\n  let vigilante = 0;\\n  if (ns.formulas.gang.wantedPenalty(gang) < 0.99 && gang.wantedLevel > 2) {\\n    vigilantesNeeded = (vigilantesNeeded * 1.5) || .15;\\n    vigilante = Math.floor(members.length * vigilantesNeeded);\\n    vigilantesNeeded = vigilante >= members.length ? members.length : vigilantesNeeded;\\n  } else {\\n    vigilantesNeeded = 0;\\n  }\\n  let i = 0;\\n  for (const member of members) {\\n    i++;\\n    let prevTask = member.task;\\n    let bestTask = '';\\n    let mg = 0;\\n    for (const task of tasks) {\\n      let nmg = taskFunc(gang, member, task);\\n      if (nmg > mg) {\\n        bestTask = task.name;\\n        mg = nmg;\\n      }\\n    }\\n    // if nothing or unassigned train\\n    if (bestTask === '' || bestTask === 'Unassigned') {\\n      bestTask = gang.isHacking ? 'Train Hacking' : 'Train Combat';\\n    }\\n    if (bestTask !== 'Territory Warfare' && vigilantesNeeded !== 0 && members.length - i < vigilante) {\\n      bestTask = 'Vigilante Justice';\\n    }\\n    // if waiting for a power tick\\n    if (warTracker.nextTick === -1) {\\n      bestTask = 'Territory Warfare';\\n    }\\n    if (ns.gang.setMemberTask(member.name, bestTask) && prevTask !== bestTask) {\\n      gangumStatus[member.name.padEnd(10)] = bestTask;\\n    }\\n  }\\n}\",\"filename\":\"gangum.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/d418a940-d830-4e97-bfb4-c1e6a013065c\",\"moduleSequenceNumber\":276},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/60a9b6b0-44b8-41a7-b16b-ed4e66975c29\",\"moduleSequenceNumber\":259},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/3cef57f7-081c-4bd1-875f-27a3947baff8\",\"moduleSequenceNumber\":260},{\"filename\":\"gangum.js\",\"url\":\"blob:https://danielyxie.github.io/221343a6-7b2a-4ca6-a0c7-beb27b7907ee\",\"moduleSequenceNumber\":517}],\"dependents\":[],\"ramUsage\":38.6,\"server\":\"home\",\"moduleSequenceNumber\":517,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getOtherGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getChanceToWinClash\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.canRecruitMember\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.recruitMember\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.setTerritoryWarfare\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentStats\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"gang.getAscensionResult\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getTaskNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getTaskStats\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let css=`body{--prilt:#fd0;--pri:#fd0;--pridk:#fd0;--successlt:#ce5;--success:#ce5;--successdk:#ce5;--errlt:#c04;--err:#c04;--errdk:#c04;--seclt:#28c;--sec:#28c;--secdk:#28c;--warnlt:#f70;--warn:#f70;--warndk:#f70;--infolt:#3ef;--info:#3ef;--infodk:#3ef;--welllt:#146;--well:#222;--white:#fff;--black:#000;--hp:#c04;--money:#fc7;--hack:#ce5;--combat:#f70;--cha:#b8f;--int:#3ef;--rep:#b8f;--disabled:#888;--bgpri:#000;--bgsec:#111;--button:#146;--ff:\\\"Lucida Console\\\";overflow:hidden;display:flex}#root{flex:1 1 calc(100vw - 248px);overflow:scroll}.sb{font:12px var(--ff);color:var(--pri);background:var(--bgsec);overflow:hidden scroll;width:500px;min-height:100%;border-left:1px solid var(--welllt)}.sb *{vertical-align:middle;margin:0;font:inherit}.sb.c{width:45px}.sb.t, .sb.t>div{transition:height 200ms, width 200ms, color 200ms}.sbitem,.box{overflow:hidden;min-height:28px}.sbitem{border-top:1px solid var(--welllt);resize:vertical;width:unset !important}.sbitem.c{color:var(--sec)}.box{position:fixed;width:min-content;min-width:min-content;resize:both;background:var(--bgsec)}.box.c{height:unset !important;width:unset !important;background:none}.head{font-size:14px;display:flex;white-space:pre;font-weight:bold;user-select:none}:is(.sb,.sbitem)>.head{direction:rtl;cursor:pointer;padding:3px 0px}.box>.head{background:var(--pri);color:var(--bgpri);padding:3px;cursor:move}.body{font-size:12px;flex-direction:column;height:calc(100% - 30px)}.flex,:not(.noflex)>.body{display:flex}.flex>*,.body>*{flex:1 1 auto}.box>.body{border:1px solid var(--welllt)}.sb .title{margin:0 auto}.sbitem .close{display:none}.c:not(.sb),.c>.sbitem{height:28px !important;resize:none}.box.c>.body{display:none}.box.prompt{box-shadow:0 0 0 10000px #0007;min-width:400px}.box.prompt>.head>.icon{display:none}.sb .contextMenu{opacity:0.95;resize:none;background:var(--bgpri)}.sb .contextMenu .head{display:none}.sb .contextMenu .body{height:unset;border-radius:5px}.sb .icon{cursor:pointer;font:25px \\\"codicon\\\";line-height:0.9}:is(.sb,.sbitem)>.head>.icon{padding:0px 10px}.c>.head>.collapser{transform:rotate(180deg)}.sb :is(input,select,button,textarea){color:var(--pri);outline:none;border:none;white-space:pre}.sb :is(textarea,.log){white-space:pre-wrap;background:none;padding:0px;overflow-y:scroll}.sb :is(input,select){padding:3px;background:var(--well);border-bottom:1px solid var(--prilt);transition:border-bottom 250ms}.sb input:hover{border-bottom:1px solid var(--black)}.sb input:focus{border-bottom:1px solid var(--prilt)}.sb :is(button,input[type=checkbox]){background:var(--button);transition:background 250ms;border:1px solid var(--well)}.sb :is(button,input[type=checkbox]):hover{background:var(--bgsec)}.sb :is(button,input[type=checkbox]):focus, .sb select{border:1px solid var(--sec)}.sb button{padding:3px 6px;user-select:none}.sb .ts{color:var(--infolt)}.sb input[type=checkbox]{appearance:none;display:inline-flex;align-items:center;justify-content:center;width:22px;height:22px}.sb input[type=checkbox]:checked::after{font:22px codicon;content:\\\"\\\"}.g2{display:grid;grid:auto-flow auto / auto auto;gap:6px;margin:5px;place-items:center}.g2>.l{justify-self:start}.g2>.r{justify-self:end}.g2>.f{grid-column:1 / span 2;text-align:center}.hidden, .tooltip{display:none}*:hover>.tooltip{display:block;position:absolute;left:-5px;bottom:calc(100% + 5px);border:1px solid var(--welllt);background:var(--bgsec);color:var(--pri);font:14px var(--ff);padding:5px;white-space:pre}.nogrow{flex:0 1 auto !important}`;\\nexport let win=globalThis, doc=win[\\\"document\\\"], sidebar=doc.querySelector(\\\".sb\\\"),\\n  ts=()=>`[<span class=ts>${new Date().toLocaleTimeString(\\\"en-gb\\\")}</span>]`,\\n  slp=ms=>new Promise(r=>setTimeout(r,ms)),\\n  elemFromHTML=html=>new Range().createContextualFragment(html).firstElementChild;\\nif (!sidebar){\\n  sidebar=doc.body.appendChild(elemFromHTML(`<div class=\\\"sb\\\"><style>${css}</style><div class=\\\"head\\\"><a class=\\\"icon collapser\\\">\\\\ueab6</a><span class=title>box.sidebar v1.0</span></div>`));\\n  sidebar.addEventListener('keydown',e=>e.stopPropagation());\\n  sidebar.querySelector('.head').addEventListener('click',()=>{\\n    transition(()=>sidebar.classList.toggle('c'));\\n    setTimeout(()=>doc.querySelector(\\\".monaco-editor\\\")&&Object.assign(doc.querySelector(\\\".monaco-editor\\\").style,{width:\\\"0px\\\"}),255);\\n  });\\n  win._boxEdgeDetect=()=>doc.querySelectorAll('.sb .box').forEach(box=>Object.assign(box.style,{left:Math.max(Math.min(win.innerWidth-box.offsetWidth,box.offsetLeft),0)+\\\"px\\\",top:Math.max(Math.min(win.innerHeight-box.offsetHeight,box.offsetTop),0)+\\\"px\\\"}));\\n  win.addEventListener(\\\"resize\\\",win._boxEdgeDetect);\\n}\\nlet createItem=(title, content, icon, ...classes)=>{\\n  let item=sidebar.appendChild(elemFromHTML(`<div class=\\\"${classes.join(\\\" \\\")}\\\"><div class=\\\"head\\\"><a class=\\\"icon\\\">${icon}</a><span class=title>${title}</span><a class=\\\"icon collapser\\\">\\\\ueab7</a><a class=\\\"icon close\\\">\\\\ueab8</a></div><div class=\\\"body\\\">${content}</div></div>`));\\n  Object.assign(item,{\\n    head:item.querySelector(\\\".head\\\"),\\n    body:item.querySelector(\\\".body\\\"),\\n    toggleType:()=>[\\\"box\\\",\\\"sbitem\\\"].forEach(cl=>item.classList.toggle(cl)),\\n    logTarget:item.querySelector(\\\".log\\\"),\\n    log:(html, timestamp=true)=>{\\n      if (!item.logTarget) item.logTarget=item.body.appendChild(elemFromHTML(\\\"<div class=log></div>\\\"));\\n      let logEntry=item.logTarget.appendChild(elemFromHTML(`<p>${timestamp?ts():\\\"\\\"} ${html}</p>`));\\n      item.logTarget.scrollTop=item.logTarget.scrollHeight;\\n      return logEntry;\\n    },\\n    contextItems:{},\\n    addContextItem:(name,fn,cFn=()=>1)=>item.contextItems[name]={fn:fn,cFn:cFn},\\n  });\\n\\n  [[\\\"Remove Item\\\",()=>item[\\\"remove\\\"]()],\\n  [\\\"Cancel\\\",()=>0],\\n  [\\\"Float to Top\\\",()=>sidebar.querySelector(\\\".head\\\").insertAdjacentElement(\\\"afterEnd\\\",item),()=>item.classList.contains(\\\"sbitem\\\")],\\n  [\\\"Sink to Bottom\\\",()=>sidebar.appendChild(item),()=>item.classList.contains(\\\"sbitem\\\")],\\n  [\\\"Toggle Type\\\",()=>item.toggleType()]].forEach(args=>item.addContextItem(...args));\\n    \\n  item.addEventListener('mousedown',e=>item.classList.contains(\\\"box\\\")&&Object.assign(item.style,{zIndex:zIndex()}));\\n  item.head.addEventListener('mousedown',e=>{\\n    if(item.classList.contains(\\\"sbitem\\\")) return e.button||transition(()=>item.classList.toggle(\\\"c\\\"));\\n    if (e.target.tagName===\\\"A\\\") return;\\n    let x=e.clientX,y=e.clientY,l=item.offsetLeft,t=item.offsetTop;\\n    let boxDrag=e=>Object.assign(item.style,{left:Math.max(Math.min(win.innerWidth-item.offsetWidth,l+e.clientX-x),0)+\\\"px\\\",top:Math.max(Math.min(win.innerHeight-item.offsetHeight,t+e.clientY-y),0)+\\\"px\\\"});\\n    let boxDragEnd=e=>doc.removeEventListener('mouseup',boxDragEnd)||doc.removeEventListener('mousemove',boxDrag);\\n    doc.addEventListener('mouseup',boxDragEnd)||doc.addEventListener('mousemove',boxDrag);\\n  });\\n  item.head.querySelector(\\\".close\\\").addEventListener('click',e=>item[\\\"remove\\\"]());\\n  item.head.querySelector(\\\".collapser\\\").addEventListener('click',e=>item.classList.contains(\\\"box\\\")&&transition(()=>item.classList.toggle(\\\"c\\\")||win._boxEdgeDetect()));\\n  item.head.addEventListener(\\\"contextmenu\\\",e=>e.preventDefault()||contextMenu(item,e.clientX,e.clientY));\\n  Object.assign(item.style,{left:Math.floor(win.innerWidth/2-item.offsetWidth/2)+\\\"px\\\",top:Math.floor(win.innerHeight/2-item.offsetHeight/2)+\\\"px\\\",height:(item.offsetHeight||200)+\\\"px\\\",width:(item.offsetWidth||200)+\\\"px\\\",zIndex:zIndex()});\\n  return item;\\n};\\nexport let createBox=(title, content, icon=\\\"\\\\uea74\\\", ...classes)=>createItem(title, content, icon, ...classes, \\\"box\\\");\\nexport let createSidebarItem=(title, content, icon=\\\"\\\\uea74\\\", ...classes)=>createItem(title, content, icon, ...classes, \\\"sbitem\\\");\\nexport let confirm=text=>{\\n  let box=createBox(\\\"Confirmation Prompt\\\",`<div class=g2><div class=f>${text}</div><button class=r><u>Y</u>es</button><button class=l><u>N</u>o</button></div>`,\\\"\\\",\\\"prompt\\\");\\n  box.querySelector(\\\"button\\\").focus();\\n  box.addEventListener('keyup',e=>(e.key.toLowerCase()===\\\"y\\\"&&box.querySelector(\\\"button\\\").click())||(e.key.toLowerCase()===\\\"n\\\"&&box.querySelectorAll(\\\"button\\\")[1].click()));\\n  return new Promise(r=>box.querySelectorAll(\\\"button\\\").forEach((button,i)=>button.addEventListener('click',()=>box[\\\"remove\\\"](r(i==0)))));\\n};\\nexport let prompt=text=>{\\n  let box=createBox(\\\"Input Prompt\\\",`<div class=g2><div class=f>${text}</div><input class=r /><button class=l>Submit</button></div>`,\\\"\\\",\\\"prompt\\\");\\n  box.querySelector(\\\"input\\\").focus();\\n  box.querySelector(\\\"input\\\").addEventListener('keyup',e=>e.key=='Enter'&&box.querySelector(\\\"button\\\").click());\\n  return new Promise(r=>box.querySelector(\\\"button\\\").addEventListener('click',()=>box[\\\"remove\\\"](r(box.querySelector(\\\"input\\\").value))));\\n};\\nexport let select=(text,options)=>{\\n  let box=createBox(\\\"Selection Prompt\\\",`<div class=g2><div class=f>${text}</div><select class=r>${options.map(option=>`<option value=\\\"${option}\\\">${option}</option>`).join(\\\"\\\")}</select><button class=l>Submit</button></div>`,\\\"\\\",\\\"prompt\\\");\\n  box.querySelector(\\\"select\\\").focus();\\n  return new Promise(r=>box.querySelector(\\\"button\\\").addEventListener('click',()=>box[\\\"remove\\\"](r(box.querySelector(\\\"select\\\").value))));\\n};\\nexport let alert=text=>{\\n  let box=createBox(\\\"Alert Message\\\",`<div class=g2><div class=f>${text}</div><button class=f>Ok</button></div>`,\\\"\\\", \\\"prompt\\\");\\n  box.querySelector(\\\"button\\\").focus();\\n  return new Promise(r=>box.querySelector(\\\"button\\\").addEventListener('click',()=>r(box[\\\"remove\\\"]())));\\n};\\nlet contextMenu=(item,x,y)=>{\\n  if (item.classList.contains(\\\"prompt\\\")) return;\\n  let options = Object.entries(item.contextItems).filter(([name,entry])=>entry.cFn());\\n  let box=createBox(\\\"\\\",`<div class=g2><div class=f>${item.querySelector(\\\".title\\\").innerText}.context</div>${options.map(([name,entry])=>`<button class=n>${name}</button>`).join(\\\"\\\")}</div>`,\\\"\\\", \\\"contextMenu\\\");\\n  box.querySelector(\\\"button\\\").focus();\\n  Object.assign(box.style,{left:Math.max(Math.min(win.innerWidth-box.offsetWidth/2,x),box.offsetWidth/2)+\\\"px\\\",top:Math.max(Math.min(win.innerHeight-box.offsetHeight/2,y),box.offsetHeight/2)+\\\"px\\\",transform:\\\"translate(-50%, -50%)\\\"});\\n  box.querySelectorAll(\\\"button\\\").forEach(button=>button.addEventListener(\\\"click\\\",()=>box[\\\"remove\\\"](item.contextItems[button.innerText].fn())));\\n  box.addEventListener(\\\"mousedown\\\",e=>e.stopPropagation());\\n  let docFunction=()=>box[\\\"remove\\\"](doc.removeEventListener(\\\"mousedown\\\",docFunction));\\n  setTimeout(()=>doc.addEventListener(\\\"mousedown\\\",docFunction),10);\\n};\\nlet transition=fn=>{\\n  sidebar.classList.add(\\\"t\\\");\\n  fn();\\n  setTimeout(()=>sidebar.classList[\\\"remove\\\"](\\\"t\\\"),200);\\n}\\nlet zIndex=()=>Math.max(9000,...[...doc.querySelectorAll(\\\".sb .box\\\")].map(box=>box.style.zIndex))+1;\",\"filename\":\"/box/box.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":276,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHosts, runHackScript } from 'utils.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = 'joesguns';\\n\\twhile (true) {\\n\\t\\tconst hosts = getHosts(ns, 1.75);\\n\\t\\tfor (const host of hosts) {\\n\\t\\t\\tif (host.server.hostname === 'home') continue;\\n\\t\\t\\tif (!host.threadsAvailable) continue;\\n\\t\\t\\tawait runHackScript(ns, 'weaken.js', host.server.hostname, host.threadsAvailable, target);\\n\\t\\t}\\n\\t\\tawait ns.sleep(ns.formulas.hacking.weakenTime(ns.getServer(target), ns.getPlayer()) + 100);\\n\\t}\\n}\",\"filename\":\"max_hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/227fce01-e7ff-4330-8faa-ccaf50f9c115\",\"moduleSequenceNumber\":25158},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/0f672cd3-3915-4616-89eb-72a144fe6f6e\",\"moduleSequenceNumber\":25141},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/e42bbeb5-eac1-4fea-b3dd-c71b9135a50b\",\"moduleSequenceNumber\":25142},{\"filename\":\"max_hack.js\",\"url\":\"blob:https://danielyxie.github.io/8e8acd19-8537-43df-b03b-34c8232f21a6\",\"moduleSequenceNumber\":59961}],\"dependents\":[],\"ramUsage\":6.9,\"server\":\"home\",\"moduleSequenceNumber\":277,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { boxTailSingleton } from 'utils.js';\\n\\nconst _ = globalThis._; // lodash\\n// Global constants\\nexport const argsSchema = [\\n\\t['no-expansion', false], // If this flag is set, do not expand to new industries. Just work on what we have.\\n\\t['reserve-amount', 1e9], // Don't spend the corporation's last $billion if we can help it.\\n\\t['verbose', false],  // Print extra log messages.\\n\\t['can-accept-funding', true], // When we run low on money, should we look for outside funding?\\n\\t['can-go-public', true], // If we can't get private funding, should we go public?\\n\\t['issue-shares', 0], // If we go public, how many shares should we issue?\\n\\t['can-spend-hashes', true], // Can we spend hacknet hashes (assuming we have them)?\\n\\t['o', false],\\n\\t['mock', false], // Run the task assignment queue, but don't actually spend any money.\\n\\t['price-discovery-only', false], // Don't do any auto-buying, just try to keep the sale price balanced as high as possible. (Emulating TA2 as best we can)\\n\\t['first', 'Agriculture'], // What should we use for our first division? Agriculture works well, but others should be fine too.\\n\\t['second', 'RealEstate'], // What should we prefer for our second division? If we can't afford it, we'll buy what we can afford instead.\\n];\\n\\nconst desiredDivisions = 2; // One Material division to kickstart things, then a product division to really make money.\\n\\nconst bonusMaterials = ['Hardware', 'Robots', 'AICores', 'RealEstate'];\\nconst materialSizes = { Water: 0.05, Energy: 0.01, Food: 0.03, Plants: 0.05, Metal: 0.1, Hardware: 0.06, Chemicals: 0.05, Drugs: 0.02, Robots: 0.5, AICores: 0.1, RealEstate: 0.005 };\\nconst allMaterials = ['Water', 'Energy', 'Food', 'Plants', 'Metal', 'Hardware', 'Chemicals', 'Drugs', 'Robots', 'AICores', 'RealEstate'];\\n// Map of material (by name) to their sizes (how much space it takes in warehouse)\\nconst unlocks = ['Export', 'Smart Supply', 'Market Research - Demand', 'Market Data - Competition', 'VeChain', 'Shady Accounting', 'Government Partnership', 'Warehouse API', 'Office API'];\\nconst upgrades = ['Smart Factories', 'Smart Storage', 'DreamSense', 'Wilson Analytics', 'Nuoptimal Nootropic Injector Implants', 'Speech Processor Implants', 'Neural Accelerators', 'FocusWires', 'ABC SalesBots', 'Project Insight'];\\nconst cities = ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\nconst hqCity = 'Aevum'; // Our production industries will need a headquarters. It doesn't matter which city we use.\\nconst jobs = ['Operations', 'Engineer', 'Research & Development', 'Management', 'Business']; // Also, 'Training', but that's not a real job.\\n\\n// Classes here, since we want to use Industry shortly.\\nclass Industry {\\n\\tconstructor(name = '', robFac = 0.0, aiFac = 0.0, advFac = 0.0, sciFac = 0.0, hwFac = 0.0, reFac = 0.0, reqMats = {}, prodMats = [], makesProducts = false, startupCost = 0) {\\n\\t\\tthis.name = name;\\n\\t\\tthis.factors = {\\n\\t\\t\\tHardware: hwFac,\\n\\t\\t\\tRobots: robFac,\\n\\t\\t\\tAICores: aiFac,\\n\\t\\t\\tRealEstate: reFac,\\n\\t\\t\\tScience: sciFac,\\n\\t\\t\\tAdvertising: advFac,\\n\\t\\t};\\n\\t\\tthis.reqMats = reqMats;\\n\\t\\tthis.prodMats = prodMats;\\n\\t\\tthis.makesProducts = makesProducts;\\n\\t\\tthis.startupCost = startupCost;\\n\\t\\tthis.materialBonusPerSqMeter = {};\\n\\t\\tfor (const material of bonusMaterials) {\\n\\t\\t\\tthis.materialBonusPerSqMeter[material] = this.factors[material] / materialSizes[material];\\n\\t\\t}\\n\\t\\tlet scaleFactor = Object.values(this.materialBonusPerSqMeter).reduce((sum, prod) => sum + prod, 0);\\n\\t\\tthis.scaledMaterialBonus = {};\\n\\t\\tfor (const material of bonusMaterials) {\\n\\t\\t\\tthis.scaledMaterialBonus[material] = this.materialBonusPerSqMeter[material] / scaleFactor;\\n\\t\\t}\\n\\t}\\n\\tstatic fromObject(obj) {\\n\\t\\treturn new Industry(obj.name, obj.robFac, obj.aiFac, obj.advFac, obj.sciFac, obj.hwFac, obj.reFac, obj.reqMats, obj.prodMats, obj.makesProducts, obj.startupCost);\\n\\t}\\n}\\nclass Task {\\n\\t/**\\n\\t * A Task that we will try to run later.\\n\\t * @param {string} name Human readable name of the task to be run.\\n\\t * @param {function} run callback to run the task.\\n\\t * @param {number} cost allocated budget for this task\\n\\t * @param {number} priority priority, higher number is a higher priority\\n\\t */\\n\\tconstructor(name, run, cost = 0, priority = 0) {\\n\\t\\tthis.name = name;\\n\\t\\tthis.run = run;\\n\\t\\tthis.cost = cost;\\n\\t\\tthis.priority = priority; // Higher will be done sooner.\\n\\t}\\n}\\n\\n// Industry and Material data copied from Bitburner's code on February 10, 2022. (https://github.com/danielyxie/bitburner/blob/dev/src/Corporation/Industry.ts) with startupCost added manually.\\n/** @type {Industry[]} */\\nconst industries = [\\n\\tIndustry.fromObject({ name: 'Agriculture', reFac: 0.72, sciFac: 0.5, hwFac: 0.2, robFac: 0.3, aiFac: 0.3, advFac: 0.04, reqMats: { Water: 0.5, Energy: 0.5 }, prodMats: ['Plants', 'Food'], startupCost: 40e9 }),\\n\\tIndustry.fromObject({ name: 'Chemical', reFac: 0.25, sciFac: 0.75, hwFac: 0.2, robFac: 0.25, aiFac: 0.2, advFac: 0.07, reqMats: { Plants: 1, Energy: 0.5, Water: 0.5 }, prodMats: ['Chemicals'], startupCost: 70e9 }),\\n\\tIndustry.fromObject({ name: 'Fishing', reFac: 0.15, sciFac: 0.35, hwFac: 0.35, robFac: 0.5, aiFac: 0.2, advFac: 0.08, reqMats: { Energy: 0.5 }, prodMats: ['Food'], startupCost: 80e9 }),\\n\\tIndustry.fromObject({ name: 'Utilities', reFac: 0.5, sciFac: 0.6, robFac: 0.4, aiFac: 0.4, advFac: 0.08, reqMats: { Hardware: 0.1, Metal: 0.1 }, prodMats: ['Water'], startupCost: 150e9 }),\\n\\tIndustry.fromObject({ name: 'Energy', reFac: 0.65, sciFac: 0.7, robFac: 0.05, aiFac: 0.3, advFac: 0.08, reqMats: { Hardware: 0.1, Metal: 0.2 }, prodMats: ['Energy'], startupCost: 225e9 }),\\n\\tIndustry.fromObject({ name: 'Mining', reFac: 0.3, sciFac: 0.26, hwFac: 0.4, robFac: 0.45, aiFac: 0.45, advFac: 0.06, reqMats: { Energy: 0.8 }, prodMats: ['Metal'], startupCost: 300e9 }),\\n\\t//reFac is unique for 'Food' bc it diminishes greatly per city. Handle this separately in code?\\n\\tIndustry.fromObject({ name: 'Food', sciFac: 0.12, hwFac: 0.15, robFac: 0.3, aiFac: 0.25, advFac: 0.25, reFac: 0.05, reqMats: { Food: 0.5, Water: 0.5, Energy: 0.2 }, makesProducts: true, startupCost: 10e9 }),\\n\\tIndustry.fromObject({ name: 'Tobacco', reFac: 0.15, sciFac: 0.75, hwFac: 0.15, robFac: 0.2, aiFac: 0.15, advFac: 0.2, reqMats: { Plants: 1, Water: 0.2 }, makesProducts: true, startupCost: 20e9 }),\\n\\tIndustry.fromObject({ name: 'Software', sciFac: 0.62, advFac: 0.16, hwFac: 0.25, reFac: 0.15, aiFac: 0.18, robFac: 0.05, reqMats: { Hardware: 0.5, Energy: 0.5 }, prodMats: ['AICores'], makesProducts: true, startupCost: 25e9 }),\\n\\tIndustry.fromObject({ name: 'Pharmaceutical', reFac: 0.05, sciFac: 0.8, hwFac: 0.15, robFac: 0.25, aiFac: 0.2, advFac: 0.16, reqMats: { Chemicals: 2, Energy: 1, Water: 0.5 }, prodMats: ['Drugs'], makesProducts: true, startupCost: 200e9 }),\\n\\tIndustry.fromObject({ name: 'Computer', reFac: 0.2, sciFac: 0.62, robFac: 0.36, aiFac: 0.19, advFac: 0.17, reqMats: { Metal: 2, Energy: 1 }, prodMats: ['Hardware'], makesProducts: true, startupCost: 500e9 }),\\n\\tIndustry.fromObject({ name: 'RealEstate', robFac: 0.6, aiFac: 0.6, advFac: 0.25, sciFac: 0.05, hwFac: 0.05, reqMats: { Metal: 5, Energy: 5, Water: 2, Hardware: 4 }, prodMats: ['RealEstate'], makesProducts: true, startupCost: 600e9 }),\\n\\tIndustry.fromObject({ name: 'Healthcare', reFac: 0.1, sciFac: 0.75, advFac: 0.11, hwFac: 0.1, robFac: 0.1, aiFac: 0.1, reqMats: { Robots: 10, AICores: 5, Energy: 5, Water: 5 }, makesProducts: true, startupCost: 750e9 }),\\n\\tIndustry.fromObject({ name: 'Robotics', reFac: 0.32, sciFac: 0.65, aiFac: 0.36, advFac: 0.18, hwFac: 0.19, reqMats: { Hardware: 5, Energy: 3 }, prodMats: ['Robots'], makesProducts: true, startupCost: 1e12 }),\\n];\\n\\n// Global state\\n/** @type {CorporationInfo} */\\nlet myCorporation;\\nlet options;\\nlet verbose;\\nlet raisingCapital = 0; // Used to flag that we are trying to raise private funding\\nlet extraReserve = 0; // Used when we're saving to fund a new product.\\nlet fillSpaceQueue = []; // Flag these offices as needing workers assigned to roles.\\n\\nexport function autocomplete(data, _) {\\n\\tdata.flags(argsSchema);\\n\\treturn [];\\n}\\nlet c;\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tc = ns.corporation;\\n\\t// Pull in any information we only need at startup.\\n\\toptions = ns.flags(argsSchema);\\n\\tverbose = options.verbose;\\n\\n\\tlet createCorp = false;\\n\\t// See if we've already created a corporation.\\n\\ttry {\\n\\t\\tmyCorporation = c.getCorporation();\\n\\t} catch {\\n\\t\\tcreateCorp = true;\\n\\t}\\n\\tif (createCorp) {\\n\\t\\ttry {\\n\\t\\t\\tc.createCorporation('corp', true);\\n\\t\\t\\tmyCorporation = c.getCorporation();\\n\\t\\t} catch {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t}\\n\\tawait ns.write('/tmp/incorp.txt', '', 'w');\\n\\tboxTailSingleton(ns, 'corp', '🏠', '400px');\\n\\tns.clearLog();\\n\\t// If we already have a corporation, make sure we didn't leave any workers waiting for assignment.\\n\\tfor (const division of myCorporation.divisions) {\\n\\t\\tfor (const city of division.cities) {\\n\\t\\t\\tfillSpaceQueue.push(`${division.name}/${city}`);\\n\\t\\t}\\n\\t}\\n\\n\\t// We've set up the initial corporation, now run it over time.\\n\\twhile (true) {\\n\\t\\t// Do all our spending and expanding.\\n\\t\\tawait doManageCorporation(ns);\\n\\n\\t\\t// Try to manage sale prices for products.\\n\\t\\tawait doPriceDiscovery(ns);\\n\\n\\t\\t// While we wait for the next tick, process any open office positions\\n\\t\\tawait fillOpenPositionsFromQueue(ns);\\n\\n\\t\\t// Sleep until the next time we go into the 'START' phase\\n\\t\\tawait sleepWhileNotInStartState(ns, true);\\n\\n\\t\\tif (verbose) log(ns, ``);\\n\\t}\\n}\\n\\n/**\\n * This function is called in our main loop. Assess the current state of the corporation, and improve it as best we can.\\n * @param {NS} ns\\n **/\\nasync function doManageCorporation(ns) {\\n\\t// Assess the current state of the corporation, and figure out our budget.\\n\\tmyCorporation = c.getCorporation();\\n\\tlet netIncome = myCorporation.revenue - myCorporation.expenses;\\n\\tlet now = new Date().toLocaleString('en-US', { hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: true });\\n\\n\\tif (verbose) log(ns, `----- [ ${myCorporation.name} Quarterly Report ${now} ] -----`);\\n\\tlog(ns, `Corporate cash on hand: ${ns.nFormat(myCorporation.funds, '0.0a')} (Gross: ${ns.nFormat(myCorporation.revenue, '0.0a')}/s, Net: ${ns.nFormat(netIncome, '0.0a')}/s)`);\\n\\n\\t// See if we can raise more money.\\n\\tawait tryRaiseCapital(ns);\\n\\n\\tmyCorporation = c.getCorporation();\\n\\tlet budget = myCorporation.funds - options['reserve-amount'] - extraReserve;\\n\\t// If we're making more than $1 sextillion / sec, we need to stop. The game gets slow if we start employing too many people.\\n\\tif (myCorporation.revenue > 1e21) budget = 0;\\n\\tbudget = Math.max(0, budget);\\n\\tif (verbose) log(ns, `Working with a corporate budget of ${ns.nFormat(budget, '0.0a')}`);\\n\\n\\t// Let's figure out all of the things we'd like to do, before we commit to anything.\\n\\tlet tasks = [];\\n\\t/**\\n\\t * What sort of corporation-wide stuff would we like to do?\\n\\t * Buy Unlocks? Buy upgrades?\\n\\t */\\n\\tlet availableUnlocks = [];\\n\\tconst purchasedUnlocks = [];\\n\\tfor (const unlockable of unlocks) {\\n\\t\\tif (c.hasUnlockUpgrade(unlockable)) purchasedUnlocks.push(unlockable);\\n\\t\\telse availableUnlocks.push(unlockable);\\n\\t}\\n\\tfor (const unlockable of availableUnlocks) {\\n\\t\\tlet cost = c.getUnlockUpgradeCost(unlockable);\\n\\t\\tif (cost > budget) continue;\\n\\t\\t// If we can afford it, and we don't have it yet, consider buying it.\\n\\t\\tlet shouldBuy = false;\\n\\t\\tif (unlockable === 'Smart Supply' && cost < budget * 0.8) {\\n\\t\\t\\t// Push this one to the top of the list. Doing it in code is annoying.\\n\\t\\t\\ttasks.push(new Task('Unlock ' + unlockable, () => c.unlockUpgrade(unlockable), cost, 110));\\n\\t\\t} else if (unlockable === 'Shady Accounting' && cost < budget * 0.5) shouldBuy = true;\\n\\t\\telse if (unlockable === 'Government Partnership' && cost < budget * 0.5) shouldBuy = true;\\n\\t\\t// else if (unlockable === 'Export' && cost < budget * 0.1) shouldBuy = true;\\n\\n\\t\\t// Put the task on our to-do list. Put all unlocks at priority 0 as \\\"nice-to-haves\\\".\\n\\t\\tif (shouldBuy) tasks.push(new Task('Unlock ' + unlockable, () => c.unlockUpgrade(unlockable), cost, 0));\\n\\t}\\n\\n\\tlet hasProductionDivision = false;\\n\\tfor (const division of myCorporation.divisions) {\\n\\t\\tlet industry = industries.find((i) => i.name === division.type);\\n\\t\\tif (industry.makesProducts) hasProductionDivision = true;\\n\\t}\\n\\t// Can we afford to level any upgrades?\\n\\tfor (const upgrade of upgrades) {\\n\\t\\tlet cost = c.getUpgradeLevelCost(upgrade);\\n\\t\\tlet nextLevel = c.getUpgradeLevel(upgrade) + 1;\\n\\t\\tif (cost > budget) continue;\\n\\t\\tif (upgrade === 'Wilson Analytics' && cost < budget * 0.9 && hasProductionDivision) {\\n\\t\\t\\t// Analytics fuels advertising, which drives up the price of products, which generates profits.\\n\\t\\t\\t// Scale the priority based on how cheap this is (cheaper is higher priority [0-100]).\\n\\t\\t\\tlet priority = Math.round((1 - cost / budget) * 100);\\n\\t\\t\\ttasks.push(new Task(`Upgrading '${upgrade}' to level ${nextLevel}`, () => c.levelUpgrade(upgrade), cost, priority));\\n\\t\\t} else if (['Smart Factories', 'Smart Storage'].includes(upgrade) && cost < budget * 0.1) {\\n\\t\\t\\t// More storage means more materials, which drives more production. More production means more sales.\\n\\t\\t\\ttasks.push(new Task(`Upgrading '${upgrade}' to level ${nextLevel}`, () => c.levelUpgrade(upgrade), cost, 10));\\n\\t\\t} else if (cost < budget * 0.01) {\\n\\t\\t\\t// Upgrade other stuff too, as long as it's cheap compared to our budget.\\n\\t\\t\\ttasks.push(new Task(`Upgrading '${upgrade}' to level ${nextLevel}`, () => c.levelUpgrade(upgrade), cost, 1));\\n\\t\\t}\\n\\t}\\n\\t/**\\n\\t * Let's take a look at our divisions for big problems. Do we need to expand to a new industry? Are any\\n\\t * of our existing industries showing a loss? What else might we need to consider here? We'll be looking\\n\\t * at every division at the end of the loop to do maintenance, so this is just high level stuff.\\n\\t */\\n\\tif (myCorporation.divisions.length === 0) {\\n\\t\\t// We definitely need a new division!\\n\\t\\t// Use up to 80% of our budget to start this first division.\\n\\t\\tlet newDivisionBudget = budget * 0.9;\\n\\t\\t// Just consider the basic materials-producing industries for our first division. Products take a long time to come online.\\n\\t\\tlet possibleIndustries = industries.filter((ind) => !ind.makesProducts);\\n\\t\\t// And only the ones where we'll be able to spend at least half our budget setting up shop.\\n\\t\\tpossibleIndustries = possibleIndustries.filter((ind) => ind.startupCost < newDivisionBudget * 0.5);\\n\\t\\t// TODO: Pick a starting industry using some sort of logic.\\n\\t\\t// For the moment, let's just try to go with Agriculture. It's cheap and works well.\\n\\t\\tlet newIndustry = possibleIndustries.find((ind) => ind.name === options['first']);\\n\\t\\tif (newIndustry) {\\n\\t\\t\\ttasks.push(new Task(`Add the first division, '${newIndustry.name}'`, () => doCreateNewDivision(ns, newIndustry, newDivisionBudget), newDivisionBudget, 100));\\n\\t\\t} else {\\n\\t\\t\\t// If we can't afford to create our first industry, something has gone very wrong. Quit now.\\n\\t\\t\\tlog(ns, `ERROR: Could not afford to create our first industry!`, 'error', true);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\t}\\n\\t// Figure out where we are in the fundraising progression. Don't buy a production industry until after accepting round 3.\\n\\tlet offer = c.getInvestmentOffer();\\n\\tif (myCorporation.divisions.length > 0 && myCorporation.divisions.length < desiredDivisions && offer.round > 3) {\\n\\t\\tlet newDivisionBudget = budget * 0.9;\\n\\t\\tlet possibleIndustries = industries.filter((ind) => ind.makesProducts);\\n\\t\\t// Only consider industries where we can still have a budget to actually get started.\\n\\t\\tpossibleIndustries = possibleIndustries.filter((ind) => ind.startupCost < budget * 0.5);\\n\\t\\tpossibleIndustries.sort((a, b) => a.startupCost - b.startupCost).reverse();\\n\\t\\tif (verbose && possibleIndustries.length) {\\n\\t\\t\\tlog(ns, `We would like to expand into a new industry. Possibilities:`);\\n\\t\\t\\tfor (const industry of possibleIndustries) {\\n\\t\\t\\t\\tlog(ns, `  ${ns.nFormat(industry.startupCost, '0.0a')} - ${industry.name}`);\\n\\t\\t\\t}\\n\\t\\t} else if (verbose) log(ns, `INFO: We would like to create a new division but we cannot afford one. Willing to spend ${ns.nFormat(budget, '0.0a')}.`);\\n\\n\\t\\t// Try to use the industry from the command line. If that doesn't work, fall back to picking from our list of possibilities.\\n\\t\\t//        let newIndustry = possibleIndustries.find((ind) => ind.name == 'Pharmaceutical');\\n\\t\\tlet newIndustry = possibleIndustries.find((ind) => ind.name === options['second']);\\n\\t\\tif (!newIndustry && possibleIndustries.length > 0) {\\n\\t\\t\\tnewIndustry = possibleIndustries[0];\\n\\t\\t}\\n\\t\\tif (newIndustry) {\\n\\t\\t\\ttasks.push(new Task(`Add a production division, '${newIndustry.name}'`, () => doCreateNewDivision(ns, newIndustry, newDivisionBudget), newDivisionBudget, 100));\\n\\t\\t} else {\\n\\t\\t\\tlog(ns, `ERROR: Buying industry failed. Aborting!`, 'error', true);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\t}\\n\\n\\t// If we have all of our divisions bought, it's worth spending hashes on research.\\n\\t// if (myCorporation.divisions.length >= desiredDivisions) {\\n\\t// \\tif (options['can-spend-hashes'])\\n\\t// \\t\\tawait doSpendHashes(ns, 'Exchange for Corporation Research');\\n\\t// }\\n\\n\\t/**\\n\\t * We've looked at the at the corporation, and come up with a list of tasks we'd like to do. Now, figure out\\n\\t * which ones we can actually accomplish on our budget.\\n\\t */\\n\\ttasks.sort((a, b) => a.cost - b.cost).reverse();\\n\\ttasks.sort((a, b) => a.priority - b.priority).reverse();\\n\\t/**\\n\\t * Finally, run each task in priority order. If we run out of money, should we buy lower priority stuff, or\\n\\t * wait? If we wait, the money might get spent expanding a division instead. This may all take some\\n\\t * adjustments over time.\\n\\t */\\n\\tlet spent = await runTasks(ns, tasks, budget);\\n\\tif (spent) budget -= spent;\\n\\tif (spent > 0 && verbose) log(ns, `Spent ${ns.nFormat(spent, '0.0a')} of our budget of ${ns.nFormat(budget, '0.0a')}.`);\\n\\n\\t/**\\n\\t * Even though we've done all of our desired high level tasks, we still need to tend to each division individually.\\n\\t * If we don't have all the automation bits, we may need to adjust pricing. If we have room in warehouses, we can buy\\n\\t * more materials. If we have products, we may be able to start on a new product. We may have research to spend.\\n\\t */\\n\\tfor (const division of myCorporation.divisions) {\\n\\t\\t// If we have multiple divisions, hold the lion's share of the budget for production industries.\\n\\t\\tlet industry = industries.find((ind) => ind.name === division.type);\\n\\t\\tlet divisionalBudget = budget;\\n\\t\\tif (myCorporation.divisions.length > 1 && !industry.makesProducts) {\\n\\t\\t\\tdivisionalBudget *= 0.05;\\n\\t\\t}\\n\\t\\tlet spent = await doManageDivision(ns, division, divisionalBudget);\\n\\t\\tif (spent) budget -= spent;\\n\\t}\\n}\\n\\n/**\\n * Try to raise money.\\n * Advances through the funding rounds, eventually going public. Potentially spends hacknet hashes for money.\\n * @param {NS} ns\\n */\\nasync function tryRaiseCapital(ns) {\\n\\t// First, spend hacknet hashes.\\n\\t// if (options['can-spend-hashes'] && myCorporation.funds < 10e9)\\n\\t// \\tawait doSpendHashes(ns, 'Sell for Corporation Funds');\\n\\t// If we're not public, then raise private funding.\\n\\tif (!myCorporation.public) {\\n\\t\\tlet offer = c.getInvestmentOffer();\\n\\t\\t// If we've finished round 4, clear our raising capital flag.\\n\\t\\tif (offer.round > 4) raisingCapital = 0;\\n\\t\\tlet willAccept = true;\\n\\t\\tif (offer && offer.round <= 4) {\\n\\t\\t\\tlog(ns, `Considering raising private capital round ${offer.round}. Offered ${ns.nFormat(offer.funds, '0.0a')} for ${offer.shares} shares.`);\\n\\n\\t\\t\\t// Make sure all employees are happy.\\n\\t\\t\\tlet satisfied = allEmployeesSatisfied(ns);\\n\\t\\t\\tif (!satisfied) {\\n\\t\\t\\t\\tlet prefix = '    *';\\n\\t\\t\\t\\tif (!willAccept) prefix = '     ';\\n\\t\\t\\t\\tlog(ns, `${prefix}  Round ${offer.round} financing waiting on employee stats to stabilize.`);\\n\\t\\t\\t\\twillAccept = false;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Make sure we have filled a reasonable amount of our warehouses with materials.\\n\\t\\t\\tfor (const division of myCorporation.divisions) {\\n\\t\\t\\t\\tlet industry = industries.find((i) => i.name === division.type);\\n\\t\\t\\t\\tfor (const city of division.cities) {\\n\\t\\t\\t\\t\\tif (!c.hasWarehouse(division.name, city)) continue;\\n\\t\\t\\t\\t\\tlet warehouse = c.getWarehouse(division.name, city);\\n\\t\\t\\t\\t\\tlet warehouseSpaceRequiredForCycle = getReservedWarehouseSpace(ns, industry, division, city);\\n\\t\\t\\t\\t\\tlet warehouseSpaceAvailable = warehouse.size - warehouseSpaceRequiredForCycle - warehouse.sizeUsed;\\n\\t\\t\\t\\t\\tif (warehouseSpaceAvailable > warehouseSpaceRequiredForCycle * 0.2) {\\n\\t\\t\\t\\t\\t\\tlet prefix = '    *';\\n\\t\\t\\t\\t\\t\\tif (!willAccept) prefix = '     ';\\n\\t\\t\\t\\t\\t\\tlog(ns, `${prefix}  Round ${offer.round} financing waiting on ${division.name} warehouses to gain materials.`);\\n\\t\\t\\t\\t\\t\\twillAccept = false;\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t// If we have a product division, make sure it has a maximum number of products before we accept the offer.\\n\\t\\t\\tfor (const division of myCorporation.divisions) {\\n\\t\\t\\t\\tconst maxProducts = getMaxProducts(ns, division.name);\\n\\t\\t\\t\\tlet industry = industries.find((i) => i.name === division.type);\\n\\t\\t\\t\\tif (industry.makesProducts && division.products.length < maxProducts) {\\n\\t\\t\\t\\t\\tlet prefix = '    *';\\n\\t\\t\\t\\t\\tif (!willAccept) prefix = '     ';\\n\\t\\t\\t\\t\\tlog(ns, `${prefix}  Round ${offer.round} financing waiting on ${division.name} division to create products (${division.products.length}/${maxProducts})`);\\n\\t\\t\\t\\t\\twillAccept = false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (offer.round >= 4 && industry.makesProducts) {\\n\\t\\t\\t\\t\\t// Wait for the last product to finish researching\\n\\t\\t\\t\\t\\tlet completeProducts = division.products.map((prodName) => c.getProduct(division.name, prodName)).filter((prod) => prod.developmentProgress >= 100);\\n\\t\\t\\t\\t\\tif (completeProducts.length < maxProducts) {\\n\\t\\t\\t\\t\\t\\tlet prefix = '    *';\\n\\t\\t\\t\\t\\t\\tif (!willAccept) prefix = '     ';\\n\\t\\t\\t\\t\\t\\tlog(ns, `${prefix}  Round ${offer.round} financing waiting on ${division.name} division to complete products (${completeProducts.length}/${maxProducts})`);\\n\\t\\t\\t\\t\\t\\twillAccept = false;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t// TODO: Funding is proportional to revenue. We can cook the books so that revenue looks higher than it should by stockpiling goods, then selling them all at once.\\n\\n\\t\\t\\t// Make sure we aren't spending money on materials when we get funding. Each time we come through the loop and would purchase, increment the counter. After 4 times, purchase.\\n\\t\\t\\tif (willAccept) raisingCapital++;\\n\\t\\t\\telse raisingCapital = 0;\\n\\n\\t\\t\\t// If we've passed all the checks, then accept the next round of funding.\\n\\t\\t\\tif (options['can-accept-funding'] && raisingCapital > 4 && !options.mock) {\\n\\t\\t\\t\\tlet success = c.acceptInvestmentOffer();\\n\\t\\t\\t\\traisingCapital = 0;\\n\\t\\t\\t\\tif (success) log(ns, `WARNING: Accepted round ${offer.round} funding. Took ${ns.nFormat(offer.funds, '0.0a')} for ${offer.shares} shares.`);\\n\\t\\t\\t\\telse log(ns, `ERROR: Tried to accept round ${offer.round} funding, but something went wrong.`);\\n\\t\\t\\t} else if (options['can-accept-funding'] && raisingCapital > 0) {\\n\\t\\t\\t\\tlog(ns, `SUCCESS: Raising capital in ${5 - raisingCapital} cycles.`);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\t// We're public, so we can't be raising capital.\\n\\t\\t\\traisingCapital = 0;\\n\\t\\t}\\n\\t\\t// Finally, if we're out of private funding, we may as well go public\\n\\t\\toffer = c.getInvestmentOffer();\\n\\t\\tif (options['can-go-public'] && !options.mock && offer.round > 4) {\\n\\t\\t\\t// Looks like we're out of private funding. Time to go public.\\n\\t\\t\\tlog(ns, `SUCCESS: Private funding complete. Time to IPO. Selling ${options['issue-shares']} shares.`);\\n\\t\\t\\tc.goPublic(options['issue-shares']);\\n\\t\\t\\t// and set our dividend to 10%\\n\\t\\t\\tc.issueDividends(0.1);\\n\\t\\t}\\n\\t} else {\\n\\t\\t// We're public, so we can't be raising capital.\\n\\t\\traisingCapital = 0;\\n\\t}\\n}\\n\\n/**\\n * Do all employees have enough happiness, energy, and morale?\\n * @param {NS} ns\\n * @param {number} lowerLimit - minimum for all stats [0,1]\\n * @returns {boolean}\\n */\\nfunction allEmployeesSatisfied(ns, lowerLimit = 0.9995) {\\n\\tlet allSatisfied = true;\\n\\tfor (const division of myCorporation.divisions) {\\n\\t\\tfor (const city of division.cities) {\\n\\t\\t\\tlet office = c.getOffice(division.name, city);\\n\\t\\t\\tlet employees = office.employees.map((e) => c.getEmployee(division.name, city, e));\\n\\t\\t\\tlet avgMorale = employees.map((e) => e.mor).reduce((sum, mor) => sum + mor, 0) / employees.length;\\n\\t\\t\\tlet avgEnergy = employees.map((e) => e.ene).reduce((sum, ene) => sum + ene, 0) / employees.length;\\n\\t\\t\\tlet avgHappiness = employees.map((e) => e.hap).reduce((sum, hap) => sum + hap, 0) / employees.length;\\n\\t\\t\\tif (avgEnergy < office.maxEne * lowerLimit || avgHappiness < office.maxHap * lowerLimit || avgMorale < office.maxMor * lowerLimit) {\\n\\t\\t\\t\\tallSatisfied = false;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn allSatisfied;\\n}\\n\\n/**\\n * Given a list of tasks, execute them in order.\\n * @param {NS} ns\\n * @param {Task[]} tasks\\n * @param {number} budget\\n * @param {boolean} keepSpending Should we keep spending money on items further down the list after hitting an item we can't afford?\\n * @returns {number} the amount spent.\\n */\\nasync function runTasks(ns, tasks, budget, keepSpending = true) {\\n\\tconst startingBudget = budget;\\n\\tfor (const task of tasks) {\\n\\t\\tlet success = false;\\n\\t\\tif (budget - task.cost > 0) {\\n\\t\\t\\tlog(ns, `  Spending ${ns.nFormat(task.cost, '0.0a')} on ${task.name}`);\\n\\t\\t\\t// Some of the ns.corporation calls we use are void functions, so treat a return value of undefined with no exception as a success.\\n\\t\\t\\tif (!options.mock)\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tsuccess = await task.run();\\n\\t\\t\\t\\t\\tif (success === undefined) success = true;\\n\\t\\t\\t\\t} catch (e) {\\n\\t\\t\\t\\t\\tlog(ns, `WARNING: Failed to execute ${task.name} - ${task.run}`);\\n\\t\\t\\t\\t\\tlog(ns, `WARNING: ${e}`);\\n\\t\\t\\t\\t}\\n\\t\\t\\tif (success) budget -= task.cost;\\n\\t\\t}\\n\\t\\tif (!success && !keepSpending) break;\\n\\t}\\n\\treturn startingBudget - budget;\\n}\\n\\n/**\\n * Create a bare bones new division, then use any remaining money to set it up.\\n * @param {NS} ns\\n * @param {*} newIndustry\\n * @param {number} newDivisionBudget\\n * @returns {boolean} true if we created the new division, false if not.\\n */\\nasync function doCreateNewDivision(ns, newIndustry, newDivisionBudget) {\\n\\tif (options['no-expansion'] || options['mock']) return false;\\n\\tmyCorporation = c.getCorporation();\\n\\tlet numDivisions = myCorporation.divisions.length;\\n\\n\\tc.expandIndustry(newIndustry.name, newIndustry.name);\\n\\n\\tmyCorporation = c.getCorporation();\\n\\tif (numDivisions === myCorporation.divisions.length) {\\n\\t\\tlog(ns, `ERROR: Failed to create new division! Expected to create '${newIndustry.name}'.`, 'error', true);\\n\\t\\tns.exit();\\n\\t}\\n\\tnewDivisionBudget -= newIndustry.startupCost;\\n\\tif (verbose) log(ns, `Spending ${ns.nFormat(newIndustry.startupCost, '0.0a')} setting up a new '${newIndustry.name}' division.`);\\n\\tlet newDivision = c.getDivision(newIndustry.name);\\n\\n\\t// Hire the first three employees in Sector-12\\n\\tfillSpaceQueue.push(`${newDivision.name}/Sector-12`);\\n\\n\\t// Do the first round of purchasing now.\\n\\tawait doManageDivision(ns, newDivision, newDivisionBudget);\\n\\tif (newDivision) return true;\\n\\telse return false;\\n}\\n\\n/**\\n * Given an existing division, try to allocate our budget to growing the business.\\n * @param {NS} ns\\n * @param {Division} division division from ns.corporation.getDivision()\\n * @param {number} budget amount we can spend\\n * @returns {number} the amount we spent while managing this division.\\n */\\nasync function doManageDivision(ns, division, budget) {\\n\\tmyCorporation = c.getCorporation();\\n\\tconst industry = industries.find((ind) => ind.name === division.type);\\n\\tbudget = Math.max(0, budget);\\n\\tconst totalBudget = budget;\\n\\n\\t/**\\n\\t * Take stock of the current state of this division. Just like at the corporate level,\\n\\t * collect some tasks that we'd like to do, then see what we can execute. Don't worry too\\n\\t * much about spending the whole budget. Anything we don't spend now will get passed on\\n\\t * to other divisions, or recycled in the next pass.\\n\\t */\\n\\tif (verbose) log(ns, `Managing ${division.name} division with a budget of ${ns.nFormat(budget, '0.0a')}.`);\\n\\tlet spent = 0;\\n\\tlet tasks = [];\\n\\n\\t// Can we expand to new cities?\\n\\tif (division.cities.length < cities.length) {\\n\\t\\t// We aren't in all cities yet, so we want to expand.\\n\\t\\tfor (const city of cities) {\\n\\t\\t\\tif (!division.cities.includes(city)) {\\n\\t\\t\\t\\tlet cost = c.getExpandCityCost();\\n\\t\\t\\t\\tif (cost < budget * 0.25) {\\n\\t\\t\\t\\t\\tif (verbose) log(ns, `Want to open new offices in ${city}.`);\\n\\t\\t\\t\\t\\ttasks.push(new Task(`Expand ${division.name} to ${city}`, () => doExpandCity(ns, division.name, city), cost, 80));\\n\\t\\t\\t\\t} else if (verbose) log(ns, `WARNING: We would like to expand to ${city}, but it would cost ${ns.nFormat(cost, '0.0a')} on our budget of ${ns.nFormat(budget, '0.0a')}.`);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// Go ahead and expand immediately, so we can buy other stuff for any new locations on this cycle.\\n\\tif (tasks.length > 0) {\\n\\t\\tspent = await runTasks(ns, tasks, budget);\\n\\t\\tbudget -= spent;\\n\\t\\ttasks = [];\\n\\t}\\n\\t// Update our status\\n\\tmyCorporation = c.getCorporation();\\n\\tdivision = c.getDivision(division.name);\\n\\tlet hasMarketTA2 = c.hasResearched(division.name, 'Market-TA.II');\\n\\n\\t// Division wide tasks\\n\\t// Can we buy advertising? This is how we go exponential in our production industry.\\n\\tlet adCount = c.getHireAdVertCount(division.name);\\n\\tlet adPrice = c.getHireAdVertCost(division.name);\\n\\tif (industry.makesProducts && adPrice < budget * 0.9) {\\n\\t\\ttasks.push(new Task(`Buy advertising campaign #${adCount + 1} for ${division.name}`, () => c.hireAdVert(division.name), adPrice, 60));\\n\\t\\tadCount++;\\n\\t}\\n\\t// Buy the first advertising campaign for non-product industries\\n\\tif (adCount === 0 && !industry.makesProducts && adPrice < budget * 0.9) {\\n\\t\\t// Buy one advertising campaign in material markets\\n\\t\\ttasks.push(new Task(`Buy advertising campaign #${adCount + 1} for ${division.name}`, () => c.hireAdVert(division.name), adPrice, 60));\\n\\t}\\n\\t// Consider buying more advertising. All industires with MarketTA2, or a second one for production industries.\\n\\tif ((industry.makesProducts || hasMarketTA2) && adPrice < budget * 0.5) {\\n\\t\\ttasks.push(new Task(`Buy advertising campaign #${adCount + 1} for ${division.name}`, () => c.hireAdVert(division.name), adPrice, 20));\\n\\t}\\n\\n\\t// Should we spend any research?\\n\\tlet researchToSpend = division.research;\\n\\tif (industry.makesProducts || hasMarketTA2) {\\n\\t\\t// Willing to spend in inverse proportion to how much stored science helps this product.\\n\\t\\tresearchToSpend = division.research * (1 - industry.factors.Science);\\n\\t}\\n\\tlet researchTypes = ['Hi-Tech R&D Laboratory', 'uPgrade: Fulcrum', 'uPgrade: Capacity.I', 'uPgrade: Capacity.II', 'Market-TA.I', 'Market-TA.II'];\\n\\tfor (const researchType of researchTypes) {\\n\\t\\tlet hasResearch = false;\\n\\t\\tlet cost = Infinity;\\n\\t\\ttry {\\n\\t\\t\\thasResearch = c.hasResearched(division.name, researchType);\\n\\t\\t\\tcost = c.getResearchCost(division.name, researchType);\\n\\t\\t} catch { }\\n\\t\\tif (!hasResearch && researchToSpend >= cost) {\\n\\t\\t\\tlog(ns, `INFO: Buying research project ${researchType} for ${cost} research points.`, 'info');\\n\\t\\t\\tc.research(division.name, researchType);\\n\\t\\t\\tresearchToSpend -= cost;\\n\\t\\t} else if (!hasResearch && cost !== Infinity) {\\n\\t\\t\\tif (verbose) log(ns, `Considered spending up to ${researchToSpend} of ${division.research} research on '${researchType}' but it would cost ${cost}.`);\\n\\t\\t\\t// If we don't have this research, and can't afford to buy it, don't buy the next item on the list\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\t// If this is a production industry, see if we should be researching a new product.\\n\\tif (industry.makesProducts) {\\n\\t\\tconst maxProducts = getMaxProducts(ns, division.name);\\n\\t\\tlet products = division.products.map((p) => c.getProduct(division.name, p));\\n\\t\\tlet progress = products.map((p) => p.developmentProgress).filter((cmp) => cmp < 100)[0];\\n\\t\\tif (progress === undefined) progress = 100;\\n\\t\\tif (verbose) log(ns, `Projects: ${products.length}/${maxProducts}. Current project: ${progress}% complete.`);\\n\\t\\tif (progress === 100) {\\n\\t\\t\\t// No product being researched. Consider creating a new one.\\n\\t\\t\\tif (products.length < maxProducts) {\\n\\t\\t\\t\\t// We're not full, so go ahead.\\n\\t\\t\\t\\tspent += createNewProduct(ns, division);\\n\\t\\t\\t\\tbudget -= spent;\\n\\t\\t\\t} // Discontinue an existing product for a new one if we're not raising capital.\\n\\t\\t\\telse {\\n\\t\\t\\t\\t// log(ns, `Considering creating a new product. rC: ${raisingCapital} eR: ${mf(extraReserve)}`);\\n\\t\\t\\t\\tif (raisingCapital === 0) {\\n\\t\\t\\t\\t\\tif (extraReserve > 0 && myCorporation.funds > extraReserve) {\\n\\t\\t\\t\\t\\t\\t// We have enough money saved up. Time to ditch the product with the lowest budget.\\n\\t\\t\\t\\t\\t\\tproducts.sort((a, b) => budgetFromProductName(a.name) - budgetFromProductName(b.name));\\n\\t\\t\\t\\t\\t\\tlet lowBudgetProduct = products[0];\\n\\t\\t\\t\\t\\t\\tc.discontinueProduct(division.name, lowBudgetProduct.name);\\n\\t\\t\\t\\t\\t\\tmyCorporation = c.getCorporation();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t// Try to create the Product. If it fails, it will set a reserve for us.\\n\\t\\t\\t\\t\\tspent += createNewProduct(ns, division);\\n\\t\\t\\t\\t\\tbudget -= spent;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t// Per city tasks.\\n\\tfor (const city of division.cities) {\\n\\t\\t// Can we expand any of our offices for more employees?\\n\\t\\tlet officeSize = c.getOffice(division.name, city).size;\\n\\t\\tlet seats = 15; // Grow by officeSize when small, then by 15\\n\\t\\tseats = Math.min(seats, officeSize);\\n\\t\\tlet cost = c.getOfficeSizeUpgradeCost(division.name, city, seats);\\n\\t\\tif (industry.makesProducts && city === hqCity && cost < budget * 0.9) {\\n\\t\\t\\ttasks.push(new Task(`Buy space for ${seats} more employees of ${division.name}/${city}`, () => upgradeOfficeSize(ns, division.name, city, seats), cost, 70));\\n\\t\\t} else if (industry.makesProducts && city !== hqCity && cost < budget * 0.1) {\\n\\t\\t\\ttasks.push(new Task(`Buy space for ${seats} more employees of ${division.name}/${city}`, () => upgradeOfficeSize(ns, division.name, city, seats), cost, 70));\\n\\t\\t} else if (!industry.makesProducts && cost < budget * 0.4) {\\n\\t\\t\\ttasks.push(new Task(`Buy space for ${seats} more employees of ${division.name}/${city}`, () => upgradeOfficeSize(ns, division.name, city, seats), cost, 70));\\n\\t\\t}\\n\\n\\t\\t// Can we expand our warehouse space?\\n\\t\\tif (!c.hasWarehouse(division.name, city)) {\\n\\t\\t\\t// We don't have a warehouse here. We should try to buy one in this city.\\n\\t\\t\\tcost = c.getPurchaseWarehouseCost();\\n\\t\\t\\tif (cost < budget * 0.5) {\\n\\t\\t\\t\\ttasks.push(new Task(`Buy warehouse ${division.name}/${city}`, () => c.purchaseWarehouse(division.name, city), cost, 80));\\n\\t\\t\\t}\\n\\t\\t\\t// Anything else we want to do with a city requires a warehouse, so just skip to the next city.\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t// We have a warehouse. Can we expand it?\\n\\t\\tlet warehouse = c.getWarehouse(division.name, city);\\n\\t\\t// TODO: How much do we care about expanding the warehouse? We should base it on how much of an impact more materials would have.\\n\\t\\tcost = c.getUpgradeWarehouseCost(division.name, city);\\n\\t\\tif (cost < budget * 0.25) {\\n\\t\\t\\ttasks.push(new Task(`Buy warehouse space for ${division.name}/${city}`, () => c.upgradeWarehouse(division.name, city), cost, 20));\\n\\t\\t}\\n\\n\\t\\t// Turn on Smart Supply if we have it\\n\\t\\tif (c.hasUnlockUpgrade('Smart Supply') && !warehouse.smartSupplyEnabled) {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tif (verbose) log(ns, `Turning on Smart Supply for ${division.name}/${city}.`);\\n\\t\\t\\t\\tc.setSmartSupply(division.name, city, true);\\n\\t\\t\\t} catch (e) {\\n\\t\\t\\t\\tlog(ns, `ERROR: ${e}`);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Can we buy more materials given the space we currently have?\\n\\t\\t// First, wait to cycle around to 'START' so we have a clean read on the warehouse levels.\\n\\t\\tawait sleepWhileNotInStartState(ns);\\n\\t\\t// Calculate the required free space for a production cycle's worth of Material and products.\\n\\t\\tlet warehouseSpaceRequiredForCycle = getReservedWarehouseSpace(ns, industry, division, city);\\n\\n\\t\\t// We don't want to drive the corp too deeply negative with material purchases too soon, or\\n\\t\\t// else nothing else will ever be bought, and employees will never get happy.\\n\\t\\tlet freeSpace = warehouse.size - warehouse.sizeUsed;\\n\\t\\tlet warehouseSpaceAvailable = freeSpace - warehouseSpaceRequiredForCycle;\\n\\t\\tlet tolerance = warehouseSpaceRequiredForCycle * 0.01;\\n\\t\\tlet enoughSpace = warehouseSpaceAvailable >= tolerance; // Tiny safety margin\\n\\t\\tconst satisfied = allEmployeesSatisfied(ns);\\n\\t\\tif ((budget > 0 || satisfied) && enoughSpace && raisingCapital === 0) {\\n\\t\\t\\t// We have a decent amount of space to fill.\\n\\t\\t\\tif (verbose) log(ns, `   ${division.name}/${city} warehouse: Wants +${warehouseSpaceAvailable} m² materials. ${warehouseSpaceRequiredForCycle} m² reserved.`);\\n\\t\\t\\tfor (const material of bonusMaterials) {\\n\\t\\t\\t\\t//if (industry.prodMats.includes(material)) continue; // Don't buy the materials we make.\\n\\t\\t\\t\\tlet amt = (industry.scaledMaterialBonus[material] * warehouseSpaceAvailable) / 4;\\n\\t\\t\\t\\t// somewhat scale the amount we buy with our budget\\n\\t\\t\\t\\tlet scaleFactor = Math.log10(budget) - 11; // Don't go full speed until our budget is $100b or more.\\n\\t\\t\\t\\tscaleFactor = Math.max(-2, scaleFactor);\\n\\t\\t\\t\\tscaleFactor = Math.min(0, scaleFactor);\\n\\t\\t\\t\\tlet scale = Math.pow(10, scaleFactor);\\n\\t\\t\\t\\t// Only scale if we're waiting on employees to get happy.\\n\\t\\t\\t\\tif (!satisfied) amt = scale * amt;\\n\\t\\t\\t\\tc.buyMaterial(division.name, city, material, amt);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\t// Make sure we're not buying anything -- we're either out of room or out of money.\\n\\t\\t\\tfor (const material of bonusMaterials) {\\n\\t\\t\\t\\tc.buyMaterial(division.name, city, material, 0);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// It's possible to get into a situation where we've grown production faster than warehouse space.\\n\\t\\tif (warehouseSpaceAvailable < -tolerance) {\\n\\t\\t\\t// Start clearing things out.\\n\\t\\t\\tif (verbose) log(ns, `   ${division.name}/${city} warehouse: Wants to reserve ${warehouseSpaceRequiredForCycle} of ${warehouse.size} m², but only ${freeSpace} m² free! Selling some materials.`);\\n\\t\\t\\tfor (const material of allMaterials) {\\n\\t\\t\\t\\tlet amt = c.getMaterial(division.name, city, material).qty;\\n\\t\\t\\t\\tlet sellAmt = amt * 0.025;\\n\\t\\t\\t\\tc.sellMaterial(division.name, city, material, sellAmt.toFixed(2), 'MP*0.80');\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\t// Make sure we reset. It should be safe to sell '0' here, because the things we want to sell will get reset in the price discovery loop.\\n\\t\\t\\tfor (const material of allMaterials) {\\n\\t\\t\\t\\tc.sellMaterial(division.name, city, material, '0', 'MP');\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// Figure out which tasks we can afford to run, and in which order.\\n\\ttasks.sort((a, b) => a.cost - b.cost).reverse();\\n\\ttasks.sort((a, b) => a.priority - b.priority).reverse();\\n\\t// Finally, run all the tasks we've collected.\\n\\tspent += await runTasks(ns, tasks, budget);\\n\\tif (spent > 0 && verbose) log(ns, `Spent ${ns.nFormat(spent, '0.0a')} of our budget of ${ns.nFormat(totalBudget, '0.0a')}.`);\\n\\n\\treturn spent;\\n}\\n\\n/**\\n * How much space do we need to leave fee in this warehouse for a full cycle of production?\\n * @param {NS} ns\\n * @param {Industry} industry\\n * @param {Division} division\\n * @param {string} city\\n * @returns {number}\\n */\\nfunction getReservedWarehouseSpace(ns, industry, division, city) {\\n\\tlet rawMaterialSize = 0;\\n\\tlet warehouseSpaceRequiredForCycle = 0;\\n\\tlet maxProd = 0;\\n\\n\\t// Products take the same space as what was used to create it.\\n\\tfor (const matName in industry.reqMats) {\\n\\t\\tlet matAmt = industry.reqMats[matName];\\n\\t\\trawMaterialSize += matAmt * materialSizes[matName];\\n\\t}\\n\\n\\t// Max production is based on a bunch of production multipliers.\\n\\tmaxProd = getMaximumProduction(ns, division, city);\\n\\n\\t// How many materials could we produce? Material sizes are predefined.\\n\\tfor (const matName of industry.prodMats) {\\n\\t\\twarehouseSpaceRequiredForCycle += materialSizes[matName] * maxProd;\\n\\t}\\n\\n\\tif (industry.makesProducts) {\\n\\t\\tconst maxProducts = getMaxProducts(ns, division.name);\\n\\t\\twarehouseSpaceRequiredForCycle += maxProducts * maxProd * rawMaterialSize;\\n\\t}\\n\\n\\t// We produce stuff 10 times per cycle\\n\\twarehouseSpaceRequiredForCycle *= 10;\\n\\n\\t// If we don't have automatic price discovery, we'll need some extra free space.\\n\\tlet hasMarketTA2 = c.hasResearched(division.name, 'Market-TA.II');\\n\\tif (!hasMarketTA2) warehouseSpaceRequiredForCycle *= 3;\\n\\telse warehouseSpaceRequiredForCycle *= 1.5;\\n\\n\\treturn warehouseSpaceRequiredForCycle;\\n}\\n\\nfunction getMaximumProduction(ns, division, city) {\\n\\tlet office = c.getOffice(division.name, city);\\n\\tlet officeMult = getOfficeProductivity(office); // Workers\\n\\tlet prodMult = division.prodMult; // Materials\\n\\tlet corpMult = 1 + 0.03 * c.getUpgradeLevel('Smart Factories'); // Corporate upgrades.\\n\\tlet resMult = 1;\\n\\tif (c.hasResearched(division.name, 'Drones - Assembly')) resMult *= 1.2;\\n\\tif (c.hasResearched(division.name, 'Self-Correcting Assemblers')) resMult *= 1.1;\\n\\treturn officeMult * prodMult * corpMult * resMult;\\n}\\n\\n/**\\n * Try to create a new product for this division, with a budget at least twice the size of the last\\n * one we bought. If we don't have enough money, or all our product slots are full,\\n * then set a reserve for the desired amount.\\n *\\n * @param {NS} ns\\n * @param {Division} division\\n * @returns amount of money spent, if any.\\n */\\nfunction createNewProduct(ns, division) {\\n\\tlet wantToSpend = 2e9; // $2b minimum.\\n\\tlet spent = 0;\\n\\tlet spentOnProducts = [];\\n\\ttry {\\n\\t\\tspentOnProducts = division.products\\n\\t\\t\\t.map((p) => budgetFromProductName(p))\\n\\t\\t\\t.sort((a, b) => a - b)\\n\\t\\t\\t.reverse();\\n\\t} catch (error) { }\\n\\tif (spentOnProducts.length > 0) {\\n\\t\\t// If our products weren't named correctly default to assuming they were 2b, 4b, 8b...\\n\\t\\twantToSpend = wantToSpend * Math.pow(2, spentOnProducts.length - 1);\\n\\t\\twantToSpend = Math.max(spentOnProducts[0] * 2, wantToSpend, myCorporation.revenue * 100);\\n\\t}\\n\\tlet productName = `${division.type}-${Math.log10(wantToSpend).toFixed(2)}`;\\n\\ttry {\\n\\t\\tc.makeProduct(division.name, hqCity, productName, wantToSpend / 2, wantToSpend / 2);\\n\\t\\tlog(ns, `Creating new product '${productName}' for ${ns.nFormat(wantToSpend, '0.0a')}.`, 'info', true);\\n\\t\\tspent += wantToSpend;\\n\\t\\textraReserve = 0;\\n\\t} catch (e) {\\n\\t\\t// If we fail to create the product, just reserve the money we want to spend.\\n\\t\\tlog(ns, `Reserving budget of ${ns.nFormat(wantToSpend, '0.0a')} for next product.`);\\n\\t\\textraReserve = wantToSpend;\\n\\t}\\n\\treturn spent;\\n}\\n\\nfunction getMaxProducts(ns, divisionName) {\\n\\tlet maxProducts = 3;\\n\\tif (c.hasResearched(divisionName, 'uPgrade: Capacity.I')) maxProducts++;\\n\\tif (c.hasResearched(divisionName, 'uPgrade: Capacity.II')) maxProducts++;\\n\\treturn maxProducts;\\n}\\n\\n/** @param {NS} ns\\n * @param waitForNext\\n */\\nasync function sleepWhileNotInStartState(ns, waitForNext = false) {\\n\\tmyCorporation = c.getCorporation();\\n\\tif (waitForNext) {\\n\\t\\twhile (myCorporation.state === 'START') {\\n\\t\\t\\tawait ns.sleep(50);\\n\\t\\t\\tmyCorporation = c.getCorporation();\\n\\t\\t}\\n\\t}\\n\\tlet lastState = 'Unknown';\\n\\twhile (myCorporation.state !== 'START') {\\n\\t\\tif (verbose && myCorporation.state !== lastState) {\\n\\t\\t\\tlog(ns, `Waiting for corporation to move into the 'START' status. Currently: '${myCorporation.state}'.`);\\n\\t\\t\\tlastState = myCorporation.state;\\n\\t\\t}\\n\\t\\tawait ns.sleep(50); // Better keep the sleep short, in case we're in catch-up mode.\\n\\t\\tmyCorporation = c.getCorporation();\\n\\t}\\n\\tmyCorporation = c.getCorporation();\\n}\\n\\n/**\\n * Buy the specified number of seats, and hire employees to fill them.\\n * @param {NS} ns\\n * @param {string} divisionName\\n * @param {string} city\\n * @param {number} seats\\n * @returns {boolean} returns true on success\\n */\\nasync function upgradeOfficeSize(ns, divisionName, city, seats) {\\n\\t// First buy the new seats.\\n\\tlet success = false;\\n\\ttry {\\n\\t\\tif (seats > 0) c.upgradeOfficeSize(divisionName, city, seats);\\n\\t\\tsuccess = true;\\n\\t} catch (e) {\\n\\t\\tlog(ns, `ERROR: Failed to upgrade office size by ${seats} seats in ${city}.`);\\n\\t\\tlog(ns, `ERROR: ${e}`);\\n\\t}\\n\\tif (!success) return false;\\n\\n\\t/**\\n\\t * Now that we have more office space, we need to hire and assign workers. Since\\n\\t * worker assignment takes a long time, add them to a queue and we'll handle it\\n\\t * later.\\n\\t */\\n\\tfillSpaceQueue.push(`${divisionName}/${city}`);\\n\\n\\treturn true;\\n}\\n\\nasync function fillOpenPositionsFromQueue(ns) {\\n\\tmyCorporation = c.getCorporation();\\n\\tfillSpaceQueue = [...new Set(fillSpaceQueue)]; // Unique\\n\\t// Try not to run past the end of a cycle..\\n\\twhile (['START'].includes(myCorporation.state) && fillSpaceQueue.length > 0) {\\n\\t\\tlet office = fillSpaceQueue.shift();\\n\\t\\tlet divisionName = office.split('/')[0];\\n\\t\\tlet cityName = office.split('/')[1];\\n\\t\\tawait fillOpenPositions(ns, divisionName, cityName);\\n\\t\\tmyCorporation = c.getCorporation();\\n\\t}\\n}\\n\\n/**\\n * Fill any open positions with employees.\\n * @param {NS} ns\\n * @param {string} divisionName\\n * @param {string} cityName\\n */\\nasync function fillOpenPositions(ns, divisionName, cityName) {\\n\\tif (options.mock) return;\\n\\tlet office = c.getOffice(divisionName, cityName);\\n\\tlet employees = office.employees.map((e) => c.getEmployee(divisionName, cityName, e));\\n\\tlet numUnassigned = employees.filter((e) => e.pos === 'Unassigned').length;\\n\\tlet openJobs = office.size - office.employees.length;\\n\\tfor (let i = 0; i < openJobs; i++) {\\n\\t\\tc.hireEmployee(divisionName, cityName);\\n\\t}\\n\\topenJobs += numUnassigned;\\n\\toffice = c.getOffice(divisionName, cityName);\\n\\tif (openJobs > 0) {\\n\\t\\tif (verbose) log(ns, `Assigning ${openJobs} new employees to work in ${divisionName}/${cityName}`);\\n\\t\\tlet employeesPerJob = Math.floor(office.employees.length / jobs.length);\\n\\t\\tlet employeesLeft = office.employees.length % jobs.length;\\n\\t\\tfor (let i = 0; i < jobs.length; i++) {\\n\\t\\t\\tconst job = jobs[i];\\n\\t\\t\\tlet num = employeesPerJob;\\n\\t\\t\\tif (i < employeesLeft) num++;\\n\\t\\t\\t// if (verbose) log(ns, `Assigning ${num} employees to work as ${job} in ${cityName}`);\\n\\t\\t\\tif (num) await c.setAutoJobAssignment(divisionName, cityName, job, num);\\n\\t\\t}\\n\\t}\\n}\\n\\n/**\\n * Attempt to find a reasonably stable price for each product. This will take several production cycles to stabilize.\\n * @param {NS} ns\\n */\\nasync function doPriceDiscovery(ns) {\\n\\tif (verbose) log(ns, `Doing price discovery for products.`);\\n\\tmyCorporation = c.getCorporation();\\n\\tfor (const division of myCorporation.divisions) {\\n\\t\\tconst industry = industries.find((i) => i.name === division.type);\\n\\t\\t// If we have Market-TA.II researched, just let that work.\\n\\t\\tlet hasMarketTA2 = c.hasResearched(division.name, 'Market-TA.II');\\n\\t\\tif (hasMarketTA2) {\\n\\t\\t\\tfor (const city of division.cities) {\\n\\t\\t\\t\\t// Default prices\\n\\t\\t\\t\\tindustry.prodMats.forEach((material) => c.sellMaterial(division.name, city, material, 'MAX', 'MP'));\\n\\t\\t\\t\\tdivision.products.forEach((product) => c.sellProduct(division.name, city, product, 'MAX', 'MP'));\\n\\t\\t\\t\\t// Turn on automation.\\n\\t\\t\\t\\tindustry.prodMats.forEach((material) => c.setMaterialMarketTA2(division.name, city, material, true));\\n\\t\\t\\t\\tdivision.products.forEach((product) => c.setProductMarketTA2(division.name, product, true));\\n\\t\\t\\t}\\n\\t\\t\\t// No need to do any other price discovery on this division.\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t// Materials are easy. Just sell them for Market price.\\n\\t\\tfor (const materialName of industry.prodMats) {\\n\\t\\t\\tfor (const city of division.cities) {\\n\\t\\t\\t\\t// sometimes in low valuation nodes might not have a warehouse yet\\n\\t\\t\\t\\tif(!c.hasWarehouse(division.name, city)){\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tc.sellMaterial(division.name, city, materialName, 'PROD', 'MP');\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Go through each product, and see if the price needs to be adjusted. We can only\\n\\t\\t// adjust the price on a per-product basis (despite the UI letting you do it\\n\\t\\t// manually, the API is busted.)\\n\\t\\tlet prevProductMultiplier = 1.0;\\n\\t\\tfor (const productName of division.products) {\\n\\t\\t\\tconst product = c.getProduct(division.name, productName);\\n\\t\\t\\tif (product.developmentProgress < 100) continue;\\n\\t\\t\\tlet sPrice = product.sCost;\\n\\t\\t\\t// sPrice ought to be of the form 'MP * 123.45'. If not, we should use the price of the last product we calculated.\\n\\t\\t\\tlet lastPriceMultiplier = prevProductMultiplier;\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tlet sMult = sPrice.split('*')[1];\\n\\t\\t\\t\\tlastPriceMultiplier = Number.parseFloat(sMult);\\n\\t\\t\\t} catch { }\\n\\t\\t\\tlet votes = [];\\n\\t\\t\\tfor (const city of division.cities) {\\n\\t\\t\\t\\t// sometimes in low valuation nodes might not have a warehouse yet\\n\\t\\t\\t\\tif(!c.hasWarehouse(division.name, city)){\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// Each city is going to \\\"vote\\\" for how they want the price to be manipulated.\\n\\t\\t\\t\\tlet qty = product.cityData[city][0];\\n\\t\\t\\t\\tlet produced = product.cityData[city][1];\\n\\t\\t\\t\\tlet sold = product.cityData[city][2];\\n\\t\\t\\t\\t// if (verbose) log(ns, `${division.name}/${city}:${product.name} (qty, prod, sold): ` + product.cityData[city].map((n) => nf(n)));\\n\\n\\t\\t\\t\\tif (produced === sold && qty === 0) {\\n\\t\\t\\t\\t\\t// We sold every item we produced. Vote to double the price.\\n\\t\\t\\t\\t\\tvotes.push(lastPriceMultiplier * 2);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// If we've accumulated a big stockpile, reduce our prices.\\n\\t\\t\\t\\telse if (qty > produced * 100) {\\n\\t\\t\\t\\t\\tvotes.push(lastPriceMultiplier * 0.9);\\n\\t\\t\\t\\t} else if (qty > produced * 40) {\\n\\t\\t\\t\\t\\tvotes.push(lastPriceMultiplier * 0.95);\\n\\t\\t\\t\\t} else if (qty > produced * 20) {\\n\\t\\t\\t\\t\\tvotes.push(lastPriceMultiplier * 0.98);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// Our stock levels must be good. If we sold less than production, then our price is probably high\\n\\t\\t\\t\\telse if (sold < produced) {\\n\\t\\t\\t\\t\\tlet newMultiplier = lastPriceMultiplier;\\n\\t\\t\\t\\t\\tif (sold <= produced * 0.5) {\\n\\t\\t\\t\\t\\t\\tnewMultiplier *= 0.75; // Our price is very high.\\n\\t\\t\\t\\t\\t} else if (sold <= produced * 0.9) {\\n\\t\\t\\t\\t\\t\\tnewMultiplier *= 0.95; // Our price is a bit high.\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tnewMultiplier *= 0.99; // Our price is just barely high\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tvotes.push(newMultiplier);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// If we sold more than production, then our price is probably low.\\n\\t\\t\\t\\telse if (produced < sold) {\\n\\t\\t\\t\\t\\tlet newMultiplier = lastPriceMultiplier;\\n\\t\\t\\t\\t\\tif (sold >= produced * 2) {\\n\\t\\t\\t\\t\\t\\tnewMultiplier *= 2; // We sold way too much. Double the price.\\n\\t\\t\\t\\t\\t} else if (sold >= produced * 1.33) {\\n\\t\\t\\t\\t\\t\\tnewMultiplier *= 1.05; // We sold a bit too much. Bring the price up a bit.\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tnewMultiplier *= 1.01;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tvotes.push(newMultiplier);\\n\\t\\t\\t\\t}\\n\\t\\t\\t} // end for-cities\\n\\t\\t\\t// All of the cities have voted. Use the lowest price that the cities have asked for.\\n\\t\\t\\tvotes.sort((a, b) => a - b);\\n\\t\\t\\tlet newMultiplier = votes[0];\\n\\t\\t\\tlet newPrice = `MP*${newMultiplier.toFixed(3)}`;\\n\\t\\t\\t// if (verbose) log(ns, `${prefix}Votes: ${votes.map((n) => nf(n)).join(', ')}.`);\\n\\t\\t\\tlet sChange = percentChange(lastPriceMultiplier, newMultiplier);\\n\\t\\t\\tif (verbose) log(ns, `    Adjusting '${product.name}' price from ${sPrice} to ${newPrice} (${sChange}).`);\\n\\t\\t\\tc.sellProduct(division.name, hqCity, product.name, 'MAX', newPrice, true);\\n\\t\\t\\tprevProductMultiplier = newMultiplier;\\n\\t\\t} // end for-products\\n\\t} // end for-divisions\\n}\\n\\n/**\\n * Expand to a new city and fill the newly-opened office positions.\\n * @param {NS} ns\\n * @param {string} divisionName\\n * @param {string} cityName\\n */\\nfunction doExpandCity(ns, divisionName, cityName) {\\n\\tc.expandCity(divisionName, cityName);\\n\\tfillSpaceQueue.push(`${divisionName}/${cityName}`);\\n}\\n\\n/**\\n * Spend hashes on something, as long as we have hacknet servers unlocked and a bit of money in the bank.\\n * @param {NS} ns\\n * @param {string} spendOn 'Sell for Corporation Funds' | 'Exchange for Corporation Research'\\n */\\n// async function doSpendHashes(ns, spendOn) {\\n// \\t// Make sure we have a decent amount of money ($100m) before spending hashes this way.\\n// \\tif (ns.getPlayer().money > 100e6 && 9 in dictSourceFiles) {\\n// \\t\\tlet spentHashes = 0;\\n// \\t\\tlet shortName = spendOn;\\n// \\t\\tif (spendOn === 'Sell for Corporation Funds') shortName = '$1B of corporate funding';\\n// \\t\\telse if (spendOn === 'Exchange for Corporation Research') shortName = '1000 research for each corporate division';\\n// \\t\\tdo {\\n// \\t\\t\\tlet numHashes = ns.hacknet.numHashes();\\n// \\t\\t\\tns.hacknet.spendHashes(spendOn);\\n// \\t\\t\\tspentHashes = numHashes - ns.hacknet.numHashes();\\n// \\t\\t\\tif (spentHashes > 0) log(ns, `  Spent ${nf(Math.round(spentHashes / 100) * 100)} hashes on ${shortName}`, 'success');\\n// \\t\\t} while (spentHashes > 0);\\n// \\t}\\n// }\\n\\n/**\\n * Log a message. Optionally, pop up a toast. Optionally, print to the terminal.\\n * @param {NS} ns\\n * @param {string} log message to log\\n * @param {string} toastStyle\\n * @param {boolean} printToTerminal\\n */\\nfunction log(ns, log, toastStyle = '', printToTerminal = false) {\\n\\tns.print(log);\\n\\tif (toastStyle) ns.toast(log, toastStyle);\\n\\tif (printToTerminal) ns.tprint(log);\\n}\\n\\n/**\\n * Assuming a product is named Industry-XX.XX, where XX.XX is the log10() of the budget.\\n * @param {string} projectName\\n * @returns {number} - the budget\\n */\\nfunction budgetFromProductName(projectName) {\\n\\tlet sExp = projectName.split('-')[1];\\n\\tlet exp = Number.parseFloat(sExp);\\n\\treturn Math.pow(10, exp);\\n}\\n\\nfunction getOfficeProductivity(office, forProduct = false) {\\n\\tconst opProd = office.employeeProd.Operations;\\n\\tconst engrProd = office.employeeProd.Engineer;\\n\\tconst mgmtProd = office.employeeProd.Management;\\n\\tconst total = opProd + engrProd + mgmtProd;\\n\\tif (total <= 0) return 0;\\n\\n\\tconst mgmtFactor = 1 + mgmtProd / (1.2 * total);\\n\\tconst prod = (Math.pow(opProd, 0.4) + Math.pow(engrProd, 0.3)) * mgmtFactor;\\n\\tconst balancingMult = 0.05;\\n\\n\\tif (forProduct) return 0.5 * balancingMult * prod;\\n\\telse return balancingMult * prod;\\n}\\n\\n/**\\n * Return the percentage change from from oldVal to NewVal.\\n * @param {number} oldVal\\n * @param {number} newVal\\n * @returns {string} formatted as \\\"+99.9%\\\"\\n */\\nfunction percentChange(oldVal, newVal) {\\n\\tlet percentChange = (newVal / oldVal) * 100 - 100;\\n\\tlet sChange = percentChange + '%';\\n\\tif (percentChange >= 0) sChange = '+' + sChange;\\n\\treturn sChange;\\n}\",\"filename\":\"megacorp.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/e97b71b8-3d5f-4b93-b303-f8d9e2568f8a\",\"moduleSequenceNumber\":276},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/f195f80f-8e0f-464d-ac4d-ed5e47e3db00\",\"moduleSequenceNumber\":259},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/f2aec90b-c57f-4ea7-8af0-fc55ceeb4dcd\",\"moduleSequenceNumber\":260},{\"filename\":\"megacorp.js\",\"url\":\"blob:https://danielyxie.github.io/03375b9d-3f99-4fd9-b6e3-504a92a69b54\",\"moduleSequenceNumber\":515}],\"dependents\":[],\"ramUsage\":1025.5,\"server\":\"home\",\"moduleSequenceNumber\":515,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"ns\",\"name\":\"corporation\",\"cost\":1022.4},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { boxTailSingleton } from 'utils.js';\\nlet ns;\\n\\n/** @param {NS} pns **/\\nexport async function main(pns) {\\n    ns = pns\\n    // ns.disableLog('ALL');\\n    // ns.clearLog();\\n    // boxTailSingleton(ns, 'player', '⛹', '200px');\\n    let lastSolverRun = Date.now();\\n    while (true) {\\n        await ns.sleep(100);\\n\\n        if (ns.getServerMaxRam('home') >= 128 && (Date.now() - lastSolverRun > 5 * 60 * 1000)) {\\n            if (ns.exec('autosolver.js', 'home') > 0)\\n                lastSolverRun = Date.now();\\n        }\\n\\n        if (ns.heart.break() < -54000 && !ns.fileExists('/tmp/ingang.txt')) {\\n            ns.exec('startGang.js', 'home');\\n        }\\n        if (!ns.fileExists('/tmp/incorp.txt') && ns.getServerMoneyAvailable('home') > 150_000_000_000) {\\n            ns.exec('megacorp.js', 'home');\\n        }\\n        const player = ns.getPlayer();\\n        if (!player.factions.includes(\\\"Bladeburners\\\")\\n            && (player.strength > 100 && player.defense > 100 && player.dexterity > 100 || player.agility > 100)) {\\n            ns.exec('joinBladeburners.js', 'home');\\n        }\\n        if (ns.getTimeSinceLastAug() > 2 * 60 * 60 * 1000) {\\n            ns.exec('aug_buyer.js', 'home', 1, '--no-soft-reset');\\n        }\\n    }\\n}\",\"filename\":\"player.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"player.js\",\"url\":\"blob:https://danielyxie.github.io/2e4cb8fe-8216-4c4e-aa77-62a2accd4c50\",\"moduleSequenceNumber\":512}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"home\",\"moduleSequenceNumber\":512,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getTimeSinceLastAug\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { list_servers } from 'opened_servers.js';\\nimport { recursiveScan } from 'find_server.js';\\nimport { boxTailSingleton, copyHackingFiles } from 'utils.js';\\n\\nfunction maxHackLevel(hackingMultiples) {\\n    if (hackingMultiples < 2)\\n        return 150;\\n    else if (hackingMultiples < 3)\\n        return 250\\n    else if (hackingMultiples < 4)\\n        return 350\\n    else if (hackingMultiples < 5)\\n        return 450\\n    else if (hackingMultiples < 6)\\n        return 600;\\n    else if (hackingMultiples < 8)\\n        return 800;\\n    return 25000;\\n}\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog('scan');\\n    ns.disableLog('getHackingLevel');\\n    ns.disableLog('installBackdoor');\\n    ns.disableLog('hasRootAccess');\\n    ns.disableLog('getServerNumPortsRequired');\\n    ns.disableLog('fileExists');\\n    ns.disableLog('sleep');\\n    const player = JSON.parse(ns.read('/tmp/player.txt'));\\n    const bitNode = JSON.parse(ns.read(`/tmp/getBitNodeMultipliers.txt`));\\n    const mult = bitNode.HackingLevelMultiplier * player.hacking_mult + bitNode.HackExpGain * player.hacking_exp_mult;\\n    const maxHack = maxHackLevel(mult);\\n    boxTailSingleton(ns, 'ensureroot', '🗝', '200px');\\n    ns.clearLog();\\n    ns.print(`mul ${mult}, max hack ${maxHack}`);\\n    let hosts = list_servers(ns).filter(o => o.indexOf('pserv') === -1 && o !== 'darkweb');\\n    let oldhostLength = hosts.length;\\n    do {\\n        let servers = [];\\n        for (const host of hosts) {\\n            const fp = `/tmp/${host.replaceAll(/[\\\\.\\\\s]/g, '_')}.txt`;\\n            const data = ns.read(fp);\\n            let server;\\n            try {\\n                server = JSON.parse(data);\\n            } catch (e) {\\n                ns.print(`${fp} BAD JSON ${e.message} ${data}`);\\n                continue;\\n            }\\n            server.hasAdminRights = server.hasAdminRights || ensureRootAccess(ns, server);\\n            await copyHackingFiles(ns, server);\\n            if (server.hasAdminRights) {\\n                server.backdoorInstalled = server.backdoorInstalled || (await ensureBackdoor(ns, server));\\n            }\\n            //ns.print(`${server.hostname} ${server.hasAdminRights} && ${server.backdoorInstalled}`);\\n            await ns.write(fp, JSON.stringify(server, null, 2), \\\"w\\\");\\n            servers.push(server);\\n        }\\n        hosts = servers\\n            .filter((s) => !(s.hasAdminRights && s.backdoorInstalled) && s.requiredHackingSkill <= maxHack)\\n            .map(o => o.hostname);\\n\\n        if (oldhostLength !== hosts.length)\\n            ns.print('Hosts to backdoor ' + JSON.stringify(hosts));\\n        oldhostLength = hosts.length;\\n        await ns.sleep(5000);\\n    } while (hosts.length > 0);\\n}\\n\\nasync function ensureBackdoor(ns, server) {\\n    if (server.requiredHackingSkill <= ns.getHackingLevel()) {\\n        if (!server.backdoorInstalled) {\\n            ns.connect('home');\\n            let route = [];\\n            recursiveScan(ns, '', 'home', server.hostname, route);\\n            for (const r of route) {\\n                if (!ns.connect(r)) {\\n                    ns.print(`Failed to connect to ${r}`);\\n                    return false;\\n                }\\n            }\\n            ns.print(\\\"backdooring \\\" + server.hostname);\\n            await ns.installBackdoor();\\n            ns.print(\\\"backdoor installed \\\" + server.hostname);\\n            ns.connect('home');\\n        }\\n        return true;\\n    }\\n    return false;\\n}\\n\\nfunction ensureRootAccess(ns, server) {\\n    if (server.hostname === \\\"home\\\" || server.purchasedByPlayer || server.hasAdminRights) return true;\\n    let portsReq = server.numOpenPortsRequired;\\n    let maxPorts = countPorts(ns);\\n    if (portsReq <= maxPorts) {\\n        if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            ns.brutessh(server.hostname);\\n        }\\n        if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            ns.httpworm(server.hostname);\\n        }\\n        if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ns.ftpcrack(server.hostname);\\n        }\\n        if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            ns.relaysmtp(server.hostname);\\n        }\\n        if (ns.fileExists(\\\"sqlInject.exe\\\", \\\"home\\\")) {\\n            ns.sqlinject(server.hostname);\\n        }\\n        ns.nuke(server.hostname);\\n        ns.print(\\\"nuked \\\" + server.hostname);\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction countPorts(ns) {\\n    let ports = 0\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ports++;\\n    }\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n        ports++;\\n    }\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n        ports++;\\n    }\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n        ports++;\\n    }\\n    if (ns.fileExists(\\\"sqlInject.exe\\\", \\\"home\\\")) {\\n        ports++;\\n    }\\n    return ports\\n}\\n\\nexport function autocomplete(data, args) {\\n    return data.servers;\\n}\",\"filename\":\"ensureRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/b45a1e0f-1ce5-4f45-8c45-f323b02dce24\",\"moduleSequenceNumber\":1500434},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/cb0f71b5-b528-403a-8d73-49e95856bf8f\",\"moduleSequenceNumber\":1500417},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/8be822da-a55a-4a83-89af-c675d8f89c4f\",\"moduleSequenceNumber\":1500418},{\"filename\":\"find_server.js\",\"url\":\"blob:https://danielyxie.github.io/bcc149c2-c8e5-40db-aeb7-cead9a20ca98\",\"moduleSequenceNumber\":1500419},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/5a84addb-f130-4e5f-b880-d5f893328710\",\"moduleSequenceNumber\":1500417},{\"filename\":\"ensureRoot.js\",\"url\":\"blob:https://danielyxie.github.io/6d20ddc5-30a0-4372-be10-2e3eb20b0f22\",\"moduleSequenceNumber\":1500593}],\"dependents\":[],\"ramUsage\":7.35,\"server\":\"home\",\"moduleSequenceNumber\":280,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let doc = eval(\\\"document\\\");\\n\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.tail();\\n    ns.travelToCity(\\\"Aevum\\\");\\n    ns.goToLocation(\\\"Iker Molina Casino\\\");\\n\\n    await playRoulette(ns);\\n    const alertSpan = find(`//span[text() = \\\"${kickedOutAlert}\\\"]`);\\n    if (alertSpan) {\\n        find('/html/body/div[4]/div[1]')?.click();\\n    }\\n}\\n\\nfunction arraysPercentEqual(a, b) {\\n    if (a === b) return 1;\\n    if (a == null || b == null) return 0;\\n    if (a.length !== b.length) return 0;\\n\\n    // If you don't care about the order of the elements inside\\n    // the array, you should sort both arrays here.\\n    // Please note that calling sort on an array will modify that array.\\n    // you might want to clone your array first.\\n    let equalness = 0;\\n    for (let i = 0; i < a.length; ++i) {\\n        if (a[i] === b[i]) equalness++;\\n    }\\n    return equalness / a.length;\\n}\\n\\nasync function playRoulette(ns) {\\n    const btnRoulette = find(\\\"//button[contains(text(), 'roulette')]\\\");\\n    if (!btnRoulette) return ns.tprint(\\\"ERROR: Attempt to automatically navigate to the Casino appears to have failed.\\\");\\n    const startSeed = new Date().getTime();\\n    await click(btnRoulette);\\n    const after = new Date().getTime();\\n    const seedRange = after - startSeed;\\n    ns.print(`whrngSeedRange ${seedRange}`);\\n    await ns.sleep(1);\\n    const minPlay = 0;\\n    const maxPlay = 1e7;\\n    const inputWager = find(\\\"//input\\\");\\n    // inputWager.value = minPlay;\\n    await setText2(inputWager, `${minPlay}`);\\n    const sampleSize = 10;\\n    const button1 = find(\\\"//button[text() = '1']\\\");\\n    const results = [];\\n    for (let i = 0; i < sampleSize; i++) {\\n        await click(button1);\\n        const r = await getSpinResult(ns);\\n\\n        if (r === -1) {\\n            ns.print('Results not found quiting leave casino try again');\\n            return;\\n        }\\n        results.push(r);\\n    }\\n    ns.print(`Results ${results.map(o => ns.nFormat(o, '00')).join(',')}`);\\n    let goodSeeds = [];\\n    for (let j = 0; j < seedRange; j++) {\\n        const seedTest = []\\n        let whrng = new WHRNG(startSeed + j);\\n        for (let i = 0; i < sampleSize; i++) {\\n            seedTest.push(whrng.randomRouletteNumber());\\n        }\\n        const percentEqual = arraysPercentEqual(results, seedTest);\\n        if (percentEqual >= .9) {\\n            goodSeeds.push(whrng);\\n            ns.print(`Seed is ${startSeed + j} with equality of ${percentEqual.toPrecision(2)} took ${j} attempts`);\\n        }\\n        ns.print(`Seed ${ns.nFormat(j, '00')} ${seedTest.map(o => ns.nFormat(o, '00')).join(',')} ${percentEqual.toPrecision(2)} ${whrng.v}`);\\n    }\\n    if (goodSeeds.length === 1) {\\n        await playToWinRoulette(ns, goodSeeds[0], inputWager, maxPlay);\\n    } else if (goodSeeds.length > 1) {\\n        ns.print('Too many match, increase sample size');\\n        ns.goToLocation('Slums');\\n        await playRoulette(ns);\\n    } else {\\n        ns.print('No seeds match, probably a win translated to a loss and incremented seed');\\n        ns.goToLocation('Slums');\\n        await playRoulette(ns);\\n    }\\n}\\n\\nconst kickedOutAlert = 'Alright cheater get out of here. You\\\\'re not allowed here anymore.';\\nasync function playToWinRoulette(ns, whrng, inputWager, maxPlay) {\\n    // maxPlay = 0; //testing value\\n    let losses = 0;\\n    let plays = 4;\\n    // while (true) {\\n    while (!find(`//span[text() = \\\"${kickedOutAlert}\\\"]`)) {\\n        // inputWager.value = Math.floor(Math.min(maxPlay, ns.getPlayer().money));\\n        const halfCash = ns.getServerMoneyAvailable('home') / 2 ;\\n        if (halfCash < 1) throw new Error('Out of cash');\\n        await setText2(inputWager, `${Math.floor(Math.min(maxPlay, halfCash))}`);\\n        const luckynumber = whrng.randomRouletteNumber();\\n        const button = find(`//button[text() = '${luckynumber}']`);\\n        // ns.print(`Clicking ${button.innerHTML}`);\\n        await click(button);\\n        plays++;\\n        const result = await getSpinResult(ns);\\n        ns.print(`number lucky ${luckynumber} actual ${result}`);\\n        if (luckynumber !== result) {\\n            losses++;\\n            // uncomment this for ver > 1.6.4\\n            // whrng.randomRouletteNumber();\\n        }\\n        if (losses / plays > .91) {\\n            ns.print('Somethings broken loses are greater than expected');\\n            return;\\n        }\\n    }\\n}\\n\\nasync function getSpinResult(ns) {\\n    while (true) {\\n        let result1 = find(\\\"//h4[contains(text(), 'lost')]\\\") || find(\\\"//h4[contains(text(), 'Lost')]\\\");\\n        let result2 = find(\\\"//h4[contains(text(), 'won')]\\\") || find(\\\"//h4[contains(text(), 'Won')]\\\");\\n        if (result1 == null && result2 == null) {\\n            await ns.sleep(100);\\n        }\\n        else {\\n            break;\\n        }\\n    }\\n\\n    await ns.sleep(20);\\n    let resultAnswer = find(\\\"(//h4)[2]\\\");\\n    if (resultAnswer != null) {\\n        let answer = resultAnswer.textContent;\\n        return parseInt(answer.replaceAll(/B|R/g, ''));\\n    }\\n\\n    return -1;\\n}\\n\\nconst WHRNG = function (totalPlaytime) {\\n    // This one is seeded by the players total play time.\\n    const v = (totalPlaytime / 1000) % 30000;\\n    this.s1 = v;\\n    this.s2 = v;\\n    this.s3 = v;\\n    this.v = v;\\n    this.step = function () {\\n        this.s1 = (171 * this.s1) % 30269;\\n        this.s2 = (172 * this.s2) % 30307;\\n        this.s3 = (170 * this.s3) % 30323;\\n    }\\n    this.random = function () {\\n        this.step();\\n        return (this.s1 / 30269.0 + this.s2 / 30307.0 + this.s3 / 30323.0) % 1.0;\\n    }\\n    this.randomRouletteNumber = () => {\\n        return Math.floor(this.random() * 37);\\n    }\\n}\\n\\n// Some DOM helpers (partial credit to ShamesBond)\\nasync function click(elem) { await elem[Object.keys(elem)[1]].onClick({ isTrusted: true }); }\\nasync function setText2(input, text) { await input[Object.keys(input)[1]].onChange({ isTrusted: true, currentTarget: { value: text } }); }\\nfunction find(xpath) { return doc.evaluate(xpath, doc, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue; }\",\"filename\":\"casinoBreaker.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"casinoBreaker.js\",\"url\":\"blob:https://danielyxie.github.io/f70be133-8b86-4784-ac7a-7e196f0d272e\",\"moduleSequenceNumber\":1500456}],\"dependents\":[],\"ramUsage\":8.7,\"server\":\"home\",\"moduleSequenceNumber\":281,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.goToLocation\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nNew node init script must stay below 32GB\\n- make > $200k\\n- Hack Casino for $10b\\n- Upgrade home ram to 1TB\\n- Run init.js\\n */\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getServerMaxRam');\\n\\tns.disableLog('getUpgradeHomeRamCost');\\n\\tns.disableLog('getPlayer');\\n\\tns.clearLog();\\n\\tns.tail();\\n\\tlet casinoBreakerPid = 0;\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(100);\\n\\t\\tconst player = ns.getPlayer();\\n\\n\\t\\t//need a min of 1030 for corporation apis\\n\\t\\tif (ns.getServerMaxRam('home') <= 1024 && player.money > ns.getUpgradeHomeRamCost()) {\\n\\t\\t\\tns.upgradeHomeRam();\\n\\t\\t}\\n\\n\\t\\tif (casinoBreakerPid === -1 && ns.getServerMaxRam('home') > 1024) {\\n\\t\\t\\t//All done time to init\\n\\t\\t\\tns.exec('init.js', 'home');\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tif (casinoBreakerPid !== 0) {\\n\\t\\t\\tcasinoBreakerPid = ns.isRunning(casinoBreakerPid) ? casinoBreakerPid : -1;\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (player.money > 200000 && casinoBreakerPid === 0) {\\n\\t\\t\\twhile (ns.isBusy()) {\\n\\t\\t\\t\\t// need to finish crime before hitting the casino\\n\\t\\t\\t\\tawait ns.sleep(20);\\n\\t\\t\\t}\\n\\t\\t\\tcasinoBreakerPid = ns.exec('casinoBreaker.js', 'home');\\n\\t\\t\\tif (casinoBreakerPid === 0) {\\n\\t\\t\\t\\tcasinoBreakerPid = ns.getRunningScript('casinoBreaker.js', 'home').pid;\\n\\t\\t\\t\\tns.print(`casinoBreakerPid ${casinoBreakerPid}`);\\n\\t\\t\\t}\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (ns.isBusy() || casinoBreakerPid !== 0) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.commitCrime('shoplift');\\n\\t}\\n}\",\"filename\":\"bootstrap32GB.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"bootstrap32GB.js\",\"url\":\"blob:https://danielyxie.github.io/29d3acca-c12f-4000-8561-d48c06f0df3e\",\"moduleSequenceNumber\":1439282}],\"dependents\":[],\"ramUsage\":13.85,\"server\":\"home\",\"moduleSequenceNumber\":282,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"singularity.commitCrime\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { list_servers } from 'opened_servers.js';\\nimport { boxTailSingleton, ramUsage } from 'utils.js';\\nimport { calculateGrowThreads } from './growthFunctions.js';\\n\\nlet ns;\\nconst weaken_script = \\\"weaken.js\\\";\\nconst grow_script = \\\"grow.js\\\";\\nconst hack_script = \\\"hack.js\\\";\\nlet hack_scriptRam = 1.7;\\nlet grow_scriptRam, weaken_scriptRam = 1.75;\\nlet ServerGrowthRate = 1;\\nlet serversForExecution = [];\\nlet hackStatus = [];\\n/** @param {NS} pns **/\\nexport async function main(pns) {\\n\\tns = pns;\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('exec')\\n\\tboxTailSingleton(ns, 'mcp', '🥾', '200px');\\n\\tns.clearLog();\\n\\tweaken_scriptRam = ns.getScriptRam(weaken_script, \\\"home\\\");\\n\\tgrow_scriptRam = ns.getScriptRam(grow_script, \\\"home\\\");\\n\\thack_scriptRam = ns.getScriptRam(hack_script, \\\"home\\\");\\n\\t; ({ ServerGrowthRate } = JSON.parse(ns.read('/tmp/getBitNodeMultipliers.txt')))\\n\\tawait run();\\n}\\nlet hackPercent = .5;\\nlet bonusServers = 0;\\nasync function updateServerLists() {\\n\\tserversForExecution = ['home'].concat(list_servers(ns).filter(s => ns.hasRootAccess(s)));\\n\\tconst beforeHackStatusLength = hackStatus.length;\\n\\tconst serversToHack = list_servers(ns).filter(s => ns.hasRootAccess(s)\\n\\t\\t&& ns.getServerMaxMoney(s) > 0\\n\\t\\t&& ns.getServerRequiredHackingLevel(s) <= ns.getHackingLevel() / 2);\\n\\n\\thackStatus = [];\\n\\tconst skippedServer = []\\n\\tconst player = ns.getPlayer();\\n\\tfor (const server of serversToHack) {\\n\\t\\tconst s = ns.getServer(server);\\n\\t\\ts.hackDifficulty = s.minDifficulty;\\n\\t\\t// check that hacks will succeed. Could be redundant check\\n\\t\\tconst hackChance = ns.formulas.hacking.hackChance(s, player);\\n\\t\\tif (hackChance < .99) {\\n\\t\\t\\t//ns.print(`Hack chance to low ${s} ${(hackChance * 100).toFixed(2)}%`)\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (s.serverGrowth < 40) {\\n\\t\\t\\t//ns.print(`Growth is to low ${s} ${s.serverGrowth}%`)\\n\\t\\t\\tskippedServer.push({ server: server });\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\thackStatus.push({ server: server });\\n\\t}\\n\\tconst lowRamUse = ramUsage(ns) < .5;\\n\\tconst oldHackPercent = hackPercent;\\n\\tconst oldBonusServers = bonusServers;\\n\\tif (lowRamUse) {\\n\\t\\thackPercent = Math.min(hackPercent + .1, .95);\\n\\t\\tif (hackPercent === .95) {\\n\\t\\t\\tbonusServers = Math.min(bonusServers + 1, skippedServer.length);\\n\\t\\t\\thackStatus.push(...skippedServer.slice(0, bonusServers));\\n\\t\\t}\\n\\t} else {\\n\\t\\tbonusServers = Math.max(bonusServers - 1, 0);\\n\\t\\tif (bonusServers <= 0) hackPercent = Math.max(hackPercent - .1, .5);\\n\\t}\\n\\tif (oldHackPercent !== hackPercent || oldBonusServers !== bonusServers) ns.tprint(`BonusServers added ${bonusServers} Hack percent ${hackPercent}`);\\n\\t// after aug install just start hacking on n00dles fist\\n\\tif (hackStatus.length === 0) hackStatus.push({ server: 'n00dles' });\\n\\tif (beforeHackStatusLength < hackStatus.length) ns.tprint(`Servers to hack ${hackStatus.length} ${hackStatus.map(o => o.server).join(',')}`);\\n}\\n\\nasync function run() {\\n\\tlet i = 0;\\n\\tawait updateServerLists();\\n\\tlet updateAfter = Date.now().valueOf() + 30 * 1000;\\n\\twhile (true) {\\n\\t\\tif (!hackStatus[i].pid || (hackStatus[i].pid && !ns.isRunning(hackStatus[i].pid.weaken))) {\\n\\t\\t\\tconst ret = await runHGW(hackStatus[i].server);\\n\\t\\t\\thackStatus[i] = ret;\\n\\t\\t}\\n\\t\\ti = (i + 1) % hackStatus.length;\\n\\t\\tawait ns.sleep(20);\\n\\t\\tif (updateAfter < Date.now()) {\\n\\t\\t\\tupdateAfter = Date.now() + 30 * 1000;\\n\\t\\t\\tawait updateServerLists();\\n\\t\\t\\ti = 0;\\n\\t\\t}\\n\\t}\\n}\\n\\nasync function runHGW(target) {\\n\\tconst currentSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\n\\tif (currentSec > 2) {\\n\\t\\tconst weaken = await runWeaken(target, 1, 1);\\n\\t\\treturn { server: target, promise: ns.asleep(weaken.time + 200), pid: { weaken: weaken.pid } };\\n\\t}\\n\\tconst hack = await runHack(target);\\n\\tconst grow = await runGrow(target, hack.amount);\\n\\tconst weaken = await runWeaken(target, hack.threadsCommitted, grow.threadsCommitted);\\n\\treturn { server: target, promise: ns.asleep(weaken.time + 200), pid: { weaken: weaken.pid, hack: hack.pid, grow: grow.pid } };\\n}\\n\\n//TODO move thread planning for HGW all together before exec\\nasync function runWeaken(target, hackThreads, growThreads) {\\n\\tconst ret = { time: 0, threadsCommitted: 0, pid: 0 };\\n\\tlet security = ns.growthAnalyzeSecurity(growThreads);\\n\\tsecurity += ns.hackAnalyzeSecurity(hackThreads);\\n\\t// slash the security if not at min to prep it\\n\\tconst currentSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\n\\tif (currentSec > 0) {\\n\\t\\tsecurity += currentSec\\n\\t}\\n\\tconst threadsNeeded = Math.max(Math.ceil(security / ns.weakenAnalyze(1, 1)), 1);\\n\\tconst homeThreadsNeeded = Math.max(Math.ceil(security / ns.weakenAnalyze(1, getCores('home'))), 1);\\n\\tconst { host, threads_available } = getHostAndThreads(weaken_scriptRam, threadsNeeded, homeThreadsNeeded);\\n\\tif (!host) return ret;\\n\\tlet threadToUse = Math.min(threads_available, threadsNeeded);\\n\\tif (host === 'home') { //hurray home for grow\\n\\t\\tthreadToUse = Math.min(threads_available, homeThreadsNeeded);\\n\\t}\\n\\tret.pid = await ns.exec(weaken_script, host, threadToUse, target, Math.random());\\n\\tret.time = ns.formulas.hacking.weakenTime(ns.getServer(target), ns.getPlayer());\\n\\tconst message = `Weak ${host}[${threadToUse}] -> ${target} in ${ns.tFormat(ret.time)}]`;\\n\\tif (ret.pid === 0) {\\n\\t\\tns.tprint('FAILED ' + message);\\n\\t\\tns.print('FAILED ' + message);\\n\\t\\treturn ret;\\n\\t}\\n\\tret.threadsCommitted = threadToUse;\\n\\treturn ret;\\n}\\n\\nasync function runGrow(target, hackAmount) {\\n\\tconst ret = { time: 0, threadsCommitted: 0, pid: 0 };\\n\\t// grow to counter the hack or just to fill up the server with money\\n\\tconst moneyToGrow = Math.max(hackAmount, ns.getServerMaxMoney(target) - ns.getServerMoneyAvailable(target));\\n\\tconst homeThreadsNeeded = Math.floor(calculateGrowThreads(ns, target, moneyToGrow, getCores('home'), { ServerGrowthRate }));\\n\\tconst threadsNeeded = Math.floor(calculateGrowThreads(ns, target, moneyToGrow, 1, { ServerGrowthRate }));\\n\\tconst { host, threads_available } = getHostAndThreads(grow_scriptRam, threadsNeeded, homeThreadsNeeded);\\n\\tif (!host) return ret;\\n\\tlet threadToUse = Math.min(threads_available, threadsNeeded);\\n\\tif (host === 'home') { //hurray home for grow\\n\\t\\tthreadToUse = Math.min(threads_available, homeThreadsNeeded);\\n\\t}\\n\\tif (threadToUse < 1) {\\n\\t\\treturn ret;\\n\\t}\\n\\tret.pid = await ns.exec(grow_script, host, threadToUse, target, Math.random());\\n\\tret.time = ns.formulas.hacking.growTime(ns.getServer(target), ns.getPlayer());\\n\\tconst message = `Grow ${host}[${threadToUse}] -> ${target} in ${ns.tFormat(ret.time)}]`;\\n\\tif (ret.pid === 0) {\\n\\t\\tns.tprint('FAILED ' + message);\\n\\t\\tns.print('FAILED ' + message);\\n\\t\\treturn ret;\\n\\t}\\n\\tret.threadsCommitted = threadToUse;\\n\\treturn ret;\\n}\\n\\nasync function runHack(target) {\\n\\tconst ret = { time: 0, threadsCommitted: 0, pid: 0, amount: 0 };\\n\\tconst threadsNeeded = Math.max(Math.floor(hackPercent / ns.formulas.hacking.hackPercent(ns.getServer(target), ns.getPlayer())), 1);\\n\\tconst { host, threads_available } = getHostAndThreads(hack_scriptRam, threadsNeeded, threadsNeeded * 1.1 /*try to dissuade hacks on home*/);\\n\\tif (!host) return ret;\\n\\tlet threadToUse = Math.min(threads_available, threadsNeeded);\\n\\tif (ns.getServerMoneyAvailable(target) / ns.getServerMaxMoney(target) < .9) {\\n\\t\\tthreadToUse = 1; // 0 or 1 just don't hack if server is not prepped\\n\\t}\\n\\n\\tconst cashingOut = ns.hackAnalyze(target) * threadToUse * ns.getServerMoneyAvailable(target);\\n\\tret.pid = await ns.exec(hack_script, host, threadToUse, target, Math.random());\\n\\tret.time = ns.formulas.hacking.hackTime(ns.getServer(target), ns.getPlayer());\\n\\tconst message = `Hack ${host}[${threadToUse}] -> ${target}[${ns.nFormat(cashingOut, \\\"($ 0.00 a)\\\")} in ${ns.tFormat(ret.time)}]`;\\n\\tif (ret.pid === 0) {\\n\\t\\tns.tprint('FAILED ' + message);\\n\\t\\tns.print('FAILED ' + message);\\n\\t\\treturn ret;\\n\\t}\\n\\tret.amount = cashingOut;\\n\\tns.print(message);\\n\\tret.threadsCommitted = threadToUse;\\n\\treturn ret;\\n}\\n\\nconst getCores = (host) => ns.getServer(host).cpuCores;\\nfunction getHostAndThreads(scriptRam, threadsNeeded, threadsNeededOnHome) {\\n\\tthreadsNeededOnHome = threadsNeededOnHome || threadsNeeded;\\n\\tconst hosts = serversForExecution.map((host) => {\\n\\t\\tlet maxRam = ns.getServerMaxRam(host);\\n\\t\\t// reserve some ram for other scripts\\n\\t\\tif (host === 'home') {\\n\\t\\t\\tmaxRam = Math.max(maxRam * .75, maxRam - 128);\\n\\t\\t}\\n\\t\\tconst threads_available = Math.floor((maxRam - ns.getServerUsedRam(host)) / scriptRam);\\n\\t\\tconst threadsAvailMinusNeed = host === 'home' ? threads_available - threadsNeededOnHome : threads_available - threadsNeeded;\\n\\t\\treturn { threads_available, host, threadsAvailMinusNeed };\\n\\t}).filter((hostO) => hostO.threads_available >= 1);\\n\\tif (hosts.length <= 0) return { host: null, threads_available: 0 };\\n\\thosts.sort((a, b) => a.threadsAvailMinusNeed - b.threadsAvailMinusNeed);\\n\\t// take the closet fit from front of the array or just the biggest threads available from the end\\n\\treturn hosts.filter(o => o.threadsAvailMinusNeed >= 0).shift() || hosts.pop();\\n}\",\"filename\":\"mcp_hgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"growthFunctions.js\",\"url\":\"blob:https://danielyxie.github.io/7e32dd36-0db5-47fb-adf1-23c9a91dc1cc\",\"moduleSequenceNumber\":284},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/f750ece6-1daf-4564-87e8-960147079419\",\"moduleSequenceNumber\":276},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/f2b17a6e-d055-4d00-8474-94a69b2e2d78\",\"moduleSequenceNumber\":259},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/595af1f0-0f7b-4b03-9d95-a9054d70f2d8\",\"moduleSequenceNumber\":260},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/67f2fb20-316a-4e5c-a681-133cd0fb64cf\",\"moduleSequenceNumber\":259},{\"filename\":\"mcp_hgw.js\",\"url\":\"blob:https://danielyxie.github.io/6349bae5-275d-4c03-b972-9a45623ccd4b\",\"moduleSequenceNumber\":518}],\"dependents\":[],\"ramUsage\":12.5,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":518,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @author modar <gist.github.com/xmodar>\\n * {@link https://www.reddit.com/r/Bitburner/comments/tgtkr1/here_you_go_i_fixed_growthanalyze_and_growpercent/}\\n *\\n * @typedef {Partial<{\\n *   moneyAvailable: number;\\n *   hackDifficulty: number;\\n *   ServerGrowthRate: number // ns.getBitNodeMultipliers().ServerGrowthRate\\n *   ; // https://github.com/danielyxie/bitburner/blob/dev/src/BitNode/BitNode.tsx\\n * }>} GrowOptions\\n */\\n\\nexport function calculateGrowGain(ns, host, threads = 1, cores = 1, opts = {}) {\\n    threads = Math.max(Math.floor(threads), 0);\\n    const moneyMax = ns.getServerMaxMoney(host);\\n    const { moneyAvailable = ns.getServerMoneyAvailable(host) } = opts;\\n    const rate = growPercent(ns, host, threads, cores, opts);\\n    return Math.min(moneyMax, rate * (moneyAvailable + threads)) - moneyAvailable;\\n}\\n\\n/** @param {number} gain money to be added to the server after grow */\\nexport function calculateGrowThreads(ns, host, gain, cores = 1, opts = {}) {\\n    const moneyMax = ns.getServerMaxMoney(host);\\n    const { moneyAvailable = ns.getServerMoneyAvailable(host) } = opts;\\n    const money = Math.min(Math.max(moneyAvailable + gain, 0), moneyMax);\\n    const rate = Math.log(growPercent(ns, host, 1, cores, opts));\\n    const logX = Math.log(money * rate) + moneyAvailable * rate;\\n    return Math.max(lambertWLog(logX) / rate - moneyAvailable, 0);\\n}\\n\\nfunction growPercent(ns, host, threads = 1, cores = 1, opts = {}) {\\n    const { ServerGrowthRate = 1, hackDifficulty = ns.getServerSecurityLevel(host), } = opts;\\n    const growth = ns.getServerGrowth(host) / 100;\\n    const multiplier = ns.getPlayer().hacking_grow_mult;\\n    const base = Math.min(1 + 0.03 / hackDifficulty, 1.0035);\\n    const power = growth * ServerGrowthRate * multiplier * ((cores + 15) / 16);\\n    return base ** (power * threads);\\n}\\n\\n/**\\n * Lambert W-function for log(x) when k = 0\\n * {@link https://gist.github.com/xmodar/baa392fc2bec447d10c2c20bbdcaf687}\\n */\\nfunction lambertWLog(logX) {\\n    if (isNaN(logX)) return NaN;\\n    const logXE = logX + 1;\\n    const logY = 0.5 * log1Exp(logXE);\\n    const logZ = Math.log(log1Exp(logY));\\n    const logN = log1Exp(0.13938040121300527 + logY);\\n    const logD = log1Exp(-0.7875514895451805 + logZ);\\n    let w = -1 + 2.036 * (logN - logD);\\n    w *= (logXE - Math.log(w)) / (1 + w);\\n    w *= (logXE - Math.log(w)) / (1 + w);\\n    w *= (logXE - Math.log(w)) / (1 + w);\\n    return isNaN(w) ? (logXE < 0 ? 0 : Infinity) : w;\\n}\\nconst log1Exp = (x) => x <= 0 ? Math.log(1 + Math.exp(x)) : x + log1Exp(-x);\",\"filename\":\"growthFunctions.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"home\",\"moduleSequenceNumber\":284,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Basic window class that other widgets are built on\\nexport class curse_window {\\n\\tconstructor (ns, border=false, height=27, width=51) {\\n\\t\\tthis.ns = ns;\\n\\t\\t\\n\\t\\t// Disable log to prevent it from interfering with display\\n\\t\\tthis.ns.disableLog(\\\"ALL\\\");\\n\\t\\t\\n\\t\\t// Relationship to other windows\\n\\t\\t// isChild = false means this is the object running the display\\n\\t\\tthis.ischild = false;\\n\\t\\tthis.childwin = [];\\n\\t\\t\\n\\t\\t// Size of the buffer being output to the log\\n\\t\\tthis.height = height;\\n\\t\\tthis.width = width;\\n\\t\\t\\n\\t\\t// Location coordinates if set as child\\n\\t\\t// Relative to parent window\\n\\t\\tthis.x = 0;\\n\\t\\tthis.y = 0;\\n\\t\\t\\n\\t\\t// TODO: Unused, planned to sort windows by priority\\n\\t\\tthis.layer = 0;\\n\\t\\t\\n\\t\\t// Window can have a border, default false\\n\\t\\tthis.border = border;\\n\\t\\tthis.border_top = true;\\n\\t\\tthis.border_bottom = true;\\n\\t\\tthis.border_left = true;\\n\\t\\tthis.border_right = true;\\n\\t\\t\\n\\t\\t// Run once to build the buffer\\n\\t\\tthis.clearBuffer();\\n\\t}\\n\\t\\n\\t// Convenience handler to attach child window\\n\\taddChild(handle, x, y) {\\n\\t\\thandle.setPosition(x, y);\\n\\t\\thandle.ischild = true;\\n\\t\\thandle.parenthandle = this;\\n\\t\\tthis.childwin.push(handle);\\n\\t}\\n\\t\\n\\t// Get dimensions of the drawing area\\n\\tgetSubDimensions () {\\n\\t\\tlet bordervbuff = 0;\\n\\t\\tlet borderwbuff = 0;\\n\\t\\tif (this.border) {\\n\\t\\t\\tif (this.border_top) {\\n\\t\\t\\t\\tbordervbuff++\\n\\t\\t\\t}\\n\\t\\t\\tif (this.border_bottom) {\\n\\t\\t\\t\\tbordervbuff++\\n\\t\\t\\t}\\n\\t\\t\\tif (this.border_left) {\\n\\t\\t\\t\\tborderwbuff++\\n\\t\\t\\t}\\n\\t\\t\\tif (this.border_right) {\\n\\t\\t\\t\\tborderwbuff++\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn [this.width - borderwbuff, this.height - bordervbuff];\\n\\t}\\n\\t\\n\\t// Resize the window\\n\\tsetDimensions (height, width) {\\n\\t\\tthis.height = height;\\n\\t\\tthis.width = width;\\n\\t\\tthis.clearBuffer();\\n\\t}\\n\\t\\n\\t// Change position relative to parent window\\n\\tsetPosition (x, y) {\\n\\t\\tthis.x = x;\\n\\t\\tthis.y = y;\\n\\t}\\n\\t\\n\\t// Internal function used to print over existing text\\n\\tsubstringReplace (index, source, text) {\\n\\t\\tlet leftString = source.substring(0, index);\\n\\t\\tlet rightString = source.substring(index + text.length);\\n\\t\\treturn [leftString, text, rightString].join('');\\n\\t}\\n\\t\\n\\t// Basic function to arbitrarily place text in buffer\\n\\taddText(x, y, text) {\\n\\t\\t\\n\\t\\t// Use adjusted coordinates to adjust for border\\n\\t\\tlet ay = y;\\n\\t\\tlet ax = x;\\n\\t\\tif (this.border) {\\n\\t\\t\\tif (this.border_left) {\\n\\t\\t\\t\\tax++;\\n\\t\\t\\t}\\n\\t\\t\\tif (this.border_bottom) {\\n\\t\\t\\t\\tay++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\n\\t\\tay = this.height - ay - 1;\\n\\t\\t\\n\\t\\tlet drawArea = this.getSubDimensions();\\n\\t\\t\\n\\t\\tif (y < drawArea[1] && x < drawArea[0]) {\\n\\t\\t\\t\\n\\t\\t\\t// If final line is longer than window, truncate it\\n\\t\\t\\tif (text.length + ax > this.width) {\\n\\t\\t\\t\\ttext = text.substring(0, this.width - ax);\\n\\t\\t\\t}\\n\\t\\t\\n\\t\\t\\t// Use substringReplace to overwrite existing buffer line\\n\\t\\t\\tthis.buffer[ay] = this.substringReplace(ax, this.buffer[ay], text);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Function to create an empty buffer\\n\\t// Bulk of work is to create borders\\n\\tclearBuffer() {\\n\\t\\tif (this.border) {\\n\\t\\t\\tthis.buffer = [];\\n\\t\\t\\tif (this.border_top) {\\n\\t\\t\\t\\tlet line = '─'.repeat(this.width);\\n\\t\\t\\t\\tif (this.border_left) {\\n\\t\\t\\t\\t\\tline = this.substringReplace(0, line, '┌');\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (this.border_right) {\\n\\t\\t\\t\\t\\tline = this.substringReplace(line.length - 1, line, '┐');\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tthis.buffer.push(line);\\n\\t\\t\\t}\\n\\t\\t\\tlet line = ' '.repeat(this.width);\\n\\t\\t\\tif (this.border_left) {\\n\\t\\t\\t\\tline = this.substringReplace(0, line, '│');\\n\\t\\t\\t}\\n\\t\\t\\tif (this.border_right) {\\n\\t\\t\\t\\tline = this.substringReplace(line.length - 1, line, '│');\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\twhile (this.buffer.length < this.height) {\\n\\t\\t\\t\\tthis.buffer.push(line);\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\tif (this.border_bottom) {\\n\\t\\t\\t\\tthis.buffer.pop();\\n\\t\\t\\t\\tlet line = '─'.repeat(this.width);\\n\\t\\t\\t\\tif (this.border_left) {\\n\\t\\t\\t\\t\\tline = this.substringReplace(0, line, '└');\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (this.border_right) {\\n\\t\\t\\t\\t\\tline = this.substringReplace(line.length - 1, line, '┘');\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tthis.buffer.push(line);\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t} else {\\n\\t\\t\\t// Really simple whitespace buffer if there's no borders\\n\\t\\t\\tthis.buffer = [];\\n\\t\\t\\tlet line = ' '.repeat(this.width);\\n\\t\\t\\twhile (this.buffer.length < this.height) {\\n\\t\\t\\t\\tthis.buffer.push(line);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Print in a single action for experiency\\n\\tdrawToLog () {\\n\\t\\tthis.ns.print(this.buffer.join('\\\\n'));\\n\\t}\\n\\t\\n\\t// Function to composite together the output of this window and all it's\\n\\t// children.\\n\\trefreshBuffer(print=true) {\\n\\t\\t// Proactively clear the log if we're about to print\\n\\t\\tif (!this.ischild && print) {\\n\\t\\t\\tthis.ns.clearLog();\\n\\t\\t}\\n\\t\\t\\n\\t\\t// Go through children\\n\\t\\t// TODO: Add layer support\\n\\t\\tfor (let i = 0; i < this.childwin.length; i++) {\\n\\t\\t\\tconst child = this.childwin[i];\\n\\t\\t\\tchild.render(false);\\n\\t\\t\\tlet cbuffer = this.childwin[i].buffer;\\n\\t\\t\\t\\n\\t\\t\\t// Composite the buffers with the existing buffer\\n\\t\\t\\tfor (let y = 0; y < cbuffer.length; y++) {\\n\\t\\t\\t\\tlet index = (this.buffer.length - this.childwin[i].y - this.childwin[i].height) + y;\\n\\t\\t\\t\\tthis.buffer[index] = this.substringReplace(this.childwin[i].x, this.buffer[index], cbuffer[y]);\\n\\t\\t\\t\\tif (this.buffer[index].length > this.width) {\\n\\t\\t\\t\\t\\tthis.buffer[index] = this.buffer[index].slice(0,this.width);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t\\n\\trenderParent() {\\n\\t\\tif (this.ischild) {\\n\\t\\t\\tthis.parenthandle.renderParent()\\n\\t\\t} else {\\n\\t\\t\\tthis.render()\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Function for getting the buffer as a string rather than printing\\n\\t// Because ns is not used anywhere in this, is good for asynchronous rendering\\n\\tasync renderToString(clear=false, refresh=true) {\\n\\t\\tif (refresh) {\\n\\t\\t\\tthis.refreshBuffer(false)\\n\\t\\t}\\n\\t\\tlet output = this.buffer.join('\\\\n');\\n\\t\\tif (clear) {\\n\\t\\t\\tthis.clearBuffer();\\n\\t\\t}\\n\\t\\treturn output;\\n\\t}\\n\\t\\n\\t// Function compiling together multiple operations\\n\\t// Will print the buffer, but also supports simple paging to keep underlying\\n\\t// content unchanged.\\n\\trender (clear=false, refresh=true ) {\\n\\t\\tlet tempbuffer = []\\n\\t\\tif (!clear) {\\n\\t\\t\\ttempbuffer = [...this.buffer];\\n\\t\\t}\\n\\t\\t\\n\\t\\tif (refresh) {\\n\\t\\t\\tthis.refreshBuffer();\\n\\t\\t}\\n\\t\\t\\n\\t\\tif (!this.ischild) {\\n\\t\\t\\tthis.drawToLog();\\n\\t\\t}\\n\\t\\tif (clear) {\\n\\t\\t\\tthis.clearBuffer();\\n\\t\\t} else {\\n\\t\\t\\tthis.buffer = tempbuffer\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Render wrapper with included async, meant to be a drop i replacement\\n\\t// for ns.sleeps in code\\n\\tasync rendersleep(time, clear=false) {\\n\\t\\tlet sleephandle = this.ns.asleep(time);\\n\\t\\tthis.render(clear);\\n\\t\\tawait sleephandle;\\n\\t}\\n}\\n\\n// Specialty window, provides scrolling text output. Used to replicated existing\\n// log window.\\nexport class curse_stream extends curse_window {\\n\\tconstructor (ns, border=false, height=100, width=51) {\\n\\t\\tsuper(ns, border, height, width);\\n\\t\\tthis.textBuffer = [];\\n\\t\\tthis.renderOnPrint = false;\\n\\t}\\n\\t\\n\\t// extend clearbuffer to make sure it has a clean blankline saved\\n\\tclearBuffer() {\\n\\t\\tsuper.clearBuffer();\\n\\t\\t\\n\\t\\tthis.textBuffer = [];\\n\\t\\t\\n\\t\\tif (this.buffer.length > 1) {\\n\\t\\t\\tthis.blankLine = this.buffer[1]\\n\\t\\t} else {\\n\\t\\t\\tthis.blankLine = this.buffer[0]\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Mostly a drop in replacement for ns.print\\n\\t// TODO: Add support for multiple inputs\\n\\tprint (input) {\\n\\t\\tinput = String(input)\\n\\t\\t\\n\\t\\tlet subdim = super.getSubDimensions();\\n\\t\\t\\n\\t\\t// Check width and perform wordwrap if input exceeds linewidth\\n\\t\\tlet inputWrap = [];\\n\\t\\tlet inputTail = input.slice(subdim[0]-1);\\n\\t\\t\\n\\t\\twhile (inputTail != \\\"\\\") {\\n\\t\\t\\tinputWrap.push(input.slice(0, subdim[0]-1));\\n\\t\\t\\tinput = inputTail;\\n\\t\\t\\tinputTail = input.slice(subdim[0]-1);\\n\\t\\t}\\n\\t\\tinputWrap.push(input)\\n\\t\\t\\n\\t\\t// Add the lines individually so scrolling can be managed smoothly\\n\\t\\twhile (inputWrap.length > 0) {\\n\\t\\t\\tlet line = inputWrap.shift();\\n\\t\\t\\t\\n\\t\\t\\t// By removing top index all the bufferlines move up by one inherently\\n\\t\\t\\tif (this.border && this.border_top && this.buffer.length > 1) {\\n\\t\\t\\t\\tthis.buffer.splice(1, 1);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.buffer.splice(0, 1);\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\t// Insert a new blankline at the bottom to restore buffer size\\n\\t\\t\\tif (this.border && this.border_bottom) {\\n\\t\\t\\t\\tthis.buffer.splice(-1, 0, this.blankLine)\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.buffer.splice(this.buffer.length, 0, this.blankLine)\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Use addText to write on the new blankline\\n\\t\\t\\tthis.addText(0,0,line);\\n\\t\\t\\t\\n\\t\\t\\t// Keep the textbuffer for later\\n\\t\\t\\tthis.textBuffer.push(line);\\n\\t\\t\\n\\t\\t\\t// Trim the textbuffer if it's too long\\n\\t\\t\\tif (this.textBuffer.length > subdim[1]) {\\n\\t\\t\\t\\tthis.textBuffer.shift();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\n\\t\\t// If set to true, visually makes it print immediately, replicating\\n\\t\\t// normal print behavior. Resource intensive.\\n\\t\\tif (this.renderOnPrint) {\\n\\t\\t\\tsuper.renderParent();\\n\\t\\t}\\n\\t}\\n}\\n\\n// Simple progress bar widget\\nexport class curse_progress extends curse_window {\\n\\tconstructor (ns, border=false, height=1, width=51) {\\n\\t\\tif (border && height == 1) {\\n\\t\\t\\theight = 3;\\n\\t\\t}\\n\\t\\tsuper(ns, border, height, width);\\n\\t}\\n\\t\\n\\t// Only needs on function to generate the progress bar\\n\\tupdate (progress) {\\n\\t\\tlet width = this.getSubDimensions()[0];\\n\\t\\tlet increment = width / 100;\\n\\t\\t\\n\\t\\tprogress = progress * 100;\\n\\t\\t\\n\\t\\tthis.addText(0, 0, '#'.repeat(Math.ceil(increment * progress)).padEnd(width));\\n\\t}\\n}\\n\\n// Main function provides example code\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst win = new curse_stream(ns, true, 20);\\n\\tconst progwin = new curse_progress(ns, true, 3, 21);\\n\\tconst bouncetext = new curse_window(ns, false, 1, 4);\\n\\n\\tbouncetext.addText(0,0,\\\"BOO!\\\")\\n\\n\\twin.addChild(progwin, 5,6)\\n\\twin.addChild(bouncetext, 1, 10);\\n\\t\\n\\tlet y = 10;\\n\\tlet x = 1;\\n\\tlet z = 0;\\n\\tlet zdir = true\\n\\tlet drawarea = win.getSubDimensions()\\n\\twin.clearBuffer();\\n\\twhile (true) {\\n\\t\\tif (y > drawarea[1] - 1) {\\n\\t\\t\\ty = 0;\\n\\t\\t}\\n\\t\\tif (x > drawarea[0] - 2) {\\n\\t\\t\\tx = 0;\\n\\t\\t}\\n\\t\\t\\n\\t\\tbouncetext.setPosition(x, y)\\n\\t\\t\\n\\t\\tif (z > 99) {\\n\\t\\t\\tzdir = false\\n\\t\\t} else if ( z < 1 ) {\\n\\t\\t\\tzdir = true\\n\\t\\t}\\n\\t\\t\\n\\t\\tprogwin.update(z / 100)\\n\\n\\t\\twin.print(\\\"=\\\".repeat(z));\\n\\t\\tawait win.rendersleep(800);\\n\\t\\tx++;\\n\\t\\ty++;\\n\\t\\tif (zdir) {\\n\\t\\t\\tz++;\\n\\t\\t} else {\\n\\t\\t\\tz--;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"bcurses.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"bcurses.js\",\"url\":\"blob:https://danielyxie.github.io/02668ca8-200a-4345-ae30-6888acf92ad7\",\"moduleSequenceNumber\":680141}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":285,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n    ['trips-per-cycle', 1000],\\n    ['money-threshold', 1_000_000_000_000]\\n];\\n\\nexport function autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\n\\n// TODO: Joining factions gives a small amount of int xp.\\n// With singularity functions, soft reset, and the 10 corp factions you can create a script that farms int xp rather quickly.\\n// This would be faster than the below travel-based method, which has been nerfed quite heavily\\n\\n/** @param {NS} ns \\n * Script contributed by https://github.com/ShawnPatton\\n * Concept: A small amount of intelligence is granted when you (successfully) travel to a new city. This script converts money into intelligence exp! **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"travelToCity\\\");\\n    ns.disableLog(\\\"sleep\\\");\\n    ns.tail();\\n    let options = ns.flags(argsSchema);\\n    let tripsPerCycle = options['trips-per-cycle'];\\n    let moneyThreshold = options['money-threshold'];\\n    ns.print(`trips-per-cycle: ` + tripsPerCycle);\\n    ns.print(`money-threshold: ` + ns.nFormat(moneyThreshold, '$0.0a'));\\n    let justStarted = true;\\n    let previousInt = ns.getPlayer().intelligence;\\n    let currentInt = previousInt;\\n    let previousLevelTime = Date.now();\\n    let levelupTime;\\n    let cycles = 0;\\n    let duration = 0;\\n    let tripsPerLevel = 0;\\n    let tripsPerMs = 0;\\n    ns.print(`Starting Script at Int ` + currentInt);\\n    while (true) {\\n        while (ns.getPlayer().money > moneyThreshold) {\\n            for (let i = 0; i < tripsPerCycle; i++) {\\n                ns.travelToCity(\\\"Aevum\\\");\\n                ns.travelToCity(\\\"Sector-12\\\");\\n            }\\n            await ns.sleep(1);\\n            cycles++;\\n            if (previousInt != ns.getPlayer().intelligence) {\\n                currentInt = ns.getPlayer().intelligence;\\n                levelupTime = Date.now();\\n                duration = levelupTime - previousLevelTime;\\n                tripsPerLevel = cycles * tripsPerCycle * 2;\\n                tripsPerMs = Math.floor(tripsPerLevel / duration);\\n                ns.print(`Level Up: Int ` + currentInt + (justStarted ? ` Partial` : ` Full`) + ` Level in `\\n                    + ns.tFormat(duration) + ` & ` + tripsPerLevel + ` Travels`);\\n                ns.print(`Approximately ` + tripsPerMs + ` Trips/Millisecond`);\\n                previousLevelTime = levelupTime;\\n                previousInt = currentInt;\\n                justStarted = false;\\n                cycles = 0;\\n            }\\n        }\\n        await ns.sleep(10000);\\n        ns.print(`Below money threshold, waiting 10 seconds`);\\n    }\\n}\",\"filename\":\"farm_int.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm_int.js\",\"url\":\"blob:https://danielyxie.github.io/ec433dd7-b226-4f17-b60c-2efcbf6e4da5\",\"moduleSequenceNumber\":522}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":522,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { boxTailSingleton, tryGetBitNodeMultipliers } from 'utils.js';\\nimport {\\n    factions,\\n    getAllAugmentRepReq,\\n    getAllAugmentStats,\\n    getAugmentsPerFaction,\\n    getOwnedAugmentationsStatic,\\n    hasBladesSimulacrum\\n} from \\\"augments.js\\\";\\nconst companySpecificConfigs = [\\n    { name: \\\"NWO\\\", statModifier: 25 },\\n    { name: \\\"MegaCorp\\\", statModifier: 25 },\\n    { name: \\\"Blade Industries\\\", statModifier: 25 },\\n    { name: \\\"Fulcrum Secret Technologies\\\", companyName: \\\"Fulcrum Technologies\\\", repRequiredForFaction: 250000 }, // Special snowflake\\n    { name: \\\"Silhouette\\\", companyName: \\\"TBD\\\", repRequiredForFaction: 999e9 /* Hack to force work until max promotion. */ }\\n]\\nconst jobs = [ // Job stat requirements for a company with a base stat modifier of +224 (modifier of all megacorps except the ones above which are 25 higher)\\n    { name: \\\"it\\\", reqRep: [0, 7E3, 35E3, 175E3], reqHack: [225, 250, 275, 375], reqCha: [0, 0, 275, 300], repMult: [0.9, 1.1, 1.3, 1.4] },\\n    { name: \\\"software\\\", reqRep: [0, 8E3, 40E3, 200E3, 400E3, 800E3, 1.6e6, 3.2e6], reqHack: [225, 275, 475, 625, 725, 725, 825, 975], reqCha: [0, 0, 275, 375, 475, 475, 625, 725], repMult: [0.9, 1.1, 1.3, 1.5, 1.6, 1.6, 1.75, 2] },\\n]\\nconst factionSpecificConfigs = [\\n    { name: \\\"Slum Snakes\\\", forceUnlock: true },\\n]\\n\\n// These factions should ideally be completed in this order (TODO: Check for augmentation dependencies)\\nconst preferredEarlyFactionOrder = [\\n    \\\"Slum Snakes\\\", // Unlock Gangs\\n    \\\"Netburners\\\", // Required to set up hash income\\n    \\\"Tian Di Hui\\\", \\\"Aevum\\\", // These give all the company_rep and faction_rep bonuses early game\\n    \\\"CyberSec\\\", /* Quick, and NightSec aug depends on an aug from here */ \\\"NiteSec\\\", \\\"Tetrads\\\", // Cha augs to speed up earning company promotions\\n    \\\"Bachman & Associates\\\", // Boost company/faction rep for future augs\\n    \\\"Daedalus\\\", // Once we have all faction_rep boosting augs, there's no reason not to work towards Daedalus as soon as it's available/feasible so we can buy Red Pill\\n    \\\"Fulcrum Secret Technologies\\\", // Will be removed if hack level is too low to backdoor their server\\n    \\\"ECorp\\\", // More cmp_rep augs, and some strong hack ones as well\\n    \\\"BitRunners\\\", \\\"The Black Hand\\\", // Fastest sources of hacking augs after the above companies\\n    \\\"The Dark Army\\\", // Unique cmp_rep aug TODO: Can it sensibly be gotten before corps? Requires 300 all combat stats.\\n    \\\"Clarke Incorporated\\\", \\\"OmniTek Incorporated\\\", \\\"NWO\\\", // More hack augs from companies\\n    \\\"Chongqing\\\", // Unique Source of big 1.4x hack exp boost (Can only join if not in e.g. Aevum as well)\\n];\\n// This is an approximate order of most useful augmentations left to offer, assuming all early-game factions have been cleaned out\\nconst preferredCompanyFactionOrder = [\\n    \\\"Bachman & Associates\\\", // Augs boost company_rep by 1.65, faction_rep by 1.50. Lower rep-requirements than ECorp augs, so should be a priority to speed up future resets\\n    \\\"ECorp\\\", // Offers 2.26 multi worth of company_rep and major hacking stat boosts (1.51 hack / 1.54 exp / 1.43 success / 3.0 grow / 2.8 money / 1.25 speed), but high rep reqs\\n    \\\"Clarke Incorporated\\\", // Biggest boost to hacking after above factions (1.38)\\n    \\\"OmniTek Incorporated\\\", // Next big boost to hacking after above factions (1.20) (NWO is bigger, but this has lower Cha reqs.)\\n    \\\"NWO\\\", // Biggest boost to hacking after above factions (1.26)\\n    \\\"Blade Industries\\\", // Mostly redundant after Ecorp - provides remaining hack-related augs (1.10 money, 1.03 speed)\\n    \\\"MegaCorp\\\", // Offers 1 unique aug boosting all physical traits by 1.35\\n    \\\"KuaiGong International\\\", // 1.40 to agility, defense, strength\\n    \\\"Fulcrum Secret Technologies\\\", // Big boosts to company_rep and hacking, but requires high hack level to backdoor their server, so might have to be left until later\\n    \\\"Four Sigma\\\", // No unique augs, but note that if accessible early on, Fulcrum + Four Sigma is a one-two punch to get all company rep boosting augs in just 2 factions\\n]\\n// Order in which to focus on crime factions\\nconst preferredCrimeFactionOrder = [\\\"Netburners\\\", \\\"Slum Snakes\\\", \\\"NiteSec\\\", \\\"Tetrads\\\", \\\"The Black Hand\\\", \\\"The Syndicate\\\", \\\"The Dark Army\\\", \\\"Speakers for the Dead\\\", \\\"Daedalus\\\"]\\nconst loopSleepInterval = 2000; // 2 seconds\\nconst statusUpdateInterval = 120000; // 2 minutes (outside of this, minor updates in e.g. stats aren't logged)\\nconst restartWorkInterval = 30000; // Collect e.g. rep earned by stopping and starting work;\\nlet noFocus = false; // Can be set via command line to disable doing work that requires focusing (crime, studying, or focused faction/company work)\\nlet noStudying = false; // Disable studying for Charisma. Useful in longer resets when Cha augs are insufficient to meet promotion requirements (Also disabled with --no-focus)\\nlet noCrime = false; // Disable doing crimes at all. (Also disabled with --no-focus)\\nlet crimeFocus = false; // Useful in crime-focused BNs when you want to focus on crime related factions\\nlet gangFocus = false; // Use to focus on unlock gang\\nlet shouldFocusAtWork = false; // Whether we should focus on work or let it be backgrounded (based on whether \\\"Neuroreceptor Management Implant\\\" is owned, or \\\"--no-focus\\\" is specified)\\nlet repToDonate = 150; // Updated after looking at bitnode mults\\nlet lastActionRestart = 0;\\nlet ownedAugmentations = [];\\nlet mostExpensiveAugByFaction = [];\\nlet mostExpensiveDesiredAugByFaction = [];\\nlet playerGang = null;\\n\\nlet options;\\nconst argsSchema = [\\n    ['first', []], // Grind rep with these factions first. Also forces a join of this faction if we normally wouldn't (e.g. no desired augs or all augs owned)\\n    ['skip', []], // Don't work for these factions\\n    ['o', false], // Immediately grind company factions for rep after getting their invite, rather than first getting all company invites we can\\n    ['desired-stats', []], // Factions will be removed from our 'early-faction-order' once all augs with these stats have been bought out\\n    ['no-focus', false], // Disable doing work that requires focusing (crime, studying, or focused faction/company work)\\n    ['no-studying', false], // Disable studying for Charisma. Useful in longer resets when Cha augs are insufficient to meet promotion requirements (Also disabled with --no-focus)\\n    ['no-crime', false], // Disable doing crimes at all. (Also disabled with --no-focus)\\n    ['crime-focus', false], // Useful in crime-focused BNs when you want to focus on crime related factions\\n    ['gang-focus', false], // Use to focus on unlock gang\\n    ['invites-only', false], // Just work to get invites, don't work for augmentations / faction rep\\n    ['prioritize-invites', false], // Prioritize working for as many invites as is practical before starting to grind for faction reputation\\n];\\n\\nexport function autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    const lastFlag = args.length > 1 ? args[args.length - 2] : null;\\n    if (lastFlag === \\\"--first\\\" || lastFlag === \\\"--skip\\\")\\n        return factionList.map(f => f.replaceAll(' ', '_')).sort();\\n    return [];\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('asleep');\\n    ns.disableLog('getServerRequiredHackingLevel');\\n    ns.disableLog('workForFaction');\\n    ns.disableLog('singularity.workForFaction');\\n    ns.disableLog('workForCompany');\\n    ns.disableLog('singularity.workForCompany');\\n    ns.disableLog('stopAction');\\n    ns.disableLog('applyToCompany');\\n    ns.disableLog('singularity.applyToCompany');\\n    ns.disableLog('commitCrime');\\n    ns.disableLog('singularity.joinFaction');\\n    ns.disableLog('singularity.commitCrime');\\n    boxTailSingleton(ns, 'FactionWork', '♥', '200px');\\n    ns.clearLog();\\n    options = ns.flags(argsSchema);\\n    const desiredAugStats = (options['desired-stats'] || []);\\n    const firstFactions = options.first = (options.first || []).map(f => f.replaceAll('_', ' '));\\n    let skipFactionsConfig = options.skip = (options.skip || []).map(f => f.replaceAll('_', ' '));\\n    gangFocus = options['gang-focus'];\\n    noFocus = options['no-focus'];\\n    noStudying = options['no-studying'] || noFocus; // Can't study if we aren't allowed to steal focus\\n    noCrime = options['no-crime'] || noFocus; // Can't crime if we aren't allowed to steal focus\\n    crimeFocus = options['crime-focus'];\\n    if (crimeFocus && noFocus)\\n        return ns.tprint(\\\"ERROR: Cannot use --no-focus and --crime-focus at the same time. You need to focus to do crime!\\\");\\n    // AGI increases stamina, more stamina faster stam recovery\\n    // DEX decreases op time more dex faster ops, faster rank gain, require more stamina therefore need AGI first\\n    // STR and DEF just increase chances afaik not important the multipliers are huge for these stats anyways\\n    const bladeburnerDesiredStats = ['agi', 'dex', 'str', 'def', 'faction_rep', 'company_rep', 'hacknet'];\\n    const oldCombatDesiredStats = ['str', 'def', 'dex', 'agi', 'faction_rep', 'hacking', 'hacknet'];\\n    const hackingStats = ['hacking', 'faction_rep', 'company_rep', 'charisma', 'hacknet'];\\n    if (desiredAugStats.length === 0)\\n        desiredAugStats.push(...(crimeFocus || gangFocus ? bladeburnerDesiredStats : hackingStats))\\n    // Log command line args used\\n    if (firstFactions.length > 0) ns.print(`--first factions: ${firstFactions.join(\\\", \\\")}`);\\n    if (skipFactionsConfig.length > 0) ns.print(`--skip factions: ${skipFactionsConfig.join(\\\", \\\")}`);\\n    if (desiredAugStats.length > 0) ns.print(`--desired-stats matching: ${desiredAugStats.join(\\\", \\\")}`);\\n    let bitnodeMults = tryGetBitNodeMultipliers(ns);\\n    repToDonate = 150 * (bitnodeMults.RepToDonateToFaction || 1);\\n    // Get some factions augmentations to decide what remains to be purchased\\n    const dictFactionAugs = getAugmentsPerFaction(ns);\\n    const dictAugRepReqs = getAllAugmentRepReq(ns);\\n    const dictAugStats = getAllAugmentStats(ns);\\n    ownedAugmentations = getOwnedAugmentationsStatic(ns);\\n    shouldFocusAtWork = !noFocus; // Focus at work for the best rate of rep gain, unless focus activities are disabled via command line\\n    if (shouldFocusAtWork) { // Check if we have an augmentation that lets us not have to focus at work (always nicer if we can background it)\\n        let activeAugmentations = getOwnedAugmentationsStatic(ns);\\n        shouldFocusAtWork = !activeAugmentations.includes(\\\"Neuroreceptor Management Implant\\\");\\n    }\\n\\n    if (ns.fileExists('/tmp/ingang.txt')) {\\n        let configGangIndex = preferredEarlyFactionOrder.findIndex(f => f === \\\"Slum Snakes\\\");\\n        if (configGangIndex !== -1) // If we're in a gang, don't need to earn an invite to slum snakes anymore\\n            preferredEarlyFactionOrder.splice(configGangIndex, 1);\\n    }\\n    mostExpensiveAugByFaction = Object.fromEntries(factionList.map(f => [f, dictFactionAugs[f]\\n        .filter(aug => !ownedAugmentations.includes(aug))\\n        .reduce((max, aug) => Math.max(max, dictAugRepReqs[aug]), -1)]));\\n    ns.print(\\\"Most expensive unowned aug by faction: \\\" + JSON.stringify(mostExpensiveAugByFaction, null, 2));\\n    // TODO: Detect when the most expensive aug from two factions is the same - only need it from the first one. (Update lists and remove 'afforded' augs?)\\n    // TODO this filter might not be working as intended\\n    mostExpensiveDesiredAugByFaction = Object.fromEntries(\\n        factionList.map(f => [f, dictFactionAugs[f].filter(aug => !ownedAugmentations.includes(aug) && (Object.keys(dictAugStats[aug]).length === 0 || !desiredAugStats ||\\n            Object.keys(dictAugStats[aug]).some(key => desiredAugStats.some(stat => key.includes(stat)))))\\n            .reduce((max, aug) => Math.max(max, dictAugRepReqs[aug]), -1)])\\n    );\\n    ns.print(\\\"Most expensive desired aug by faction: \\\" + JSON.stringify(mostExpensiveDesiredAugByFaction, null, 2));\\n    let completedFactions = Object.keys(mostExpensiveAugByFaction).filter(fac => mostExpensiveAugByFaction[fac] === -1 && !factionSpecificConfigs.find(c => c.name === fac)?.forceUnlock);\\n    let skipFactions = skipFactionsConfig.concat(completedFactions);\\n    let softCompletedFactions = Object.keys(mostExpensiveDesiredAugByFaction).filter(fac => mostExpensiveDesiredAugByFaction[fac] === -1 &&\\n        !completedFactions.includes(fac) && !factionSpecificConfigs.find(c => c.name === fac)?.forceUnlock);\\n    ns.print(`${completedFactions.length} factions are completed (all augs purchased): ${completedFactions.join(\\\", \\\")}`);\\n    ns.print(`${softCompletedFactions.length} factions will initially be skipped (all desired augs purchased): ${softCompletedFactions.join(\\\", \\\")}`);\\n\\n    let scope = -1; // Scope increases each time we complete a type of work and haven't progressed enough to unlock more factions\\n    let numJoinedFactions = ns.getPlayer().factions.length;\\n    while (true) { // After each loop, we will repeat all previous work \\\"strategies\\\" to see if anything new has been unlocked, and add one more \\\"strategy\\\" to the queue\\n        joinOpenInvitation(ns);\\n        scope++;\\n        ns.print(`Starting main work loop with scope: ${scope}...`);\\n\\n        const player = ns.getPlayer();\\n        if (player.factions.length > numJoinedFactions) { // If we've recently joined a new faction, reset our work scope\\n            scope = 0; // Back to basics until we've satisfied all highest-priority work\\n            numJoinedFactions = player.factions.length;\\n        }\\n\\n        if (gangFocus) {\\n            while (getKarma(ns)) {\\n                joinOpenInvitation(ns);\\n                if (player.isWorking && player.workType === 'Committing a crime') {\\n                    await ns.asleep(20);\\n                    continue;\\n                }\\n                let crimeStats = getBestCrime(ns, true);\\n                ns.commitCrime(crimeStats.name);\\n                ns.print(`Attempting to commit ${crimeStats.name}... @ ${crimeStats.rate.toPrecision(2)}karma/s`);\\n                await ns.sleep(crimeStats.time + 100);\\n            }\\n        }\\n        if (!hasBladesSimulacrum(ns) && ns.bladeburner.getCurrentAction().type !== 'idle') {\\n            ns.print(`Waiting on bladeburner ${ns.bladeburner.getCurrentAction().type} `);\\n            scope--;\\n            // Join some faction that are achieved passively\\n            let deficientStats = [{ name: \\\"str\\\", value: player.strength }, { name: \\\"str\\\", value: player.defense }, { name: \\\"str\\\", value: player.dexterity }, { name: \\\"str\\\", value: player.agility }];\\n            await earnFactionInvite(ns, \\\"Aevum\\\");\\n            await earnFactionInvite(ns, \\\"Sector-12\\\");\\n            if (player.hacking > requiredHackByFaction[\\\"Tian Di Hui\\\"]) await earnFactionInvite(ns, \\\"Tian Di Hui\\\");\\n            if (deficientStats.filter(stat => stat.value < requiredCombatByFaction[\\\"Tetrads\\\"]).length === 0) {\\n                await earnFactionInvite(ns, \\\"Tetrads\\\");\\n            }\\n            await ns.sleep(30000);\\n            continue;\\n        }\\n\\n        // Remove Fulcrum from our \\\"EarlyFactionOrder\\\" if hack level is insufficient to backdoor their server\\n        let priorityFactions = crimeFocus ? preferredCrimeFactionOrder.slice() : preferredEarlyFactionOrder.slice();\\n        let fulcrummHackReq = ns.getServerRequiredHackingLevel(\\\"fulcrumassets\\\");\\n        if (player.hacking < fulcrummHackReq - 10) { // Assume that if we're within 10, we'll get there by the time we've earned the invite\\n            priorityFactions.splice(priorityFactions.findIndex(c => c === \\\"Fulcrum Secret Technologies\\\"), 1);\\n            ns.print(`Fulcrum faction server requires ${fulcrummHackReq} hack, so removing from our initial priority list for now.`);\\n        } // TODO: Otherwise, if we get Fulcrum, we have no need for a couple other company factions\\n        // Strategy 1: Tackle a consolidated list of desired faction order, interleaving simple factions and megacorporations\\n        const factionWorkOrder = firstFactions.concat(priorityFactions.filter(f => !firstFactions.includes(f) && !skipFactions.includes(f)))\\n            .filter(f => !softCompletedFactions.includes(f)); // Remove factions from our initial \\\"work order\\\" if we've bought all desired augmentations.\\n        for (const faction of factionWorkOrder) {\\n            let earnedNewFactionInvite = false;\\n            if (preferredCompanyFactionOrder.includes(faction)) // If this is a company faction, we need to work for the company first\\n                earnedNewFactionInvite = await workForMegacorpFactionInvite(ns, faction, true);\\n            // If new work was done for a company or their faction, restart the main work loop to see if we've since unlocked a higher-priority faction in the list\\n            if (earnedNewFactionInvite || await workForSingleFaction(ns, faction)) {\\n                scope--; // De-increment scope so that effective scope doesn't increase on the next loop (i.e. it will be incremented back to what it is now)\\n                break;\\n            }\\n        }\\n        if (scope < 1) continue;\\n\\n        // Strategy 2: Grind XP with all priority factions that are joined or can be joined, until every single one has desired REP\\n        for (const faction of factionWorkOrder)\\n            await workForSingleFaction(ns, faction);\\n        if (scope < 2) continue;\\n\\n        // Strategy 3: Work for any megacorporations not yet completed to earn their faction invites. Once joined, we don't lose these factions on reset.\\n        let megacorpFactions = preferredCompanyFactionOrder.filter(f => !skipFactions.includes(f));\\n        await workForAllMegacorps(ns, megacorpFactions, false);\\n        if (scope < 3) continue;\\n\\n        // Strategy 4: Work for megacorps again, but this time also work for the company factions once the invite is earned\\n        await workForAllMegacorps(ns, megacorpFactions, true);\\n        if (scope < 4) continue;\\n\\n        // Strategies 5+ now work towards getting an invite to *all factions in the game* (sorted by least-expensive final aug (correlated to easiest faction-invite requirement))\\n        let joinedFactions = player.factions; // In case our hard-coded list of factions is missing anything, merge it with the list of all factions\\n        let allIncompleteFactions = factionList.concat(joinedFactions.filter(f => !factionList.includes(f))).filter(f => !skipFactions.includes(f) && !completedFactions.includes(f))\\n            .sort((a, b) => mostExpensiveAugByFaction[a] - mostExpensiveAugByFaction[b]);\\n        // Strategy 5: For *all factions in the game*, try to earn an invite and work for rep until we can afford the most-expensive *desired* aug (or unlock donations, whichever comes first)\\n        for (const faction of allIncompleteFactions.filter(f => !softCompletedFactions.includes(f)))\\n            await workForSingleFaction(ns, faction);\\n        if (scope < 5) continue;\\n\\n        // Strategy 6: Revisit all factions until each has enough rep to unlock donations - so if we can't afford all augs this reset, at least we don't need to grind for rep on the next reset\\n        // For this, we reverse the order (ones with augs costing the most-rep to least) since these will take the most time to re-grind rep for if we can't buy them this reset.\\n        for (const faction of allIncompleteFactions.reverse())\\n            await workForSingleFaction(ns, faction, true);\\n        if (scope < 6) continue;\\n\\n        // Strategy 7:  Next, revisit all factions and grind XP until we can afford the most expensive aug, even if we could just buy the required rep next reset\\n        for (const faction of allIncompleteFactions.reverse()) // Re-reverse the sort order so we start with the easiest (cheapest) faction augs to complete\\n            await workForSingleFaction(ns, faction, true, true);\\n        if (scope < 7) continue;\\n\\n        // Strategy 8: Commit crimes for a while longer, then loop to see if there anything more we can do for the above factions\\n        if (noCrime) {\\n            ns.print(`--no-crime (or --no-focus): Crimes are disabled, so sleeping for a while (30s) then checking back on whether there's any work to be done...`);\\n            await ns.sleep(30000);\\n        } else await crimeForKillsKarmaStats(ns, 0, -ns.heart.break() + 100, 0);\\n    }\\n}\\n\\n/** @param {NS} ns */\\nfunction joinOpenInvitation(ns) {\\n    let invitations = ns.checkFactionInvitations();\\n    for (let factionName of invitations) {\\n        // if (!skipFactions.includes(factionName))\\n        ns.joinFaction(factionName);\\n    }\\n}\\n\\n/** @param {NS} ns\\n * @returns {boolean}\\n */\\n//TODO merge with best killcrimesforstats\\nlet getKarma = (ns) => ns.heart.break() > -54000;\\nconst crimes = [\\\"shoplift\\\", \\\"rob store\\\", \\\"mug\\\", \\\"larceny\\\", \\\"deal drugs\\\", \\\"bond forgery\\\", \\\"traffick arms\\\", \\\"homicide\\\", \\\"grand theft auto\\\", \\\"kidnap\\\", \\\"assassinate\\\", \\\"heist\\\"]\\nexport function getBestCrime(ns, getKarma) {\\n    let doThisCrime = crimes[0];\\n    let bestCrimeStats = {};\\n    let crimeRate = -1;\\n    let crimeStats;\\n    for (const crime of crimes) {\\n        crimeStats = ns.getCrimeStats(crime);\\n        crimeStats.chance = ns.getCrimeChance(crime);\\n        crimeStats.rate = crimeStats.chance * (getKarma ? crimeStats.karma : crimeStats.money) / crimeStats.time * 1000;\\n\\n        // ns.print(nextRate.toPrecision(2));\\n        if (crimeStats.chance > .5 && crimeStats.rate > crimeRate) {\\n            crimeRate = crimeStats.rate;\\n            doThisCrime = crime;\\n            bestCrimeStats = crimeStats;\\n            //ns.print(`next crime ${doThisCrime} @ ${(getKarma ? doThisCrimeRate.toPrecision(2) : ns.nFormat(doThisCrimeRate, '0.0'))} ${(getKarma ? 'karma' : '$')}/s`);\\n        }\\n    }\\n    return { doThisCrime, ...bestCrimeStats };\\n}\\n\\n\\nconst factionList = Object.values(factions);\\n\\n/** @param {NS} ns\\n * @param {string} log\\n * @param {string} toastVariant\\n * Prints a message, and also toasts it! */\\nfunction announce(ns, log, toastVariant = 'info') {\\n    if (!ns.print || !ns.toast) return; // If an error is caught/logged because the script is being killed, ns becomes undefined\\n    ns.print(`${toastVariant}: ${log}`);\\n    ns.toast(log, toastVariant);\\n}\\n\\nconst requiredMoneyByFaction = {\\n    \\\"Tian Di Hui\\\": 1E6, \\\"Sector-12\\\": 15E6, \\\"Chongqing\\\": 20E6, \\\"New Tokyo\\\": 20E6, \\\"Ishima\\\": 30E6, \\\"Aevum\\\": 40E6, \\\"Volhaven\\\": 50E6,\\n    \\\"Slum Snakes\\\": 1E6, \\\"Silhouette\\\": 15E6, \\\"The Syndicate\\\": 10E6, \\\"The Covenant\\\": 75E9, \\\"Daedalus\\\": 100E9, \\\"Illuminati\\\": 150E9\\n};\\nconst requiredBackdoorByFaction = { \\\"CyberSec\\\": \\\"CSEC\\\", \\\"NiteSec\\\": \\\"avmnite-02h\\\", \\\"The Black Hand\\\": \\\"I.I.I.I\\\", \\\"BitRunners\\\": \\\"run4theh111z\\\", \\\"Fulcrum Secret Technologies\\\": \\\"fulcrumassets\\\" };\\nconst requiredHackByFaction = { \\\"Tian Di Hui\\\": 50, \\\"Netburners\\\": 80, \\\"Speakers for the Dead\\\": 100, \\\"The Dark Army\\\": 300, \\\"The Syndicate\\\": 200, \\\"The Covenant\\\": 850, \\\"Daedalus\\\": 2500, \\\"Illuminati\\\": 1500 };\\nconst requiredCombatByFaction = { \\\"Slum Snakes\\\": 30, \\\"Tetrads\\\": 75, \\\"Speakers for the Dead\\\": 300, \\\"The Dark Army\\\": 300, \\\"The Syndicate\\\": 200, \\\"The Covenant\\\": 850, \\\"Daedalus\\\": 1500, \\\"Illuminati\\\": 1200 };\\nconst requiredKarmaByFaction = { \\\"Slum Snakes\\\": 9, \\\"Tetrads\\\": 18, \\\"Silhouette\\\": 22, \\\"Speakers for the Dead\\\": 45, \\\"The Dark Army\\\": 45, \\\"The Syndicate\\\": 90 };\\nconst requiredKillsByFaction = { \\\"Speakers for the Dead\\\": 30, \\\"The Dark Army\\\": 5 };\\nconst reqHackingOrCombat = [\\\"Daedalus\\\"]; // Special case factions that require only hacking or combat stats, not both\\n\\n/** @param {NS} ns\\n * @param {string} factionName\\n */\\nasync function earnFactionInvite(ns, factionName) {\\n    const player = ns.getPlayer();\\n    const joinedFactions = player.factions;\\n    if (joinedFactions.includes(factionName)) return true;\\n    let invitations = ns.checkFactionInvitations();\\n    if (invitations.includes(factionName))\\n        return await tryJoinFaction(ns, factionName);\\n\\n    // Can't join certain factions for various reasons\\n    let reasonPrefix = `Cannot join faction \\\"${factionName}\\\" because`;\\n    let precludingFaction;\\n    if ([\\\"Aevum\\\", \\\"Sector-12\\\"].includes(factionName) && (precludingFaction = [\\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"].find(f => joinedFactions.includes(f))) ||\\n        [\\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\"].includes(factionName) && (precludingFaction = [\\\"Aevum\\\", \\\"Sector-12\\\", \\\"Volhaven\\\"].find(f => joinedFactions.includes(f))) ||\\n        [\\\"Volhaven\\\"].includes(factionName) && (precludingFaction = [\\\"Aevum\\\", \\\"Sector-12\\\", \\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\"].find(f => joinedFactions.includes(f))))\\n        return ns.print(`${reasonPrefix} precluding faction \\\"${precludingFaction}\\\"\\\" has been joined.`);\\n    // Skip factions for which money/hack level requirements aren't met. We do not attempt to \\\"train up\\\" for these things (happens automatically outside this script)\\n    let requirement;\\n    if ((requirement = requiredMoneyByFaction[factionName]) && player.money < requirement)\\n        return ns.print(`${reasonPrefix} you have insufficient money. Need: ${ns.nFormat(requirement, '0.0a')}, Have: ${ns.nFormat(player.money, '0.0a')}`);\\n    if ((requirement = requiredHackByFaction[factionName]) && player.hacking < requirement && !reqHackingOrCombat.includes(factionName))\\n        return ns.print(`${reasonPrefix} you have insufficient hack level. Need: ${requirement}, Have: ${player.hacking}`);\\n    // Note: This only complains if we have insufficient hack to backdoor this faction server. If we have sufficient hack, we will \\\"waitForInvite\\\" below assuming an external script is backdooring ASAP\\n    if ((requirement = requiredBackdoorByFaction[factionName]) && player.hacking < ns.getServerRequiredHackingLevel(requirement))\\n        return ns.print(`${reasonPrefix} you must fist backdoor ${requirement}, which needs hack: ${ns.getServerRequiredHackingLevel(requirement)}, Have: ${player.hacking}`);\\n    //await getNsDataThroughFile(ns, `ns.connect('fulcrumassets'); await ns.installBackdoor(); ns.connect(home)`, '/Temp/backdoor-fulcrum.txt') // TODO: Do backdoor if we can but haven't yet?\\n\\n    // See if we can take action to earn an invite for the next faction under consideration\\n    let workedForInvite = false;\\n    // If committing crimes can help us join a faction - we know how to do that\\n    let doCrime = false;\\n    if ((requirement = requiredKarmaByFaction[factionName]) && -ns.heart.break() < requirement) {\\n        ns.print(`${reasonPrefix} you have insufficient Karma. Need: ${-requirement}, Have: ${ns.heart.break()}`);\\n        doCrime = true;\\n    }\\n    if ((requirement = requiredKillsByFaction[factionName]) && player.numPeopleKilled < requirement) {\\n        ns.print(`${reasonPrefix} you have insufficient kills. Need: ${requirement}, Have: ${player.numPeopleKilled}`);\\n        doCrime = true;\\n    }\\n    let deficientStats = [{ name: \\\"str\\\", value: player.strength }, { name: \\\"str\\\", value: player.defense }, { name: \\\"str\\\", value: player.dexterity }, { name: \\\"str\\\", value: player.agility }];\\n    if ((requirement = requiredCombatByFaction[factionName]) &&\\n        (deficientStats.filter(stat => stat.value < requirement)).length > 0\\n        && !(reqHackingOrCombat.includes(factionName) && player.hacking >= requiredHackByFaction[factionName])) { // Some special-case factions (just 'Daedalus' for now) require *either* hacking *or* combat\\n        ns.print(`${reasonPrefix} you have insufficient combat stats. Need: ${requirement} of each, ` +\\n            `Have Str: ${player.strength}, Def: ${player.defense}, Dex: ${player.dexterity}, Agi: ${player.agility}`);\\n        const em = requirement / 30; // Hack: A rough heuristic suggesting we need an additional x1 multi for every ~50 physical stat points we wish to grind out in a reasonable amount of time. TODO: Be smarter\\n        if (!crimeFocus && (player.strength_exp_mult * player.strength_mult < em || player.defense_exp_mult * player.defense_mult < em ||\\n            player.dexterity_exp_mult * player.dexterity_mult < em || player.agility_exp_mult * player.agility_mult < em))\\n            return ns.print(\\\"Physical mults / exp_mults are too low to increase stats in a reasonable amount of time\\\");\\n        doCrime = true; // TODO: There could be more efficient ways to gain combat stats than homicide, although at least this serves future crime factions\\n    }\\n    if (doCrime && noCrime)\\n        return ns.print(`--no-crime (or --no-focus): Doing crime to meet faction requirements is disabled.`);\\n    if (doCrime)\\n        workedForInvite = await crimeForKillsKarmaStats(ns, requiredKillsByFaction[factionName] || 0, requiredKarmaByFaction[factionName] || 0, requiredCombatByFaction[factionName] || 0);\\n\\n    // If travelling can help us join a faction - we can do that too\\n    if (['Tian Di Hui', 'Tetrads', 'The Dark Army'].includes(factionName))\\n        workedForInvite = await goToCity(ns, 'Chongqing');\\n    else if (['The Syndicate'].includes(factionName))\\n        workedForInvite = await goToCity(ns, 'Sector-12');\\n    else if ([\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"].includes(factionName))\\n        workedForInvite = await goToCity(ns, factionName);\\n    if (\\\"Silhouette\\\" === factionName) {\\n        ns.print(`You must be a CO (e.g. CEO/CTO) of a company to earn an invite to ${factionName}. This may take a while!`);\\n        let factionConfig = companySpecificConfigs.find(f => f.name === factionName); // We set up Silhouette with a \\\"company-specific-config\\\" so that we can work for an invite like any megacorporation faction.\\n        let companyNames = preferredCompanyFactionOrder.map(f => companySpecificConfigs.find(cf => cf.name === f)?.companyName || f);\\n        let favorByCompany = {};\\n        for (let companyName of companyNames) {\\n            favorByCompany[companyName] = ns.getCompanyFavor(companyName);\\n        }\\n        // Change the company to work for into whichever company we can get to CEO fastest with. Minimize needed_rep/rep_gain_rate. CEO job is at 3.2e6 rep, so (3.2e6-current_rep)/(100+favor).\\n        factionConfig.companyName = companyNames.sort((a, b) => (3.2e6 - ns.getCompanyRep(a)) / (100 + favorByCompany[a]) - (3.2e6 - ns.getCompanyRep(b)) / (100 + favorByCompany[b]))[0];\\n        // while (!ns.joinFaction(`${factionName}`)) { await ns.asleep(1000); }\\n        workedForInvite = await workForMegacorpFactionInvite(ns, factionName, false); // Work until CTO and the external script joins this faction, triggering an exit condition.\\n    }\\n\\n    if (workedForInvite) // If we took some action to earn the faction invite, wait for it to come in\\n        return await waitForFactionInvite(ns, factionName);\\n    else\\n        return await tryJoinFaction(ns, factionName);\\n\\n}\\n\\n/** @param {NS} ns\\n * @param cityName\\n */\\nasync function goToCity(ns, cityName) {\\n    if (ns.getPlayer().city === cityName) {\\n        ns.print(`Already in city ${cityName}`);\\n        return true;\\n    }\\n    if (ns.travelToCity(cityName)) {\\n        lastActionRestart = Date.now();\\n        announce(ns, `Travelled to ${cityName}`, 'info');\\n        return true;\\n    }\\n    announce(ns, `Failed to travelled to ${cityName} for some reason...`, 'error');\\n    return false;\\n}\\n\\n/** @param {NS} ns\\n *  @param reqKills\\n *  @param reqKarma\\n *  @param reqStats\\n */\\nexport async function crimeForKillsKarmaStats(ns, reqKills, reqKarma, reqStats) {\\n    const bestCrimesByDifficulty = [\\\"heist\\\", \\\"assassinate\\\", \\\"homicide\\\", \\\"mug\\\"]; // Will change crimes as our success rate improves\\n    const chanceThresholds = [0.75, 0.9, 0.5, 0]; // Will change crimes once we reach this probability of success for better all-round gains\\n    let player = ns.getPlayer();\\n    let strRequirements = [];\\n    let forever = reqKills >= Number.MAX_SAFE_INTEGER || reqKarma >= Number.MAX_SAFE_INTEGER || reqStats >= Number.MAX_SAFE_INTEGER;\\n    if (reqKills) strRequirements.push(() => `${reqKills} kills (Have ${player.numPeopleKilled})`);\\n    if (reqKarma) strRequirements.push(() => `-${reqKarma} Karma (Have ${ns.heart.break()})`);\\n    if (reqStats) strRequirements.push(() => `${reqStats} of each combat stat (Have Str: ${player.strength}, Def: ${player.defense}, Dex: ${player.dexterity}, Agi: ${player.agility})`);\\n    let crime = '', lastCrime = '', lastStatusUpdateTime = 0, crimeCount = 0;\\n    while (forever || player.strength < reqStats || player.defense < reqStats || player.dexterity < reqStats || player.agility < reqStats || player.numPeopleKilled < reqKills || -ns.heart.break() < reqKarma) {\\n        joinOpenInvitation(ns);\\n        let crimeChances = {};\\n        for (let crime of bestCrimesByDifficulty) {\\n            crimeChances[crime] = ns.getCrimeChance(crime);\\n        }\\n        let needStats = player.strength < reqStats || player.defense < reqStats || player.dexterity < reqStats || player.agility < reqStats;\\n        let karma = -ns.heart.break();\\n        crime = (karma < 1 || player.strength < 10) && crimeCount < 10 ? \\\"mug\\\" : karma < 5 && player.strength > 20 && crimeCount < 20 && crimeChances[2] > 0.5 ? \\\"homicide\\\" : // Start with a few fast crimes to boost stats / crime chances if we haven't done much crime before\\n            (!needStats && (player.numPeopleKilled < reqKills || karma < reqKarma)) ? \\\"homicide\\\" : // If *all* we need now is kills or Karma, homicide is the fastest way to do that\\n                bestCrimesByDifficulty.find((c, index) => crimeChances[c] >= chanceThresholds[index]); // Otherwise, crime based on success chance vs relative reward (precomputed)\\n        if (lastCrime !== crime || (Date.now() - lastStatusUpdateTime) > statusUpdateInterval) {\\n            ns.print(`Committing \\\"${crime}\\\" (${(100 * crimeChances[crime]).toPrecision(3)}% success) ` + (forever ? 'forever...' : `until we reach ${strRequirements.map(r => r()).join(', ')}`));\\n            lastCrime = crime;\\n            lastStatusUpdateTime = Date.now();\\n        }\\n        ns.tail(); // Force a tail window open when auto-criming, or else it's very difficult to stop if it was accidentally closed.\\n        ns.commitCrime(crime);\\n        player = ns.getPlayer();\\n        while (player.isWorking) {\\n            await ns.sleep(20);\\n            player = ns.getPlayer();\\n        }\\n        crimeCount++;\\n    }\\n    ns.print(`Done committing crimes. Reached ${strRequirements.map(r => r()).join(', ')}`);\\n    return true;\\n}\\n\\n/** @param {NS} ns */\\nasync function studyForCharisma(ns) {\\n    await goToCity(ns, 'Volhaven');\\n    if (ns.universityCourse('ZB Institute Of Technology', 'Leadership')) {\\n        lastActionRestart = Date.now();\\n        announce(ns, `Started studying 'Leadership' at 'ZB Institute Of Technology`, 'success');\\n        return true;\\n    }\\n    announce(ns, `For some reason, failed to study at university (not in correct city?)`, 'error');\\n    return false;\\n}\\n\\n/** @param {NS} ns\\n * @param factionName\\n * @param maxWaitTime\\n */\\nexport async function waitForFactionInvite(ns, factionName, maxWaitTime = 20000) {\\n    ns.print(`Waiting for invite from faction \\\"${factionName}\\\"...`);\\n    let waitTime = maxWaitTime;\\n    let invitations;\\n    let joinedFactions;\\n    do {\\n        invitations = ns.checkFactionInvitations();\\n        joinedFactions = ns.getPlayer().factions;\\n        if (invitations.includes(factionName) || joinedFactions.includes(factionName))\\n            break;\\n        await ns.sleep(loopSleepInterval);\\n    } while (!invitations.includes(factionName) && !joinedFactions.includes(factionName) && (waitTime -= 1000) > 0);\\n    if (joinedFactions.includes(factionName)) // Another script may have auto-joined this faction before we could\\n        ns.print(`An external script has joined faction \\\"${factionName}\\\" for us.`);\\n    else if (!invitations.includes(factionName))\\n        return announce(ns, `Waited ${ns.tFormat(maxWaitTime)}, but still have not received an invite for faction: \\\"${factionName}\\\" (Requirements not met?)`, 'error');\\n    else if (!(await tryJoinFaction(ns, factionName)))\\n        return announce(ns, `Something went wrong. Earned \\\"${factionName}\\\" faction invite, but failed to join it.`, 'error');\\n    return true;\\n}\\n\\n/** @param {NS} ns\\n * @param factionName\\n */\\nexport async function tryJoinFaction(ns, factionName) {\\n    const joinedFactions = ns.getPlayer().factions;\\n    if (joinedFactions.includes(factionName))\\n        return true;\\n    if (!(ns.joinFaction(factionName)))\\n        return false;\\n    announce(ns, `Joined faction \\\"${factionName}\\\"`, 'success');\\n    return true;\\n}\\n\\n/** @param {NS} ns\\n * @param factionName\\n */\\nasync function getCurrentFactionFavour(ns, factionName) {\\n    return ns.getFactionFavor(factionName);\\n}\\n\\nlet lastFactionWorkStatus = \\\"\\\";\\n/** @param {NS} ns\\n * Checks how much reputation we need with this faction to either buy all augmentations or get 150 favour, then works to that amount.\\n * @param factionName\\n * @param forceUnlockDonations\\n * @param forceBestAug\\n * */\\nexport async function workForSingleFaction(ns, factionName, forceUnlockDonations = false, forceBestAug = false) {\\n    const repToFavour = (rep) => Math.ceil(25500 * 1.02 ** (rep - 1) - 25000);\\n    const factionConfig = factionSpecificConfigs.find(c => c.name === factionName);\\n    const forceUnlock = factionConfig?.forceUnlock || options.first.includes(factionName);\\n    let highestRepAug = forceBestAug ? mostExpensiveAugByFaction[factionName] : mostExpensiveDesiredAugByFaction[factionName];\\n    let startingFavor = await getCurrentFactionFavour(ns, factionName);\\n    let favorRepRequired = Math.max(0, repToFavour(repToDonate) - repToFavour(startingFavor));\\n    // When to stop grinding faction rep (usually ~467,000 to get 150 favour) Set this lower if there are no augs requiring that much REP\\n    let factionRepRequired = forceUnlockDonations ? favorRepRequired : Math.min(highestRepAug, favorRepRequired);\\n    if (highestRepAug === -1 && !forceUnlock)\\n        return ns.print(`All \\\"${factionName}\\\" augmentations are owned. Skipping unlocking faction...`);\\n    // Ensure we get an invite to location-based factions we might want / need\\n    if (!await earnFactionInvite(ns, factionName))\\n        return ns.print(`We are not yet part of faction \\\"${factionName}\\\". Skipping working for faction...`);\\n    if (startingFavor >= repToDonate) // If we have already got 150+ favor, we've unlocked donations - no need to grind for rep\\n        return ns.print(`Donations already unlocked for \\\"${factionName}\\\". You should buy access to augs. Skipping working for faction...`);\\n    // Cannot work for gang factions. Detect if this is our gang faction!\\n    if (factionName === playerGang || factionName === 'Bladeburners')\\n        return ns.print(`\\\"${factionName}\\\" is an active gang faction. Cannot work for gang factions...`);\\n    if (forceUnlockDonations && mostExpensiveAugByFaction[factionName] < 0.2 * factionRepRequired) {// Special check to avoid pointless donation unlocking\\n        ns.print(`The last \\\"${factionName}\\\" aug is only ${mostExpensiveAugByFaction[factionName].toLocaleString()} rep, ` +\\n            `not worth grinding ${favorRepRequired.toLocaleString()} rep to unlock donations.`);\\n        forceUnlockDonations = false;\\n        factionRepRequired = highestRepAug = mostExpensiveAugByFaction[factionName];\\n    }\\n\\n    if (ns.getPlayer().workRepGained > 0) // If we're currently working faction work, stop to collect reputation and find out how much is remaining\\n        ns.stopAction();\\n    let currentReputation = ns.getFactionRep(factionName);\\n    // If the best faction aug is within 10% of our current rep, grind all the way to it so we can get it immediately, regardless of our current rep target\\n    if (forceBestAug || highestRepAug <= 1.1 * Math.max(currentReputation, factionRepRequired)) {\\n        forceBestAug = true;\\n        factionRepRequired = Math.max(highestRepAug, factionRepRequired);\\n    }\\n\\n    if (currentReputation >= factionRepRequired)\\n        return ns.print(`Faction \\\"${factionName}\\\" required rep of ${factionRepRequired.toLocaleString()} has already been attained ` +\\n            `(Current rep: ${Math.round(currentReputation).toLocaleString()}). Skipping working for faction...`)\\n\\n    ns.print(`Faction \\\"${factionName}\\\" Highest Aug Req: ${highestRepAug.toLocaleString()}, Current Favor (${startingFavor}/${repToDonate}) Req: ${favorRepRequired.toLocaleString()}`);\\n    if (options['invites-only'])\\n        return ns.print(`--invites-only Skipping working for faction...`);\\n\\n    let lastStatusUpdateTime = 0;\\n    while ((currentReputation = ns.getFactionRep(factionName)) < factionRepRequired) {\\n        joinOpenInvitation(ns);\\n        const factionWork = await detectBestFactionWork(ns, factionName); // Before each loop - determine what work gives the most rep/second for our current stats\\n        if (ns.workForFaction(factionName, factionWork, shouldFocusAtWork)) {\\n            lastActionRestart = Date.now();\\n            ns.tail(); // Force a tail window open to help the user kill this script if they accidentally closed the tail window and don't want to keep studying\\n        } else {\\n            announce(ns, `Something went wrong, failed to start \\\"${factionWork}\\\" work for faction \\\"${factionName}\\\" (Is gang faction, or not joined?)`, 'error');\\n            break;\\n        }\\n        let status = `Doing '${factionWork}' work for \\\"${factionName}\\\" until ${factionRepRequired.toLocaleString()} rep.`;\\n        if (lastFactionWorkStatus !== status) {\\n            // if (lastFactionWorkStatus !== status || (Date.now() - lastStatusUpdateTime) > statusUpdateInterval) {\\n            // ns.print((lastFactionWorkStatus = status) + ` Currently at ${Math.round(currentReputation).toLocaleString()}, earning ${(ns.getPlayer().workRepGainRate * 5).toFixed(2)} rep/sec.`);\\n            ns.print(lastFactionWorkStatus = status);\\n            lastStatusUpdateTime = Date.now();\\n        }\\n        await ns.sleep(restartWorkInterval);\\n        // Detect our rep requirement decreasing (e.g. if we exported for our daily +1 faction rep)\\n        let currentFavor = await getCurrentFactionFavour(ns, factionName);\\n        if (currentFavor > startingFavor && !forceBestAug) {\\n            favorRepRequired = Math.max(0, repToFavour(repToDonate) - repToFavour(startingFavor));\\n            factionRepRequired = forceUnlockDonations ? favorRepRequired : Math.min(highestRepAug, favorRepRequired);\\n        }\\n        // If we explicitly stop working, we immediately get our updated faction rep, otherwise it lags by 1 loop (until after next time we call workForFaction)\\n        if (currentReputation + ns.getPlayer().workRepGained >= factionRepRequired) // Note: Actual work rep gained will be subject to early cancellation policy\\n            ns.stopAction(); // We're close - stop working so our current rep is accurate when we check the while loop condition\\n    }\\n    if (currentReputation >= factionRepRequired)\\n        ns.print(`Attained ${Math.round(currentReputation).toLocaleString()} rep with \\\"${factionName}\\\" (needed ${factionRepRequired.toLocaleString()}).`);\\n    return currentReputation >= factionRepRequired;\\n}\\n\\n/** @param {NS} ns\\n * @param factionName\\n * Try all work types and see what gives the best rep gain with this faction! */\\nasync function detectBestFactionWork(ns, factionName) {\\n    let bestWork, bestRepRate = 0;\\n    for (const work of [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"]) {\\n        //if (!await getNsDataThroughFile(ns, `ns.workForFaction('${factionName}', '${work}') === true); ns.setFocus(${shouldFocusAtWork}`, '/Temp/work-for-faction.txt'))\\n        if (!ns.workForFaction(factionName, work, shouldFocusAtWork)) {\\n            // ns.print(`\\\"${factionName}\\\" work \\\"${work}\\\" not supported.`);\\n            continue; // This type of faction work must not be supported\\n        }\\n        const currentRepGainRate = ns.getPlayer().workRepGainRate;\\n        // ns.print(`\\\"${factionName}\\\" work ${work} provides ${currentRepGainRate} rep rate`);\\n        if (currentRepGainRate > bestRepRate) {\\n            bestRepRate = currentRepGainRate;\\n            bestWork = work;\\n        }\\n    }\\n    return bestWork || 'hacking'; // || hacking bug is fixed problem with gang and working nitesec\\n}\\n\\n/** @param {NS} ns\\n *  @param {Array<string>} megacorpFactionsInPreferredOrder - The list of all corporate factions to work for, sorted in the order they should be worked for\\n *  @param alsoWorkForCompanyFactions\\n *  @param oneCompanyFactionAtATime\\n * */\\nexport async function workForAllMegacorps(ns, megacorpFactionsInPreferredOrder, alsoWorkForCompanyFactions, oneCompanyFactionAtATime) {\\n    let player = ns.getPlayer();\\n    if (player.hacking < 225)\\n        return ns.print(`Hacking Skill ${player.hacking} is to low to work for any megacorps (min req. 225).`);\\n    let joinedCompanyFactions = player.factions.filter(f => megacorpFactionsInPreferredOrder.includes(f)); // Company factions we've already joined\\n    if (joinedCompanyFactions.length > 0)\\n        ns.print(`${joinedCompanyFactions.length} companies' factions have already been joined: ${joinedCompanyFactions.join(\\\", \\\")}`)\\n    let doFactionWork = alsoWorkForCompanyFactions && oneCompanyFactionAtATime;\\n    // Earn each obtainable megacorp faction invite, and optionally also grind faction rep\\n    for (const factionName of megacorpFactionsInPreferredOrder) {\\n        if ((await workForMegacorpFactionInvite(ns, factionName, doFactionWork)) && doFactionWork)\\n            await workForSingleFaction(ns, factionName);\\n    }\\n    if (alsoWorkForCompanyFactions && !oneCompanyFactionAtATime) { // If configured, start grinding rep with company factions we've joined\\n        ns.print(`Done working for companies, now working for all incomplete company factions...`);\\n        for (const factionName of megacorpFactionsInPreferredOrder)\\n            await workForSingleFaction(ns, factionName);\\n    }\\n}\\n\\n/** @param {NS} ns\\n * @param factionName\\n * @param waitForInvite\\n */\\nexport async function workForMegacorpFactionInvite(ns, factionName, waitForInvite) {\\n    const companyConfig = companySpecificConfigs.find(c => c.name === factionName); // For anything company-specific\\n    const companyName = companyConfig?.companyName || factionName; // Name of the company that gives the faction (same for all but Fulcrum)\\n    const statModifier = companyConfig?.statModifier || 0; // How much e.g. Hack / Cha is needed for a promotion above the base requirement for the job\\n    const repRequiredForFaction = companyConfig?.repRequiredForFaction || 200000; // Required to unlock the faction\\n\\n    let player = ns.getPlayer();\\n    if (player.factions.includes(factionName))\\n        return false; // Only return true if we did work to earn a new faction invite\\n    if ((ns.checkFactionInvitations()).includes(factionName))\\n        return waitForInvite ? await waitForFactionInvite(ns, factionName) : false;\\n    // TODO: In some scenarios, the best career path may require combat stats, this hard-codes the optimal path for hack stats\\n    const itJob = jobs.find(j => j.name === \\\"it\\\");\\n    const softwareJob = jobs.find(j => j.name === \\\"software\\\");\\n    if (itJob.reqHack[0] + statModifier > player.hacking) // We don't qualify to work for this company yet if we can't meet IT qualifications (lowest there are)\\n        return ns.print(`Cannot yet work for \\\"${companyName}\\\": Need Hack ${itJob.reqHack[0] + statModifier} to get hired (current Hack: ${player.hacking});`);\\n    ns.print(`Going to work for Company \\\"${companyName}\\\" next...`)\\n    let currentReputation, currentRole = \\\"\\\", currentJobTier = -1; // TODO: Derive our current position and promotion index based on player.jobs[companyName]\\n    let lastStatusUpdateTime = 0, lastStatus = \\\"\\\";\\n    let studying = false, working = false;\\n    while (((currentReputation = ns.getCompanyRep(companyName)) < repRequiredForFaction) && !player.factions.includes(factionName)) {\\n        joinOpenInvitation(ns);\\n        player = ns.getPlayer();\\n        // Determine the next promotion we're striving for (the sooner we get promoted, the faster we can earn company rep)\\n        const getTier = job => Math.min(job.reqRep.filter(r => r <= currentReputation).length, job.reqHack.filter(h => h <= player.hacking).length, job.reqCha.filter(c => c <= player.charisma).length) - 1;\\n        // It's generally best to hop back-and-forth between it and software engineer career paths (rep gain is about the same, but better money from software)\\n        const qualifyingItTier = getTier(itJob), qualifyingSoftwareTier = getTier(softwareJob);\\n        const bestJobTier = Math.max(qualifyingItTier, qualifyingSoftwareTier); // Go with whatever job promotes us higher\\n        const bestRoleName = qualifyingItTier > qualifyingSoftwareTier ? \\\"it\\\" : \\\"software\\\"; // If tied for qualifying tier, go for software\\n        if (currentJobTier < bestJobTier || currentRole !== bestRoleName) { // We are ready for a promotion, ask for one!\\n            if (ns.applyToCompany(companyName, bestRoleName))\\n                announce(ns, `Successfully applied to \\\"${companyName}\\\" for a '${bestRoleName}' Job or Promotion`, 'success');\\n            else if (currentJobTier !== -1) // Unless we just restarted \\\"work-for-factions\\\" and lost track of our current job, this is an error\\n                announce(ns, `Application to \\\"${companyName}\\\" for a '${bestRoleName}' Job or Promotion failed.`, 'error');\\n            currentJobTier = bestJobTier; // API to apply for a job immediately gives us the highest tier we qualify for\\n            currentRole = bestRoleName;\\n            player = ns.getPlayer();\\n        }\\n        const currentJob = player.jobs[companyName];\\n        const nextJobTier = currentRole === \\\"it\\\" ? currentJobTier : currentJobTier + 1;\\n        const nextJobName = currentRole === \\\"it\\\" || nextJobTier >= itJob.reqRep.length ? \\\"software\\\" : \\\"it\\\";\\n        const nextJob = nextJobName === \\\"it\\\" ? itJob : softwareJob;\\n        const requiredHack = nextJob.reqHack[nextJobTier] === 0 ? 0 : nextJob.reqHack[nextJobTier] + statModifier; // Stat modifier only applies to non-zero reqs\\n        const requiredCha = nextJob.reqCha[nextJobTier] === 0 ? 0 : nextJob.reqCha[nextJobTier] + statModifier; // Stat modifier only applies to non-zero reqs\\n        const requiredRep = nextJob.reqRep[nextJobTier]; // No modifier on rep requirements\\n        let status = `Next promotion ('${nextJobName}' #${nextJobTier}) at Hack:${requiredHack} Cha:${requiredCha} Rep:${requiredRep?.toLocaleString()}` +\\n            (repRequiredForFaction > nextJob.reqRep[nextJobTier] ? '' : `, but we won't need it, because we'll sooner hit ${repRequiredForFaction.toLocaleString()} reputation to unlock company faction \\\"${factionName}\\\"!`);\\n        // We should only study at university if every other requirement is met but Charisma\\n        if (currentReputation >= requiredRep && player.hacking >= requiredHack && player.charisma < requiredCha && !noStudying) {\\n            status = `Studying at ZB university until Cha reaches ${requiredCha}...\\\\n` + status;\\n            if (studying && player.className !== 'taking a Leadership course' && player.className !== 'Leadership' /* In case className is made more intuitive in the future */) {\\n                announce(ns, `Leadership studies were interrupted. player.className=\\\"${player.className}\\\" Restarting in 5 seconds...`, 'warning');\\n                studying = false; // If something external has interrupted our studies, take note\\n                ns.tail(); // Force a tail window open to help the user kill this script if they accidentally closed the tail window and don't want to keep studying\\n            }\\n            if (!studying) { // Study at ZB university if CHA is the limiter.\\n                if (await studyForCharisma(ns))\\n                    working = !(studying = true);\\n            }\\n        } else if (studying) { // If we no longer need to study and we currently are, turn off study mode and get back to work!\\n            studying = false;\\n            continue; // Restart the loop so we refresh our promotion index and apply for a promotion before working more\\n        }\\n\\n        // Regardless of the earlier promotion logic, always try for a promotion to make sure we don't miss a promotion due to buggy logic\\n        if (ns.applyToCompany(companyName, currentRole))\\n            announce(ns, `Unexpected '${currentRole}' promotion from ${currentJob} to \\\"${ns.getPlayer().jobs[companyName]}. Promotion logic must be off...\\\"`, 'warning');\\n        // TODO: If we ever get rid of the below periodic restart-work, we will need to monitor for interruptions with player.workType == e.g. \\\"Work for Company\\\"\\n        if (!studying && (!working || (Date.now() - lastActionRestart >= restartWorkInterval) /* We must periodically restart work to collect Rep Gains */)) {\\n            // Work for the company (assume daemon is grinding hack XP as fast as it can, so no point in studying for that)\\n            //if (await getNsDataThroughFile(ns, `ns.workForCompany('${companyName}')); ns.setFocus(${shouldFocusAtWork}`, '/Temp/work-for-company.txt')) {\\n            if (ns.workForCompany(companyName, shouldFocusAtWork)) {\\n                lastActionRestart = Date.now();\\n                working = true;\\n            } else {\\n                announce(ns, `Something went wrong, failed to start working for company \\\"${companyName}\\\".`, 'error');\\n                break;\\n            }\\n        }\\n        status = `Currently a \\\"${player.jobs[companyName]}\\\" ('${currentRole}' #${currentJobTier}) for \\\"${companyName}\\\"`;\\n        if (lastStatus !== status) {\\n            player = ns.getPlayer();\\n            ns.print(status + ` earning ${(player.workRepGainRate * 5).toFixed(2)} rep/sec.\\\\n` +\\n                `${status}\\\\nCurrent player stats are Hack:${player.hacking} ${player.hacking >= (requiredHack || 0) ? '✓' : '✗'} ` +\\n                `Cha:${player.charisma} ${player.charisma >= (requiredCha || 0) ? '✓' : '✗'} ` +\\n                `Rep:${Math.round(currentReputation).toLocaleString()} ${currentReputation >= (requiredRep || repRequiredForFaction) ? '✓' : '✗'}`);\\n            lastStatus = status;\\n        }\\n        await ns.sleep(loopSleepInterval); // Sleep now and wake up periodically and stop working to check our stats / reputation progress\\n    }\\n    // Return true if we succeeded, false otherwise.\\n    if (currentReputation >= repRequiredForFaction) {\\n        ns.print(`Attained ${repRequiredForFaction.toLocaleString()} rep with \\\"${companyName}\\\".`);\\n        if (!player.factions.includes(factionName) && waitForInvite)\\n            return await waitForFactionInvite(ns, factionName);\\n        return true;\\n    }\\n    ns.print(`Stopped working for \\\"${companyName}\\\" repRequiredForFaction: ${repRequiredForFaction.toLocaleString()} ` +\\n        `currentReputation: ${Math.round(currentReputation).toLocaleString()} inFaction: ${player.factions.includes(factionName)}`);\\n    return false;\\n}\",\"filename\":\"workForFaction.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"augments.js\",\"url\":\"blob:https://danielyxie.github.io/5e22d5f9-a574-45b2-b441-ee5fddd5bb6d\",\"moduleSequenceNumber\":288},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/3c1c865f-54c9-4ec5-9db0-b1d77435006c\",\"moduleSequenceNumber\":276},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/30315f36-4043-4928-9bea-9a00ef70dae3\",\"moduleSequenceNumber\":259},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/cf6206b3-48d8-446c-bda7-f69a3b6eff7b\",\"moduleSequenceNumber\":260},{\"filename\":\"workForFaction.js\",\"url\":\"blob:https://danielyxie.github.io/75fcd097-1745-44a0-919c-b0313ec3b0c6\",\"moduleSequenceNumber\":516}],\"dependents\":[],\"ramUsage\":42.8,\"server\":\"home\",\"moduleSequenceNumber\":516,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"bladeburner.getCurrentAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.joinFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.getCrimeStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getCrimeChance\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getCompanyFavor\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.getCompanyRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.universityCourse\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.getFactionFavor\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.workForFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.applyToCompany\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.workForCompany\",\"cost\":3},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const factions = {\\n    Illuminati: \\\"Illuminati\\\", Daedalus: \\\"Daedalus\\\", TheCovenant: \\\"The Covenant\\\", ECorp: \\\"ECorp\\\", MegaCorp: \\\"MegaCorp\\\",\\n    BachmanAssociates: \\\"Bachman & Associates\\\", BladeIndustries: \\\"Blade Industries\\\", NWO: \\\"NWO\\\", Clarke: \\\"Clarke Incorporated\\\",\\n    OmniTek: \\\"OmniTek Incorporated\\\", FourSigma: \\\"Four Sigma\\\", KuaiGong: \\\"KuaiGong International\\\", Fulcrum: \\\"Fulcrum Secret Technologies\\\",\\n    BitRunners: \\\"BitRunners\\\", TheBlackHand: \\\"The Black Hand\\\", NiteSec: \\\"NiteSec\\\", Aevum: \\\"Aevum\\\", Chongqing: \\\"Chongqing\\\", Ishima: \\\"Ishima\\\",\\n    NewTokyo: \\\"New Tokyo\\\", Sector12: \\\"Sector-12\\\", Volhaven: \\\"Volhaven\\\", SpeakersfortheDead: \\\"Speakers for the Dead\\\", TheDarkArmy: \\\"The Dark Army\\\",\\n    TheSyndicate: \\\"The Syndicate\\\", Silhouette: \\\"Silhouette\\\", Tetrads: \\\"Tetrads\\\", SlumSnakes: \\\"Slum Snakes\\\", Netburners: \\\"Netburners\\\",\\n    TianDiHui: \\\"Tian Di Hui\\\", CyberSec: \\\"CyberSec\\\", Bladeburners: \\\"Bladeburners\\\"\\n};\\nexport const factionsWork = {\\n    \\\"Illuminati\\\": [\\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Daedalus\\\": [\\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"The Covenant\\\": [\\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"ECorp\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"MegaCorp\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Bachman & Associates\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Blade Industries\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"NWO\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Clarke Incorporated\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"OmniTek Incorporated\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Four Sigma\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"KuaiGong International\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Fulcrum Secret Technologies\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"BitRunners\\\": [\\\"hacking contracts\\\"],\\n    \\\"The Black Hand\\\": [\\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"NiteSec\\\": [\\\"hacking contracts\\\"],\\n    \\\"Aevum\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Chongqing\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Ishima\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"New Tokyo\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Sector-12\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Volhaven\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Speakers for the Dead\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"The Dark Army\\\": [\\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"The Syndicate\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Silhouette\\\": [\\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Tetrads\\\": [\\\"security\\\", \\\"field\\\"],\\n    \\\"Slum Snakes\\\": [\\\"security\\\", \\\"field\\\"],\\n    \\\"Netburners\\\": [\\\"hacking contracts\\\"],\\n    \\\"Tian Di Hui\\\": [\\\"security\\\", \\\"hacking contracts\\\"],\\n    \\\"CyberSec\\\": [\\\"hacking contracts\\\"],\\n    \\\"Bladeburners\\\": []\\n};\\nexport const allGangFactions = [\\\"Slum Snakes\\\", \\\"Tetrads\\\", \\\"The Black Hand\\\", \\\"The Syndicate\\\", \\\"The Dark Army\\\", \\\"Speakers for the Dead\\\", \\\"NiteSec\\\"];\\n\\nlet augmentationNames;\\n/** @param {NS} ns **/\\nexport async function initAugments(ns) {\\n    await writeAugmentsPerFaction(ns);\\n    await ns.write(`/tmp/getOwnedAugmentations.txt`, JSON.stringify(ns.getOwnedAugmentations(true), null, 2), 'w');\\n    await initAllAugmentRepReq(ns);\\n}\\n/** @param {NS} ns **/\\nasync function writeAugmentsPerFaction(ns) {\\n    const factionNames = Object.values(factions);\\n    const data = {};\\n    for (let factionName of factionNames) {\\n        data[factionName] = ns.getAugmentationsFromFaction(factionName);\\n    }\\n    augmentationNames = [...new Set(Object.values(data).flat())]\\n    await ns.write(`/tmp/factionAugs.txt`, JSON.stringify(data, null, 2), 'w');\\n}\\n/** @param {NS} ns **/\\nexport function getAugmentsPerFaction(ns) {\\n    return JSON.parse(ns.read(`/tmp/factionAugs.txt`));\\n}\\nexport function getAugmentationNames() {\\n    return augmentationNames;\\n}\\nconst augRepReq = {};\\nconst augStats = {};\\n/** @param {NS} ns **/\\nasync function initAllAugmentRepReq(ns) {\\n    for (let augmentationName of getAugmentationNames()) {\\n        augRepReq[augmentationName] = ns.getAugmentationRepReq(augmentationName);\\n        augStats[augmentationName] = ns.getAugmentationStats(augmentationName);\\n        augStats[augmentationName].price = ns.getAugmentationPrice(augmentationName);\\n    }\\n    await ns.write(`/tmp/augRepReq.txt`, JSON.stringify(augRepReq, null, 2), 'w');\\n    await ns.write(`/tmp/augStats.txt`, JSON.stringify(augStats, null, 2), 'w');\\n}\\nexport const getAllAugmentRepReq = (ns) => JSON.parse(ns.read(`/tmp/augRepReq.txt`));\\nexport const getAllAugmentStats = (ns) => JSON.parse(ns.read(`/tmp/augStats.txt`));\\n\\n/** @param {NS} ns **/\\nexport function getOwnedAugmentationsStatic(ns) {\\n    return JSON.parse(ns.read(`/tmp/getOwnedAugmentations.txt`));\\n}\\n\\nexport function getAugsRemainingAtFaction(ns) {\\n    const playerAugs = getOwnedAugmentationsStatic(ns);\\n    const factionAugs = getAugmentsPerFaction(ns);\\n    const factionAugsLeft = {};\\n    Object.entries(factionAugs)\\n        .forEach(([faction, augs]) => factionAugsLeft[faction] = augs.filter(aug => !playerAugs.includes(aug)));\\n    return factionAugsLeft;\\n}\\n\\n\\nexport function hasStat(playerStat, augStats) {\\n    switch (playerStat) {\\n        case 'hack':\\n        // return augStats.hacking_chance_mult\\n        //     || augStats.hacking_exp_mult\\n        //     || augStats.hacking_grow_mult\\n        //     || augStats.hacking_money_mult\\n        //     || augStats.hacking_mult\\n        //     || augStats.hacking_speed_mult;\\n        case 'str':\\n        // return augStats.strength_exp_mult || augStats.strength_mult;\\n        case 'def':\\n        // return augStats.defense_exp_mult || augStats.defense_mult;\\n        case 'dex':\\n        //return augStats.dexterity_exp_mult || augStats.dexterity_mult;\\n        case 'agi':\\n        // return augStats.agility_exp_mult || augStats.agility_mult;\\n        case 'cha':\\n        //return augStats.charisma_exp_mult || augStats.charisma_mult;\\n        case 'crime':\\n        case 'faction_rep':\\n        case 'company_rep':\\n        case 'bladeburner':\\n        case 'work':\\n        default:\\n            return Object.keys(augStats).find(o => o.startsWith(playerStat)) !== undefined;\\n    }\\n}\\nconst simulacrumAugName = \\\"The Blade's Simulacrum\\\"; // This augmentation lets you do bladeburner actions while busy\\nexport const hasBladesSimulacrum = (ns) => getOwnedAugmentationsStatic(ns).includes(simulacrumAugName);\",\"filename\":\"augments.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.6,\"server\":\"home\",\"moduleSequenceNumber\":288,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrice\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { findBox, boxTailSingleton, sleevesPortNumber, tryGetBitNodeMultipliers } from \\\"./utils\\\";\\nimport { createSidebarItem, elemFromHTML, sidebar } from \\\"/box/box.js\\\"\\nimport { getAugsRemainingAtFaction, factionsWork, getAllAugmentStats, hasStat, hasBladesSimulacrum } from \\\"./augments\\\";\\n\\nconst interval = 5000; // Update (tick) this often\\nconst minTaskWorkTime = 29000; // Sleeves assigned a new task should stick to it for at least this many milliseconds\\nlet workByFaction; // Cache of crime statistics and which factions support which work\\nlet task, lastPurchaseTime, availableAugs, lastReassignTime; // State by sleeve\\n//todo convert the status to some nice html for the box.js\\nlet sleeveStatuses = [];\\nlet playerInfo, numSleeves, augmentStats;\\nlet options;\\n\\nconst argsSchema = [\\n    ['min-shock-recovery', 97], // Minimum shock recovery before attempting to train or do crime (Set to 100 to disable, 0 to recover fully)\\n    ['shock-recovery', 0.3], // Set to a number between 0 and 1 to devote that ratio of time to periodic shock recovery (until shock is at 0)\\n    ['crime', null], // If specified, sleeves will perform only this crime regardless of stats\\n    ['aug-budget', 10e9], // Spend up to this much of current cash on augs per tick (Default is high, because these are permanent for the rest of the BN)\\n    ['buy-cooldown', 60 * 1000], // Must wait this may milliseconds before buying more augs for a sleeve\\n    ['min-aug-batch', 20], // Must be able to afford at least this many augs before we pull the trigger (or fewer if buying all remaining augs)\\n];\\n\\nexport function autocomplete(data, _) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\nconst bladeburnerDesiredStats = ['agi', 'dex', 'str', 'def', 'faction_rep', 'company_rep', 'hacknet'];\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    options = ns.flags(argsSchema);\\n    ns.disableLog('getServerMoneyAvailable');\\n    ns.disableLog('asleep');\\n    // const title = 'sleeves';\\n    // let box = findBox(title);\\n    // if (!box) {\\n    //     box = createSidebarItem(title, '<div />', 'x8⛹')\\n    // }\\n    // elemFromHTML('');\\n    boxTailSingleton(ns, 'sleeves', '⛹x8', '150px');\\n    ns.clearLog();\\n    // Ensure the global state is reset (e.g. after entering a new bitnode)\\n    task = [];\\n    lastPurchaseTime = [];\\n    availableAugs = [];\\n    lastReassignTime = [];\\n    sleeveStatuses = [];\\n    workByFaction = {};\\n    augmentStats = getAllAugmentStats(ns);\\n    // Start the main loop\\n    while (true) {\\n        try { await mainLoop(ns); }\\n        catch (error) {\\n            ns.print(`WARNING: An error was caught (and suppressed) in the main loop: ${error.message}`, false, 'warning');\\n            ns.print(error.stack);\\n            ns.toast(`Sleeves.js Error: ${error.message}`, 'error', 5000);\\n        }\\n        await ns.asleep(interval);\\n    }\\n}\\n/** @param {NS} ns\\n * Main loop that gathers data, checks on all sleeves, and manages them. */\\nasync function mainLoop(ns) {\\n    try {\\n        const sleeveData = JSON.parse(ns.read('/tmp/sleeves_static.txt'));\\n        numSleeves = sleeveData.getNumSleeves;\\n    } catch { }\\n    // Update info\\n    let readMore = true;\\n    let portData = [];\\n    while (readMore) {\\n        let portRead = ns.readPort(sleevesPortNumber);\\n        if ('NULL PORT DATA' !== portRead) {\\n            portData.push(portRead);\\n        } else {\\n            readMore = false;\\n        }\\n    }\\n    // TODO assign sleeves to get reps from port data.\\n    numSleeves = numSleeves || 8;\\n    playerInfo = ns.getPlayer();\\n    let budget = playerInfo.money * options['aug-budget'];\\n\\n    // Update all sleeve stats and loop over all sleeves to do some individual checks and task assignments\\n    let sleeveStats = [];\\n    let sleeveInfo = [];\\n    for (let i = 0; i < numSleeves; i++) {\\n        sleeveStats.push(ns.sleeve.getSleeveStats(i));\\n        sleeveInfo.push(ns.sleeve.getInformation(i));\\n    }\\n    for (let i = 0; i < numSleeves; i++) {\\n        let sleeve = { ...sleeveStats[i], ...sleeveInfo[i] }; // For convenience, merge all sleeve stats/info into one object\\n        playerInfo = ns.getPlayer();\\n        // MANAGE SLEEVE AUGMENTATIONS\\n        if (sleeve.shock === 0) // No augs are available augs until shock is 0\\n            budget -= await manageSleeveAugs(ns, i, budget);\\n\\n        // ASSIGN SLEEVE TASK\\n        // These tasks should be immediately discontinued in certain conditions, even if it hasn't been 'minTaskWorkTime'\\n        if (task[i] === \\\"recover from shock\\\" && sleeve.shock === 0 ||\\n            task[i] === \\\"synchronize\\\" && sleeve.sync === 100)\\n            lastReassignTime[i] = 0;\\n        // Otherwise, don't change tasks if we've changed tasks recently (avoids e.g. disrupting long crimes too frequently)\\n        if (Date.now() - (lastReassignTime[i] || 0) < minTaskWorkTime) continue;\\n\\n        // Decide what we think the sleeve should be doing for the next little while\\n        let [designatedTask, command, args, statusUpdate] = await pickSleeveTask(ns, i, sleeve);\\n\\n        // Start the clock, this sleeve should stick to this task for minTaskWorkTime\\n        lastReassignTime[i] = Date.now();\\n        // Set the sleeve's new task if it's not the same as what they're already doing.\\n        if (task[i] !== designatedTask) {\\n            await setSleeveTask(ns, i, designatedTask, command, args);\\n            sleeveStatuses[i] = statusUpdate;\\n        }\\n    }\\n\\n    ns.clearLog();\\n    for (let i = 0; i < sleeveStatuses.length; i++) {\\n        ns.print(`${i % numSleeves}- ${sleeveStatuses[i]}`);\\n    }\\n}\\nconst excludedAugs = ['QLink', 'Hydroflame Left Arm'];\\n\\n/** @param {NS} ns\\n * @param i\\n * @param budget\\n * Purchases augmentations for sleeves after corp and blade simulcrum owned */\\nasync function manageSleeveAugs(ns, i, budget) {\\n    if (!hasBladesSimulacrum(ns) || !playerInfo.hasCorporation) {\\n        return 0;\\n    }\\n    availableAugs[i] = ns.sleeve.getSleevePurchasableAugs(i).filter(a => !excludedAugs.includes(a.name)).sort((a, b) => a.cost - b.cost);\\n    // filter augs base on desired stats;\\n    availableAugs[i] = availableAugs[i].filter(a => i === 0 ? true : bladeburnerDesiredStats.find((stat) => hasStat(stat, augmentStats[a.name])));\\n    const cooldownLeft = Math.max(0, options['buy-cooldown'] - (Date.now() - (lastPurchaseTime[i] || 0)));\\n    const [batchCount, batchCost] = availableAugs[i].reduce(([n, c], aug) => c + aug.cost <= budget ? [n + 1, c + aug.cost] : [n, c], [0, 0]);\\n    const purchaseUpdate = `${batchCount.toFixed(0).padStart(2)}/${availableAugs[i].length.toFixed(0).padEnd(2)} augs ` +\\n        `${ns.nFormat(batchCost, '$0.0a')} of ${ns.nFormat(availableAugs[i].reduce((t, aug) => t + aug.cost, 0), '$0.0a')} in ${ns.tFormat(cooldownLeft)}`;\\n    sleeveStatuses[numSleeves + i] = purchaseUpdate;\\n    if (availableAugs[i].length === 0) return 0;\\n    if (cooldownLeft === 0 && batchCount > 0 && ((batchCount >= availableAugs[i].length - 1) || batchCount >= options['min-aug-batch'])) { // Don't require the last aug it's so much more expensive\\n        let strAction = `Purchase ${batchCount} augmentations for sleeve ${i} at total cost of ${ns.nFormat(batchCost, '0.0.a')}`;\\n        let toPurchase = availableAugs[i].splice(0, batchCount);\\n        if ((batchCost + 5e9) > playerInfo.money) {\\n            return 0;\\n        }\\n        if (await [i, ...toPurchase.map(a => a.name)].slice(1).reduce((s, aug) => s && ns.sleeve.purchaseSleeveAug(i, aug), true)) {\\n            ns.toast(`SUCCESS: ${strAction}`, 'success', 30000);\\n        } else ns.toast(`ERROR: Failed to ${strAction}`, 'error', 30000);\\n        lastPurchaseTime[i] = Date.now();\\n        return batchCost; // Even if we think we failed, return the predicted cost so if the purchase did go through, we don't end up over-budget\\n    }\\n    return 0;\\n}\\nlet sleeveFactionWork = [];\\n/** @param {NS} ns\\n * @param i\\n * @param sleeve\\n * Picks the best task for a sleeve, and returns the information to assign and give status updates for that task. */\\nasync function pickSleeveTask(ns, i, sleeve) {\\n    // Must synchronize first iif you haven't maxed memory on every sleeve.\\n    if (sleeve.sync < 100) {\\n        sleeveFactionWork[i] = '';\\n        return [\\\"synchronize\\\", ns.sleeve.setToSynchronize, [i], `syncing... ${sleeve.sync.toFixed(2)}%`];\\n    }\\n    // must crime till gangs can be unlocked\\n    if (ns.heart.break() > -54000) {\\n        let crime = getBestCrime(ns, sleeve, true);\\n        sleeveFactionWork[i] = '';\\n        return [`commit ${crime.name} `, ns.sleeve.setToCommitCrime, [i, crime.name],\\n            /*   */ `committing ${crime.name} with rate ${(crime.rate).toFixed(2)}`];\\n    }\\n    // Opt to do shock recovery if above the --min-shock-recovery threshold, or if above 0 shock, with a probability of --shock-recovery\\n    if (sleeve.shock > options['min-shock-recovery'] || sleeve.shock > 0 && options['shock-recovery'] > 0 && Math.random() < options['shock-recovery']) {\\n        sleeveFactionWork[i] = '';\\n        return [\\\"recover from shock\\\", ns.sleeve.setToShockRecovery, [i], `recovering from shock... ${sleeve.shock.toFixed(2)}%`];\\n    }\\n    // If player is currently working for faction or company rep, sleeves 0 can help him out (Note: Only one sleeve can work for a faction)\\n    if (i === 0 && playerInfo.isWorking && playerInfo.workType === \\\"Working for Faction\\\") {\\n        // TODO: We should be able to borrow logic from work-for-factions.js to have more sleeves work for useful factions / companies\\n        // We'll cycle through work types until we find one that is supported. TODO: Auto-determine the most productive faction work to do.\\n        const faction = playerInfo.currentWorkFactionName;\\n        const work = factionsWork[faction][0];\\n        sleeveFactionWork[i] = faction;\\n        return [`work for faction '${faction}' (${work})`, ns.sleeve.setToFactionWork, [i, faction, work],\\n            /*   */ `helping earn rep with faction ${faction} by doing ${work}.`];\\n    }\\n    if (i === 0 && playerInfo.isWorking && playerInfo.workType === \\\"Working for Company\\\") { // If player is currently working for a company rep, sleeves 0 shall help him out (only one sleeve can work for a company)\\n        sleeveFactionWork[i] = '';\\n        return [`work for company '${playerInfo.companyName}'`, ns.sleeve.setToCompanyWork, [i, playerInfo.companyName],\\n            /*   */ `helping earn rep with company ${playerInfo.companyName}.`];\\n    }\\n    if (ns.fileExists('/tmp/ingang.txt')) {\\n        const factionAugs = getAugsRemainingAtFaction(ns);\\n        const factionsWithAugs = Object.entries(factionAugs)\\n            .filter(([faction, augList]) =>\\n                augList.filter(aug => aug !== 'NeuroFlux Governor').length > 0 // work for factions with augs other than NFG\\n                && playerInfo.factions.includes(faction) // player in faction\\n                && faction !== 'Bladeburners' // can't work for Bladeburners\\n                && faction !== 'Slum Snakes'\\n                && !sleeveFactionWork.includes(faction)); // can't work for Slumsnakes (in gang)\\n        //TODO check faction rep is <= max aug cost\\n        //TODO track factions and companies being worked for instead of using sleeve index\\n        let factionAndAugs = factionsWithAugs[0]; // just use sleeve index to pick a faction to work for\\n        if (factionAndAugs && factionAndAugs[0]) {\\n            let faction = factionAndAugs[0];\\n            const work = factionsWork[faction][0];\\n            sleeveFactionWork[i] = faction;\\n            return [`work for faction '${faction}' (${work})`, ns.sleeve.setToFactionWork, [i, faction, work],\\n                /*   */ `doing ${work} at ${faction}.`];\\n        }\\n    }\\n    // Finally, do crime for Karma. Homicide has the rate gain, if we can manage a decent success rate.\\n    let crime = getBestCrime(ns, sleeve, ns.heart.break() > -54000);\\n    return [`commit ${crime.name} `, ns.sleeve.setToCommitCrime, [i, crime.name],\\n        /*   */ `committing ${crime.name} with rate ${ns.nFormat(crime.rate, '0.0a')}`];\\n}\\n\\n/** @param {NS} ns\\n * @param i\\n * @param designatedTask\\n * @param command\\n * @param args\\n * Sets a sleeve to its designated task, with some extra error handling logic for working for factions. */\\nasync function setSleeveTask(ns, i, designatedTask, command, args) {\\n    let strAction = `Set sleeve ${i} to ${designatedTask} `;\\n    if (await command(...args)) {\\n        task[i] = designatedTask;\\n        //ns.print(`SUCCESS: ${strAction} `);\\n        return true;\\n    }\\n    // If assigning the task failed...\\n    lastReassignTime[i] = 0;\\n    // If working for a faction, it's possible he current work isn't supported, so try the next one.\\n    if (designatedTask.startsWith('work for faction')) {\\n        ns.toast(`WARN: Failed to ${strAction} - work type may not be supported.`, 'warning', 10000);\\n        workByFaction[playerInfo.currentWorkFactionName] = (workByFaction[playerInfo.currentWorkFactionName] || 0) + 1;\\n    } else\\n        ns.toast(`ERROR: Failed to ${strAction} `, 'error', 30000);\\n    return false;\\n}\\n\\n/** @param {NS} ns\\n * @param sleeve\\n * @param crimeStats\\n * Calculate the chance a sleeve has of committing crime successfully. */\\nfunction calculateSleeveCrimeChance(ns, sleeve, crimeStats) {\\n    let chance =\\n        (crimeStats.hacking_success_weight || 0) * sleeve.hacking +\\n        (crimeStats.strength_success_weight || 0) * sleeve.strength +\\n        (crimeStats.defense_success_weight || 0) * sleeve.defense +\\n        (crimeStats.dexterity_success_weight || 0) * sleeve.dexterity +\\n        (crimeStats.agility_success_weight || 0) * sleeve.agility +\\n        (crimeStats.charisma_success_weight || 0) * sleeve.charisma;\\n    chance /= 975;\\n    chance /= crimeStats.difficulty;\\n    return Math.min(chance, 1);\\n}\\n\\nconst recommendedCrimes = [\\\"shoplift\\\", \\\"rob store\\\", \\\"mug\\\", \\\"traffick arms\\\", \\\"homicide\\\", \\\"grand theft auto\\\", \\\"kidnap\\\", \\\"assassinate\\\", \\\"heist\\\"]\\nfunction getBestCrime(ns, sleeve, getKarma) {\\n    const crimeMoney = tryGetBitNodeMultipliers(ns).CrimeMoney;\\n    let bestCrimeStats;\\n    let crimeRate = -1;\\n    let crimeStats;\\n    for (const crime of recommendedCrimes) {\\n        crimeStats = ns.getCrimeStats(crime);\\n        crimeStats.name = crime;\\n        crimeStats.chance = calculateSleeveCrimeChance(ns, sleeve, crimeStats);\\n        crimeStats.rate = crimeStats.chance * (getKarma ? crimeStats.karma : crimeStats.money * crimeMoney) / crimeStats.time * 1000;\\n\\n        //ns.print(JSON.stringify(crimeStats));\\n        if (crimeStats.rate > crimeRate) {\\n            crimeRate = crimeStats.rate;\\n            bestCrimeStats = crimeStats;\\n            //  ns.print(`next crime ${bestCrimeStats.name} @ ${(getKarma ? bestCrimeStats.rate.toPrecision(2) : ns.nFormat(bestCrimeStats.rate, '0.0'))} ${(getKarma ? 'karma' : '$')}/s`);\\n        }\\n    }\\n    //ns.print(`next crime ${bestCrimeStats.name} @ ${(getKarma ? bestCrimeStats.rate.toPrecision(2) : ns.nFormat(bestCrimeStats.rate, '0.0'))} ${(getKarma ? 'karma' : '$')}/s`);\\n    return bestCrimeStats;\\n}\",\"filename\":\"sleeves.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"augments.js\",\"url\":\"blob:https://danielyxie.github.io/b84a5ad7-d744-4ff4-80ee-28397e7d2b8c\",\"moduleSequenceNumber\":288},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/c4db0ac5-9533-42aa-a41d-066a9af5f6d5\",\"moduleSequenceNumber\":276},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/c7b3e81a-1451-4d1b-911c-264eb6a88a19\",\"moduleSequenceNumber\":276},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/b9f38379-2e7e-4c12-9025-e4692a72dbee\",\"moduleSequenceNumber\":259},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/cce0969b-0e04-49a8-b054-4234c2018de0\",\"moduleSequenceNumber\":260},{\"filename\":\"sleeves.js\",\"url\":\"blob:https://danielyxie.github.io/9cb399b3-6a27-4892-8b8b-c460d74ba3cc\",\"moduleSequenceNumber\":513}],\"dependents\":[],\"ramUsage\":47.7,\"server\":\"home\",\"moduleSequenceNumber\":513,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"sleeve.getSleeveStats\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.getInformation\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.getSleevePurchasableAugs\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.purchaseSleeveAug\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToSynchronize\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToCommitCrime\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToShockRecovery\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToFactionWork\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToCompanyWork\",\"cost\":4},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.getCrimeStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.gang.createGang('Slum Snakes');\\n    await ns.write('/tmp/ingang.txt', ns.gang.getGangInformation().faction, 'w');\\n\\tns.exec('gangum.js', 'home');\\n}\",\"filename\":\"startGang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"startGang.js\",\"url\":\"blob:https://danielyxie.github.io/5594cfc9-e9d6-4c53-ac6c-0fa5d432bf76\",\"moduleSequenceNumber\":294488}],\"dependents\":[],\"ramUsage\":5.9,\"server\":\"home\",\"moduleSequenceNumber\":290,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.createGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { list_servers } from 'opened_servers.js';\\nimport { boxTailSingleton, ramUsage } from 'utils.js';\\nimport { calculateGrowThreads } from './growthFunctions.js';\\n\\nlet ns;\\nconst weaken_script = \\\"weaken.js\\\";\\nconst grow_script = \\\"grow.js\\\";\\nconst hack_script = \\\"hack.js\\\";\\nlet hack_scriptRam = 1.7;\\nlet grow_scriptRam, weaken_scriptRam = 1.75;\\nlet ServerGrowthRate = 1;\\nlet serversForExecution = [];\\nlet hackStatus = [];\\n/** @param {NS} pns **/\\nexport async function main(pns) {\\n\\tns = pns;\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('exec')\\n\\tns.clearLog();\\n\\tns.tail();\\n\\tboxTailSingleton(ns, 'mcp_batch', '🥾', '200px');\\n\\tweaken_scriptRam = ns.getScriptRam(weaken_script, \\\"home\\\");\\n\\tgrow_scriptRam = ns.getScriptRam(grow_script, \\\"home\\\");\\n\\thack_scriptRam = ns.getScriptRam(hack_script, \\\"home\\\");\\n\\t; ({ ServerGrowthRate } = JSON.parse(ns.read('/tmp/getBitNodeMultipliers.txt')))\\n\\tawait run();\\n}\\nlet hackPercent = .5;\\nlet bonusServers = 0;\\nfunction updateServerLists() {\\n\\tserversForExecution = ['home'].concat(list_servers(ns).filter(s => ns.hasRootAccess(s)));\\n\\tconst beforeHackStatusLength = hackStatus.length;\\n\\tconst serversToHack = list_servers(ns).filter(s => ns.hasRootAccess(s)\\n\\t\\t&& ns.getServerMaxMoney(s) > 0\\n\\t\\t&& ns.getServerRequiredHackingLevel(s) <= ns.getHackingLevel() / 2);\\n\\n\\thackStatus = [];\\n\\tconst skippedServer = []\\n\\tconst player = ns.getPlayer();\\n\\tfor (const server of serversToHack) {\\n\\t\\tconst s = ns.getServer(server);\\n\\t\\ts.hackDifficulty = s.minDifficulty;\\n\\t\\t// check that hacks will succeed. Could be redundant check\\n\\t\\tconst hackChance = ns.formulas.hacking.hackChance(s, player);\\n\\t\\tif (hackChance < .99) {\\n\\t\\t\\t//ns.print(`Hack chance to low ${s} ${(hackChance * 100).toFixed(2)}%`)\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (s.serverGrowth < 40) {\\n\\t\\t\\t//ns.print(`Growth is to low ${s} ${s.serverGrowth}%`)\\n\\t\\t\\tskippedServer.push({ server: server });\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\thackStatus.push({ server: server });\\n\\t}\\n\\tconst lowRamUse = ramUsage(ns) < .5;\\n\\tconst oldHackPercent = hackPercent;\\n\\tconst oldBonusServers = bonusServers;\\n\\tif (lowRamUse) {\\n\\t\\thackPercent = Math.min(hackPercent + .1, .95);\\n\\t\\tif (hackPercent === .95) {\\n\\t\\t\\tbonusServers = Math.min(bonusServers + 1, skippedServer.length);\\n\\t\\t\\thackStatus.push(...skippedServer.slice(0, bonusServers));\\n\\t\\t}\\n\\t} else {\\n\\t\\tbonusServers = Math.max(bonusServers - 1, 0);\\n\\t\\tif (bonusServers <= 0) hackPercent = Math.max(hackPercent - .1, .5);\\n\\t}\\n\\tif (oldHackPercent !== hackPercent || oldBonusServers !== bonusServers) ns.print(`BonusServers added ${bonusServers} Hack percent ${hackPercent}`);\\n\\t// after aug install just start hacking on n00dles fist\\n\\tif (hackStatus.length === 0) hackStatus.push({ server: 'n00dles' });\\n\\tif (beforeHackStatusLength < hackStatus.length) ns.print(`Servers to hack ${hackStatus.length} ${hackStatus.map(o => o.server).join(',')}`);\\n}\\nlet batches = [];\\nlet target = 'n00dles';\\nasync function run() {\\n\\tlet i = 0;\\n\\tupdateServerLists();\\n\\tlet updateAfter = Date.now().valueOf() + 30 * 1000;\\n\\twhile (true) {\\n\\n\\t\\t//todo prep logic\\n\\n\\t\\t// const currentSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\n\\t\\t// if (currentSec > 0) { // weaken prep\\n\\t\\t// \\tconst weaken = await runWeaken(target);\\n\\t\\t// \\treturn { server: target, promise: ns.asleep(weaken.time + 200), pid: { weaken: weaken.pid } };\\n\\t\\t// }\\n\\n\\t\\t// todo run this check the moment before the hack lands, kill the PID if check fails\\n\\t\\t// if (ns.getServerMoneyAvailable(target) / ns.getServerMaxMoney(target) < .9) {\\n\\t\\t// \\treturn 0; // don't hack if server is not max money\\n\\t\\t// }\\n\\n\\t\\tns.print('planBatchRam');\\n\\t\\tlet newBatchPlan = await planBatchRam(target);\\n\\t\\twhile (newBatchPlan && batches.length < 50) {\\n\\t\\t\\tbatches.push(newBatchPlan);\\n\\t\\t\\tnewBatchPlan = await planBatchRam(target);\\n\\t\\t\\t// await ns.sleep(1);\\n\\t\\t}\\n\\t\\tns.print('executeBatchParts');\\n\\t\\tfor (const batch of batches) {\\n\\t\\t\\tawait executeBatchParts(batch);\\n\\t\\t}\\n\\t\\t// remove completed batches\\n\\t\\tbatches = batches.filter(o => o.weakenHosts || o.hackHost || o.growHost);\\n\\n\\t\\t// if (!hackStatus[i].pid || (hackStatus[i].pid && !ns.isRunning(hackStatus[i].pid.weaken))) {\\n\\t\\t// \\tconst ret = await runHGW(hackStatus[i].server);\\n\\t\\t// \\thackStatus[i] = ret;\\n\\t\\t// }\\n\\t\\t// i = (i + 1) % hackStatus.length;\\n\\t\\tawait ns.sleep(50);\\n\\t\\tif (updateAfter < Date.now()) {\\n\\t\\t\\tupdateAfter = Date.now() + 30 * 1000;\\n\\t\\t\\tupdateServerLists();\\n\\t\\t\\ti = 0;\\n\\t\\t}\\n\\t\\treturn; //run once testing\\n\\t}\\n}\\nasync function executeBatchParts(batch) {\\n\\t/*\\n\\t.weakenHosts []\\n\\t.hackHost\\n\\t\\tthreads_available, host, threadsAvailMinusNeed, ramUsed\\n\\t.growHost\\n\\t */\\n\\n\\tconst server = ns.getServer(batch.target);\\n\\tserver.hackDifficulty = server.minDifficulty;\\n\\tserver.moneyAvailable = server.moneyMax;\\n\\n\\t// (hackStart - 200) < NO_START_BATCH < (weakenEnd + 200)\\n\\tconst canRun = (date) => {\\n\\t\\tconst hacksOnSameTarget = batches.filter(o => o.target === batch.target && o.weakenEnd > 0);\\n\\t\\tconst batchesDuringDate = hacksOnSameTarget.filter(o => (o.hackEnd - 200) < date && date < (o.weakenEnd + 200));\\n\\t\\treturn batchesDuringDate.length === 0;\\n\\t}\\n\\n\\tif (batch.growEnd && batch.growHost && canRun(Date.now())) {\\n\\t\\tconst growTime = ns.formulas.hacking.growTime(server, ns.getPlayer());\\n\\t\\tconst newGrowEnd = Date.now() + growTime;\\n\\t\\tif (Math.abs(batch.growEnd - newGrowEnd) <= 100) {\\n\\t\\t\\tconst pid = await runGrow(batch.target, batch.growHost);\\n\\t\\t\\tif (pid === 0) {\\n\\t\\t\\t\\tns.tprint('FAILED ' + 'to start grow');\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tbatch.growStart = Date.now();\\n\\t\\t\\t\\tbatch.growEnd = newGrowEnd;\\n\\t\\t\\t\\tdelete batch.growHost;\\n\\t\\t\\t}\\n\\t\\t} else if ((newGrowEnd - batch.growEnd) > 100) {\\n\\t\\t\\tns.tprint('GROW START WINDOW MISSED');\\n\\t\\t\\tremoveExclusion(batch.growHost.host, batch.growHost.ramUsed);\\n\\t\\t\\tdelete batch.growHost;\\n\\t\\t}\\n\\t}\\n\\tif (batch.hackEnd && batch.hackHost && canRun(Date.now())) {\\n\\t\\tconst hackTime = ns.formulas.hacking.hackTime(server, ns.getPlayer());\\n\\t\\tconst newHackEnd = Date.now() + hackTime;\\n\\t\\tif (Math.abs(batch.hackEnd - newHackEnd) <= 100) {\\n\\t\\t\\tconst pid = await runHack(batch.target, batch.hackHost);\\n\\t\\t\\tif (pid === 0) {\\n\\t\\t\\t\\tns.tprint('FAILED ' + 'to start hack');\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tbatch.hackStart = Date.now();\\n\\t\\t\\t\\tbatch.hackEnd = newHackEnd;\\n\\t\\t\\t\\tdelete batch.hackHost;\\n\\t\\t\\t}\\n\\t\\t} else if ((newHackEnd - batch.hackEnd) > 100) {\\n\\t\\t\\tns.tprint('HACK START WINDOW MISSED');\\n\\t\\t\\tremoveExclusion(batch.hackHost.host, batch.hackHost.ramUsed);\\n\\t\\t\\tdelete batch.hackHost;\\n\\t\\t}\\n\\t}\\n\\n\\tif (batch.weakenHosts && canRun(Date.now())) {\\n\\t\\tbatch.weakenStart = Date.now();\\n\\t\\tconst pids = await runWeaken(batch.target, batch.weakenHosts);\\n\\t\\tif (pids.filter(o => o === 0)) {\\n\\t\\t\\tns.tprint('FAILED ' + 'to start all weakens');\\n\\t\\t} else {\\n\\t\\t\\tbatch.weakenEnd = ns.formulas.hacking.weakenTime(server, ns.getPlayer());\\n\\t\\t\\tbatch.growEnd = batch.weakenEnd - 200;\\n\\t\\t\\tbatch.hackEnd = batch.growEnd - 200;\\n\\t\\t\\tdelete batch.weakenHosts;\\n\\t\\t}\\n\\t}\\n}\\n\\nasync function planBatchRam(target) {\\n\\tconst server = ns.getServer(target);\\n\\tserver.hackDifficulty = server.minDifficulty;\\n\\tserver.moneyAvailable = server.moneyMax;\\n\\tconst hackThreadsNeeded = () => {\\n\\t\\treturn Math.max(Math.floor(hackPercent / ns.formulas.hacking.hackPercent(server, ns.getPlayer())), 1);\\n\\t}\\n\\tconst growThreadsNeeded = (host, hackThreads) => {\\n\\t\\tconst hackAmount = ns.hackAnalyze(target) * hackThreads * ns.getServerMaxMoney(target);\\n\\t\\treturn Math.ceil(calculateGrowThreads(ns, target, hackAmount, getCores(host), { ServerGrowthRate }));\\n\\t}\\n\\tconst weakenThreadsNeeded = (host, hackThreads, growThreads) => {\\n\\t\\tlet security = ns.growthAnalyzeSecurity(growThreads);\\n\\t\\tsecurity += ns.hackAnalyzeSecurity(hackThreads);\\n\\t\\treturn Math.max(Math.ceil(security / ns.weakenAnalyze(1, getCores(host))), 1);\\n\\t}\\n\\n\\tconst batchPlan = getHostsAndThreads(hackThreadsNeeded, growThreadsNeeded, weakenThreadsNeeded);\\n\\tif (!batchPlan.weakenHosts || !batchPlan.hackHost || !batchPlan.growHost) {\\n\\t\\tns.print('No room to plan another batch');\\n\\t\\treturn;\\n\\t}\\n\\tbatchPlan.target = target;\\n\\treturn batchPlan;\\n}\\n\\nasync function runWeaken(target, hosts) {\\n\\tlet pids = [];\\n\\tfor (const host of hosts) {\\n\\t\\tpids.push(await ns.exec(weaken_script, host.host, host.threads_available, target, Math.random()));\\n\\t\\tremoveExclusion(host.host, host.ramUsed);\\n\\t}\\n\\treturn pids;\\n}\\n\\nasync function runGrow(target, host) {\\n\\tconst pid = await ns.exec(grow_script, host.host, host.threads_available, target, Math.random());\\n\\tremoveExclusion(host.host, host.ramUsed);\\n\\treturn pid;\\n}\\n\\nasync function runHack(target, host) {\\n\\tconst pid = await ns.exec(hack_script, host.host, host.threads_available, target, Math.random());\\n\\tremoveExclusion(host.host, host.ramUsed);\\n\\treturn pid;\\n}\\n\\nconst getCores = (host) => ns.getServer(host).cpuCores;\\n\\nfunction getHostsAndThreads(hackThreadFunction, growThreadFunction, weakThreadFunction) {\\n\\tlet hackHost;\\n\\tlet growHost;\\n\\tlet weakenHosts;\\n\\thackHost = getHostAndThreadsFunc(hack_scriptRam, hackThreadFunction);\\n\\tif (hackHost.host) addExclusion(hackHost.host, hackHost.ramUsed);\\n\\tgrowHost = getHostAndThreadsFunc(grow_scriptRam, (host) => growThreadFunction(host, hackHost.threads_available));\\n\\tif (growHost.host) addExclusion(growHost.host, growHost.ramUsed);\\n\\tweakenHosts = getHostAndThreadsFunc(weaken_scriptRam, (host) => weakThreadFunction(host, hackHost.threads_available, growHost.threads_available), true);\\n\\n\\tif (!hackHost.host || !growHost.host || weakenHosts.length <= 0) {\\n\\t\\tremoveExclusion(hackHost.host, hackHost.ramUsed);\\n\\t\\tremoveExclusion(growHost.host, growHost.ramUsed);\\n\\t} else {\\n\\t\\tfor (const weakenHost of weakenHosts) {\\n\\t\\t\\taddExclusion(weakenHost.host, weakenHost.ramUsed);\\n\\t\\t}\\n\\t}\\n\\treturn { hackHost, growHost, weakenHosts };\\n}\\n\\nfunction getHostAndThreadsFunc(scriptRam, threadFunction, hostSplit) {\\n\\tconst emptyRet = { threads_available: 0, host: null, threadsAvailMinusNeed: 0, ramUsed: 0 };\\n\\tconst hosts = serversForExecution.map((host) => {\\n\\t\\tlet maxRam = ns.getServerMaxRam(host);\\n\\t\\t// reserve some ram for other scripts\\n\\t\\tif (host === 'home') {\\n\\t\\t\\tmaxRam = Math.max(maxRam * .75, maxRam - 128);\\n\\t\\t}\\n\\t\\tconst threads_available = Math.floor((maxRam - ns.getServerUsedRam(host) - excludedHostRam(host)) / scriptRam);\\n\\t\\tlet threadsNeeded = threadFunction(host);\\n\\t\\tconst ramUsed = parseFloat((threadsNeeded * scriptRam).toFixed(3));\\n\\t\\tconst threadsAvailMinusNeed = threads_available - threadsNeeded;\\n\\t\\treturn { threads_available, host, threadsAvailMinusNeed, ramUsed };\\n\\t}).filter((hostO) => hostO.threads_available >= 1);\\n\\tif (hosts.length <= 0) return emptyRet;\\n\\thosts.sort((a, b) => a.threadsAvailMinusNeed - b.threadsAvailMinusNeed);\\n\\tif (hostSplit) {\\n\\t\\tconst threadsNeeded = threadFunction('n00dles');\\n\\t\\tconst serversWithRamFree = hosts.filter(o => o.threads_available > 0);\\n\\t\\tlet acc = 0;\\n\\t\\tlet hostsAcc = [];\\n\\t\\twhile (acc < threadsNeeded) {\\n\\t\\t\\tconst s = serversWithRamFree.shift();\\n\\t\\t\\tif (!s) {\\n\\t\\t\\t\\t// not enough servers with threads_available to fill need\\n\\t\\t\\t\\treturn [];\\n\\t\\t\\t}\\n\\t\\t\\tacc += s.threads_available;\\n\\t\\t\\thostsAcc.push(s);\\n\\t\\t}\\n\\t\\treturn hostsAcc;\\n\\t}\\n\\t// take the closet fit from front of the array or return empty\\n\\treturn hosts.filter(o => o.threadsAvailMinusNeed >= 0).shift() || emptyRet;\\n}\\n\\nconst exclusionMap = {};\\nfunction addExclusion(host, ram) {\\n\\texclusionMap[host] = exclusionMap[host] || 0;\\n\\texclusionMap[host] = Math.min(exclusionMap[host] + ram, ns.getServerMaxRam(host))\\n}\\nfunction removeExclusion(host, ram) {\\n\\texclusionMap[host] = exclusionMap[host] || 0;\\n\\texclusionMap[host] = Math.max(exclusionMap[host] - ram, 0);\\n}\\nfunction excludedHostRam(host) {\\n\\treturn exclusionMap[host] || 0;\\n}\",\"filename\":\"mcp_hgw_batch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"growthFunctions.js\",\"url\":\"blob:https://danielyxie.github.io/255fcb15-7586-4e1e-88ec-655c52e5634b\",\"moduleSequenceNumber\":376},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/b6dcb16e-52a4-4ca3-b088-2c93660fe00b\",\"moduleSequenceNumber\":368},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/a551c763-7f60-485d-ba83-4431efd2b4ff\",\"moduleSequenceNumber\":351},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/39567991-3497-4061-8487-27e5c7966afe\",\"moduleSequenceNumber\":352},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/111b106d-8613-4a15-a498-d7a2ac68d100\",\"moduleSequenceNumber\":351},{\"filename\":\"mcp_hgw_batch.js\",\"url\":\"blob:https://danielyxie.github.io/6ac6bcc4-644e-4947-be2a-9ccff2a9f914\",\"moduleSequenceNumber\":4946}],\"dependents\":[],\"ramUsage\":11.9,\"server\":\"home\",\"moduleSequenceNumber\":291,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.bladeburner.joinBladeburnerDivision();\\n    ns.exec('bladeburner.js', 'home');\\n}\",\"filename\":\"joinBladeburners.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"joinBladeburners.js\",\"url\":\"blob:https://danielyxie.github.io/cf6aff4d-e77e-4491-b7a2-ac4735e114ac\",\"moduleSequenceNumber\":334255}],\"dependents\":[],\"ramUsage\":6.9,\"server\":\"home\",\"moduleSequenceNumber\":292,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"bladeburner.joinBladeburnerDivision\",\"cost\":4},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { boxTailSingleton } from \\\"utils.js\\\"\\nimport { getOwnedAugmentationsStatic } from \\\"./augments\\\";\\nconst cityNames = [\\\"Sector-12\\\", \\\"Aevum\\\", \\\"Volhaven\\\", \\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\"];\\nconst antiChaosOperation = \\\"Stealth Retirement Operation\\\"; // Note: Faster and more effective than Diplomacy at reducing city chaos\\nconst simulacrumAugName = \\\"The Blade's Simulacrum\\\"; // This augmentation lets you do bladeburner actions while busy\\n\\n// In general, we will buy the skill upgrade with the next highest cost, but to tweak the priority of various skills,\\n// we use the following configuration to change their relative cost. Higher number means lower priority\\n// Note: Ideally we could emphasize Tracer \\\"early-game\\\" and Digital Observer \\\"late-game\\\", but this is too much of a pain to solve for\\nconst costAdjustments = {\\n    \\\"Reaper\\\": 1.2, // Combat boost. Early effect is paltry (because stats are so low), will get plenty of points late game\\n    \\\"Evasive Systems\\\": 1.2, // Dex/Agi boost. Mildly deprioritized for same reasoning as above.\\n    \\\"Overclock\\\": 0.8, // Faster ops faster skillups faster rank. Stamina becomes less of an issue as you get late into BB. Might run out of ops instead\\n    \\\"Cloak\\\": 1.5, // Cheap, and stealth ends up with plenty of boost, so we don't need to invest in Cloak as much.\\n    \\\"Hyperdrive\\\": 100, // Improves stats gained, but not Rank gained. Training limit is default 0\\n    \\\"Tracer\\\": 100, // Only boosts Contract success chance, which are relatively easy to begin with.\\n    \\\"Cyber's Edge\\\": 3, // Boosts stamina, more stam more regen, but contract counts can be more limiting than stamina\\n    \\\"Hands of Midas\\\": 100 // Improves money gain. It is assumed that Bladeburner will *not* be a main source of income\\n};\\n\\n// Some bladeburner info gathered at startup and cached\\nlet skillNames, generalActionNames, contractNames, operationNames, remainingBlackOpsNames, blackOpsRanks;\\nlet haveSimulacrum, lastBlackOpReady, lowStaminaTriggered, timesTrained, currentTaskEndTime, maxRankNeeded, lastAssignedTask;\\nlet player;\\nlet options;\\nconst argsSchema = [\\n    ['success-threshold', 0.90], // Attempt the best action whose minimum chance of success exceeds this threshold\\n    ['chaos-recovery-threshold', 50], // Prefer to do \\\"Stealth Retirement\\\" operations to reduce chaos when it reaches this number\\n    // lot of chaos seems to be a ok by the time we get out of control using stealth retirement manages it well\\n    ['max-chaos', 10000], // If chaos exceeds this amount in every city, we will reluctantly resort to diplomacy to reduce it.\\n    ['low-stamina-pct', 0.5], // Switch to no-stamina actions when we drop below this stamina percent\\n    ['high-stamina-pct', 0.6], // Switch back to stamina-consuming actions when we rise above this stamina percent\\n    ['training-limit', 0], // Don't bother training more than this many times, since Training is slow and earns no rank\\n    ['update-interval', 2000], // How often to refresh bladeburner status\\n    ['ignore-busy-status', false], // If set to true, we will attempt to do bladeburner tasks even if we are currently busy and don't have The Blade's Simulacrum\\n    ['allow-raiding-highest-pop-city', false], // Set to true, we will allow Raid to be used even in our highest-population city (disabled by default)\\n    ['reserved-action-count', 200], // Some operation types are \\\"reserved\\\" for chaos reduction / population estimate increase. Start by reserving this many, reduced automatically as we approach maxRankNeeded\\n    ['disable-spending-hashes', false], // Set to true to not spawn spend-hacknet-hashes.js to spend hashes on bladeburner\\n];\\nexport function autocomplete(data, _) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('asleep');\\n    options = ns.flags(argsSchema);\\n    player = ns.getPlayer();\\n    if (player.bitNodeN === 8)\\n        return ns.print(\\\"ERROR: Bladeburner is completely disabled in Bitnode 8 :`(\\\\nHappy stonking\\\", true, 'error');\\n    if (!player.inBladeburner) {\\n        return ns.print(\\\"ERROR: no in Bladeburner yet\\\");\\n    }\\n    boxTailSingleton(ns, 'Bladeburner', '🗡', '200px');\\n    ns.clearLog();\\n    // Gather one-time info such as contract and operation names\\n    await gatherBladeburnerInfo(ns);\\n    // Start the main loop which monitors stats and changes activities as needed\\n    while (true) {\\n        try { await mainLoop(ns); }\\n        catch (err) {\\n            ns.print(`WARNING: bladeburner.js Caught (and suppressed) an unexpected error in the main loop:\\\\n` +\\n                (typeof err === 'string' ? err : err.message || JSON.stringify(err)), false, 'warning');\\n        }\\n        const nextTaskComplete = currentTaskEndTime - Date.now();\\n        await ns.asleep(Math.min(options['update-interval'], nextTaskComplete > 0 ? nextTaskComplete : Number.MAX_VALUE));\\n    }\\n}\\n\\n/** @param {NS} ns\\n * Gather all one-time bladeburner info using ram-dodging scripts. */\\nasync function gatherBladeburnerInfo(ns) {\\n    skillNames = ns.bladeburner.getSkillNames();\\n    generalActionNames = ns.bladeburner.getGeneralActionNames();\\n    contractNames = ns.bladeburner.getContractNames().reverse(); // Reversed to put in order of highest rep to lowest\\n    operationNames = ns.bladeburner.getOperationNames().reverse(); // Reversed to put in order of highest rep to lowest\\n    // Blackops data is a bit special, each can be completed one time, they should be done in order\\n    const blackOpsNames = ns.bladeburner.getBlackOpNames();\\n    blackOpsRanks = {};\\n    const blackOpsToBeDone = {};\\n    for (let blackOpsName of blackOpsNames) {\\n        blackOpsRanks[blackOpsName] = ns.bladeburner.getBlackOpRank(blackOpsName);\\n        blackOpsToBeDone[blackOpsName] = ns.bladeburner.getActionCountRemaining(\\\"blackops\\\", blackOpsName);\\n    }\\n    remainingBlackOpsNames = blackOpsNames.filter(n => blackOpsToBeDone[n] === 1)\\n        .sort((b1, b2) => blackOpsRanks[b1] - blackOpsRanks[b2]);\\n    ns.print(`There are ${remainingBlackOpsNames.length} remaining BlackOps operations to complete in order:\\\\n` +\\n        remainingBlackOpsNames.map(n => `${n} (${blackOpsRanks[n]})`).join(\\\", \\\"));\\n    maxRankNeeded = blackOpsRanks[remainingBlackOpsNames[remainingBlackOpsNames.length - 1]];\\n    // Check if we have the aug that lets us do bladeburner while otherwise busy\\n    haveSimulacrum = getOwnedAugmentationsStatic(ns).includes(simulacrumAugName);\\n    // Initialize some flags that may change over time\\n    lastAssignedTask = null;\\n    lastBlackOpReady = false; // Flag will track whether we've notified the user that the last black-op is ready\\n    lowStaminaTriggered = false; // Flag will track whether we've previously switched to stamina recovery to reduce noise\\n    timesTrained = 0; // Count of how many times we've trained (capped at --training-limit)\\n    currentTaskEndTime = 0; // When set to a date, we will not assign new tasks until that date.\\n}\\n\\n// Helpers to determine the the dict keys with the lowest/highest value (returns an array [key, minValue] for destructuring)\\nconst getMinKeyValue = (dict, filteredKeys = null) => (filteredKeys || Object.keys(dict)).reduce(([k, min], key) =>\\n    dict[key] < min ? [key, dict[key]] : [k, min], [null, Number.MAX_VALUE]);\\nconst getMaxKeyValue = (dict, filteredKeys = null) => (filteredKeys || Object.keys(dict)).reduce(([k, max], key) =>\\n    dict[key] > max ? [key, dict[key]] : [k, max], [null, -Number.MAX_VALUE]);\\n\\n/** @param {NS} ns\\n * The main loop that decides what we should be doing in bladeburner. */\\nasync function mainLoop(ns) {\\n    // Get player's updated rank\\n    const rank = ns.bladeburner.getRank();\\n    // Spend any un-spent skill points\\n    await spendSkillPoints(ns);\\n    // See if we are able to do bladeburner work\\n    if (!(await canDoBladeburnerWork(ns))) return;\\n\\n    // NEXT STEP: Gather data needed to determine what and where to work\\n    // If any blackops have been completed, remove them from the list of remaining blackops\\n    const blackOpsToBeDone = {};\\n    const blackOpsNames = ns.bladeburner.getBlackOpNames();\\n    for (let blackOpsName of blackOpsNames) {\\n        blackOpsRanks[blackOpsName] = ns.bladeburner.getBlackOpRank(blackOpsName);\\n        blackOpsToBeDone[blackOpsName] = ns.bladeburner.getActionCountRemaining(\\\"blackops\\\", blackOpsName);\\n    }\\n    remainingBlackOpsNames = remainingBlackOpsNames.filter(n => blackOpsToBeDone[n] === 1);\\n\\n    // Gather the count of available contracts / operations\\n    const nextBlackOp = remainingBlackOpsNames[0];\\n    const contractCounts = {};\\n    for (let contractName of contractNames) {\\n        contractCounts[contractName] = ns.bladeburner.getActionCountRemaining(\\\"contract\\\", contractName);\\n    }\\n    const operationCounts = {};\\n    for (let operationName of operationNames) {\\n        operationCounts[operationName] = ns.bladeburner.getActionCountRemaining(\\\"operation\\\", operationName);\\n    }\\n    // Define a helper that gets the count for an action based only on the name (type is auto-determined)\\n    const getCount = actionName => contractNames.includes(actionName) ? contractCounts[actionName] :\\n        operationNames.includes(actionName) ? operationCounts[actionName] :\\n            generalActionNames.includes(actionName) ? Number.POSITIVE_INFINITY : remainingBlackOpsNames.includes(actionName) ? 1 : 0;\\n    // Create some quick-reference collections of action names that are limited in count and/or reserved for special purpose\\n    const limitedActions = [nextBlackOp].concat(operationNames).concat(contractNames);\\n    const populationActions = [\\\"Undercover Operation\\\", \\\"Investigation\\\", \\\"Tracking\\\"];\\n    const reservedActions = [\\\"Raid\\\", \\\"Stealth Retirement Operation\\\"].concat(populationActions\\n        // Only reserve these actions if their count is below the configured reserve amount, scaled down as we approach our final rank (stop reserving at 99% of max rank)\\n        .filter(a => getCount(a) <= (options['reserved-action-count'] * (1 - rank / (0.99 * maxRankNeeded)))));\\n    if (rank < blackOpsRanks[nextBlackOp]) reservedActions.push(nextBlackOp); // Remove blackop from \\\"available actions\\\" if we have insufficient rank.\\n    const unreservedActions = limitedActions.filter(o => !reservedActions.includes(o));\\n    //ns.print('Unreserved Action Counts: ' + unreservedActions.map(a => `${a}: ${getCount(a)}`).join(\\\", \\\")); // Debug log to see what unreserved actions remain\\n    //ns.print('Reserved Action Counts: ' + reservedActions.map(a => `${a}: ${getCount(a)}`).join(\\\", \\\")); // Debug log to see what unreserved actions remain\\n\\n    // NEXT STEP: Determine which city to work in\\n    // Get the population, communities, and chaos in each city\\n    const populationByCity = {};\\n    const communitiesByCity = {};\\n    const chaosByCity = {};\\n    for (let cityName of cityNames) {\\n        populationByCity[cityName] = ns.bladeburner.getCityEstimatedPopulation(cityName);\\n        communitiesByCity[cityName] = ns.bladeburner.getCityCommunities(cityName);\\n        chaosByCity[cityName] = ns.bladeburner.getCityChaos(cityName);\\n    }\\n    let goToCity, population, travelReason, goingRaiding = false;\\n\\n    // SPECIAL CASE: GO TO LOWEST-POPULATION CITY\\n    // If the only operations left to us are \\\"Raid\\\" (reduces population by a %, which, counter-intuitively, is bad for us),\\n    // thrash the city with the lowest population (but still having some communities to enable Raid).\\n    if (getCount(\\\"Raid\\\") > 0 && unreservedActions.every(c => getCount(c) === 0)) {\\n        const raidableCities = cityNames.filter(c => communitiesByCity[c] > 0); // Cities with at least one community\\n        // Only allow Raid if we would not be raiding our highest-population city (need to maintain at least one)\\n        const [highestPopCity, _] = getMaxKeyValue(populationByCity, cityNames);\\n        goingRaiding = raidableCities.length > 0 && (raidableCities[0] !== highestPopCity || options['allow-raiding-highest-pop-city']);\\n        if (goingRaiding) { // Select the raid-able city with the smallest population\\n            [goToCity, population] = getMinKeyValue(populationByCity, raidableCities);\\n            travelReason = `Lowest population (${population}) city with communities (${communitiesByCity[goToCity]}) to use up ${getCount(\\\"Raid\\\")} Raid operations`;\\n        }// else ns.print(`INFO: Cannot use up raid operations because there are ${raidableCities.length} cities with communities. ` +\\n        //    `(--allow-raiding-highest-pop-city is set to ${options['allow-raiding-highest-pop-city']})`);\\n    }\\n    // SPECIAL CASE: GO TO HIGHEST-CHAOS CITY\\n    if (!goToCity && unreservedActions.every(c => getCount(c) === 0)) {\\n        let [maxChaosCity, maxChaos] = getMaxKeyValue(chaosByCity, cityNames);\\n        // If all we have left is \\\"Stealth Retirement Operation\\\", switch to the city with the most chaos (if it's a decent amount), and use them up.\\n        if (getCount(\\\"Stealth Retirement Operation\\\") && maxChaos > options['chaos-recovery-threshold']) {\\n            goToCity = maxChaosCity;\\n            travelReason = `Highest-chaos (${maxChaos.toFixed(1)}) city to use up Stealth Retirement Operations`;\\n        } else if (maxChaos > options['max-chaos']) {\\n            goToCity = maxChaosCity;\\n            travelReason = `Nothing better to do, and city chaos ${maxChaos.toFixed(1)} is above --max-chaos threshold ${options['max-chaos']} - should use Diplomacy`;\\n        }\\n    } // Also, if we have nothing to do (even no Stealth Retirement), but chaos is above 'max-chaos' in some city, switch to it to do Diplomacy\\n\\n    // GENERAL CASE: GO TO HIGHEST-POPULATION CITY\\n    if (!goToCity) { // Otherwise, cities with higher populations give better operation chances\\n        // Try to narrow down the cities we wish to work in to the ones with no chaos penalties\\n        let acceptableCities = cityNames.filter(city => chaosByCity[city] <= options['chaos-recovery-threshold']);\\n        // Pick the city (within chaos thresholds) with the highest population to maximize success chance.\\n        // If no city is within thresholds, the largest population city will be picked regardless of chaos\\n        [goToCity, population] = getMaxKeyValue(populationByCity, acceptableCities.length > 0 ? acceptableCities : cityNames);\\n        travelReason = `Highest population (${population}) city, with chaos ${chaosByCity[goToCity].toFixed(1)}` +\\n            (acceptableCities.length === 0 ? ` (all cities above chaos threshold of ${options['chaos-recovery-threshold']})` : '');\\n    }\\n\\n    let currentCity = ns.bladeburner.getCity();\\n    // Change cities if we aren't blocked on our last task, and found a better city to work in\\n    if (currentCity !== goToCity && Date.now() > currentTaskEndTime && (await switchToCity(ns, goToCity, travelReason)))\\n        currentCity = goToCity;\\n\\n    // Gather the success chance of contracts (based on our current city)\\n    const blackOpsChance = rank < blackOpsRanks[nextBlackOp] ? [0, 0] : // Insufficient rank for blackops means chance is zero\\n        ns.bladeburner.getActionEstimatedSuccessChance(\\\"blackops\\\", nextBlackOp);\\n    const contractChances = {};\\n    for (let contractName of contractNames) {\\n        contractChances[contractName] = ns.bladeburner.getActionEstimatedSuccessChance(\\\"contract\\\", contractName);\\n    }\\n    const operationChances = {};\\n    for (let operationName of operationNames) {\\n        operationChances[operationName] = ns.bladeburner.getActionEstimatedSuccessChance(\\\"operation\\\", operationName);\\n    }\\n    // Define some helpers for determining min/max chance for each action\\n    const getChance = actionName => contractNames.includes(actionName) ? contractChances[actionName] :\\n        operationNames.includes(actionName) ? operationChances[actionName] :\\n            generalActionNames.includes(actionName) ? [1, 1] : nextBlackOp === actionName ? blackOpsChance : [0, 0];\\n    const minChance = actionName => getChance(actionName)[0];\\n    const maxChance = actionName => getChance(actionName)[1];\\n\\n    // NEXT STEP: Pick the action we should be working on.\\n    let bestActionName, reason;\\n    const actionSummaryString = (action) => `Success Chance: ${(100 * minChance(action)).toFixed(1)}%` +\\n        (maxChance(action) - minChance(action) < 0.001 ? '' : ` to ${(100 * maxChance(action)).toFixed(1)}%`) + `, Remaining: ${getCount(action)}`\\n\\n    // Trigger stamina recovery if we drop below our --low-stamina-pct configuration, and remain triggered until we've recovered to --high-stamina-pct\\n    const stamina = ns.bladeburner.getStamina(); // Returns [current, max];\\n    const staminaPct = stamina[0] / stamina[1];\\n    lowStaminaTriggered = staminaPct < options['low-stamina-pct'] || lowStaminaTriggered && staminaPct < options['high-stamina-pct'];\\n    // If we are suffering a stamina penalty, perform an action that consumes no stamina\\n    if (lowStaminaTriggered) {\\n        bestActionName = chaosByCity[currentCity] > options['max-chaos'] ? \\\"Diplomacy\\\" : \\\"Field Analysis\\\";\\n        reason = `Stamina is low: ${(100 * staminaPct).toFixed(1)}% < ${(100 * options['low-stamina-pct']).toFixed(1)}%`\\n    } // If current city chaos is greater than our threshold, keep it low with \\\"Stealth Retirement\\\" if odds are good\\n    else if (chaosByCity[currentCity] > options['chaos-recovery-threshold'] && getCount(antiChaosOperation) > 0 && minChance(antiChaosOperation) > 0.99) {\\n        bestActionName = antiChaosOperation;\\n        reason = `Chaos is high: ${chaosByCity[currentCity].toFixed(2)} > ${options['chaos-recovery-threshold']} (--chaos-recovery-threshold) ${actionSummaryString(bestActionName)}`;\\n    } // If current city chaos is very high, we should be very wary of the snowballing effects, and try to reduce it.\\n    else if (chaosByCity[currentCity] > options['max-chaos']) {\\n        bestActionName = getCount(antiChaosOperation) > 0 && minChance(antiChaosOperation) > 0.8 ? antiChaosOperation : \\\"Diplomacy\\\";\\n        reason = `Out of ${antiChaosOperation}s, and chaos ${chaosByCity[currentCity].toFixed(2)} is higher than --max-chaos ${options['max-chaos']}`;\\n    } // If we've previously determined we will be raiding the lowest-population city\\n    else if (goingRaiding && maxChance(\\\"Raid\\\") > options['success-threshold']) { // Special-case: Ignore min-chance. Population estimate turns bad as we decimate it, but doesn't seem to affect success.\\n        bestActionName = \\\"Raid\\\";\\n        reason = `Only remaining Operations. ${actionSummaryString(bestActionName)}`;\\n    } else { // Otherwise, pick the \\\"highest-tier\\\" action we can confidently perform, which should lead to the fastest rep-gain.\\n        // Note: Candidate actions will be maintained in order of highest-rep to lowest-rep earning, so we can pick the first after filtering.\\n        let candidateActions = limitedActions;\\n        // We should deal with population uncertainty if its causing some mission to be on the verge of our success threshold\\n        let populationUncertain = candidateActions.some(a => maxChance(a) > options['success-threshold'] && minChance(a) < options['success-threshold']);\\n        // If current population uncertainty is such that some actions have a maxChance of ~100%, but not a minChance of ~100%,\\n        //   focus on actions that improve the population estimate, otherwise, reserve these actions for later\\n        candidateActions = populationUncertain ? populationActions : unreservedActions;\\n        // Filter out candidates with no contract counts remaining\\n        candidateActions = candidateActions.filter(a => getCount(a) > 0);\\n        // SPECIAL CASE: If we can complete the last bladeburner operation, leave it to the user (they may not be ready to leave the BN).\\n        if (remainingBlackOpsNames.length === 1 && minChance(nextBlackOp) > options['success-threshold']) {\\n            if (!lastBlackOpReady) { // If this is our first time discovering this, alert the user\\n                const time = ns.getPlayer().playtimeSinceLastBitnode;\\n                ns.print(`SUCCESS: Bladeburner is ready to undertake the last BlackOp! (At ${ns.tFormat(time)})`, true, 'success');\\n                ns.alert(\\\"Bladeburner is ready to undertake the last BlackOp (ends the bitnode)\\\");\\n                lastBlackOpReady = true;\\n            }\\n            candidateActions = candidateActions.filter(a => a !== nextBlackOp);\\n        }\\n\\n        // ns.print('The following actions are available: ' + candidateActions); // Debug log to see what candidate actions are\\n        // Pick the first candidate action with a minimum chance of success that exceeds our --success-threshold\\n        bestActionName = candidateActions.filter(a => minChance(a) > options['success-threshold'])[0];\\n        if (!bestActionName) // If there were none, allow us to fall-back to an action with a minimum chance >50%, and maximum chance > threshold\\n            bestActionName = candidateActions.filter(a => minChance(a) > 0.5 && maxChance(a) > options['success-threshold'])[0];\\n        if (!bestActionName) // For actions that improve the population estimate, we're willing to risk the low min chance if it means avoiding Field Analysis\\n            bestActionName = candidateActions.filter(a => populationActions.includes(a) && maxChance(a) > options['success-threshold'])[0];\\n        if (bestActionName) // If we found something to do, log details about its success chance range\\n            reason = actionSummaryString(bestActionName);\\n\\n        // If there were no operations/contracts, resort to a \\\"general action\\\" which always have 100% chance, but take longer and gives less reward\\n        if (!bestActionName) {\\n            if (populationUncertain) { // Lower population uncertainty\\n                bestActionName = \\\"Field Analysis\\\";\\n                reason = `High population uncertainty in ${currentCity}`;\\n            } // If all (non-reserved) operation counts are 0, and chaos isn't too high, Incite Violence to get more work (logic above should subsequently reduce chaos)\\n            else if (unreservedActions.every(a => getCount(a) === 0) && cityNames.every(c => chaosByCity[c] < options['max-chaos'])) {\\n                bestActionName = \\\"Incite Violence\\\";\\n                let [maxChaosCity, maxChaos] = getMaxKeyValue(chaosByCity, cityNames);\\n                reason = `No work available, and max city chaos is ${maxChaos.toFixed(1)} in ${maxChaosCity}, ` +\\n                    `which is less than --max-chaos threshold ${options['max-chaos']}`;\\n            } // Otherwise, consider training\\n            else if (unreservedActions.some(a => maxChance(a) < options['success-threshold']) && // Only if we aren't at 100% chance for everything\\n                staminaPct > options['high-stamina-pct'] && timesTrained < options['training-limit']) { // Only if we have plenty of stamina and have barely trained\\n                timesTrained += options['update-interval'] / 30000; // Take into account the training time (30 seconds) vs how often this code is called\\n                bestActionName = \\\"Training\\\";\\n                reason = `Nothing better to do, times trained (${timesTrained.toFixed(0)}) < --training-limit (${options['training-limit']}), and ` +\\n                    `actions are below success threshold: ` + unreservedActions.filter(a => maxChance(a) < options['success-threshold'])\\n                        .map(a => `${a} (${(100 * maxChance(a)).toFixed(1)}%)`).join(\\\", \\\");\\n            } else { // Otherwise, Field Analysis\\n                bestActionName = \\\"Field Analysis\\\"; // Gives a little rank, and improves population estimate. Best we can do when there's nothing else.\\n                reason = `Nothing better to do`;\\n            }\\n        }\\n        // NOTE: We never \\\"Recruit\\\". Community consensus is that team mates die too readily, and have minimal impact on success.\\n        // NOTE: We don't use the \\\"Hyperbolic Regeneration Chamber\\\". We are cautious enough that we should never need healing.\\n    }\\n\\n    // Detect our current action (API returns an object like { \\\"type\\\":\\\"Operation\\\", \\\"name\\\":\\\"Investigation\\\" })\\n    const currentAction = ns.bladeburner.getCurrentAction();\\n    // Special case: If the user has manually kicked off the last BlackOps, don't interrupt it, let it be our last task\\n    if (currentAction?.name === remainingBlackOpsNames[remainingBlackOpsNames.length - 1]) {\\n        lastAssignedTask = currentAction;\\n        bestActionName = currentAction.name;\\n    }\\n    // Warn the user if it looks like a task was interrupted by something else (user activity or bladeburner automation). Ignore if our last assigned task has run out of actions.\\n    if (lastAssignedTask && lastAssignedTask !== currentAction?.name && getCount(lastAssignedTask) > 0) {\\n        ns.print(`WARNING: The last task this script assigned was \\\"${lastAssignedTask}\\\", but you're now doing \\\"${currentAction?.name || '(nothing)'}\\\". ` +\\n            `Have you been using Bladeburner Automation? If so, try typing \\\"automate dis\\\" in the Bladeburner Console.`, false, 'warning');\\n    } else if (currentAction?.name) {\\n        const currentDuration = ns.bladeburner.getActionTime(currentAction.type, currentAction.name);\\n        if (!lastAssignedTask) { // Leave a log acknowledging if we just started up and there was an activity already underway.\\n            ns.print(`INFO: At startup, Bladeburner was already doing \\\"${currentAction?.name}\\\", ` +\\n                (bestActionName !== currentAction.name ? `but we would prefer to do \\\"${bestActionName}\\\", so we will be switching.` :\\n                    `which is what we were planning to do, so we will leave the current task alone.`));\\n            lastAssignedTask = bestActionName;\\n        }\\n        // Normally, we don't switch tasks if our previously assigned task hasn't had time to complete once.\\n        // EXCEPTION: Early after a reset, this time is LONG, and in a few seconds it may be faster to just stop and restart it.\\n        if (currentDuration < currentTaskEndTime - Date.now()) {\\n            ns.print(`INFO: ${bestActionName === currentAction.name ? 'Restarting' : 'Cancelling'} action \\\"${currentAction.name}\\\" because its new duration ` +\\n                `is less than the time remaining (${ns.tFormat(currentDuration)} < ${ns.tFormat(currentTaskEndTime - Date.now())})`);\\n        } else if (Date.now() < currentTaskEndTime || bestActionName === currentAction.name) return;\\n    } // Otherwise prior action was stopped or ended and no count remain, so we should start a new one regardless of expected currentTaskEndTime\\n\\n    // Change actions if we're not currently doing the desired action\\n    const bestActionType = nextBlackOp === bestActionName ? \\\"Black Op\\\" : contractNames.includes(bestActionName) ? \\\"Contract\\\" :\\n        operationNames.includes(bestActionName) ? \\\"Operation\\\" : \\\"General Action\\\";\\n    const success = ns.bladeburner.startAction(bestActionType, bestActionName);\\n    const expectedDuration = ns.bladeburner.getActionTime(bestActionType, bestActionName);\\n    const successMsg = `INFO: Switched to Bladeburner ${bestActionType} \\\"${bestActionName}\\\" (${reason}). ETA: ${ns.tFormat(expectedDuration)}`;\\n    ns.print((success ? successMsg :\\n        `ERROR: Failed to switch to Bladeburner ${bestActionType} \\\"${bestActionName}\\\" (Count: ${getCount(bestActionName)}, ` +\\n        `ETA: ${ns.tFormat(expectedDuration)}, Details: ${reason})`),\\n        !success);\\n    if (success) ns.toast(successMsg, 'info', 10000);\\n    // Ensure we perform this new action at least once before interrupting it\\n    lastAssignedTask = bestActionName;\\n    currentTaskEndTime = !success ? 0 : Date.now() + expectedDuration + 10; // Pad this a little to ensure we don't interrupt it.\\n}\\n\\n/** @param {NS} ns\\n * @param city\\n * @param reason\\n * Helper to switch cities. */\\nasync function switchToCity(ns, city, reason) {\\n    const success = ns.bladeburner.switchCity(city);\\n    ns.print((success ? 'INFO: Switched' : 'ERROR: Failed to switch') + ` to Bladeburner city \\\"${city}\\\" (${reason})`,\\n        !success);\\n    return success;\\n}\\n\\n/** @param {NS} ns\\n * Decides how to spend skill points. */\\nasync function spendSkillPoints(ns) {\\n    while (true) { // Loop until we determine there's nothing left to spend skill points on\\n        const unspent = ns.bladeburner.getSkillPoints();\\n        if (unspent === 0) return;\\n        const skillLevels = {};\\n        const skillCosts = {};\\n        for (let skillName of skillNames) {\\n            skillLevels[skillName] = ns.bladeburner.getSkillLevel(skillName);\\n            skillCosts[skillName] = ns.bladeburner.getSkillUpgradeCost(skillName);\\n        }\\n        // Find the next lowest skill cost\\n        let skillToUpgrade = '';\\n        let minPerceivedCost = Number.MAX_SAFE_INTEGER;\\n        for (const skillName of skillNames) {\\n            let perceivedCost = skillCosts[skillName] * (costAdjustments[skillName] || 1);\\n            // Bitburner bug workaround: Overclock is capped at lvl 90, but the cost does not return e.g. Infinity\\n            if (skillName === \\\"Overclock\\\" && skillLevels[skillName] === 90) perceivedCost = Number.POSITIVE_INFINITY;\\n            if (perceivedCost < minPerceivedCost)\\n                [skillToUpgrade, minPerceivedCost] = [skillName, perceivedCost];\\n        }\\n        // If the perceived or actual cost of the next best upgrade is too high, save our remaining points for later\\n        if (minPerceivedCost > unspent || skillCosts[skillToUpgrade] > unspent) return;\\n        // Otherwise, purchase the upgrade\\n        if (skillToUpgrade && ns.bladeburner.upgradeSkill(skillToUpgrade)) {\\n            const msg = `SUCCESS: Spent ${skillCosts[skillToUpgrade]} to upgrade '${skillToUpgrade}' to ${skillLevels[skillToUpgrade] + 1}`;\\n            ns.print(msg);\\n            ns.toast(msg, 'success', 30000);\\n        } else\\n            ns.print(`WARNING: Something went wrong while trying to upgrade Bladeburner skill ${skillToUpgrade}. ` +\\n                `Currently have ${unspent} SP, upgrade should cost ${skillCosts[skillToUpgrade]} SP.`, false, 'warning');\\n        await ns.asleep(10);\\n    }\\n}\\n\\n\\n/** @param {NS} ns\\n * Helper to see if we are able to do bladeburner work */\\nasync function canDoBladeburnerWork(ns) {\\n    if (options['ignore-busy-status'] || haveSimulacrum) return true;\\n    if (ns.heart.break() > -54000) return false; //unlock gang first\\n    // Check if the player is busy doing something else\\n    if (!ns.isBusy()) return true;\\n    ns.print(`WARNING: Cannot perform Bladeburner actions because the player is busy ` +\\n        `and hasn't installed the augmentation \\\"${simulacrumAugName}\\\"...`, false, 'warning');\\n    return false;\\n}\",\"filename\":\"bladeburner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"augments.js\",\"url\":\"blob:https://danielyxie.github.io/aa915700-139f-4ef4-9a98-bb28a8365689\",\"moduleSequenceNumber\":288},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/e7c90d11-d845-4d2f-a2c2-a5791255bf3d\",\"moduleSequenceNumber\":276},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/47b4a343-4c25-47ff-9845-49d92c71aebf\",\"moduleSequenceNumber\":259},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/389e10dc-3e4d-4145-b75b-ab6e1a51c3d7\",\"moduleSequenceNumber\":260},{\"filename\":\"bladeburner.js\",\"url\":\"blob:https://danielyxie.github.io/3e6b39ab-12e3-4073-b73a-a5c2ed5e2a09\",\"moduleSequenceNumber\":514}],\"dependents\":[],\"ramUsage\":68.1,\"server\":\"home\",\"moduleSequenceNumber\":514,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"bladeburner.getSkillNames\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"bladeburner.getGeneralActionNames\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"bladeburner.getContractNames\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"bladeburner.getOperationNames\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"bladeburner.getBlackOpNames\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"bladeburner.getBlackOpRank\",\"cost\":2},{\"type\":\"fn\",\"name\":\"bladeburner.getActionCountRemaining\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getRank\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getCityEstimatedPopulation\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getCityCommunities\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getCityChaos\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getCity\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getActionEstimatedSuccessChance\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getStamina\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getCurrentAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"bladeburner.getActionTime\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.startAction\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.switchCity\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getSkillPoints\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getSkillLevel\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getSkillUpgradeCost\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.upgradeSkill\",\"cost\":4},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { boxTailSingleton, copyHackingFiles, tryGetBitNodeMultipliers } from \\\"utils.js\\\"\\nlet haveHacknetServers = true; // Cached flag after detecting whether we do (or don't) have hacknet servers\\nconst argsSchema = [\\n    ['max-payoff-time-second', 3600], // Controls how far to upgrade hacknet. Can be a number of seconds, or an expression of minutes/hours (e.g. '123m', '4h')\\n    ['continuous', true], // Set to true to run continuously, otherwise, it runs once\\n    ['interval', 10000], // Rate at which the program purchases upgrades when running continuously\\n    ['max-spend', Number.MAX_VALUE], // The maximum amount of money to spend on upgrades\\n    ['toast', true], // Set to true to toast purchases\\n];\\n\\nexport function autocomplete(data, _) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const options = ns.flags(argsSchema);\\n    const continuous = options.continuous;\\n    const interval = options.interval;\\n    let maxSpend = options[\\\"max-spend\\\"];\\n    const hacknetMoney = tryGetBitNodeMultipliers(ns).HacknetNodeMoney\\n    let maxPayoffTime = options['max-payoff-time-second'] * hacknetMoney;\\n    ns.disableLog('sleep');\\n    ns.disableLog('getServerUsedRam');\\n    ns.disableLog('getServerMoneyAvailable');\\n    boxTailSingleton(ns, 'hacknet', '🖳', '100px');\\n    ns.clearLog();\\n    log(ns, `Starting hacknet-upgrade-manager with purchase payoff time limit of ${ns.tFormat(maxPayoffTime * 1000)} and ` +\\n        (maxSpend === Number.MAX_VALUE ? 'no spending limit' : `a spend limit of ${ns.nFormat(maxSpend, \\\"0.0a\\\")}`) +\\n        `. Current fleet: ${ns.hacknet.numNodes()} nodes...`);\\n    do {\\n        const moneySpent = await upgradeHacknet(ns, maxSpend, maxPayoffTime, options);\\n        // Using this method, we cannot know for sure that we don't have hacknet servers until we have purchased one\\n        if (haveHacknetServers && ns.hacknet.numNodes() > 0 && ns.hacknet.hashCapacity() === 0)\\n            haveHacknetServers = false;\\n        if (maxSpend && moneySpent === undefined) {\\n            log(ns, `Spending limit reached. Breaking...`);\\n            break; // Hack, but we return a non-number (false) when we've bought all we can for the current config\\n        }\\n        maxSpend -= moneySpent;\\n        if (continuous) await ns.sleep(interval);\\n    } while (continuous);\\n}\\n\\nlet lastUpgradeLog = \\\"\\\";\\nfunction log(ns, logMessage) { if (logMessage !== lastUpgradeLog) ns.print(lastUpgradeLog = logMessage); }\\n\\n// Will buy the most effective hacknet upgrade, so long as it will pay for itself in the next {payoffTimeSeconds} seconds.\\n/** @param {NS} ns *\\n * @param maxSpend\\n * @param maxPayoffTimeSeconds\\n * @param options\\n */\\nexport async function upgradeHacknet(ns, maxSpend, maxPayoffTimeSeconds = 3600 /* 3600 sec == 1 hour */, options) {\\n    const currentHacknetMult = ns.getPlayer().hacknet_node_money_mult;\\n    // Get the lowest cache level, we do not consider upgrading the cache level of servers above this until all have the same cache level\\n    const minCacheLevel = [...Array(ns.hacknet.numNodes()).keys()].reduce((min, i) => Math.min(min, ns.hacknet.getNodeStats(i).cache), Number.MAX_VALUE);\\n    const upgrades = [{ name: \\\"none\\\", cost: 0 }, {\\n        name: \\\"level\\\", upgrade: ns.hacknet.upgradeLevel, cost: (i, l = 1) => ns.hacknet.getLevelUpgradeCost(i, l), nextValue: (nodeStats, l = 1) => nodeStats.level + l,\\n        addedProduction: (nodeStats, l = 1) => ns.formulas.hacknetServers.hashGainRate(nodeStats.level + l, 0, nodeStats.ram, nodeStats.cores, currentHacknetMult)\\n    }, {\\n        name: \\\"ram\\\", upgrade: ns.hacknet.upgradeRam, cost: (i, l = 1) => ns.hacknet.getRamUpgradeCost(i, l), nextValue: (nodeStats, l = 1) => nodeStats.ram * 2 * l,\\n        addedProduction: (nodeStats, l = 1) => ns.formulas.hacknetServers.hashGainRate(nodeStats.level, 0, nodeStats.ram * 2 * l, nodeStats.cores, currentHacknetMult)\\n    }, {\\n        name: \\\"cores\\\", upgrade: ns.hacknet.upgradeCore, cost: (i, l = 1) => ns.hacknet.getCoreUpgradeCost(i, l), nextValue: (nodeStats, l = 1) => nodeStats.cores + l,\\n        addedProduction: (nodeStats, l = 1) => ns.formulas.hacknetServers.hashGainRate(nodeStats.level, 0, nodeStats.ram, nodeStats.cores + l, currentHacknetMult)\\n    }, {\\n        name: \\\"cache\\\", upgrade: ns.hacknet.upgradeCache, cost: (i, l = 1) => ns.hacknet.getCacheUpgradeCost(i, l), nextValue: (nodeStats, l = 1) => nodeStats.cache + l,\\n        addedProduction: (nodeStats, l = 1) => nodeStats.cache > minCacheLevel || !haveHacknetServers ? 0 : nodeStats.production * 0.01 / nodeStats.cache // Note: Does not actually give production, but it has \\\"worth\\\" to us so we can buy more things\\n    }];\\n    // Find the best upgrade we can make to an existing node\\n    let nodeToUpgrade = -1;\\n    let bestUpgrade;\\n    let bestUpgradePayoff = 0; // Hashes per second per dollar spent. Bigger is better.\\n    let cost = 0;\\n    let upgradedValue = 0;\\n    let worstNodeProduction = Number.MAX_VALUE; // Used to how productive a newly purchased node might be\\n    let worstNodeIndex;\\n    let worstNodeStats;\\n    for (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n        let nodeStats = ns.hacknet.getNodeStats(i);\\n        if (haveHacknetServers) { // When a hacknet server runs scripts, nodeStats.production lags behind what it should be for current ram usage. Get the \\\"raw\\\" rate\\n            nodeStats.production = ns.formulas.hacknetServers.hashGainRate(nodeStats.level, 0, nodeStats.ram, nodeStats.cores, currentHacknetMult);\\n        }\\n        worstNodeProduction = Math.min(worstNodeProduction, nodeStats.production);\\n        if (worstNodeProduction === nodeStats.production) {\\n            worstNodeIndex = i;\\n            worstNodeStats = nodeStats\\n        }\\n    }\\n    if (ns.hacknet.numNodes() !== 0) {\\n        // Upgrade the worst node because it'll be cheaper too\\n        for (let up = 1; up < upgrades.length; up++) {\\n            let currentUpgradeCost = upgrades[up].cost(worstNodeIndex);\\n            let payoff = upgrades[up].addedProduction(worstNodeStats) / currentUpgradeCost; // Production (Hashes per second) per dollar spent\\n            if (payoff > bestUpgradePayoff) {\\n                nodeToUpgrade = worstNodeIndex;\\n                bestUpgrade = upgrades[up];\\n                bestUpgradePayoff = payoff;\\n                cost = currentUpgradeCost;\\n                upgradedValue = upgrades[up].nextValue(worstNodeStats);\\n                // await upgradeLookAhead(ns, payoff, upgrades, up, worstNodeIndex, worstNodeStats);\\n            }\\n        }\\n    }\\n\\n    // Compare this to the cost of adding a new node. This is an imperfect science. We are paying to unlock the ability to buy all the same upgrades our\\n    // other nodes have - all of which have been deemed worthwhile. Not knowing the sum total that will have to be spent to reach that same production,\\n    // the \\\"most optimistic\\\" case is to treat \\\"price\\\" of all that production to be just the cost of this server, but this is **very** optimistic.\\n    // In practice, the cost of new hacknet nodes scales steeply enough that this should come close to being true (cost of server >> sum of cost of upgrades)\\n    let newNodeCost = ns.hacknet.getPurchaseNodeCost();\\n    let newNodePayoff = ns.hacknet.numNodes() === ns.hacknet.maxNumNodes() ? 0 : worstNodeProduction / newNodeCost;\\n    let shouldBuyNewNode = newNodePayoff > bestUpgradePayoff;\\n    if (newNodePayoff === 0 && bestUpgradePayoff === 0) {\\n        log(ns, `All upgrades have no value (is hashNet income disabled in this BN?)`);\\n        return 0; // As long as maxSpend doesn't change, we will never purchase another upgrade\\n    }\\n    // If specified, only buy upgrades that will pay for themselves in {payoffTimeSeconds}.\\n    const hashDollarValue = haveHacknetServers ? 2.5e5 : 1; // Dollar value of one hash-per-second (0.25m dollars per production).\\n    let payoffTimeSeconds = 1 / (hashDollarValue * (shouldBuyNewNode ? newNodePayoff : bestUpgradePayoff));\\n    if (shouldBuyNewNode) cost = newNodeCost;\\n\\n    // Prepare info about the next upgrade. Whether we end up purchasing or not, we will display this info.\\n    let strPurchase = (shouldBuyNewNode ? `a new node \\\"hacknet-node-${ns.hacknet.numNodes()}\\\"` :\\n        `hacknet-node-${nodeToUpgrade} ${bestUpgrade.name} ${upgradedValue}`) + ` for ${ns.nFormat(cost, '0.0a')}`;\\n    let strPayoff = `production ${((shouldBuyNewNode ? newNodePayoff : bestUpgradePayoff) * cost).toPrecision(3)} payoff time: ${ns.tFormat(1000 * payoffTimeSeconds)}`\\n    if (cost > maxSpend) {\\n        log(ns, `The next best purchase would be ${strPurchase}, but the cost exceeds the spending limit (${ns.nFormat(maxSpend, '0.0a')})`);\\n        return; // Shut-down. As long as maxSpend doesn't change, we will never purchase another upgrade\\n    }\\n    if (payoffTimeSeconds > maxPayoffTimeSeconds) {\\n        log(ns, `The next best purchase would be ${strPurchase}, but the ${strPayoff} is worse than the limit (${ns.tFormat(1000 * maxPayoffTimeSeconds)})`);\\n        return; // Shut-down. As long as maxPayoffTimeSeconds doesn't change, we will never purchase another upgrade\\n    }\\n    let success;\\n    if (shouldBuyNewNode) {\\n        const nodeIndex = ns.hacknet.purchaseNode();\\n        await copyHackingFiles(ns, { hostname: `hacknet-node-${nodeIndex}`, hasAdminRights: true });\\n        success = nodeIndex !== -1;\\n    } else success = bestUpgrade.upgrade(nodeToUpgrade, 1)\\n\\n    if (success && options.toast) ns.toast(`Purchased ${strPurchase}`, 'success');\\n    log(ns, success ? `Purchased ${strPurchase} with ${strPayoff}` : `Insufficient funds to purchase the next best upgrade: ${strPurchase}`);\\n    return success ? cost : 0;\\n}\\n\\n//todo figure out how to upgrade out of the local minumum\\nasync function upgradeLookAhead(ns, payoff, upgrades, up, worstNodeIndex, worstNodeStats) {\\n    let l = 1;\\n    let nextPayoff = 0;\\n    log(ns, `payoff ${(payoff).toPrecision(3)} payoff time: ${ns.tFormat(1000 * (1 / (2.5e5 * payoff)))}`);\\n    let previousPayoffs = payoff;\\n    while (payoff > nextPayoff) {\\n        l++;\\n        upgrades[up].cost(worstNodeIndex, l);\\n        // Iterate on the number of levels checking if increasing the levels actually lowers the payoff.\\n        // perhaps the payoff will be worth it with more levels especially true of new nodes.\\n        let totalpayoff = upgrades[up].addedProduction(worstNodeStats, l) / upgrades[up].cost(worstNodeIndex, l);\\n        nextPayoff = totalpayoff - previousPayoffs;\\n        previousPayoffs = totalpayoff;\\n        log(ns, `nextPayoff ${(nextPayoff).toPrecision(3)} payoff time: ${ns.tFormat(1000 * (1 / (2.5e5 * nextPayoff)))}`);\\n        await ns.sleep(20);\\n    }\\n}\",\"filename\":\"hacknet.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/f0f64a60-bd3e-417a-90ac-3dd5cb16f295\",\"moduleSequenceNumber\":1500434},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/df3b2d5d-af8d-433d-91fa-be7cc7cb19a8\",\"moduleSequenceNumber\":1500417},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/bbb40ece-d64e-4394-b5a7-2ea7557dda1b\",\"moduleSequenceNumber\":1500418},{\"filename\":\"hacknet.js\",\"url\":\"blob:https://danielyxie.github.io/ba939ed7-395c-4e5b-b985-ac278f400b3c\",\"moduleSequenceNumber\":1500584}],\"dependents\":[],\"ramUsage\":7.3,\"server\":\"home\",\"moduleSequenceNumber\":294,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { boxTailSingleton} from \\\"utils.js\\\"\\n\\nconst sellForMoney = 'Sell for Money';\\n\\nconst argsSchema = [\\n\\t['liquidate', false], // Spend hashes as soon as we can afford any --spend-on purchase item. Otherwise, only spends when nearing capacity.\\n\\t['interval', 1000], // Rate at which the program runs and spends hashes\\n\\t['spend-on', [sellForMoney]],\\n\\t['spend-on-server', undefined],\\n\\t['reserve-buffer', 1], // To avoid wasting hashes, spend if would be within this many hashes of our max capacity on the next tick.\\n];\\n\\nconst basicSpendOptions = ['Sell for Money', 'Generate Coding Contract', 'Improve Studying', 'Improve Gym Training',\\n\\t'Sell for Corporation Funds', 'Exchange for Corporation Research', 'Exchange for Bladeburner Rank', 'Exchange for Bladeburner SP'];\\nconst parameterizedSpendOptions = ['Reduce Minimum Security', 'Increase Maximum Money'];\\nconst purchaseOptions = basicSpendOptions.concat(parameterizedSpendOptions);\\n\\nexport function autocomplete(data, args) {\\n\\tdata.flags(argsSchema);\\n\\tconst lastFlag = args.length > 1 ? args[args.length - 2] : null;\\n\\tif (lastFlag === \\\"--spend-on\\\") // Provide a couple auto-complete options to facilitate these arguments with spaces in them\\n\\t\\treturn purchaseOptions.map(f => f.replaceAll(\\\" \\\", \\\"_\\\"))\\n\\t\\t\\t.concat(purchaseOptions.map(f => `'${f}'`));\\n\\treturn [];\\n}\\n\\n/** @param {NS} ns\\n * Executes instructions to spend hacknet hashes continuously.\\n * NOTE: This script is written to support multiple concurrent instances running with different arguments. **/\\nexport async function main(ns) {\\n\\tconst options = ns.flags(argsSchema);\\n\\tconst liquidate = options.liquidate;\\n\\tconst interval = options.interval;\\n\\tconst toBuy = options['spend-on'].map(s => s.replaceAll(\\\"_\\\", \\\" \\\"));\\n\\tconst spendOnServer = options['spend-on-server']?.replaceAll(\\\"_\\\", \\\" \\\") ?? undefined;\\n\\t// Validate arguments\\n\\tif (toBuy.length === 0)\\n\\t\\treturn ns.print(\\\"ERROR: You must specify at least one thing to spend hashes on via the --spend-on argument.\\\", true, 'error');\\n\\tconst unrecognized = toBuy.filter(p => !purchaseOptions.includes(p));\\n\\tif (unrecognized.length > 0)\\n\\t\\treturn ns.print(`ERROR: One or more --spend-on arguments are not recognized: ${unrecognized.join(\\\", \\\")}`, true, 'error');\\n\\tns.disableLog('sleep');\\n\\tconst pinned = `Spending on '${toBuy}'. Will check in every ${ns.tFormat(interval)}. Reserving ${options['reserve-buffer']}`\\n\\tboxTailSingleton(ns, 'hacknet-spend', '🖳', '100px', `<div>${pinned}</div>`);\\n\\tns.clearLog();\\n\\tns.print(pinned);\\n\\tns.print(liquidate ? `--liquidate mode active! Will spend all hashes as soon as possible.` :\\n\\t\\t`Saving up hashes, only spending hashes when near capacity to avoid wasting them.`);\\n\\t// Function determines the current cheapest upgrade of all the upgrades we wish to keep purchasing\\n\\tconst getMinCost = spendActions => Math.min(...spendActions.map(p => ns.hacknet.hashCost(p)));\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(interval);\\n\\t\\ttry {\\n\\t\\t\\t// Compute the total income rate of all hacknet nodes. We have to spend faster than this when near capacity.\\n\\t\\t\\tconst nodes = ns.hacknet.numNodes();\\n\\t\\t\\tlet capacity = ns.hacknet.hashCapacity() || 0;\\n\\t\\t\\tif (nodes === 0) {\\n\\t\\t\\t\\tns.print('WARN: Hacknet is empty, no hashes to spend yet...');\\n\\t\\t\\t\\tcontinue; // Nothing to do until at least one node is purchased.\\n\\t\\t\\t} else if (capacity === 0)\\n\\t\\t\\t\\treturn ns.print('INFO: You have hacknet nodes, not hacknet servers, so spending hashes is not applicable.');\\n\\t\\t\\tlet globalProduction = Array.from({ length: nodes }, (_, i) => ns.hacknet.getNodeStats(i))\\n\\t\\t\\t\\t.reduce((total, node) => total + node.production, 0);\\n\\t\\t\\tconst reserve = globalProduction * interval / 1000 + options['reserve-buffer']; // If we are this far from our capacity, start spending\\n\\t\\t\\t// Define the spend hash loop as a local function, since we may need to call it twice.\\n\\t\\t\\tconst fnSpendHashes = async (purchases, spendAllHashes) => {\\n\\t\\t\\t\\tconst startingHashes = ns.hacknet.numHashes() || 0;\\n\\t\\t\\t\\tcapacity = ns.hacknet.hashCapacity() || 0;\\n\\t\\t\\t\\tlet success = true;\\n\\t\\t\\t\\twhile (success && ns.hacknet.numHashes() > (spendAllHashes ? getMinCost(purchases) : capacity - reserve)) {\\n\\t\\t\\t\\t\\tfor (const spendAction of purchases.filter(p => ns.hacknet.numHashes() >= ns.hacknet.hashCost(p))) {\\n\\t\\t\\t\\t\\t\\tconst cost = ns.hacknet.hashCost(spendAction);\\n\\t\\t\\t\\t\\t\\tif (cost > ns.hacknet.numHashes()) break;\\n\\t\\t\\t\\t\\t\\tsuccess = ns.hacknet.spendHashes(spendAction, parameterizedSpendOptions.includes(spendAction) ? spendOnServer : undefined);\\n\\t\\t\\t\\t\\t\\tif (!success) // Minor warning, possible if there are multiple versions of this script running, one beats the other two the punch.\\n\\t\\t\\t\\t\\t\\t\\tns.print(`WARN: Failed to spend hashes on '${spendAction}'. (Cost: ${cost} ` +\\n\\t\\t\\t\\t\\t\\t\\t\\t`Have: ${ns.hacknet.numHashes()} Capacity: ${capacity}`);\\n\\t\\t\\t\\t\\t\\telse if (spendAction !== sellForMoney) // This would be to noisy late-game, since cost never scales\\n\\t\\t\\t\\t\\t\\t\\tns.print(`SUCCESS: Spent ${cost} hashes on '${spendAction}'. ` +\\n\\t\\t\\t\\t\\t\\t\\t\\t`Next upgrade will cost ${ns.hacknet.hashCost(spendAction)}.`, false, 'success');\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tawait ns.sleep(1); // Defend against infinite loop if there's a bug\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.hacknet.numHashes() < startingHashes)\\n\\t\\t\\t\\t\\tns.print(`SUCCESS: Spent ${(startingHashes - ns.hacknet.numHashes()).toFixed(0)} hashes ` +\\n\\t\\t\\t\\t\\t\\t(spendAllHashes ? '' : ` to avoid reaching capacity (${capacity})`) +\\n\\t\\t\\t\\t\\t\\t` while earning ${globalProduction.toPrecision(3)} hashes per second.`);\\n\\t\\t\\t};\\n\\t\\t\\t// Spend hashes normally on any/all user-specified purchases\\n\\t\\t\\tawait fnSpendHashes(toBuy, liquidate);\\n\\t\\t\\t// Determine if we should try to upgrade our hacknet capacity\\n\\t\\t\\tif (capacity - ns.hacknet.numHashes() < reserve)\\n\\t\\t\\t\\tns.print(`INFO: We're still at hash capacity (${capacity}) after spending hashes as instructed. ` +\\n\\t\\t\\t\\t\\t`We currently have ${ns.hacknet.numHashes()} hashes - which is ${capacity - ns.hacknet.numHashes()} away.`);\\n\\t\\t\\telse if (getMinCost(toBuy) > capacity - options['reserve-buffer'])\\n\\t\\t\\t\\tns.print(`INFO: Our hash capacity is ${capacity}, but the cheapest upgrade we wish to purchase ` +\\n\\t\\t\\t\\t\\t`costs ${getMinCost(toBuy)} hashes. A capacity upgrade is needed before anything else is purchase.`);\\n\\t\\t\\telse // Current hash capacity suffices\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t// Try to upgrade hacknet capacity so we can save up for more upgrades\\n\\t\\t\\tlet lowestLevel = Number.MAX_SAFE_INTEGER, lowestIndex = null;\\n\\t\\t\\tfor (let i = 0; i < nodes; i++)\\n\\t\\t\\t\\tif (ns.hacknet.getNodeStats(i).hashCapacity < lowestLevel) {\\n\\t\\t\\t\\t\\tlowestIndex = i;\\n\\t\\t\\t\\t\\tlowestLevel = ns.hacknet.getNodeStats(i).hashCapacity;\\n\\t\\t\\t\\t}\\n\\t\\t\\tif (lowestIndex !== null && ns.hacknet.upgradeCache(lowestIndex, 1)) {\\n\\t\\t\\t\\tns.print(`SUCCESS: Upgraded hacknet node ${lowestIndex} hash capacity in order to afford further purchases. ` +\\n\\t\\t\\t\\t\\t`(You can disable this with --no-capacity-upgrades)`, false, 'success');\\n\\t\\t\\t\\tcapacity = ns.hacknet.hashCapacity()\\n\\t\\t\\t} else if (nodes > 0)\\n\\t\\t\\t\\tns.print(`WARNING: We cannot afford to buy any of the desired upgrades (${toBuy.join(\\\", \\\")}) at our current hash capacity, ` +\\n\\t\\t\\t\\t\\t`and we failed to increase our hash capacity (cost: ${ns.nFormat(ns.hacknet.getCacheUpgradeCost(lowestIndex, 1), '0.0a')}).`, false, 'warning');\\n\\n\\t\\t\\t// If for any of the above reasons, we weren't able to upgrade capacity, calling 'SpendHashes' once more\\n\\t\\t\\t// with these arguments will only convert enough hashes to money to ensure they aren't wasted before the next tick.\\n\\t\\t\\tawait fnSpendHashes([sellForMoney], false);\\n\\t\\t}\\n\\t\\tcatch (err) {\\n\\t\\t\\tns.print(`WARNING: spend-hacknet-hashes.js Caught (and suppressed) an unexpected error in the main loop:\\\\n` +\\n\\t\\t\\t\\t(typeof err === 'string' ? err : err.message || JSON.stringify(err)), false, 'warning');\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"spend-hacknet-hash.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/7478ce36-ad1b-4fee-a425-f6a06dc476bd\",\"moduleSequenceNumber\":276},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/488795d6-18a9-48f1-bc30-2f4310d1077a\",\"moduleSequenceNumber\":259},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/8d32e8ef-df8c-4570-a449-b7b4aff94885\",\"moduleSequenceNumber\":260},{\"filename\":\"spend-hacknet-hash.js\",\"url\":\"blob:https://danielyxie.github.io/cea5a344-75b6-44f1-9541-137cc1bebaa0\",\"moduleSequenceNumber\":511}],\"dependents\":[],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":511,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @arg {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    \\n    const scripts = [\\\"/bin/hack.js\\\", \\\"/bin/weak.js\\\", \\\"/bin/grow.js\\\", \\\"/bin/weak.js\\\"];\\n    const killAllScripts = function(ns, pids) {\\n        for (let index = 0; index < pids.length; ++index) {\\n            for (let i = 0; i < 4; ++i) { ns.kill(pids[index][i]); }\\n        }\\n    }\\n    \\n    // Get input from globalThis (or read a file, or read a port, or however else you get input into the script)\\n    let params = globalThis.batch_params[ns.args[0]];\\n\\n    // For storing the PIDs of the child hack/grow/weaken scripts\\n    const pids = Array.from(Array(params.depth), () => Array(4).fill(0));\\n\\n    // This gets which servers you want to run child scripts on - this could be done on-the-fly as you launch\\n    // each script, but I choose to allocate space for each script up front and pass it to the batch manager\\n    const hosts = Array.from(Array(params.depth), () => Array(4));\\n    for (let i = 0; i < 4; ++i) {\\n        const alloc = params.alloc[[\\\"hmain\\\", \\\"hweak\\\", \\\"gmain\\\", \\\"gweak\\\"][i]];\\n\\n        let index = 0;\\n        for (const hostname in alloc) {\\n            for (let _j = 0; _j < alloc[hostname]; ++_j) {\\n                hosts[index++][i] = hostname;\\n            }\\n        }\\n    }\\n\\n    const kH = Math.ceil(params.hack_time / params.period);\\n    const kG = Math.ceil(params.grow_time / params.period);\\n\\n    // Keep track of an overall error value and quit if it gets too high\\n    let error_value = 0;\\n    const error_max = 100;\\n\\n    const time_begin = performance.now();\\n    ns.print(`Script starting at ${new Date(Date.now()).toLocaleTimeString()}`);\\n    ns.print(`First batch due at ${new Date(Date.now() + params.depth * params.period - 4 * params.t0).toLocaleTimeString()}`);\\n\\n    let ending    = false;\\n    let max_batch = Infinity;\\n    for (let batch = 0; batch < max_batch; ++batch) {\\n        const index = batch % params.depth;\\n\\n        const batch_begin = time_begin + batch * params.period;\\n        await ns.asleep(batch_begin - performance.now());\\n        const batch_lag = performance.now() - batch_begin;\\n        \\n        // Make sure this loop starts on time\\n        let dispatch = true;\\n        if (batch_lag >= params.t0) {\\n            ns.print(ns.sprintf(\\\"WARN: %4d loop started %dms late\\\", batch, batch_lag));\\n            error_value += 3;\\n            dispatch = false;\\n        }\\n\\n        // Make sure scripts finished on time\\n        for (let i = 0; i < 4; ++i) {\\n            if (ns.isRunning(pids[index][i])) {\\n                ns.print(ns.sprintf(\\\"WARN: %4d %d finished late\\\", batch, i));\\n                ns.kill(pids[index][i]);\\n                error_value += 1;\\n            }\\n            pids[index][i] = 0;\\n        }\\n\\n        // Make sure we're up-to-date with global data\\n        params = globalThis.batch_params[ns.args[0]];\\n        const target = globalThis.network[params.target.name];\\n\\n        // Test if we're being told to quit remotely\\n        if (params.quit) {\\n            ns.print(ns.sprintf(\\\"ERROR: %4d Received quit message\\\", batch));\\n            killAllScripts(ns, pids);\\n            break;\\n        }\\n\\n        target.cur_money = ns.getServerMoneyAvailable(target.name);\\n        target.cur_level = ns.getServerSecurityLevel(target.name);\\n        const next_index = (index + 1) % params.depth;\\n\\n        if (target.cur_level > target.level) {\\n            ns.print(ns.sprintf(\\\"WARN: %4d Security level raised by %.3f\\\", batch, target.cur_level - target.level));\\n            error_value += 5;\\n\\n            // To recover, kill the hack and grow about to land\\n            ns.kill(pids[next_index][0]);\\n            ns.kill(pids[next_index][2]);\\n\\n            // Kill hacks/grows in batches that would be affected by the security raise\\n            ns.kill(pids[(index + kH) % params.depth][0]);\\n            ns.kill(pids[(index + kG) % params.depth][0]);\\n            ns.kill(pids[(index + kG) % params.depth][2]);\\n\\n            // Skip the upcoming dispatch since the weakens would be affected\\n            dispatch = false;\\n        } else if (target.cur_money < target.money) {\\n            ns.print(ns.sprintf(\\\"WARN: %4d Money too low, at %.1f%%\\\", batch, 100 * target.cur_money / target.money));\\n            error_value += 2;\\n            \\n            // To recover, kill the hack about to land\\n            ns.kill(pids[next_index][0]);\\n        } else {\\n            // We didn't need to recover, so if there's no hack coming up, kill the next batch about to land\\n            if (pids[next_index][0] == 0) {\\n                for (let i = 1; i < 4; ++i) {\\n                    ns.kill(pids[next_index][i]);\\n                    pids[next_index][i] = 0;\\n                }\\n            }\\n\\n            error_value = Math.max(error_value - 1, 0);\\n        }\\n\\n        // If our hacking skill increases, kill any batch with any script still sleeping and set us up to end\\n        if (ending) {\\n            params.scripts -= 4;\\n            dispatch = false;\\n        } else if (ns.getHackingLevel() != params.skill) {\\n            ns.print(ns.sprintf(\\\"ERROR: %4d Hacking skill increased to %d\\\", batch, ns.getHackingLevel()));\\n\\n            for (let offset = kH; offset < params.depth; ++offset) {\\n                for (let i = 0; i < 4; ++i) { ns.kill(pids[(index + offset) % params.depth][i]); }\\n            }\\n\\n            ending         = true;\\n            max_batch      = batch + kH;\\n            params.time    = time_begin + (max_batch - 1) * params.period + (Date.now() - performance.now());\\n            params.scripts = (kH - 1) * 4 + 1;\\n            dispatch       = false;\\n        }\\n\\n        // Send out our child scripts\\n        if (dispatch) {\\n            let dispatch_error = false;\\n\\n            for (let i = 0; i < 4; ++i) {\\n                const event_begin = batch_begin + params.delay[i];\\n                pids[index][i] = ns.exec(scripts[i], hosts[index][i], params.threads[i], params.target.name, event_begin);\\n\\n                if (pids[index][i] == 0) {\\n                    ns.print(ns.sprintf(\\\"WARN: %4d Could not run %d on %s\\\", batch, i, hosts[index][i]));\\n                    error_value += 20;\\n                    dispatch_error = true;\\n                    break;\\n                }\\n            }\\n\\n            if (dispatch_error) { for (let i = 0; i < 4; ++i) { ns.kill(pids[index][i]); } }\\n        }\\n\\n        if (error_value > error_max) {\\n            ns.print(ns.sprintf(\\\"ERROR: %4d Too many errors, giving up\\\", batch));\\n            killAllScripts(ns, pids);\\n            break;\\n        }\\n    }\\n\\n    params.quit = false;\\n}\",\"filename\":\"stalefish.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stalefish.js\",\"url\":\"blob:https://danielyxie.github.io/2936ec1a-4e9d-41dc-a296-05ea33434241\",\"moduleSequenceNumber\":253453}],\"dependents\":[],\"ramUsage\":3.75,\"server\":\"home\",\"moduleSequenceNumber\":296,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { boxTailSingleton } from 'utils.js';\\nconst aug_want_list = [\\\"The Red Pill\\\", \\\"NeuroFlux Governor\\\", \\\"Wired Reflexes\\\", \\\"NutriGen Implant\\\", \\\"Neurotrainer I\\\",\\n\\\"LuminCloaking-V1 Skin Implant\\\", \\\"Augmented Targeting I\\\", \\\"ADR-V1 Pheromone Gene\\\", \\\"Combat Rib I\\\", \\\"INFRARET Enhancement\\\",\\n\\\"LuminCloaking-V2 Skin Implant\\\", \\\"Social Negotiation Assistant (S.N.A)\\\", \\\"Augmented Targeting II\\\", \\\"Neurotrainer II\\\",\\n\\\"HemoRecirculator\\\", \\\"DermaForce Particle Barrier\\\", \\\"Combat Rib II\\\", \\\"SmartSonar Implant\\\", \\\"BrachiBlades\\\",\\n\\\"Augmented Targeting III\\\", \\\"Combat Rib III\\\", \\\"Nanofiber Weave\\\", \\\"Bionic Spine\\\", \\\"Neurotrainer III\\\", \\\"EsperTech Bladeburner Eyewear\\\",\\n\\\"Power Recirculation Core\\\", \\\"Bionic Arms\\\", \\\"Bionic Legs\\\", \\\"The Shadow's Simulacrum\\\", \\\"ADR-V2 Pheromone Gene\\\",\\n\\\"The Black Hand\\\", \\\"ORION-MKIV Shoulder\\\", \\\"FocusWire\\\", \\\"Synfibril Muscle\\\", \\\"BLADE-51b Tesla Armor\\\", \\\"nextSENS Gene Modification\\\",\\n\\\"PCMatrix\\\", \\\"Graphene BrachiBlades Upgrade\\\", \\\"SmartJaw\\\", \\\"HyperSight Corneal Implant\\\", \\\"Photosynthetic Cells\\\",\\n\\\"Vangelis Virus\\\", \\\"Synthetic Heart\\\", \\\"Neotra\\\", \\\"NEMEAN Subdermal Weave\\\", \\\"Graphene Bionic Arms Upgrade\\\",\\n\\\"Graphene Bone Lacings\\\", \\\"Xanipher\\\", \\\"Graphene Bionic Legs Upgrade\\\", \\\"SPTN-97 Gene Modification\\\", \\\"CordiARC Fusion Reactor\\\",\\n\\\"I.N.T.E.R.L.I.N.K.E.D\\\", \\\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\\\", \\\"Graphene Bionic Spine Upgrade\\\",\\n\\\"Blade's Runners\\\", \\\"GOLEM Serum\\\", \\\"Vangelis Virus 3.0\\\", \\\"The Blade's Simulacrum\\\", \\\"Hydroflame Left Arm\\\",\\n\\\"Neuroreceptor Management Implant\\\"\\n]\\n\\nimport { getOwnedAugmentationsStatic, getAugmentsPerFaction, getAllAugmentStats, hasStat } from 'augments.js';\\nfunction wantListGenerator() {\\n\\tconst augmentStats = getAllAugmentStats(ns);\\n\\t// const bladeburnerDesiredStats = ['agi', 'dex', 'str', 'def', 'faction_rep', 'company_rep', 'hacknet'];\\n\\tconst bladeburnerDesiredStats = ['agi', 'dex', 'str', 'def', 'faction_rep'];\\n\\tconst anauglist = Object.entries(augmentStats)\\n\\t\\t.filter(([name, augstats]) =>\\n\\t\\t\\tbladeburnerDesiredStats.filter((stat) => hasStat(stat, augstats)).length > 0)\\n\\t\\t.sort(([, augstatsa], [, augstatsb]) => augstatsa.price - augstatsb.price)\\n\\t\\t.map(([name, augstats]) => name);\\n\\tns.print(JSON.stringify(anauglist, null, 2));\\n}\\n\\nconst argsSchema = [\\n\\t['no-soft-reset', false], // if this should reset after attempting to buy\\n];\\nlet options;\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\toptions = ns.flags(argsSchema);\\n\\tns.disableLog('singularity.purchaseAugmentation');\\n\\tns.clearLog();\\n\\tboxTailSingleton(ns, 'Purchase Augs', 'A', '100px');\\n\\t// ns.tail();\\n\\tconst playerAugs = getOwnedAugmentationsStatic(ns);\\n\\tlet needed_augs = aug_want_list.filter(aug => !playerAugs.includes(aug)).reverse();\\n\\tconst factionAugs = Object.entries(getAugmentsPerFaction(ns));\\n\\tlet augsPurchased = parseInt(ns.read('/tmp/augsPurchased.txt') || '0');\\n\\tfor (const needed_aug of needed_augs) {\\n\\t\\tconst factions = factionAugs.filter(([, augs]) => augs.includes(needed_aug)).map(([faction]) => faction);\\n\\t\\tfor (const faction of factions) {\\n\\t\\t\\tlet isPurchased = ns.purchaseAugmentation(faction, needed_aug);\\n\\t\\t\\tif (isPurchased) {\\n\\t\\t\\t\\taugsPurchased++;\\n\\t\\t\\t\\tns.print(`bought ${needed_aug} from ${faction}`);\\n\\t\\t\\t}\\n\\t\\t\\twhile (needed_aug === 'NeuroFlux Governor' && isPurchased) {\\n\\t\\t\\t\\tisPurchased = ns.purchaseAugmentation(faction, needed_aug);\\n\\t\\t\\t\\tif (isPurchased) {\\n\\t\\t\\t\\t\\taugsPurchased++;\\n\\t\\t\\t\\t\\tns.print(`bought ${needed_aug} from ${faction}`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!isPurchased) {\\n\\t\\t\\t\\t//ns.print(`Failed to buy ${needed_aug} from ${faction}`);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tawait ns.write('/tmp/augsPurchased.txt', augsPurchased, 'w');\\n\\t// ns.print('Finished purchasing');\\n\\tif (options['no-soft-reset']) {\\n\\t\\tif (augsPurchased >= 3) {\\n\\t\\t\\tns.softReset('bootstrap32GB.js');\\n\\t\\t}\\n\\t} else {\\n\\t\\tns.softReset('bootstrap32GB.js');\\n\\t}\\n}\",\"filename\":\"aug_buyer.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"augments.js\",\"url\":\"blob:https://danielyxie.github.io/122401ef-7841-4853-80fb-8f7230b493bd\",\"moduleSequenceNumber\":288},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/ae155655-f344-4781-9299-68c724de2085\",\"moduleSequenceNumber\":276},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/5d4caa1d-1ff9-4e57-92c4-84d6abe87679\",\"moduleSequenceNumber\":259},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/43107a7b-fba2-474c-9485-f6e110f8b6e7\",\"moduleSequenceNumber\":260},{\"filename\":\"aug_buyer.js\",\"url\":\"blob:https://danielyxie.github.io/4204aec1-3c93-499b-9575-90f323ec9e43\",\"moduleSequenceNumber\":569}],\"dependents\":[],\"ramUsage\":12.1,\"server\":\"home\",\"moduleSequenceNumber\":569,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.purchaseAugmentation\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.softReset\",\"cost\":5},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"hacknet-node-0\",\"darkweb\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/ingang.txt\",\"text\":\"Slum Snakes\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/player.txt\",\"text\":\"{\\n  \\\"hacking\\\": 1,\\n  \\\"hp\\\": 25,\\n  \\\"max_hp\\\": 25,\\n  \\\"strength\\\": 221,\\n  \\\"defense\\\": 155,\\n  \\\"dexterity\\\": 108,\\n  \\\"agility\\\": 131,\\n  \\\"charisma\\\": 4,\\n  \\\"intelligence\\\": 177,\\n  \\\"hacking_chance_mult\\\": 1.5801755316807684,\\n  \\\"hacking_speed_mult\\\": 1.6275807976311916,\\n  \\\"hacking_money_mult\\\": 1.7381930848488454,\\n  \\\"hacking_grow_mult\\\": 1.5801755316807684,\\n  \\\"hacking_exp\\\": 0,\\n  \\\"strength_exp\\\": 0,\\n  \\\"defense_exp\\\": 0,\\n  \\\"dexterity_exp\\\": 25.137564523412735,\\n  \\\"agility_exp\\\": 18.065084098751516,\\n  \\\"charisma_exp\\\": 0,\\n  \\\"hacking_mult\\\": 1.9910211699177685,\\n  \\\"strength_mult\\\": 220.48275064096794,\\n  \\\"defense_mult\\\": 155.30053205230757,\\n  \\\"dexterity_mult\\\": 43.73099149274025,\\n  \\\"agility_mult\\\": 63.57819736379665,\\n  \\\"charisma_mult\\\": 4.570391086567408,\\n  \\\"hacking_exp_mult\\\": 3.18608185163166,\\n  \\\"strength_exp_mult\\\": 4.516271024687879,\\n  \\\"defense_exp_mult\\\": 4.967898127156667,\\n  \\\"dexterity_exp_mult\\\": 6.284391130853184,\\n  \\\"agility_exp_mult\\\": 4.516271024687879,\\n  \\\"charisma_exp_mult\\\": 4.517947909872947,\\n  \\\"company_rep_mult\\\": 5.593649793176032,\\n  \\\"faction_rep_mult\\\": 3.2597026766760084,\\n  \\\"numPeopleKilled\\\": 0,\\n  \\\"money\\\": 23335081139.094543,\\n  \\\"city\\\": \\\"Aevum\\\",\\n  \\\"location\\\": \\\"The Slums\\\",\\n  \\\"companyName\\\": \\\"\\\",\\n  \\\"crime_money_mult\\\": 4.1927335152897935,\\n  \\\"crime_success_mult\\\": 2.333347347639538,\\n  \\\"isWorking\\\": false,\\n  \\\"workType\\\": \\\"\\\",\\n  \\\"currentWorkFactionName\\\": \\\"\\\",\\n  \\\"currentWorkFactionDescription\\\": \\\"\\\",\\n  \\\"workHackExpGainRate\\\": 0,\\n  \\\"workStrExpGainRate\\\": 0,\\n  \\\"workDefExpGainRate\\\": 0,\\n  \\\"workDexExpGainRate\\\": 0,\\n  \\\"workAgiExpGainRate\\\": 0,\\n  \\\"workChaExpGainRate\\\": 0,\\n  \\\"workRepGainRate\\\": 0,\\n  \\\"workMoneyGainRate\\\": 0,\\n  \\\"workMoneyLossRate\\\": 0,\\n  \\\"workHackExpGained\\\": 0,\\n  \\\"workStrExpGained\\\": 0,\\n  \\\"workDefExpGained\\\": 0,\\n  \\\"workDexExpGained\\\": 0,\\n  \\\"workAgiExpGained\\\": 0,\\n  \\\"workChaExpGained\\\": 0,\\n  \\\"workRepGained\\\": 0,\\n  \\\"workMoneyGained\\\": 0,\\n  \\\"createProgramName\\\": \\\"\\\",\\n  \\\"createProgramReqLvl\\\": 100,\\n  \\\"className\\\": \\\"\\\",\\n  \\\"crimeType\\\": \\\"\\\",\\n  \\\"work_money_mult\\\": 5.782175777245417,\\n  \\\"hacknet_node_money_mult\\\": 1.4970083984344122,\\n  \\\"hacknet_node_purchase_cost_mult\\\": 0.6116816739179599,\\n  \\\"hacknet_node_ram_cost_mult\\\": 0.6116816739179599,\\n  \\\"hacknet_node_core_cost_mult\\\": 0.6116816739179599,\\n  \\\"hacknet_node_level_cost_mult\\\": 0.6116816739179599,\\n  \\\"hasWseAccount\\\": false,\\n  \\\"hasTixApiAccess\\\": false,\\n  \\\"has4SData\\\": false,\\n  \\\"has4SDataTixApi\\\": false,\\n  \\\"bladeburner_max_stamina_mult\\\": 1.2936000000000003,\\n  \\\"bladeburner_stamina_gain_mult\\\": 1.2594960000000004,\\n  \\\"bladeburner_analysis_mult\\\": 1.4168,\\n  \\\"bladeburner_success_chance_mult\\\": 1.4303895051264004,\\n  \\\"bitNodeN\\\": 7,\\n  \\\"totalPlaytime\\\": 11150278400,\\n  \\\"playtimeSinceLastAug\\\": 74200,\\n  \\\"playtimeSinceLastBitnode\\\": 167390200,\\n  \\\"jobs\\\": {},\\n  \\\"factions\\\": [\\n    \\\"Slum Snakes\\\",\\n    \\\"Bladeburners\\\"\\n  ],\\n  \\\"tor\\\": false,\\n  \\\"inBladeburner\\\": true,\\n  \\\"hasCorporation\\\": true,\\n  \\\"entropy\\\": 0\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/getBitNodeMultipliers.txt\",\"text\":\"{\\n  \\\"HackingLevelMultiplier\\\": 0.35,\\n  \\\"StrengthLevelMultiplier\\\": 1,\\n  \\\"DefenseLevelMultiplier\\\": 1,\\n  \\\"DexterityLevelMultiplier\\\": 1,\\n  \\\"AgilityLevelMultiplier\\\": 1,\\n  \\\"CharismaLevelMultiplier\\\": 1,\\n  \\\"ServerGrowthRate\\\": 1,\\n  \\\"ServerMaxMoney\\\": 0.4,\\n  \\\"ServerStartingMoney\\\": 0.5,\\n  \\\"ServerStartingSecurity\\\": 1.5,\\n  \\\"ServerWeakenRate\\\": 1,\\n  \\\"HomeComputerRamCost\\\": 1,\\n  \\\"PurchasedServerCost\\\": 1,\\n  \\\"PurchasedServerSoftcap\\\": 2,\\n  \\\"PurchasedServerLimit\\\": 1,\\n  \\\"PurchasedServerMaxRam\\\": 1,\\n  \\\"CompanyWorkMoney\\\": 0.5,\\n  \\\"CrimeMoney\\\": 0.75,\\n  \\\"HacknetNodeMoney\\\": 0.2,\\n  \\\"ManualHackMoney\\\": 1,\\n  \\\"ScriptHackMoney\\\": 0.5,\\n  \\\"ScriptHackMoneyGain\\\": 1,\\n  \\\"CodingContractMoney\\\": 1,\\n  \\\"ClassGymExpGain\\\": 1,\\n  \\\"CompanyWorkExpGain\\\": 1,\\n  \\\"CrimeExpGain\\\": 1,\\n  \\\"FactionWorkExpGain\\\": 1,\\n  \\\"HackExpGain\\\": 0.25,\\n  \\\"FactionPassiveRepGain\\\": 1,\\n  \\\"FactionWorkRepGain\\\": 1,\\n  \\\"RepToDonateToFaction\\\": 1,\\n  \\\"AugmentationMoneyCost\\\": 3,\\n  \\\"AugmentationRepCost\\\": 1,\\n  \\\"InfiltrationMoney\\\": 0.75,\\n  \\\"InfiltrationRep\\\": 1,\\n  \\\"FourSigmaMarketDataCost\\\": 2,\\n  \\\"FourSigmaMarketDataApiCost\\\": 2,\\n  \\\"CorporationValuation\\\": 0.2,\\n  \\\"CorporationSoftCap\\\": 0.9,\\n  \\\"BladeburnerRank\\\": 0.6,\\n  \\\"BladeburnerSkillCost\\\": 2,\\n  \\\"GangSoftcap\\\": 0.7,\\n  \\\"GangUniqueAugs\\\": 0.2,\\n  \\\"DaedalusAugsRequirement\\\": 1.166,\\n  \\\"StaneksGiftPowerMultiplier\\\": 0.9,\\n  \\\"StaneksGiftExtraSize\\\": -1,\\n  \\\"WorldDaemonDifficulty\\\": 2\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/factionAugs.txt\",\"text\":\"{\\n  \\\"Illuminati\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Synthetic Heart\\\",\\n    \\\"Synfibril Muscle\\\",\\n    \\\"NEMEAN Subdermal Weave\\\",\\n    \\\"Embedded Netburner Module Core V3 Upgrade\\\",\\n    \\\"Embedded Netburner Module Analyze Engine\\\",\\n    \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\n    \\\"QLink\\\"\\n  ],\\n  \\\"Daedalus\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Synthetic Heart\\\",\\n    \\\"Synfibril Muscle\\\",\\n    \\\"NEMEAN Subdermal Weave\\\",\\n    \\\"Embedded Netburner Module Core V3 Upgrade\\\",\\n    \\\"Embedded Netburner Module Analyze Engine\\\",\\n    \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\n    \\\"The Red Pill\\\"\\n  ],\\n  \\\"The Covenant\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Augmented Targeting III\\\",\\n    \\\"Synthetic Heart\\\",\\n    \\\"Synfibril Muscle\\\",\\n    \\\"Combat Rib III\\\",\\n    \\\"NEMEAN Subdermal Weave\\\",\\n    \\\"Graphene Bone Lacings\\\",\\n    \\\"Embedded Netburner Module Core V3 Upgrade\\\",\\n    \\\"Embedded Netburner Module Analyze Engine\\\",\\n    \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\n    \\\"SPTN-97 Gene Modification\\\"\\n  ],\\n  \\\"ECorp\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Graphene Bionic Spine Upgrade\\\",\\n    \\\"Graphene Bionic Legs Upgrade\\\",\\n    \\\"Embedded Netburner Module\\\",\\n    \\\"Embedded Netburner Module Core Implant\\\",\\n    \\\"Embedded Netburner Module Core V2 Upgrade\\\",\\n    \\\"Embedded Netburner Module Core V3 Upgrade\\\",\\n    \\\"Embedded Netburner Module Analyze Engine\\\",\\n    \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\n    \\\"PC Direct-Neural Interface\\\",\\n    \\\"PC Direct-Neural Interface Optimization Submodule\\\",\\n    \\\"ECorp HVMind Implant\\\"\\n  ],\\n  \\\"MegaCorp\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Graphene Bionic Legs Upgrade\\\",\\n    \\\"Embedded Netburner Module\\\",\\n    \\\"Embedded Netburner Module Core Implant\\\",\\n    \\\"Embedded Netburner Module Core V2 Upgrade\\\",\\n    \\\"Embedded Netburner Module Core V3 Upgrade\\\",\\n    \\\"Embedded Netburner Module Analyze Engine\\\",\\n    \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\n    \\\"ADR-V1 Pheromone Gene\\\",\\n    \\\"CordiARC Fusion Reactor\\\"\\n  ],\\n  \\\"Bachman & Associates\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Enhanced Social Interaction Implant\\\",\\n    \\\"Neuralstimulator\\\",\\n    \\\"Nuoptimal Nootropic Injector Implant\\\",\\n    \\\"Speech Enhancement\\\",\\n    \\\"FocusWire\\\",\\n    \\\"ADR-V2 Pheromone Gene\\\",\\n    \\\"SmartJaw\\\"\\n  ],\\n  \\\"Blade Industries\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Augmented Targeting I\\\",\\n    \\\"Augmented Targeting II\\\",\\n    \\\"Augmented Targeting III\\\",\\n    \\\"Synfibril Muscle\\\",\\n    \\\"Combat Rib I\\\",\\n    \\\"Combat Rib II\\\",\\n    \\\"Combat Rib III\\\",\\n    \\\"Nanofiber Weave\\\",\\n    \\\"Bionic Spine\\\",\\n    \\\"Bionic Legs\\\",\\n    \\\"Embedded Netburner Module\\\",\\n    \\\"Embedded Netburner Module Core Implant\\\",\\n    \\\"Embedded Netburner Module Core V2 Upgrade\\\",\\n    \\\"PC Direct-Neural Interface\\\",\\n    \\\"PC Direct-Neural Interface Optimization Submodule\\\",\\n    \\\"HyperSight Corneal Implant\\\",\\n    \\\"Neotra\\\"\\n  ],\\n  \\\"NWO\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Synthetic Heart\\\",\\n    \\\"Synfibril Muscle\\\",\\n    \\\"Enhanced Social Interaction Implant\\\",\\n    \\\"Embedded Netburner Module\\\",\\n    \\\"Embedded Netburner Module Core Implant\\\",\\n    \\\"Embedded Netburner Module Core V2 Upgrade\\\",\\n    \\\"Embedded Netburner Module Core V3 Upgrade\\\",\\n    \\\"Embedded Netburner Module Analyze Engine\\\",\\n    \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\n    \\\"ADR-V1 Pheromone Gene\\\",\\n    \\\"Neurotrainer III\\\",\\n    \\\"Power Recirculation Core\\\",\\n    \\\"Xanipher\\\",\\n    \\\"Hydroflame Left Arm\\\"\\n  ],\\n  \\\"Clarke Incorporated\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Enhanced Social Interaction Implant\\\",\\n    \\\"Neuralstimulator\\\",\\n    \\\"Neuronal Densification\\\",\\n    \\\"Nuoptimal Nootropic Injector Implant\\\",\\n    \\\"Speech Enhancement\\\",\\n    \\\"FocusWire\\\",\\n    \\\"ADR-V2 Pheromone Gene\\\",\\n    \\\"nextSENS Gene Modification\\\"\\n  ],\\n  \\\"OmniTek Incorporated\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Augmented Targeting I\\\",\\n    \\\"Augmented Targeting II\\\",\\n    \\\"Augmented Targeting III\\\",\\n    \\\"Combat Rib I\\\",\\n    \\\"Combat Rib II\\\",\\n    \\\"Combat Rib III\\\",\\n    \\\"Nanofiber Weave\\\",\\n    \\\"Bionic Spine\\\",\\n    \\\"Bionic Legs\\\",\\n    \\\"Enhanced Social Interaction Implant\\\",\\n    \\\"Embedded Netburner Module Core V2 Upgrade\\\",\\n    \\\"PC Direct-Neural Interface\\\",\\n    \\\"OmniTek InfoLoad\\\"\\n  ],\\n  \\\"Four Sigma\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Enhanced Social Interaction Implant\\\",\\n    \\\"Neuralstimulator\\\",\\n    \\\"Nuoptimal Nootropic Injector Implant\\\",\\n    \\\"Speech Enhancement\\\",\\n    \\\"FocusWire\\\",\\n    \\\"PC Direct-Neural Interface\\\",\\n    \\\"ADR-V1 Pheromone Gene\\\",\\n    \\\"ADR-V2 Pheromone Gene\\\",\\n    \\\"Neurotrainer III\\\"\\n  ],\\n  \\\"KuaiGong International\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Augmented Targeting I\\\",\\n    \\\"Augmented Targeting II\\\",\\n    \\\"Augmented Targeting III\\\",\\n    \\\"Synthetic Heart\\\",\\n    \\\"Synfibril Muscle\\\",\\n    \\\"Combat Rib I\\\",\\n    \\\"Combat Rib II\\\",\\n    \\\"Combat Rib III\\\",\\n    \\\"Bionic Spine\\\",\\n    \\\"Bionic Legs\\\",\\n    \\\"Embedded Netburner Module Core V2 Upgrade\\\",\\n    \\\"Speech Enhancement\\\",\\n    \\\"FocusWire\\\",\\n    \\\"HyperSight Corneal Implant\\\",\\n    \\\"Photosynthetic Cells\\\"\\n  ],\\n  \\\"Fulcrum Secret Technologies\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Synthetic Heart\\\",\\n    \\\"Synfibril Muscle\\\",\\n    \\\"Nanofiber Weave\\\",\\n    \\\"NEMEAN Subdermal Weave\\\",\\n    \\\"Graphene Bone Lacings\\\",\\n    \\\"Graphene Bionic Spine Upgrade\\\",\\n    \\\"Graphene Bionic Legs Upgrade\\\",\\n    \\\"Artificial Bio-neural Network Implant\\\",\\n    \\\"Enhanced Myelin Sheathing\\\",\\n    \\\"Embedded Netburner Module\\\",\\n    \\\"Embedded Netburner Module Core Implant\\\",\\n    \\\"Embedded Netburner Module Core V2 Upgrade\\\",\\n    \\\"Embedded Netburner Module Core V3 Upgrade\\\",\\n    \\\"Embedded Netburner Module Analyze Engine\\\",\\n    \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\n    \\\"PC Direct-Neural Interface Optimization Submodule\\\",\\n    \\\"PC Direct-Neural Interface NeuroNet Injector\\\"\\n  ],\\n  \\\"BitRunners\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Artificial Bio-neural Network Implant\\\",\\n    \\\"Enhanced Myelin Sheathing\\\",\\n    \\\"DataJack\\\",\\n    \\\"Embedded Netburner Module\\\",\\n    \\\"Embedded Netburner Module Core Implant\\\",\\n    \\\"Embedded Netburner Module Core V2 Upgrade\\\",\\n    \\\"Neural Accelerator\\\",\\n    \\\"Cranial Signal Processors - Gen III\\\",\\n    \\\"Cranial Signal Processors - Gen IV\\\",\\n    \\\"Cranial Signal Processors - Gen V\\\",\\n    \\\"Neurotrainer II\\\",\\n    \\\"BitRunners Neurolink\\\"\\n  ],\\n  \\\"The Black Hand\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Artificial Synaptic Potentiation\\\",\\n    \\\"Enhanced Myelin Sheathing\\\",\\n    \\\"DataJack\\\",\\n    \\\"Embedded Netburner Module\\\",\\n    \\\"Embedded Netburner Module Core Implant\\\",\\n    \\\"Neuralstimulator\\\",\\n    \\\"Cranial Signal Processors - Gen III\\\",\\n    \\\"Cranial Signal Processors - Gen IV\\\",\\n    \\\"The Black Hand\\\"\\n  ],\\n  \\\"NiteSec\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"BitWire\\\",\\n    \\\"Artificial Synaptic Potentiation\\\",\\n    \\\"Neural-Retention Enhancement\\\",\\n    \\\"DataJack\\\",\\n    \\\"Embedded Netburner Module\\\",\\n    \\\"Cranial Signal Processors - Gen I\\\",\\n    \\\"Cranial Signal Processors - Gen II\\\",\\n    \\\"Cranial Signal Processors - Gen III\\\",\\n    \\\"Neurotrainer II\\\",\\n    \\\"CRTX42-AA Gene Modification\\\"\\n  ],\\n  \\\"Aevum\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Wired Reflexes\\\",\\n    \\\"Speech Processor Implant\\\",\\n    \\\"Synaptic Enhancement Implant\\\",\\n    \\\"Neuralstimulator\\\",\\n    \\\"Neurotrainer I\\\",\\n    \\\"PCMatrix\\\"\\n  ],\\n  \\\"Chongqing\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Speech Processor Implant\\\",\\n    \\\"DataJack\\\",\\n    \\\"Neuralstimulator\\\",\\n    \\\"Nuoptimal Nootropic Injector Implant\\\",\\n    \\\"Neuregen Gene Modification\\\"\\n  ],\\n  \\\"Ishima\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Augmented Targeting I\\\",\\n    \\\"Combat Rib I\\\",\\n    \\\"Wired Reflexes\\\",\\n    \\\"Speech Processor Implant\\\",\\n    \\\"Neuralstimulator\\\",\\n    \\\"INFRARET Enhancement\\\"\\n  ],\\n  \\\"New Tokyo\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Speech Processor Implant\\\",\\n    \\\"DataJack\\\",\\n    \\\"Neuralstimulator\\\",\\n    \\\"Nuoptimal Nootropic Injector Implant\\\",\\n    \\\"NutriGen Implant\\\"\\n  ],\\n  \\\"Sector-12\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Augmented Targeting I\\\",\\n    \\\"Augmented Targeting II\\\",\\n    \\\"Wired Reflexes\\\",\\n    \\\"Speech Processor Implant\\\",\\n    \\\"Neuralstimulator\\\",\\n    \\\"CashRoot Starter Kit\\\"\\n  ],\\n  \\\"Volhaven\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Combat Rib I\\\",\\n    \\\"Combat Rib II\\\",\\n    \\\"Wired Reflexes\\\",\\n    \\\"Speech Processor Implant\\\",\\n    \\\"Neuralstimulator\\\",\\n    \\\"Nuoptimal Nootropic Injector Implant\\\",\\n    \\\"DermaForce Particle Barrier\\\"\\n  ],\\n  \\\"Speakers for the Dead\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Unstable Circadian Modulator\\\",\\n    \\\"Synthetic Heart\\\",\\n    \\\"Synfibril Muscle\\\",\\n    \\\"Nanofiber Weave\\\",\\n    \\\"Wired Reflexes\\\",\\n    \\\"Bionic Spine\\\",\\n    \\\"Bionic Legs\\\",\\n    \\\"Speech Enhancement\\\",\\n    \\\"The Shadow's Simulacrum\\\",\\n    \\\"Graphene BrachiBlades Upgrade\\\"\\n  ],\\n  \\\"The Dark Army\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"HemoRecirculator\\\",\\n    \\\"Augmented Targeting I\\\",\\n    \\\"Augmented Targeting II\\\",\\n    \\\"Augmented Targeting III\\\",\\n    \\\"Combat Rib I\\\",\\n    \\\"Combat Rib II\\\",\\n    \\\"Combat Rib III\\\",\\n    \\\"Nanofiber Weave\\\",\\n    \\\"Wired Reflexes\\\",\\n    \\\"The Shadow's Simulacrum\\\",\\n    \\\"Power Recirculation Core\\\",\\n    \\\"Graphene Bionic Arms Upgrade\\\"\\n  ],\\n  \\\"The Syndicate\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"HemoRecirculator\\\",\\n    \\\"Augmented Targeting I\\\",\\n    \\\"Augmented Targeting II\\\",\\n    \\\"Augmented Targeting III\\\",\\n    \\\"Combat Rib I\\\",\\n    \\\"Combat Rib II\\\",\\n    \\\"Combat Rib III\\\",\\n    \\\"Nanofiber Weave\\\",\\n    \\\"NEMEAN Subdermal Weave\\\",\\n    \\\"Wired Reflexes\\\",\\n    \\\"Bionic Spine\\\",\\n    \\\"Bionic Legs\\\",\\n    \\\"ADR-V1 Pheromone Gene\\\",\\n    \\\"The Shadow's Simulacrum\\\",\\n    \\\"Power Recirculation Core\\\",\\n    \\\"BrachiBlades\\\"\\n  ],\\n  \\\"Silhouette\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Speech Processor Implant\\\",\\n    \\\"TITN-41 Gene-Modification Injection\\\",\\n    \\\"ADR-V2 Pheromone Gene\\\"\\n  ],\\n  \\\"Tetrads\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"HemoRecirculator\\\",\\n    \\\"LuminCloaking-V1 Skin Implant\\\",\\n    \\\"LuminCloaking-V2 Skin Implant\\\",\\n    \\\"Power Recirculation Core\\\",\\n    \\\"Bionic Arms\\\"\\n  ],\\n  \\\"Slum Snakes\\\": [\\n    \\\"HemoRecirculator\\\",\\n    \\\"Augmented Targeting I\\\",\\n    \\\"Augmented Targeting II\\\",\\n    \\\"Augmented Targeting III\\\",\\n    \\\"Synthetic Heart\\\",\\n    \\\"Synfibril Muscle\\\",\\n    \\\"Combat Rib I\\\",\\n    \\\"Combat Rib II\\\",\\n    \\\"Combat Rib III\\\",\\n    \\\"Nanofiber Weave\\\",\\n    \\\"NEMEAN Subdermal Weave\\\",\\n    \\\"Wired Reflexes\\\",\\n    \\\"Graphene Bone Lacings\\\",\\n    \\\"Bionic Spine\\\",\\n    \\\"Graphene Bionic Spine Upgrade\\\",\\n    \\\"Bionic Legs\\\",\\n    \\\"Graphene Bionic Legs Upgrade\\\",\\n    \\\"Speech Processor Implant\\\",\\n    \\\"Enhanced Social Interaction Implant\\\",\\n    \\\"BitWire\\\",\\n    \\\"Artificial Bio-neural Network Implant\\\",\\n    \\\"Artificial Synaptic Potentiation\\\",\\n    \\\"Enhanced Myelin Sheathing\\\",\\n    \\\"Synaptic Enhancement Implant\\\",\\n    \\\"DataJack\\\",\\n    \\\"Embedded Netburner Module\\\",\\n    \\\"Embedded Netburner Module Core Implant\\\",\\n    \\\"Embedded Netburner Module Core V2 Upgrade\\\",\\n    \\\"Embedded Netburner Module Core V3 Upgrade\\\",\\n    \\\"Embedded Netburner Module Analyze Engine\\\",\\n    \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\n    \\\"Neuralstimulator\\\",\\n    \\\"Cranial Signal Processors - Gen I\\\",\\n    \\\"Cranial Signal Processors - Gen II\\\",\\n    \\\"Cranial Signal Processors - Gen III\\\",\\n    \\\"Cranial Signal Processors - Gen IV\\\",\\n    \\\"Cranial Signal Processors - Gen V\\\",\\n    \\\"Nuoptimal Nootropic Injector Implant\\\",\\n    \\\"Speech Enhancement\\\",\\n    \\\"FocusWire\\\",\\n    \\\"PC Direct-Neural Interface\\\",\\n    \\\"PC Direct-Neural Interface Optimization Submodule\\\",\\n    \\\"ADR-V1 Pheromone Gene\\\",\\n    \\\"ADR-V2 Pheromone Gene\\\",\\n    \\\"The Shadow's Simulacrum\\\",\\n    \\\"Hacknet Node CPU Architecture Neural-Upload\\\",\\n    \\\"Hacknet Node Kernel Direct-Neural Interface\\\",\\n    \\\"Neurotrainer I\\\",\\n    \\\"Neurotrainer II\\\",\\n    \\\"Neurotrainer III\\\",\\n    \\\"HyperSight Corneal Implant\\\",\\n    \\\"LuminCloaking-V1 Skin Implant\\\",\\n    \\\"LuminCloaking-V2 Skin Implant\\\",\\n    \\\"SmartSonar Implant\\\",\\n    \\\"Power Recirculation Core\\\",\\n    \\\"CordiARC Fusion Reactor\\\",\\n    \\\"SmartJaw\\\",\\n    \\\"Xanipher\\\",\\n    \\\"Neuregen Gene Modification\\\",\\n    \\\"Graphene BrachiBlades Upgrade\\\",\\n    \\\"Graphene Bionic Arms Upgrade\\\",\\n    \\\"Neuroreceptor Management Implant\\\"\\n  ],\\n  \\\"Netburners\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Hacknet Node CPU Architecture Neural-Upload\\\",\\n    \\\"Hacknet Node Cache Architecture Neural-Upload\\\",\\n    \\\"Hacknet Node NIC Architecture Neural-Upload\\\",\\n    \\\"Hacknet Node Kernel Direct-Neural Interface\\\",\\n    \\\"Hacknet Node Core Direct-Neural Interface\\\"\\n  ],\\n  \\\"Tian Di Hui\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Nanofiber Weave\\\",\\n    \\\"Wired Reflexes\\\",\\n    \\\"Speech Processor Implant\\\",\\n    \\\"Nuoptimal Nootropic Injector Implant\\\",\\n    \\\"Speech Enhancement\\\",\\n    \\\"ADR-V1 Pheromone Gene\\\",\\n    \\\"Social Negotiation Assistant (S.N.A)\\\",\\n    \\\"Neuroreceptor Management Implant\\\"\\n  ],\\n  \\\"CyberSec\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"BitWire\\\",\\n    \\\"Synaptic Enhancement Implant\\\",\\n    \\\"Cranial Signal Processors - Gen I\\\",\\n    \\\"Cranial Signal Processors - Gen II\\\",\\n    \\\"Neurotrainer I\\\"\\n  ],\\n  \\\"Bladeburners\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"EsperTech Bladeburner Eyewear\\\",\\n    \\\"EMS-4 Recombination\\\",\\n    \\\"ORION-MKIV Shoulder\\\",\\n    \\\"Hyperion Plasma Cannon V1\\\",\\n    \\\"Hyperion Plasma Cannon V2\\\",\\n    \\\"GOLEM Serum\\\",\\n    \\\"Vangelis Virus\\\",\\n    \\\"Vangelis Virus 3.0\\\",\\n    \\\"I.N.T.E.R.L.I.N.K.E.D\\\",\\n    \\\"Blade's Runners\\\",\\n    \\\"BLADE-51b Tesla Armor\\\",\\n    \\\"BLADE-51b Tesla Armor: Power Cells Upgrade\\\",\\n    \\\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\\\",\\n    \\\"BLADE-51b Tesla Armor: Unibeam Upgrade\\\",\\n    \\\"BLADE-51b Tesla Armor: Omnibeam Upgrade\\\",\\n    \\\"BLADE-51b Tesla Armor: IPU Upgrade\\\",\\n    \\\"The Blade's Simulacrum\\\"\\n  ]\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/getOwnedAugmentations.txt\",\"text\":\"[\\n  \\\"Combat Rib I\\\",\\n  \\\"Augmented Targeting I\\\",\\n  \\\"LuminCloaking-V1 Skin Implant\\\",\\n  \\\"Neurotrainer I\\\",\\n  \\\"Wired Reflexes\\\",\\n  \\\"NeuroFlux Governor\\\",\\n  \\\"ADR-V1 Pheromone Gene\\\",\\n  \\\"The Shadow's Simulacrum\\\",\\n  \\\"Power Recirculation Core\\\",\\n  \\\"Neurotrainer III\\\",\\n  \\\"SmartSonar Implant\\\",\\n  \\\"FocusWire\\\",\\n  \\\"Bionic Spine\\\",\\n  \\\"HemoRecirculator\\\",\\n  \\\"LuminCloaking-V2 Skin Implant\\\",\\n  \\\"Synfibril Muscle\\\",\\n  \\\"Augmented Targeting II\\\",\\n  \\\"Neurotrainer II\\\",\\n  \\\"Social Negotiation Assistant (S.N.A)\\\",\\n  \\\"Graphene Bionic Spine Upgrade\\\",\\n  \\\"CordiARC Fusion Reactor\\\",\\n  \\\"Xanipher\\\",\\n  \\\"Graphene Bone Lacings\\\",\\n  \\\"NEMEAN Subdermal Weave\\\",\\n  \\\"ADR-V2 Pheromone Gene\\\",\\n  \\\"Bionic Legs\\\",\\n  \\\"Combat Rib II\\\",\\n  \\\"The Blade's Simulacrum\\\",\\n  \\\"Graphene Bionic Legs Upgrade\\\",\\n  \\\"Synthetic Heart\\\",\\n  \\\"HyperSight Corneal Implant\\\",\\n  \\\"SmartJaw\\\",\\n  \\\"BLADE-51b Tesla Armor\\\",\\n  \\\"EsperTech Bladeburner Eyewear\\\",\\n  \\\"Neuroreceptor Management Implant\\\",\\n  \\\"GOLEM Serum\\\",\\n  \\\"Blade's Runners\\\",\\n  \\\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\\\",\\n  \\\"ORION-MKIV Shoulder\\\",\\n  \\\"I.N.T.E.R.L.I.N.K.E.D\\\",\\n  \\\"Vangelis Virus\\\",\\n  \\\"PCMatrix\\\",\\n  \\\"Bionic Arms\\\",\\n  \\\"Nanofiber Weave\\\",\\n  \\\"Combat Rib III\\\",\\n  \\\"Augmented Targeting III\\\",\\n  \\\"Vangelis Virus 3.0\\\",\\n  \\\"Graphene Bionic Arms Upgrade\\\",\\n  \\\"The Red Pill\\\",\\n  \\\"Neotra\\\",\\n  \\\"Photosynthetic Cells\\\",\\n  \\\"BrachiBlades\\\"\\n]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/augRepReq.txt\",\"text\":\"{\\n  \\\"NeuroFlux Governor\\\": 1251.1343956435192,\\n  \\\"Synthetic Heart\\\": 750000,\\n  \\\"Synfibril Muscle\\\": 437500,\\n  \\\"NEMEAN Subdermal Weave\\\": 875000,\\n  \\\"Embedded Netburner Module Core V3 Upgrade\\\": 1750000,\\n  \\\"Embedded Netburner Module Analyze Engine\\\": 625000,\\n  \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\": 1000000,\\n  \\\"QLink\\\": 1875000,\\n  \\\"The Red Pill\\\": 2500000,\\n  \\\"Augmented Targeting III\\\": 27500,\\n  \\\"Combat Rib III\\\": 35000,\\n  \\\"Graphene Bone Lacings\\\": 1125000,\\n  \\\"SPTN-97 Gene Modification\\\": 1250000,\\n  \\\"Graphene Bionic Spine Upgrade\\\": 1625000,\\n  \\\"Graphene Bionic Legs Upgrade\\\": 750000,\\n  \\\"Embedded Netburner Module\\\": 15000,\\n  \\\"Embedded Netburner Module Core Implant\\\": 175000,\\n  \\\"Embedded Netburner Module Core V2 Upgrade\\\": 1000000,\\n  \\\"PC Direct-Neural Interface\\\": 375000,\\n  \\\"PC Direct-Neural Interface Optimization Submodule\\\": 500000,\\n  \\\"ECorp HVMind Implant\\\": 1500000,\\n  \\\"ADR-V1 Pheromone Gene\\\": 3750,\\n  \\\"CordiARC Fusion Reactor\\\": 1125000,\\n  \\\"Enhanced Social Interaction Implant\\\": 375000,\\n  \\\"Neuralstimulator\\\": 50000,\\n  \\\"Nuoptimal Nootropic Injector Implant\\\": 5000,\\n  \\\"Speech Enhancement\\\": 2500,\\n  \\\"FocusWire\\\": 75000,\\n  \\\"ADR-V2 Pheromone Gene\\\": 62500,\\n  \\\"SmartJaw\\\": 375000,\\n  \\\"Augmented Targeting I\\\": 5000,\\n  \\\"Augmented Targeting II\\\": 8750,\\n  \\\"Combat Rib I\\\": 7500,\\n  \\\"Combat Rib II\\\": 18750,\\n  \\\"Nanofiber Weave\\\": 37500,\\n  \\\"Bionic Spine\\\": 45000,\\n  \\\"Bionic Legs\\\": 150000,\\n  \\\"HyperSight Corneal Implant\\\": 150000,\\n  \\\"Neotra\\\": 562500,\\n  \\\"Neurotrainer III\\\": 25000,\\n  \\\"Power Recirculation Core\\\": 25000,\\n  \\\"Xanipher\\\": 875000,\\n  \\\"Hydroflame Left Arm\\\": 1250000,\\n  \\\"Neuronal Densification\\\": 187500,\\n  \\\"nextSENS Gene Modification\\\": 437500,\\n  \\\"OmniTek InfoLoad\\\": 625000,\\n  \\\"Photosynthetic Cells\\\": 562500,\\n  \\\"Artificial Bio-neural Network Implant\\\": 275000,\\n  \\\"Enhanced Myelin Sheathing\\\": 100000,\\n  \\\"PC Direct-Neural Interface NeuroNet Injector\\\": 1500000,\\n  \\\"DataJack\\\": 112500,\\n  \\\"Neural Accelerator\\\": 200000,\\n  \\\"Cranial Signal Processors - Gen III\\\": 50000,\\n  \\\"Cranial Signal Processors - Gen IV\\\": 125000,\\n  \\\"Cranial Signal Processors - Gen V\\\": 250000,\\n  \\\"Neurotrainer II\\\": 10000,\\n  \\\"BitRunners Neurolink\\\": 875000,\\n  \\\"Artificial Synaptic Potentiation\\\": 6250,\\n  \\\"The Black Hand\\\": 100000,\\n  \\\"BitWire\\\": 3750,\\n  \\\"Neural-Retention Enhancement\\\": 20000,\\n  \\\"Cranial Signal Processors - Gen I\\\": 10000,\\n  \\\"Cranial Signal Processors - Gen II\\\": 18750,\\n  \\\"CRTX42-AA Gene Modification\\\": 45000,\\n  \\\"Wired Reflexes\\\": 1250,\\n  \\\"Speech Processor Implant\\\": 7500,\\n  \\\"Synaptic Enhancement Implant\\\": 2000,\\n  \\\"Neurotrainer I\\\": 1000,\\n  \\\"PCMatrix\\\": 100000,\\n  \\\"Neuregen Gene Modification\\\": 37500,\\n  \\\"INFRARET Enhancement\\\": 7500,\\n  \\\"NutriGen Implant\\\": 6250,\\n  \\\"CashRoot Starter Kit\\\": 12500,\\n  \\\"DermaForce Particle Barrier\\\": 15000,\\n  \\\"Unstable Circadian Modulator\\\": 362500,\\n  \\\"The Shadow's Simulacrum\\\": 37500,\\n  \\\"Graphene BrachiBlades Upgrade\\\": 225000,\\n  \\\"HemoRecirculator\\\": 10000,\\n  \\\"Graphene Bionic Arms Upgrade\\\": 500000,\\n  \\\"BrachiBlades\\\": 12500,\\n  \\\"TITN-41 Gene-Modification Injection\\\": 25000,\\n  \\\"LuminCloaking-V1 Skin Implant\\\": 1500,\\n  \\\"LuminCloaking-V2 Skin Implant\\\": 5000,\\n  \\\"Bionic Arms\\\": 62500,\\n  \\\"Hacknet Node CPU Architecture Neural-Upload\\\": 3750,\\n  \\\"Hacknet Node Kernel Direct-Neural Interface\\\": 7500,\\n  \\\"SmartSonar Implant\\\": 22500,\\n  \\\"Neuroreceptor Management Implant\\\": 75000,\\n  \\\"Hacknet Node Cache Architecture Neural-Upload\\\": 2500,\\n  \\\"Hacknet Node NIC Architecture Neural-Upload\\\": 1875,\\n  \\\"Hacknet Node Core Direct-Neural Interface\\\": 12500,\\n  \\\"Social Negotiation Assistant (S.N.A)\\\": 6250,\\n  \\\"EsperTech Bladeburner Eyewear\\\": 1250,\\n  \\\"EMS-4 Recombination\\\": 2500,\\n  \\\"ORION-MKIV Shoulder\\\": 6250,\\n  \\\"Hyperion Plasma Cannon V1\\\": 12500,\\n  \\\"Hyperion Plasma Cannon V2\\\": 25000,\\n  \\\"GOLEM Serum\\\": 31250,\\n  \\\"Vangelis Virus\\\": 18750,\\n  \\\"Vangelis Virus 3.0\\\": 37500,\\n  \\\"I.N.T.E.R.L.I.N.K.E.D\\\": 25000,\\n  \\\"Blade's Runners\\\": 20000,\\n  \\\"BLADE-51b Tesla Armor\\\": 12500,\\n  \\\"BLADE-51b Tesla Armor: Power Cells Upgrade\\\": 18750,\\n  \\\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\\\": 21250,\\n  \\\"BLADE-51b Tesla Armor: Unibeam Upgrade\\\": 31250,\\n  \\\"BLADE-51b Tesla Armor: Omnibeam Upgrade\\\": 62500,\\n  \\\"BLADE-51b Tesla Armor: IPU Upgrade\\\": 15000,\\n  \\\"The Blade's Simulacrum\\\": 1250\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/augStats.txt\",\"text\":\"{\\n  \\\"NeuroFlux Governor\\\": {\\n    \\\"hacking_mult\\\": 1.01000004,\\n    \\\"strength_mult\\\": 1.01000004,\\n    \\\"defense_mult\\\": 1.01000004,\\n    \\\"dexterity_mult\\\": 1.01000004,\\n    \\\"agility_mult\\\": 1.01000004,\\n    \\\"charisma_mult\\\": 1.01000004,\\n    \\\"hacking_exp_mult\\\": 1.01000004,\\n    \\\"strength_exp_mult\\\": 1.01000004,\\n    \\\"defense_exp_mult\\\": 1.01000004,\\n    \\\"dexterity_exp_mult\\\": 1.01000004,\\n    \\\"agility_exp_mult\\\": 1.01000004,\\n    \\\"charisma_exp_mult\\\": 1.01000004,\\n    \\\"hacking_chance_mult\\\": 1.01000004,\\n    \\\"hacking_speed_mult\\\": 1.01000004,\\n    \\\"hacking_money_mult\\\": 1.01000004,\\n    \\\"hacking_grow_mult\\\": 1.01000004,\\n    \\\"company_rep_mult\\\": 1.01000004,\\n    \\\"faction_rep_mult\\\": 1.01000004,\\n    \\\"crime_money_mult\\\": 1.01000004,\\n    \\\"crime_success_mult\\\": 1.01000004,\\n    \\\"work_money_mult\\\": 1.01000004,\\n    \\\"hacknet_node_money_mult\\\": 1.01000004,\\n    \\\"hacknet_node_purchase_cost_mult\\\": 0.9900989706891496,\\n    \\\"hacknet_node_ram_cost_mult\\\": 0.9900989706891496,\\n    \\\"hacknet_node_core_cost_mult\\\": 0.9900989706891496,\\n    \\\"hacknet_node_level_cost_mult\\\": 0.9900989706891496,\\n    \\\"price\\\": 5630104.780395837\\n  },\\n  \\\"Synthetic Heart\\\": {\\n    \\\"strength_mult\\\": 1.5,\\n    \\\"agility_mult\\\": 1.5,\\n    \\\"price\\\": 8625000000\\n  },\\n  \\\"Synfibril Muscle\\\": {\\n    \\\"strength_mult\\\": 1.3,\\n    \\\"defense_mult\\\": 1.3,\\n    \\\"price\\\": 3375000000\\n  },\\n  \\\"NEMEAN Subdermal Weave\\\": {\\n    \\\"defense_mult\\\": 2.2,\\n    \\\"price\\\": 9750000000\\n  },\\n  \\\"Embedded Netburner Module Core V3 Upgrade\\\": {\\n    \\\"hacking_mult\\\": 1.1,\\n    \\\"hacking_exp_mult\\\": 1.25,\\n    \\\"hacking_chance_mult\\\": 1.1,\\n    \\\"hacking_speed_mult\\\": 1.05,\\n    \\\"hacking_money_mult\\\": 1.4,\\n    \\\"price\\\": 22500000000\\n  },\\n  \\\"Embedded Netburner Module Analyze Engine\\\": {\\n    \\\"hacking_speed_mult\\\": 1.1,\\n    \\\"price\\\": 18000000000\\n  },\\n  \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\": {\\n    \\\"hacking_chance_mult\\\": 1.2,\\n    \\\"hacking_money_mult\\\": 1.4,\\n    \\\"price\\\": 21000000000\\n  },\\n  \\\"QLink\\\": {\\n    \\\"hacking_mult\\\": 1.75,\\n    \\\"hacking_chance_mult\\\": 2.5,\\n    \\\"hacking_speed_mult\\\": 2,\\n    \\\"hacking_money_mult\\\": 4,\\n    \\\"price\\\": 75000000000000\\n  },\\n  \\\"The Red Pill\\\": {\\n    \\\"price\\\": 0\\n  },\\n  \\\"Augmented Targeting III\\\": {\\n    \\\"dexterity_mult\\\": 1.3,\\n    \\\"price\\\": 345000000\\n  },\\n  \\\"Combat Rib III\\\": {\\n    \\\"strength_mult\\\": 1.18,\\n    \\\"defense_mult\\\": 1.18,\\n    \\\"price\\\": 360000000\\n  },\\n  \\\"Graphene Bone Lacings\\\": {\\n    \\\"strength_mult\\\": 1.7,\\n    \\\"defense_mult\\\": 1.7,\\n    \\\"price\\\": 12750000000\\n  },\\n  \\\"SPTN-97 Gene Modification\\\": {\\n    \\\"hacking_mult\\\": 1.15,\\n    \\\"strength_mult\\\": 1.75,\\n    \\\"defense_mult\\\": 1.75,\\n    \\\"dexterity_mult\\\": 1.75,\\n    \\\"agility_mult\\\": 1.75,\\n    \\\"price\\\": 14625000000\\n  },\\n  \\\"Graphene Bionic Spine Upgrade\\\": {\\n    \\\"strength_mult\\\": 1.6,\\n    \\\"defense_mult\\\": 1.6,\\n    \\\"dexterity_mult\\\": 1.6,\\n    \\\"agility_mult\\\": 1.6,\\n    \\\"price\\\": 18000000000\\n  },\\n  \\\"Graphene Bionic Legs Upgrade\\\": {\\n    \\\"agility_mult\\\": 2.5,\\n    \\\"price\\\": 13500000000\\n  },\\n  \\\"Embedded Netburner Module\\\": {\\n    \\\"hacking_mult\\\": 1.08,\\n    \\\"price\\\": 750000000\\n  },\\n  \\\"Embedded Netburner Module Core Implant\\\": {\\n    \\\"hacking_mult\\\": 1.07,\\n    \\\"hacking_exp_mult\\\": 1.07,\\n    \\\"hacking_chance_mult\\\": 1.03,\\n    \\\"hacking_speed_mult\\\": 1.03,\\n    \\\"hacking_money_mult\\\": 1.1,\\n    \\\"price\\\": 7500000000\\n  },\\n  \\\"Embedded Netburner Module Core V2 Upgrade\\\": {\\n    \\\"hacking_mult\\\": 1.08,\\n    \\\"hacking_exp_mult\\\": 1.15,\\n    \\\"hacking_chance_mult\\\": 1.05,\\n    \\\"hacking_speed_mult\\\": 1.05,\\n    \\\"hacking_money_mult\\\": 1.3,\\n    \\\"price\\\": 13500000000\\n  },\\n  \\\"PC Direct-Neural Interface\\\": {\\n    \\\"hacking_mult\\\": 1.08,\\n    \\\"company_rep_mult\\\": 1.3,\\n    \\\"price\\\": 11250000000\\n  },\\n  \\\"PC Direct-Neural Interface Optimization Submodule\\\": {\\n    \\\"hacking_mult\\\": 1.1,\\n    \\\"company_rep_mult\\\": 1.75,\\n    \\\"price\\\": 13500000000\\n  },\\n  \\\"ECorp HVMind Implant\\\": {\\n    \\\"hacking_grow_mult\\\": 3,\\n    \\\"price\\\": 16500000000\\n  },\\n  \\\"ADR-V1 Pheromone Gene\\\": {\\n    \\\"company_rep_mult\\\": 1.1,\\n    \\\"faction_rep_mult\\\": 1.1,\\n    \\\"price\\\": 52500000\\n  },\\n  \\\"CordiARC Fusion Reactor\\\": {\\n    \\\"strength_mult\\\": 1.35,\\n    \\\"defense_mult\\\": 1.35,\\n    \\\"dexterity_mult\\\": 1.35,\\n    \\\"agility_mult\\\": 1.35,\\n    \\\"strength_exp_mult\\\": 1.35,\\n    \\\"defense_exp_mult\\\": 1.35,\\n    \\\"dexterity_exp_mult\\\": 1.35,\\n    \\\"agility_exp_mult\\\": 1.35,\\n    \\\"price\\\": 15000000000\\n  },\\n  \\\"Enhanced Social Interaction Implant\\\": {\\n    \\\"charisma_mult\\\": 1.6,\\n    \\\"charisma_exp_mult\\\": 1.6,\\n    \\\"price\\\": 4125000000\\n  },\\n  \\\"Neuralstimulator\\\": {\\n    \\\"hacking_exp_mult\\\": 1.12,\\n    \\\"hacking_chance_mult\\\": 1.1,\\n    \\\"hacking_speed_mult\\\": 1.02,\\n    \\\"price\\\": 9000000000\\n  },\\n  \\\"Nuoptimal Nootropic Injector Implant\\\": {\\n    \\\"company_rep_mult\\\": 1.2,\\n    \\\"price\\\": 60000000\\n  },\\n  \\\"Speech Enhancement\\\": {\\n    \\\"charisma_mult\\\": 1.1,\\n    \\\"company_rep_mult\\\": 1.1,\\n    \\\"price\\\": 37500000\\n  },\\n  \\\"FocusWire\\\": {\\n    \\\"hacking_exp_mult\\\": 1.05,\\n    \\\"strength_exp_mult\\\": 1.05,\\n    \\\"defense_exp_mult\\\": 1.05,\\n    \\\"dexterity_exp_mult\\\": 1.05,\\n    \\\"agility_exp_mult\\\": 1.05,\\n    \\\"charisma_exp_mult\\\": 1.05,\\n    \\\"company_rep_mult\\\": 1.1,\\n    \\\"work_money_mult\\\": 1.2,\\n    \\\"price\\\": 2700000000\\n  },\\n  \\\"ADR-V2 Pheromone Gene\\\": {\\n    \\\"company_rep_mult\\\": 1.2,\\n    \\\"faction_rep_mult\\\": 1.2,\\n    \\\"price\\\": 1650000000\\n  },\\n  \\\"SmartJaw\\\": {\\n    \\\"charisma_mult\\\": 1.5,\\n    \\\"charisma_exp_mult\\\": 1.5,\\n    \\\"company_rep_mult\\\": 1.25,\\n    \\\"faction_rep_mult\\\": 1.25,\\n    \\\"price\\\": 8250000000\\n  },\\n  \\\"Augmented Targeting I\\\": {\\n    \\\"dexterity_mult\\\": 1.1,\\n    \\\"price\\\": 45000000\\n  },\\n  \\\"Augmented Targeting II\\\": {\\n    \\\"dexterity_mult\\\": 1.2,\\n    \\\"price\\\": 127500000\\n  },\\n  \\\"Combat Rib I\\\": {\\n    \\\"strength_mult\\\": 1.1,\\n    \\\"defense_mult\\\": 1.1,\\n    \\\"price\\\": 71250000\\n  },\\n  \\\"Combat Rib II\\\": {\\n    \\\"strength_mult\\\": 1.14,\\n    \\\"defense_mult\\\": 1.14,\\n    \\\"price\\\": 195000000\\n  },\\n  \\\"Nanofiber Weave\\\": {\\n    \\\"strength_mult\\\": 1.2,\\n    \\\"defense_mult\\\": 1.2,\\n    \\\"price\\\": 375000000\\n  },\\n  \\\"Bionic Spine\\\": {\\n    \\\"strength_mult\\\": 1.15,\\n    \\\"defense_mult\\\": 1.15,\\n    \\\"dexterity_mult\\\": 1.15,\\n    \\\"agility_mult\\\": 1.15,\\n    \\\"price\\\": 375000000\\n  },\\n  \\\"Bionic Legs\\\": {\\n    \\\"agility_mult\\\": 1.6,\\n    \\\"price\\\": 1125000000\\n  },\\n  \\\"HyperSight Corneal Implant\\\": {\\n    \\\"dexterity_mult\\\": 1.4,\\n    \\\"hacking_speed_mult\\\": 1.03,\\n    \\\"hacking_money_mult\\\": 1.1,\\n    \\\"price\\\": 8250000000\\n  },\\n  \\\"Neotra\\\": {\\n    \\\"strength_mult\\\": 1.55,\\n    \\\"defense_mult\\\": 1.55,\\n    \\\"price\\\": 8625000000\\n  },\\n  \\\"Neurotrainer III\\\": {\\n    \\\"hacking_exp_mult\\\": 1.2,\\n    \\\"strength_exp_mult\\\": 1.2,\\n    \\\"defense_exp_mult\\\": 1.2,\\n    \\\"dexterity_exp_mult\\\": 1.2,\\n    \\\"agility_exp_mult\\\": 1.2,\\n    \\\"charisma_exp_mult\\\": 1.2,\\n    \\\"price\\\": 390000000\\n  },\\n  \\\"Power Recirculation Core\\\": {\\n    \\\"hacking_mult\\\": 1.05,\\n    \\\"strength_mult\\\": 1.05,\\n    \\\"defense_mult\\\": 1.05,\\n    \\\"dexterity_mult\\\": 1.05,\\n    \\\"agility_mult\\\": 1.05,\\n    \\\"charisma_mult\\\": 1.05,\\n    \\\"hacking_exp_mult\\\": 1.1,\\n    \\\"strength_exp_mult\\\": 1.1,\\n    \\\"defense_exp_mult\\\": 1.1,\\n    \\\"dexterity_exp_mult\\\": 1.1,\\n    \\\"agility_exp_mult\\\": 1.1,\\n    \\\"charisma_exp_mult\\\": 1.1,\\n    \\\"price\\\": 540000000\\n  },\\n  \\\"Xanipher\\\": {\\n    \\\"hacking_mult\\\": 1.2,\\n    \\\"strength_mult\\\": 1.2,\\n    \\\"defense_mult\\\": 1.2,\\n    \\\"dexterity_mult\\\": 1.2,\\n    \\\"agility_mult\\\": 1.2,\\n    \\\"charisma_mult\\\": 1.2,\\n    \\\"hacking_exp_mult\\\": 1.15,\\n    \\\"strength_exp_mult\\\": 1.15,\\n    \\\"defense_exp_mult\\\": 1.15,\\n    \\\"dexterity_exp_mult\\\": 1.15,\\n    \\\"agility_exp_mult\\\": 1.15,\\n    \\\"charisma_exp_mult\\\": 1.15,\\n    \\\"price\\\": 12750000000\\n  },\\n  \\\"Hydroflame Left Arm\\\": {\\n    \\\"strength_mult\\\": 2.7,\\n    \\\"price\\\": 7500000000000\\n  },\\n  \\\"Neuronal Densification\\\": {\\n    \\\"hacking_mult\\\": 1.15,\\n    \\\"hacking_exp_mult\\\": 1.1,\\n    \\\"hacking_speed_mult\\\": 1.03,\\n    \\\"price\\\": 4125000000\\n  },\\n  \\\"nextSENS Gene Modification\\\": {\\n    \\\"hacking_mult\\\": 1.2,\\n    \\\"strength_mult\\\": 1.2,\\n    \\\"defense_mult\\\": 1.2,\\n    \\\"dexterity_mult\\\": 1.2,\\n    \\\"agility_mult\\\": 1.2,\\n    \\\"charisma_mult\\\": 1.2,\\n    \\\"price\\\": 5775000000\\n  },\\n  \\\"OmniTek InfoLoad\\\": {\\n    \\\"hacking_mult\\\": 1.2,\\n    \\\"hacking_exp_mult\\\": 1.25,\\n    \\\"price\\\": 8625000000\\n  },\\n  \\\"Photosynthetic Cells\\\": {\\n    \\\"strength_mult\\\": 1.4,\\n    \\\"defense_mult\\\": 1.4,\\n    \\\"agility_mult\\\": 1.4,\\n    \\\"price\\\": 8250000000\\n  },\\n  \\\"Artificial Bio-neural Network Implant\\\": {\\n    \\\"hacking_mult\\\": 1.12,\\n    \\\"hacking_speed_mult\\\": 1.03,\\n    \\\"hacking_money_mult\\\": 1.15,\\n    \\\"price\\\": 9000000000\\n  },\\n  \\\"Enhanced Myelin Sheathing\\\": {\\n    \\\"hacking_mult\\\": 1.08,\\n    \\\"hacking_exp_mult\\\": 1.1,\\n    \\\"hacking_speed_mult\\\": 1.03,\\n    \\\"price\\\": 4125000000\\n  },\\n  \\\"PC Direct-Neural Interface NeuroNet Injector\\\": {\\n    \\\"hacking_mult\\\": 1.1,\\n    \\\"hacking_speed_mult\\\": 1.05,\\n    \\\"company_rep_mult\\\": 2,\\n    \\\"price\\\": 22500000000\\n  },\\n  \\\"DataJack\\\": {\\n    \\\"hacking_money_mult\\\": 1.25,\\n    \\\"price\\\": 1350000000\\n  },\\n  \\\"Neural Accelerator\\\": {\\n    \\\"hacking_mult\\\": 1.1,\\n    \\\"hacking_exp_mult\\\": 1.15,\\n    \\\"hacking_money_mult\\\": 1.2,\\n    \\\"price\\\": 5250000000\\n  },\\n  \\\"Cranial Signal Processors - Gen III\\\": {\\n    \\\"hacking_mult\\\": 1.09,\\n    \\\"hacking_speed_mult\\\": 1.02,\\n    \\\"hacking_money_mult\\\": 1.15,\\n    \\\"price\\\": 1650000000\\n  },\\n  \\\"Cranial Signal Processors - Gen IV\\\": {\\n    \\\"hacking_speed_mult\\\": 1.02,\\n    \\\"hacking_money_mult\\\": 1.2,\\n    \\\"hacking_grow_mult\\\": 1.25,\\n    \\\"price\\\": 3300000000\\n  },\\n  \\\"Cranial Signal Processors - Gen V\\\": {\\n    \\\"hacking_mult\\\": 1.3,\\n    \\\"hacking_money_mult\\\": 1.25,\\n    \\\"hacking_grow_mult\\\": 1.75,\\n    \\\"price\\\": 6750000000\\n  },\\n  \\\"Neurotrainer II\\\": {\\n    \\\"hacking_exp_mult\\\": 1.15,\\n    \\\"strength_exp_mult\\\": 1.15,\\n    \\\"defense_exp_mult\\\": 1.15,\\n    \\\"dexterity_exp_mult\\\": 1.15,\\n    \\\"agility_exp_mult\\\": 1.15,\\n    \\\"charisma_exp_mult\\\": 1.15,\\n    \\\"price\\\": 135000000\\n  },\\n  \\\"BitRunners Neurolink\\\": {\\n    \\\"hacking_mult\\\": 1.15,\\n    \\\"hacking_exp_mult\\\": 1.2,\\n    \\\"hacking_chance_mult\\\": 1.1,\\n    \\\"hacking_speed_mult\\\": 1.05,\\n    \\\"price\\\": 13125000000\\n  },\\n  \\\"Artificial Synaptic Potentiation\\\": {\\n    \\\"hacking_exp_mult\\\": 1.05,\\n    \\\"hacking_chance_mult\\\": 1.05,\\n    \\\"hacking_speed_mult\\\": 1.02,\\n    \\\"price\\\": 240000000\\n  },\\n  \\\"The Black Hand\\\": {\\n    \\\"hacking_mult\\\": 1.1,\\n    \\\"strength_mult\\\": 1.15,\\n    \\\"dexterity_mult\\\": 1.15,\\n    \\\"hacking_speed_mult\\\": 1.02,\\n    \\\"hacking_money_mult\\\": 1.1,\\n    \\\"price\\\": 1650000000\\n  },\\n  \\\"BitWire\\\": {\\n    \\\"hacking_mult\\\": 1.05,\\n    \\\"price\\\": 30000000\\n  },\\n  \\\"Neural-Retention Enhancement\\\": {\\n    \\\"hacking_exp_mult\\\": 1.25,\\n    \\\"price\\\": 750000000\\n  },\\n  \\\"Cranial Signal Processors - Gen I\\\": {\\n    \\\"hacking_mult\\\": 1.05,\\n    \\\"hacking_speed_mult\\\": 1.01,\\n    \\\"price\\\": 210000000\\n  },\\n  \\\"Cranial Signal Processors - Gen II\\\": {\\n    \\\"hacking_mult\\\": 1.07,\\n    \\\"hacking_chance_mult\\\": 1.05,\\n    \\\"hacking_speed_mult\\\": 1.02,\\n    \\\"price\\\": 375000000\\n  },\\n  \\\"CRTX42-AA Gene Modification\\\": {\\n    \\\"hacking_mult\\\": 1.08,\\n    \\\"hacking_exp_mult\\\": 1.15,\\n    \\\"price\\\": 675000000\\n  },\\n  \\\"Wired Reflexes\\\": {\\n    \\\"dexterity_mult\\\": 1.05,\\n    \\\"agility_mult\\\": 1.05,\\n    \\\"price\\\": 7500000\\n  },\\n  \\\"Speech Processor Implant\\\": {\\n    \\\"charisma_mult\\\": 1.2,\\n    \\\"price\\\": 150000000\\n  },\\n  \\\"Synaptic Enhancement Implant\\\": {\\n    \\\"hacking_speed_mult\\\": 1.03,\\n    \\\"price\\\": 22500000\\n  },\\n  \\\"Neurotrainer I\\\": {\\n    \\\"hacking_exp_mult\\\": 1.1,\\n    \\\"strength_exp_mult\\\": 1.1,\\n    \\\"defense_exp_mult\\\": 1.1,\\n    \\\"dexterity_exp_mult\\\": 1.1,\\n    \\\"agility_exp_mult\\\": 1.1,\\n    \\\"charisma_exp_mult\\\": 1.1,\\n    \\\"price\\\": 12000000\\n  },\\n  \\\"PCMatrix\\\": {\\n    \\\"charisma_mult\\\": 1.0777,\\n    \\\"charisma_exp_mult\\\": 1.0777,\\n    \\\"company_rep_mult\\\": 1.0777,\\n    \\\"faction_rep_mult\\\": 1.0777,\\n    \\\"crime_money_mult\\\": 1.0777,\\n    \\\"crime_success_mult\\\": 1.0777,\\n    \\\"work_money_mult\\\": 1.777,\\n    \\\"price\\\": 6000000000\\n  },\\n  \\\"Neuregen Gene Modification\\\": {\\n    \\\"hacking_exp_mult\\\": 1.4,\\n    \\\"price\\\": 1125000000\\n  },\\n  \\\"INFRARET Enhancement\\\": {\\n    \\\"dexterity_mult\\\": 1.1,\\n    \\\"crime_money_mult\\\": 1.1,\\n    \\\"crime_success_mult\\\": 1.25,\\n    \\\"price\\\": 90000000\\n  },\\n  \\\"NutriGen Implant\\\": {\\n    \\\"strength_exp_mult\\\": 1.2,\\n    \\\"defense_exp_mult\\\": 1.2,\\n    \\\"dexterity_exp_mult\\\": 1.2,\\n    \\\"agility_exp_mult\\\": 1.2,\\n    \\\"price\\\": 7500000\\n  },\\n  \\\"CashRoot Starter Kit\\\": {\\n    \\\"price\\\": 375000000\\n  },\\n  \\\"DermaForce Particle Barrier\\\": {\\n    \\\"defense_mult\\\": 1.4,\\n    \\\"price\\\": 150000000\\n  },\\n  \\\"Unstable Circadian Modulator\\\": {\\n    \\\"crime_money_mult\\\": 2,\\n    \\\"crime_success_mult\\\": 2,\\n    \\\"price\\\": 15000000000\\n  },\\n  \\\"The Shadow's Simulacrum\\\": {\\n    \\\"company_rep_mult\\\": 1.15,\\n    \\\"faction_rep_mult\\\": 1.15,\\n    \\\"price\\\": 1200000000\\n  },\\n  \\\"Graphene BrachiBlades Upgrade\\\": {\\n    \\\"strength_mult\\\": 1.4,\\n    \\\"defense_mult\\\": 1.4,\\n    \\\"crime_money_mult\\\": 1.3,\\n    \\\"crime_success_mult\\\": 1.1,\\n    \\\"price\\\": 7500000000\\n  },\\n  \\\"HemoRecirculator\\\": {\\n    \\\"strength_mult\\\": 1.08,\\n    \\\"defense_mult\\\": 1.08,\\n    \\\"dexterity_mult\\\": 1.08,\\n    \\\"agility_mult\\\": 1.08,\\n    \\\"price\\\": 135000000\\n  },\\n  \\\"Graphene Bionic Arms Upgrade\\\": {\\n    \\\"strength_mult\\\": 1.85,\\n    \\\"dexterity_mult\\\": 1.85,\\n    \\\"price\\\": 11250000000\\n  },\\n  \\\"BrachiBlades\\\": {\\n    \\\"strength_mult\\\": 1.15,\\n    \\\"defense_mult\\\": 1.15,\\n    \\\"crime_money_mult\\\": 1.15,\\n    \\\"crime_success_mult\\\": 1.1,\\n    \\\"price\\\": 270000000\\n  },\\n  \\\"TITN-41 Gene-Modification Injection\\\": {\\n    \\\"charisma_mult\\\": 1.15,\\n    \\\"charisma_exp_mult\\\": 1.15,\\n    \\\"price\\\": 570000000\\n  },\\n  \\\"LuminCloaking-V1 Skin Implant\\\": {\\n    \\\"agility_mult\\\": 1.05,\\n    \\\"crime_money_mult\\\": 1.1,\\n    \\\"price\\\": 15000000\\n  },\\n  \\\"LuminCloaking-V2 Skin Implant\\\": {\\n    \\\"defense_mult\\\": 1.1,\\n    \\\"agility_mult\\\": 1.1,\\n    \\\"crime_money_mult\\\": 1.25,\\n    \\\"price\\\": 90000000\\n  },\\n  \\\"Bionic Arms\\\": {\\n    \\\"strength_mult\\\": 1.3,\\n    \\\"dexterity_mult\\\": 1.3,\\n    \\\"price\\\": 825000000\\n  },\\n  \\\"Hacknet Node CPU Architecture Neural-Upload\\\": {\\n    \\\"hacknet_node_money_mult\\\": 1.15,\\n    \\\"hacknet_node_purchase_cost_mult\\\": 0.85,\\n    \\\"price\\\": 33000000\\n  },\\n  \\\"Hacknet Node Kernel Direct-Neural Interface\\\": {\\n    \\\"hacknet_node_money_mult\\\": 1.25,\\n    \\\"price\\\": 120000000\\n  },\\n  \\\"SmartSonar Implant\\\": {\\n    \\\"dexterity_mult\\\": 1.1,\\n    \\\"dexterity_exp_mult\\\": 1.15,\\n    \\\"crime_money_mult\\\": 1.25,\\n    \\\"price\\\": 225000000\\n  },\\n  \\\"Neuroreceptor Management Implant\\\": {\\n    \\\"price\\\": 1650000000\\n  },\\n  \\\"Hacknet Node Cache Architecture Neural-Upload\\\": {\\n    \\\"hacknet_node_money_mult\\\": 1.1,\\n    \\\"hacknet_node_level_cost_mult\\\": 0.85,\\n    \\\"price\\\": 16500000\\n  },\\n  \\\"Hacknet Node NIC Architecture Neural-Upload\\\": {\\n    \\\"hacknet_node_money_mult\\\": 1.1,\\n    \\\"hacknet_node_purchase_cost_mult\\\": 0.9,\\n    \\\"price\\\": 13500000\\n  },\\n  \\\"Hacknet Node Core Direct-Neural Interface\\\": {\\n    \\\"hacknet_node_money_mult\\\": 1.45,\\n    \\\"price\\\": 180000000\\n  },\\n  \\\"Social Negotiation Assistant (S.N.A)\\\": {\\n    \\\"company_rep_mult\\\": 1.15,\\n    \\\"faction_rep_mult\\\": 1.15,\\n    \\\"work_money_mult\\\": 1.1,\\n    \\\"price\\\": 90000000\\n  },\\n  \\\"EsperTech Bladeburner Eyewear\\\": {\\n    \\\"dexterity_mult\\\": 1.05,\\n    \\\"bladeburner_success_chance_mult\\\": 1.03,\\n    \\\"price\\\": 495000000\\n  },\\n  \\\"EMS-4 Recombination\\\": {\\n    \\\"bladeburner_stamina_gain_mult\\\": 1.02,\\n    \\\"bladeburner_analysis_mult\\\": 1.05,\\n    \\\"bladeburner_success_chance_mult\\\": 1.03,\\n    \\\"price\\\": 825000000\\n  },\\n  \\\"ORION-MKIV Shoulder\\\": {\\n    \\\"strength_mult\\\": 1.05,\\n    \\\"defense_mult\\\": 1.05,\\n    \\\"dexterity_mult\\\": 1.05,\\n    \\\"bladeburner_success_chance_mult\\\": 1.04,\\n    \\\"price\\\": 1650000000\\n  },\\n  \\\"Hyperion Plasma Cannon V1\\\": {\\n    \\\"bladeburner_success_chance_mult\\\": 1.06,\\n    \\\"price\\\": 8250000000\\n  },\\n  \\\"Hyperion Plasma Cannon V2\\\": {\\n    \\\"bladeburner_success_chance_mult\\\": 1.08,\\n    \\\"price\\\": 16500000000\\n  },\\n  \\\"GOLEM Serum\\\": {\\n    \\\"strength_mult\\\": 1.07,\\n    \\\"defense_mult\\\": 1.07,\\n    \\\"dexterity_mult\\\": 1.07,\\n    \\\"agility_mult\\\": 1.07,\\n    \\\"bladeburner_stamina_gain_mult\\\": 1.05,\\n    \\\"price\\\": 33000000000\\n  },\\n  \\\"Vangelis Virus\\\": {\\n    \\\"dexterity_exp_mult\\\": 1.1,\\n    \\\"bladeburner_analysis_mult\\\": 1.1,\\n    \\\"bladeburner_success_chance_mult\\\": 1.04,\\n    \\\"price\\\": 8250000000\\n  },\\n  \\\"Vangelis Virus 3.0\\\": {\\n    \\\"defense_exp_mult\\\": 1.1,\\n    \\\"dexterity_exp_mult\\\": 1.1,\\n    \\\"bladeburner_analysis_mult\\\": 1.15,\\n    \\\"bladeburner_success_chance_mult\\\": 1.05,\\n    \\\"price\\\": 33000000000\\n  },\\n  \\\"I.N.T.E.R.L.I.N.K.E.D\\\": {\\n    \\\"strength_exp_mult\\\": 1.05,\\n    \\\"defense_exp_mult\\\": 1.05,\\n    \\\"dexterity_exp_mult\\\": 1.05,\\n    \\\"agility_exp_mult\\\": 1.05,\\n    \\\"bladeburner_max_stamina_mult\\\": 1.1,\\n    \\\"price\\\": 16500000000\\n  },\\n  \\\"Blade's Runners\\\": {\\n    \\\"agility_mult\\\": 1.05,\\n    \\\"bladeburner_max_stamina_mult\\\": 1.05,\\n    \\\"bladeburner_stamina_gain_mult\\\": 1.05,\\n    \\\"price\\\": 24750000000\\n  },\\n  \\\"BLADE-51b Tesla Armor\\\": {\\n    \\\"strength_mult\\\": 1.04,\\n    \\\"defense_mult\\\": 1.04,\\n    \\\"dexterity_mult\\\": 1.04,\\n    \\\"agility_mult\\\": 1.04,\\n    \\\"bladeburner_stamina_gain_mult\\\": 1.02,\\n    \\\"bladeburner_success_chance_mult\\\": 1.03,\\n    \\\"price\\\": 4125000000\\n  },\\n  \\\"BLADE-51b Tesla Armor: Power Cells Upgrade\\\": {\\n    \\\"bladeburner_max_stamina_mult\\\": 1.05,\\n    \\\"bladeburner_stamina_gain_mult\\\": 1.02,\\n    \\\"bladeburner_success_chance_mult\\\": 1.05,\\n    \\\"price\\\": 8250000000\\n  },\\n  \\\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\\\": {\\n    \\\"defense_mult\\\": 1.05,\\n    \\\"bladeburner_success_chance_mult\\\": 1.06,\\n    \\\"price\\\": 16500000000\\n  },\\n  \\\"BLADE-51b Tesla Armor: Unibeam Upgrade\\\": {\\n    \\\"bladeburner_success_chance_mult\\\": 1.08,\\n    \\\"price\\\": 49500000000\\n  },\\n  \\\"BLADE-51b Tesla Armor: Omnibeam Upgrade\\\": {\\n    \\\"bladeburner_success_chance_mult\\\": 1.1,\\n    \\\"price\\\": 82500000000\\n  },\\n  \\\"BLADE-51b Tesla Armor: IPU Upgrade\\\": {\\n    \\\"bladeburner_analysis_mult\\\": 1.15,\\n    \\\"bladeburner_success_chance_mult\\\": 1.02,\\n    \\\"price\\\": 3300000000\\n  },\\n  \\\"The Blade's Simulacrum\\\": {\\n    \\\"price\\\": 450000000000\\n  }\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/sleeves_static.txt\",\"text\":\"{\\\"getNumSleeves\\\":8}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/n00dles.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"n00dles\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"68.7.6.3\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 4,\\n  \\\"organizationName\\\": \\\"Noodle Bar\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 1.5,\\n  \\\"hackDifficulty\\\": 1.5,\\n  \\\"minDifficulty\\\": 1,\\n  \\\"moneyAvailable\\\": 35000,\\n  \\\"moneyMax\\\": 350000,\\n  \\\"numOpenPortsRequired\\\": 0,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1,\\n  \\\"serverGrowth\\\": 3000\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/nectar-net.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"nectar-net\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"57.4.6.0\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\"Nectar Nightclub Network\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 30,\\n  \\\"hackDifficulty\\\": 30,\\n  \\\"minDifficulty\\\": 10,\\n  \\\"moneyAvailable\\\": 1375000,\\n  \\\"moneyMax\\\": 13750000,\\n  \\\"numOpenPortsRequired\\\": 0,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 20,\\n  \\\"serverGrowth\\\": 25\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/foodnstuff.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"foodnstuff\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"19.0.4.5\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\"FoodNStuff\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 15,\\n  \\\"hackDifficulty\\\": 15,\\n  \\\"minDifficulty\\\": 5,\\n  \\\"moneyAvailable\\\": 1000000,\\n  \\\"moneyMax\\\": 10000000,\\n  \\\"numOpenPortsRequired\\\": 0,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1,\\n  \\\"serverGrowth\\\": 5\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/sigma-cosmetics.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"sigma-cosmetics\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"55.4.3.1\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\"Sigma Cosmetics\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 15,\\n  \\\"hackDifficulty\\\": 15,\\n  \\\"minDifficulty\\\": 5,\\n  \\\"moneyAvailable\\\": 1150000,\\n  \\\"moneyMax\\\": 11500000,\\n  \\\"numOpenPortsRequired\\\": 0,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 5,\\n  \\\"serverGrowth\\\": 10\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/zer0.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"zer0\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"50.4.6.2\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"ZER0 Nightclub\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 37.5,\\n  \\\"hackDifficulty\\\": 37.5,\\n  \\\"minDifficulty\\\": 13,\\n  \\\"moneyAvailable\\\": 3750000,\\n  \\\"moneyMax\\\": 37500000,\\n  \\\"numOpenPortsRequired\\\": 1,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 75,\\n  \\\"serverGrowth\\\": 40\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/neo-net.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"neo-net\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"23.8.2.9\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"Neo Nightclub Network\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 37.5,\\n  \\\"hackDifficulty\\\": 37.5,\\n  \\\"minDifficulty\\\": 13,\\n  \\\"moneyAvailable\\\": 2500000,\\n  \\\"moneyMax\\\": 25000000,\\n  \\\"numOpenPortsRequired\\\": 1,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 50,\\n  \\\"serverGrowth\\\": 25\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/johnson-ortho.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"johnson-ortho\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"64.8.9.1\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Johnson Orthopedics\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 72,\\n  \\\"hackDifficulty\\\": 72,\\n  \\\"minDifficulty\\\": 24,\\n  \\\"moneyAvailable\\\": 40719787.5,\\n  \\\"moneyMax\\\": 407197875,\\n  \\\"numOpenPortsRequired\\\": 2,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 292,\\n  \\\"serverGrowth\\\": 41\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/rothman-uni.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"rothman-uni\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"5.2.4.0\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 128,\\n  \\\"organizationName\\\": \\\"Rothman University\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 73.5,\\n  \\\"hackDifficulty\\\": 73.5,\\n  \\\"minDifficulty\\\": 25,\\n  \\\"moneyAvailable\\\": 89871902.5,\\n  \\\"moneyMax\\\": 898719025,\\n  \\\"numOpenPortsRequired\\\": 3,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 370,\\n  \\\"serverGrowth\\\": 38\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/aevum-police.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"aevum-police\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"28.1.1.2\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\"Aevum Police Headquarters\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 112.5,\\n  \\\"hackDifficulty\\\": 112.5,\\n  \\\"minDifficulty\\\": 38,\\n  \\\"moneyAvailable\\\": 109158561.5,\\n  \\\"moneyMax\\\": 1091585615,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 418,\\n  \\\"serverGrowth\\\": 33\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/snap-fitness.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"snap-fitness\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"2.9.8.0\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Snap Fitness\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 67.5,\\n  \\\"hackDifficulty\\\": 67.5,\\n  \\\"minDifficulty\\\": 23,\\n  \\\"moneyAvailable\\\": 225000000,\\n  \\\"moneyMax\\\": 2250000000,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 734,\\n  \\\"serverGrowth\\\": 44\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/millenium-fitness.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"millenium-fitness\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"69.4.2.2\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"Millenium Fitness Network\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 79.5,\\n  \\\"hackDifficulty\\\": 79.5,\\n  \\\"minDifficulty\\\": 27,\\n  \\\"moneyAvailable\\\": 125000000,\\n  \\\"moneyMax\\\": 1250000000,\\n  \\\"numOpenPortsRequired\\\": 3,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 481,\\n  \\\"serverGrowth\\\": 45\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/syscore.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"syscore\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"34.5.4.6\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"SysCore Securities\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 114,\\n  \\\"hackDifficulty\\\": 114,\\n  \\\"minDifficulty\\\": 38,\\n  \\\"moneyAvailable\\\": 200493234,\\n  \\\"moneyMax\\\": 2004932340,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 632,\\n  \\\"serverGrowth\\\": 68\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/rho-construction.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"rho-construction\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"66.1.7.8\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 64,\\n  \\\"organizationName\\\": \\\"Rho Construction\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 66,\\n  \\\"hackDifficulty\\\": 66,\\n  \\\"minDifficulty\\\": 22,\\n  \\\"moneyAvailable\\\": 292996596.5,\\n  \\\"moneyMax\\\": 2929965965,\\n  \\\"numOpenPortsRequired\\\": 3,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 492,\\n  \\\"serverGrowth\\\": 41\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/galactic-cyber.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"galactic-cyber\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"30.6.8.0\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Galactic Cybersystems\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 97.5,\\n  \\\"hackDifficulty\\\": 97.5,\\n  \\\"minDifficulty\\\": 33,\\n  \\\"moneyAvailable\\\": 386954097.5,\\n  \\\"moneyMax\\\": 3869540975,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 874,\\n  \\\"serverGrowth\\\": 77\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/omnia.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"omnia\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"51.0.2.1\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 64,\\n  \\\"organizationName\\\": \\\"Omnia Cybersystems\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 135,\\n  \\\"hackDifficulty\\\": 135,\\n  \\\"minDifficulty\\\": 45,\\n  \\\"moneyAvailable\\\": 494606701.5,\\n  \\\"moneyMax\\\": 4946067015,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 932,\\n  \\\"serverGrowth\\\": 65\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/zeus-med.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"zeus-med\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"39.6.5.4\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Zeus Medical\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 112.5,\\n  \\\"hackDifficulty\\\": 112.5,\\n  \\\"minDifficulty\\\": 38,\\n  \\\"moneyAvailable\\\": 675889199,\\n  \\\"moneyMax\\\": 6758891990,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 834,\\n  \\\"serverGrowth\\\": 80\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/taiyang-digital.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"taiyang-digital\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"50.1.7.3\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Taiyang Digital\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 109.5,\\n  \\\"hackDifficulty\\\": 109.5,\\n  \\\"minDifficulty\\\": 37,\\n  \\\"moneyAvailable\\\": 420126083,\\n  \\\"moneyMax\\\": 4201260830,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 903,\\n  \\\"serverGrowth\\\": 79\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/alpha-ent.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"alpha-ent\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"78.3.0.1\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 64,\\n  \\\"organizationName\\\": \\\"Alpha Enterprises\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 79.5,\\n  \\\"hackDifficulty\\\": 79.5,\\n  \\\"minDifficulty\\\": 27,\\n  \\\"moneyAvailable\\\": 318040435,\\n  \\\"moneyMax\\\": 3180404350,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 526,\\n  \\\"serverGrowth\\\": 60\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/global-pharm.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"global-pharm\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"48.3.2.9\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 64,\\n  \\\"organizationName\\\": \\\"Global Pharmaceuticals\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 117,\\n  \\\"hackDifficulty\\\": 117,\\n  \\\"minDifficulty\\\": 39,\\n  \\\"moneyAvailable\\\": 841435836.5,\\n  \\\"moneyMax\\\": 8414358365,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 774,\\n  \\\"serverGrowth\\\": 83\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/deltaone.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"deltaone\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"48.2.9.2\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"DeltaOne\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 127.5,\\n  \\\"hackDifficulty\\\": 127.5,\\n  \\\"minDifficulty\\\": 43,\\n  \\\"moneyAvailable\\\": 719188989.5,\\n  \\\"moneyMax\\\": 7191889895,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 868,\\n  \\\"serverGrowth\\\": 65\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/defcomm.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"defcomm\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"94.2.9.6\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"DefComm\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 136.5,\\n  \\\"hackDifficulty\\\": 136.5,\\n  \\\"minDifficulty\\\": 46,\\n  \\\"moneyAvailable\\\": 424109244.5,\\n  \\\"moneyMax\\\": 4241092445,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 955,\\n  \\\"serverGrowth\\\": 62\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/nova-med.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"nova-med\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"33.3.3.8\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Nova Medical\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 118.5,\\n  \\\"hackDifficulty\\\": 118.5,\\n  \\\"minDifficulty\\\": 40,\\n  \\\"moneyAvailable\\\": 577473709,\\n  \\\"moneyMax\\\": 5774737090,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 849,\\n  \\\"serverGrowth\\\": 81\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/titan-labs.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"titan-labs\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"50.5.7.4\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\"Titan Laboratories\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 117,\\n  \\\"hackDifficulty\\\": 117,\\n  \\\"minDifficulty\\\": 39,\\n  \\\"moneyAvailable\\\": 429161831,\\n  \\\"moneyMax\\\": 4291618310,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 834,\\n  \\\"serverGrowth\\\": 74\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/fulcrumtech.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"fulcrumtech\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"61.4.4.4\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 512,\\n  \\\"organizationName\\\": \\\"Fulcrum Technologies\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 138,\\n  \\\"hackDifficulty\\\": 138,\\n  \\\"minDifficulty\\\": 46,\\n  \\\"moneyAvailable\\\": 740600989,\\n  \\\"moneyMax\\\": 7406009890,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1024,\\n  \\\"serverGrowth\\\": 87\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/kuai-gong.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"kuai-gong\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"23.9.7.3\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"KuaiGong International\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 142.5,\\n  \\\"hackDifficulty\\\": 142.5,\\n  \\\"minDifficulty\\\": 48,\\n  \\\"moneyAvailable\\\": 10995457386.5,\\n  \\\"moneyMax\\\": 109954573865,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1095,\\n  \\\"serverGrowth\\\": 92\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/univ-energy.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"univ-energy\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"43.6.8.4\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 128,\\n  \\\"organizationName\\\": \\\"Universal Energy\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 133.5,\\n  \\\"hackDifficulty\\\": 133.5,\\n  \\\"minDifficulty\\\": 45,\\n  \\\"moneyAvailable\\\": 589190298,\\n  \\\"moneyMax\\\": 5891902980,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 875,\\n  \\\"serverGrowth\\\": 81\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/phantasy.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"phantasy\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"73.0.9.8\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"Phantasy Club\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 30,\\n  \\\"hackDifficulty\\\": 30,\\n  \\\"minDifficulty\\\": 10,\\n  \\\"moneyAvailable\\\": 12000000,\\n  \\\"moneyMax\\\": 120000000,\\n  \\\"numOpenPortsRequired\\\": 2,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 100,\\n  \\\"serverGrowth\\\": 35\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/the-hub.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"the-hub\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"68.1.6.9\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"The Hub\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 66,\\n  \\\"hackDifficulty\\\": 66,\\n  \\\"minDifficulty\\\": 22,\\n  \\\"moneyAvailable\\\": 80321000,\\n  \\\"moneyMax\\\": 803210000,\\n  \\\"numOpenPortsRequired\\\": 2,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 292,\\n  \\\"serverGrowth\\\": 46\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/summit-uni.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"summit-uni\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"69.0.4.9\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"Summit University\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 67.5,\\n  \\\"hackDifficulty\\\": 67.5,\\n  \\\"minDifficulty\\\": 23,\\n  \\\"moneyAvailable\\\": 103880239.5,\\n  \\\"moneyMax\\\": 1038802395,\\n  \\\"numOpenPortsRequired\\\": 3,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 439,\\n  \\\"serverGrowth\\\": 57\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/lexo-corp.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"lexo-corp\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"26.7.7.3\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"LexoCorp\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 102,\\n  \\\"hackDifficulty\\\": 102,\\n  \\\"minDifficulty\\\": 34,\\n  \\\"moneyAvailable\\\": 374249418.5,\\n  \\\"moneyMax\\\": 3742494185,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 715,\\n  \\\"serverGrowth\\\": 58\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/aerocorp.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"aerocorp\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"43.1.6.5\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"AeroCorp\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 132,\\n  \\\"hackDifficulty\\\": 132,\\n  \\\"minDifficulty\\\": 44,\\n  \\\"moneyAvailable\\\": 560791263.5,\\n  \\\"moneyMax\\\": 5607912635,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 875,\\n  \\\"serverGrowth\\\": 58\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/unitalife.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"unitalife\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"18.5.4.4\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\"UnitaLife Group\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 118.5,\\n  \\\"hackDifficulty\\\": 118.5,\\n  \\\"minDifficulty\\\": 40,\\n  \\\"moneyAvailable\\\": 542908259,\\n  \\\"moneyMax\\\": 5429082590,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 798,\\n  \\\"serverGrowth\\\": 80\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/icarus.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"icarus\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"28.9.0.6\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Icarus Microsystems\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 142.5,\\n  \\\"hackDifficulty\\\": 142.5,\\n  \\\"minDifficulty\\\": 48,\\n  \\\"moneyAvailable\\\": 466500628,\\n  \\\"moneyMax\\\": 4665006280,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 899,\\n  \\\"serverGrowth\\\": 92\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/infocomm.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"infocomm\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"29.5.1.9\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"InfoComm\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 111,\\n  \\\"hackDifficulty\\\": 111,\\n  \\\"minDifficulty\\\": 37,\\n  \\\"moneyAvailable\\\": 443873104.5,\\n  \\\"moneyMax\\\": 4438731045,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 877,\\n  \\\"serverGrowth\\\": 42\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/solaris.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"solaris\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"71.3.6.8\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"Solaris Space Systems\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 108,\\n  \\\"hackDifficulty\\\": 108,\\n  \\\"minDifficulty\\\": 36,\\n  \\\"moneyAvailable\\\": 399665297.5,\\n  \\\"moneyMax\\\": 3996652975,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 772,\\n  \\\"serverGrowth\\\": 79\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/zb-def.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"zb-def\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"24.3.6.0\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"ZB Defense Industries\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 96,\\n  \\\"hackDifficulty\\\": 96,\\n  \\\"minDifficulty\\\": 32,\\n  \\\"moneyAvailable\\\": 457823464.5,\\n  \\\"moneyMax\\\": 4578234645,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 804,\\n  \\\"serverGrowth\\\": 71\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/microdyne.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"microdyne\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"20.7.4.8\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"Microdyne Technologies\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 100.5,\\n  \\\"hackDifficulty\\\": 100.5,\\n  \\\"minDifficulty\\\": 34,\\n  \\\"moneyAvailable\\\": 341026252.5,\\n  \\\"moneyMax\\\": 3410262525,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 853,\\n  \\\"serverGrowth\\\": 88\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/applied-energetics.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"applied-energetics\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"12.7.0.6\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Applied Energetics\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 99,\\n  \\\"hackDifficulty\\\": 99,\\n  \\\"minDifficulty\\\": 33,\\n  \\\"moneyAvailable\\\": 447739308.5,\\n  \\\"moneyMax\\\": 4477393085,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 782,\\n  \\\"serverGrowth\\\": 75\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/stormtech.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"stormtech\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"63.6.3.4\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Storm Technologies\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 132,\\n  \\\"hackDifficulty\\\": 132,\\n  \\\"minDifficulty\\\": 44,\\n  \\\"moneyAvailable\\\": 589332202,\\n  \\\"moneyMax\\\": 5893322020,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1050,\\n  \\\"serverGrowth\\\": 80\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/omnitek.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"omnitek\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"75.3.7.1\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 128,\\n  \\\"organizationName\\\": \\\"OmniTek Incorporated\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 142.5,\\n  \\\"hackDifficulty\\\": 142.5,\\n  \\\"minDifficulty\\\": 48,\\n  \\\"moneyAvailable\\\": 7809881965,\\n  \\\"moneyMax\\\": 78098819650,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 922,\\n  \\\"serverGrowth\\\": 96\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/b-and-a.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"b-and-a\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"85.5.1.3\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Bachman & Associates\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 114,\\n  \\\"hackDifficulty\\\": 114,\\n  \\\"minDifficulty\\\": 38,\\n  \\\"moneyAvailable\\\": 12840054337.5,\\n  \\\"moneyMax\\\": 128400543375,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1094,\\n  \\\"serverGrowth\\\": 65\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/powerhouse-fitness.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"powerhouse-fitness\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"59.9.6.1\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 64,\\n  \\\"organizationName\\\": \\\"Powerhouse Fitness\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 91.5,\\n  \\\"hackDifficulty\\\": 91.5,\\n  \\\"minDifficulty\\\": 31,\\n  \\\"moneyAvailable\\\": 450000000,\\n  \\\"moneyMax\\\": 4500000000,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 994,\\n  \\\"serverGrowth\\\": 57\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/megacorp.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"megacorp\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"42.7.5.2\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"MegaCorp\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 148.5,\\n  \\\"hackDifficulty\\\": 148.5,\\n  \\\"minDifficulty\\\": 50,\\n  \\\"moneyAvailable\\\": 24142481834.5,\\n  \\\"moneyMax\\\": 241424818345,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1232,\\n  \\\"serverGrowth\\\": 99\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/fulcrumassets.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"fulcrumassets\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"42.7.4.3\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Fulcrum Technologies\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 148.5,\\n  \\\"hackDifficulty\\\": 148.5,\\n  \\\"minDifficulty\\\": 50,\\n  \\\"moneyAvailable\\\": 500000,\\n  \\\"moneyMax\\\": 5000000,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1165,\\n  \\\"serverGrowth\\\": 1\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/_.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\".\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"6.8.8.3\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\".\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 0,\\n  \\\"hackDifficulty\\\": 0,\\n  \\\"minDifficulty\\\": 1,\\n  \\\"moneyAvailable\\\": 0,\\n  \\\"moneyMax\\\": 0,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 541,\\n  \\\"serverGrowth\\\": 0\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/blade.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"blade\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"34.1.2.9\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"Blade Industries\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 132,\\n  \\\"hackDifficulty\\\": 132,\\n  \\\"minDifficulty\\\": 44,\\n  \\\"moneyAvailable\\\": 7705995250.5,\\n  \\\"moneyMax\\\": 77059952505,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1165,\\n  \\\"serverGrowth\\\": 64\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/nwo.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"nwo\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"54.5.1.2\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"NWO\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 148.5,\\n  \\\"hackDifficulty\\\": 148.5,\\n  \\\"minDifficulty\\\": 50,\\n  \\\"moneyAvailable\\\": 17182849459.5,\\n  \\\"moneyMax\\\": 171828494595,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1275,\\n  \\\"serverGrowth\\\": 69\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/The-Cave.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"The-Cave\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"19.9.3.8\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Helios\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 0,\\n  \\\"hackDifficulty\\\": 0,\\n  \\\"minDifficulty\\\": 1,\\n  \\\"moneyAvailable\\\": 0,\\n  \\\"moneyMax\\\": 0,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 925,\\n  \\\"serverGrowth\\\": 0\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/w0r1d_d43m0n.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"w0r1d_d43m0n\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"4.9.0.3\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"w0r1d_d43m0n\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 0,\\n  \\\"hackDifficulty\\\": 0,\\n  \\\"minDifficulty\\\": 1,\\n  \\\"moneyAvailable\\\": 0,\\n  \\\"moneyMax\\\": 0,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 6000,\\n  \\\"serverGrowth\\\": 0\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/clarkinc.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"clarkinc\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"33.6.0.1\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Clarke Incorporated\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 78,\\n  \\\"hackDifficulty\\\": 78,\\n  \\\"minDifficulty\\\": 26,\\n  \\\"moneyAvailable\\\": 12156615053.5,\\n  \\\"moneyMax\\\": 121566150535,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1246,\\n  \\\"serverGrowth\\\": 74\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/ecorp.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"ecorp\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"86.1.4.6\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"ECorp\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 148.5,\\n  \\\"hackDifficulty\\\": 148.5,\\n  \\\"minDifficulty\\\": 50,\\n  \\\"moneyAvailable\\\": 16321932715,\\n  \\\"moneyMax\\\": 163219327150,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1344,\\n  \\\"serverGrowth\\\": 99\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/vitalife.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"vitalife\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"28.1.3.6\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"VitaLife\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 135,\\n  \\\"hackDifficulty\\\": 135,\\n  \\\"minDifficulty\\\": 45,\\n  \\\"moneyAvailable\\\": 354761705.5,\\n  \\\"moneyMax\\\": 3547617055,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 883,\\n  \\\"serverGrowth\\\": 73\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/run4theh111z.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"run4theh111z\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"18.3.3.2\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 512,\\n  \\\"organizationName\\\": \\\"The Runners\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 0,\\n  \\\"hackDifficulty\\\": 0,\\n  \\\"minDifficulty\\\": 1,\\n  \\\"moneyAvailable\\\": 0,\\n  \\\"moneyMax\\\": 0,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 540,\\n  \\\"serverGrowth\\\": 0\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/helios.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"helios\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"39.0.7.1\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 256,\\n  \\\"organizationName\\\": \\\"Helios Labs\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 139.5,\\n  \\\"hackDifficulty\\\": 139.5,\\n  \\\"minDifficulty\\\": 47,\\n  \\\"moneyAvailable\\\": 316426185,\\n  \\\"moneyMax\\\": 3164261850,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 810,\\n  \\\"serverGrowth\\\": 77\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/4sigma.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"4sigma\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"66.3.7.3\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Four Sigma\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 111,\\n  \\\"hackDifficulty\\\": 111,\\n  \\\"minDifficulty\\\": 37,\\n  \\\"moneyAvailable\\\": 9018703662.5,\\n  \\\"moneyMax\\\": 90187036625,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 967,\\n  \\\"serverGrowth\\\": 77\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/max-hardware.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"max-hardware\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"14.3.5.9\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"Max Hardware Store\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 22.5,\\n  \\\"hackDifficulty\\\": 22.5,\\n  \\\"minDifficulty\\\": 8,\\n  \\\"moneyAvailable\\\": 5000000,\\n  \\\"moneyMax\\\": 50000000,\\n  \\\"numOpenPortsRequired\\\": 1,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 80,\\n  \\\"serverGrowth\\\": 30\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/silver-helix.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"silver-helix\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"55.4.1.9\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 64,\\n  \\\"organizationName\\\": \\\"Silver Helix\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 45,\\n  \\\"hackDifficulty\\\": 45,\\n  \\\"minDifficulty\\\": 15,\\n  \\\"moneyAvailable\\\": 22500000,\\n  \\\"moneyMax\\\": 225000000,\\n  \\\"numOpenPortsRequired\\\": 2,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 150,\\n  \\\"serverGrowth\\\": 30\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/omega-net.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"omega-net\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"71.1.0.8\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"Omega Software\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 46.5,\\n  \\\"hackDifficulty\\\": 46.5,\\n  \\\"minDifficulty\\\": 16,\\n  \\\"moneyAvailable\\\": 33699675,\\n  \\\"moneyMax\\\": 336996750,\\n  \\\"numOpenPortsRequired\\\": 2,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 202,\\n  \\\"serverGrowth\\\": 37\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/computek.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"computek\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"70.4.7.1\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"CompuTek\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 97.5,\\n  \\\"hackDifficulty\\\": 97.5,\\n  \\\"minDifficulty\\\": 33,\\n  \\\"moneyAvailable\\\": 115668748,\\n  \\\"moneyMax\\\": 1156687480,\\n  \\\"numOpenPortsRequired\\\": 3,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 317,\\n  \\\"serverGrowth\\\": 50\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/netlink.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"netlink\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"72.9.4.8\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\"NetLink Technologies\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 115.5,\\n  \\\"hackDifficulty\\\": 115.5,\\n  \\\"minDifficulty\\\": 39,\\n  \\\"moneyAvailable\\\": 137500000,\\n  \\\"moneyMax\\\": 1375000000,\\n  \\\"numOpenPortsRequired\\\": 3,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 422,\\n  \\\"serverGrowth\\\": 58\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/catalyst.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"catalyst\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"32.6.9.6\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"Catalyst Ventures\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 90,\\n  \\\"hackDifficulty\\\": 90,\\n  \\\"minDifficulty\\\": 30,\\n  \\\"moneyAvailable\\\": 252958138,\\n  \\\"moneyMax\\\": 2529581380,\\n  \\\"numOpenPortsRequired\\\": 3,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 419,\\n  \\\"serverGrowth\\\": 27\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/crush-fitness.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"crush-fitness\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"50.9.3.1\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Crush Fitness\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 64.5,\\n  \\\"hackDifficulty\\\": 64.5,\\n  \\\"minDifficulty\\\": 22,\\n  \\\"moneyAvailable\\\": 24601342,\\n  \\\"moneyMax\\\": 246013420,\\n  \\\"numOpenPortsRequired\\\": 2,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 240,\\n  \\\"serverGrowth\\\": 28\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/I_I_I_I.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"I.I.I.I\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"13.9.3.0\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\"I.I.I.I\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 0,\\n  \\\"hackDifficulty\\\": 0,\\n  \\\"minDifficulty\\\": 1,\\n  \\\"moneyAvailable\\\": 0,\\n  \\\"moneyMax\\\": 0,\\n  \\\"numOpenPortsRequired\\\": 3,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 340,\\n  \\\"serverGrowth\\\": 0\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/avmnite-02h.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"avmnite-02h\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"62.5.9.2\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"NiteSec\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 0,\\n  \\\"hackDifficulty\\\": 0,\\n  \\\"minDifficulty\\\": 1,\\n  \\\"moneyAvailable\\\": 0,\\n  \\\"moneyMax\\\": 0,\\n  \\\"numOpenPortsRequired\\\": 2,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 207,\\n  \\\"serverGrowth\\\": 0\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/zb-institute.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"zb-institute\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"87.3.2.3\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\"ZB Institute of Technology\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 99,\\n  \\\"hackDifficulty\\\": 99,\\n  \\\"minDifficulty\\\": 33,\\n  \\\"moneyAvailable\\\": 540521520,\\n  \\\"moneyMax\\\": 5405215200,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 752,\\n  \\\"serverGrowth\\\": 79\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/joesguns.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"joesguns\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"22.2.1.1\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\"Joe's Guns\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 22.5,\\n  \\\"hackDifficulty\\\": 22.5,\\n  \\\"minDifficulty\\\": 8,\\n  \\\"moneyAvailable\\\": 1250000,\\n  \\\"moneyMax\\\": 12500000,\\n  \\\"numOpenPortsRequired\\\": 0,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 10,\\n  \\\"serverGrowth\\\": 20\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/hong-fang-tea.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"hong-fang-tea\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"19.7.9.2\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\"HongFang Teahouse\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 22.5,\\n  \\\"hackDifficulty\\\": 22.5,\\n  \\\"minDifficulty\\\": 8,\\n  \\\"moneyAvailable\\\": 1500000,\\n  \\\"moneyMax\\\": 15000000,\\n  \\\"numOpenPortsRequired\\\": 0,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 30,\\n  \\\"serverGrowth\\\": 20\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/CSEC.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"CSEC\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"59.3.7.5\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 8,\\n  \\\"organizationName\\\": \\\"CyberSec\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 0,\\n  \\\"hackDifficulty\\\": 0,\\n  \\\"minDifficulty\\\": 1,\\n  \\\"moneyAvailable\\\": 0,\\n  \\\"moneyMax\\\": 0,\\n  \\\"numOpenPortsRequired\\\": 1,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 51,\\n  \\\"serverGrowth\\\": 0\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/harakiri-sushi.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"harakiri-sushi\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"15.5.8.1\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\"HaraKiri Sushi Bar Network\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 22.5,\\n  \\\"hackDifficulty\\\": 22.5,\\n  \\\"minDifficulty\\\": 8,\\n  \\\"moneyAvailable\\\": 2000000,\\n  \\\"moneyMax\\\": 20000000,\\n  \\\"numOpenPortsRequired\\\": 0,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 40,\\n  \\\"serverGrowth\\\": 40\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/iron-gym.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"iron-gym\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"46.2.0.7\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"Iron Gym Network\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 45,\\n  \\\"hackDifficulty\\\": 45,\\n  \\\"minDifficulty\\\": 15,\\n  \\\"moneyAvailable\\\": 10000000,\\n  \\\"moneyMax\\\": 100000000,\\n  \\\"numOpenPortsRequired\\\": 1,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 100,\\n  \\\"serverGrowth\\\": 20\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/incorp.txt\",\"text\":\"\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/augsPurchased.txt\",\"text\":\"2\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"86.1.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"ecorp\",\"moduleSequenceNumber\":298,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":299,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":300,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":16321932715,\"moneyMax\":163219327150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1344,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"42.7.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"megacorp\",\"moduleSequenceNumber\":301,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":302,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":303,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":24142481834.5,\"moneyMax\":241424818345,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1232,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"85.5.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"b-and-a\",\"moduleSequenceNumber\":304,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":305,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":306,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":114,\"hackDifficulty\":114,\"minDifficulty\":38,\"moneyAvailable\":12840054337.5,\"moneyMax\":128400543375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1094,\"serverGrowth\":65}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"34.1.2.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/a70ae29f-c291-4c81-b806-71c1fbd6dcf4\",\"moduleSequenceNumber\":526}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":526,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/168051f8-f541-4f03-9128-ca8da14a8aee\",\"moduleSequenceNumber\":1508032}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":308,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c6d87332-2f75-486a-a38a-4e16b76e2148\",\"moduleSequenceNumber\":1509321}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":309,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":132,\"hackDifficulty\":132,\"minDifficulty\":44,\"moneyAvailable\":7705995250.5,\"moneyMax\":77059952505,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1165,\"serverGrowth\":64}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"54.5.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nwo\",\"moduleSequenceNumber\":310,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":311,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":312,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\".\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":17182849459.5,\"moneyMax\":171828494595,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1275,\"serverGrowth\":69}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"33.6.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"clarkinc\",\"moduleSequenceNumber\":313,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":314,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":315,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\".\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":12156615053.5,\"moneyMax\":121566150535,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1246,\"serverGrowth\":74}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"75.3.7.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/ff475a51-0141-4acb-8910-36ca1ddb9afa\",\"moduleSequenceNumber\":570}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":570,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/5bd35275-0dd8-467d-923f-6d60497750c6\",\"moduleSequenceNumber\":1502882}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":317,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/7e7d4130-2401-4bec-a2bb-a563b3c658c8\",\"moduleSequenceNumber\":1503397}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":318,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"stormtech\",\"b-and-a\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":142.5,\"hackDifficulty\":142.5,\"minDifficulty\":48,\"moneyAvailable\":7809881965,\"moneyMax\":78098819650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":922,\"serverGrowth\":96}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"66.3.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"4sigma\",\"moduleSequenceNumber\":319,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":320,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":321,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":111,\"hackDifficulty\":111,\"minDifficulty\":37,\"moneyAvailable\":9018703662.5,\"moneyMax\":90187036625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":967,\"serverGrowth\":77}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"23.9.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":322,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":323,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":324,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":142.5,\"hackDifficulty\":142.5,\"minDifficulty\":48,\"moneyAvailable\":10995457386.5,\"moneyMax\":109954573865,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1095,\"serverGrowth\":92}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"61.4.4.4\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":367.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0.8275957287796551],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":6.3919999999999995,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.4100000000012,\"pid\":17,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":57,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/7cb7727a-7dea-403f-b32f-6ec02ad87e5d\",\"moduleSequenceNumber\":1505972}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",0.9981634380034261],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":6.393,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.2100000000012,\"pid\":18,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":2,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/360d8511-6584-46ed-a0fe-1954e0cde2c8\",\"moduleSequenceNumber\":1501851}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",0.017167866214421013],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":6.395,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":62.41000000000035,\"pid\":19,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":3,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/360d8511-6584-46ed-a0fe-1954e0cde2c8\",\"moduleSequenceNumber\":1501851}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.2888623307656166],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.009999999999991,\"pid\":351,\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/707dd2c4-f3f5-4280-814c-9adb29fd8409\",\"moduleSequenceNumber\":575}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.7341427154056477],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.009999999999991,\"pid\":353,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":147,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cf1f0755-8156-40c0-9780-20d1ff360005\",\"moduleSequenceNumber\":530}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/707dd2c4-f3f5-4280-814c-9adb29fd8409\",\"moduleSequenceNumber\":575}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":575,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/1171feed-906d-436a-8ec3-14047d536ea1\",\"moduleSequenceNumber\":527}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":527,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cf1f0755-8156-40c0-9780-20d1ff360005\",\"moduleSequenceNumber\":530}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":530,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"titan-labs\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":138,\"hackDifficulty\":138,\"minDifficulty\":46,\"moneyAvailable\":740600989,\"moneyMax\":7406009890,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1024,\"serverGrowth\":87}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"42.7.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":328,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":329,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":330,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":500000,\"moneyMax\":5000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1165,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"63.6.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"stormtech\",\"moduleSequenceNumber\":331,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":332,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":333,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":132,\"hackDifficulty\":132,\"minDifficulty\":44,\"moneyAvailable\":589332202,\"moneyMax\":5893322020,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1050,\"serverGrowth\":80}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"94.2.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":334,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":335,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":336,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":136.5,\"hackDifficulty\":136.5,\"minDifficulty\":46,\"moneyAvailable\":424109244.5,\"moneyMax\":4241092445,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":955,\"serverGrowth\":62}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"29.5.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":337,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":338,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":339,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":111,\"hackDifficulty\":111,\"minDifficulty\":37,\"moneyAvailable\":443873104.5,\"moneyMax\":4438731045,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":877,\"serverGrowth\":42}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"39.0.7.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":252,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.9721218172397201],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":6.401,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":62.41000000000035,\"pid\":22,\"ramUsage\":1.75,\"server\":\"helios\",\"threads\":144,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/4cb649a9-435c-4842-bf39-7d8743a30a62\",\"moduleSequenceNumber\":1506486}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/faa7f26e-721e-4d97-98b1-b962fb156dfa\",\"moduleSequenceNumber\":531}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":531,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/34646d37-3ee4-43c1-9e74-cfbc144fee6e\",\"moduleSequenceNumber\":532}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":532,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/4a0ce537-0e62-4ba9-b44a-92ebcf3b0801\",\"moduleSequenceNumber\":1502622}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":342,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"run4theh111z\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":139.5,\"hackDifficulty\":139.5,\"minDifficulty\":47,\"moneyAvailable\":316426185,\"moneyMax\":3164261850,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":810,\"serverGrowth\":77}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"28.1.3.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":29.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",0.7928312917533102],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":6.403,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":152.2099999999999,\"pid\":23,\"ramUsage\":1.75,\"server\":\"vitalife\",\"threads\":17,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/7d4ac779-8838-4a55-b183-22bb61f1d74e\",\"moduleSequenceNumber\":1504948}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/4acbc0fc-db3c-4b1c-aa1c-08853d16cff2\",\"moduleSequenceNumber\":1507001}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":343,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/8c64c71c-4581-4e4b-a99b-038b54836890\",\"moduleSequenceNumber\":533}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":533,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/528ccc77-10f0-4767-ae22-17fe9e756cc6\",\"moduleSequenceNumber\":1509320}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":345,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":135,\"hackDifficulty\":135,\"minDifficulty\":45,\"moneyAvailable\":354761705.5,\"moneyMax\":3547617055,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":883,\"serverGrowth\":73}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"28.9.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"icarus\",\"moduleSequenceNumber\":346,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":347,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":348,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"unitalife\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":142.5,\"hackDifficulty\":142.5,\"minDifficulty\":48,\"moneyAvailable\":466500628,\"moneyMax\":4665006280,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":899,\"serverGrowth\":92}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"43.6.8.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":126,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.27302770244756447],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.01000000000006,\"pid\":63,\"ramUsage\":1.75,\"server\":\"univ-energy\",\"threads\":72,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/ecb5d645-5b12-406f-8268-52a82b8e5c87\",\"moduleSequenceNumber\":1502879}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/70697c73-1573-4f61-8b6b-527ac5dec302\",\"moduleSequenceNumber\":571}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":571,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/f343cd56-8565-4e94-bdb8-0bf85f3fdf7b\",\"moduleSequenceNumber\":572}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":572,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/3c9570b1-ab37-4a96-bd0c-d80eb118cd76\",\"moduleSequenceNumber\":1503398}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":351,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":133.5,\"hackDifficulty\":133.5,\"minDifficulty\":45,\"moneyAvailable\":589190298,\"moneyMax\":5891902980,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":875,\"serverGrowth\":81}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"50.5.7.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":12.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",0.5526155164314499],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":6.404,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":91.81000000000076,\"pid\":24,\"ramUsage\":1.75,\"server\":\"titan-labs\",\"threads\":7,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/ef75cbf3-086a-4530-afab-e365355da56d\",\"moduleSequenceNumber\":1507260}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/50c0240c-7986-4094-b059-1af4f58ec9d2\",\"moduleSequenceNumber\":1678939}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":352,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/df591bdb-981c-4369-9639-428071fdc361\",\"moduleSequenceNumber\":1525151}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":353,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/fcf56310-065d-4b5d-94f1-7dd204d3c35b\",\"moduleSequenceNumber\":534}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":534,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":117,\"hackDifficulty\":117,\"minDifficulty\":39,\"moneyAvailable\":429161831,\"moneyMax\":4291618310,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":834,\"serverGrowth\":74}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"20.7.4.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",0.690810964634287],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":6.404999999999999,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":62.21000000000035,\"pid\":25,\"ramUsage\":1.75,\"server\":\"microdyne\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/0fb420e7-b44c-4011-9670-f49baa832a35\",\"moduleSequenceNumber\":1507518}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/1a79ecb1-9531-441b-bc65-42758fb09dea\",\"moduleSequenceNumber\":1509322}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":355,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/dcfd0f21-d024-4e93-8a9c-4b1da70769a5\",\"moduleSequenceNumber\":535}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":535,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/0a345d88-8fc2-49ec-bfb4-569d9a2fbf77\",\"moduleSequenceNumber\":1508290}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":357,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100.5,\"hackDifficulty\":100.5,\"minDifficulty\":34,\"moneyAvailable\":341026252.5,\"moneyMax\":3410262525,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":853,\"serverGrowth\":88}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"50.1.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":358,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":359,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":360,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":109.5,\"hackDifficulty\":109.5,\"minDifficulty\":37,\"moneyAvailable\":420126083,\"moneyMax\":4201260830,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":903,\"serverGrowth\":79}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"30.6.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":361,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":362,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":363,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"rho-construction\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97.5,\"hackDifficulty\":97.5,\"minDifficulty\":33,\"moneyAvailable\":386954097.5,\"moneyMax\":3869540975,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":874,\"serverGrowth\":77}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"43.1.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":364,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":365,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":366,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"lexo-corp\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":132,\"hackDifficulty\":132,\"minDifficulty\":44,\"moneyAvailable\":560791263.5,\"moneyMax\":5607912635,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":875,\"serverGrowth\":58}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"51.0.2.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":42,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",0.3625104148542615],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":6.407,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":152.2099999999999,\"pid\":26,\"ramUsage\":1.75,\"server\":\"omnia\",\"threads\":3,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/e73e0de7-490b-4902-a286-cd50b14481bd\",\"moduleSequenceNumber\":1504171}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",0.4951538195082157],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":6.4079999999999995,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":62.21000000000035,\"pid\":27,\"ramUsage\":1.75,\"server\":\"omnia\",\"threads\":2,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/e73e0de7-490b-4902-a286-cd50b14481bd\",\"moduleSequenceNumber\":1504171}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",0.6694635052384679],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.009999999999991,\"pid\":349,\"ramUsage\":1.75,\"server\":\"omnia\",\"threads\":19,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/444be50b-b25e-4f1a-8a46-2bed8d686ade\",\"moduleSequenceNumber\":1508288}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/bfb6bfc0-43fa-4393-bb63-72fff0f4d2a0\",\"moduleSequenceNumber\":1509064}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":367,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/83e3cb9a-54f8-4067-bc59-d57043cb0013\",\"moduleSequenceNumber\":577}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":577,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/059a5d97-1854-4156-8297-98925adae1ab\",\"moduleSequenceNumber\":537}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":537,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":135,\"hackDifficulty\":135,\"minDifficulty\":45,\"moneyAvailable\":494606701.5,\"moneyMax\":4946067015,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":932,\"serverGrowth\":65}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"24.3.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":370,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":371,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":372,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"solaris\",\"microdyne\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":457823464.5,\"moneyMax\":4578234645,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":804,\"serverGrowth\":71}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"12.7.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":373,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":374,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":375,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-def\",\"stormtech\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":447739308.5,\"moneyMax\":4477393085,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":782,\"serverGrowth\":75}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"71.3.6.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/b149c9d7-dbf0-49a8-b4b7-85eb00990f68\",\"moduleSequenceNumber\":1508291}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":376,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/0bbf906c-c214-400c-8753-12274ac6455f\",\"moduleSequenceNumber\":1509323}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":377,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/e85fdb08-f555-4031-9fdc-97f045dfc549\",\"moduleSequenceNumber\":1510346}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":378,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"unitalife\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":108,\"hackDifficulty\":108,\"minDifficulty\":36,\"moneyAvailable\":399665297.5,\"moneyMax\":3996652975,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":772,\"serverGrowth\":79}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"48.2.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":379,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":380,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":381,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"global-pharm\",\"defcomm\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":127.5,\"hackDifficulty\":127.5,\"minDifficulty\":43,\"moneyAvailable\":719188989.5,\"moneyMax\":7191889895,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":868,\"serverGrowth\":65}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"48.3.2.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":61.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0.3397317659259165],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":6.409,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":92.01000000000076,\"pid\":28,\"ramUsage\":1.75,\"server\":\"global-pharm\",\"threads\":35,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/80b8e596-fffe-4848-b8ad-e28fcbe6b2dc\",\"moduleSequenceNumber\":1513158}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/61871060-ea70-4807-b2b8-611e61c3f74d\",\"moduleSequenceNumber\":1511370}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":382,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/fbc49eba-1597-4beb-bfd8-fc289eddb19a\",\"moduleSequenceNumber\":539}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":539,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/d7829244-5a4a-4389-a658-c733012ca788\",\"moduleSequenceNumber\":1503914}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":384,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"alpha-ent\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":117,\"hackDifficulty\":117,\"minDifficulty\":39,\"moneyAvailable\":841435836.5,\"moneyMax\":8414358365,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":774,\"serverGrowth\":83}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"33.3.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":385,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":386,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":387,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"defcomm\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":118.5,\"hackDifficulty\":118.5,\"minDifficulty\":40,\"moneyAvailable\":577473709,\"moneyMax\":5774737090,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":849,\"serverGrowth\":81}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"39.6.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zeus-med\",\"moduleSequenceNumber\":388,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":389,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":390,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":112.5,\"hackDifficulty\":112.5,\"minDifficulty\":38,\"moneyAvailable\":675889199,\"moneyMax\":6758891990,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":834,\"serverGrowth\":80}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"18.5.4.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/c37bba70-8dbb-44a6-b866-d2cd7200b67e\",\"moduleSequenceNumber\":1579996}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":391,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/dde9ae63-d3be-4539-9211-10c27df7d5a0\",\"moduleSequenceNumber\":1525407}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":392,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/e1423966-b655-427b-93e1-804b0359fdaf\",\"moduleSequenceNumber\":1511881}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":393,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"aerocorp\",\"icarus\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":118.5,\"hackDifficulty\":118.5,\"minDifficulty\":40,\"moneyAvailable\":542908259,\"moneyMax\":5429082590,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":798,\"serverGrowth\":80}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"26.7.7.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":29.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",0.9111967256471025],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":6.414,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.2100000000012,\"pid\":30,\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"threads\":17,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/ba60a9ad-cd53-4b8c-9a0b-3a30b60e8fb3\",\"moduleSequenceNumber\":1508292}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/cee1f77c-cd88-49c1-b5bb-ba142c2e7373\",\"moduleSequenceNumber\":1510602}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":394,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/023e872c-e903-4d1c-9968-ede7d1a1ccb8\",\"moduleSequenceNumber\":540}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":540,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/24f3c5c1-c3e0-48ac-9fc3-7da4f6528c34\",\"moduleSequenceNumber\":1509063}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":396,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"summit-uni\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":102,\"hackDifficulty\":102,\"minDifficulty\":34,\"moneyAvailable\":374249418.5,\"moneyMax\":3742494185,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":715,\"serverGrowth\":58}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"66.1.7.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/dff5d983-08cb-4e90-9cdb-ac51bd54d3ac\",\"moduleSequenceNumber\":1506484}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":397,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/532428e6-fc7f-417d-8539-e44035da8596\",\"moduleSequenceNumber\":576}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":576,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/b3df4159-f7fa-4a3b-9109-6110b76bbe46\",\"moduleSequenceNumber\":542}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"syscore\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":292996596.5,\"moneyMax\":2929965965,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":492,\"serverGrowth\":41}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"78.3.0.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",0.5954138047274455],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":6.418,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":62.41000000000035,\"pid\":33,\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"threads\":34,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/328dd339-55c2-4a67-b53d-82276dddbdaa\",\"moduleSequenceNumber\":1504170}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",0.22370908328190198],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.009999999999991,\"pid\":350,\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"threads\":2,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/d9ff6216-70c1-42e1-ab60-231584d58176\",\"moduleSequenceNumber\":1504686}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/a9cc4eea-0963-4914-8eb0-5b99f9bed23d\",\"moduleSequenceNumber\":1504684}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":400,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/bdab4d7c-db82-4954-941f-07ec01a8c37f\",\"moduleSequenceNumber\":543}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":543,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/87ce60fb-cd2d-4a78-a82c-19b221355e89\",\"moduleSequenceNumber\":578}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":578,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"syscore\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79.5,\"hackDifficulty\":79.5,\"minDifficulty\":27,\"moneyAvailable\":318040435,\"moneyMax\":3180404350,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":526,\"serverGrowth\":60}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"28.1.1.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0.937208822008883],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":6.419,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":92.01000000000076,\"pid\":34,\"ramUsage\":1.75,\"server\":\"aevum-police\",\"threads\":9,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c48f189f-cf1e-4d53-afc1-ee3fccdead5c\",\"moduleSequenceNumber\":1507259}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/1685c4f5-f69a-4a69-a4df-909a07e9470e\",\"moduleSequenceNumber\":1579997}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":403,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/fc85e569-d7e6-4514-8f54-deab5ab5f44f\",\"moduleSequenceNumber\":1529999}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":404,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/d5d0c02e-ecfc-4145-8ff6-be858642268b\",\"moduleSequenceNumber\":544}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"rothman-uni\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":112.5,\"hackDifficulty\":112.5,\"minDifficulty\":38,\"moneyAvailable\":109158561.5,\"moneyMax\":1091585615,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":418,\"serverGrowth\":33}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"5.2.4.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":8.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",0.7703515738839211],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":6.420999999999999,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":182.20999999999822,\"pid\":35,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":2,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/ef075b2d-ebe3-4798-a090-e8d514901459\",\"moduleSequenceNumber\":1502884}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",0.06323947547010356],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.01000000000006,\"pid\":68,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":3,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/2537d9be-7d06-4212-8112-43e644910b9e\",\"moduleSequenceNumber\":545}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/10bfb3b1-6587-4bae-ab15-b6a5f30178fb\",\"moduleSequenceNumber\":1502881}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":406,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/65eacdc8-25d3-447d-a643-0380f85081cf\",\"moduleSequenceNumber\":546}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":546,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/2537d9be-7d06-4212-8112-43e644910b9e\",\"moduleSequenceNumber\":545}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":545,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"johnson-ortho\",\"aevum-police\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73.5,\"hackDifficulty\":73.5,\"minDifficulty\":25,\"moneyAvailable\":89871902.5,\"moneyMax\":898719025,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":370,\"serverGrowth\":38}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"87.3.2.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/92883692-5c79-436c-a4f6-125578662d05\",\"moduleSequenceNumber\":1530768}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":409,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/2350555e-dd2b-4b55-a8ca-12b59f9add3f\",\"moduleSequenceNumber\":1554491}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":410,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/6271ebf0-260c-44d4-a63e-c66f278599de\",\"moduleSequenceNumber\":1514692}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":411,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":540521520,\"moneyMax\":5405215200,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":752,\"serverGrowth\":79}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"69.0.4.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":29.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.25864903561105645],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":6.423,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.4100000000012,\"pid\":37,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"threads\":17,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/5ef77d34-0e1c-4b09-b0ec-4749059ad2a2\",\"moduleSequenceNumber\":1509062}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/66d387c3-adb2-4c12-9895-b7b00d73047f\",\"moduleSequenceNumber\":1508293}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":412,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/a93bc899-39a4-4461-8681-455976cb10a0\",\"moduleSequenceNumber\":1515204}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":413,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/b64e8cb3-1de8-479b-a776-e155915a8732\",\"moduleSequenceNumber\":547}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":547,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67.5,\"hackDifficulty\":67.5,\"minDifficulty\":23,\"moneyAvailable\":103880239.5,\"moneyMax\":1038802395,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":439,\"serverGrowth\":57}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"34.5.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"moduleSequenceNumber\":415,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":416,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":417,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"johnson-ortho\",\"rho-construction\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":114,\"hackDifficulty\":114,\"minDifficulty\":38,\"moneyAvailable\":200493234,\"moneyMax\":2004932340,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":632,\"serverGrowth\":68}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"32.6.9.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":29.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",0.8677645492316814],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":6.427,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":92.01000000000076,\"pid\":38,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":5,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/29bc4502-0431-432c-99c5-6a145d3f5591\",\"moduleSequenceNumber\":1505973}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.34540466662894276],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":6.428,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":62.41000000000035,\"pid\":39,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":12,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/29bc4502-0431-432c-99c5-6a145d3f5591\",\"moduleSequenceNumber\":1505973}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/47861804-b2ed-4d9d-ac50-71bfe017d37e\",\"moduleSequenceNumber\":1510090}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":418,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/960366ea-957f-4215-868b-8c0ecd0c14ab\",\"moduleSequenceNumber\":1504689}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":419,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/af507803-a7a6-4c8e-967f-9019aa2d0207\",\"moduleSequenceNumber\":549}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":549,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":252958138,\"moneyMax\":2529581380,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":419,\"serverGrowth\":27}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"68.1.6.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/a029fdfd-73f7-412d-8a1f-10fcdedab7a6\",\"moduleSequenceNumber\":1511369}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":421,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/b4691767-f022-4769-b7b0-b96ca82e8453\",\"moduleSequenceNumber\":550}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":550,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c74b5dac-8331-4315-aa67-55b2b1da9d10\",\"moduleSequenceNumber\":1503910}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":423,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"phantasy\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":80321000,\"moneyMax\":803210000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":292,\"serverGrowth\":46}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":true,\"ip\":\"70.4.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"computek\",\"moduleSequenceNumber\":424,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"computek\",\"moduleSequenceNumber\":425,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"computek\",\"moduleSequenceNumber\":426,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97.5,\"hackDifficulty\":97.5,\"minDifficulty\":33,\"moneyAvailable\":115668748,\"moneyMax\":1156687480,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":317,\"serverGrowth\":50}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"72.9.4.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/9b60f8d7-8029-4b37-9c44-c4f379c4aa25\",\"moduleSequenceNumber\":1579995}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":427,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/e2efa9e0-1df2-4387-bf21-49650b51c2e2\",\"moduleSequenceNumber\":1554493}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":428,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/9d6c2133-602b-4f08-be0e-4bce8393210d\",\"moduleSequenceNumber\":1514435}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":429,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omega-net\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":115.5,\"hackDifficulty\":115.5,\"minDifficulty\":39,\"moneyAvailable\":137500000,\"moneyMax\":1375000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":422,\"serverGrowth\":58}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"64.8.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":430,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":431,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":432,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":40719787.5,\"moneyMax\":407197875,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":292,\"serverGrowth\":41}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":true,\"ip\":\"68.7.6.3\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":3.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",0.523272476726748],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":6.431,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":91.61000000000075,\"pid\":41,\"ramUsage\":1.75,\"server\":\"n00dles\",\"threads\":2,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/0a4e1dfa-a5c6-4990-9b29-c770c3400b76\",\"moduleSequenceNumber\":1502365}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":433,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/99697427-c712-4dca-8cc1-cc977256b5fb\",\"moduleSequenceNumber\":1501850}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":434,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/a207bd6c-b052-4fa4-b2ac-612a0407bf05\",\"moduleSequenceNumber\":551}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1.5,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":317268.96043614397,\"moneyMax\":350000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":true,\"ip\":\"19.0.4.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":14,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",0.6817563940666964],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.009999999999991,\"pid\":357,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":8,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/36692477-9134-43bc-9b3b-1e7bdca09d15\",\"moduleSequenceNumber\":1502883}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":436,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/ac6ffc66-9b6b-4fb8-b851-a5488bd2a82d\",\"moduleSequenceNumber\":1505715}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":437,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/6e6f0c2b-d920-4edc-a926-0a339430c343\",\"moduleSequenceNumber\":579}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":579,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":19.674,\"minDifficulty\":5,\"moneyAvailable\":3917145.033671842,\"moneyMax\":10000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":true,\"ip\":\"55.4.3.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":10.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.17296601901347208],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.01000000000006,\"pid\":64,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"threads\":6,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/707c057b-3b96-4ebf-9bf4-7e227b12f507\",\"moduleSequenceNumber\":552}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/55d9e60a-ec51-46be-a8f3-f455d220562a\",\"moduleSequenceNumber\":1845965}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":439,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/b07b308b-a629-4d59-b7fa-ecd5b945df52\",\"moduleSequenceNumber\":1508289}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":440,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/707c057b-3b96-4ebf-9bf4-7e227b12f507\",\"moduleSequenceNumber\":552}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":11500000,\"moneyMax\":11500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":true,\"ip\":\"22.2.1.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/4fa26681-8323-476f-8a9d-e88adcde3332\",\"moduleSequenceNumber\":1554490}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":442,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/c35c4fe9-d1fe-4a8a-a2bb-e08479a333c0\",\"moduleSequenceNumber\":1530767}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":443,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/6a95147e-a131-4a1f-bde5-c1586ecf4ded\",\"moduleSequenceNumber\":1514693}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":444,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":9.830000000000002,\"minDifficulty\":8,\"moneyAvailable\":5328165.617787582,\"moneyMax\":12500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"50.4.6.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/1541f082-556f-4afd-a443-eb661b9773b0\",\"moduleSequenceNumber\":1508296}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":445,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/12f24a52-43e7-4538-8482-386a5a41d5f2\",\"moduleSequenceNumber\":1501080}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":446,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/40691c5d-b860-4758-9495-aa93f7dedc07\",\"moduleSequenceNumber\":1502108}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":447,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"neo-net\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":37.5,\"hackDifficulty\":13.006000000000002,\"minDifficulty\":13,\"moneyAvailable\":1882100,\"moneyMax\":37500000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":true,\"ip\":\"57.4.6.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":14,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",0.7140431160089402],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":6.434,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":62.21000000000035,\"pid\":43,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":8,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/2089f4cd-4e64-42bd-9a69-38054551b30e\",\"moduleSequenceNumber\":1502880}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":448,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/75f328a7-bf78-4ab6-8d13-2220e8b24e6d\",\"moduleSequenceNumber\":1506742}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":449,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/b0d2b9ca-4739-4135-b313-8dbe809eb6c5\",\"moduleSequenceNumber\":553}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":553,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"n00dles\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":787016.6707697206,\"moneyMax\":13750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":true,\"ip\":\"23.8.2.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/9a5693c0-aede-49a5-9bb9-a6981acc7233\",\"moduleSequenceNumber\":1516480}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":451,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/da49bb4a-a976-411e-b119-4b995ea85b23\",\"moduleSequenceNumber\":554}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":554,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/0c29ecd4-e6b7-45da-baf1-4047896bca30\",\"moduleSequenceNumber\":1501081}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":453,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zer0\",\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":37.5,\"hackDifficulty\":13.002,\"minDifficulty\":13,\"moneyAvailable\":22287567.562181663,\"moneyMax\":25000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"55.4.1.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/5a3bae68-e27d-47ee-88f2-ad9f022de16a\",\"moduleSequenceNumber\":573}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":573,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/03667236-ea80-49e8-8c96-dc6853a45c16\",\"moduleSequenceNumber\":1507774}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":455,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/0c513c38-c9c5-4918-b01d-7cd2f9a861c7\",\"moduleSequenceNumber\":1504427}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":456,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":22500000,\"moneyMax\":225000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":true,\"ip\":\"19.7.9.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/47731c33-d7c3-4d8c-8fd7-9066a0c3f481\",\"moduleSequenceNumber\":1530766}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":457,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/1a231bbd-b53a-44a6-890c-0aa518f9e3d1\",\"moduleSequenceNumber\":1545308}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":458,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/0bfd1b43-4e4a-49a3-bd5c-dad5c468ea12\",\"moduleSequenceNumber\":1532045}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":459,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":13592398.274714706,\"moneyMax\":15000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":true,\"ip\":\"15.5.8.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",0.5906370597770478],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":6.436,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":62.21000000000035,\"pid\":45,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/565ceaf3-def8-4632-b333-fe86c7030349\",\"moduleSequenceNumber\":1547349}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/b15a094d-ac7a-4cd8-b0b9-ab6cfff1909f\",\"moduleSequenceNumber\":1545307}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":460,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/b964ae49-b6e6-46b6-b13b-4d5e7640c7b7\",\"moduleSequenceNumber\":555}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":555,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/01a460fb-7953-4c90-a302-c37ba764f89b\",\"moduleSequenceNumber\":1530510}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":462,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":8.152000000000001,\"minDifficulty\":8,\"moneyAvailable\":16991040.815289192,\"moneyMax\":20000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"73.0.9.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":29.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0.49248016945981665],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":6.436999999999999,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.4100000000012,\"pid\":46,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":12,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/0bd70d01-2809-4138-9667-542c91fcec7d\",\"moduleSequenceNumber\":1501338}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0.12197928279603043],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":6.441,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":62.21000000000035,\"pid\":47,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":5,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/0bd70d01-2809-4138-9667-542c91fcec7d\",\"moduleSequenceNumber\":1501338}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/08f97b2a-c80b-4a4e-9c3d-118a564b303c\",\"moduleSequenceNumber\":1527193}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":463,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/f6eb3d5d-3299-4771-9ad2-d90c40947cc9\",\"moduleSequenceNumber\":1510603}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":464,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/477db525-95a8-4216-b98e-98c37f7077b7\",\"moduleSequenceNumber\":557}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":557,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zer0\",\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":10.002,\"minDifficulty\":10,\"moneyAvailable\":103643511.74656305,\"moneyMax\":120000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":true,\"ip\":\"14.3.5.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0.08620661144252395],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":6.442,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":62.21000000000035,\"pid\":48,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/b30d87c5-9399-4cfb-a233-6827cf9c8b36\",\"moduleSequenceNumber\":1507000}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/6aed3270-4fdf-46b7-a9ff-db2ee82f95fe\",\"moduleSequenceNumber\":1504947}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":466,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/b5529dce-a156-4a3a-9a1f-3510724bf5f3\",\"moduleSequenceNumber\":558}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":558,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/5db67c17-0b53-4b7c-bc79-c9890cb4a385\",\"moduleSequenceNumber\":1508031}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":468,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"silver-helix\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":8.04,\"minDifficulty\":8,\"moneyAvailable\":43928743.788415365,\"moneyMax\":50000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"71.1.0.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",0.7872276994133132],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":6.443,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":91.81000000000076,\"pid\":49,\"ramUsage\":1.75,\"server\":\"omega-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/69968b38-8771-40ce-aa7f-602b681204d5\",\"moduleSequenceNumber\":1507516}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/a26a739a-09cb-44ef-a2d1-ac9010708c11\",\"moduleSequenceNumber\":1506999}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":469,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/270e7424-e533-405d-a318-775d796bb75a\",\"moduleSequenceNumber\":559}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":559,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/2814a3e2-7284-4277-ad4d-c4aac700e1a9\",\"moduleSequenceNumber\":1504690}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":471,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"max-hardware\",\"computek\",\"netlink\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46.5,\"hackDifficulty\":46.5,\"minDifficulty\":16,\"moneyAvailable\":33699675,\"moneyMax\":336996750,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":202,\"serverGrowth\":37}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"50.9.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":472,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":473,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":474,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omega-net\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64.5,\"hackDifficulty\":64.5,\"minDifficulty\":22,\"moneyAvailable\":24601342,\"moneyMax\":246013420,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":240,\"serverGrowth\":28}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"46.2.0.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/9fa03c25-e16c-461f-9784-4058c17fb4de\",\"moduleSequenceNumber\":1508030}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":475,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/0ed463ee-e088-4f38-9b2b-09f4d2e172f0\",\"moduleSequenceNumber\":1513924}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":476,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/d25d05ed-eed6-4881-8403-cf7febb823f1\",\"moduleSequenceNumber\":561}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":561,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":45,\"hackDifficulty\":15.034,\"minDifficulty\":15,\"moneyAvailable\":88129444.76537894,\"moneyMax\":100000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"69.4.2.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":29.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",0.3299446347958108],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":6.447,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":91.61000000000075,\"pid\":52,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"threads\":17,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/4cc85e06-06e8-4ef0-8bd0-412ae21c9a65\",\"moduleSequenceNumber\":1501337}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/02a852bf-dbb5-421e-b6d9-b1ebbbb39212\",\"moduleSequenceNumber\":1508295}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":478,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/96238aef-6156-431c-84dd-1a148dd1cfe0\",\"moduleSequenceNumber\":562}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":562,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/da1eef19-2f70-4d82-b9e8-a05bbabba5ef\",\"moduleSequenceNumber\":1503396}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":480,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79.5,\"hackDifficulty\":79.5,\"minDifficulty\":27,\"moneyAvailable\":125000000,\"moneyMax\":1250000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":481,\"serverGrowth\":45}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"59.9.6.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/e8fd04dc-9f00-4290-bbb1-ae7e7a7bc83c\",\"moduleSequenceNumber\":1505716}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":481,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/4da19e57-8ef1-44a9-bf25-be08aa94becb\",\"moduleSequenceNumber\":574}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":574,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/7bfadd00-ccb7-435c-a436-0675470d07fb\",\"moduleSequenceNumber\":1504428}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":483,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnitek\",\"megacorp\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91.5,\"hackDifficulty\":91.5,\"minDifficulty\":31,\"moneyAvailable\":450000000,\"moneyMax\":4500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":994,\"serverGrowth\":57}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"2.9.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":484,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":485,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":486,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67.5,\"hackDifficulty\":67.5,\"minDifficulty\":23,\"moneyAvailable\":225000000,\"moneyMax\":2250000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":734,\"serverGrowth\":44}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"18.3.3.2\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":330.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.8401250335232373],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":6.4479999999999995,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":92.41000000000076,\"pid\":53,\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"threads\":149,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/ed6e8b58-96a4-45e5-aede-f4bb6162838a\",\"moduleSequenceNumber\":1502366}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",0.8017384491078097],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":6.45,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":92.01000000000076,\"pid\":54,\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"threads\":40,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/50e46696-ae91-4d2f-a18c-ef6b2a46adc9\",\"moduleSequenceNumber\":1503654}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/e3ccf001-d45e-4372-b41a-db762f3d7808\",\"moduleSequenceNumber\":1502107}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":487,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/84bb9175-9550-4488-8b54-83a2e0c1b536\",\"moduleSequenceNumber\":564}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":564,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/7c9aa108-5eef-4eb6-a2f9-f6250eeecc45\",\"moduleSequenceNumber\":565}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":565,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-def\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":540,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"13.9.3.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/b45b28cd-be3c-4ec6-a756-6b8628adc005\",\"moduleSequenceNumber\":1554492}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":490,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/023262b9-2e14-4106-8c23-0ac963eaafa6\",\"moduleSequenceNumber\":1530769}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":491,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/6c705e2c-2b4a-4573-b035-11f7f0434575\",\"moduleSequenceNumber\":1514436}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":492,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":340,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"62.5.9.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/21ce7204-deea-4736-b3c4-f5367ec3dee9\",\"moduleSequenceNumber\":567}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":567,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/185e95af-d9d5-44ce-9ffa-65d874624d42\",\"moduleSequenceNumber\":1509834}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":494,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/e6e12b0a-399d-4928-bc31-3aee943de758\",\"moduleSequenceNumber\":1504946}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":495,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omega-net\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":207,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"6.8.8.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/36be04f7-81f4-44f0-84a5-c15583671af7\",\"moduleSequenceNumber\":1614168}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":496,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/4eb7255a-5acb-4d8c-aed7-5570574c3336\",\"moduleSequenceNumber\":1541226}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":497,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/373c140f-d846-40db-b9ab-a7ede72185a6\",\"moduleSequenceNumber\":1512392}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":498,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"stormtech\",\"blade\",\"nwo\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":541,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"59.3.7.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",0.2429865964393665],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":6.457,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":62.41000000000035,\"pid\":58,\"ramUsage\":1.75,\"server\":\"CSEC\",\"threads\":4,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/f0919c1e-56e3-4c3d-9953-148d114676a3\",\"moduleSequenceNumber\":1503913}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":499,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/e2f637bf-5cbe-4ccf-9c43-6e39f9868e02\",\"moduleSequenceNumber\":1505714}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":500,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/87963941-d266-4e9c-babe-b0f8afbd6ecb\",\"moduleSequenceNumber\":568}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":568,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":51,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"19.9.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"The-Cave\",\"moduleSequenceNumber\":502,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":503,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":504,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nwo\",\"w0r1d_d43m0n\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":true,\"ip\":\"4.9.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"w0r1d_d43m0n\",\"moduleSequenceNumber\":505,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"w0r1d_d43m0n\",\"moduleSequenceNumber\":506,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"w0r1d_d43m0n\",\"moduleSequenceNumber\":507,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":6000,\"serverGrowth\":0}},\"hacknet-node-0\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-0\",\"httpPortOpen\":false,\"ip\":\"30.8.6.7\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hacknet-node-0\",\"moduleSequenceNumber\":508,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hacknet-node-0\",\"moduleSequenceNumber\":509,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hacknet-node-0\",\"moduleSequenceNumber\":510,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":1,\"hashCapacity\":64,\"hashRate\":0.00029940167968688244,\"level\":1,\"onlineTimeSeconds\":41538.79999995628,\"totalHashesGenerated\":12.436786492223677}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"8.8.2.5\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":201674.83013289532,\"favor\":0.154,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":139.0783,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":202188.5542634358,\"favor\":0.154,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":148.9597,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":3295514.701367365,\"favor\":158.4918,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":201804.89755985487,\"favor\":0.154,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":125.0595,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":124.7934,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":138.1712,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":250498.00796628598,\"favor\":0.154,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.154,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.154,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.154,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.154,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.154,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.154,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.154,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.154,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.154,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.154,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.154,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.154,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.154,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.154,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.154,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.154,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.154,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.154,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.154,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.154,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.154,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":27.1896,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.154,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.154,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.154,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.154,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.154,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.154,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":302.6226,\"isBanned\":false,\"isMember\":true,\"name\":\"Daedalus\",\"playerReputation\":82178923.21526352}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"ECorp\",\"playerReputation\":6967382.64809503}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":225.6277,\"isBanned\":false,\"isMember\":true,\"name\":\"MegaCorp\",\"playerReputation\":77505404.99280205}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Bachman & Associates\",\"playerReputation\":14124107.76488732}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":222.7731,\"isBanned\":false,\"isMember\":true,\"name\":\"Blade Industries\",\"playerReputation\":76893240.9094949}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":217.1525,\"isBanned\":false,\"isMember\":true,\"name\":\"NWO\",\"playerReputation\":75500840.32502298}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Clarke Incorporated\",\"playerReputation\":13019470.824736174}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":221.4179,\"isBanned\":false,\"isMember\":true,\"name\":\"OmniTek Incorporated\",\"playerReputation\":76383411.73197253}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":220.2043,\"isBanned\":false,\"isMember\":true,\"name\":\"Four Sigma\",\"playerReputation\":54610890.27095407}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":222.8484,\"isBanned\":false,\"isMember\":true,\"name\":\"KuaiGong International\",\"playerReputation\":47562724.22210298}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":304.9096,\"isBanned\":false,\"isMember\":true,\"name\":\"Aevum\",\"playerReputation\":41060471.979990974}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":299.9998,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":36246101.48938752}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":250.1961,\"isBanned\":false,\"isMember\":true,\"name\":\"Speakers for the Dead\",\"playerReputation\":18875237.65084337}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":21.9433,\"isBanned\":false,\"isMember\":true,\"name\":\"The Syndicate\",\"playerReputation\":3555.683243098889}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":242.0847,\"isBanned\":false,\"isMember\":true,\"name\":\"Tetrads\",\"playerReputation\":18141602.84443217}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":416.3723,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":191776504.82902578}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":255.0312,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":18906362.878397085}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":228.957,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":17437376.247990727}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":209.4072,\"isBanned\":false,\"isMember\":true,\"name\":\"Bladeburners\",\"playerReputation\":8834948.005014086}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":10,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":30,\"CodeInstructionRunTime\":20,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":true,\"EnableBashHotkeys\":true,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":180,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":200,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":true,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#FFF\",\"primary\":\"#F8F8F2\",\"primarydark\":\"#FAFAEB\",\"successlight\":\"#ADE146\",\"success\":\"#A6E22E\",\"successdark\":\"#98E104\",\"errorlight\":\"#FF69A0\",\"error\":\"#F92672\",\"errordark\":\"#D10F56\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#E1D992\",\"warning\":\"#E6DB74\",\"warningdark\":\"#EDDD54\",\"infolight\":\"#92E1F1\",\"info\":\"#66D9EF\",\"infodark\":\"#31CDED\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#F92672\",\"money\":\"#E6DB74\",\"hack\":\"#A6E22E\",\"combat\":\"#75715E\",\"cha\":\"#AE81FF\",\"int\":\"#66D9EF\",\"rep\":\"#E69F66\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#272822\",\"backgroundsecondary\":\"#1B1C18\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":\"1.25\",\"fontFamily\":\"monospace\"},\"overview\":{\"x\":-447,\"y\":6,\"opened\":true},\"EditorTheme\":{\"base\":\"vs-dark\",\"inherit\":true,\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}}}}","VersionSave":"15","AllGangsSave":"{\"Slum Snakes\":{\"power\":1587.9181298002418,\"territory\":1},\"Tetrads\":{\"power\":2901.302565984262,\"territory\":0},\"The Syndicate\":{\"power\":2879.063860607534,\"territory\":0},\"The Dark Army\":{\"power\":2836.5421415480077,\"territory\":0},\"Speakers for the Dead\":{\"power\":1501.068223329953,\"territory\":0},\"NiteSec\":{\"power\":2818.076864236417,\"territory\":0},\"The Black Hand\":{\"power\":1291.1048667578582,\"territory\":0}}","LastExportBonus":"1652521370758","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}