{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":278,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":41,\"agility\":41,\"charisma\":1,\"intelligence\":0,\"hacking_chance_mult\":1.1716,\"hacking_speed_mult\":1.1716,\"hacking_money_mult\":1.1716,\"hacking_grow_mult\":1.1716,\"hacking_exp\":874565.8241999443,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":1019.292,\"agility_exp\":1019.292,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1.1716,\"strength_mult\":1.1716,\"defense_mult\":1.1716,\"dexterity_mult\":1.1716,\"agility_mult\":1.1716,\"charisma_mult\":1.1716,\"hacking_exp_mult\":1.1716,\"strength_exp_mult\":1.1716,\"defense_exp_mult\":1.1716,\"dexterity_exp_mult\":1.1716,\"agility_exp_mult\":1.1716,\"charisma_exp_mult\":1.1716,\"company_rep_mult\":1.34734,\"faction_rep_mult\":1.34734,\"money\":1985307514.3707025,\"city\":\"Ishima\",\"location\":\"Omega Software\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\",\"pserv-24\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":21,\"moneyGainRatePerSecond\":36.9054,\"onlineTimeSeconds\":65462.599999993625,\"ram\":1,\"totalMoneyGenerated\":2415223.992840254,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":21,\"moneyGainRatePerSecond\":36.9054,\"onlineTimeSeconds\":65459.19999999362,\"ram\":1,\"totalMoneyGenerated\":2415193.4140802543,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":21,\"moneyGainRatePerSecond\":36.9054,\"onlineTimeSeconds\":65457.39999999362,\"ram\":1,\"totalMoneyGenerated\":2415165.647160254,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":21,\"moneyGainRatePerSecond\":36.9054,\"onlineTimeSeconds\":65454.99999999362,\"ram\":1,\"totalMoneyGenerated\":2415112.222200254,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":21,\"moneyGainRatePerSecond\":36.9054,\"onlineTimeSeconds\":65454.39999999362,\"ram\":1,\"totalMoneyGenerated\":2415111.1677602543,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":21,\"moneyGainRatePerSecond\":36.9054,\"onlineTimeSeconds\":65453.99999999362,\"ram\":1,\"totalMoneyGenerated\":2415110.464800254,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":21,\"moneyGainRatePerSecond\":36.9054,\"onlineTimeSeconds\":65453.39999999362,\"ram\":1,\"totalMoneyGenerated\":2415049.658760254,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":21,\"moneyGainRatePerSecond\":36.9054,\"onlineTimeSeconds\":65452.99999999362,\"ram\":1,\"totalMoneyGenerated\":2415020.8374002543,\"name\":\"hacknet-node-7\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Tian Di Hui\",\"CyberSec\",\"Netburners\",\"Ishima\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":2,\"name\":\"NeuroFlux Governor\"},{\"level\":3,\"name\":\"NeuroFlux Governor\"},{\"level\":4,\"name\":\"NeuroFlux Governor\"},{\"level\":5,\"name\":\"NeuroFlux Governor\"}],\"augmentations\":[{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"NeuroFlux Governor\"}],\"sourceFiles\":[{\"lvl\":1,\"n\":1}],\"numPeopleKilled\":0,\"karma\":-5.5,\"crime_money_mult\":1.1716,\"crime_success_mult\":1.1716,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"CyberSec\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.17573999999999998,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0.3841646358974359,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":160.09913999999978,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":349.9739833025629,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":50,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":182200,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.2887600000000001,\"hacknet_node_money_mult\":1.1716,\"hacknet_node_purchase_cost_mult\":0.8316,\"hacknet_node_ram_cost_mult\":0.8316,\"hacknet_node_core_cost_mult\":0.8316,\"hacknet_node_level_cost_mult\":0.8316,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1642607803405,\"totalPlaytime\":1278263400,\"playtimeSinceLastAug\":66836400,\"playtimeSinceLastBitnode\":214487600,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":4217760,\"gang\":0,\"hacking\":10501787478,\"hacknet\":19320987.40501688,\"hacknet_expenses\":-236273.7170223103,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":1984307514.3707025,\"work\":0,\"servers\":-4687203741.804813,\"other\":-6900000,\"augmentations\":-3846678695.518134}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":4217760,\"gang\":0,\"hacking\":11418185555,\"hacknet\":52090772.7231978,\"hacknet_expenses\":-1266207.672957139,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":1986301192.7327363,\"work\":0,\"servers\":-4731203741.804813,\"other\":-8100000,\"augmentations\":-4747622945.518134}},\"scriptProdSinceLastAug\":10501787478,\"exploits\":[],\"achievements\":[{\"ID\":\"CYBERSEC\",\"unlockedOn\":1641831349068},{\"ID\":\"NITESEC\",\"unlockedOn\":1641831349080},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1641831349084},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1641831349088},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1641831349091},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1641831349095},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1641831349099},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1641831349103},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1641831349108},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1641831349113},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1641831349117},{\"ID\":\"NS2\",\"unlockedOn\":1641831349120},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1641831349122},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1641831349125},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1641831349128},{\"ID\":\"TOR\",\"unlockedOn\":1641831349131},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1641911770908},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1641911770911},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1641911890917},{\"ID\":\"DONATION\",\"unlockedOn\":1641919651447},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1641924992259},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1642040620386},{\"ID\":\"TRAVEL\",\"unlockedOn\":1642040800461},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1642088780181},{\"ID\":\"4S\",\"unlockedOn\":1642220579557},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1642295956244},{\"ID\":\"SF1.1\",\"unlockedOn\":1642393317233}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"70.4.9.8\",\"isConnectedTo\":true,\"maxRam\":2048,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\"],\"ramUsed\":12.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"purchase-servers.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":65533.20999999364,\"pid\":88,\"ramUsage\":12.6,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"config.js\",\"url\":\"blob:https://danielyxie.github.io/dd48428e-6547-4cd6-8b5a-6363be1b1cde\"},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/555a2bd2-215e-4a3f-a56e-f769453865d6\"},{\"filename\":\"purchase-servers.js\",\"url\":\"blob:https://danielyxie.github.io/f7cf62b9-8727-4e53-9c44-d2b815b8c50e\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let paramLength = ns.args[0];\\r\\n    let targetServers = [];\\r\\n    for (var i = 0; i < paramLength / 3; i++) {\\r\\n        targetServers.push({\\r\\n            target: ns.args[i * 3 + 1],\\r\\n            moneyThresh: ns.args[i * 3 + 2],\\r\\n            securityThresh: ns.args[i * 3 + 3]\\r\\n        });\\r\\n    }\\r\\n    ns.print(JSON.stringify(targetServers));\\r\\n    // pick a random server to start on\\r\\n    i = Math.floor(Math.random() * (targetServers.length))\\r\\n    while (true) {\\r\\n        let server = targetServers[i];\\r\\n        ns.print(JSON.stringify(server));\\r\\n        // iterate through the servers\\r\\n        i = i++ % targetServers.length;\\r\\n        const target = server.target;\\r\\n        const moneyThresh = server.moneyThresh;\\r\\n        const securityThresh = server.securityThresh;\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        } else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}],\"ramUsage\":2.2,\"server\":\"home\",\"_hash\":\"c19c706a9b823af7ee4e4830336d2e15969f12690a27821ac003d86bd8a13c76\",\"moduleSequenceNumber\":6292,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var serverlist = [\\r\\n\\t\\\"n00dles\\\"\\r\\n\\t, \\\"CSEC\\\"\\r\\n\\t, \\\"phantasy\\\"\\r\\n\\t, \\\"comptek\\\"\\r\\n\\t, \\\"syscore\\\"\\r\\n\\t, \\\"aevum-police\\\"\\r\\n\\t, \\\"aerocorp\\\"\\r\\n\\t, \\\"netlink\\\"\\r\\n\\t, \\\"omega-net\\\"\\r\\n\\t, \\\"johnson-ortho\\\"\\r\\n\\t, \\\"rothman-uni\\\"\\r\\n\\t, \\\"zb-institute\\\"\\r\\n\\t, \\\"crush-fitness\\\"\\r\\n\\t, \\\"catalyst\\\"\\r\\n\\t, \\\"millenium-fitness\\\"\\r\\n\\t, \\\"snap-fitness\\\"\\r\\n\\t, \\\"unitalife\\\"\\r\\n\\t, \\\"foodnstuff\\\"\\r\\n\\t, \\\"sigma-cosmetics\\\"\\r\\n\\t, \\\"joesguns\\\"\\r\\n\\t, \\\"zer0\\\"\\r\\n\\t, \\\"silver-helix\\\"\\r\\n\\t, \\\"the-hub\\\"\\r\\n\\t, \\\"summit-uni\\\"\\r\\n\\t, \\\"lexo-corp\\\"\\r\\n\\t, \\\"galactic-cyber\\\"\\r\\n\\t, \\\"rho-construction\\\"\\r\\n\\t, \\\"alpha-ent\\\"\\r\\n\\t, \\\"global-pharm\\\"\\r\\n\\t, \\\"omnia\\\"\\r\\n\\t, \\\"icarus\\\"\\r\\n\\t, \\\"univ-energy\\\"\\r\\n\\t, \\\"taiyang-digital\\\"\\r\\n\\t, \\\"solaris\\\"\\r\\n\\t, \\\"zb-def\\\"\\r\\n\\t, \\\"deltaone\\\"\\r\\n\\t, \\\"defcomm\\\"\\r\\n\\t, \\\"zeus-med\\\"\\r\\n\\t, \\\"infocomm\\\"\\r\\n\\t, \\\"nova-med\\\"\\r\\n\\t, \\\"avmnite-02h\\\"\\r\\n\\t, \\\"I.I.I.I\\\"\\r\\n\\t, \\\"nectar-net\\\"\\r\\n\\t, \\\"hong-fang-tea\\\"\\r\\n\\t, \\\"harakiri-sushi\\\"\\r\\n\\t, \\\"iron-gym\\\"\\r\\n\\t, \\\"max-hardware\\\"\\r\\n\\t, \\\"neo-net\\\"\\r\\n];\\r\\nvar pservs = getPurchasedServers();\\r\\nfor (var i = 0; i < pservs.length; i++) {\\r\\n\\tserverlist.push(pservs[i]);\\r\\n}\\r\\nvar length = serverlist.length;\\r\\ntprint(\\\"number of servers \\\" + length);\\r\\nvar script = \\\"early-hack-template.script\\\";\\r\\nvar scriptRam = getScriptRam(script, \\\"home\\\");\\r\\nfor (var i = 0; i < length; i++) {\\r\\n\\tvar host = serverlist[i];\\r\\n\\tvar ports = getServerNumPortsRequired(host);\\r\\n\\tif (host.indexOf(\\\"pserv\\\") < 0 && ports > 5) {\\r\\n\\t\\ttprint(\\\"skip host \\\" + host);\\r\\n\\t\\tcontinue;\\r\\n\\t}\\r\\n\\tscp(script, host);\\r\\n\\ttprint(\\\"copied to \\\" + host);\\r\\n\\tif (!hasRootAccess(host)) {\\r\\n\\t\\ttprint(\\\"no root to \\\" + host);\\r\\n\\t\\tbrutessh(host);\\r\\n\\t\\thttpworm(host);\\r\\n\\t\\tftpcrack(host);\\r\\n\\t\\trelaysmtp(host);\\r\\n\\t\\tsqlinject(host);\\r\\n\\t\\tnuke(host);\\r\\n\\t\\ttprint(\\\"nuked \\\" + host);\\r\\n\\t}\\r\\n\\tscriptKill(script, host);\\r\\n\\tvar hostram = getServerMaxRam(host);\\r\\n\\tvar threads = hostram / scriptRam;\\r\\n\\tif (threads >= 1) {\\r\\n\\t\\texec(script, host, threads);\\r\\n\\t\\ttprint(\\\"exec on \\\" + host + \\\" with threads \\\" + threads);\\r\\n\\t}\\r\\n}\",\"filename\":\"run-all.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":7.35,\"server\":\"home\",\"_hash\":\"c8b12451f941973c1b9bfab8130d57838323c96a5fa016a261be140bc2cc4fa0\",\"moduleSequenceNumber\":6214,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n\\tvar length = serverlist.length;\\r\\n\\tfor (var i = 0; i < length; i++) {\\r\\n\\t\\tvar host = serverlist[i];\\r\\n\\t\\tawait ns.installBackdoor(host);\\r\\n\\t\\tns.tprint(\\\"Backdoored \\\" + host);\\r\\n\\t}\\r\\n}\",\"filename\":\"backdoorEverything.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":33.6,\"server\":\"home\",\"_hash\":\"d24e9230111f6cda67f76b417fc1db64c7f117067a52229f870e50f5d07a1895\",\"moduleSequenceNumber\":6215,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { targets } from 'config.js';\\nimport { list_servers } from 'opened_servers.js';\\nimport { ensureRootAccess } from 'utils.js';\\nlet ns;\\nconst script = \\\"early-hack.js\\\";\\nlet scriptRam;\\nlet execParams;\\n/** @param {NS} pns **/\\nexport async function main(pns) {\\n\\tns = pns;\\n\\tscriptRam = await ns.getScriptRam(script, \\\"home\\\");\\n\\texecParams = [];\\n\\tfor (var i = 0; i < targets().length; i++) {\\n\\t\\texecParams.push(targets()[i]);\\n\\t\\texecParams.push(ns.getServerMaxMoney(targets()[i]) * 0.75);\\n\\t\\texecParams.push(ns.getServerMinSecurityLevel(targets()[i]) + 5)\\n\\t}\\n\\texecParams.unshift(execParams.length);\\n\\tconst openedServers = (await list_servers(ns)).filter(s => ns.hasRootAccess(s)).concat(['home']);\\n\\tawait everything(openedServers);\\n}\\nasync function everything(serverList) {\\n\\tfor (var i = 0; i < serverList.length; i++) {\\n\\t\\tvar host = serverList[i];\\n\\t\\tif (!await ns.serverExists(host)) {\\n\\t\\t\\tns.tprint(`Server '${host}' does not exist. Aborting.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (await ensureRootAccess(ns, host)) {\\n\\t\\t\\tawait restartScript(host);\\n\\t\\t}\\n\\t\\tawait ns.sleep(10);\\n\\t}\\n}\\nasync function restartScript(host) {\\n\\tawait ns.scp(script, host);\\n\\tawait ns.scriptKill(script, host);\\n\\tvar threads = Math.floor((await ns.getServerMaxRam(host) - await ns.getServerUsedRam(host)) / scriptRam);\\n\\tif (threads >= 1) {\\n\\t\\tawait ns.exec(script, host, threads, ...execParams);\\n\\t\\tns.tprint(\\\"exec on \\\" + host + \\\" with threads \\\" + threads);\\n\\t}\\n}\",\"filename\":\"run-all.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"config.js\",\"url\":\"blob:https://danielyxie.github.io/dd48428e-6547-4cd6-8b5a-6363be1b1cde\"},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/555a2bd2-215e-4a3f-a56e-f769453865d6\"},{\"filename\":\"config.js\",\"url\":\"blob:https://danielyxie.github.io/dd48428e-6547-4cd6-8b5a-6363be1b1cde\"},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/555a2bd2-215e-4a3f-a56e-f769453865d6\"},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/f1390be8-8af7-47fb-81e0-16ded49a3bae\"},{\"filename\":\"config.js\",\"url\":\"blob:https://danielyxie.github.io/477482c7-3343-4ead-a6c2-f0021f11867e\"},{\"filename\":\"run-all.js\",\"url\":\"blob:https://danielyxie.github.io/118f6c49-db2b-4897-b3bc-480ec6b0f2a5\"}],\"ramUsage\":5.75,\"server\":\"home\",\"_hash\":\"8cc2a11d5550fc8d05a389878871f6fda05347eab8654568f1eb4a0e86c9e66f\",\"moduleSequenceNumber\":8239,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { createExecParams } from 'utils.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    // const ram = 32768;\\n    const ram = ns.getServer('home').maxRam;\\n    // const maxRam = 1048576;\\n    let i = ns.getPurchasedServers().length;\\n    while (i < ns.getPurchasedServerLimit()) {\\n        // Check if we have enough money to purchase a server\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n            var hostname = ns.purchaseServer(\\\"pserv-\\\" + i, ram);\\n            ns.tprint('private server purchased, hostname[' + hostname + ']');\\n            ++i;\\n        }\\n        await ns.sleep(3000);\\n    }\\n    while (!ns.fileExists('Formulas.exe', 'home')) {\\n        ns.tprint('MISSING Formulas.exe');\\n        await ns.sleep(5000);\\n    }\\n    const maxHackNetUpgradeCost_preAug = 331323997;\\n    // Start the hacknet node purchases\\n    while (ns.hacknet.getPurchaseNodeCost() < 100000000) {\\n\\n        let nodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\n        // Purchase the nodes when we have enough money to do so\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") > (nodeCost + maxHackNetUpgradeCost_preAug)) {\\n\\n            var purchaseIndex = ns.hacknet.purchaseNode();\\n            ns.hacknet.upgradeLevel(purchaseIndex, 199);\\n            ns.hacknet.upgradeRam(purchaseIndex, 6);\\n            ns.hacknet.upgradeCore(purchaseIndex, 15);\\n\\n            ns.tprint('Hacknet node purchased, index[' + purchaseIndex + ']');\\n        }\\n\\n        // wait a few seconds before we have them all\\n        await ns.sleep('5000');\\n    }\\n\\n}\",\"filename\":\"purchase-servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"config.js\",\"url\":\"blob:https://danielyxie.github.io/dd48428e-6547-4cd6-8b5a-6363be1b1cde\"},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/555a2bd2-215e-4a3f-a56e-f769453865d6\"},{\"filename\":\"purchase-servers.js\",\"url\":\"blob:https://danielyxie.github.io/0223b4a7-0fe3-49f8-90d4-2173fbeb604e\"}],\"ramUsage\":12.6,\"server\":\"home\",\"_hash\":\"5ac54345c95afb8ac8a12e97c4997a6da77e4326efa6656253962a94857e0a5f\",\"moduleSequenceNumber\":7363,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// export function targets() {\\r\\n// \\treturn [\\\"n00dles\\\", \\\"foodnstuff\\\", \\\"joesguns\\\"];\\r\\n// }\\r\\n\\t\\t// , \\\"johnson-ortho\\\"\\r\\n\\t\\t// , \\\"the-hub\\\"\\r\\nexport function targets() {\\r\\n\\treturn [\\\"silver-helix\\\"\\r\\n\\t\\t, \\\"crush-fitness\\\"\\r\\n\\t\\t, \\\"comptek\\\"\\r\\n];\\r\\n}\",\"filename\":\"config.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"c0a10f69acaba0510c4e9b1f33ba5b7c509f8a4b5c280a25da62574375d8cbc8\",\"moduleSequenceNumber\":8238,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst args = ns.flags([[\\\"help\\\", false]]);\\n\\tconst server = ns.args[0];\\n\\tif (args.help || !server) {\\n\\t\\tns.tprint(\\\"This script does a more detailed analysis of a server.\\\");\\n\\t\\tns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\n\\t\\tns.tprint(\\\"Example:\\\");\\n\\t\\tns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n\\t\\treturn;\\n\\t}\\n\\tconst maxRam = ns.getServerMaxRam(server);\\n\\tconst usedRam = ns.getServerUsedRam(server);\\n\\tconst money = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst minSec = ns.getServerMinSecurityLevel(server);\\n\\tconst sec = ns.getServerSecurityLevel(server);\\n\\tns.tprint(`\\n${server}:\\n    RAM        : ${usedRam} / ${maxRam} (${usedRam / maxRam * 100}%)\\n    $          : ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${(money / maxMoney * 100).toFixed(2)}%)\\n    security   : ${minSec.toFixed(2)} / ${sec.toFixed(2)}\\n    growth     : ${ns.getServerGrowth(server)}\\n    hack time  : ${ns.tFormat(ns.getHackTime(server))}\\n    grow time  : ${ns.tFormat(ns.getGrowTime(server))}\\n    weaken time: ${ns.tFormat(ns.getWeakenTime(server))}\\n    grow x2    : ${(ns.growthAnalyze(server, 2)).toFixed(2)} threads\\n    grow x3    : ${(ns.growthAnalyze(server, 3)).toFixed(2)} threads\\n    grow x4    : ${(ns.growthAnalyze(server, 4)).toFixed(2)} threads\\n    hack 10%   : ${(.10 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 25%   : ${(.25 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 50%   : ${(.50 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hackChance : ${(ns.hackAnalyzeChance(server) * 100).toFixed(2)}%\\n`);\\n}\\n\\nexport function autocomplete(data, args) {\\n    return data.servers;\\n}\",\"filename\":\"analyze_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"analyze_server.js\",\"url\":\"blob:https://danielyxie.github.io/1973d4f4-5505-4b9a-9cf4-be4c09c0d808\"}],\"ramUsage\":5.35,\"server\":\"home\",\"_hash\":\"91dcb01282737a1ba790ffe2b0a91ff70f2888e7c730f4a1a722ea4efa4c8075\",\"moduleSequenceNumber\":6219,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const flags = ns.flags([\\n        ['refreshrate', 200],\\n        ['help', false],\\n    ])\\n    if (flags.help) {\\n        ns.tprint(\\\"This script helps visualize the money and security of a server.\\\");\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\n        return;\\n    }\\n    ns.tail();\\n    ns.disableLog('ALL');\\n    const servers = flags._[0] ? [flags._[0]] : [];\\n    // ns.tprint(JSON.stringify(servers));\\n    while (true) {\\n        ns.clearLog();\\n        for (var i = 0; i < servers.length; i++) {\\n            const server = servers[i];\\n            const maxMoney = ns.getServerMaxMoney(server);\\n            const minSec = ns.getServerMinSecurityLevel(server);\\n            let money = ns.getServerMoneyAvailable(server);\\n            if (money === 0) money = 1;\\n            const sec = ns.getServerSecurityLevel(server);\\n\\n            ns.print(`\\n${server}:\\n    $          : ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${(money / maxMoney * 100).toFixed(2)}%)\\n    security   : ${minSec.toFixed(2)} / ${sec.toFixed(2)} +${(sec - minSec).toFixed(2)}\\n    growth     : ${ns.getServerGrowth(server)}\\n    hack time  : ${ns.tFormat(ns.getHackTime(server))} (t=${Math.ceil(ns.hackAnalyzeThreads(server, money))})\\n    grow time  : ${ns.tFormat(ns.getGrowTime(server))} (t=${Math.ceil(ns.growthAnalyze(server, maxMoney / money))})\\n    weaken time: ${ns.tFormat(ns.getWeakenTime(server))} (t=${Math.ceil((sec - minSec) * 20)})\\n    hackChance : ${(ns.hackAnalyzeChance(server) * 100).toFixed(2)}%\\n`);\\n            // `${server}:\\n            //     RAM        : ${usedRam} / ${maxRam} (${usedRam / maxRam * 100}%)\\n            //     $          : ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${(money / maxMoney * 100).toFixed(2)}%)\\n            //     security   : ${minSec.toFixed(2)} / ${sec.toFixed(2)} +${(sec - minSec).toFixed(2)}\\n            //     growth     : ${ns.getServerGrowth(server)}\\n            //     hack time  : ${ns.tFormat(ns.getHackTime(server))} (t=${Math.ceil(ns.hackAnalyzeThreads(server, money))})\\n            //     grow time  : ${ns.tFormat(ns.getGrowTime(server))} (t=${Math.ceil(ns.growthAnalyze(server, maxMoney / money))})\\n            //     weaken time: ${ns.tFormat(ns.getWeakenTime(server))} (t=${Math.ceil((sec - minSec) * 20)})\\n            //     grow x2    : ${(ns.growthAnalyze(server, 2)).toFixed(2)} threads\\n            //     grow x3    : ${(ns.growthAnalyze(server, 3)).toFixed(2)} threads\\n            //     grow x4    : ${(ns.growthAnalyze(server, 4)).toFixed(2)} threads\\n            //     hack 10%   : ${(.10 / ns.hackAnalyze(server)).toFixed(2)} threads\\n            //     hack 25%   : ${(.25 / ns.hackAnalyze(server)).toFixed(2)} threads\\n            //     hack 50%   : ${(.50 / ns.hackAnalyze(server)).toFixed(2)} threads\\n            //     hackChance : ${(ns.hackAnalyzeChance(server) * 100).toFixed(2)}%\\n            // `\\n        }\\n        await ns.sleep(flags.refreshrate);\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return data.servers;\\n}\",\"filename\":\"monitor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"monitor.js\",\"url\":\"blob:https://danielyxie.github.io/f8711677-2a84-45ab-895f-f247ac86352a\"}],\"ramUsage\":5.25,\"server\":\"home\",\"_hash\":\"8397cd7b16d2fd5914391c970d442000b728a85d540b028212423f7d73ad8475\",\"moduleSequenceNumber\":6220,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ensureRootAccess } from 'utils.js';\\nasync function scan(ns, parent, server, list) {\\n    const children = await ns.scan(server);\\n    for (let child of children) {\\n        if (parent == child) {\\n            continue;\\n        }\\n        await ensureRootAccess(ns, child);\\n        list.push(child);\\n\\n        await scan(ns, server, child, list);\\n        await ns.sleep(10);\\n    }\\n}\\n\\nexport async function list_servers(ns) {\\n    const list = [];\\n    await scan(ns, '', 'home', list);\\n\\n    return list;\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script lists all servers on which you can run scripts.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\n        return;\\n    }\\n\\n    const servers = (await list_servers(ns)).filter(s => ns.hasRootAccess(s)).concat(['home']);\\n    for (const server of servers) {\\n        const used = await ns.getServerUsedRam(server);\\n        const max = await ns.getServerMaxRam(server) || 1;\\n        ns.tprint(`${server} is opened. ${used} GB / ${max} GB (${(100 * used / max).toFixed(2)}%)`)\\n    }\\n}\",\"filename\":\"opened_servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"config.js\",\"url\":\"blob:https://danielyxie.github.io/379ccde1-7f03-45f2-a530-8d1418c55a84\"},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/50cc660b-f21e-499c-9f84-4bb966023214\"},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/974c166c-48c4-449a-9f61-2aeee7d9e0a6\"}],\"ramUsage\":2.45,\"server\":\"home\",\"_hash\":\"06ce4d2601ca3986016c5ec63d4754fff87fc878ed41b258d88ee6ba15694c79\",\"moduleSequenceNumber\":6221,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { targets } from 'config.js';\\n/** @param {NS} ns **/\\nexport async function ensureRootAccess(ns, host) {\\n\\tif (host === \\\"home\\\" || await ns.hasRootAccess(host)) return true;\\n\\tlet portsReq = await ns.getServerNumPortsRequired(host);\\n\\tlet maxPorts = await countPorts(ns);\\n\\tns.tprint(\\\"need to root \\\" + host + \\\" with \\\" + portsReq + \\\" ports required \\\" + maxPorts + \\\" can be opened\\\");\\n\\tif (portsReq <= maxPorts) {\\n\\t\\tif (await ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tawait ns.brutessh(host);\\n\\t\\t}\\n\\t\\tif (await ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tawait ns.httpworm(host);\\n\\t\\t}\\n\\t\\tif (await ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tawait ns.ftpcrack(host);\\n\\t\\t}\\n\\t\\tif (await ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tawait ns.relaysmtp(host);\\n\\t\\t}\\n\\t\\tif (await ns.fileExists(\\\"sqlInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tawait ns.sqlinject(host);\\n\\t\\t}\\n\\t\\tawait ns.nuke(host);\\n\\t\\tns.tprint(\\\"nuked \\\" + host);\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\treturn false;\\n\\t}\\n}\\n\\nasync function countPorts(ns) {\\n\\tlet ports = 0\\n\\tif (await ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\tports++;\\n\\t}\\n\\tif (await ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\tports++;\\n\\t}\\n\\tif (await ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\tports++;\\n\\t}\\n\\tif (await ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\tports++;\\n\\t}\\n\\tif (await ns.fileExists(\\\"sqlInject.exe\\\", \\\"home\\\")) {\\n\\t\\tports++;\\n\\t}\\n\\treturn ports\\n}\\n\\nexport async function createExecParams(ns) {\\n\\texecParams = [];\\n\\tfor (var i = 0; i < targets().length; i++) {\\n\\t\\texecParams.push(targets()[i]);\\n\\t\\texecParams.push(ns.getServerMaxMoney(targets()[i]) * 0.75);\\n\\t\\texecParams.push(ns.getServerMinSecurityLevel(targets()[i]) + 5)\\n\\t}\\n\\texecParams.unshift(execParams.length);\\n\\treturn execParams;\\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.35,\"server\":\"home\",\"_hash\":\"ed910c6545189e02f42c7579c729d6dfe5c5a923d35ba004f8d126a51b8888c5\",\"moduleSequenceNumber\":6222,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function recursiveScan(ns, parent, server, target, route) {\\n\\tconst children = ns.scan(server);\\n\\tfor (let child of children) {\\n\\t\\tif (parent == child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child == target) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(server);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\tif (recursiveScan(ns, server, child, target, route)) {\\n\\t\\t\\troute.unshift(server);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst args = ns.flags([[\\\"help\\\", false]]);\\n\\tlet route = [];\\n\\tlet server = args._[0];\\n\\tif (!server || args.help) {\\n\\t\\tns.tprint(\\\"This script helps you find a server on the network and shows you the path to get to it.\\\");\\n\\t\\tns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\n\\t\\tns.tprint(\\\"Example:\\\");\\n\\t\\tns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n\\t\\treturn;\\n\\t}\\n\\n\\trecursiveScan(ns, '', 'home', server, route);\\n\\tfor (const i in route) {\\n\\t\\tawait ns.sleep(500);\\n\\t\\tconst extra = i > 0 ? \\\"└ \\\" : \\\"\\\";\\n\\t\\tns.tprint(`${\\\" \\\".repeat(i)}${extra}${route[i]}`);\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\treturn data.servers;\\n}\",\"filename\":\"find_server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"find_server.js\",\"url\":\"blob:https://danielyxie.github.io/be599904-bc64-462b-b108-42fb54abc8c5\"}],\"ramUsage\":1.8,\"server\":\"home\",\"_hash\":\"3b9f505a588b13c309d36d04796340a4ebaa1ba23ac8bb2cf738a08417e8143c\",\"moduleSequenceNumber\":6689,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function scan(ns, parent, server, list) {\\n    const children = ns.scan(server);\\n    for (let child of children) {\\n        if (parent == child) {\\n            continue;\\n        }\\n        list.push(child);\\n        \\n        scan(ns, server, child, list);\\n    }\\n}\\n\\nexport function list_servers(ns) {\\n    const list = [];\\n    scan(ns, '', 'home', list);\\n    return list;\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script helps you find an unsolved coding contract.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\n        return;\\n    }\\n\\n    let servers = list_servers(ns);\\n    const boughtServers = ns.getPurchasedServers(ns);\\n    servers = servers.filter(s => !boughtServers.includes(s));\\n    const hostname = servers.find(s => ns.ls(s).find(f => f.endsWith(\\\".cct\\\")))\\n    if(!hostname) {\\n        ns.tprint(\\\"No coding contract found.\\\");\\n        return;\\n    }\\n\\n    ns.tprint(`Found coding contract on '${hostname}'.`)\\n}\",\"filename\":\"find_coding_contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"find_coding_contract.js\",\"url\":\"blob:https://danielyxie.github.io/3a414773-006e-44b8-ab18-f303b48417da\"}],\"ramUsage\":4.25,\"server\":\"home\",\"_hash\":\"f7575b403c04875ff0f6e152cd1ea68c59a0ad25d8451a37876469ad338a62ce\",\"moduleSequenceNumber\":6224,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/7993b4b0-4303-4642-8637-95cddcb98c7b\"}],\"ramUsage\":1.7,\"server\":\"home\",\"_hash\":\"7c3005da5d66c68df85df0df50d2b0b0b00778857a07d88670bbf183a0a4ebec\",\"moduleSequenceNumber\":6225,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/efaca7f5-f9b2-4f4a-84c7-c2c95c060c74\"}],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"d23919e9f2448a7ca545faeb9799d8136a808b1dd9c8d5c7ac741c458d2a3156\",\"moduleSequenceNumber\":6226,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/7c4deccd-7d44-4382-9637-f942a95fc58e\"}],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"fbec4b055c178ac2b6828ed994c26bf05b233d7383518107ad159953759a8b89\",\"moduleSequenceNumber\":6227,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { list_servers } from 'opened_servers.js';\\nlet ns;\\nconst weaken_script = \\\"weaken.js\\\";\\nconst grow_script = \\\"grow.js\\\";\\nconst hack_script = \\\"hack.js\\\";\\nlet weaken_scriptRam, grow_scriptRam, hack_scriptRam = 1.7;\\nlet serversForExecution = [];\\n/** @param {NS} pns **/\\nexport async function main(pns) {\\n\\tns = pns;\\n\\tns.disableLog('getServerNumPortsRequired');\\n\\tns.disableLog('getServerMaxRam');\\n\\tns.disableLog('getServerUsedRam');\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMaxMoney');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('scan');\\n\\tns.tail();\\n\\t// ns.disableLog('ALL');\\n\\tweaken_scriptRam = ns.getScriptRam(weaken_script, \\\"home\\\");\\n\\tgrow_scriptRam = ns.getScriptRam(grow_script, \\\"home\\\");\\n\\thack_scriptRam = ns.getScriptRam(hack_script, \\\"home\\\");\\n\\tconst serversToHack = (await list_servers(ns)).filter(s => ns.hasRootAccess(s)\\n\\t\\t&& ns.getServerMaxMoney(s) > 0\\n\\t\\t&& ns.hackAnalyze(s) > 0);\\n\\tconst hackStatus = []\\n\\tns.tprint(`Servers to hack ${serversToHack.length}`);\\n\\tfor (const server of serversToHack) {\\n\\t\\thackStatus.push({ server: server });\\n\\t\\tawait ns.sleep(10);\\n\\t}\\n\\tserversForExecution = ['home'].concat(ns.getPurchasedServers());\\n\\tawait run(hackStatus);\\n}\\nasync function run(hackStatus) {\\n\\tlet i = 0;\\n\\tlet res;\\n\\twhile (true) {\\n\\t\\tconst state = getNextState(hackStatus[i].server, hackStatus[i].nextStateUpdateRequiredAt);\\n\\t\\tif (state) {\\n\\t\\t\\thackStatus[i] = state;\\n\\n\\t\\t\\tswitch (state.nextState) {\\n\\t\\t\\t\\tcase 'weaken':\\n\\t\\t\\t\\t\\tres = await runWeaken(state.server, state.currentSecurity, state.threadsCommitted);\\n\\t\\t\\t\\t\\t// ns.print(`Weak time ${ns.tFormat(res.time)}`);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'grow':\\n\\t\\t\\t\\t\\tres = await runGrow(state.server, state.percentMoney, state.threadsCommitted);\\n\\t\\t\\t\\t\\t// ns.print(`Grow time ${ns.tFormat(res.time)}`);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'hack':\\n\\t\\t\\t\\t\\tres = await runHack(state.server, state.threadsCommitted);\\n\\t\\t\\t\\t\\t// ns.print(`Hack time ${ns.tFormat(res.time)}`);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\n\\t\\t\\tstate.nextStateUpdateRequiredAt = Date.now() + res.time;\\n\\t\\t\\t// ns.print(`Next update at: ${new Date(state.nextStateUpdateRequiredAt).toTimeString()}`);\\n\\t\\t\\tstate.threadsCommitted = res.threadsCommitted\\n\\t\\t}\\n\\t\\ti = (i + 1) % hackStatus.length;\\n\\t\\tawait ns.sleep(1);\\n\\t}\\n}\\nconst getCores = (host) => host === 'home' ? 6 : 1;\\n\\nasync function runWeaken(target, currentSecurity, threads) {\\n\\tlet time = 0;\\n\\tlet threadsCommitted = 0;\\n\\tconst { host, threads_available } = getHostAndThreads(weaken_scriptRam);\\n\\tif (!host) return { time, threadsCommitted };\\n\\tlet threadToUse = threads_available;\\n\\tconst owk = ns.weakenAnalyze(1, getCores(host));\\n\\tconst threadsNeeded = Math.max(Math.ceil(currentSecurity / owk) - threads, 1);\\n\\tthreadToUse = Math.min(threadToUse, threadsNeeded);\\n\\tif (!ns.fileExists(weaken_script, host)) {\\n\\t\\tawait ns.scp(weaken_script, host);\\n\\t}\\n\\n\\tif (threadToUse >= 1) {\\n\\n\\t\\tconst pid = await ns.exec(weaken_script, host, threadToUse, target);\\n\\t\\tif (pid > 0) {\\n\\t\\t\\tif (hasFormulas() && threadsNeeded <= threadToUse) {\\n\\t\\t\\t\\ttime = ns.formulas.hacking.weakenTime(ns.getServer(target), ns.getPlayer());\\n\\t\\t\\t}\\n\\t\\t\\t// ns.print(`Weaken ${host}[${threadToUse}] -> ${target}`);\\n\\t\\t\\tthreadsCommitted = threadToUse;\\n\\t\\t}\\n\\n\\t}\\n\\treturn { time, threadsCommitted };\\n}\\n\\nasync function runGrow(target, percentMoney, threads) {\\n\\tlet time = 0;\\n\\tlet threadsCommitted = 0;\\n\\tconst { host, threads_available } = getHostAndThreads(grow_scriptRam);\\n\\tif (!host) return { time, threadsCommitted };\\n\\tconst growthFactor = 1 / (percentMoney || 0.0000001);\\n\\tconst threadsNeeded = Math.max(parseInt(ns.growthAnalyze(target, growthFactor, getCores(host)).toFixed(0)) - threads, 1);\\n\\tlet threadToUse = Math.min(threads_available, threadsNeeded);\\n\\tif (!ns.fileExists(grow_script, host)) {\\n\\t\\tawait ns.scp(grow_script, host);\\n\\t}\\n\\n\\tif (threadToUse >= 1) {\\n\\n\\t\\tconst pid = await ns.exec(grow_script, host, threadToUse, target);\\n\\t\\tif (pid > 0) {\\n\\t\\t\\tif (hasFormulas() && threadsNeeded <= threadToUse) {\\n\\t\\t\\t\\ttime = ns.formulas.hacking.growTime(ns.getServer(target), ns.getPlayer());\\n\\t\\t\\t}\\n\\t\\t\\t// ns.print(`Grow ${host}[${threadToUse}] -> ${target}`);\\n\\t\\t\\tthreadsCommitted = threadToUse;\\n\\t\\t}\\n\\t}\\n\\treturn { time, threadsCommitted };\\n}\\n\\nasync function runHack(target, threads) {\\n\\tlet time = 0;\\n\\tlet threadsCommitted = 0;\\n\\tconst { host, threads_available } = getHostAndThreads(hack_scriptRam);\\n\\tif (!host) return { time, threadsCommitted };\\n\\tconst threadsNeeded = Math.max(parseInt((.5 / ns.hackAnalyze(target)).toFixed(0)) - threads, 1);\\n\\tlet threadToUse = Math.min(threads_available, threadsNeeded);\\n\\tif (!ns.fileExists(hack_script, host)) {\\n\\t\\tawait ns.scp(hack_script, host);\\n\\t}\\n\\n\\tif (threadToUse >= 1) {\\n\\t\\tconst cashingOut = ns.hackAnalyze(target) * threadToUse * ns.getServerMoneyAvailable(target);\\n\\t\\tconst pid = await ns.exec(hack_script, host, threadToUse, target);\\n\\n\\t\\tif (pid > 0) {\\n\\t\\t\\tif (hasFormulas() && threadsNeeded <= threadToUse) {\\n\\t\\t\\t\\ttime = ns.formulas.hacking.hackTime(ns.getServer(target), ns.getPlayer());\\n\\t\\t\\t}\\n\\t\\t\\tns.print(`Hack ${host}[${threadToUse}] -> ${target}[${ns.nFormat(cashingOut, \\\"($ 0.00 a)\\\")}]`);\\n\\t\\t\\tthreadsCommitted = threadToUse;\\n\\t\\t}\\n\\t}\\n\\treturn { time, threadsCommitted };\\n}\\nfunction hasFormulas() {\\n\\treturn ns.fileExists('Formulas.exe');\\n}\\nfunction getHostAndThreads(scriptRam) {\\n\\tconst host = serversForExecution.find((host) => {\\n\\t\\tlet maxRam = ns.getServerMaxRam(host);\\n\\t\\tif (host === 'home') {\\n\\t\\t\\tmaxRam = maxRam - 64;\\n\\t\\t}\\n\\t\\tconst threads_available = Math.floor((maxRam - ns.getServerUsedRam(host)) / scriptRam);\\n\\t\\treturn threads_available >= 1;\\n\\t});\\n\\tif (!host) return { host: null, threads_available: 0 };\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\tif (host === 'home') {\\n\\t\\tmaxRam = maxRam - 64;\\n\\t}\\n\\tconst threads_available = Math.floor((maxRam - ns.getServerUsedRam(host)) / scriptRam);\\n\\treturn { host, threads_available };\\n}\\nfunction getNextState(server, nextStateUpdateRequiredAt) {\\n\\tif (nextStateUpdateRequiredAt > Date.now()) return null;\\n\\tlet nextState = 'weaken';\\n\\tconst sec = parseFloat((ns.getServerSecurityLevel(server) - ns.getServerMinSecurityLevel(server)).toFixed(2));\\n\\tconst percentMoney = parseFloat((ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server)).toFixed(2));\\n\\tif (sec > 5) {\\n\\t\\tnextState = 'weaken';\\n\\t} else if (percentMoney < 0.9) {\\n\\t\\tnextState = 'grow';\\n\\t} else {\\n\\t\\tnextState = 'hack';\\n\\t}\\n\\t// \\tns.print(`Next state for ${server} ${nextState} \\n\\t//   $% : ${percentMoney * 100} \\n\\t//   sec: +${sec.toFixed(2)} \\n\\t//   at : ${new Date(nextStateUpdateRequiredAt ? nextStateUpdateRequiredAt : Date.now()).toTimeString()}`);\\n\\treturn {\\n\\t\\tserver: server,\\n\\t\\tnextState: nextState,\\n\\t\\tpercentMoney: percentMoney,\\n\\t\\tcurrentSecurity: sec,\\n\\t\\tnextStateUpdateRequiredAt: 0,\\n\\t\\tthreadsCommitted: 0\\n\\t};\\n}\",\"filename\":\"mcp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"config.js\",\"url\":\"blob:https://danielyxie.github.io/dd48428e-6547-4cd6-8b5a-6363be1b1cde\"},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/555a2bd2-215e-4a3f-a56e-f769453865d6\"},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/f1390be8-8af7-47fb-81e0-16ded49a3bae\"},{\"filename\":\"mcp.js\",\"url\":\"blob:https://danielyxie.github.io/59a0f6c7-d84c-419c-bc7f-8cd0b019f600\"}],\"ramUsage\":13.6,\"server\":\"home\",\"_hash\":\"5353b10592bc7b9402c764c0d2d38168d6161fa8868a9f276b4fbaaa4cf439c3\",\"moduleSequenceNumber\":6228,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tconst target = 'foodnstuff';\\n\\tconst player = ns.getPlayer();\\n\\t// const hnc = ns.hacknet.getPurchaseNodeCost();\\n\\tconst mgr = 0; //ns.hacknet.getNodeStats(200, 64, 16, player.hacknet_node_money_mult)\\n\\t// const htime = ns.formulas.hacking.hackTime(ns.getServer(target), ns.getPlayer());\\n\\n\\t// const owk = ns.weakenAnalyze(1, 4);\\n\\t// const securityLevelToBeat = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\n\\t// const threadsNeeded = Math.ceil(securityLevelToBeat / owk);\\n\\t// const bingo = ns.weakenAnalyze(threads, 4)\\n\\t// ns.print(`${owk} * ${threads} >= ${securityLevelToBeat} `);\\n\\tns.tprint(`${ns.hackAnalyze(target)} ${mgr} ${''}`);\\n\\t// ns.print(`${hnc} ${mgr}`);\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"test.js\",\"url\":\"blob:https://danielyxie.github.io/4b29f6f0-9618-46ad-bc10-7991fb90c623\"}],\"ramUsage\":3.1,\"server\":\"home\",\"_hash\":\"9c5c78e9b5a5d3f03097a7cdfbf10f48b1a02acbfadf43c85be2832e829c9c6a\",\"moduleSequenceNumber\":6229,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tns.weaken(ns.args[0], ns.args[1]);\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"weaken2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken2.js\",\"url\":\"blob:https://danielyxie.github.io/3ee929bd-de92-40b4-9b91-1be98e1cddd8\"}],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"59fe0083f44d8b58fe7e85c4e940b59dd57391e024a7b27fd650669136fbeb41\",\"moduleSequenceNumber\":6230,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tns.hack(ns.args[0], ns.args[1]);\\n\\t\\tawait ns.sleep(3000)\\n\\t}\\n}\",\"filename\":\"hack2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack2.js\",\"url\":\"blob:https://danielyxie.github.io/2ab8d927-5c2f-4378-8ec0-dafe63b9ffdc\"}],\"ramUsage\":1.7,\"server\":\"home\",\"_hash\":\"7f8f81ae0c85ddae9ec5f07e78ad809b52f41d08635f7a9d6918518b37bff115\",\"moduleSequenceNumber\":6231,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tns.grow(ns.args[0], ns.args[1]);\\n\\t\\tawait ns.sleep(2000);\\n\\t}\\n}\",\"filename\":\"grow2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow2.js\",\"url\":\"blob:https://danielyxie.github.io/a74a2757-2b5a-4079-8148-b53982e1619d\"}],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"714b6ea10fdb7c67e74f1705e57e522f2ca838d748e7de60ac35ada211de7cdb\",\"moduleSequenceNumber\":6232,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { list_servers } from 'opened_servers.js';\\nlet ns;\\nconst weaken_script = \\\"weaken2.js\\\";\\nconst grow_script = \\\"grow2.js\\\";\\nconst hack_script = \\\"hack2.js\\\";\\nlet weaken_scriptRam, grow_scriptRam, hack_scriptRam = 1.75;\\nlet serversForExecution = [];\\n/** @param {NS} pns **/\\nexport async function main(pns) {\\n\\tns = pns;\\n\\t// ns.disableLog('getServerNumPortsRequired');\\n\\t// ns.disableLog('getServerMaxRam');\\n\\t// ns.disableLog('getServerUsedRam');\\n\\t// ns.disableLog('sleep');\\n\\t// ns.disableLog('getServerSecurityLevel');\\n\\t// ns.disableLog('getServerMinSecurityLevel');\\n\\t// ns.disableLog('getServerMaxMoney');\\n\\t// ns.disableLog('getServerMoneyAvailable');\\n\\t// ns.disableLog('scan');\\n\\tns.tail();\\n\\tns.disableLog('ALL');\\n\\tweaken_scriptRam = ns.getScriptRam(weaken_script, \\\"home\\\");\\n\\tgrow_scriptRam = ns.getScriptRam(grow_script, \\\"home\\\");\\n\\thack_scriptRam = ns.getScriptRam(hack_script, \\\"home\\\");\\n\\tconst serversToHack = (await list_servers(ns)).filter(s => ns.hasRootAccess(s)\\n\\t\\t&& ns.getServerMaxMoney(s) > 0\\n\\t\\t&& ns.hackAnalyze(s) > 0);\\n\\tconst hackStatus = []\\n\\tns.tprint(`Servers to hack ${serversToHack.length}`);\\n\\tfor (const server of serversToHack) {\\n\\t\\thackStatus.push({ server: server });\\n\\t\\tawait ns.sleep(10);\\n\\t}\\n\\tserversForExecution = ['home'].concat(ns.getPurchasedServers());\\n\\tawait run(hackStatus);\\n}\\nasync function run(hackStatus) {\\n\\tlet i = 0;\\n\\tconst host = 'home';\\n\\twhile (true) {\\n\\t\\tconst state = hackStatus[i];\\n\\t\\tlet growThreads = await runGrow(host, state.server);\\n\\t\\tlet hackThreads = await runHack(host, state.server);\\n\\t\\tlet pid = await runWeaken(host, state.server, growThreads, hackThreads);\\n\\t\\ti = (i + 1) % hackStatus.length;\\n\\t\\tawait ns.sleep(1);\\n\\t}\\n}\\nconst getCores = (host) => host === 'home' ? 6 : 1;\\n\\nasync function runWeaken(host, target, growThreads, hackThreads) {\\n\\tconst server = ns.getServer(target);\\n\\tlet threadToUse = 1;\\n\\tconst owk = ns.weakenAnalyze(1, getCores(host));\\n\\tconst threadsNeeded = Math.max(Math.ceil(server.minDifficulty / owk), 1);\\n\\t// have the weaken spam work at the maximum between hack or grow security increases\\n\\tserver.hackDifficulty = Math.max(ns.growthAnalyzeSecurity(growThreads), ns.hackAnalyzeSecurity(hackThreads));\\n\\tconst time = ns.formulas.hacking.weakenTime(server, ns.getPlayer());\\n\\tconst hertz = 1000 / time;\\n\\tthreadToUse = Math.ceil(threadsNeeded / hertz);\\n\\n\\tif (!ns.fileExists(weaken_script, host)) {\\n\\t\\tawait ns.scp(weaken_script, host);\\n\\t}\\n\\tconst pid = await ns.exec(weaken_script, host, threadToUse, target, threadsNeeded);\\n\\tif (pid > 0) {\\n\\t\\tns.tprint(`FAILED TO START WEAKEN SPAM ${host}[${threadToUse}] -> ${target}`);\\n\\t}\\n\\treturn pid;\\n}\\n\\nasync function runGrow(host, target) {\\n\\t// try to grow a bit more than hacking to lazily reach equilibrium of 50% of max money hacking\\n\\tconst growthFactor = 2.1;\\n\\tconst threadsNeeded = Math.max(parseInt(ns.growthAnalyze(target, growthFactor, getCores(host)).toFixed(0)), 1);\\n\\tlet threadToUse = 1;\\n\\tconst server = ns.getServer(target);\\n\\t// weaken spam should be keeping this to be true\\n\\tserver.hackDifficulty = server.minDifficulty;\\n\\tconst time = ns.formulas.hacking.growTime(server, ns.getPlayer());\\n\\t// every 2 seconds we grow\\n\\tconst hertz = 2 * 1000 / time;\\n\\tthreadToUse = Math.ceil(threadsNeeded / hertz);\\n\\tif (!ns.fileExists(grow_script, host)) {\\n\\t\\tawait ns.scp(grow_script, host);\\n\\t}\\n\\n\\tconst pid = await ns.exec(grow_script, host, threadToUse, target, threadsNeeded);\\n\\tif (pid > 0) {\\n\\t\\tns.tprint(`FAILED TO START GROW SPAM ${host}[${threadToUse}] -> ${target}`);\\n\\t}\\n\\treturn threadsNeeded;\\n}\\n\\nasync function runHack(host, target) {\\n\\tconst threadsNeeded = Math.max(parseInt((.5 / ns.hackAnalyze(target)).toFixed(0)), 1);\\n\\tlet threadToUse = 1;\\n\\tconst server = ns.getServer(target);\\n\\t// weaken spam should be keeping this to be true\\n\\tserver.hackDifficulty = server.minDifficulty;\\n\\tconst time = ns.formulas.hacking.hackTime(server, ns.getPlayer());\\n\\t// hack a bit slower than grow, ensuring grow stays ahead of hack\\n\\tconst hertz = 2.01 * 1000 / time;\\n\\tthreadToUse = Math.ceil(threadsNeeded / hertz);\\n\\tif (!ns.fileExists(hack_script, host)) {\\n\\t\\tawait ns.scp(hack_script, host);\\n\\t}\\n\\tconst pid = await ns.exec(hack_script, host, threadToUse, target, threadsNeeded);\\n\\tif (pid > 0) {\\n\\t\\tns.tprint(`FAILED TO START HACK SPAM ${host}[${threadToUse}] -> ${target}`);\\n\\t}\\n\\treturn threadsNeeded;\\n}\",\"filename\":\"mcp2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"config.js\",\"url\":\"blob:https://danielyxie.github.io/dd48428e-6547-4cd6-8b5a-6363be1b1cde\"},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/555a2bd2-215e-4a3f-a56e-f769453865d6\"},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/f1390be8-8af7-47fb-81e0-16ded49a3bae\"},{\"filename\":\"mcp2.js\",\"url\":\"blob:https://danielyxie.github.io/c8697b9e-fa10-44ea-9e17-0e0f3626d084\"}],\"ramUsage\":15.2,\"server\":\"home\",\"_hash\":\"198d77c32360357fd5a4375dfab57496b962f62b216a5937d67cc65a8b6344c5\",\"moduleSequenceNumber\":6233,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\",\"pserv-24\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"77.6.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":38797672147,\"moneyMax\":969941803675,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1311,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"35.0.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":46932727837,\"moneyMax\":1173318195925,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1234,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"48.8.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":17188849200,\"moneyMax\":429721230000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":951,\"serverGrowth\":65}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"45.2.3.3\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":29344687514,\"moneyMax\":733617187850,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":983,\"serverGrowth\":60}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"0.7.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"ecorp\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":30139176393,\"moneyMax\":753479409825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1155,\"serverGrowth\":81}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"33.0.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":24294952980,\"moneyMax\":607373824500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1008,\"serverGrowth\":74}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"55.1.2.6\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":98,\"minDifficulty\":33,\"moneyAvailable\":14036501656,\"moneyMax\":350912541400,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":980,\"serverGrowth\":96}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"29.2.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"b-and-a\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":22778156834,\"moneyMax\":569453920850,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":963,\"serverGrowth\":84}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"57.0.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"blade\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":22354442315,\"moneyMax\":558861057875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1195,\"serverGrowth\":94}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"11.0.3.5\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":1554797677,\"moneyMax\":38869941925,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1140,\"serverGrowth\":99}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"57.3.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1168,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"44.4.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":1193613397,\"moneyMax\":29840334925,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1024,\"serverGrowth\":83}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"63.4.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":895369735,\"moneyMax\":22384243375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":850,\"serverGrowth\":63}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"52.1.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":812348708,\"moneyMax\":20308717700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":875,\"serverGrowth\":54}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"33.7.1.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\",\"4sigma\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":695290235,\"moneyMax\":17382255875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":858,\"serverGrowth\":78}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"77.3.4.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":711005337,\"moneyMax\":17775133425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":866,\"serverGrowth\":64}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"45.8.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"infocomm\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":998375208,\"moneyMax\":24959380200,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":876,\"serverGrowth\":95}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"18.8.4.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1198273198,\"moneyMax\":29956829950,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":824,\"serverGrowth\":82}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"77.2.9.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":879754828,\"moneyMax\":21993870700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":854,\"serverGrowth\":64}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"69.9.6.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":687720295,\"moneyMax\":17193007375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":821,\"serverGrowth\":83}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"82.7.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":827690849,\"moneyMax\":20692271225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":898,\"serverGrowth\":73}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"98.7.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":783129441,\"moneyMax\":19578236025,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":841,\"serverGrowth\":78}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"15.8.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":1097814784,\"moneyMax\":27445369600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":869,\"serverGrowth\":55}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"91.2.2.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":947967098,\"moneyMax\":23699177450,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":858,\"serverGrowth\":65}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"63.5.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"titan-labs\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":945083545,\"moneyMax\":23627088625,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":808,\"serverGrowth\":73}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"49.2.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":756884691,\"moneyMax\":18922117275,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":793,\"serverGrowth\":75}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"63.9.1.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":835645285,\"moneyMax\":20891132125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":791,\"serverGrowth\":70}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"60.8.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":1630459230,\"moneyMax\":40761480750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":834,\"serverGrowth\":63}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"85.4.5.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":1628315433,\"moneyMax\":40707885825,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":850,\"serverGrowth\":87}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"8.7.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":1239894802,\"moneyMax\":30997370050,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":816,\"serverGrowth\":67}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"18.4.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1461074494,\"moneyMax\":36526862350,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":836,\"serverGrowth\":70}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"84.0.2.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"icarus\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":1001282431,\"moneyMax\":25032060775,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":783,\"serverGrowth\":75}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"77.4.2.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":761338924,\"moneyMax\":19033473100,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":721,\"serverGrowth\":63}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"38.5.8.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":15.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[9,\"silver-helix\",843750000,15,\"crush-fitness\",1121446331.25,20,\"comptek\",4188031481.25,25],\"dataMap\":{\"silver-helix\":[393558781,259,511,84]},\"filename\":\"early-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11875.052699999984,\"onlineMoneyMade\":393558781,\"onlineRunningTime\":28824.01000000106,\"pid\":169,\"ramUsage\":2.2,\"server\":\"rho-construction\",\"threads\":7,\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let paramLength = ns.args[0];\\r\\n    let targetServers = [];\\r\\n    for (var i = 0; i < paramLength / 3; i++) {\\r\\n        targetServers.push({\\r\\n            target: ns.args[i * 3 + 1],\\r\\n            moneyThresh: ns.args[i * 3 + 2],\\r\\n            securityThresh: ns.args[i * 3 + 3]\\r\\n        });\\r\\n    }\\r\\n    ns.print(JSON.stringify(targetServers));\\r\\n    // pick a random server to start on\\r\\n    i = Math.floor(Math.random() * (targetServers.length))\\r\\n    while (true) {\\r\\n        let server = targetServers[i];\\r\\n        ns.print(JSON.stringify(server));\\r\\n        // iterate through the servers\\r\\n        i = i++ % targetServers.length;\\r\\n        const target = server.target;\\r\\n        const moneyThresh = server.moneyThresh;\\r\\n        const securityThresh = server.securityThresh;\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        } else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}],\"ramUsage\":2.2,\"server\":\"rho-construction\",\"_hash\":\"c19c706a9b823af7ee4e4830336d2e15969f12690a27821ac003d86bd8a13c76\",\"moduleSequenceNumber\":6960,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":501615543,\"moneyMax\":12540388575,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":508,\"serverGrowth\":59}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"20.6.2.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\",\"galactic-cyber\",\"aerocorp\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":638705850,\"moneyMax\":15967646250,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":549,\"serverGrowth\":56}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"33.0.1.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":365064767,\"moneyMax\":9126619175,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":407,\"serverGrowth\":42}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"54.4.1.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":63.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[9,\"silver-helix\",843750000,15,\"crush-fitness\",1121446331.25,20,\"comptek\",4188031481.25,25],\"dataMap\":{\"crush-fitness\":[462402303,667,1015,145]},\"filename\":\"early-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":36547.08876,\"onlineMoneyMade\":462402303,\"onlineRunningTime\":28823.810000001064,\"pid\":171,\"ramUsage\":2.2,\"server\":\"rothman-uni\",\"threads\":29,\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let paramLength = ns.args[0];\\r\\n    let targetServers = [];\\r\\n    for (var i = 0; i < paramLength / 3; i++) {\\r\\n        targetServers.push({\\r\\n            target: ns.args[i * 3 + 1],\\r\\n            moneyThresh: ns.args[i * 3 + 2],\\r\\n            securityThresh: ns.args[i * 3 + 3]\\r\\n        });\\r\\n    }\\r\\n    ns.print(JSON.stringify(targetServers));\\r\\n    // pick a random server to start on\\r\\n    i = Math.floor(Math.random() * (targetServers.length))\\r\\n    while (true) {\\r\\n        let server = targetServers[i];\\r\\n        ns.print(JSON.stringify(server));\\r\\n        // iterate through the servers\\r\\n        i = i++ % targetServers.length;\\r\\n        const target = server.target;\\r\\n        const moneyThresh = server.moneyThresh;\\r\\n        const securityThresh = server.securityThresh;\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        } else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}],\"ramUsage\":2.2,\"server\":\"rothman-uni\",\"_hash\":\"c19c706a9b823af7ee4e4830336d2e15969f12690a27821ac003d86bd8a13c76\",\"moduleSequenceNumber\":6966,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"crush-fitness\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":189260263,\"moneyMax\":4731506575,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":392,\"serverGrowth\":41}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"70.4.4.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1041692793,\"moneyMax\":26042319825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":739,\"serverGrowth\":77}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"27.2.6.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":30.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[9,\"silver-helix\",843750000,15,\"crush-fitness\",1121446331.25,20,\"comptek\",4188031481.25,25],\"dataMap\":{\"silver-helix\":[801771152,518,994,154]},\"filename\":\"early-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":23418.267599999966,\"onlineMoneyMade\":801771152,\"onlineRunningTime\":28824.410000001062,\"pid\":156,\"ramUsage\":2.2,\"server\":\"summit-uni\",\"threads\":14,\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let paramLength = ns.args[0];\\r\\n    let targetServers = [];\\r\\n    for (var i = 0; i < paramLength / 3; i++) {\\r\\n        targetServers.push({\\r\\n            target: ns.args[i * 3 + 1],\\r\\n            moneyThresh: ns.args[i * 3 + 2],\\r\\n            securityThresh: ns.args[i * 3 + 3]\\r\\n        });\\r\\n    }\\r\\n    ns.print(JSON.stringify(targetServers));\\r\\n    // pick a random server to start on\\r\\n    i = Math.floor(Math.random() * (targetServers.length))\\r\\n    while (true) {\\r\\n        let server = targetServers[i];\\r\\n        ns.print(JSON.stringify(server));\\r\\n        // iterate through the servers\\r\\n        i = i++ % targetServers.length;\\r\\n        const target = server.target;\\r\\n        const moneyThresh = server.moneyThresh;\\r\\n        const securityThresh = server.securityThresh;\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        } else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}],\"ramUsage\":2.2,\"server\":\"summit-uni\",\"_hash\":\"c19c706a9b823af7ee4e4830336d2e15969f12690a27821ac003d86bd8a13c76\",\"moduleSequenceNumber\":6946,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":229417135,\"moneyMax\":5735428375,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":458,\"serverGrowth\":55}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"68.0.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":553211131,\"moneyMax\":13830278275,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":632,\"serverGrowth\":64}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"31.9.1.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let paramLength = ns.args[0];\\r\\n    let targetServers = [];\\r\\n    for (var i = 0; i < paramLength / 3; i++) {\\r\\n        targetServers.push({\\r\\n            target: ns.args[i * 3 + 1],\\r\\n            moneyThresh: ns.args[i * 3 + 2],\\r\\n            securityThresh: ns.args[i * 3 + 3]\\r\\n        });\\r\\n    }\\r\\n    ns.print(JSON.stringify(targetServers));\\r\\n    // pick a random server to start on\\r\\n    i = Math.floor(Math.random() * (targetServers.length))\\r\\n    while (true) {\\r\\n        let server = targetServers[i];\\r\\n        ns.print(JSON.stringify(server));\\r\\n        // iterate through the servers\\r\\n        i = i++ % targetServers.length;\\r\\n        const target = server.target;\\r\\n        const moneyThresh = server.moneyThresh;\\r\\n        const securityThresh = server.securityThresh;\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        } else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}],\"ramUsage\":2.2,\"server\":\"catalyst\",\"_hash\":\"c19c706a9b823af7ee4e4830336d2e15969f12690a27821ac003d86bd8a13c76\",\"moduleSequenceNumber\":6951,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"comptek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":355337929,\"moneyMax\":8883448225,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":406,\"serverGrowth\":47}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"86.8.8.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":6.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[9,\"silver-helix\",843750000,15,\"crush-fitness\",1121446331.25,20,\"comptek\",4188031481.25,25],\"dataMap\":{\"silver-helix\":[143376786,93,228,33]},\"filename\":\"early-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4936.933800000015,\"onlineMoneyMade\":143376786,\"onlineRunningTime\":28824.21000000106,\"pid\":166,\"ramUsage\":2.2,\"server\":\"the-hub\",\"threads\":3,\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let paramLength = ns.args[0];\\r\\n    let targetServers = [];\\r\\n    for (var i = 0; i < paramLength / 3; i++) {\\r\\n        targetServers.push({\\r\\n            target: ns.args[i * 3 + 1],\\r\\n            moneyThresh: ns.args[i * 3 + 2],\\r\\n            securityThresh: ns.args[i * 3 + 3]\\r\\n        });\\r\\n    }\\r\\n    ns.print(JSON.stringify(targetServers));\\r\\n    // pick a random server to start on\\r\\n    i = Math.floor(Math.random() * (targetServers.length))\\r\\n    while (true) {\\r\\n        let server = targetServers[i];\\r\\n        ns.print(JSON.stringify(server));\\r\\n        // iterate through the servers\\r\\n        i = i++ % targetServers.length;\\r\\n        const target = server.target;\\r\\n        const moneyThresh = server.moneyThresh;\\r\\n        const securityThresh = server.securityThresh;\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        } else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}],\"ramUsage\":2.2,\"server\":\"the-hub\",\"_hash\":\"c19c706a9b823af7ee4e4830336d2e15969f12690a27821ac003d86bd8a13c76\",\"moduleSequenceNumber\":6737,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":15.5,\"minDifficulty\":14,\"moneyAvailable\":3550792608.0155435,\"moneyMax\":4186341550,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":289,\"serverGrowth\":45}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"64.7.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let paramLength = ns.args[0];\\r\\n    let targetServers = [];\\r\\n    for (var i = 0; i < paramLength / 3; i++) {\\r\\n        targetServers.push({\\r\\n            target: ns.args[i * 3 + 1],\\r\\n            moneyThresh: ns.args[i * 3 + 2],\\r\\n            securityThresh: ns.args[i * 3 + 3]\\r\\n        });\\r\\n    }\\r\\n    ns.print(JSON.stringify(targetServers));\\r\\n    // pick a random server to start on\\r\\n    i = Math.floor(Math.random() * (targetServers.length))\\r\\n    while (true) {\\r\\n        let server = targetServers[i];\\r\\n        ns.print(JSON.stringify(server));\\r\\n        // iterate through the servers\\r\\n        i = i++ % targetServers.length;\\r\\n        const target = server.target;\\r\\n        const moneyThresh = server.moneyThresh;\\r\\n        const securityThresh = server.securityThresh;\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        } else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"early-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.2,\"server\":\"comptek\",\"_hash\":\"c19c706a9b823af7ee4e4830336d2e15969f12690a27821ac003d86bd8a13c76\",\"moduleSequenceNumber\":6948,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":24.555999999999983,\"minDifficulty\":20,\"moneyAvailable\":4691395829.659076,\"moneyMax\":5584041975,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":382,\"serverGrowth\":57}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"75.8.4.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let paramLength = ns.args[0];\\r\\n    let targetServers = [];\\r\\n    for (var i = 0; i < paramLength / 3; i++) {\\r\\n        targetServers.push({\\r\\n            target: ns.args[i * 3 + 1],\\r\\n            moneyThresh: ns.args[i * 3 + 2],\\r\\n            securityThresh: ns.args[i * 3 + 3]\\r\\n        });\\r\\n    }\\r\\n    ns.print(JSON.stringify(targetServers));\\r\\n    // pick a random server to start on\\r\\n    i = Math.floor(Math.random() * (targetServers.length))\\r\\n    while (true) {\\r\\n        let server = targetServers[i];\\r\\n        ns.print(JSON.stringify(server));\\r\\n        // iterate through the servers\\r\\n        i = i++ % targetServers.length;\\r\\n        const target = server.target;\\r\\n        const moneyThresh = server.moneyThresh;\\r\\n        const securityThresh = server.securityThresh;\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        } else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}],\"ramUsage\":2.2,\"server\":\"netlink\",\"_hash\":\"c19c706a9b823af7ee4e4830336d2e15969f12690a27821ac003d86bd8a13c76\",\"moduleSequenceNumber\":6954,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":390,\"serverGrowth\":65}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"22.9.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let paramLength = ns.args[0];\\r\\n    let targetServers = [];\\r\\n    for (var i = 0; i < paramLength / 3; i++) {\\r\\n        targetServers.push({\\r\\n            target: ns.args[i * 3 + 1],\\r\\n            moneyThresh: ns.args[i * 3 + 2],\\r\\n            securityThresh: ns.args[i * 3 + 3]\\r\\n        });\\r\\n    }\\r\\n    ns.print(JSON.stringify(targetServers));\\r\\n    // pick a random server to start on\\r\\n    i = Math.floor(Math.random() * (targetServers.length))\\r\\n    while (true) {\\r\\n        let server = targetServers[i];\\r\\n        ns.print(JSON.stringify(server));\\r\\n        // iterate through the servers\\r\\n        i = i++ % targetServers.length;\\r\\n        const target = server.target;\\r\\n        const moneyThresh = server.moneyThresh;\\r\\n        const securityThresh = server.securityThresh;\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        } else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"early-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.2,\"server\":\"johnson-ortho\",\"_hash\":\"c19c706a9b823af7ee4e4830336d2e15969f12690a27821ac003d86bd8a13c76\",\"moduleSequenceNumber\":6739,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":35,\"hackDifficulty\":16.037999999999965,\"minDifficulty\":12,\"moneyAvailable\":1467640699.9152083,\"moneyMax\":1841610650,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":287,\"serverGrowth\":44}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"10.5.9.8\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":2.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[9,\"silver-helix\",843750000,15,\"crush-fitness\",1121446331.25,20,\"comptek\",4188031481.25,25],\"dataMap\":{\"silver-helix\":[40573455,27,78,11]},\"filename\":\"early-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1615.1696999999995,\"onlineMoneyMade\":40573455,\"onlineRunningTime\":28824.610000001063,\"pid\":152,\"ramUsage\":2.2,\"server\":\"n00dles\",\"threads\":1,\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let paramLength = ns.args[0];\\r\\n    let targetServers = [];\\r\\n    for (var i = 0; i < paramLength / 3; i++) {\\r\\n        targetServers.push({\\r\\n            target: ns.args[i * 3 + 1],\\r\\n            moneyThresh: ns.args[i * 3 + 2],\\r\\n            securityThresh: ns.args[i * 3 + 3]\\r\\n        });\\r\\n    }\\r\\n    ns.print(JSON.stringify(targetServers));\\r\\n    // pick a random server to start on\\r\\n    i = Math.floor(Math.random() * (targetServers.length))\\r\\n    while (true) {\\r\\n        let server = targetServers[i];\\r\\n        ns.print(JSON.stringify(server));\\r\\n        // iterate through the servers\\r\\n        i = i++ % targetServers.length;\\r\\n        const target = server.target;\\r\\n        const moneyThresh = server.moneyThresh;\\r\\n        const securityThresh = server.securityThresh;\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        } else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}],\"ramUsage\":2.2,\"server\":\"n00dles\",\"_hash\":\"c19c706a9b823af7ee4e4830336d2e15969f12690a27821ac003d86bd8a13c76\",\"moduleSequenceNumber\":6258,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":3.533999999999989,\"minDifficulty\":1,\"moneyAvailable\":1750000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"60.7.7.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let paramLength = ns.args[0];\\r\\n    let targetServers = [];\\r\\n    for (var i = 0; i < paramLength / 3; i++) {\\r\\n        targetServers.push({\\r\\n            target: ns.args[i * 3 + 1],\\r\\n            moneyThresh: ns.args[i * 3 + 2],\\r\\n            securityThresh: ns.args[i * 3 + 3]\\r\\n        });\\r\\n    }\\r\\n    ns.print(JSON.stringify(targetServers));\\r\\n    // pick a random server to start on\\r\\n    i = Math.floor(Math.random() * (targetServers.length))\\r\\n    while (true) {\\r\\n        let server = targetServers[i];\\r\\n        ns.print(JSON.stringify(server));\\r\\n        // iterate through the servers\\r\\n        i = i++ % targetServers.length;\\r\\n        const target = server.target;\\r\\n        const moneyThresh = server.moneyThresh;\\r\\n        const securityThresh = server.securityThresh;\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        } else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}],\"ramUsage\":2.2,\"server\":\"foodnstuff\",\"_hash\":\"c19c706a9b823af7ee4e4830336d2e15969f12690a27821ac003d86bd8a13c76\",\"moduleSequenceNumber\":6264,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":6.535999999999989,\"minDifficulty\":3,\"moneyAvailable\":2266142.5319791054,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"19.4.6.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let paramLength = ns.args[0];\\r\\n    let targetServers = [];\\r\\n    for (var i = 0; i < paramLength / 3; i++) {\\r\\n        targetServers.push({\\r\\n            target: ns.args[i * 3 + 1],\\r\\n            moneyThresh: ns.args[i * 3 + 2],\\r\\n            securityThresh: ns.args[i * 3 + 3]\\r\\n        });\\r\\n    }\\r\\n    ns.print(JSON.stringify(targetServers));\\r\\n    // pick a random server to start on\\r\\n    i = Math.floor(Math.random() * (targetServers.length))\\r\\n    while (true) {\\r\\n        let server = targetServers[i];\\r\\n        ns.print(JSON.stringify(server));\\r\\n        // iterate through the servers\\r\\n        i = i++ % targetServers.length;\\r\\n        const target = server.target;\\r\\n        const moneyThresh = server.moneyThresh;\\r\\n        const securityThresh = server.securityThresh;\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        } else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}],\"ramUsage\":2.2,\"server\":\"sigma-cosmetics\",\"_hash\":\"c19c706a9b823af7ee4e4830336d2e15969f12690a27821ac003d86bd8a13c76\",\"moduleSequenceNumber\":6273,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"5.9.2.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[9,\"silver-helix\",843750000,15,\"crush-fitness\",1121446331.25,20,\"comptek\",4188031481.25,25],\"dataMap\":{\"silver-helix\":[371441567,245,490,91]},\"filename\":\"early-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11566.917599999986,\"onlineMoneyMade\":371441567,\"onlineRunningTime\":28824.21000000106,\"pid\":163,\"ramUsage\":2.2,\"server\":\"joesguns\",\"threads\":7,\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let paramLength = ns.args[0];\\r\\n    let targetServers = [];\\r\\n    for (var i = 0; i < paramLength / 3; i++) {\\r\\n        targetServers.push({\\r\\n            target: ns.args[i * 3 + 1],\\r\\n            moneyThresh: ns.args[i * 3 + 2],\\r\\n            securityThresh: ns.args[i * 3 + 3]\\r\\n        });\\r\\n    }\\r\\n    ns.print(JSON.stringify(targetServers));\\r\\n    // pick a random server to start on\\r\\n    i = Math.floor(Math.random() * (targetServers.length))\\r\\n    while (true) {\\r\\n        let server = targetServers[i];\\r\\n        ns.print(JSON.stringify(server));\\r\\n        // iterate through the servers\\r\\n        i = i++ % targetServers.length;\\r\\n        const target = server.target;\\r\\n        const moneyThresh = server.moneyThresh;\\r\\n        const securityThresh = server.securityThresh;\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        } else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}],\"ramUsage\":2.2,\"server\":\"joesguns\",\"_hash\":\"c19c706a9b823af7ee4e4830336d2e15969f12690a27821ac003d86bd8a13c76\",\"moduleSequenceNumber\":6276,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.907999999999992,\"minDifficulty\":5,\"moneyAvailable\":3967832.1247907667,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"12.6.6.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let paramLength = ns.args[0];\\r\\n    let targetServers = [];\\r\\n    for (var i = 0; i < paramLength / 3; i++) {\\r\\n        targetServers.push({\\r\\n            target: ns.args[i * 3 + 1],\\r\\n            moneyThresh: ns.args[i * 3 + 2],\\r\\n            securityThresh: ns.args[i * 3 + 3]\\r\\n        });\\r\\n    }\\r\\n    ns.print(JSON.stringify(targetServers));\\r\\n    // pick a random server to start on\\r\\n    i = Math.floor(Math.random() * (targetServers.length))\\r\\n    while (true) {\\r\\n        let server = targetServers[i];\\r\\n        ns.print(JSON.stringify(server));\\r\\n        // iterate through the servers\\r\\n        i = i++ % targetServers.length;\\r\\n        const target = server.target;\\r\\n        const moneyThresh = server.moneyThresh;\\r\\n        const securityThresh = server.securityThresh;\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        } else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}],\"ramUsage\":2.2,\"server\":\"zer0\",\"_hash\":\"c19c706a9b823af7ee4e4830336d2e15969f12690a27821ac003d86bd8a13c76\",\"moduleSequenceNumber\":6267,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"foodnstuff\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"49.1.2.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let paramLength = ns.args[0];\\r\\n    let targetServers = [];\\r\\n    for (var i = 0; i < paramLength / 3; i++) {\\r\\n        targetServers.push({\\r\\n            target: ns.args[i * 3 + 1],\\r\\n            moneyThresh: ns.args[i * 3 + 2],\\r\\n            securityThresh: ns.args[i * 3 + 3]\\r\\n        });\\r\\n    }\\r\\n    ns.print(JSON.stringify(targetServers));\\r\\n    // pick a random server to start on\\r\\n    i = Math.floor(Math.random() * (targetServers.length))\\r\\n    while (true) {\\r\\n        let server = targetServers[i];\\r\\n        ns.print(JSON.stringify(server));\\r\\n        // iterate through the servers\\r\\n        i = i++ % targetServers.length;\\r\\n        const target = server.target;\\r\\n        const moneyThresh = server.moneyThresh;\\r\\n        const securityThresh = server.securityThresh;\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        } else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}],\"ramUsage\":2.2,\"server\":\"nectar-net\",\"_hash\":\"c19c706a9b823af7ee4e4830336d2e15969f12690a27821ac003d86bd8a13c76\",\"moduleSequenceNumber\":6261,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"n00dles\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"93.9.8.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":30.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[9,\"silver-helix\",843750000,15,\"crush-fitness\",1121446331.25,20,\"comptek\",4188031481.25,25],\"dataMap\":{\"silver-helix\":[698486838,462,1036,154]},\"filename\":\"early-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":23133.835199999972,\"onlineMoneyMade\":698486838,\"onlineRunningTime\":28824.21000000106,\"pid\":161,\"ramUsage\":2.2,\"server\":\"neo-net\",\"threads\":14,\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let paramLength = ns.args[0];\\r\\n    let targetServers = [];\\r\\n    for (var i = 0; i < paramLength / 3; i++) {\\r\\n        targetServers.push({\\r\\n            target: ns.args[i * 3 + 1],\\r\\n            moneyThresh: ns.args[i * 3 + 2],\\r\\n            securityThresh: ns.args[i * 3 + 3]\\r\\n        });\\r\\n    }\\r\\n    ns.print(JSON.stringify(targetServers));\\r\\n    // pick a random server to start on\\r\\n    i = Math.floor(Math.random() * (targetServers.length))\\r\\n    while (true) {\\r\\n        let server = targetServers[i];\\r\\n        ns.print(JSON.stringify(server));\\r\\n        // iterate through the servers\\r\\n        i = i++ % targetServers.length;\\r\\n        const target = server.target;\\r\\n        const moneyThresh = server.moneyThresh;\\r\\n        const securityThresh = server.securityThresh;\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        } else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}],\"ramUsage\":2.2,\"server\":\"neo-net\",\"_hash\":\"c19c706a9b823af7ee4e4830336d2e15969f12690a27821ac003d86bd8a13c76\",\"moduleSequenceNumber\":6270,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"20.0.0.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":63.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[9,\"silver-helix\",843750000,15,\"crush-fitness\",1121446331.25,20,\"comptek\",4188031481.25,25],\"dataMap\":{\"crush-fitness\":[441612899,638,986,145]},\"filename\":\"early-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":35877.72816,\"onlineMoneyMade\":441612899,\"onlineRunningTime\":28824.21000000106,\"pid\":165,\"ramUsage\":2.2,\"server\":\"silver-helix\",\"threads\":29,\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let paramLength = ns.args[0];\\r\\n    let targetServers = [];\\r\\n    for (var i = 0; i < paramLength / 3; i++) {\\r\\n        targetServers.push({\\r\\n            target: ns.args[i * 3 + 1],\\r\\n            moneyThresh: ns.args[i * 3 + 2],\\r\\n            securityThresh: ns.args[i * 3 + 3]\\r\\n        });\\r\\n    }\\r\\n    ns.print(JSON.stringify(targetServers));\\r\\n    // pick a random server to start on\\r\\n    i = Math.floor(Math.random() * (targetServers.length))\\r\\n    while (true) {\\r\\n        let server = targetServers[i];\\r\\n        ns.print(JSON.stringify(server));\\r\\n        // iterate through the servers\\r\\n        i = i++ % targetServers.length;\\r\\n        const target = server.target;\\r\\n        const moneyThresh = server.moneyThresh;\\r\\n        const securityThresh = server.securityThresh;\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        } else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}],\"ramUsage\":2.2,\"server\":\"silver-helix\",\"_hash\":\"c19c706a9b823af7ee4e4830336d2e15969f12690a27821ac003d86bd8a13c76\",\"moduleSequenceNumber\":6734,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"max-hardware\",\"the-hub\",\"netlink\",\"johnson-ortho\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10.751999999999995,\"minDifficulty\":10,\"moneyAvailable\":854120388.1045939,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"37.0.6.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let paramLength = ns.args[0];\\r\\n    let targetServers = [];\\r\\n    for (var i = 0; i < paramLength / 3; i++) {\\r\\n        targetServers.push({\\r\\n            target: ns.args[i * 3 + 1],\\r\\n            moneyThresh: ns.args[i * 3 + 2],\\r\\n            securityThresh: ns.args[i * 3 + 3]\\r\\n        });\\r\\n    }\\r\\n    ns.print(JSON.stringify(targetServers));\\r\\n    // pick a random server to start on\\r\\n    i = Math.floor(Math.random() * (targetServers.length))\\r\\n    while (true) {\\r\\n        let server = targetServers[i];\\r\\n        ns.print(JSON.stringify(server));\\r\\n        // iterate through the servers\\r\\n        i = i++ % targetServers.length;\\r\\n        const target = server.target;\\r\\n        const moneyThresh = server.moneyThresh;\\r\\n        const securityThresh = server.securityThresh;\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        } else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}],\"ramUsage\":2.2,\"server\":\"hong-fang-tea\",\"_hash\":\"c19c706a9b823af7ee4e4830336d2e15969f12690a27821ac003d86bd8a13c76\",\"moduleSequenceNumber\":6282,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"19.2.7.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[9,\"silver-helix\",843750000,15,\"crush-fitness\",1121446331.25,20,\"comptek\",4188031481.25,25],\"dataMap\":{\"crush-fitness\":[133985348,196,252,35]},\"filename\":\"early-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9338.734439999995,\"onlineMoneyMade\":133985348,\"onlineRunningTime\":28823.810000001064,\"pid\":174,\"ramUsage\":2.2,\"server\":\"harakiri-sushi\",\"threads\":7,\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let paramLength = ns.args[0];\\r\\n    let targetServers = [];\\r\\n    for (var i = 0; i < paramLength / 3; i++) {\\r\\n        targetServers.push({\\r\\n            target: ns.args[i * 3 + 1],\\r\\n            moneyThresh: ns.args[i * 3 + 2],\\r\\n            securityThresh: ns.args[i * 3 + 3]\\r\\n        });\\r\\n    }\\r\\n    ns.print(JSON.stringify(targetServers));\\r\\n    // pick a random server to start on\\r\\n    i = Math.floor(Math.random() * (targetServers.length))\\r\\n    while (true) {\\r\\n        let server = targetServers[i];\\r\\n        ns.print(JSON.stringify(server));\\r\\n        // iterate through the servers\\r\\n        i = i++ % targetServers.length;\\r\\n        const target = server.target;\\r\\n        const moneyThresh = server.moneyThresh;\\r\\n        const securityThresh = server.securityThresh;\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        } else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}],\"ramUsage\":2.2,\"server\":\"harakiri-sushi\",\"_hash\":\"c19c706a9b823af7ee4e4830336d2e15969f12690a27821ac003d86bd8a13c76\",\"moduleSequenceNumber\":6288,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"43.0.0.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":30.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[9,\"silver-helix\",843750000,15,\"crush-fitness\",1121446331.25,20,\"comptek\",4188031481.25,25],\"dataMap\":{\"silver-helix\":[744621640,490,1064,154]},\"filename\":\"early-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":23702.699999999968,\"onlineMoneyMade\":744621640,\"onlineRunningTime\":28824.610000001063,\"pid\":154,\"ramUsage\":2.2,\"server\":\"phantasy\",\"threads\":14,\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let paramLength = ns.args[0];\\r\\n    let targetServers = [];\\r\\n    for (var i = 0; i < paramLength / 3; i++) {\\r\\n        targetServers.push({\\r\\n            target: ns.args[i * 3 + 1],\\r\\n            moneyThresh: ns.args[i * 3 + 2],\\r\\n            securityThresh: ns.args[i * 3 + 3]\\r\\n        });\\r\\n    }\\r\\n    ns.print(JSON.stringify(targetServers));\\r\\n    // pick a random server to start on\\r\\n    i = Math.floor(Math.random() * (targetServers.length))\\r\\n    while (true) {\\r\\n        let server = targetServers[i];\\r\\n        ns.print(JSON.stringify(server));\\r\\n        // iterate through the servers\\r\\n        i = i++ % targetServers.length;\\r\\n        const target = server.target;\\r\\n        const moneyThresh = server.moneyThresh;\\r\\n        const securityThresh = server.securityThresh;\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        } else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}],\"ramUsage\":2.2,\"server\":\"phantasy\",\"_hash\":\"c19c706a9b823af7ee4e4830336d2e15969f12690a27821ac003d86bd8a13c76\",\"moduleSequenceNumber\":6725,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nectar-net\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"72.6.6.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":30.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[9,\"silver-helix\",843750000,15,\"crush-fitness\",1121446331.25,20,\"comptek\",4188031481.25,25],\"dataMap\":{\"silver-helix\":[651763952,420,1078,154]},\"filename\":\"early-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":22991.618999999973,\"onlineMoneyMade\":651763952,\"onlineRunningTime\":28824.21000000106,\"pid\":164,\"ramUsage\":2.2,\"server\":\"max-hardware\",\"threads\":14,\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let paramLength = ns.args[0];\\r\\n    let targetServers = [];\\r\\n    for (var i = 0; i < paramLength / 3; i++) {\\r\\n        targetServers.push({\\r\\n            target: ns.args[i * 3 + 1],\\r\\n            moneyThresh: ns.args[i * 3 + 2],\\r\\n            securityThresh: ns.args[i * 3 + 3]\\r\\n        });\\r\\n    }\\r\\n    ns.print(JSON.stringify(targetServers));\\r\\n    // pick a random server to start on\\r\\n    i = Math.floor(Math.random() * (targetServers.length))\\r\\n    while (true) {\\r\\n        let server = targetServers[i];\\r\\n        ns.print(JSON.stringify(server));\\r\\n        // iterate through the servers\\r\\n        i = i++ % targetServers.length;\\r\\n        const target = server.target;\\r\\n        const moneyThresh = server.moneyThresh;\\r\\n        const securityThresh = server.securityThresh;\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        } else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}],\"ramUsage\":2.2,\"server\":\"max-hardware\",\"_hash\":\"c19c706a9b823af7ee4e4830336d2e15969f12690a27821ac003d86bd8a13c76\",\"moduleSequenceNumber\":6279,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"joesguns\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"29.4.9.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":30.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[9,\"silver-helix\",843750000,15,\"crush-fitness\",1121446331.25,20,\"comptek\",4188031481.25,25],\"dataMap\":{\"crush-fitness\":[201169682,294,476,70]},\"filename\":\"early-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17191.026719999994,\"onlineMoneyMade\":201169682,\"onlineRunningTime\":28824.410000001062,\"pid\":157,\"ramUsage\":2.2,\"server\":\"omega-net\",\"threads\":14,\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let paramLength = ns.args[0];\\r\\n    let targetServers = [];\\r\\n    for (var i = 0; i < paramLength / 3; i++) {\\r\\n        targetServers.push({\\r\\n            target: ns.args[i * 3 + 1],\\r\\n            moneyThresh: ns.args[i * 3 + 2],\\r\\n            securityThresh: ns.args[i * 3 + 3]\\r\\n        });\\r\\n    }\\r\\n    ns.print(JSON.stringify(targetServers));\\r\\n    // pick a random server to start on\\r\\n    i = Math.floor(Math.random() * (targetServers.length))\\r\\n    while (true) {\\r\\n        let server = targetServers[i];\\r\\n        ns.print(JSON.stringify(server));\\r\\n        // iterate through the servers\\r\\n        i = i++ % targetServers.length;\\r\\n        const target = server.target;\\r\\n        const moneyThresh = server.moneyThresh;\\r\\n        const securityThresh = server.securityThresh;\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        } else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}],\"ramUsage\":2.2,\"server\":\"omega-net\",\"_hash\":\"c19c706a9b823af7ee4e4830336d2e15969f12690a27821ac003d86bd8a13c76\",\"moduleSequenceNumber\":6731,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nectar-net\",\"comptek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":63481311,\"moneyMax\":1587032775,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":182,\"serverGrowth\":39}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"44.9.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let paramLength = ns.args[0];\\r\\n    let targetServers = [];\\r\\n    for (var i = 0; i < paramLength / 3; i++) {\\r\\n        targetServers.push({\\r\\n            target: ns.args[i * 3 + 1],\\r\\n            moneyThresh: ns.args[i * 3 + 2],\\r\\n            securityThresh: ns.args[i * 3 + 3]\\r\\n        });\\r\\n    }\\r\\n    ns.print(JSON.stringify(targetServers));\\r\\n    // pick a random server to start on\\r\\n    i = Math.floor(Math.random() * (targetServers.length))\\r\\n    while (true) {\\r\\n        let server = targetServers[i];\\r\\n        ns.print(JSON.stringify(server));\\r\\n        // iterate through the servers\\r\\n        i = i++ % targetServers.length;\\r\\n        const target = server.target;\\r\\n        const moneyThresh = server.moneyThresh;\\r\\n        const securityThresh = server.securityThresh;\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        } else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"early-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.2,\"server\":\"crush-fitness\",\"_hash\":\"c19c706a9b823af7ee4e4830336d2e15969f12690a27821ac003d86bd8a13c76\",\"moduleSequenceNumber\":6741,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":20.20999999999998,\"minDifficulty\":15,\"moneyAvailable\":1189579927.8628411,\"moneyMax\":1495261775,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":227,\"serverGrowth\":31}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"49.8.7.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":30.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[9,\"silver-helix\",843750000,15,\"crush-fitness\",1121446331.25,20,\"comptek\",4188031481.25,25],\"dataMap\":{\"crush-fitness\":[158781574,238,518,70]},\"filename\":\"early-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16674.003359999995,\"onlineMoneyMade\":158781574,\"onlineRunningTime\":28823.810000001064,\"pid\":175,\"ramUsage\":2.2,\"server\":\"iron-gym\",\"threads\":14,\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let paramLength = ns.args[0];\\r\\n    let targetServers = [];\\r\\n    for (var i = 0; i < paramLength / 3; i++) {\\r\\n        targetServers.push({\\r\\n            target: ns.args[i * 3 + 1],\\r\\n            moneyThresh: ns.args[i * 3 + 2],\\r\\n            securityThresh: ns.args[i * 3 + 3]\\r\\n        });\\r\\n    }\\r\\n    ns.print(JSON.stringify(targetServers));\\r\\n    // pick a random server to start on\\r\\n    i = Math.floor(Math.random() * (targetServers.length))\\r\\n    while (true) {\\r\\n        let server = targetServers[i];\\r\\n        ns.print(JSON.stringify(server));\\r\\n        // iterate through the servers\\r\\n        i = i++ % targetServers.length;\\r\\n        const target = server.target;\\r\\n        const moneyThresh = server.moneyThresh;\\r\\n        const securityThresh = server.securityThresh;\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        } else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}],\"ramUsage\":2.2,\"server\":\"iron-gym\",\"_hash\":\"c19c706a9b823af7ee4e4830336d2e15969f12690a27821ac003d86bd8a13c76\",\"moduleSequenceNumber\":6291,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"13.1.4.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let paramLength = ns.args[0];\\r\\n    let targetServers = [];\\r\\n    for (var i = 0; i < paramLength / 3; i++) {\\r\\n        targetServers.push({\\r\\n            target: ns.args[i * 3 + 1],\\r\\n            moneyThresh: ns.args[i * 3 + 2],\\r\\n            securityThresh: ns.args[i * 3 + 3]\\r\\n        });\\r\\n    }\\r\\n    ns.print(JSON.stringify(targetServers));\\r\\n    // pick a random server to start on\\r\\n    i = Math.floor(Math.random() * (targetServers.length))\\r\\n    while (true) {\\r\\n        let server = targetServers[i];\\r\\n        ns.print(JSON.stringify(server));\\r\\n        // iterate through the servers\\r\\n        i = i++ % targetServers.length;\\r\\n        const target = server.target;\\r\\n        const moneyThresh = server.moneyThresh;\\r\\n        const securityThresh = server.securityThresh;\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        } else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}],\"ramUsage\":2.2,\"server\":\"millenium-fitness\",\"_hash\":\"c19c706a9b823af7ee4e4830336d2e15969f12690a27821ac003d86bd8a13c76\",\"moduleSequenceNumber\":6963,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"I.I.I.I\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":503,\"serverGrowth\":34}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"68.6.1.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":962,\"serverGrowth\":51}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"55.9.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":763,\"serverGrowth\":47}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-687169.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[6,11],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"14.2.9.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":534,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"16.2.3.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":63.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[9,\"silver-helix\",843750000,15,\"crush-fitness\",1121446331.25,20,\"comptek\",4188031481.25,25],\"dataMap\":{\"silver-helix\":[1328662202,841,2233,319]},\"filename\":\"early-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":47134.512000000104,\"onlineMoneyMade\":1328662202,\"onlineRunningTime\":28824.01000000106,\"pid\":168,\"ramUsage\":2.2,\"server\":\"I.I.I.I\",\"threads\":29,\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let paramLength = ns.args[0];\\r\\n    let targetServers = [];\\r\\n    for (var i = 0; i < paramLength / 3; i++) {\\r\\n        targetServers.push({\\r\\n            target: ns.args[i * 3 + 1],\\r\\n            moneyThresh: ns.args[i * 3 + 2],\\r\\n            securityThresh: ns.args[i * 3 + 3]\\r\\n        });\\r\\n    }\\r\\n    ns.print(JSON.stringify(targetServers));\\r\\n    // pick a random server to start on\\r\\n    i = Math.floor(Math.random() * (targetServers.length))\\r\\n    while (true) {\\r\\n        let server = targetServers[i];\\r\\n        ns.print(JSON.stringify(server));\\r\\n        // iterate through the servers\\r\\n        i = i++ % targetServers.length;\\r\\n        const target = server.target;\\r\\n        const moneyThresh = server.moneyThresh;\\r\\n        const securityThresh = server.securityThresh;\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        } else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}],\"ramUsage\":2.2,\"server\":\"I.I.I.I\",\"_hash\":\"c19c706a9b823af7ee4e4830336d2e15969f12690a27821ac003d86bd8a13c76\",\"moduleSequenceNumber\":6957,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"netlink\",\"rho-construction\",\"alpha-ent\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":340,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"96.0.8.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":127.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[9,\"silver-helix\",843750000,15,\"crush-fitness\",1121446331.25,20,\"comptek\",4188031481.25,25],\"dataMap\":{\"crush-fitness\":[813473548,1160,1972,290]},\"filename\":\"early-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":70148.99088,\"onlineMoneyMade\":813473548,\"onlineRunningTime\":28824.610000001063,\"pid\":155,\"ramUsage\":2.2,\"server\":\"avmnite-02h\",\"threads\":58,\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let paramLength = ns.args[0];\\r\\n    let targetServers = [];\\r\\n    for (var i = 0; i < paramLength / 3; i++) {\\r\\n        targetServers.push({\\r\\n            target: ns.args[i * 3 + 1],\\r\\n            moneyThresh: ns.args[i * 3 + 2],\\r\\n            securityThresh: ns.args[i * 3 + 3]\\r\\n        });\\r\\n    }\\r\\n    ns.print(JSON.stringify(targetServers));\\r\\n    // pick a random server to start on\\r\\n    i = Math.floor(Math.random() * (targetServers.length))\\r\\n    while (true) {\\r\\n        let server = targetServers[i];\\r\\n        ns.print(JSON.stringify(server));\\r\\n        // iterate through the servers\\r\\n        i = i++ % targetServers.length;\\r\\n        const target = server.target;\\r\\n        const moneyThresh = server.moneyThresh;\\r\\n        const securityThresh = server.securityThresh;\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        } else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}],\"ramUsage\":2.2,\"server\":\"avmnite-02h\",\"_hash\":\"c19c706a9b823af7ee4e4830336d2e15969f12690a27821ac003d86bd8a13c76\",\"moduleSequenceNumber\":6728,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"phantasy\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":218,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"60.6.1.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":538,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"81.5.6.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":6.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[9,\"silver-helix\",843750000,15,\"crush-fitness\",1121446331.25,20,\"comptek\",4188031481.25,25],\"dataMap\":{\"silver-helix\":[149901423,99,225,33]},\"filename\":\"early-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4977.5670000000155,\"onlineMoneyMade\":149901423,\"onlineRunningTime\":28823.810000001064,\"pid\":173,\"ramUsage\":2.2,\"server\":\"CSEC\",\"threads\":3,\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let paramLength = ns.args[0];\\r\\n    let targetServers = [];\\r\\n    for (var i = 0; i < paramLength / 3; i++) {\\r\\n        targetServers.push({\\r\\n            target: ns.args[i * 3 + 1],\\r\\n            moneyThresh: ns.args[i * 3 + 2],\\r\\n            securityThresh: ns.args[i * 3 + 3]\\r\\n        });\\r\\n    }\\r\\n    ns.print(JSON.stringify(targetServers));\\r\\n    // pick a random server to start on\\r\\n    i = Math.floor(Math.random() * (targetServers.length))\\r\\n    while (true) {\\r\\n        let server = targetServers[i];\\r\\n        ns.print(JSON.stringify(server));\\r\\n        // iterate through the servers\\r\\n        i = i++ % targetServers.length;\\r\\n        const target = server.target;\\r\\n        const moneyThresh = server.moneyThresh;\\r\\n        const securityThresh = server.securityThresh;\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        } else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}],\"ramUsage\":2.2,\"server\":\"CSEC\",\"_hash\":\"c19c706a9b823af7ee4e4830336d2e15969f12690a27821ac003d86bd8a13c76\",\"moduleSequenceNumber\":6285,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":59,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"32.9.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"19.9.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"4.5.2.2\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-0\",\"httpPortOpen\":false,\"ip\":\"84.7.5.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let paramLength = ns.args[0];\\r\\n    let targetServers = [];\\r\\n    for (var i = 0; i < paramLength / 3; i++) {\\r\\n        targetServers.push({\\r\\n            target: ns.args[i * 3 + 1],\\r\\n            moneyThresh: ns.args[i * 3 + 2],\\r\\n            securityThresh: ns.args[i * 3 + 3]\\r\\n        });\\r\\n    }\\r\\n    ns.print(JSON.stringify(targetServers));\\r\\n    // pick a random server to start on\\r\\n    i = Math.floor(Math.random() * (targetServers.length))\\r\\n    while (true) {\\r\\n        let server = targetServers[i];\\r\\n        ns.print(JSON.stringify(server));\\r\\n        // iterate through the servers\\r\\n        i = i++ % targetServers.length;\\r\\n        const target = server.target;\\r\\n        const moneyThresh = server.moneyThresh;\\r\\n        const securityThresh = server.securityThresh;\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        } else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}],\"ramUsage\":2.2,\"server\":\"pserv-0\",\"_hash\":\"c19c706a9b823af7ee4e4830336d2e15969f12690a27821ac003d86bd8a13c76\",\"moduleSequenceNumber\":7165,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1\",\"httpPortOpen\":false,\"ip\":\"97.0.1.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":30.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[9,\"silver-helix\",843750000,15,\"crush-fitness\",1121446331.25,20,\"comptek\",4188031481.25,25],\"dataMap\":{\"silver-helix\":[761049926,490,1050,154]},\"filename\":\"early-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":23560.48379999997,\"onlineMoneyMade\":761049926,\"onlineRunningTime\":28823.610000001063,\"pid\":177,\"ramUsage\":2.2,\"server\":\"pserv-1\",\"threads\":14,\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let paramLength = ns.args[0];\\r\\n    let targetServers = [];\\r\\n    for (var i = 0; i < paramLength / 3; i++) {\\r\\n        targetServers.push({\\r\\n            target: ns.args[i * 3 + 1],\\r\\n            moneyThresh: ns.args[i * 3 + 2],\\r\\n            securityThresh: ns.args[i * 3 + 3]\\r\\n        });\\r\\n    }\\r\\n    ns.print(JSON.stringify(targetServers));\\r\\n    // pick a random server to start on\\r\\n    i = Math.floor(Math.random() * (targetServers.length))\\r\\n    while (true) {\\r\\n        let server = targetServers[i];\\r\\n        ns.print(JSON.stringify(server));\\r\\n        // iterate through the servers\\r\\n        i = i++ % targetServers.length;\\r\\n        const target = server.target;\\r\\n        const moneyThresh = server.moneyThresh;\\r\\n        const securityThresh = server.securityThresh;\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        } else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}],\"ramUsage\":2.2,\"server\":\"pserv-1\",\"_hash\":\"c19c706a9b823af7ee4e4830336d2e15969f12690a27821ac003d86bd8a13c76\",\"moduleSequenceNumber\":8101,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2\",\"httpPortOpen\":false,\"ip\":\"56.1.7.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let paramLength = ns.args[0];\\r\\n    let targetServers = [];\\r\\n    for (var i = 0; i < paramLength / 3; i++) {\\r\\n        targetServers.push({\\r\\n            target: ns.args[i * 3 + 1],\\r\\n            moneyThresh: ns.args[i * 3 + 2],\\r\\n            securityThresh: ns.args[i * 3 + 3]\\r\\n        });\\r\\n    }\\r\\n    ns.print(JSON.stringify(targetServers));\\r\\n    // pick a random server to start on\\r\\n    i = Math.floor(Math.random() * (targetServers.length))\\r\\n    while (true) {\\r\\n        let server = targetServers[i];\\r\\n        ns.print(JSON.stringify(server));\\r\\n        // iterate through the servers\\r\\n        i = i++ % targetServers.length;\\r\\n        const target = server.target;\\r\\n        const moneyThresh = server.moneyThresh;\\r\\n        const securityThresh = server.securityThresh;\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        } else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}],\"ramUsage\":2.2,\"server\":\"pserv-2\",\"_hash\":\"c19c706a9b823af7ee4e4830336d2e15969f12690a27821ac003d86bd8a13c76\",\"moduleSequenceNumber\":8104,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-3\",\"httpPortOpen\":false,\"ip\":\"15.1.0.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let paramLength = ns.args[0];\\r\\n    let targetServers = [];\\r\\n    for (var i = 0; i < paramLength / 3; i++) {\\r\\n        targetServers.push({\\r\\n            target: ns.args[i * 3 + 1],\\r\\n            moneyThresh: ns.args[i * 3 + 2],\\r\\n            securityThresh: ns.args[i * 3 + 3]\\r\\n        });\\r\\n    }\\r\\n    ns.print(JSON.stringify(targetServers));\\r\\n    // pick a random server to start on\\r\\n    i = Math.floor(Math.random() * (targetServers.length))\\r\\n    while (true) {\\r\\n        let server = targetServers[i];\\r\\n        ns.print(JSON.stringify(server));\\r\\n        // iterate through the servers\\r\\n        i = i++ % targetServers.length;\\r\\n        const target = server.target;\\r\\n        const moneyThresh = server.moneyThresh;\\r\\n        const securityThresh = server.securityThresh;\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        } else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}],\"ramUsage\":2.2,\"server\":\"pserv-3\",\"_hash\":\"c19c706a9b823af7ee4e4830336d2e15969f12690a27821ac003d86bd8a13c76\",\"moduleSequenceNumber\":8107,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4\",\"httpPortOpen\":false,\"ip\":\"49.8.7.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":30.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[9,\"silver-helix\",843750000,15,\"crush-fitness\",1121446331.25,20,\"comptek\",4188031481.25,25],\"dataMap\":{\"crush-fitness\":[200881912,294,476,70]},\"filename\":\"early-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17191.026719999994,\"onlineMoneyMade\":200881912,\"onlineRunningTime\":28823.610000001063,\"pid\":180,\"ramUsage\":2.2,\"server\":\"pserv-4\",\"threads\":14,\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let paramLength = ns.args[0];\\r\\n    let targetServers = [];\\r\\n    for (var i = 0; i < paramLength / 3; i++) {\\r\\n        targetServers.push({\\r\\n            target: ns.args[i * 3 + 1],\\r\\n            moneyThresh: ns.args[i * 3 + 2],\\r\\n            securityThresh: ns.args[i * 3 + 3]\\r\\n        });\\r\\n    }\\r\\n    ns.print(JSON.stringify(targetServers));\\r\\n    // pick a random server to start on\\r\\n    i = Math.floor(Math.random() * (targetServers.length))\\r\\n    while (true) {\\r\\n        let server = targetServers[i];\\r\\n        ns.print(JSON.stringify(server));\\r\\n        // iterate through the servers\\r\\n        i = i++ % targetServers.length;\\r\\n        const target = server.target;\\r\\n        const moneyThresh = server.moneyThresh;\\r\\n        const securityThresh = server.securityThresh;\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        } else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}],\"ramUsage\":2.2,\"server\":\"pserv-4\",\"_hash\":\"c19c706a9b823af7ee4e4830336d2e15969f12690a27821ac003d86bd8a13c76\",\"moduleSequenceNumber\":8110,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-5\",\"httpPortOpen\":false,\"ip\":\"59.0.0.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":30.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[9,\"silver-helix\",843750000,15,\"crush-fitness\",1121446331.25,20,\"comptek\",4188031481.25,25],\"dataMap\":{\"silver-helix\":[634546248,420,1064,154]},\"filename\":\"early-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":22896.80819999997,\"onlineMoneyMade\":634546248,\"onlineRunningTime\":28823.610000001063,\"pid\":181,\"ramUsage\":2.2,\"server\":\"pserv-5\",\"threads\":14,\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let paramLength = ns.args[0];\\r\\n    let targetServers = [];\\r\\n    for (var i = 0; i < paramLength / 3; i++) {\\r\\n        targetServers.push({\\r\\n            target: ns.args[i * 3 + 1],\\r\\n            moneyThresh: ns.args[i * 3 + 2],\\r\\n            securityThresh: ns.args[i * 3 + 3]\\r\\n        });\\r\\n    }\\r\\n    ns.print(JSON.stringify(targetServers));\\r\\n    // pick a random server to start on\\r\\n    i = Math.floor(Math.random() * (targetServers.length))\\r\\n    while (true) {\\r\\n        let server = targetServers[i];\\r\\n        ns.print(JSON.stringify(server));\\r\\n        // iterate through the servers\\r\\n        i = i++ % targetServers.length;\\r\\n        const target = server.target;\\r\\n        const moneyThresh = server.moneyThresh;\\r\\n        const securityThresh = server.securityThresh;\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        } else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}],\"ramUsage\":2.2,\"server\":\"pserv-5\",\"_hash\":\"c19c706a9b823af7ee4e4830336d2e15969f12690a27821ac003d86bd8a13c76\",\"moduleSequenceNumber\":8113,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-6\",\"httpPortOpen\":false,\"ip\":\"47.1.6.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":30.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[9,\"silver-helix\",843750000,15,\"crush-fitness\",1121446331.25,20,\"comptek\",4188031481.25,25],\"dataMap\":{\"silver-helix\":[551534228,364,1078,154]},\"filename\":\"early-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":22422.754199999978,\"onlineMoneyMade\":551534228,\"onlineRunningTime\":28823.610000001063,\"pid\":182,\"ramUsage\":2.2,\"server\":\"pserv-6\",\"threads\":14,\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let paramLength = ns.args[0];\\r\\n    let targetServers = [];\\r\\n    for (var i = 0; i < paramLength / 3; i++) {\\r\\n        targetServers.push({\\r\\n            target: ns.args[i * 3 + 1],\\r\\n            moneyThresh: ns.args[i * 3 + 2],\\r\\n            securityThresh: ns.args[i * 3 + 3]\\r\\n        });\\r\\n    }\\r\\n    ns.print(JSON.stringify(targetServers));\\r\\n    // pick a random server to start on\\r\\n    i = Math.floor(Math.random() * (targetServers.length))\\r\\n    while (true) {\\r\\n        let server = targetServers[i];\\r\\n        ns.print(JSON.stringify(server));\\r\\n        // iterate through the servers\\r\\n        i = i++ % targetServers.length;\\r\\n        const target = server.target;\\r\\n        const moneyThresh = server.moneyThresh;\\r\\n        const securityThresh = server.securityThresh;\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        } else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}],\"ramUsage\":2.2,\"server\":\"pserv-6\",\"_hash\":\"c19c706a9b823af7ee4e4830336d2e15969f12690a27821ac003d86bd8a13c76\",\"moduleSequenceNumber\":8116,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-7\",\"httpPortOpen\":false,\"ip\":\"92.8.6.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":30.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[9,\"silver-helix\",843750000,15,\"crush-fitness\",1121446331.25,20,\"comptek\",4188031481.25,25],\"dataMap\":{\"crush-fitness\":[216787998,308,462,84]},\"filename\":\"early-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17191.026719999987,\"onlineMoneyMade\":216787998,\"onlineRunningTime\":28823.610000001063,\"pid\":183,\"ramUsage\":2.2,\"server\":\"pserv-7\",\"threads\":14,\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let paramLength = ns.args[0];\\r\\n    let targetServers = [];\\r\\n    for (var i = 0; i < paramLength / 3; i++) {\\r\\n        targetServers.push({\\r\\n            target: ns.args[i * 3 + 1],\\r\\n            moneyThresh: ns.args[i * 3 + 2],\\r\\n            securityThresh: ns.args[i * 3 + 3]\\r\\n        });\\r\\n    }\\r\\n    ns.print(JSON.stringify(targetServers));\\r\\n    // pick a random server to start on\\r\\n    i = Math.floor(Math.random() * (targetServers.length))\\r\\n    while (true) {\\r\\n        let server = targetServers[i];\\r\\n        ns.print(JSON.stringify(server));\\r\\n        // iterate through the servers\\r\\n        i = i++ % targetServers.length;\\r\\n        const target = server.target;\\r\\n        const moneyThresh = server.moneyThresh;\\r\\n        const securityThresh = server.securityThresh;\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        } else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}],\"ramUsage\":2.2,\"server\":\"pserv-7\",\"_hash\":\"c19c706a9b823af7ee4e4830336d2e15969f12690a27821ac003d86bd8a13c76\",\"moduleSequenceNumber\":8119,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8\",\"httpPortOpen\":false,\"ip\":\"64.5.7.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":30.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[9,\"silver-helix\",843750000,15,\"crush-fitness\",1121446331.25,20,\"comptek\",4188031481.25,25],\"dataMap\":{\"silver-helix\":[593976502,392,1092,154]},\"filename\":\"early-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":22754.591999999975,\"onlineMoneyMade\":593976502,\"onlineRunningTime\":28823.610000001063,\"pid\":184,\"ramUsage\":2.2,\"server\":\"pserv-8\",\"threads\":14,\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let paramLength = ns.args[0];\\r\\n    let targetServers = [];\\r\\n    for (var i = 0; i < paramLength / 3; i++) {\\r\\n        targetServers.push({\\r\\n            target: ns.args[i * 3 + 1],\\r\\n            moneyThresh: ns.args[i * 3 + 2],\\r\\n            securityThresh: ns.args[i * 3 + 3]\\r\\n        });\\r\\n    }\\r\\n    ns.print(JSON.stringify(targetServers));\\r\\n    // pick a random server to start on\\r\\n    i = Math.floor(Math.random() * (targetServers.length))\\r\\n    while (true) {\\r\\n        let server = targetServers[i];\\r\\n        ns.print(JSON.stringify(server));\\r\\n        // iterate through the servers\\r\\n        i = i++ % targetServers.length;\\r\\n        const target = server.target;\\r\\n        const moneyThresh = server.moneyThresh;\\r\\n        const securityThresh = server.securityThresh;\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        } else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"early-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ea62cdb0-e696-4e2e-be67-2be122bda4eb\"}],\"ramUsage\":2.2,\"server\":\"pserv-8\",\"_hash\":\"c19c706a9b823af7ee4e4830336d2e15969f12690a27821ac003d86bd8a13c76\",\"moduleSequenceNumber\":8122,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-9\",\"httpPortOpen\":false,\"ip\":\"48.8.9.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-10\",\"httpPortOpen\":false,\"ip\":\"8.3.4.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-11\",\"httpPortOpen\":false,\"ip\":\"80.0.6.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-12\",\"httpPortOpen\":false,\"ip\":\"34.9.8.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-13\",\"httpPortOpen\":false,\"ip\":\"5.6.6.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-14\",\"httpPortOpen\":false,\"ip\":\"23.6.7.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-15\",\"httpPortOpen\":false,\"ip\":\"66.6.0.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-16\",\"httpPortOpen\":false,\"ip\":\"5.4.2.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-17\",\"httpPortOpen\":false,\"ip\":\"71.5.3.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-18\",\"httpPortOpen\":false,\"ip\":\"60.0.1.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-19\",\"httpPortOpen\":false,\"ip\":\"38.6.2.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-20\",\"httpPortOpen\":false,\"ip\":\"15.6.8.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-21\",\"httpPortOpen\":false,\"ip\":\"15.8.1.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-22\",\"httpPortOpen\":false,\"ip\":\"42.1.1.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-23\",\"httpPortOpen\":false,\"ip\":\"26.2.0.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-24\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-24\",\"httpPortOpen\":false,\"ip\":\"60.3.0.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Ishima\",\"playerReputation\":16.437547999999968}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":43.092,\"isBanned\":true,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":56793.103490478985}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":92.7163,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":29944.88515485634}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":3773.328447858938}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":false}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":10,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true}}","VersionSave":"9","AllGangsSave":"","LastExportBonus":"1642540916453","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1642607803511"}}