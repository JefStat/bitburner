{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":196,\"hp\":12,\"max_hp\":37,\"strength\":273,\"defense\":273,\"dexterity\":277,\"agility\":277,\"charisma\":327,\"intelligence\":172,\"hacking_chance_mult\":1.4738578394107988,\"hacking_speed_mult\":1.4738578394107988,\"hacking_money_mult\":1.4738578394107988,\"hacking_grow_mult\":1.4738578394107988,\"hacking_exp\":77845881.82661685,\"strength_exp\":385174.1122969988,\"defense_exp\":385174.1122969988,\"dexterity_exp\":423793.91458240536,\"agility_exp\":423793.91458240536,\"charisma_exp\":68634.24144638106,\"intelligence_exp\":112249.51720716614,\"hacking_mult\":1.4738578394107988,\"strength_mult\":1.2928577538691215,\"defense_mult\":1.2928577538691215,\"dexterity_mult\":1.2928577538691215,\"agility_mult\":1.2928577538691215,\"charisma_mult\":2.092878131963334,\"hacking_exp_mult\":1.4738578394107988,\"strength_exp_mult\":1.2928577538691215,\"defense_exp_mult\":1.2928577538691215,\"dexterity_exp_mult\":1.2928577538691215,\"agility_exp_mult\":1.2928577538691215,\"charisma_exp_mult\":1.2928577538691215,\"company_rep_mult\":1.2928577538691215,\"faction_rep_mult\":1.2928577538691215,\"money\":8439747232.368131,\"city\":\"New Tokyo\",\"location\":\"VitaLife\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\",\"pserv-24\"],\"hacknetNodes\":[],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Aevum\",\"Sector-12\",\"Tetrads\",\"Slum Snakes\",\"Tian Di Hui\",\"CyberSec\",\"Bladeburners\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"NeuroFlux Governor\"},{\"level\":2,\"name\":\"NeuroFlux Governor\"},{\"level\":3,\"name\":\"NeuroFlux Governor\"}],\"augmentations\":[],\"sourceFiles\":[{\"lvl\":3,\"n\":1},{\"lvl\":3,\"n\":5},{\"lvl\":3,\"n\":2},{\"lvl\":3,\"n\":3},{\"lvl\":3,\"n\":4},{\"lvl\":3,\"n\":10},{\"lvl\":1,\"n\":9}],\"numPeopleKilled\":5341,\"karma\":-329121.75,\"crime_money_mult\":1.8358580104941524,\"crime_success_mult\":1.8358580104941524,\"isWorking\":false,\"focus\":false,\"workType\":\"\",\"workCostMult\":5,\"workExpMult\":4,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":100,\"graftAugmentationName\":\"\",\"timeWorkedGraftAugmentation\":0,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.4738578394107988,\"hacknet_node_money_mult\":1.3962863741786513,\"hacknet_node_purchase_cost_mult\":0.6558057286509372,\"hacknet_node_ram_cost_mult\":0.6558057286509372,\"hacknet_node_core_cost_mult\":0.6558057286509372,\"hacknet_node_level_cost_mult\":0.6558057286509372,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":{\"ctor\":\"Gang\",\"data\":{\"facName\":\"Slum Snakes\",\"members\":[{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":870845.0711610764,\"hack\":12360,\"str\":20188,\"def\":15869,\"dex\":12185,\"agi\":4,\"cha\":9744,\"hack_exp\":149080.92171614995,\"str_exp\":170298.36793101183,\"def_exp\":150595.8000212553,\"dex_exp\":191865.43289323925,\"agi_exp\":1.5374282897290865,\"cha_exp\":214800.24332162394,\"hack_mult\":2.2723515045,\"str_mult\":4.560254899200001,\"def_mult\":3.6338562703872004,\"dex_mult\":1.9305000000000003,\"agi_mult\":4.223569571020801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":1800273.0985152274,\"str_asc_points\":1138493.768546252,\"def_asc_points\":1156315.019941597,\"dex_asc_points\":2222479.250211395,\"agi_asc_points\":1835.924860632306,\"cha_asc_points\":2395082.795920068,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\"],\"name\":\"Teal\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":421495.05326811405,\"hack\":12426,\"str\":20440,\"def\":16189,\"dex\":12418,\"agi\":4,\"cha\":9988,\"hack_exp\":149241.8302616801,\"str_exp\":219075.99819320612,\"def_exp\":194837.76245308956,\"dex_exp\":206980.90865374898,\"agi_exp\":1.0249521931527243,\"cha_exp\":242570.0759218637,\"hack_mult\":2.2723515045,\"str_mult\":4.560254899200001,\"def_mult\":3.6338562703872004,\"dex_mult\":1.9305000000000003,\"agi_mult\":4.223569571020801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":1818900.023746034,\"str_asc_points\":1072199.6414473301,\"def_asc_points\":1101471.0499908468,\"dex_asc_points\":2250285.3248695917,\"agi_asc_points\":1879.028487924661,\"cha_asc_points\":2418612.3837844757,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\"],\"name\":\"Fawn\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":13384.217671497609,\"hack\":6496,\"str\":11834,\"def\":9160,\"dex\":6819,\"agi\":4,\"cha\":5638,\"hack_exp\":8353.031721298992,\"str_exp\":12711.156714114588,\"def_exp\":11242.106148433431,\"dex_exp\":11597.948215499053,\"agi_exp\":0,\"cha_exp\":13661.234555278628,\"hack_mult\":2.2723515045,\"str_mult\":4.560254899200001,\"def_mult\":3.6338562703872004,\"dex_mult\":1.9305000000000003,\"agi_mult\":4.223569571020801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":1976078.337168807,\"str_asc_points\":1251827.2632138391,\"def_asc_points\":1271775.292956789,\"dex_asc_points\":2450346.7184522534,\"agi_asc_points\":1917.8043845873717,\"cha_asc_points\":2659996.931837051,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\"],\"name\":\"TFT\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":779966.4806591636,\"hack\":12234,\"str\":19365,\"def\":15508,\"dex\":12247,\"agi\":4,\"cha\":9860,\"hack_exp\":143076.91321557676,\"str_exp\":163490.27581734714,\"def_exp\":146891.66596609258,\"dex_exp\":187717.81803690782,\"agi_exp\":1.5374282897290865,\"cha_exp\":212274.26490912147,\"hack_mult\":2.2723515045,\"str_mult\":4.560254899200001,\"def_mult\":3.6338562703872004,\"dex_mult\":1.9305000000000003,\"agi_mult\":4.223569571020801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":1789433.8761517974,\"str_asc_points\":1062456.0375033712,\"def_asc_points\":1113941.001178863,\"dex_asc_points\":2261858.5439667418,\"agi_asc_points\":1914.863386364855,\"cha_asc_points\":2462104.683391627,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\"],\"name\":\"Turduck'n\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":451855.06374462607,\"hack\":11850,\"str\":19364,\"def\":15569,\"dex\":11978,\"agi\":4,\"cha\":9713,\"hack_exp\":120871.07870449212,\"str_exp\":160021.16625997616,\"def_exp\":144267.43953395195,\"dex_exp\":164607.22954917132,\"agi_exp\":1.5374282897290865,\"cha_exp\":190952.19003070297,\"hack_mult\":2.2723515045,\"str_mult\":4.560254899200001,\"def_mult\":3.6338562703872004,\"dex_mult\":1.9305000000000003,\"agi_mult\":4.223569571020801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":1783936.8576917865,\"str_asc_points\":1070278.98731506,\"def_asc_points\":1129846.762054687,\"dex_asc_points\":2262975.643148899,\"agi_asc_points\":1954.9829006449993,\"cha_asc_points\":2475664.0988009404,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\"],\"name\":\"Fender\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":375368.0578180088,\"hack\":11774,\"str\":19129,\"def\":15485,\"dex\":11927,\"agi\":4,\"cha\":9704,\"hack_exp\":114186.30752304567,\"str_exp\":157498.2468889268,\"def_exp\":142826.81210729133,\"dex_exp\":159033.65643548672,\"agi_exp\":1.2003320342896497,\"cha_exp\":186068.12584411917,\"hack_mult\":2.2723515045000005,\"str_mult\":4.560254899200001,\"def_mult\":3.6338562703872004,\"dex_mult\":1.9305000000000003,\"agi_mult\":4.223569571020801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":1798131.8790328156,\"str_asc_points\":1050229.2539451532,\"def_asc_points\":1121741.8164926723,\"dex_asc_points\":2270616.7568620243,\"agi_asc_points\":1925.1351961682797,\"cha_asc_points\":2492829.2635530867,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\"],\"name\":\"Just Moe\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":590696.8579677375,\"hack\":11829,\"str\":18925,\"def\":15364,\"dex\":11998,\"agi\":4,\"cha\":9775,\"hack_exp\":126581.13478786119,\"str_exp\":158606.22125941337,\"def_exp\":144177.71785155826,\"dex_exp\":174590.15909087675,\"agi_exp\":1.2003320342896497,\"cha_exp\":201299.31197570678,\"hack_mult\":2.2723515045000005,\"str_mult\":4.560254899200001,\"def_mult\":3.6338562703872004,\"dex_mult\":1.9305000000000003,\"agi_mult\":4.223569571020801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":1747926.8967531763,\"str_asc_points\":1025427.2256232362,\"def_asc_points\":1100528.9264517257,\"dex_asc_points\":2224807.7780776224,\"agi_asc_points\":1679.1406112787581,\"cha_asc_points\":2463237.9857626576,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\"],\"name\":\"Hip\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":98717.93636940922,\"hack\":9341,\"str\":16358,\"def\":13116,\"dex\":9766,\"agi\":4,\"cha\":8115,\"hack_exp\":40576.617346774234,\"str_exp\":63230.96086599392,\"def_exp\":57040.5144421621,\"dex_exp\":58999.64661070931,\"agi_exp\":0,\"cha_exp\":70659.64532294433,\"hack_mult\":2.2723515045000005,\"str_mult\":4.560254899200001,\"def_mult\":3.6338562703872004,\"dex_mult\":1.9305000000000003,\"agi_mult\":4.223569571020801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":1725187.8076900474,\"str_asc_points\":1084907.8897661455,\"def_asc_points\":1146676.5548859586,\"dex_asc_points\":2220869.6831185347,\"agi_asc_points\":1622.8729730740488,\"cha_asc_points\":2492316.491432974,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\"],\"name\":\"Mixer\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":61308.65475352267,\"hack\":6446,\"str\":13827,\"def\":11406,\"dex\":7640,\"agi\":2,\"cha\":6721,\"hack_exp\":26377.849580601684,\"str_exp\":40670.43184496628,\"def_exp\":40712.76270645042,\"dex_exp\":36710.06176586242,\"agi_exp\":0,\"cha_exp\":48327.653788338386,\"hack_mult\":1.9759578300000005,\"str_mult\":4.560254899200001,\"def_mult\":3.6338562703872004,\"dex_mult\":1.9305000000000005,\"agi_mult\":2.6397309818880004,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":1332149.3338134694,\"str_asc_points\":937567.220637473,\"def_asc_points\":1004336.112066431,\"dex_asc_points\":1673734.656914674,\"agi_asc_points\":285.53065826081274,\"cha_asc_points\":2004451.5948853635,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\"],\"name\":\"Brownstone\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":690304.6592323175,\"hack\":7821,\"str\":12320,\"def\":13411,\"dex\":6943,\"agi\":2,\"cha\":7856,\"hack_exp\":110552.08947760116,\"str_exp\":126012.30663466793,\"def_exp\":133568.8734172741,\"dex_exp\":139830.38282863042,\"agi_exp\":0.8002213561930999,\"cha_exp\":182403.73581117496,\"hack_mult\":1.9759578300000005,\"str_mult\":3.507888384000001,\"def_mult\":3.6338562703872004,\"dex_mult\":1.4850000000000003,\"agi_mult\":2.6397309818880004,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":1062015.4906881356,\"str_asc_points\":796954.1893727839,\"def_asc_points\":861719.730810209,\"dex_asc_points\":1360514.3086639934,\"agi_asc_points\":454.39947036028116,\"cha_asc_points\":1644570.7042497674,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\"],\"name\":\"Sal\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":220838.3530628584,\"hack\":6586,\"str\":11834,\"def\":12857,\"dex\":5938,\"agi\":2,\"cha\":6892,\"hack_exp\":72059.82606333446,\"str_exp\":114508.50997798677,\"def_exp\":121160.95031791081,\"dex_exp\":97501.60774002667,\"agi_exp\":1.6004427123861997,\"cha_exp\":134491.49758819395,\"hack_mult\":1.9759578300000005,\"str_mult\":3.507888384000001,\"def_mult\":3.6338562703872004,\"dex_mult\":1.4850000000000003,\"agi_mult\":2.6397309818880004,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":888220.9464443655,\"str_asc_points\":761502.1182431658,\"def_asc_points\":820481.9034403614,\"dex_asc_points\":1136064.7789959516,\"agi_asc_points\":54.399160037980664,\"cha_asc_points\":1408050.3370940145,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\"],\"name\":\"Right Hand\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":78055.62714114734,\"hack\":4341,\"str\":9911,\"def\":10818,\"dex\":4168,\"agi\":2,\"cha\":5004,\"hack_exp\":26298.94098631918,\"str_exp\":50673.52339449674,\"def_exp\":53745.57231006212,\"dex_exp\":37174.99510098463,\"agi_exp\":0,\"cha_exp\":52322.19667869738,\"hack_mult\":1.9759578300000005,\"str_mult\":3.507888384000001,\"def_mult\":3.6338562703872004,\"dex_mult\":1.4850000000000003,\"agi_mult\":2.6397309818880004,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":605191.5441542859,\"str_asc_points\":738880.580701726,\"def_asc_points\":799918.0697321554,\"dex_asc_points\":837277.044798775,\"agi_asc_points\":93.4097050012465,\"cha_asc_points\":1073787.3442560318,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\"],\"name\":\"Left Shark\"}}],\"wanted\":5541.482660232704,\"respect\":4651976.493853921,\"isHackingGang\":false,\"respectGainRate\":295.767845764182,\"wantedGainRate\":0.0020010361055746643,\"moneyGainRate\":3385506.0119389608,\"storedCycles\":2,\"storedTerritoryAndPowerCycles\":30,\"territoryClashChance\":1,\"territoryWarfareEngaged\":false,\"notifyMemberDeath\":true}},\"corporation\":null,\"bladeburner\":{\"ctor\":\"Bladeburner\",\"data\":{\"numHosp\":76,\"moneyLost\":285564472.70879805,\"rank\":2825.808707853846,\"maxRank\":2825.808707853846,\"skillPoints\":796,\"totalSkillPoints\":941,\"teamSize\":16,\"teamLost\":0,\"hpLost\":2915,\"storedCycles\":3,\"randomEventCounter\":162,\"actionTimeToComplete\":58,\"actionTimeCurrent\":47,\"actionTimeOverflow\":0,\"action\":{\"ctor\":\"ActionIdentifier\",\"data\":{\"name\":\"Bounty Hunter\",\"type\":2}},\"cities\":{\"Aevum\":{\"ctor\":\"City\",\"data\":{\"name\":\"Aevum\",\"pop\":938162786,\"popEst\":938162786,\"comms\":108,\"chaos\":14.684784143884626}},\"Chongqing\":{\"ctor\":\"City\",\"data\":{\"name\":\"Chongqing\",\"pop\":2419737667,\"popEst\":1308662977.4272034,\"comms\":38,\"chaos\":5.606426347200107}},\"Sector-12\":{\"ctor\":\"City\",\"data\":{\"name\":\"Sector-12\",\"pop\":2178987539,\"popEst\":982128536,\"comms\":108,\"chaos\":5.311561240017965}},\"New Tokyo\":{\"ctor\":\"City\",\"data\":{\"name\":\"New Tokyo\",\"pop\":1137626136,\"popEst\":774394077.2656493,\"comms\":27,\"chaos\":1.6356736527764317}},\"Ishima\":{\"ctor\":\"City\",\"data\":{\"name\":\"Ishima\",\"pop\":1169961697,\"popEst\":934191550.9175473,\"comms\":129,\"chaos\":30.42524341137502}},\"Volhaven\":{\"ctor\":\"City\",\"data\":{\"name\":\"Volhaven\",\"pop\":1985210902,\"popEst\":1745474086.9488537,\"comms\":102,\"chaos\":3.2079659999993186}}},\"city\":\"Aevum\",\"skills\":{\"Hyperdrive\":2,\"Overclock\":4,\"Cloak\":7,\"Short-Circuit\":3,\"Tracer\":3,\"Blade's Intuition\":3,\"Evasive System\":3,\"Digital Observer\":3,\"Reaper\":3,\"Datamancer\":2,\"Cyber's Edge\":2},\"skillMultipliers\":{\"successChanceAll\":1.09,\"successChanceStealth\":1.385,\"successChanceKill\":1.165,\"successChanceContract\":1.12,\"successChanceOperation\":1.12,\"successChanceEstimate\":1.1,\"actionTime\":0.96,\"effHack\":1,\"effStr\":1.06,\"effDef\":1.06,\"effDex\":1.1872000000000003,\"effAgi\":1.1872000000000003,\"effCha\":1,\"effInt\":1,\"stamina\":1.04,\"money\":1,\"expGain\":1.2},\"staminaBonus\":8.132799999999984,\"maxStamina\":115.76714094642759,\"stamina\":95.20772120217791,\"contracts\":{\"Tracking\":{\"ctor\":\"Contract\",\"data\":{\"name\":\"Tracking\",\"level\":21,\"maxLevel\":21,\"autoLevel\":true,\"baseDifficulty\":115.82631984840239,\"difficultyFac\":1.02,\"rewardFac\":1.041,\"successes\":258,\"failures\":0,\"rankGain\":0.3,\"rankLoss\":0,\"hpLoss\":0.5,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":536.3768749999788,\"weights\":{\"hack\":0,\"str\":0.05,\"def\":0.05,\"dex\":0.35,\"agi\":0.35,\"cha\":0.1,\"int\":0.05},\"decays\":{\"hack\":0,\"str\":0.91,\"def\":0.91,\"dex\":0.91,\"agi\":0.91,\"cha\":0.9,\"int\":1},\"teamCount\":0}},\"Bounty Hunter\":{\"ctor\":\"Contract\",\"data\":{\"name\":\"Bounty Hunter\",\"level\":30,\"maxLevel\":30,\"autoLevel\":true,\"baseDifficulty\":244.8573741301566,\"difficultyFac\":1.04,\"rewardFac\":1.085,\"successes\":518,\"failures\":351,\"rankGain\":0.9,\"rankLoss\":0,\"hpLoss\":1,\"hpLost\":0,\"isStealth\":false,\"isKill\":true,\"count\":316.29145833330244,\"weights\":{\"hack\":0,\"str\":0.15,\"def\":0.15,\"dex\":0.25,\"agi\":0.25,\"cha\":0.1,\"int\":0.1},\"decays\":{\"hack\":0,\"str\":0.91,\"def\":0.91,\"dex\":0.91,\"agi\":0.91,\"cha\":0.8,\"int\":0.9},\"teamCount\":0}},\"Retirement\":{\"ctor\":\"Contract\",\"data\":{\"name\":\"Retirement\",\"level\":16,\"maxLevel\":16,\"autoLevel\":true,\"baseDifficulty\":180.15142526588116,\"difficultyFac\":1.03,\"rewardFac\":1.065,\"successes\":151,\"failures\":48,\"rankGain\":0.6,\"rankLoss\":0,\"hpLoss\":1,\"hpLost\":0,\"isStealth\":false,\"isKill\":true,\"count\":668.049166666633,\"weights\":{\"hack\":0,\"str\":0.2,\"def\":0.2,\"dex\":0.2,\"agi\":0.2,\"cha\":0.1,\"int\":0.1},\"decays\":{\"hack\":0,\"str\":0.91,\"def\":0.91,\"dex\":0.91,\"agi\":0.91,\"cha\":0.8,\"int\":0.9},\"teamCount\":0}}},\"operations\":{\"Investigation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Investigation\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":439.72928091840276,\"difficultyFac\":1.03,\"rewardFac\":1.07,\"successes\":0,\"failures\":0,\"rankGain\":2.2,\"rankLoss\":0.2,\"hpLoss\":0,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":564.2516666668508,\"weights\":{\"hack\":0.25,\"str\":0.05,\"def\":0.05,\"dex\":0.2,\"agi\":0.1,\"cha\":0.25,\"int\":0.1},\"decays\":{\"hack\":0.85,\"str\":0.9,\"def\":0.9,\"dex\":0.9,\"agi\":0.9,\"cha\":0.7,\"int\":0.9},\"teamCount\":15,\"reqdRank\":25}},\"Undercover Operation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Undercover Operation\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":508.404932734073,\"difficultyFac\":1.04,\"rewardFac\":1.09,\"successes\":0,\"failures\":0,\"rankGain\":4.4,\"rankLoss\":0.4,\"hpLoss\":2,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":517.6925000001684,\"weights\":{\"hack\":0.2,\"str\":0.05,\"def\":0.05,\"dex\":0.2,\"agi\":0.2,\"cha\":0.2,\"int\":0.1},\"decays\":{\"hack\":0.8,\"str\":0.9,\"def\":0.9,\"dex\":0.9,\"agi\":0.9,\"cha\":0.7,\"int\":0.9},\"teamCount\":0,\"reqdRank\":100}},\"Sting Operation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Sting Operation\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":606.0209629425626,\"difficultyFac\":1.04,\"rewardFac\":1.095,\"successes\":0,\"failures\":0,\"rankGain\":5.5,\"rankLoss\":0.5,\"hpLoss\":2.5,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":462.0912500001921,\"weights\":{\"hack\":0.25,\"str\":0.05,\"def\":0.05,\"dex\":0.25,\"agi\":0.1,\"cha\":0.2,\"int\":0.1},\"decays\":{\"hack\":0.8,\"str\":0.85,\"def\":0.85,\"dex\":0.85,\"agi\":0.85,\"cha\":0.7,\"int\":0.9},\"teamCount\":0,\"reqdRank\":500}},\"Raid\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Raid\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":764.2427685810784,\"difficultyFac\":1.045,\"rewardFac\":1.1,\"successes\":0,\"failures\":0,\"rankGain\":55,\"rankLoss\":2.5,\"hpLoss\":50,\"hpLost\":0,\"isStealth\":false,\"isKill\":true,\"count\":476.51166666690074,\"weights\":{\"hack\":0.1,\"str\":0.2,\"def\":0.2,\"dex\":0.2,\"agi\":0.2,\"cha\":0,\"int\":0.1},\"decays\":{\"hack\":0.7,\"str\":0.8,\"def\":0.8,\"dex\":0.8,\"agi\":0.8,\"cha\":0,\"int\":0.9},\"teamCount\":0,\"reqdRank\":3000}},\"Stealth Retirement Operation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Stealth Retirement Operation\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":1071.8482758541918,\"difficultyFac\":1.05,\"rewardFac\":1.11,\"successes\":0,\"failures\":0,\"rankGain\":22,\"rankLoss\":2,\"hpLoss\":10,\"hpLost\":0,\"isStealth\":true,\"isKill\":true,\"count\":205.38395833344026,\"weights\":{\"hack\":0.1,\"str\":0.1,\"def\":0.1,\"dex\":0.3,\"agi\":0.3,\"cha\":0,\"int\":0.1},\"decays\":{\"hack\":0.7,\"str\":0.8,\"def\":0.8,\"dex\":0.8,\"agi\":0.8,\"cha\":0,\"int\":0.9},\"teamCount\":0,\"reqdRank\":20000}},\"Assassination\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Assassination\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":1509.856320133231,\"difficultyFac\":1.06,\"rewardFac\":1.14,\"successes\":0,\"failures\":0,\"rankGain\":44,\"rankLoss\":4,\"hpLoss\":5,\"hpLost\":0,\"isStealth\":true,\"isKill\":true,\"count\":214.3189583334588,\"weights\":{\"hack\":0.1,\"str\":0.1,\"def\":0.1,\"dex\":0.3,\"agi\":0.3,\"cha\":0,\"int\":0.1},\"decays\":{\"hack\":0.6,\"str\":0.8,\"def\":0.8,\"dex\":0.8,\"agi\":0.8,\"cha\":0,\"int\":0.8},\"teamCount\":0,\"reqdRank\":50000}}},\"blackops\":{},\"logging\":{\"general\":true,\"contracts\":true,\"ops\":true,\"blackops\":true,\"events\":true},\"automateEnabled\":true,\"automateActionHigh\":{\"ctor\":\"ActionIdentifier\",\"data\":{\"name\":\"Bounty Hunter\",\"type\":2}},\"automateThreshHigh\":103,\"automateActionLow\":{\"ctor\":\"ActionIdentifier\",\"data\":{\"name\":\"Field Analysis\",\"type\":7}},\"automateThreshLow\":60,\"consoleHistory\":[\"help\",\"automate\",\"automate Recruitment\",\"automate Recruitment 10\",\"help automate\",\"automate stamina 100 high\",\"automate contract Tracking high\",\"automate stamina 50 low\",\"automate general 'Field Analysis' low\",\"automate en\",\"automate status\",\"automate Chaos 1 high\",\"automate general Diplomacy high\",\"automate status\",\"automate 'City Chaos' 1 med\",\"automate general Diplomacy med\",\"automate status\",\"automate general 'Field Analysis' low\",\"automate contract Tracking high\",\"automate status\",\"automate general 'Recruitment' low\",\"automate\",\"automate status\",\"automate stamina 71 high\",\"automate status\",\"automate stamina 40 low\",\"automate Contracts Retirement high\",\"automate status\",\"automate stamina 72 high\",\"automate contract Retirement high\",\"help\",\"automate general 'Field Analysis' low\",\"automate stamina 74 high\",\"automate stamina 82 high\",\"automate stamina 45 low\",\"automate contract Tracking high\",\"automate general Training low\",\"automate stamina 60 low\",\"automate contract 'Bounty Hunter' high\",\"automate stamina 89 high\",\"automate general 'Field Analysis' low\",\"automate stamina 103 high\"],\"consoleLogs\":[\"[4/27 08:18:17] Bounty Hunter contract failed! Took 7 damage.\",\"[4/27 08:19:15] Bounty Hunter contract successfully completed! Gained 9.180 rank and $2.663m\",\"[4/27 08:20:13] Bounty Hunter contract failed! Took 8 damage.\",\"[4/27 08:21:11] Bounty Hunter contract failed! Took 8 damage.\",\"[4/27 08:22:09] Bounty Hunter contract failed! Took 9 damage.\",\"[4/27 08:23:07] Bounty Hunter contract failed! Took 8 damage.\",\"[4/27 08:24:05] Bounty Hunter contract successfully completed! Gained 8.910 rank and $2.663m\",\"[4/27 08:25:03] Bounty Hunter contract successfully completed! Gained 9.428 rank and $2.663m\",\"[4/27 08:26:01] Bounty Hunter contract failed! Took 8 damage.\",\"[4/27 08:26:59] Bounty Hunter contract successfully completed! Gained 9.224 rank and $2.663m\",\"[4/27 08:27:02] Tensions between Synthoids and humans lead to riots in Volhaven! Chaos increased\",\"[4/27 08:27:57] Bounty Hunter contract successfully completed! Gained 8.928 rank and $2.663m\",\"[4/27 08:28:55] Bounty Hunter contract successfully completed! Gained 8.835 rank and $2.663m\",\"[4/27 08:29:53] Bounty Hunter contract failed! Took 8 damage.\",\"[4/27 08:30:51] Bounty Hunter contract successfully completed! Gained 8.807 rank and $2.663m\",\"[4/27 08:31:49] Bounty Hunter contract failed! Took 8 damage.\",\"[4/27 08:32:47] Bounty Hunter contract successfully completed! Gained 10.003 rank and $2.663m\",\"[4/27 08:33:45] Bounty Hunter contract failed! Took 9 damage.\",\"[4/27 08:34:43] Bounty Hunter contract successfully completed! Gained 10.025 rank and $2.663m\",\"[4/27 08:34:50] Intelligence indicates that the Synthoid population of Volhaven just changed significantly\",\"[4/27 08:35:41] Bounty Hunter contract successfully completed! Gained 9.271 rank and $2.663m\",\"[4/27 08:36:39] Bounty Hunter contract successfully completed! Gained 8.685 rank and $2.663m\",\"[4/27 08:37:37] Bounty Hunter contract successfully completed! Gained 9.544 rank and $2.663m\",\"[4/27 08:38:35] Bounty Hunter contract successfully completed! Gained 9.608 rank and $2.663m\",\"[4/27 08:39:33] Bounty Hunter contract successfully completed! Gained 9.261 rank and $2.663m\",\"[4/27 08:40:03] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 08:40:33] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 08:41:03] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 08:41:33] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 08:42:03] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 08:42:33] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 08:42:42] Intelligence indicates that the Synthoid population of Chongqing just changed significantly\",\"[4/27 08:43:03] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 08:43:33] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 08:44:03] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 08:44:33] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 08:45:03] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 08:45:33] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 08:46:03] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 08:46:33] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 08:47:03] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 08:47:33] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 08:48:03] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 08:48:33] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 08:48:36] Intelligence indicates that a large number of Synthoids migrated from Volhaven to some other city\",\"[4/27 08:49:03] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 08:49:33] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 08:50:03] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 08:50:33] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 08:51:03] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 08:51:33] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 08:52:03] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 08:52:33] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 08:53:03] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 08:53:33] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 08:53:39] Intelligence indicates that the Synthoid population of Volhaven just changed significantly\",\"[4/27 08:54:03] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 08:54:33] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 08:55:03] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 08:55:33] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 08:56:03] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 08:56:33] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 08:57:03] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 08:57:33] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 08:58:03] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 08:58:33] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 08:59:03] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 08:59:33] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 09:00:03] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 09:00:33] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 09:01:03] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 09:01:33] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 09:01:54] Intelligence indicates that a large number of Synthoids migrated from Aevum to some other city\",\"[4/27 09:02:03] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 09:02:33] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 09:03:03] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 09:03:33] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 09:04:03] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 09:04:33] Field analysis completed. Gained 0.10 rank, 29.5 hacking exp, and 25.9 charisma exp\",\"[4/27 09:05:59] Bounty Hunter contract failed! Took 8 damage.\",\"[4/27 09:06:57] Bounty Hunter contract failed! Took 8 damage.\",\"[4/27 09:07:55] Bounty Hunter contract failed! Took 9 damage.\",\"[4/27 09:08:53] Tensions between Synthoids and humans lead to riots in Chongqing! Chaos increased\",\"[4/27 09:08:53] Bounty Hunter contract successfully completed! Gained 9.891 rank and $2.663m\",\"[4/27 09:09:51] Bounty Hunter contract failed! Took 9 damage.\",\"[4/27 09:10:49] Bounty Hunter contract failed! Took 8 damage.\",\"[4/27 09:11:47] Bounty Hunter contract failed! Took 8 damage.\",\"[4/27 09:12:45] Bounty Hunter contract failed! Took 8 damage.\",\"[4/27 09:13:43] Bounty Hunter contract failed! Took 8 damage.\",\"[4/27 09:13:54] Tensions between Synthoids and humans lead to riots in Volhaven! Chaos increased\",\"[4/27 09:14:41] Bounty Hunter contract successfully completed! Gained 9.069 rank and $2.663m\",\"[4/27 09:15:39] Bounty Hunter contract failed! Took 8 damage.\",\"[4/27 09:16:37] Bounty Hunter contract failed! Took 8 damage.\",\"[4/27 09:17:35] Bounty Hunter contract successfully completed! Gained 10.080 rank and $2.663m\",\"[4/27 09:18:33] Bounty Hunter contract successfully completed! Gained 9.043 rank and $2.663m\",\"[4/27 09:19:31] Bounty Hunter contract failed! Took 9 damage.\",\"[4/27 09:20:05] Tensions between Synthoids and humans lead to riots in Aevum! Chaos increased\",\"[4/27 09:20:29] Bounty Hunter contract successfully completed! Gained 9.145 rank and $2.663m\",\"[4/27 09:21:27] Bounty Hunter contract successfully completed! Gained 9.047 rank and $2.663m\",\"[4/27 09:22:25] Bounty Hunter contract failed! Took 8 damage.\"]}},\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":58,\"strength\":202,\"defense\":202,\"dexterity\":202,\"agility\":202,\"charisma\":1,\"intelligence\":1,\"hp\":30,\"max_hp\":30,\"hacking_exp\":99079.88863334466,\"strength_exp\":291431.88537021214,\"defense_exp\":291431.88537021214,\"dexterity_exp\":291431.88537021214,\"agility_exp\":291431.88537021214,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":247.7951171374224,\"hacking_speed_mult\":97.53987445009868,\"hacking_money_mult\":136516.61091935533,\"hacking_grow_mult\":9.37890625,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":2,\"currentTaskLocation\":\"Aevum\",\"currentTaskMaxTime\":0,\"currentTaskTime\":946800,\"earningsForSleeves\":{\"hack\":22426.67634172019,\"str\":34793.132994580395,\"def\":34793.132994580395,\"dex\":34793.132994580395,\"agi\":34793.132994580395,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":22426.67634172019,\"str\":34793.132994580395,\"def\":34793.132994580395,\"dex\":34793.132994580395,\"agi\":34793.132994580395,\"cha\":0,\"money\":52515000},\"earningsForTask\":{\"hack\":344.9275258007066,\"str\":517.3912887010559,\"def\":517.3912887010559,\"dex\":517.3912887010559,\"agi\":517.3912887010559,\"cha\":0,\"money\":0},\"factionWorkType\":3,\"gainRatesForTask\":{\"hack\":0.1,\"str\":0.15,\"def\":0.15,\"dex\":0.15,\"agi\":0.15,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":73.09820000015034,\"storedCycles\":3,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":58,\"strength\":202,\"defense\":202,\"dexterity\":202,\"agility\":202,\"charisma\":1,\"intelligence\":1,\"hp\":30,\"max_hp\":30,\"hacking_exp\":99079.88863334466,\"strength_exp\":291431.88537021214,\"defense_exp\":291431.88537021214,\"dexterity_exp\":291431.88537021214,\"agility_exp\":291431.88537021214,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":62.455337301194575,\"hacking_speed_mult\":31.037493683996722,\"hacking_money_mult\":7102.138276839541,\"hacking_grow_mult\":5.359375,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":2,\"currentTaskLocation\":\"Sector-12\",\"currentTaskMaxTime\":0,\"currentTaskTime\":225800,\"earningsForSleeves\":{\"hack\":22632.47928882162,\"str\":35108.39381523247,\"def\":35108.39381523247,\"dex\":35108.39381523247,\"agi\":35108.39381523247,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":22632.47928882162,\"str\":35108.39381523247,\"def\":35108.39381523247,\"dex\":35108.39381523247,\"agi\":35108.39381523247,\"cha\":0,\"money\":53021250},\"earningsForTask\":{\"hack\":82.70896070017497,\"str\":124.06344105026254,\"def\":124.06344105026254,\"dex\":124.06344105026254,\"agi\":124.06344105026254,\"cha\":0,\"money\":0},\"factionWorkType\":3,\"gainRatesForTask\":{\"hack\":0.1,\"str\":0.15,\"def\":0.15,\"dex\":0.15,\"agi\":0.15,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":73.31480000015524,\"storedCycles\":3,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":58,\"strength\":202,\"defense\":202,\"dexterity\":202,\"agility\":202,\"charisma\":1,\"intelligence\":1,\"hp\":30,\"max_hp\":30,\"hacking_exp\":99079.88863334466,\"strength_exp\":291431.88537021214,\"defense_exp\":291431.88537021214,\"dexterity_exp\":291431.88537021214,\"agility_exp\":291431.88537021214,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":62.455337301194575,\"hacking_speed_mult\":31.037493683996722,\"hacking_money_mult\":7102.138276839541,\"hacking_grow_mult\":5.359375,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":2,\"currentTaskLocation\":\"Tian Di Hui\",\"currentTaskMaxTime\":0,\"currentTaskTime\":45800,\"earningsForSleeves\":{\"hack\":23661.441632921273,\"str\":31664.219792232336,\"def\":31664.219792232336,\"dex\":31664.219792232336,\"agi\":31664.219792232336,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":23661.441632921273,\"str\":31664.219792232336,\"def\":31664.219792232336,\"dex\":31664.219792232336,\"agi\":31664.219792232336,\"cha\":0,\"money\":53527500},\"earningsForTask\":{\"hack\":16.76738130003546,\"str\":25.15107195005319,\"def\":25.15107195005319,\"dex\":25.15107195005319,\"agi\":25.15107195005319,\"cha\":0,\"money\":0},\"factionWorkType\":3,\"gainRatesForTask\":{\"hack\":0.1,\"str\":0.15,\"def\":0.15,\"dex\":0.15,\"agi\":0.15,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":73.2312000001549,\"storedCycles\":3,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":58,\"strength\":202,\"defense\":202,\"dexterity\":202,\"agility\":202,\"charisma\":1,\"intelligence\":1,\"hp\":30,\"max_hp\":30,\"hacking_exp\":99079.88863334466,\"strength_exp\":291431.88537021214,\"defense_exp\":291431.88537021214,\"dexterity_exp\":291431.88537021214,\"agility_exp\":291431.88537021214,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":62.455337301194575,\"hacking_speed_mult\":31.037493683996722,\"hacking_money_mult\":7102.138276839541,\"hacking_grow_mult\":5.359375,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":2,\"currentTaskLocation\":\"CyberSec\",\"currentTaskMaxTime\":0,\"currentTaskTime\":376800,\"earningsForSleeves\":{\"hack\":30359.291369881408,\"str\":6484.794169999969,\"def\":6484.794169999969,\"dex\":6484.794169999969,\"agi\":6484.794169999969,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":30359.291369881408,\"str\":6484.794169999969,\"def\":6484.794169999969,\"dex\":6484.794169999969,\"agi\":6484.794169999969,\"cha\":0,\"money\":218632500},\"earningsForTask\":{\"hack\":205.8821560504277,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"factionWorkType\":1,\"gainRatesForTask\":{\"hack\":0.15,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":72.94680000015178,\"storedCycles\":3,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":58,\"strength\":202,\"defense\":202,\"dexterity\":202,\"agility\":202,\"charisma\":1,\"intelligence\":1,\"hp\":30,\"max_hp\":30,\"hacking_exp\":99079.88863334466,\"strength_exp\":291431.88537021214,\"defense_exp\":291431.88537021214,\"dexterity_exp\":291431.88537021214,\"agility_exp\":291431.88537021214,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":62.455337301194575,\"hacking_speed_mult\":31.037493683996722,\"hacking_money_mult\":7102.138276839541,\"hacking_grow_mult\":5.359375,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":0,\"currentTaskLocation\":\"\",\"currentTaskMaxTime\":0,\"currentTaskTime\":0,\"earningsForSleeves\":{\"hack\":0,\"str\":8227.904505998868,\"def\":8227.904505998868,\"dex\":8227.904505998868,\"agi\":8227.904505998868,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":0,\"str\":8227.904505998868,\"def\":8227.904505998868,\"dex\":8227.904505998868,\"agi\":8227.904505998868,\"cha\":0,\"money\":258889500},\"earningsForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":69.70780000015618,\"storedCycles\":3,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":58,\"strength\":202,\"defense\":202,\"dexterity\":202,\"agility\":202,\"charisma\":1,\"intelligence\":1,\"hp\":30,\"max_hp\":30,\"hacking_exp\":99079.88863334466,\"strength_exp\":291431.88537021214,\"defense_exp\":291431.88537021214,\"dexterity_exp\":291431.88537021214,\"agility_exp\":291431.88537021214,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":62.455337301194575,\"hacking_speed_mult\":31.037493683996722,\"hacking_money_mult\":7102.138276839541,\"hacking_grow_mult\":5.359375,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"Homicide\",\"currentTask\":3,\"currentTaskLocation\":\"33750\",\"currentTaskMaxTime\":3000,\"currentTaskTime\":2000,\"earningsForSleeves\":{\"hack\":0,\"str\":58509.567512055626,\"def\":58509.567512055626,\"dex\":58509.567512055626,\"agi\":58509.567512055626,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":0,\"str\":58509.567512055626,\"def\":58509.567512055626,\"dex\":58509.567512055626,\"agi\":58509.567512055626,\"cha\":0,\"money\":1045716750},\"earningsForTask\":{\"hack\":0,\"str\":369.11650000076634,\"def\":369.11650000076634,\"dex\":369.11650000076634,\"agi\":369.11650000076634,\"cha\":0,\"money\":4218750},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":2,\"def\":2,\"dex\":2,\"agi\":2,\"cha\":0,\"money\":33750},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":73.91730000015373,\"storedCycles\":2,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":58,\"strength\":202,\"defense\":202,\"dexterity\":202,\"agility\":202,\"charisma\":1,\"intelligence\":1,\"hp\":30,\"max_hp\":30,\"hacking_exp\":99079.88863334466,\"strength_exp\":291431.88537021214,\"defense_exp\":291431.88537021214,\"dexterity_exp\":291431.88537021214,\"agility_exp\":291431.88537021214,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":62.455337301194575,\"hacking_speed_mult\":31.037493683996722,\"hacking_money_mult\":7102.138276839541,\"hacking_grow_mult\":5.359375,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"Homicide\",\"currentTask\":3,\"currentTaskLocation\":\"33750\",\"currentTaskMaxTime\":3000,\"currentTaskTime\":1000,\"earningsForSleeves\":{\"hack\":0,\"str\":58669.89398405893,\"def\":58669.89398405893,\"dex\":58669.89398405893,\"agi\":58669.89398405893,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":0,\"str\":58669.89398405893,\"def\":58669.89398405893,\"dex\":58669.89398405893,\"agi\":58669.89398405893,\"cha\":0,\"money\":1042213500},\"earningsForTask\":{\"hack\":0,\"str\":310.39008000065365,\"def\":310.39008000065365,\"dex\":310.39008000065365,\"agi\":310.39008000065365,\"cha\":0,\"money\":3543750},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":2,\"def\":2,\"dex\":2,\"agi\":2,\"cha\":0,\"money\":33750},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":73.980900000156,\"storedCycles\":2,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":58,\"strength\":202,\"defense\":202,\"dexterity\":202,\"agility\":202,\"charisma\":1,\"intelligence\":1,\"hp\":30,\"max_hp\":30,\"hacking_exp\":99079.88863334466,\"strength_exp\":291431.88537021214,\"defense_exp\":291431.88537021214,\"dexterity_exp\":291431.88537021214,\"agility_exp\":291431.88537021214,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":15.741509366557654,\"hacking_speed_mult\":9.876227743936385,\"hacking_money_mult\":369.48154340826727,\"hacking_grow_mult\":3.0625,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"Homicide\",\"currentTask\":3,\"currentTaskLocation\":\"33750\",\"currentTaskMaxTime\":3000,\"currentTaskTime\":1000,\"earningsForSleeves\":{\"hack\":0,\"str\":57973.9785960559,\"def\":57973.9785960559,\"dex\":57973.9785960559,\"agi\":57973.9785960559,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":0,\"str\":57973.9785960559,\"def\":57973.9785960559,\"dex\":57973.9785960559,\"agi\":57973.9785960559,\"cha\":0,\"money\":1042038000},\"earningsForTask\":{\"hack\":0,\"str\":1566.8748640032593,\"def\":1566.8748640032593,\"dex\":1566.8748640032593,\"agi\":1566.8748640032593,\"cha\":0,\"money\":18090000},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":2,\"def\":2,\"dex\":2,\"agi\":2,\"cha\":0,\"money\":33750},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":73.48360000015379,\"storedCycles\":1,\"sync\":100}}],\"sleevesFromCovenant\":5,\"bitNodeN\":6,\"entropy\":0,\"lastUpdate\":1651065792842,\"lastSave\":1651065746250,\"totalPlaytime\":9736248200,\"playtimeSinceLastAug\":129337000,\"playtimeSinceLastBitnode\":129337000,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":845739705.3215237,\"casino\":10070311984,\"class\":0,\"codingcontract\":9037500000,\"corporation\":0,\"crime\":340062404.7868494,\"gang\":-62540144446.07053,\"hacking\":75662772344,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":-285564472.70879805,\"infiltration\":0,\"sleeves\":3766554000,\"stock\":0,\"total\":8439746228.368131,\"work\":0,\"servers\":-27171203741.804813,\"other\":-289000000,\"augmentations\":-997281549.15533}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":845739705.3215237,\"casino\":10070311984,\"class\":0,\"codingcontract\":9037500000,\"corporation\":0,\"crime\":340062404.7868494,\"gang\":-62540144446.07053,\"hacking\":75662772344,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":-285564472.70879805,\"infiltration\":0,\"sleeves\":3766554000,\"stock\":0,\"total\":8439746228.368131,\"work\":0,\"servers\":-27171203741.804813,\"other\":-289000000,\"augmentations\":-997281549.15533}},\"scriptProdSinceLastAug\":75662772344,\"exploits\":[\"UndocumentedFunctionCall\",\"Bypass\",\"Unclickable\",\"RealityAlteration\",\"TimeCompression\",\"N00dles\",\"PrototypeTampering\",\"EditSaveFile\",\"YoureNotMeantToAccessThis\",\"INeedARainbow\"],\"achievements\":[{\"ID\":\"CYBERSEC\",\"unlockedOn\":1641831349068},{\"ID\":\"NITESEC\",\"unlockedOn\":1641831349080},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1641831349084},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1641831349088},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1641831349091},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1641831349095},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1641831349099},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1641831349103},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1641831349108},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1641831349113},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1641831349117},{\"ID\":\"NS2\",\"unlockedOn\":1641831349120},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1641831349122},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1641831349125},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1641831349128},{\"ID\":\"TOR\",\"unlockedOn\":1641831349131},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1641911770908},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1641911770911},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1641911890917},{\"ID\":\"DONATION\",\"unlockedOn\":1641919651447},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1641924992259},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1642040620386},{\"ID\":\"TRAVEL\",\"unlockedOn\":1642040800461},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1642088780181},{\"ID\":\"4S\",\"unlockedOn\":1642220579557},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1642295956244},{\"ID\":\"SF1.1\",\"unlockedOn\":1642393317233},{\"ID\":\"UNDOCUMENTEDFUNCTIONCALL\",\"unlockedOn\":1643121077987},{\"ID\":\"BYPASS\",\"unlockedOn\":1643121317987},{\"ID\":\"UNCLICKABLE\",\"unlockedOn\":1643122337977},{\"ID\":\"REALITYALTERATION\",\"unlockedOn\":1643122481910},{\"ID\":\"TIMECOMPRESSION\",\"unlockedOn\":1643122661782},{\"ID\":\"N00DLES\",\"unlockedOn\":1643122721781},{\"ID\":\"PROTOTYPETAMPERING\",\"unlockedOn\":1643123081783},{\"ID\":\"EDITSAVEFILE\",\"unlockedOn\":1643123929773},{\"ID\":\"DEVMENU\",\"unlockedOn\":1643123929787},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1643640264308},{\"ID\":\"SF5.1\",\"unlockedOn\":1643839768581},{\"ID\":\"GANG\",\"unlockedOn\":1644242713578},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1644317906781},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1644319506423},{\"ID\":\"SF2.1\",\"unlockedOn\":1644381062608},{\"ID\":\"FAST_BN\",\"unlockedOn\":1644550423832},{\"ID\":\"WORKOUT\",\"unlockedOn\":1644551683850},{\"ID\":\"GANG_TERRITORY\",\"unlockedOn\":1644764420851},{\"ID\":\"CORPORATION\",\"unlockedOn\":1645195464613},{\"ID\":\"CORPORATION_BRIBE\",\"unlockedOn\":1645593375384},{\"ID\":\"SF3.1\",\"unlockedOn\":1645739905350},{\"ID\":\"FROZE\",\"unlockedOn\":1646454615199},{\"ID\":\"SF4.1\",\"unlockedOn\":1649078749377},{\"ID\":\"RAINBOW\",\"unlockedOn\":1649863203492},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1649963517455},{\"ID\":\"CORPORATION_REAL_ESTATE\",\"unlockedOn\":1650074051205},{\"ID\":\"CORPORATION_PROD_1000\",\"unlockedOn\":1650120923422},{\"ID\":\"MONEY_1Q\",\"unlockedOn\":1650133518302},{\"ID\":\"MAX_RAM\",\"unlockedOn\":1650203744383},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1650215744382},{\"ID\":\"SF10.1\",\"unlockedOn\":1650238596854},{\"ID\":\"QUEUE_40\",\"unlockedOn\":1650363811385},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1650567008902},{\"ID\":\"SLEEVE_8\",\"unlockedOn\":1650587229287},{\"ID\":\"FIRST_HACKNET_SERVER\",\"unlockedOn\":1650587469464},{\"ID\":\"MAX_CACHE\",\"unlockedOn\":1650624669287},{\"ID\":\"ALL_HACKNET_SERVER\",\"unlockedOn\":1650880670062},{\"ID\":\"HACKNET_SERVER_1B\",\"unlockedOn\":1650907131627},{\"ID\":\"SF9.1\",\"unlockedOn\":1650936509084},{\"ID\":\"BLADEBURNER_DIVISION\",\"unlockedOn\":1650976064697}],\"terminalCommandHistory\":[\"nano util\",\"nano utils.js\",\"nano augments.js\",\"run bootstrap32GB.js\",\"run sharing_is_caring.js\",\"nano autosolver.js\",\"run autosolver.js\",\"nano mcp_hgw_batch.js\",\"run mcp_hgw_batch.js\",\"nano mcp_hgw_batch.js\",\"ls\",\"rm mcp_advance.js\",\"run mcp_hgw_batch.js\",\"nano mcp_hgw_batch.js\",\"run mcp_hgw_batch.js\",\"run find_server.js CSEC\",\"connect CSEC\",\"analyze\",\"home\",\"connect sigma-cosmetics\",\"analyze\",\"home\",\"run init.js\",\"run sharing_is_caring.js\",\"nano augments.js\",\"nano init.js\",\"run init.js\",\"run max_hack.js\",\"run bootstrap32GB.js\",\"run init.js\",\"run opened_servers.js\",\"nano purchase-servers.js\",\"nano test.js\",\"run test.js\",\"run purchase-servers.js\",\"nano workForFaction.js\",\"nano sleeves.js\",\"run test.js\",\"run init.js\",\"run test.js\",\"run fl1ght.exe\",\"cat /tmp/getBitNodeMultipliers.txt\",\"run max_hack.js\",\"run farm_int.js\",\"run init.js\",\"run bootstrap32GB.js\",\"nano autosolver.js\",\"nano sleeves.js\",\"nano autosolver.js\",\"run autosolver.js\"],\"identifier\":\"1137a2b24916d3\",\"factionWorkType\":\"Faction Security Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"70.4.9.8\",\"isConnectedTo\":true,\"maxRam\":2048,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"Formulas.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"fl1ght.exe\"],\"ramUsed\":102,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"player.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":129163.40999871456,\"pid\":6,\"ramUsage\":3.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"player.js\",\"url\":\"blob:https://danielyxie.github.io/82dd1930-07ae-4203-8728-0e1ce0cf4bb2\",\"moduleSequenceNumber\":1841488}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"sleeves.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":129163.40999871456,\"pid\":7,\"ramUsage\":47.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"augments.js\",\"url\":\"blob:https://danielyxie.github.io/8f419f8d-8835-4de1-a791-396f98b6b204\",\"moduleSequenceNumber\":1841443},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/d14c9eae-0f6e-4efe-ac3b-fc2345c29253\",\"moduleSequenceNumber\":1841431},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/b6d9291d-d0c5-47fb-a8cc-1366c1e4ec18\",\"moduleSequenceNumber\":1841414},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/450b5336-60f8-47cb-973e-867d9c1d1313\",\"moduleSequenceNumber\":1841415},{\"filename\":\"sleeves.js\",\"url\":\"blob:https://danielyxie.github.io/439da84a-46b2-4654-b520-d0f963ac3c83\",\"moduleSequenceNumber\":1841489}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"mcp_hgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":77695988.90564683,\"onlineMoneyMade\":75662772344,\"onlineRunningTime\":129163.40999871456,\"pid\":10,\"ramUsage\":12,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"growthFunctions.js\",\"url\":\"blob:https://danielyxie.github.io/b50acd35-be1a-4cfb-8b91-8a4fc1b8c7b6\",\"moduleSequenceNumber\":1841439},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/0eb47ff4-8008-493e-b8d9-fef251b4547a\",\"moduleSequenceNumber\":1841431},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/32b50efc-39c8-451c-8296-b758adbe99c9\",\"moduleSequenceNumber\":1841414},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/48ab7035-f76b-4bbe-b926-0acff4265e95\",\"moduleSequenceNumber\":1841415},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/9f78ae46-496e-49a2-bfb6-96182f8766cd\",\"moduleSequenceNumber\":1841414},{\"filename\":\"mcp_hgw.js\",\"url\":\"blob:https://danielyxie.github.io/8b510392-be92-43d4-86f3-e482ccfd55e0\",\"moduleSequenceNumber\":1841493}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"custom-stats.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":129163.40999871456,\"pid\":11,\"ramUsage\":2.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/970b9550-26c1-4633-8ca5-de4016ebe7ae\",\"moduleSequenceNumber\":1841431},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/7203f4fc-9a69-498f-8c05-cdc21cdd5266\",\"moduleSequenceNumber\":1841414},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/477ee1f5-b370-45c0-9ebd-8138f09c4f33\",\"moduleSequenceNumber\":1841415},{\"filename\":\"custom-stats.js\",\"url\":\"blob:https://danielyxie.github.io/1d86d702-0ba4-40c7-a810-6d0c4b6bc840\",\"moduleSequenceNumber\":1841494}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"gangum.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110466.40999895045,\"pid\":12677,\"ramUsage\":36.9,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/5b64b03f-5c14-4c16-9040-58c5d20635cf\",\"moduleSequenceNumber\":1841431},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/1dcafd20-e0b9-447f-98aa-35b722159545\",\"moduleSequenceNumber\":1841414},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/a2e44612-ce80-422b-af7a-9d794a880e37\",\"moduleSequenceNumber\":1841415},{\"filename\":\"gangum.js\",\"url\":\"blob:https://danielyxie.github.io/dbfec7d5-c0f4-4872-9040-7b324aa64adc\",\"moduleSequenceNumber\":1841492}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { boxTailSingleton, copyHackingFiles, tryGetBitNodeMultipliers } from \\\"utils.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getServerMoneyAvailable');\\n    ns.disableLog('fileExists');\\n    ns.disableLog('hacknet.upgradeLevel');\\n    ns.disableLog('hacknet.upgradeRam');\\n    ns.disableLog('hacknet.upgradeCore');\\n    ns.disableLog('hacknetNodes.coreUpgradeCost');\\n    ns.disableLog('hacknetNodes.ramUpgradeCost');\\n    ns.disableLog('hacknetNodes.levelUpgradeCost');\\n    ns.disableLog('getServer');\\n    ns.disableLog('getPurchasedServers');\\n    ns.disableLog('getPurchasedServerLimit');\\n    ns.disableLog('getPurchasedServerCost');\\n    ns.clearLog();\\n    //ns.tail();\\n    const multis = tryGetBitNodeMultipliers(ns);\\n    boxTailSingleton(ns, 'purchase pc', '🖳', '100px');\\n    let player = ns.getPlayer();\\n    const bitNodeN = player.bitNodeN;\\n    function purchasePortHacks(player) {\\n        if (!player.tor) return;\\n        // BruteSSH.exe - $500k - Opens up SSH Ports.\\n        // FTPCrack.exe - $1.500m - Opens up FTP Ports.\\n        // relaySMTP.exe - $5.000m - Opens up SMTP Ports.\\n        // HTTPWorm.exe - $30.000m - Opens up HTTP Ports.\\n        // SQLInject.exe - $250.000m - Opens up SQL Ports.\\n        if (!ns.fileExists(\\\"BruteSSH.exe\\\") && player.money > 500000) {\\n            if (ns.purchaseProgram(\\\"BruteSSH.exe\\\"))\\n                ns.print('purchased BruteSSH');\\n        }\\n        if (!ns.fileExists(\\\"FTPCrack.exe\\\") && player.money > 1500000) {\\n            if (ns.purchaseProgram(\\\"FTPCrack.exe\\\"))\\n                ns.print('purchased FTPCrack');\\n        }\\n        if (!ns.fileExists(\\\"relaySMTP.exe\\\") && player.money > 5000000) {\\n            if (ns.purchaseProgram(\\\"relaySMTP.exe\\\"))\\n                ns.print('purchased relaySMTP');\\n        }\\n        if (!ns.fileExists(\\\"HTTPWorm.exe\\\") && player.money > 30000000) {\\n            if (ns.purchaseProgram(\\\"HTTPWorm.exe\\\"))\\n                ns.print('purchased HTTPWorm');\\n        }\\n        if (!ns.fileExists(\\\"SQLInject.exe\\\") && player.money > 250000000) {\\n            if (ns.purchaseProgram(\\\"SQLInject.exe\\\"))\\n                ns.print('purchased SQLInject');\\n        }\\n    }\\n    function purchaseTor(player) {\\n        if (player.money > 200000 && !player.tor) {\\n            if (ns.purchaseTor())\\n                ns.print('purchased TOR');\\n        }\\n        purchasePortHacks(player);\\n    }\\n    purchaseTor(player);\\n    if (bitNodeN === 2 && player.hacking < 100) {\\n        ns.print('Not buying servers in bitnode 2... yet');\\n    } else {\\n        // PurchasedServerMaxRam\\n        const ram = Math.min(ns.getServer('home').maxRam / 2, 1048576 * multis.PurchasedServerMaxRam);\\n        ns.print(ns.nFormat(ram, '0.0a'));\\n        let i = ns.getPurchasedServers().length;\\n        while (i < ns.getPurchasedServerLimit()) {\\n            player = ns.getPlayer();\\n            purchaseTor(player);\\n            // Check if we have enough money to purchase a server\\n            const cost = ns.getPurchasedServerCost(ram);\\n            // ns.print(ns.nFormat(cost, '0.0a'));\\n            if (player.money > cost) {\\n                const name = \\\"pserv-\\\" + i;\\n                ns.purchaseServer(name, ram);\\n                await copyHackingFiles(ns, { hostname: name, hasAdminRights: true });\\n                ns.print(`purchased server ${name} ${ns.nFormat(cost, '$0.0a')}`)\\n                ++i;\\n            }\\n            await ns.sleep(3000);\\n        }\\n    }\\n\\n    if (multis.HacknetNodeMoney < .8) {\\n        ns.print('Not buying hacknet servers in bitnode with money multi of ' + multis.HacknetNodeMoney);\\n        return;\\n    }\\n    const maxCores = ns.formulas.hacknetNodes.coreUpgradeCost(1, 15);\\n    const maxRam = ns.formulas.hacknetNodes.ramUpgradeCost(1, 6);\\n    const maxLevel = ns.formulas.hacknetNodes.levelUpgradeCost(1, 199);\\n    const maxHackNetUpgradeCost_preAug = maxCores + maxLevel + maxRam;\\n    // Start the hacknet node purchases\\n    while (ns.hacknet.getPurchaseNodeCost() < 1000000) {\\n        player = ns.getPlayer();\\n        purchaseTor(player);\\n        let nodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\n        // Purchase the nodes when we have enough money to do so\\n        if (player.money > (nodeCost + maxHackNetUpgradeCost_preAug)) {\\n\\n            const purchaseIndex = ns.hacknet.purchaseNode();\\n            const name = `hacknet-node-${purchaseIndex}`;\\n            await copyHackingFiles(ns, { hostname: name, hasAdminRights: true });\\n\\n            ns.print(`purchased ${name}`)\\n            ns.hacknet.upgradeLevel(purchaseIndex, 199);\\n            ns.hacknet.upgradeRam(purchaseIndex, 6);\\n            ns.hacknet.upgradeCore(purchaseIndex, 15);\\n        }\\n\\n        // wait a few seconds before we have them all\\n        await ns.sleep('5000');\\n    }\\n}\",\"filename\":\"purchase-servers.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/e888debd-1de8-4897-8efd-3524227bf285\",\"moduleSequenceNumber\":1842562},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/bcd53437-04b1-40c4-8023-d2f65d45f1ac\",\"moduleSequenceNumber\":1842545},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/2dde6247-bc90-4eef-9415-47869b58540d\",\"moduleSequenceNumber\":1842546},{\"filename\":\"purchase-servers.js\",\"url\":\"blob:https://danielyxie.github.io/48706483-1478-437d-a2e9-0dd192bbca71\",\"moduleSequenceNumber\":1842694}],\"dependents\":[],\"ramUsage\":17.6,\"server\":\"home\",\"moduleSequenceNumber\":1842694,\"_hash\":\"b1af83699f444efce3e11ba6c7a23f6e52f1ba000b1153b271ee1e4fbe1dca12\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst args = ns.flags([[\\\"help\\\", false]]);\\n\\tconst server = ns.args[0];\\n\\tif (args.help || !server) {\\n\\t\\tns.tprint(\\\"This script does a more detailed analysis of a server.\\\");\\n\\t\\tns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\n\\t\\tns.tprint(\\\"Example:\\\");\\n\\t\\tns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n\\t\\treturn;\\n\\t}\\n\\tconst s = ns.getServer(server);\\n\\tconst player = ns.getPlayer();\\n\\tconst maxRam = ns.getServerMaxRam(server);\\n\\tconst usedRam = ns.getServerUsedRam(server);\\n\\tconst money = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst minSec = ns.getServerMinSecurityLevel(server);\\n\\tconst sec = ns.getServerSecurityLevel(server);\\n\\tns.tprint(`\\n${server}:\\n    RAM        : ${usedRam} / ${maxRam} (${usedRam / maxRam * 100}%)\\n    $          : ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${(money / maxMoney * 100).toFixed(2)}%)\\n    security   : ${minSec.toFixed(2)} / ${sec.toFixed(2)}\\n    growth     : ${ns.getServerGrowth(server)}\\n    hack time  : ${ns.tFormat(ns.getHackTime(server))}\\n    hack time  : ${ns.tFormat(ns.formulas.hacking.hackTime(s, player))}\\n    grow time  : ${ns.tFormat(ns.getGrowTime(server))}\\n    grow time  : ${ns.tFormat(ns.formulas.hacking.growTime(s, player))}\\n    weaken time: ${ns.tFormat(ns.getWeakenTime(server))}\\n    weaken time: ${ns.tFormat(ns.formulas.hacking.weakenTime(s, player))}\\n    grow x2    : ${(ns.growthAnalyze(server, 2)).toFixed(2)} threads\\n    grow x3    : ${(ns.growthAnalyze(server, 3)).toFixed(2)} threads\\n    grow x4    : ${(ns.growthAnalyze(server, 4)).toFixed(2)} threads\\n    hack 10%   : ${(.10 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 25%   : ${(.25 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 50%   : ${(.50 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hackChance : ${(ns.hackAnalyzeChance(server) * 100).toFixed(2)}%\\n`);\\n}\\n\\nexport function autocomplete(data, args) {\\n\\treturn data.servers;\\n}\",\"filename\":\"analyze_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"analyze_server.js\",\"url\":\"blob:https://danielyxie.github.io/ff0c4155-92eb-4804-a5b3-8169b86c3190\",\"moduleSequenceNumber\":56295}],\"dependents\":[],\"ramUsage\":7.85,\"server\":\"home\",\"moduleSequenceNumber\":1842543,\"_hash\":\"91dcb01282737a1ba790ffe2b0a91ff70f2888e7c730f4a1a722ea4efa4c8075\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const flags = ns.flags([\\n        ['refreshrate', 200],\\n        ['help', false],\\n    ])\\n    if (flags.help) {\\n        ns.tprint(\\\"This script helps visualize the money and security of a server.\\\");\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\n        return;\\n    }\\n    ns.tail();\\n    ns.disableLog('ALL');\\n    const servers = flags._[0] ? [flags._[0]] : [];\\n    // ns.tprint(JSON.stringify(servers));\\n    while (true) {\\n        ns.clearLog();\\n        for (var i = 0; i < servers.length; i++) {\\n            const server = servers[i];\\n            const s = ns.getServer(server);\\n            const player = ns.getPlayer();\\n            let maxMoney = ns.getServerMaxMoney(server);\\n            const minSec = ns.getServerMinSecurityLevel(server);\\n            let money = ns.getServerMoneyAvailable(server);\\n            const percentOfMaxMoney = money / (maxMoney || 1);\\n            const sec = ns.getServerSecurityLevel(server);\\n            const currentSecurity = s.hackDifficulty - s.minDifficulty;\\n            const owk = ns.weakenAnalyze(1, 1);\\n            const hackT = ns.formulas.hacking.hackTime(s, player);\\n            const growT = ns.formulas.hacking.growTime(s, player);\\n            const weakT = ns.formulas.hacking.weakenTime(s, player);\\n            const hackChance = ns.formulas.hacking.hackChance(s, player);\\n            s.hackDifficulty = s.minDifficulty;\\n            const growPercent = ns.formulas.hacking.growPercent(s, 1, player, 1);\\n            const hackPercent = ns.formulas.hacking.hackPercent(s, player);\\n            const hackThreads = Math.floor(.5 / hackPercent);\\n            ns.print(`\\n${server}:\\n    $          : ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${(percentOfMaxMoney * 100).toFixed(2)}%)\\n    security   : ${minSec.toFixed(2)} / ${sec.toFixed(2)} +${(currentSecurity).toFixed(2)}\\n    growth     : ${ns.getServerGrowth(server)} (${(growPercent * 100).toFixed(2)}%)\\n    hack time  : ${ns.tFormat(hackT)} (t=${hackThreads}) (${(hackPercent * 100).toFixed(2)}%)\\n    grow time  : ${ns.tFormat(growT)} (t=${maxMoney === 0 ? 'NaN' : Math.ceil(ns.growthAnalyze(server, growthFactor))})(${(growthFactor * 100).toFixed(0)}%) \\n    weaken time: ${ns.tFormat(weakT)} (t=${Math.max(Math.ceil(currentSecurity / owk), 1)})\\n    hackChance : ${(hackChance * 100).toFixed(2)}%\\n`);\\n        }\\n        await ns.sleep(flags.refreshrate);\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return data.servers;\\n}\",\"filename\":\"monitor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"config.js\",\"url\":\"blob:https://danielyxie.github.io/bd3a0ada-a58d-4e27-8a18-869f7225b1cb\",\"moduleSequenceNumber\":189939},{\"filename\":\"monitor.js\",\"url\":\"blob:https://danielyxie.github.io/55872c20-974b-4910-837d-4bacd970cbf9\",\"moduleSequenceNumber\":190125}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":1842544,\"_hash\":\"8397cd7b16d2fd5914391c970d442000b728a85d540b028212423f7d73ad8475\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function scan(ns, parent, server, list) {\\n    const children = ns.scan(server);\\n    for (let child of children) {\\n        if (parent == child) {\\n            continue;\\n        }\\n        list.push(child);\\n        scan(ns, server, child, list);\\n    }\\n}\\nexport function list_servers(ns) {\\n    const list = [];\\n    scan(ns, '', 'home', list);\\n    return list;\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.tprint(list_servers(ns));\\n}\\n\\nexport function autocomplete(data, args) {\\n    return data.servers;\\n}\",\"filename\":\"opened_servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/f2a680bf-8bf8-4ab7-980f-2a9321eff455\",\"moduleSequenceNumber\":274752}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":1842545,\"_hash\":\"06ce4d2601ca3986016c5ec63d4754fff87fc878ed41b258d88ee6ba15694c79\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { list_servers } from 'opened_servers.js';\\nimport { createSidebarItem, sidebar } from \\\"/box/box.js\\\"\\n\\nexport const sleevesPortNumber = 15;\\n\\nexport const boxTailSingleton = (ns, title, icon, height) => {\\n\\tvar res = [];\\n\\tsidebar.querySelectorAll('div.sbitem').forEach(sbitem => res.push({ sbitem, title: sbitem.querySelector('div.head > span').innerText }));\\n\\tlet box = res.find(o => o.title === title);\\n\\tif (box) {\\n\\t\\tbox = box.sbitem;\\n\\t} else {\\n\\t\\tbox = createSidebarItem(title, \\\"<div/>\\\", icon);\\n\\t}\\n\\tif (height) box.style.height = height;\\n\\n\\tconst _print = ns.print;\\n\\tns.print = (m) => {\\n\\t\\tbox.log(`<span>${m}</span>`);\\n\\t\\t_print(m);\\n\\t\\tbox.logDiv = box.body.querySelector('div.log');\\n\\t\\tif (box.logDiv.childElementCount > 500) {\\n\\t\\t\\tbox.logDiv.replaceChildren(...Array.from(box.logDiv.children).slice(-100))\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nexport async function runHackScript(ns, script, host, threads, target) {\\n\\tif (!ns.fileExists(script, host)) {\\n\\t\\tawait ns.scp(script, host);\\n\\t}\\n\\treturn Promise.resolve(ns.exec(script, host, threads, target, Math.random()));\\n}\\n\\n/** @param {NS} ns **/\\nexport function getHosts(ns, scriptRam) {\\n\\tconst openedServers = list_servers(ns).filter(s => ns.hasRootAccess(s) && ns.getServerMaxRam(s) > 1);\\n\\tconst s = ns.getServer('home');\\n\\t// reserve some ram for other scripts\\n\\tif (s.maxRam >= 64) {\\n\\t\\ts.maxRam = s.maxRam - 32;\\n\\t} else if (host === 'home' && s.maxRam === 32) {\\n\\t\\ts.maxRam = s.maxRam - 16;\\n\\t}\\n\\tconst hostServers = [{\\n\\t\\tserver: s,\\n\\t\\tcpuCores: s.cpuCores,\\n\\t\\tthreadsAvailable: Math.max(Math.floor((s.maxRam - s.ramUsed) / scriptRam), 0)\\n\\t}];\\n\\tfor (const host of openedServers) {\\n\\t\\tconst s = ns.getServer(host);\\n\\t\\tconst threadsAvailable = Math.max(Math.floor((s.maxRam - s.ramUsed) / scriptRam), 0);\\n\\t\\thostServers.push({\\n\\t\\t\\tserver: s,\\n\\t\\t\\tcpuCores: s.cpuCores,\\n\\t\\t\\tthreadsAvailable\\n\\t\\t});\\n\\t}\\n\\treturn hostServers;\\n}\\n/** @param {NS} ns **/\\nexport function ramUsage(ns) {\\n\\tconst serversWithRam = ['home'].concat(list_servers(ns).filter(s => ns.hasRootAccess(s) && ns.getServerMaxRam(s) > 1));\\n\\treturn serversWithRam.map(o => ns.getServerUsedRam(o) / ns.getServerMaxRam(o)).reduce((a, b) => a + b, 0) / serversWithRam.length;\\n}\\n\\nconst weaken_script = \\\"weaken.js\\\";\\nconst grow_script = \\\"grow.js\\\";\\nconst hack_script = \\\"hack.js\\\";\\n/** @param {NS} ns **/\\nexport async function copyHackingFiles(ns, server) {\\n\\tif (server.hasAdminRights) {\\n\\t\\tif (!ns.fileExists(hack_script, server.hostname)) {\\n\\t\\t\\tawait ns.scp(hack_script, server.hostname);\\n\\t\\t}\\n\\t\\tif (!ns.fileExists(grow_script, server.hostname)) {\\n\\t\\t\\tawait ns.scp(grow_script, server.hostname);\\n\\t\\t}\\n\\t\\tif (!ns.fileExists(weaken_script, server.hostname)) {\\n\\t\\t\\tawait ns.scp(weaken_script, server.hostname);\\n\\t\\t}\\n\\t}\\n}\\nexport function tryGetBitNodeMultipliers(ns){\\n\\treturn JSON.parse(ns.read(`/tmp/getBitNodeMultipliers.txt`));\\n}\\nexport function inGangStatic(ns) {\\n\\treturn ns.read(`/tmp/ingang.txt`);\\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.95,\"server\":\"home\",\"moduleSequenceNumber\":1842546,\"_hash\":\"0894d46a0b308b241154ca127120e84f76b3a7b4399137accac07bf645071683\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function recursiveScan(ns, parent, server, target, route) {\\n\\tconst children = ns.scan(server);\\n\\tfor (let child of children) {\\n\\t\\tif (parent == child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child == target) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(server);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\tif (recursiveScan(ns, server, child, target, route)) {\\n\\t\\t\\troute.unshift(server);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst args = ns.flags([[\\\"help\\\", false]]);\\n\\tlet route = [];\\n\\tlet server = args._[0];\\n\\tif (!server || args.help) {\\n\\t\\tns.tprint(\\\"This script helps you find a server on the network and shows you the path to get to it.\\\");\\n\\t\\tns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\n\\t\\tns.tprint(\\\"Example:\\\");\\n\\t\\tns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n\\t\\treturn;\\n\\t}\\n\\n\\tlet connectString = '';\\n\\trecursiveScan(ns, '', 'home', server, route);\\n\\tfor (const i in route) {\\n\\t\\tawait ns.sleep(0);\\n\\t\\tconst extra = i > 0 ? \\\"└ \\\" : \\\"\\\";\\n\\t\\tns.tprint(`${\\\" \\\".repeat(i)}${extra}${route[i]}`);\\n\\t}\\n\\troute.shift();\\n\\tns.tprint(`connect ${route.join(`; connect `)}`);\\n}\\n\\nexport function autocomplete(data, args) {\\n\\treturn data.servers;\\n}\",\"filename\":\"find_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"find_server.js\",\"url\":\"blob:https://danielyxie.github.io/6fea4e77-f310-4ced-8b5f-b2f8acef6624\",\"moduleSequenceNumber\":4249}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":1842547,\"_hash\":\"3b9f505a588b13c309d36d04796340a4ebaa1ba23ac8bb2cf738a08417e8143c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/d7037582-b6be-4ed8-a9e4-3b358ace8035\",\"moduleSequenceNumber\":1844728}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":1844728,\"_hash\":\"7c3005da5d66c68df85df0df50d2b0b0b00778857a07d88670bbf183a0a4ebec\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/5c9911bc-093a-461b-bf46-b4c6bafd099a\",\"moduleSequenceNumber\":1845265}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":1845265,\"_hash\":\"d23919e9f2448a7ca545faeb9799d8136a808b1dd9c8d5c7ac741c458d2a3156\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/9f13a125-8a31-4f9c-9076-83c1b61ad1cb\",\"moduleSequenceNumber\":1844463}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":1844463,\"_hash\":\"fbec4b055c178ac2b6828ed994c26bf05b233d7383518107ad159953759a8b89\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { list_servers } from 'opened_servers.js';\\nimport { boxTailSingleton, ramUsage } from 'utils.js';\\n\\nlet ns;\\nconst weaken_script = \\\"weaken.js\\\";\\nconst grow_script = \\\"grow.js\\\";\\nconst hack_script = \\\"hack.js\\\";\\nlet hack_scriptRam = 1.7;\\nlet grow_scriptRam, weaken_scriptRam = 1.75;\\nlet serversForExecution = [];\\nlet hackStatus = [];\\n/** @param {NS} pns **/\\nexport async function main(pns) {\\n\\tns = pns;\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('exec')\\n\\tns.clearLog();\\n\\tns.tail();\\n\\tboxTailSingleton(ns, 'mcp', '🥾', '200px');\\n\\tweaken_scriptRam = ns.getScriptRam(weaken_script, \\\"home\\\");\\n\\tgrow_scriptRam = ns.getScriptRam(grow_script, \\\"home\\\");\\n\\thack_scriptRam = ns.getScriptRam(hack_script, \\\"home\\\");\\n\\tawait run();\\n}\\nlet hackPercent = .5;\\nlet bonusServers = 0;\\nasync function updateServerLists() {\\n\\tserversForExecution = ['home'].concat(list_servers(ns).filter(s => ns.hasRootAccess(s)));\\n\\tconst beforeHackStatusLength = hackStatus.length;\\n\\tconst serversToHack = list_servers(ns).filter(s => ns.hasRootAccess(s)\\n\\t\\t&& ns.getServerMaxMoney(s) > 0\\n\\t\\t&& ns.getServerRequiredHackingLevel(s) <= ns.getHackingLevel() / 2);\\n\\n\\thackStatus = [];\\n\\tconst skippedServer = []\\n\\tconst player = ns.getPlayer();\\n\\tfor (const server of serversToHack) {\\n\\t\\tconst s = ns.getServer(server);\\n\\t\\ts.hackDifficulty = s.minDifficulty;\\n\\t\\t// check that hacks will succeed. Could be redundant check\\n\\t\\tconst hackChance = ns.formulas.hacking.hackChance(s, player);\\n\\t\\tif (hackChance < .99) {\\n\\t\\t\\t//ns.print(`Hack chance to low ${s} ${(hackChance * 100).toFixed(2)}%`)\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (s.serverGrowth < 40) {\\n\\t\\t\\t//ns.print(`Growth is to low ${s} ${s.serverGrowth}%`)\\n\\t\\t\\tskippedServer.push({ server: server });\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\thackStatus.push({ server: server });\\n\\t}\\n\\tconst lowRamUse = ramUsage(ns) < .5;\\n\\tconst oldHackPercent = hackPercent;\\n\\tconst oldBonusServers = bonusServers;\\n\\tif (lowRamUse) {\\n\\t\\thackPercent = Math.min(hackPercent + .1, .95);\\n\\t\\tif (hackPercent === .95) {\\n\\t\\t\\tbonusServers = Math.min(bonusServers + 1, skippedServer.length);\\n\\t\\t\\thackStatus.push(...skippedServer.slice(0, bonusServers));\\n\\t\\t}\\n\\t} else {\\n\\t\\tbonusServers = Math.max(bonusServers - 1, 0);\\n\\t\\tif (bonusServers <= 0) hackPercent = Math.max(hackPercent - .1, .5);\\n\\t}\\n\\tif (oldHackPercent !== hackPercent || oldBonusServers !== bonusServers) ns.tprint(`BonusServers added ${bonusServers} Hack percent ${hackPercent}`);\\n\\t// after aug install just start hacking on n00dles fist\\n\\tif (hackStatus.length === 0) hackStatus.push({ server: 'n00dles' });\\n\\tif (beforeHackStatusLength < hackStatus.length) ns.tprint(`Servers to hack ${hackStatus.length} ${hackStatus.map(o => o.server).join(',')}`);\\n}\\n\\nasync function run() {\\n\\tlet i = 0;\\n\\tlet res;\\n\\tawait updateServerLists();\\n\\tlet updateAfter = Date.now().valueOf() + 30 * 1000;\\n\\twhile (true) {\\n\\t\\tconst state = getNextState(hackStatus[i].server, hackStatus[i].nextStateUpdateRequiredAt);\\n\\t\\tif (state) {\\n\\t\\t\\thackStatus[i] = state;\\n\\n\\t\\t\\tswitch (state.nextState) {\\n\\t\\t\\t\\tcase 'weaken':\\n\\t\\t\\t\\t\\tres = await runWeaken(state.server, state.currentSecurity, state.threadsCommitted);\\n\\t\\t\\t\\t\\t// ns.print(`Weak time ${ns.tFormat(res.time)}`);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'grow':\\n\\t\\t\\t\\t\\tres = await runGrow(state.server, state.percentMoney, state.threadsCommitted);\\n\\t\\t\\t\\t\\t// ns.print(`Grow time ${ns.tFormat(res.time)}`);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'hack':\\n\\t\\t\\t\\t\\tres = await runHack(state.server, state.threadsCommitted);\\n\\t\\t\\t\\t\\t// ns.print(`Hack time ${ns.tFormat(res.time)}`);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\n\\t\\t\\tstate.nextStateUpdateRequiredAt = Date.now() + res.time;\\n\\t\\t\\t// ns.print(`Next update at: ${new Date(state.nextStateUpdateRequiredAt).toTimeString()}`);\\n\\t\\t\\tstate.threadsCommitted = res.threadsCommitted\\n\\t\\t}\\n\\t\\ti = (i + 1) % hackStatus.length;\\n\\t\\tawait ns.sleep(1000);\\n\\t\\tif (updateAfter < Date.now()) {\\n\\t\\t\\tupdateAfter = Date.now() + 30 * 1000;\\n\\t\\t\\tawait updateServerLists();\\n\\t\\t\\ti = 0;\\n\\t\\t}\\n\\t}\\n}\\nconst getCores = (host) => ns.getServer(host).cpuCores;\\n\\nasync function runWeaken(target, currentSecurity, threads) {\\n\\tlet time = 0;\\n\\tlet threadsCommitted = 0;\\n\\tconst { host, threads_available } = getHostAndThreads(weaken_scriptRam);\\n\\tif (!host) return { time, threadsCommitted };\\n\\tlet threadToUse = threads_available;\\n\\tconst owk = ns.weakenAnalyze(1, getCores(host));\\n\\tconst threadsNeeded = Math.max(Math.ceil(currentSecurity / owk) - threads, 1);\\n\\tthreadToUse = Math.min(threadToUse, threadsNeeded);\\n\\tif (!ns.fileExists(weaken_script, host)) {\\n\\t\\tawait ns.scp(weaken_script, host);\\n\\t}\\n\\tconst pid = await ns.exec(weaken_script, host, threadToUse, target, Math.random());\\n\\tif (pid > 0) {\\n\\t\\tif (hasFormulas() && threadsNeeded <= threadToUse) {\\n\\t\\t\\ttime = ns.formulas.hacking.weakenTime(ns.getServer(target), ns.getPlayer());\\n\\t\\t}\\n\\t\\t// ns.print(`Weaken ${host}[${threadToUse}] -> ${target}`);\\n\\t\\tthreadsCommitted = threadToUse;\\n\\t}\\n\\treturn { time, threadsCommitted };\\n}\\n\\nasync function runGrow(target, percentMoney, threads) {\\n\\tlet time = 0;\\n\\tlet threadsCommitted = 0;\\n\\tconst { host, threads_available } = getHostAndThreads(grow_scriptRam);\\n\\tif (!host) return { time, threadsCommitted };\\n\\tconst growthFactor = 1 / (percentMoney || 0.0000001);\\n\\tconst threadsNeeded = Math.max(Math.floor(ns.growthAnalyze(target, growthFactor, getCores(host))) - threads, 1);\\n\\tlet threadToUse = Math.min(threads_available, threadsNeeded);\\n\\tif (!ns.fileExists(grow_script, host)) {\\n\\t\\tawait ns.scp(grow_script, host);\\n\\t}\\n\\n\\tconst pid = await ns.exec(grow_script, host, threadToUse, target, Math.random());\\n\\tif (pid > 0) {\\n\\t\\tif (hasFormulas() && threadsNeeded <= threadToUse) {\\n\\t\\t\\ttime = ns.formulas.hacking.growTime(ns.getServer(target), ns.getPlayer());\\n\\t\\t}\\n\\t\\t// ns.print(`Grow ${host}[${threadToUse}] -> ${target}`);\\n\\t\\tthreadsCommitted = threadToUse;\\n\\t}\\n\\tconst w = await runWeaken(target,ns.growthAnalyzeSecurity(threadsCommitted),0);\\n\\treturn { time:w.time, threadsCommitted: w.threadsCommitted + threadsCommitted };\\n}\\n\\nasync function runHack(target, threads) {\\n\\tlet time = 0;\\n\\tlet threadsCommitted = 0;\\n\\tconst { host, threads_available } = getHostAndThreads(hack_scriptRam);\\n\\tif (!host) return { time, threadsCommitted };\\n\\tconst threadsNeeded = Math.max(parseInt((hackPercent / ns.hackAnalyze(target)).toFixed(0)) - threads, 1);\\n\\tlet threadToUse = Math.min(threads_available, threadsNeeded);\\n\\tif (!ns.fileExists(hack_script, host)) {\\n\\t\\tawait ns.scp(hack_script, host);\\n\\t}\\n\\n\\tconst cashingOut = ns.hackAnalyze(target) * threadToUse * ns.getServerMoneyAvailable(target);\\n\\tconst pid = await ns.exec(hack_script, host, threadToUse, target, Math.random());\\n\\n\\tif (pid > 0) {\\n\\t\\tif (hasFormulas() && threadsNeeded <= threadToUse) {\\n\\t\\t\\ttime = ns.formulas.hacking.hackTime(ns.getServer(target), ns.getPlayer());\\n\\t\\t}\\n\\t\\tns.print(`Hack ${host}[${threadToUse}] -> ${target}[${ns.nFormat(cashingOut, \\\"($ 0.00 a)\\\")}]`);\\n\\t\\tthreadsCommitted = threadToUse;\\n\\t}\\n\\n\\tconst w = await runWeaken(target,ns.hackAnalyzeSecurity(threadsCommitted),0);\\n\\treturn { time:w.time, threadsCommitted: w.threadsCommitted + threadsCommitted };\\n}\\n\\nfunction hasFormulas() {\\n\\treturn ns.fileExists('Formulas.exe');\\n}\\nfunction getHostAndThreads(scriptRam) {\\n\\tconst host = serversForExecution.find((host) => {\\n\\t\\tlet maxRam = ns.getServerMaxRam(host);\\n\\t\\t// reserve some ram for other scripts\\n\\t\\tif (host === 'home') {\\n\\t\\t\\tmaxRam = Math.max(maxRam * .75, maxRam - 128);\\n\\t\\t}\\n\\t\\tconst threads_available = Math.floor((maxRam - ns.getServerUsedRam(host)) / scriptRam);\\n\\t\\treturn threads_available >= 1;\\n\\t});\\n\\tif (!host) return { host: null, threads_available: 0 };\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\t// reserve some ram for other scripts\\n\\tif (host === 'home') {\\n\\t\\tmaxRam = Math.max(maxRam * .75, maxRam - 128);\\n\\t}\\n\\tconst threads_available = Math.floor((maxRam - ns.getServerUsedRam(host)) / scriptRam);\\n\\treturn { host, threads_available };\\n}\\nfunction getNextState(server, nextStateUpdateRequiredAt) {\\n\\tif (nextStateUpdateRequiredAt > Date.now()) return null;\\n\\tlet nextState;\\n\\tconst sec = parseFloat((ns.getServerSecurityLevel(server) - ns.getServerMinSecurityLevel(server)).toFixed(2));\\n\\tconst percentMoney = parseFloat((ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server)).toFixed(2));\\n\\tif (sec > 5) {\\n\\t\\tnextState = 'weaken';\\n\\t} else if (percentMoney < 0.95) {\\n\\t\\tnextState = 'grow';\\n\\t} else {\\n\\t\\tnextState = 'hack';\\n\\t}\\n\\t// \\tns.print(`Next state for ${server} ${nextState} \\n\\t//   $% : ${percentMoney * 100} \\n\\t//   sec: +${sec.toFixed(2)} \\n\\t//   at : ${new Date(nextStateUpdateRequiredAt ? nextStateUpdateRequiredAt : Date.now()).toTimeString()}`);\\n\\treturn {\\n\\t\\tserver: server,\\n\\t\\tnextState: nextState,\\n\\t\\tpercentMoney: percentMoney,\\n\\t\\tcurrentSecurity: sec,\\n\\t\\tnextStateUpdateRequiredAt: 0,\\n\\t\\tthreadsCommitted: 0\\n\\t};\\n}\",\"filename\":\"mcp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/51d7401f-f6da-4383-9e1c-02e92518e750\",\"moduleSequenceNumber\":66217},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/41c83801-606b-42bd-bcfc-dde73d406d0a\",\"moduleSequenceNumber\":66199},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/34b9c5a0-0024-42be-af83-52652d6a5370\",\"moduleSequenceNumber\":336608},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/2b1f73f4-ca97-457e-8df9-81ade5657196\",\"moduleSequenceNumber\":66199},{\"filename\":\"mcp.js\",\"url\":\"blob:https://danielyxie.github.io/de4d6c75-838a-4c4d-9eb8-fc9e0b2ce2d2\",\"moduleSequenceNumber\":337762}],\"dependents\":[],\"ramUsage\":13.1,\"server\":\"home\",\"moduleSequenceNumber\":1842551,\"_hash\":\"40eafd0a62ace6a9ec46bb73cec73dc5213d36aa5cacc77b5a2d69dd95e433ba\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { copyHackingFiles } from 'utils.js';\\nimport {getOwnedAugmentationsStatic} from 'augments.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.clearLog();\\n\\tns.tail();\\n\\t// const s = ns.getPurchasedServers();\\n\\t// for (let server of s) {\\n\\t// \\tawait copyHackingFiles(ns, { hostname: server, hasAdminRights: true });\\n\\t// }\\n\\tfor (let i =0; i<ns.hacknet.numNodes();i++) {\\n\\tawait copyHackingFiles(ns, { hostname: `hacknet-node-${i}`, hasAdminRights: true });\\n\\t}\\n\\tlet activeAugmentations = getOwnedAugmentationsStatic(ns);\\n        ns.print(activeAugmentations.includes(\\\"Neuroreceptor Management Implant\\\"));\\n\\t\\tns.workForFaction(\\\"NiteSec\\\", 'security', false);\\n\\t// ns.print(ns.corporation.hasUnlockUpgrade('Smart Supply'));\\n\\t// ns.print(JSON.stringify(ns.corporation.getWarehouse('Agriculture', 'Sector-12'),null, 2));\\n\\t// ns.print(JSON.stringify(ns.getPlayer(), null, 2));\\n\\t// const words = [\\n\\t// \\t'bitburner', 'hack', 'cpu', 'hacknet', 'augment','install','noodles','noodle','vitalife'\\n\\t// ]\\n\\t// for (let word of words)\\n\\t// \\tns.print(`${word} ${ns.rainbow(word)}`);\\n\\t// const gang = ns.gang.getGangInformation();\\n\\t// const chanceVsOtherGang = Object.entries(ns.gang.getOtherGangInformation())\\n\\t// \\t.filter(([k, s]) => k !== gang.faction && s.territory > 0)\\n\\t// \\t.map(([k, s]) => ns.gang.getChanceToWinClash(k));\\n\\n\\n\\t// let members = [];\\n\\t// let names = ns.gang.getMemberNames();\\n\\t// for (const name of names) {\\n\\t// \\tmembers.push(ns.gang.getMemberInformation(name));\\n\\t// }\\n\\t// let tasks = [];\\n\\t// names = ns.gang.getTaskNames();\\n\\t// for (const name of names) {\\n\\t// \\ttasks.push(ns.gang.getTaskStats(name));\\n\\t// }\\n\\t// let i = 0;\\n\\t// for (const member of members) {\\n\\t// \\ti++;\\n\\t// \\tlet prevTask = member.task;\\n\\t// \\tlet bestTask = '';\\n\\t// \\tlet mg = 0;\\n\\t// \\tfor (const task of tasks) {\\n\\t// \\t\\tlet nmg = ns.formulas.gang.respectGain(gang, member, task);\\n\\t// \\t\\t//if (nmg > 0) \\n\\t// \\t\\tns.print(`${member.name} ${task.name} ${nmg}`);\\n\\t// \\t\\tif (nmg > mg) {\\n\\t// \\t\\t\\tbestTask = task.name;\\n\\t// \\t\\t\\tmg = nmg;\\n\\t// \\t\\t}\\n\\t// \\t}\\n\\t// \\tns.print(`BEST TASK ${member.name} ${bestTask} ${mg}`);\\n\\t// }\\n\\t// const target = 'CSEC';\\n\\t// const server = ns.getServer(target);\\n\\t// const player = ns.getPlayer();\\n\\t// ns.print(ns.getBitNodeMultipliers())\\n\\t// ns.print(JSON.stringify(player, null, 2));\\n\\t// ns.print(ns.gang.getMemberNames())\\n\\t// ns.print(ns.gang.getTaskNames());\\n\\t// const hnc = ns.hacknet.getPurchaseNodeCost();\\n\\t// const mgr = 0; //ns.hacknet.getNodeStats(200, 64, 16, player.hacknet_node_money_mult)\\n\\t// const htime = ns.formulas.hacking.hackTime(ns.getServer(target), ns.getPlayer());\\n\\n\\t// const owk = ns.weakenAnalyze(1, 4);\\n\\t// const securityLevelToBeat = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\n\\t// const threadsNeeded = Math.ceil(securityLevelToBeat / owk);\\n\\t// const bingo = ns.weakenAnalyze(threads, 4)\\n\\t// ns.print(`${owk} * ${threads} >= ${securityLevelToBeat} `);\\n\\t// ns.tprint(`${ns.hackAnalyze(target)} ${mgr} ${''}`);\\n\\t// ns.print(`${hnc} ${mgr}`);\\n\\t// server.hackDifficulty = server.minDifficulty;\\n\\t// const ht1 = ns.formulas.hacking.growPercent(server, 1, player, 1);\\n\\t// const threads = 2.1 / ht1;\\n\\t// const ht2 = ns.formulas.hacking.growPercent(server, 10000, player, 1);\\n\\t// let percent = 0;\\n\\t// let growThreadsNeeded = 1;\\n\\t// while (percent < 2.1) {\\n\\t// \\tpercent = ns.formulas.hacking.growPercent(server, growThreadsNeeded++, player, 1);\\n\\t// \\tns.print(`${percent}`);\\n\\t// \\tawait ns.sleep(0);\\n\\t// }\\n\\t// server.hackDifficulty = server.minDifficulty;\\n\\t// const ht2 = ns.formulas.hacking.hackPercent(server, player);\\n\\t// ns.print(`${ht1} ${threads} ${ht2} ${growThreadsNeeded} ${percent}`);\\n\\t// let growO = ns.hackAnalyzeSecurity(1);\\n\\t// let growSecurityInc = ns.growthAnalyzeSecurity(1);\\n\\t// ns.print(`${growO} ${1} ${growSecurityInc}`);\\n\\t// \\tconst t = ns.formulas.hacking.weakenTime(server, player);\\n\\t// \\tconst wt1 = Date.now() + ns.formulas.hacking.weakenTime(server, player);\\n\\t// \\tawait ns.sleep(500);\\n\\t// \\tconst wt2 = Date.now() - (wt1 - ns.formulas.hacking.weakenTime(server, player));\\n\\t// \\tns.print(`${t} ${wt2}`);\\n\\n\\t// ns.print(`${ns.hackAnalyze('johnson-ortho')} `);\\n\\n\\n\\tNumber.prototype.toExponential = () => null;\\n\\t// eval('window').performance.now = () => 0;\\n\\n\\n\\t// ns.print(`${ns.alterReality()}`);\\n\\t// ns.print(`${ns.bypass(eval('document'))}`);\\n\\t// eval('document').querySelector(\\\"#unclickable\\\").click()\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"augments.js\",\"url\":\"blob:https://danielyxie.github.io/05babc7a-bde4-4f1f-a2ed-8563d1948479\",\"moduleSequenceNumber\":1559149},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/e4c1199b-7419-4770-8b4f-f2b765ae45c5\",\"moduleSequenceNumber\":1559137},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/0ff88371-8f78-4ea2-b76a-3619b2e35d22\",\"moduleSequenceNumber\":1559120},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/14236187-eae6-41fd-aeb6-9f2c66ea27ad\",\"moduleSequenceNumber\":1559121},{\"filename\":\"test.js\",\"url\":\"blob:https://danielyxie.github.io/1b5e9916-7aed-42a2-b285-8583b0f0e095\",\"moduleSequenceNumber\":1565813}],\"dependents\":[],\"ramUsage\":9.3,\"server\":\"home\",\"moduleSequenceNumber\":2080338,\"_hash\":\"af2f03b0ce88e6f0b83f35a162009ee18fa7c5b600da8dcfb01a53df06ce6280\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"singularity.workForFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ramUsage } from 'utils.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst args = ns.flags([[\\\"help\\\", false]]);\\n\\tif (args.help) {\\n\\t\\tns.tprint(\\\"This script will enhance your HUD (Heads up Display) with custom statistics.\\\");\\n\\t\\tns.tprint(`Usage: run ${ns.getScriptName()}`);\\n\\t\\tns.tprint(\\\"Example:\\\");\\n\\t\\tns.tprint(`> run ${ns.getScriptName()}`);\\n\\t\\treturn;\\n\\t}\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('disableLog');\\n\\tns.disableLog('getServerMaxRam')\\n\\tns.disableLog('getServerUsedRam');\\n\\n\\tconst doc = eval('document');\\n\\tconst hook0 = doc.getElementById('overview-extra-hook-0');\\n\\tconst hook1 = doc.getElementById('overview-extra-hook-1');\\n\\tconst monies = [];\\n\\tlet moneyLastTick = ns.getPlayer().money;\\n\\twhile (true) {\\n\\t\\ttry {\\n\\t\\t\\tconst headers = []\\n\\t\\t\\tconst values = [];\\n\\t\\t\\tconst player = ns.getPlayer();\\n\\n\\t\\t\\theaders.push(\\\"Scripts\\\");\\n\\t\\t\\tvalues.push(ns.nFormat(ns.getScriptIncome()[0], \\\"($0.00a)\\\") + '/s');\\n\\n\\t\\t\\tmonies.push(player.money - moneyLastTick);\\n\\t\\t\\tif (monies.length > 600) monies.shift();\\n\\t\\t\\tmoneyLastTick = player.money;\\n\\t\\t\\theaders.push(\\\"Money\\\");\\n\\t\\t\\tvalues.push(ns.nFormat(monies.reduce((a, b) => a + b, 0) / monies.length, \\\"($0.00a)\\\") + '/s');\\n\\n\\t\\t\\theaders.push(\\\"Ram Use\\\");\\n\\t\\t\\tvalues.push((ramUsage(ns) * 100).toFixed(1) + '%');\\n\\n\\t\\t\\tif (ns.heart.break() > -54000) {\\n\\t\\t\\t\\theaders.push(\\\"Karma\\\");\\n\\t\\t\\t\\tvalues.push(ns.heart.break().toFixed(0));\\n\\t\\t\\t}\\n\\n\\t\\t\\t// if (ns.fileExists('/tmp/ingang.txt')) {\\n\\t\\t\\t// \\tconst gangInfo = ns.getGangInformation();\\n\\t\\t\\t// \\theaders.push(\\\"Respect\\\");\\n\\t\\t\\t// \\tvalues.push(ns.nFormat(gangInfo.respect, '0.00a'));\\n\\t\\t\\t// \\theaders.push(\\\"Penalty\\\");\\n\\t\\t\\t// \\tvalues.push(ns.nFormat(gangInfo.wantedPenalty, '0.00%'));\\n\\t\\t\\t// \\theaders.push(\\\"Territory\\\");\\n\\t\\t\\t// \\tvalues.push(ns.nFormat(gangInfo.territory, '0.00%'));\\n\\t\\t\\t// }\\n\\n\\t\\t\\tif (ns.getSharePower() > 1) {\\n\\t\\t\\t\\theaders.push(\\\"Share\\\");\\n\\t\\t\\t\\tvalues.push(((ns.getSharePower() - 1) * 100).toFixed(2) + '%');\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Now drop it into the placeholder elements\\n\\t\\t\\thook0.innerText = headers.join(\\\"\\\\n\\\");\\n\\t\\t\\thook1.innerText = values.join(\\\"\\\\n\\\");\\n\\t\\t} catch (err) { // This might come in handy later\\n\\t\\t\\tns.print(\\\"ERROR: Update Skipped: \\\" + String(err));\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"custom-stats.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/89e271d7-4ddf-4ab4-83e4-1fe91e484db9\",\"moduleSequenceNumber\":1842562},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/b41a5d1d-e298-4b57-a105-93fbf50c7c47\",\"moduleSequenceNumber\":1842545},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/4c156d86-f0c0-45ad-add7-4b50f991d50c\",\"moduleSequenceNumber\":1842546},{\"filename\":\"custom-stats.js\",\"url\":\"blob:https://danielyxie.github.io/218b7504-2fbe-48e4-8189-99c8b584d704\",\"moduleSequenceNumber\":1842700}],\"dependents\":[],\"ramUsage\":2.75,\"server\":\"home\",\"moduleSequenceNumber\":1842700,\"_hash\":\"4b9469a509c8cf93404e80bb1625b76b7717f843073b3d3bc8f890e2b5eccf59\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getSharePower\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { initAugments } from \\\"./augments\\\";\\n\\nlet ns;\\n\\n/** @param {NS} pns **/\\nexport async function main(pns) {\\n\\tns = pns;\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('scan');\\n\\tns.clearLog();\\n\\tns.tail();//todo us box\\n\\tconst tmpFiles = ns.ls('home', 'tmp');\\n\\tfor (const tmpFp of tmpFiles) {\\n\\t\\tns.rm(tmpFp, 'home');\\n\\t}\\n\\n\\tif (ns.heart.break() < -54000) {\\n\\t\\tns.print('heart plenty broken tyvm');\\n\\t\\tns.gang.createGang('Slum Snakes');\\n\\t}\\n\\tif (ns.gang.inGang()) {\\n\\t\\tawait ns.write('/tmp/ingang.txt', ns.gang.getGangInformation().faction, 'w');\\n\\t}\\n\\tawait ns.write('/tmp/player.txt', JSON.stringify(ns.getPlayer(), null, 2), \\\"w\\\");\\n\\tconst multis = JSON.stringify(ns.getBitNodeMultipliers(), null, 2);\\n\\tconst fp = `/tmp/getBitNodeMultipliers.txt`;\\n\\tawait ns.write(fp, multis, 'w');\\n\\n\\tns.print('init augs details');\\n\\tawait initAugments(ns);\\n\\tns.print('init sleeves statics');\\n\\tawait writeSleeveData();\\n\\n\\tawait writeServers('', 'home');\\n\\tns.exec('ensureRoot.js', 'home');\\n\\tns.exec('purchase-servers.js', 'home');\\n\\tns.exec('player.js', 'home');\\n\\tns.exec('sleeves.js', 'home');\\n\\tns.exec('megacorp.js', 'home');\\n\\tns.exec('workForFaction.js', 'home', 1, !ns.gang.inGang() ? `--gang-focus` : '--no-crime');\\n\\tif (ns.gang.inGang()) ns.exec('gangum.js', 'home');\\n\\tns.exec('mcp_hgw.js', 'home');\\n\\tns.exec('custom-stats.js', 'home');\\n\\t// ns.exec('charts.js', 'home');\\n\\t// ns.exec('chart_ram.js', 'home');\\n}\\nimport { list_servers } from 'opened_servers.js';\\nasync function writeServers() {\\n\\tconst hosts = list_servers(ns);\\n\\tfor (let host of hosts) {\\n\\t\\tconst serverDetails = ns.getServer(host);\\n\\t\\tserverDetails.hasAdminRights = false;\\n\\t\\tserverDetails.backdoorInstalled = false;\\n\\t\\tconst fp = `/tmp/${host.replaceAll(/[\\\\.\\\\s]/g, '_')}.txt`;\\n\\t\\tawait ns.write(fp, JSON.stringify(serverDetails, null, 2), 'w');\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nasync function writeSleeveData() {\\n\\tconst getNumSleeves = ns.sleeve.getNumSleeves();\\n\\tconst data = {\\n\\t\\tgetNumSleeves\\n\\t};\\n\\tawait ns.write('/tmp/sleeves_static.txt', JSON.stringify(data), 'w')\\n}\",\"filename\":\"init.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/d019e14a-7ca9-4b8f-bfeb-8c4592819a67\",\"moduleSequenceNumber\":1842545},{\"filename\":\"augments.js\",\"url\":\"blob:https://danielyxie.github.io/3247e637-4df0-4619-8bcb-581592e25f5b\",\"moduleSequenceNumber\":1842574},{\"filename\":\"init.js\",\"url\":\"blob:https://danielyxie.github.io/ebdb8505-6342-4022-aaf8-2db4c95f960a\",\"moduleSequenceNumber\":1842655}],\"dependents\":[],\"ramUsage\":36.3,\"server\":\"home\",\"moduleSequenceNumber\":2080337,\"_hash\":\"7aa01bec4da1f4c16c3d9fb7bd13adf6cfcf9652aa23b26ca06e0fa7ef89f671\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.createGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:https://danielyxie.github.io/3b1b54ab-f25c-4150-8ab0-a3aba0cf2cff\",\"moduleSequenceNumber\":265319}],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":1842555,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { list_servers } from 'opened_servers.js';\\nconst share_script = \\\"share.js\\\";\\nlet share_scriptRam = 4;\\nlet serversForExecution;\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst flags = ns.flags([['allram', false]]);\\n\\tns.disableLog('getServerMaxRam');\\n\\tns.disableLog('getServerUsedRam');\\n\\tns.disableLog('sleep');\\n\\tshare_scriptRam = ns.getScriptRam(share_script, \\\"home\\\");\\n\\tconst openedServers = (await list_servers(ns)).filter(s => ns.hasRootAccess(s))\\n\\tserversForExecution = ns.getPurchasedServers().concat(openedServers);\\n\\tlet updateAfter = Date.now().valueOf() + 30 * 1000;\\n\\twhile (true) {\\n\\t\\tif (updateAfter < Date.now()) {\\n\\t\\t\\tconst openedServers = (await list_servers(ns)).filter(s => ns.hasRootAccess(s))\\n\\t\\t\\tserversForExecution = ns.getPurchasedServers().concat(openedServers);\\n\\t\\t\\tupdateAfter = Date.now() + 30 * 1000;\\n\\t\\t}\\n\\t\\tfor (const host of serversForExecution) {\\n\\t\\t\\tconst threadsAvailable = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host)) / share_scriptRam);\\n\\t\\t\\tif (threadsAvailable <= 0) continue;\\n\\t\\t\\tif (!ns.fileExists(share_script, host)) {\\n\\t\\t\\t\\tawait ns.scp(share_script, host);\\n\\t\\t\\t}\\n\\t\\t\\tawait ns.exec(share_script, host, threadsAvailable);\\n\\t\\t\\tawait ns.sleep(0);\\n\\t\\t}\\n\\t\\t// only use max 75% of home for sharing \\n\\t\\tconst threadsAvailable = Math.floor(((ns.getServerMaxRam('home') * .75) - ns.getServerUsedRam('home')) / share_scriptRam);\\n\\t\\tif (threadsAvailable > 0) {\\n\\t\\t\\tawait ns.exec(share_script, 'home', threadsAvailable, Math.random());\\n\\t\\t}\\n\\t\\tawait ns.sleep(0);\\n\\t}\\n}\",\"filename\":\"sharing_is_caring.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/c9e7c2b2-b650-45c5-8aa9-0c7408df8c08\",\"moduleSequenceNumber\":139654},{\"filename\":\"sharing_is_caring.js\",\"url\":\"blob:https://danielyxie.github.io/0484b4cf-e8ce-469e-94a7-9390769aca10\",\"moduleSequenceNumber\":265219}],\"dependents\":[],\"ramUsage\":6.3,\"server\":\"home\",\"moduleSequenceNumber\":1842556,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//https://github.com/kroitor/asciichart\\n\\n// control sequences for coloring\\n\\nexport const black = \\\"\\\\x1b[30m\\\"\\nexport const red = \\\"\\\\x1b[31m\\\"\\nexport const green = \\\"\\\\x1b[32m\\\"\\nexport const yellow = \\\"\\\\x1b[33m\\\"\\nexport const blue = \\\"\\\\x1b[34m\\\"\\nexport const magenta = \\\"\\\\x1b[35m\\\"\\nexport const cyan = \\\"\\\\x1b[36m\\\"\\nexport const lightgray = \\\"\\\\x1b[37m\\\"\\nexport const adefault = \\\"\\\\x1b[39m\\\"\\nexport const darkgray = \\\"\\\\x1b[90m\\\"\\nexport const lightred = \\\"\\\\x1b[91m\\\"\\nexport const lightgreen = \\\"\\\\x1b[92m\\\"\\nexport const lightyellow = \\\"\\\\x1b[93m\\\"\\nexport const lightblue = \\\"\\\\x1b[94m\\\"\\nexport const lightmagenta = \\\"\\\\x1b[95m\\\"\\nexport const lightcyan = \\\"\\\\x1b[96m\\\"\\nexport const white = \\\"\\\\x1b[97m\\\"\\nexport const reset = \\\"\\\\x1b[0m\\\"\\n\\nexport function colored(char, color) {\\n    // do not color it if color is not specified\\n    return (color === undefined) ? char : (color + char + reset)\\n}\\n\\nexport function plot(series, cfg = undefined) {\\n    // this function takes both one array and array of arrays\\n    // if an array of numbers is passed it is transformed to\\n    // an array of exactly one array with numbers\\n    if (typeof (series[0]) == \\\"number\\\") {\\n        series = [series]\\n    }\\n\\n    cfg = (typeof cfg !== 'undefined') ? cfg : {}\\n\\n    let min = (typeof cfg.min !== 'undefined') ? cfg.min : series[0][0]\\n    let max = (typeof cfg.max !== 'undefined') ? cfg.max : series[0][0]\\n\\n    for (let j = 0; j < series.length; j++) {\\n        for (let i = 0; i < series[j].length; i++) {\\n            min = Math.min(min, series[j][i])\\n            max = Math.max(max, series[j][i])\\n        }\\n    }\\n\\n    let defaultSymbols = ['┼', '┤', '╶', '╴', '─', '╰', '╭', '╮', '╯', '│']\\n    let range = Math.abs(max - min)\\n    let offset = (typeof cfg.offset !== 'undefined') ? cfg.offset : 3\\n    let padding = (typeof cfg.padding !== 'undefined') ? cfg.padding : '           '\\n    let height = (typeof cfg.height !== 'undefined') ? cfg.height : range\\n    let colors = (typeof cfg.colors !== 'undefined') ? cfg.colors : []\\n    let ratio = range !== 0 ? height / range : 1;\\n    let min2 = Math.round(min * ratio)\\n    let max2 = Math.round(max * ratio)\\n    let rows = Math.abs(max2 - min2)\\n    let width = 0\\n    for (let i = 0; i < series.length; i++) {\\n        width = Math.max(width, series[i].length)\\n    }\\n    width = width + offset\\n    let symbols = (typeof cfg.symbols !== 'undefined') ? cfg.symbols : defaultSymbols\\n    let format = (typeof cfg.format !== 'undefined') ? cfg.format : function (x) {\\n        return (padding + x.toFixed(2)).slice(-padding.length)\\n    }\\n\\n    let result = new Array(rows + 1) // empty space\\n    for (let i = 0; i <= rows; i++) {\\n        result[i] = new Array(width)\\n        for (let j = 0; j < width; j++) {\\n            result[i][j] = ' '\\n        }\\n    }\\n    for (let y = min2; y <= max2; ++y) { // axis + labels\\n        let label = format(rows > 0 ? max - (y - min2) * range / rows : y, y - min2)\\n        result[y - min2][Math.max(offset - label.length, 0)] = label\\n        result[y - min2][offset - 1] = (y == 0) ? symbols[0] : symbols[1]\\n    }\\n\\n    for (let j = 0; j < series.length; j++) {\\n        let currentColor = colors[j % colors.length]\\n        let y0 = Math.round(series[j][0] * ratio) - min2\\n        result[rows - y0][offset - 1] = colored(symbols[0], currentColor) // first value\\n\\n        for (let x = 0; x < series[j].length - 1; x++) { // plot the line\\n            let y0 = Math.round(series[j][x + 0] * ratio) - min2\\n            let y1 = Math.round(series[j][x + 1] * ratio) - min2\\n            if (y0 == y1) {\\n                result[rows - y0][x + offset] = colored(symbols[4], currentColor)\\n            } else {\\n                result[rows - y1][x + offset] = colored((y0 > y1) ? symbols[5] : symbols[6], currentColor)\\n                result[rows - y0][x + offset] = colored((y0 > y1) ? symbols[7] : symbols[8], currentColor)\\n                let from = Math.min(y0, y1)\\n                let to = Math.max(y0, y1)\\n                for (let y = from + 1; y < to; y++) {\\n                    result[rows - y][x + offset] = colored(symbols[9], currentColor)\\n                }\\n            }\\n        }\\n    }\\n    return result.map(function (x) { return x.join('') }).join('\\\\n')\\n}\",\"filename\":\"asciichart.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":1842557,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as asciichart from 'asciichart.js';\\n//store here to be a bit more persisten to script restarts\\nconst series = { 'n00dles': new Array(50).fill(0) };\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const flags = ns.flags([\\n        ['port', 1],\\n        ['refreshrate', 10000],\\n        ['help', false],\\n    ])\\n    if (flags.help) {\\n        ns.tprint(\\\"This script plots a chart using data from a pipe\\\");\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} PIPE_NUMBER`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} 1`)\\n        return;\\n    }\\n    ns.tail();\\n    ns.disableLog('ALL');\\n    const padding = '       ';\\n    const config = {\\n        offset: 2,    // axis offset from the left (min 2)\\n        padding, // padding string for label formatting (can be overridden)\\n        height: 5,   // any height you want\\n        // the label format function applies default padding\\n        format: function (x, i) { return (padding + ns.nFormat(x, '0.00a')).slice(-padding.length) }\\n    };\\n\\n    const port = flags.port;\\n    ns.print(JSON.stringify(Object.values(series), null, 2));\\n    while (true) {\\n        ns.clearLog();\\n        const dollars = {};\\n        let d = ns.peek(port);\\n        while (d !== 'NULL PORT DATA') {\\n            d = ns.readPort(port)\\n            if (d === 'NULL PORT DATA') continue;\\n            const [target, v] = d.split(':');\\n            const dollar = Math.floor(parseFloat(v));\\n            if (!dollars[target]) dollars[target] = 0;\\n            dollars[target] += dollar;\\n            // ns.toast(`Hacked ${target} ${ns.nFormat(dollar, \\\"$0.000a\\\")}`, 'info', 3000);\\n            series[target] = series[target] || new Array(50).fill(0);\\n        }\\n        ns.print(`Interval ${ns.tFormat(flags.refreshrate)}`)\\n        for (const [target, datum] of Object.entries(series)) {\\n            series[target].push(dollars[target] || 0);\\n            series[target].shift();\\n            ns.print(target);\\n            ns.print(`${asciichart.plot(datum, config)}`);\\n        }\\n        await ns.sleep(flags.refreshrate);\\n    }\\n}\",\"filename\":\"charts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"asciichart.js\",\"url\":\"blob:https://danielyxie.github.io/fa10554f-3439-4c5e-b6fd-3700223e1df1\",\"moduleSequenceNumber\":3101},{\"filename\":\"charts.js\",\"url\":\"blob:https://danielyxie.github.io/c9208acd-fb4b-4bdd-b04a-0a533ee35e58\",\"moduleSequenceNumber\":3113}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":1842558,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { list_servers } from \\\"opened_servers.js\\\";\\nimport { boxTailSingleton } from 'utils.js';\\nimport { MinHeap} from \\\"util/heap.js\\\";\\n\\n/** @param {NS} ns **/\\nexport function main(ns) {\\n    boxTailSingleton(ns, 'autosolver', '🔎', '200px');\\n    const contracts = list_servers(ns).map((server) => {\\n        const onServer = ns.ls(server, \\\".cct\\\").map((contract) => {\\n            const type = ns.codingcontract.getContractType(contract, server);\\n            const data = ns.codingcontract.getData(contract, server);\\n            const didSolve = solve(type, data, server, contract, ns);\\n            return `${server} - ${contract} - ${type} - ${didSolve || \\\"FAILED!\\\"}`;\\n        });\\n        return onServer;\\n    }).filter(o => o.length);\\n    ns.print(`Found ${contracts.length} contracts`);\\n    contracts.forEach((contract) => ns.print(contract));\\n}\\n\\nfunction solve(type, data, server, contract, ns) {\\n    let solution;\\n    switch (type) {\\n        case \\\"Algorithmic Stock Trader I\\\":\\n            solution = maxProfit([1, data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader II\\\":\\n            solution = maxProfit([Math.ceil(data.length / 2), data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader III\\\":\\n            solution = maxProfit([2, data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader IV\\\":\\n            solution = maxProfit(data);\\n            break;\\n        case \\\"Minimum Path Sum in a Triangle\\\":\\n            solution = solveTriangleSum(data, ns);\\n            break;\\n        case \\\"Unique Paths in a Grid I\\\":\\n            solution = uniquePathsI(data);\\n            break;\\n        case \\\"Unique Paths in a Grid II\\\":\\n            solution = uniquePathsII(data);\\n            break;\\n        case \\\"Generate IP Addresses\\\":\\n            solution = generateIps(data);\\n            break;\\n        case \\\"Find Largest Prime Factor\\\":\\n            solution = factor(data);\\n            break;\\n        case \\\"Spiralize Matrix\\\":\\n            solution = spiral(data);\\n            break;\\n        case \\\"Merge Overlapping Intervals\\\":\\n            solution = mergeOverlap(data);\\n            break;\\n        case \\\"Subarray with Maximum Sum\\\":\\n            solution = subArrayMaxSum(data);\\n            break;\\n        case \\\"Array Jumping Game\\\":\\n            solution = arrayJump(data);\\n            break;\\n        case \\\"Find All Valid Math Expressions\\\":\\n            solution = allExpressions(data);\\n            break;\\n        case \\\"Sanitize Parentheses in Expression\\\":\\n            solution = sanitizeParentheses(data);\\n            break;\\n        case \\\"Total Ways to Sum\\\":\\n            solution = totalWayToSum(data);\\n            break;\\n        case \\\"Total Ways to Sum II\\\":\\n            solution = solveWaysToSumII(data);\\n            break;\\n        case \\\"HammingCodes: Encoded Binary to Integer\\\":\\n            solution = hammingDecode(data);\\n            break;\\n        case \\\"HammingCodes: Integer to encoded Binary\\\":\\n            solution = hammingEncode(data);\\n            break;\\n        case \\\"Array Jumping Game II\\\":\\n            solution = arrayJumpingGameII(data);\\n            break;\\n        case \\\"Shortest Path in a Grid\\\":\\n            solution = shortestPathInAGrid(data);\\n            break;\\n        default:\\n            solution = null;\\n            ns.print(type + ' No solution implemented');\\n            break;\\n    }\\n    return (solution !== null) ? ns.codingcontract.attempt(solution, contract, server, { returnReward: true }) : null;\\n}\\n\\n//ALGORITHMIC STOCK TRADER\\n\\nfunction maxProfit(arrayData) {\\n    let i, j, k;\\n\\n    let maxTrades = arrayData[0];\\n    let stockPrices = arrayData[1];\\n\\n    // WHY?\\n    let tempStr = \\\"[0\\\";\\n    for (i = 0; i < stockPrices.length; i++) {\\n        tempStr += \\\",0\\\";\\n    }\\n    tempStr += \\\"]\\\";\\n    let tempArr = \\\"[\\\" + tempStr;\\n    for (i = 0; i < maxTrades - 1; i++) {\\n        tempArr += \\\",\\\" + tempStr;\\n    }\\n    tempArr += \\\"]\\\";\\n\\n    let highestProfit = JSON.parse(tempArr);\\n\\n    for (i = 0; i < maxTrades; i++) {\\n        for (j = 0; j < stockPrices.length; j++) { // Buy / Start\\n            for (k = j; k < stockPrices.length; k++) { // Sell / End\\n                if (i > 0 && j > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n                } else if (i > 0 && j > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n                } else if (i > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n                } else if (j > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n                } else {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], stockPrices[k] - stockPrices[j]);\\n                }\\n            }\\n        }\\n    }\\n    return highestProfit[maxTrades - 1][stockPrices.length - 1];\\n}\\n\\n//SMALLEST TRIANGLE SUM\\n\\nfunction solveTriangleSum(arrayData, ns) {\\n    let triangle = arrayData;\\n    let nextArray;\\n    let previousArray = triangle[0];\\n\\n    for (let i = 1; i < triangle.length; i++) {\\n        nextArray = [];\\n        for (let j = 0; j < triangle[i].length; j++) {\\n            if (j == 0) {\\n                nextArray.push(previousArray[j] + triangle[i][j]);\\n            } else if (j == triangle[i].length - 1) {\\n                nextArray.push(previousArray[j - 1] + triangle[i][j]);\\n            } else {\\n                nextArray.push(Math.min(previousArray[j], previousArray[j - 1]) + triangle[i][j]);\\n            }\\n\\n        }\\n\\n        previousArray = nextArray;\\n    }\\n\\n    return Math.min.apply(null, nextArray);\\n}\\n\\n//UNIQUE PATHS IN A GRID\\n\\nfunction uniquePathsI(grid) {\\n    const rightMoves = grid[0] - 1;\\n    const downMoves = grid[1] - 1;\\n\\n    return Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / (factorial(downMoves)));\\n}\\n\\nfunction factorial(n) {\\n    return factorialDivision(n, 1);\\n}\\n\\nfunction factorialDivision(n, d) {\\n    if (n == 0 || n == 1 || n == d)\\n        return 1;\\n    return factorialDivision(n - 1, d) * n;\\n}\\n\\nfunction uniquePathsII(grid, ignoreFirst = false, ignoreLast = false) {\\n    const rightMoves = grid[0].length - 1;\\n    const downMoves = grid.length - 1;\\n\\n    let totalPossiblePaths = Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / (factorial(downMoves)));\\n\\n    for (let i = 0; i < grid.length; i++) {\\n        for (let j = 0; j < grid[i].length; j++) {\\n\\n            if (grid[i][j] == 1 && (!ignoreFirst || (i != 0 || j != 0)) && (!ignoreLast || (i != grid.length - 1 || j != grid[i].length - 1))) {\\n                const newArray = [];\\n                for (let k = i; k < grid.length; k++) {\\n                    newArray.push(grid[k].slice(j, grid[i].length));\\n                }\\n\\n                let removedPaths = uniquePathsII(newArray, true, ignoreLast);\\n                removedPaths *= uniquePathsI([i + 1, j + 1]);\\n\\n                totalPossiblePaths -= removedPaths;\\n            }\\n        }\\n\\n    }\\n\\n    return totalPossiblePaths;\\n}\\n\\n//GENERATE IP ADDRESSES\\n\\nfunction generateIps(num) {\\n    num = num.toString();\\n\\n    const length = num.length;\\n\\n    const ips = [];\\n\\n    for (let i = 1; i < length - 2; i++) {\\n        for (let j = i + 1; j < length - 1; j++) {\\n            for (let k = j + 1; k < length; k++) {\\n                const ip = [\\n                    num.slice(0, i),\\n                    num.slice(i, j),\\n                    num.slice(j, k),\\n                    num.slice(k, num.length)\\n                ];\\n                let isValid = true;\\n\\n                ip.forEach(seg => {\\n                    isValid = isValid && isValidIpSegment(seg);\\n                });\\n\\n                if (isValid) ips.push(ip.join(\\\".\\\"));\\n\\n            }\\n\\n        }\\n    }\\n\\n    return ips;\\n\\n}\\n\\nfunction isValidIpSegment(segment) {\\n    if (segment[0] == \\\"0\\\" && segment != \\\"0\\\") return false;\\n    segment = Number(segment);\\n    if (segment < 0 || segment > 255) return false;\\n    return true;\\n}\\n\\n//GREATEST FACTOR\\n\\nfunction factor(num) {\\n    for (let div = 2; div <= Math.sqrt(num); div++) {\\n        if (num % div != 0) {\\n            continue;\\n        }\\n        num = num / div;\\n        div = 1;\\n    }\\n    return num;\\n}\\n\\n//SPIRALIZE Matrix\\n\\nfunction spiral(arr, accum = []) {\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(arr.shift());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(column(arr, arr[0].length - 1));\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(arr.pop().reverse());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(column(arr, 0).reverse());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    return spiral(arr, accum);\\n}\\n\\nfunction column(arr, index) {\\n    const res = [];\\n    for (let i = 0; i < arr.length; i++) {\\n        const elm = arr[i].splice(index, 1)[0];\\n        if (elm) {\\n            res.push(elm);\\n        }\\n    }\\n    return res;\\n}\\n\\n// Merge Overlapping Intervals\\n\\nfunction mergeOverlap(intervals) {\\n    intervals.sort(([minA], [minB]) => minA - minB);\\n    for (let i = 0; i < intervals.length; i++) {\\n        for (let j = i + 1; j < intervals.length; j++) {\\n            const [min, max] = intervals[i];\\n            const [laterMin, laterMax] = intervals[j];\\n            if (laterMin <= max) {\\n                const newMax = laterMax > max ? laterMax : max;\\n                const newInterval = [min, newMax];\\n                intervals[i] = newInterval;\\n                intervals.splice(j, 1);\\n                j = i;\\n            }\\n        }\\n    }\\n    return intervals;\\n}\\n\\n// Subarray with Maximum Sum\\n\\nfunction subArrays(arr, start, end, acc) {\\n    // Stop if we have reached the end of the array    \\n    if (end === arr.length)\\n        return acc;\\n    // Increment the end point and start from 0\\n    else if (start > end)\\n        subArrays(arr, 0, end + 1, acc);\\n    // create the subarray\\n    else {\\n        let subArr = [];\\n        for (let i = start; i < end; i++) {\\n            subArr.push(arr[i]);\\n        }\\n        subArr.push(arr[end]);\\n        acc.push(subArr);\\n\\n        subArrays(arr, start + 1, end, acc);\\n    }\\n    return acc;\\n}\\n\\nfunction subArrayMaxSum(arr) {\\n    arr = arr || [-6, 4, 1, 8, 10, -6];\\n    const arrays = subArrays(arr, 0, 0, []);\\n    const sums = arrays.map(o => o.reduce((a, b) => a + b, 0));\\n    return Math.max(...sums);\\n}\\n\\nfunction arrayJump(arr) {\\n    let n = arr.length;\\n    let jumps = Array.from({ length: n }, (_, i) => 0);\\n    let min;\\n    jumps[n - 1] = 0;\\n    for (let i = n - 2; i >= 0; i--) {\\n        if (arr[i] == 0)\\n            jumps[i] = Number.MAX_VALUE;\\n        else if (arr[i] >= n - i - 1)\\n            jumps[i] = 1;\\n        else {\\n            min = Number.MAX_VALUE;\\n            for (let j = i + 1; j < n && j <= arr[i] + i; j++) {\\n                if (min > jumps[j])\\n                    min = jumps[j];\\n            }\\n            if (min != Number.MAX_VALUE)\\n                jumps[i] = min + 1;\\n            else\\n                jumps[i] = min;\\n        }\\n    }\\n    return jumps[0] < Number.MAX_VALUE ? 1 : 0;\\n}\\n\\n// works for simple answers locks up a browser for large ones\\nfunction allExpressions(data) {\\n    const digits = data[0].split('')\\n    const operators = ['+', '-', '*', '']\\n    let expressions = [digits[0], '-' + digits[0]]\\n        .flatMap(d => operators.map(op => d + op))\\n    for (let i = 1; i < digits.length - 1; i++) {\\n        expressions = expressions\\n            .flatMap(e => operators.map(op => e + digits[i] + op))\\n    }\\n    return expressions.map(e => e + digits[digits.length - 1])\\n        .filter(e => {\\n            try { return eval(e) === data[1] }\\n            catch (e) { return false }\\n        })\\n}\\n\\n// Sanitize Parentheses in Expression\\n\\nfunction sanitizeParentheses(data) {\\n    const solution = Sanitize(data);\\n    if (solution == null) { return ('[\\\"\\\"]') }\\n    else { return (\\\"[\\\" + solution.join(\\\",\\\") + \\\"]\\\") }\\n}\\n\\nfunction Sanitize_removeOneParth(item) {\\n    const possibleAnswers = [];\\n    for (let i = 0; i < item.length; i++) {\\n        if (item[i].toLowerCase().indexOf(\\\"(\\\") === -1 && item[i].toLowerCase().indexOf(\\\")\\\") === -1) {\\n            continue\\n        }\\n        let possible = item.substring(0, i) + item.substring(i + 1);\\n        possibleAnswers.push(possible)\\n    }\\n    return possibleAnswers\\n}\\n\\nfunction Sanitize_isValid(item) {\\n    let unclosed = 0;\\n    for (let i = 0; i < item.length; i++) {\\n        if (item[i] == \\\"(\\\") { unclosed++ }\\n        else if (item[i] == \\\")\\\") { unclosed-- }\\n        if (unclosed < 0) { return false }\\n    }\\n    return unclosed == 0\\n}\\n\\nfunction Sanitize(data) {\\n    let currentPossible = [data];\\n    for (let i = 0; i < currentPossible.length; i++) {\\n        let newPossible = new Set();\\n        for (var j = 0; j < currentPossible.length; j++) {\\n            let newRemovedPossible = Sanitize_removeOneParth(currentPossible[j])\\n\\n            for (let item of newRemovedPossible) {\\n                newPossible.add(item)\\n            }\\n        }\\n\\n        const validBoolList = [];\\n\\n        for (let item of newPossible) {\\n            validBoolList.push(Sanitize_isValid(item))\\n        }\\n        if (validBoolList.includes(true)) {\\n            let finalList = [];\\n            newPossible = [...newPossible]\\n\\n            for (var j = 0; j < validBoolList.length; j++) {\\n                if (validBoolList[j]) {\\n                    finalList.push(newPossible[j])\\n                }\\n            }\\n\\n            finalList = new Set(finalList)\\n\\n            return [...finalList]\\n        }\\n        currentPossible = [...newPossible]\\n    }\\n\\n    return null\\n}\\n\\nfunction totalWayToSum(data) {\\n    let cache = {};\\n    let n = data;\\n    return twts(n, n, cache) - 1;\\n}\\n\\nfunction twts(limit, n, cache) {\\n    if (n < 1) { return 1; }\\n    if (limit == 1) { return 1; }\\n    if (n < limit) { return twts(n, n, cache); }\\n\\n    if (n in cache) {\\n        let c = cache[n];\\n        if (limit in c) { return c[limit]; }\\n    }\\n\\n    let s = 0;\\n    for (let i = 1; i <= limit; i++) {\\n        s += twts(i, n - i, cache);\\n    }\\n\\n    if (!(n in cache)) { cache[n] = {}; }\\n    cache[n][limit] = s; return s;\\n}\\n\\n/**\\n *\\n * @param {number[][]} input [targetNumber,[available numbers]]\\n * @returns\\n */\\nasync function solveWaysToSumII(input) {\\n    /**\\n     *\\n     * @param {number} target\\n     * @param {number[]} nums\\n     * @returns\\n     */\\n    let n = input[0];\\n    let nums = input[1];\\n    let table = new Array(n + 1);\\n    for (let i = 0; i < n + 1; i++) {\\n        table[i] = 0;\\n    }\\n    table[0] = 1;\\n\\n    for (let i of nums) {\\n        if (i >= n) {\\n            continue;\\n        }\\n        for (let j = i; j <= n; j++) {\\n            table[j] += table[j - i];\\n        }\\n        // console.log(table);\\n    }\\n    return table[n];\\n}\\n\\nfunction hammingEncode(data) {\\n    let N = Math.floor(Math.log2(data));\\n    let vec = Array.from({ length: N + 1 }, (_, i) => Math.floor(data / 2 ** (N - i)) % 2);\\n\\n    let masks = [\\n        /*012345678901234567890123456789012345678901234567890123456*/\\n        \\\"111111111111111111111111111111111111111111111111111111111\\\",\\n        \\\"110110101011010101010101011010101010101010101010101010101\\\",\\n        \\\"101101100110110011001100110110011001100110011001100110011\\\",\\n        \\\"011100011110001111000011110001111000011110000111100001111\\\",\\n        \\\"000011111110000000111111110000000111111110000000011111111\\\",\\n        \\\"000000000001111111111111110000000000000001111111111111111\\\",\\n        \\\"000000000000000000000000001111111111111111111111111111111\\\"\\n    ].map(x => x.split(\\\"\\\").map(y => Number(y)));\\n\\n    function hadamard(x, y) {\\n        return Array.from({ length: Math.min(x.length, y.length) }, (_, i) => x[i] * y[i]);\\n    }\\n    let parities = masks.map(mask => hadamard(mask, vec).reduce((a, n) => a + n) % 2);\\n\\n    for (let i = 1; i < parities.length; ++i) { parities[0] += parities[i]; }\\n    parities[0] %= 2;\\n\\n    /*01234567890123456789012345678901234567890123456789012345678901234*/\\n    let p_bit = \\\"11101000100000001000000000000000100000000000000000000000000000001\\\";\\n\\n    let output = [];\\n    for (let i = 0, p = 0, d = 0; d < vec.length; ++i) {\\n        if (p_bit[i] === \\\"1\\\") {\\n            output.push(parities[p++]);\\n        } else {\\n            output.push(vec[d++]);\\n        }\\n    }\\n\\n    return output.join(\\\"\\\");\\n}\\n\\n\\nfunction arrayJumpingGameII(arrayData) {\\n    let n = arrayData.length;\\n    let reach = 0;\\n    let jumps = 0;\\n    let lastJump = -1;\\n    while (reach < n - 1) {\\n        let jumpedFrom = -1;\\n        for (let i = reach; i > lastJump; i--) {\\n            if (i + arrayData[i] > reach) {\\n                reach = i + arrayData[i];\\n                jumpedFrom = i;\\n            }\\n        }\\n        if (jumpedFrom === -1) {\\n            jumps = 0;\\n            break;\\n        }\\n        lastJump = jumpedFrom;\\n        jumps++;\\n    }\\n    return jumps\\n}\\n\\n\\nfunction shortestPathInAGrid(data) {\\n    let H = data.length, W = data[0].length;\\n    let dist = Array.from(Array(H), () => Array(W).fill(Number.POSITIVE_INFINITY));\\n    dist[0][0] = 0;\\n\\n    let queue = [[0, 0]];\\n    while (queue.length > 0) {\\n        let [i, j] = queue.shift();\\n        let d = dist[i][j];\\n\\n        if (i > 0     && d + 1 < dist[i - 1][j] && data[i - 1][j] !== 1)\\n        { dist[i - 1][j] = d + 1; queue.push([i - 1, j]); }\\n        if (i < H - 1 && d + 1 < dist[i + 1][j] && data[i + 1][j] !== 1)\\n        { dist[i + 1][j] = d + 1; queue.push([i + 1, j]); }\\n        if (j > 0     && d + 1 < dist[i][j - 1] && data[i][j - 1] !== 1)\\n        { dist[i][j - 1] = d + 1; queue.push([i, j - 1]); }\\n        if (j < W - 1 && d + 1 < dist[i][j + 1] && data[i][j + 1] !== 1)\\n        { dist[i][j + 1] = d + 1; queue.push([i, j + 1]); }\\n    }\\n\\n    let path = \\\"\\\";\\n    if (Number.isFinite(dist[H - 1][W - 1])) {\\n        let i = H - 1, j = W - 1;\\n        while (i !== 0 || j !== 0) {\\n            let d = dist[i][j];\\n\\n            let new_i = 0, new_j = 0, dir = \\\"\\\";\\n            if (i > 0     && dist[i - 1][j] < d)\\n            { d = dist[i - 1][j]; new_i = i - 1; new_j = j; dir = \\\"D\\\"; }\\n            if (i < H - 1 && dist[i + 1][j] < d)\\n            { d = dist[i + 1][j]; new_i = i + 1; new_j = j; dir = \\\"U\\\"; }\\n            if (j > 0     && dist[i][j - 1] < d)\\n            { d = dist[i][j - 1]; new_i = i; new_j = j - 1; dir = \\\"R\\\"; }\\n            if (j < W - 1 && dist[i][j + 1] < d)\\n            { d = dist[i][j + 1]; new_i = i; new_j = j + 1; dir = \\\"L\\\"; }\\n\\n            i = new_i; j = new_j;\\n            path = dir + path;\\n        }\\n    }\\n\\n    return path;\\n}\\n\\nfunction hammingDecode(_data) {\\n    let _build = _data.split(\\\"\\\"); // ye, an array again\\n    let _testArray = []; //for the \\\"tests\\\". if any is false, it is been altered data, will check and fix it later\\n    let _sum_parity = Math.ceil(Math.log2(_data.length)); // excluding first bit\\n    let count = (arr, val) => arr.reduce((a, v) => (v === val ? a + 1 : a), 0); // count.... again ;)\\n    let _overallParity = _build.splice(0, 1).join(\\\"\\\"); // remove first index, for checking and to use the _build properly later\\n    _testArray.push((_overallParity === (count(_build, \\\"1\\\") % 2).toString())); // checking the \\\"overall\\\" parity\\n    for (var i = 0; i < _sum_parity; i++) {\\n        let _tempIndex = Math.pow(2, i) - 1 // get the parityBits Index\\n        let _tempStep = _tempIndex + 1 // set the stepsize\\n        let _tempData = [..._build] // \\\"copy\\\" the build-data\\n        let _tempArray = [] // init empty array for \\\"testing\\\"\\n        while (_tempData[_tempIndex] !== undefined) { // extract from the copied data until the \\\"starting\\\" index is undefined\\n            var _temp = [..._tempData.splice(_tempIndex, _tempStep * 2)] // extract 2*stepsize\\n            _tempArray.push(..._temp.splice(0, _tempStep)) // and cut again for keeping first half\\n        }\\n        let _tempParity = _tempArray.shift() // and cut the first index for checking with the rest of the data\\n        _testArray.push(((_tempParity === (count(_tempArray, \\\"1\\\") % 2).toString()))) // is the _tempParity the calculated data?\\n    }\\n    let _fixIndex = 0; // init the \\\"fixing\\\" index amd start with -1, bc we already removed the first bit\\n    for (let i = 1; i < _sum_parity + 1; i++) {\\n        _fixIndex += (_testArray[i]) ? 0 : (Math.pow(2, i) / 2)\\n    }\\n    _build.unshift(_overallParity)\\n    // fix the actual hammingcode if there is an error\\n    if (_fixIndex > 0 && _testArray[0] === false) { // if the overall is false and the sum of calculated values is greater equal 0, fix the corresponding hamming-bit\\n        _build[_fixIndex] = (_build[_fixIndex] === \\\"0\\\") ? \\\"1\\\" : \\\"0\\\"\\n    }\\n    else if (_testArray[0] === false) { // otherwise, if the the overall_parity is only wrong, fix that one\\n        _overallParity = (_overallParity === \\\"0\\\") ? \\\"1\\\" : \\\"0\\\"\\n    }\\n    else if (_testArray[0] === true && _testArray.some((truth) => truth === false)) {\\n        return 0 // uhm, there's some strange going on... 2 bits are altered? How?\\n    }\\n    // oof.. halfway through... we fixed the altered bit, now \\\"extract\\\" the parity from the build and parse the binary data\\n    for (let i = _sum_parity; i >= 0; i--) { // start from the last parity down the starting one\\n        _build.splice(Math.pow(2, i), 1)\\n    }\\n    _build.splice(0, 1)\\n    return parseInt(_build.join(\\\"\\\"), 2)\\n}\",\"filename\":\"autosolver.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/util/heap.js\",\"url\":\"blob:https://danielyxie.github.io/a28dfbfa-e083-44ea-96fa-1cd79a568110\",\"moduleSequenceNumber\":1842576},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/eb0300b7-1a12-4c25-8ca1-e0c71ea075d3\",\"moduleSequenceNumber\":1842562},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/3cc389cb-ed06-46f2-87f5-a7b44296415d\",\"moduleSequenceNumber\":1842545},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/db04a979-f7d6-4b69-93d4-39b371e9363a\",\"moduleSequenceNumber\":1842546},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/24fcc1cb-aefc-4b32-bfc2-5f538744276b\",\"moduleSequenceNumber\":1842545},{\"filename\":\"autosolver.js\",\"url\":\"blob:https://danielyxie.github.io/b870b547-79f2-4713-b16d-559764fc9ef3\",\"moduleSequenceNumber\":2175085}],\"dependents\":[],\"ramUsage\":22,\"server\":\"home\",\"moduleSequenceNumber\":2175085,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as asciichart from 'asciichart.js';\\nimport { ramUsage } from 'utils.js'\\n//store here to be a bit more persisten to script restarts\\nconst series = { 'ramUsage': new Array(53).fill(0) };\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const flags = ns.flags([\\n        ['refreshrate', 5000],\\n        ['help', false],\\n    ])\\n    if (flags.help) {\\n        ns.tprint(\\\"This script plots a chart of ram use\\\");\\n        ns.tprint(`USAGE: run ${ns.getScriptName()}`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\n        return;\\n    }\\n    ns.tail();\\n    ns.disableLog('ALL');\\n    const padding = '    ';\\n    const config = {\\n        offset: 2,    // axis offset from the left (min 2)\\n        padding, // padding string for label formatting (can be overridden)\\n        height: 10,   // any height you want\\n        max: 1.0,\\n        min: 0.0,\\n        // the label format function applies default padding\\n        format: function (x, i) { return (padding + ns.nFormat(x, '0%')).slice(-padding.length) }\\n    };\\n    ns.print(JSON.stringify(Object.values(series), null, 2));\\n    while (true) {\\n        ns.clearLog();\\n        ns.print(`Interval ${ns.tFormat(flags.refreshrate)}`);\\n        const target = 'ramUsage';\\n        series[target].push(ramUsage(ns));\\n        series[target].shift();\\n        ns.print(target);\\n        ns.print(`${asciichart.plot(series[target], config)}`);\\n        await ns.sleep(flags.refreshrate);\\n    }\\n}\",\"filename\":\"chart_ram.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/83fa09fe-32bd-4d59-8717-ac94540e4c08\",\"moduleSequenceNumber\":284738},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/826c67e6-7819-4ab8-8249-f79d6f3a27d5\",\"moduleSequenceNumber\":336741},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/f117f58d-43a7-46f3-9777-dab0feada846\",\"moduleSequenceNumber\":393316},{\"filename\":\"asciichart.js\",\"url\":\"blob:https://danielyxie.github.io/254076b6-d233-4a9c-9b8d-42cd2ae58775\",\"moduleSequenceNumber\":284731},{\"filename\":\"chart_ram.js\",\"url\":\"blob:https://danielyxie.github.io/92a5a2a2-a9c2-4f97-9d21-7b291d9d1707\",\"moduleSequenceNumber\":547735}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":1842560,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { boxTailSingleton } from \\\"utils.js\\\"\\nlet ns;\\n\\nlet gang = {};\\nlet members = [];\\nlet tasks = [];\\nlet maxOtherGangPower;\\nlet chanceVsOtherGang;\\nlet warTracker;\\nlet isEarlyGang = true;\\nlet needMoreMembers = true;\\nconst memberNames = [\\n  'Teal', 'Fawn', 'TFT',\\n  'Turduck\\\\'n', 'Fender', 'Just Moe',\\n  'Mixer', 'Hip', 'Brownstone',\\n  'Sal', 'Right Hand', 'Left Shark'\\n];\\n/** @param {NS} pns **/\\nexport async function main(pns) {\\n  ns = pns;\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('gang.purchaseEquipment');\\n  ns.disableLog('gang.setMemberTask');\\n  ns.disableLog('sleep');\\n  ns.disableLog('gang.setTerritoryWarfare');\\n  ns.disableLog('gang.canRecruitMember');\\n  ns.clearLog();\\n  // ns.tail();\\n  boxTailSingleton(ns, 'gangum', '\\\\u270A', '500px');\\n  if (!ns.fileExists('/tmp/ingang.txt')) {\\n    ns.print('not in gang');\\n    return;\\n  }\\n  warTracker = {\\n    prevPower: -1,\\n    lastPowerChange: Date.now(),\\n    nextTick: -1\\n  };\\n  const moneyTask = (g, m, t) => isEarlyGang && m.str < 10000 ? ns.formulas.gang.moneyGain(g, m, t) : (t.name === 'Traffick Illegal Arms' ? 1 : 0);\\n  const respectTask = ns.formulas.gang.respectGain;\\n  const wantedTask = (g, m, t) => -1 * ns.formulas.gang.wantedLevelGain(g, m, t);\\n  const warTask = (g, m, t) => t.name === 'Territory Warfare' ? 100 : 0;\\n  isEarlyGang = true;\\n  while (true) {\\n    gang = ns.gang.getGangInformation();\\n    const og = ns.gang.getOtherGangInformation();\\n    // seem like there are rounding errors on territory percent so always consider max of all gangs power\\n    // maxOtherGangPower = Math.max(...Object.entries(og).map(([k, s]) => (k === gang.faction ? 0 : (s.territory <= 0 ? 0 : s.power))));\\n    maxOtherGangPower = Math.max(...Object.entries(og).map(([k, s]) => (k === gang.faction ? 0 : s.power)));\\n    const chanceVsOtherGangs = Object.entries(ns.gang.getOtherGangInformation())\\n      .filter(([k, s]) => k !== gang.faction && s.territory > 0)\\n      .map(([k, s]) => ns.gang.getChanceToWinClash(k));\\n    chanceVsOtherGang = chanceVsOtherGangs.reduce((a, b) => a + b, 0) / chanceVsOtherGangs.length\\n    isEarlyGang = gang.respect < 3.2e6\\n    needMoreMembers = gang.respect < 3125; // 15625;//1.6e6;\\n    const curMembers = ns.gang.getMemberNames();\\n    const newMemberNames = memberNames.filter(o => !curMembers.includes(o));\\n    if (ns.gang.canRecruitMember() && ns.gang.recruitMember(newMemberNames[0])) {\\n      ns.toast('Recruited', 'info', 10000);\\n    }\\n    getMembersStats();\\n    getTasksStats();\\n    ascend();\\n    war();\\n    if (isWartime()) {\\n      setTasks(warTask);\\n    } else if (needMoreMembers) {\\n      setTasks(respectTask);\\n    } else {\\n      setTasks(moneyTask);\\n    }\\n    equip();\\n    await ns.sleep(100);\\n  }\\n}\\n\\nfunction isWartime() {\\n  // too powerful don't get more power\\n  if (maxOtherGangPower * 1.5 < gang.power) {\\n    warTracker.nextTick = Date.now();\\n    return false;\\n  }\\n  if (warTracker.prevPower === -1) {\\n    warTracker.prevPower = gang.power;\\n  }\\n  const isBonusTime = ns.gang.getBonusTime() >= 10;\\n  if (warTracker.prevPower !== gang.power) {\\n    warTracker.prevPower = gang.power;\\n    warTracker.lastPowerChange = Date.now();\\n    warTracker.nextTick = warTracker.lastPowerChange + (isBonusTime ? 1.6 : 20) * 1000;\\n    ns.print(`PowerTick ${new Date().toLocaleTimeString()} next tick ${new Date(warTracker.nextTick).toLocaleTimeString()} clash ${(chanceVsOtherGang * 100).toPrecision(2)}%`);\\n  }\\n  if (warTracker.nextTick === -1) {\\n    ns.print(`waiting for tick`);\\n    return false;\\n  }\\n  if (warTracker.prevPower === gang.power) {\\n    if (warTracker.nextTick > Date.now()) {\\n      // waiting for next tick\\n    } else {\\n      // tick was early\\n      ns.print(`war tick was early by ${Date.now() - warTracker.nextTick}`);\\n      warTracker.nextTick = -1;\\n    }\\n  }\\n  let timeTillTick = warTracker.nextTick - Date.now();\\n  // if before war tick and until just past the tick. Power tick will update nextTick to stop war time\\n  if (-2000 < timeTillTick && timeTillTick < 300) {\\n    //WarTime!\\n    ns.print(`Wartime remaining ${timeTillTick}`);\\n    return true;\\n  } else {\\n    return false;\\n  }\\n}\\n\\nfunction war() {\\n  // if gang power is at max try to continue war for more territory\\n  const enableWar = (chanceVsOtherGang > .6) || (maxOtherGangPower * 1.5 <= gang.power);\\n  if (gang.territoryWarfareEngaged !== enableWar) {\\n    ns.print(`Changing warfare to ${enableWar}`);\\n    ns.toast(`Changing warfare to ${enableWar}`, enableWar ? 'warning' : 'info', 30000);\\n  }\\n  // ns.print(`maxOtherGangPower ${maxOtherGangPower} strongerGangs ${strongerGangs} gang.power ${gang.power} gang.territoryWarfareEngaged ${gang.territoryWarfareEngaged}`)\\n  ns.gang.setTerritoryWarfare(enableWar);\\n}\\n\\nfunction equip() {\\n  const equipmentNames = ns.gang.getEquipmentNames();\\n  for (const member of members) {\\n    for (const equipName of equipmentNames) {\\n      const stats = ns.gang.getEquipmentStats(equipName);\\n      if (ns.gang.getEquipmentCost(equipName) < ns.getServerMoneyAvailable('home') * .5) {\\n        if (!isEarlyGang || (gang.isHacking && (stats.hack || stats.cha)) || (!gang.isHacking && (stats.str || stats.def || stats.cha))) {\\n          if (ns.gang.purchaseEquipment(member.name, equipName)) {\\n            ns.print(`Purchased ${equipName} for ${member.name}`);\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n\\nfunction ascend() {\\n  for (const member of members) {\\n    const res = ns.gang.getAscensionResult(member.name);\\n    if (!res) continue;\\n    let str_mult = 1.6;\\n    if (!isEarlyGang) {\\n      str_mult = 1.1;\\n    }\\n    if (res.str > str_mult) {\\n      ns.gang.ascendMember(member.name);\\n      const msg = `Ascended ${member.name} asc_multi ${member.str_asc_mult.toPrecision(4)}, res_multi ${res.str.toPrecision(4)}`\\n      ns.print(msg);\\n      ns.toast(msg, 'info', 30000);\\n    }\\n  }\\n}\\n\\nfunction getMembersStats() {\\n  members = [];\\n  const names = ns.gang.getMemberNames();\\n  for (const name of names) {\\n    members.push(ns.gang.getMemberInformation(name));\\n  }\\n}\\n\\nfunction getTasksStats() {\\n  tasks = [];\\n  const names = ns.gang.getTaskNames();\\n  for (const name of names) {\\n    tasks.push(ns.gang.getTaskStats(name));\\n  }\\n}\\n\\nlet vigilantesNeeded = 0;\\n\\nfunction setTasks(taskFunc) {\\n  let vigilante = 0;\\n  if (ns.formulas.gang.wantedPenalty(gang) < 0.99 && gang.wantedLevel > 2) {\\n    vigilantesNeeded = (vigilantesNeeded * 1.5) || .15;\\n    vigilante = Math.floor(members.length * vigilantesNeeded);\\n    vigilantesNeeded = vigilante >= members.length ? members.length : vigilantesNeeded;\\n  } else {\\n    vigilantesNeeded = 0;\\n  }\\n  let i = 0;\\n  for (const member of members) {\\n    i++;\\n    let prevTask = member.task;\\n    let bestTask = '';\\n    let mg = 0;\\n    for (const task of tasks) {\\n      let nmg = taskFunc(gang, member, task);\\n      if (nmg > mg) {\\n        bestTask = task.name;\\n        mg = nmg;\\n      }\\n    }\\n    // if nothing or unassigned train\\n    if (bestTask === '' || bestTask === 'Unassigned') {\\n      bestTask = gang.isHacking ? 'Train Hacking' : 'Train Combat';\\n    }\\n    if (bestTask !== 'Territory Warfare' && vigilantesNeeded !== 0 && members.length - i < vigilante) {\\n      bestTask = 'Vigilante Justice';\\n    }\\n    // if waiting for a power tick\\n    if (warTracker.nextTick === -1) {\\n      bestTask = 'Territory Warfare';\\n    }\\n    if (ns.gang.setMemberTask(member.name, bestTask) && prevTask !== bestTask) {\\n      ns.print(`assigned '${member.name}' to '${bestTask}'`);\\n    }\\n  }\\n}\",\"filename\":\"gangum.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/cc79b6f6-0431-4673-9da1-f112816917c9\",\"moduleSequenceNumber\":1842562},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/ec75209b-1f40-4355-8fef-23c19d32eebc\",\"moduleSequenceNumber\":1842545},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/4ddfbeb4-68fc-4a18-85d5-2b52b9a8bfea\",\"moduleSequenceNumber\":1842546},{\"filename\":\"gangum.js\",\"url\":\"blob:https://danielyxie.github.io/5e22e4d5-e69d-40dd-bed2-151dd49411bc\",\"moduleSequenceNumber\":1927290}],\"dependents\":[],\"ramUsage\":36.9,\"server\":\"home\",\"moduleSequenceNumber\":1927290,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getOtherGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getChanceToWinClash\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.canRecruitMember\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.recruitMember\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.setTerritoryWarfare\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentStats\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getAscensionResult\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getTaskNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getTaskStats\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let css=`body{--prilt:#fd0;--pri:#fd0;--pridk:#fd0;--successlt:#ce5;--success:#ce5;--successdk:#ce5;--errlt:#c04;--err:#c04;--errdk:#c04;--seclt:#28c;--sec:#28c;--secdk:#28c;--warnlt:#f70;--warn:#f70;--warndk:#f70;--infolt:#3ef;--info:#3ef;--infodk:#3ef;--welllt:#146;--well:#222;--white:#fff;--black:#000;--hp:#c04;--money:#fc7;--hack:#ce5;--combat:#f70;--cha:#b8f;--int:#3ef;--rep:#b8f;--disabled:#888;--bgpri:#000;--bgsec:#111;--button:#146;--ff:\\\"Lucida Console\\\";overflow:hidden;display:flex}#root{flex:1 1 calc(100vw - 248px);overflow:scroll}.sb{font:12px var(--ff);color:var(--pri);background:var(--bgsec);overflow:hidden scroll;width:500px;min-height:100%;border-left:1px solid var(--welllt)}.sb *{vertical-align:middle;margin:0;font:inherit}.sb.c{width:45px}.sb.t, .sb.t>div{transition:height 200ms, width 200ms, color 200ms}.sbitem,.box{overflow:hidden;min-height:28px}.sbitem{border-top:1px solid var(--welllt);resize:vertical;width:unset !important}.sbitem.c{color:var(--sec)}.box{position:fixed;width:min-content;min-width:min-content;resize:both;background:var(--bgsec)}.box.c{height:unset !important;width:unset !important;background:none}.head{font-size:14px;display:flex;white-space:pre;font-weight:bold;user-select:none}:is(.sb,.sbitem)>.head{direction:rtl;cursor:pointer;padding:3px 0px}.box>.head{background:var(--pri);color:var(--bgpri);padding:3px;cursor:move}.body{font-size:12px;flex-direction:column;height:calc(100% - 30px)}.flex,:not(.noflex)>.body{display:flex}.flex>*,.body>*{flex:1 1 auto}.box>.body{border:1px solid var(--welllt)}.sb .title{margin:0 auto}.sbitem .close{display:none}.c:not(.sb),.c>.sbitem{height:28px !important;resize:none}.box.c>.body{display:none}.box.prompt{box-shadow:0 0 0 10000px #0007;min-width:400px}.box.prompt>.head>.icon{display:none}.sb .contextMenu{opacity:0.95;resize:none;background:var(--bgpri)}.sb .contextMenu .head{display:none}.sb .contextMenu .body{height:unset;border-radius:5px}.sb .icon{cursor:pointer;font:25px \\\"codicon\\\";line-height:0.9}:is(.sb,.sbitem)>.head>.icon{padding:0px 10px}.c>.head>.collapser{transform:rotate(180deg)}.sb :is(input,select,button,textarea){color:var(--pri);outline:none;border:none;white-space:pre}.sb :is(textarea,.log){white-space:pre-wrap;background:none;padding:0px;overflow-y:scroll}.sb :is(input,select){padding:3px;background:var(--well);border-bottom:1px solid var(--prilt);transition:border-bottom 250ms}.sb input:hover{border-bottom:1px solid var(--black)}.sb input:focus{border-bottom:1px solid var(--prilt)}.sb :is(button,input[type=checkbox]){background:var(--button);transition:background 250ms;border:1px solid var(--well)}.sb :is(button,input[type=checkbox]):hover{background:var(--bgsec)}.sb :is(button,input[type=checkbox]):focus, .sb select{border:1px solid var(--sec)}.sb button{padding:3px 6px;user-select:none}.sb .ts{color:var(--infolt)}.sb input[type=checkbox]{appearance:none;display:inline-flex;align-items:center;justify-content:center;width:22px;height:22px}.sb input[type=checkbox]:checked::after{font:22px codicon;content:\\\"\\\"}.g2{display:grid;grid:auto-flow auto / auto auto;gap:6px;margin:5px;place-items:center}.g2>.l{justify-self:start}.g2>.r{justify-self:end}.g2>.f{grid-column:1 / span 2;text-align:center}.hidden, .tooltip{display:none}*:hover>.tooltip{display:block;position:absolute;left:-5px;bottom:calc(100% + 5px);border:1px solid var(--welllt);background:var(--bgsec);color:var(--pri);font:14px var(--ff);padding:5px;white-space:pre}.nogrow{flex:0 1 auto !important}`;\\nexport let win=globalThis, doc=win[\\\"document\\\"], sidebar=doc.querySelector(\\\".sb\\\"),\\n  ts=()=>`[<span class=ts>${new Date().toLocaleTimeString(\\\"en-gb\\\")}</span>]`,\\n  slp=ms=>new Promise(r=>setTimeout(r,ms)),\\n  elemFromHTML=html=>new Range().createContextualFragment(html).firstElementChild;\\nif (!sidebar){\\n  sidebar=doc.body.appendChild(elemFromHTML(`<div class=\\\"sb\\\"><style>${css}</style><div class=\\\"head\\\"><a class=\\\"icon collapser\\\">\\\\ueab6</a><span class=title>box.sidebar v1.0</span></div>`));\\n  sidebar.addEventListener('keydown',e=>e.stopPropagation());\\n  sidebar.querySelector('.head').addEventListener('click',()=>{\\n    transition(()=>sidebar.classList.toggle('c'));\\n    setTimeout(()=>doc.querySelector(\\\".monaco-editor\\\")&&Object.assign(doc.querySelector(\\\".monaco-editor\\\").style,{width:\\\"0px\\\"}),255);\\n  });\\n  win._boxEdgeDetect=()=>doc.querySelectorAll('.sb .box').forEach(box=>Object.assign(box.style,{left:Math.max(Math.min(win.innerWidth-box.offsetWidth,box.offsetLeft),0)+\\\"px\\\",top:Math.max(Math.min(win.innerHeight-box.offsetHeight,box.offsetTop),0)+\\\"px\\\"}));\\n  win.addEventListener(\\\"resize\\\",win._boxEdgeDetect);\\n}\\nlet createItem=(title, content, icon, ...classes)=>{\\n  let item=sidebar.appendChild(elemFromHTML(`<div class=\\\"${classes.join(\\\" \\\")}\\\"><div class=\\\"head\\\"><a class=\\\"icon\\\">${icon}</a><span class=title>${title}</span><a class=\\\"icon collapser\\\">\\\\ueab7</a><a class=\\\"icon close\\\">\\\\ueab8</a></div><div class=\\\"body\\\">${content}</div></div>`));\\n  Object.assign(item,{\\n    head:item.querySelector(\\\".head\\\"),\\n    body:item.querySelector(\\\".body\\\"),\\n    toggleType:()=>[\\\"box\\\",\\\"sbitem\\\"].forEach(cl=>item.classList.toggle(cl)),\\n    logTarget:item.querySelector(\\\".log\\\"),\\n    log:(html, timestamp=true)=>{\\n      if (!item.logTarget) item.logTarget=item.body.appendChild(elemFromHTML(\\\"<div class=log></div>\\\"));\\n      let logEntry=item.logTarget.appendChild(elemFromHTML(`<p>${timestamp?ts():\\\"\\\"} ${html}</p>`));\\n      item.logTarget.scrollTop=item.logTarget.scrollHeight;\\n      return logEntry;\\n    },\\n    contextItems:{},\\n    addContextItem:(name,fn,cFn=()=>1)=>item.contextItems[name]={fn:fn,cFn:cFn},\\n  });\\n\\n  [[\\\"Remove Item\\\",()=>item[\\\"remove\\\"]()],\\n  [\\\"Cancel\\\",()=>0],\\n  [\\\"Float to Top\\\",()=>sidebar.querySelector(\\\".head\\\").insertAdjacentElement(\\\"afterEnd\\\",item),()=>item.classList.contains(\\\"sbitem\\\")],\\n  [\\\"Sink to Bottom\\\",()=>sidebar.appendChild(item),()=>item.classList.contains(\\\"sbitem\\\")],\\n  [\\\"Toggle Type\\\",()=>item.toggleType()]].forEach(args=>item.addContextItem(...args));\\n    \\n  item.addEventListener('mousedown',e=>item.classList.contains(\\\"box\\\")&&Object.assign(item.style,{zIndex:zIndex()}));\\n  item.head.addEventListener('mousedown',e=>{\\n    if(item.classList.contains(\\\"sbitem\\\")) return e.button||transition(()=>item.classList.toggle(\\\"c\\\"));\\n    if (e.target.tagName===\\\"A\\\") return;\\n    let x=e.clientX,y=e.clientY,l=item.offsetLeft,t=item.offsetTop;\\n    let boxDrag=e=>Object.assign(item.style,{left:Math.max(Math.min(win.innerWidth-item.offsetWidth,l+e.clientX-x),0)+\\\"px\\\",top:Math.max(Math.min(win.innerHeight-item.offsetHeight,t+e.clientY-y),0)+\\\"px\\\"});\\n    let boxDragEnd=e=>doc.removeEventListener('mouseup',boxDragEnd)||doc.removeEventListener('mousemove',boxDrag);\\n    doc.addEventListener('mouseup',boxDragEnd)||doc.addEventListener('mousemove',boxDrag);\\n  });\\n  item.head.querySelector(\\\".close\\\").addEventListener('click',e=>item[\\\"remove\\\"]());\\n  item.head.querySelector(\\\".collapser\\\").addEventListener('click',e=>item.classList.contains(\\\"box\\\")&&transition(()=>item.classList.toggle(\\\"c\\\")||win._boxEdgeDetect()));\\n  item.head.addEventListener(\\\"contextmenu\\\",e=>e.preventDefault()||contextMenu(item,e.clientX,e.clientY));\\n  Object.assign(item.style,{left:Math.floor(win.innerWidth/2-item.offsetWidth/2)+\\\"px\\\",top:Math.floor(win.innerHeight/2-item.offsetHeight/2)+\\\"px\\\",height:(item.offsetHeight||200)+\\\"px\\\",width:(item.offsetWidth||200)+\\\"px\\\",zIndex:zIndex()});\\n  return item;\\n};\\nexport let createBox=(title, content, icon=\\\"\\\\uea74\\\", ...classes)=>createItem(title, content, icon, ...classes, \\\"box\\\");\\nexport let createSidebarItem=(title, content, icon=\\\"\\\\uea74\\\", ...classes)=>createItem(title, content, icon, ...classes, \\\"sbitem\\\");\\nexport let confirm=text=>{\\n  let box=createBox(\\\"Confirmation Prompt\\\",`<div class=g2><div class=f>${text}</div><button class=r><u>Y</u>es</button><button class=l><u>N</u>o</button></div>`,\\\"\\\",\\\"prompt\\\");\\n  box.querySelector(\\\"button\\\").focus();\\n  box.addEventListener('keyup',e=>(e.key.toLowerCase()===\\\"y\\\"&&box.querySelector(\\\"button\\\").click())||(e.key.toLowerCase()===\\\"n\\\"&&box.querySelectorAll(\\\"button\\\")[1].click()));\\n  return new Promise(r=>box.querySelectorAll(\\\"button\\\").forEach((button,i)=>button.addEventListener('click',()=>box[\\\"remove\\\"](r(i==0)))));\\n};\\nexport let prompt=text=>{\\n  let box=createBox(\\\"Input Prompt\\\",`<div class=g2><div class=f>${text}</div><input class=r /><button class=l>Submit</button></div>`,\\\"\\\",\\\"prompt\\\");\\n  box.querySelector(\\\"input\\\").focus();\\n  box.querySelector(\\\"input\\\").addEventListener('keyup',e=>e.key=='Enter'&&box.querySelector(\\\"button\\\").click());\\n  return new Promise(r=>box.querySelector(\\\"button\\\").addEventListener('click',()=>box[\\\"remove\\\"](r(box.querySelector(\\\"input\\\").value))));\\n};\\nexport let select=(text,options)=>{\\n  let box=createBox(\\\"Selection Prompt\\\",`<div class=g2><div class=f>${text}</div><select class=r>${options.map(option=>`<option value=\\\"${option}\\\">${option}</option>`).join(\\\"\\\")}</select><button class=l>Submit</button></div>`,\\\"\\\",\\\"prompt\\\");\\n  box.querySelector(\\\"select\\\").focus();\\n  return new Promise(r=>box.querySelector(\\\"button\\\").addEventListener('click',()=>box[\\\"remove\\\"](r(box.querySelector(\\\"select\\\").value))));\\n};\\nexport let alert=text=>{\\n  let box=createBox(\\\"Alert Message\\\",`<div class=g2><div class=f>${text}</div><button class=f>Ok</button></div>`,\\\"\\\", \\\"prompt\\\");\\n  box.querySelector(\\\"button\\\").focus();\\n  return new Promise(r=>box.querySelector(\\\"button\\\").addEventListener('click',()=>r(box[\\\"remove\\\"]())));\\n};\\nlet contextMenu=(item,x,y)=>{\\n  if (item.classList.contains(\\\"prompt\\\")) return;\\n  let options = Object.entries(item.contextItems).filter(([name,entry])=>entry.cFn());\\n  let box=createBox(\\\"\\\",`<div class=g2><div class=f>${item.querySelector(\\\".title\\\").innerText}.context</div>${options.map(([name,entry])=>`<button class=n>${name}</button>`).join(\\\"\\\")}</div>`,\\\"\\\", \\\"contextMenu\\\");\\n  box.querySelector(\\\"button\\\").focus();\\n  Object.assign(box.style,{left:Math.max(Math.min(win.innerWidth-box.offsetWidth/2,x),box.offsetWidth/2)+\\\"px\\\",top:Math.max(Math.min(win.innerHeight-box.offsetHeight/2,y),box.offsetHeight/2)+\\\"px\\\",transform:\\\"translate(-50%, -50%)\\\"});\\n  box.querySelectorAll(\\\"button\\\").forEach(button=>button.addEventListener(\\\"click\\\",()=>box[\\\"remove\\\"](item.contextItems[button.innerText].fn())));\\n  box.addEventListener(\\\"mousedown\\\",e=>e.stopPropagation());\\n  let docFunction=()=>box[\\\"remove\\\"](doc.removeEventListener(\\\"mousedown\\\",docFunction));\\n  setTimeout(()=>doc.addEventListener(\\\"mousedown\\\",docFunction),10);\\n};\\nlet transition=fn=>{\\n  sidebar.classList.add(\\\"t\\\");\\n  fn();\\n  setTimeout(()=>sidebar.classList[\\\"remove\\\"](\\\"t\\\"),200);\\n}\\nlet zIndex=()=>Math.max(9000,...[...doc.querySelectorAll(\\\".sb .box\\\")].map(box=>box.style.zIndex))+1;\",\"filename\":\"/box/box.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":1842562,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHosts, runHackScript } from 'utils.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = 'joesguns';\\n\\twhile (true) {\\n\\t\\tconst hosts = getHosts(ns, 1.75);\\n\\t\\tfor (const host of hosts) {\\n\\t\\t\\tif (host.server.hostname === 'home') continue;\\n\\t\\t\\tif (!host.threadsAvailable) continue;\\n\\t\\t\\tawait runHackScript(ns, 'weaken.js', host.server.hostname, host.threadsAvailable, target);\\n\\t\\t}\\n\\t\\tawait ns.sleep(ns.formulas.hacking.weakenTime(ns.getServer(target), ns.getPlayer()) + 100);\\n\\t}\\n}\",\"filename\":\"max_hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/57fd0a9a-0654-4bdb-922e-3d45774f820a\",\"moduleSequenceNumber\":1559137},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/05bd65a6-a4c0-49d6-b8df-a380e76ba886\",\"moduleSequenceNumber\":1559120},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/def7cf41-8efd-4474-a01f-bbe4788934d5\",\"moduleSequenceNumber\":1559121},{\"filename\":\"max_hack.js\",\"url\":\"blob:https://danielyxie.github.io/a8063049-3ce0-45cb-ae51-d02a1fee8a3b\",\"moduleSequenceNumber\":1573882}],\"dependents\":[],\"ramUsage\":6.4,\"server\":\"home\",\"moduleSequenceNumber\":1842563,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { boxTailSingleton } from 'utils.js';\\n\\nconst _ = globalThis._; // lodash\\n// Global constants\\nexport const argsSchema = [\\n\\t['no-expansion', false], // If this flag is set, do not expand to new industries. Just work on what we have.\\n\\t['reserve-amount', 1e9], // Don't spend the corporation's last $billion if we can help it.\\n\\t['v', false], // Print extra log messages.\\n\\t['verbose', true],\\n\\t['can-accept-funding', true], // When we run low on money, should we look for outside funding?\\n\\t['can-go-public', true], // If we can't get private funding, should we go public?\\n\\t['issue-shares', 0], // If we go public, how many shares should we issue?\\n\\t['can-spend-hashes', true], // Can we spend hacknet hashes (assuming we have them)?\\n\\t['o', false],\\n\\t['mock', false], // Run the task assignment queue, but don't actually spend any money.\\n\\t['price-discovery-only', false], // Don't do any auto-buying, just try to keep the sale price balanced as high as possible. (Emulating TA2 as best we can)\\n\\t['first', 'Agriculture'], // What should we use for our first division? Agriculture works well, but others should be fine too.\\n\\t['second', 'RealEstate'], // What should we prefer for our second division? If we can't afford it, we'll buy what we can afford instead.\\n];\\n\\nconst desiredDivisions = 2; // One Material division to kickstart things, then a product division to really make money.\\n\\nconst bonusMaterials = ['Hardware', 'Robots', 'AICores', 'RealEstate'];\\nconst materialSizes = { Water: 0.05, Energy: 0.01, Food: 0.03, Plants: 0.05, Metal: 0.1, Hardware: 0.06, Chemicals: 0.05, Drugs: 0.02, Robots: 0.5, AICores: 0.1, RealEstate: 0.005 };\\nconst allMaterials = ['Water', 'Energy', 'Food', 'Plants', 'Metal', 'Hardware', 'Chemicals', 'Drugs', 'Robots', 'AICores', 'RealEstate'];\\n// Map of material (by name) to their sizes (how much space it takes in warehouse)\\nconst unlocks = ['Export', 'Smart Supply', 'Market Research - Demand', 'Market Data - Competition', 'VeChain', 'Shady Accounting', 'Government Partnership', 'Warehouse API', 'Office API'];\\nconst upgrades = ['Smart Factories', 'Smart Storage', 'DreamSense', 'Wilson Analytics', 'Nuoptimal Nootropic Injector Implants', 'Speech Processor Implants', 'Neural Accelerators', 'FocusWires', 'ABC SalesBots', 'Project Insight'];\\nconst cities = ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\nconst hqCity = 'Aevum'; // Our production industries will need a headquarters. It doesn't matter which city we use.\\nconst jobs = ['Operations', 'Engineer', 'Research & Development', 'Management', 'Business']; // Also, 'Training', but that's not a real job.\\n\\n// Classes here, since we want to use Industry shortly.\\nclass Industry {\\n\\tconstructor(name = '', robFac = 0.0, aiFac = 0.0, advFac = 0.0, sciFac = 0.0, hwFac = 0.0, reFac = 0.0, reqMats = {}, prodMats = [], makesProducts = false, startupCost = 0) {\\n\\t\\tthis.name = name;\\n\\t\\tthis.factors = {\\n\\t\\t\\tHardware: hwFac,\\n\\t\\t\\tRobots: robFac,\\n\\t\\t\\tAICores: aiFac,\\n\\t\\t\\tRealEstate: reFac,\\n\\t\\t\\tScience: sciFac,\\n\\t\\t\\tAdvertising: advFac,\\n\\t\\t};\\n\\t\\tthis.reqMats = reqMats;\\n\\t\\tthis.prodMats = prodMats;\\n\\t\\tthis.makesProducts = makesProducts;\\n\\t\\tthis.startupCost = startupCost;\\n\\t\\tthis.materialBonusPerSqMeter = {};\\n\\t\\tfor (const material of bonusMaterials) {\\n\\t\\t\\tthis.materialBonusPerSqMeter[material] = this.factors[material] / materialSizes[material];\\n\\t\\t}\\n\\t\\tlet scaleFactor = Object.values(this.materialBonusPerSqMeter).reduce((sum, prod) => sum + prod, 0);\\n\\t\\tthis.scaledMaterialBonus = {};\\n\\t\\tfor (const material of bonusMaterials) {\\n\\t\\t\\tthis.scaledMaterialBonus[material] = this.materialBonusPerSqMeter[material] / scaleFactor;\\n\\t\\t}\\n\\t}\\n\\tstatic fromObject(obj) {\\n\\t\\treturn new Industry(obj.name, obj.robFac, obj.aiFac, obj.advFac, obj.sciFac, obj.hwFac, obj.reFac, obj.reqMats, obj.prodMats, obj.makesProducts, obj.startupCost);\\n\\t}\\n}\\nclass Task {\\n\\t/**\\n\\t * A Task that we will try to run later.\\n\\t * @param {string} name Human readable name of the task to be run.\\n\\t * @param {function} run callback to run the task.\\n\\t * @param {number} cost allocated budget for this task\\n\\t * @param {number} priority priority, higher number is a higher priority\\n\\t */\\n\\tconstructor(name, run, cost = 0, priority = 0) {\\n\\t\\tthis.name = name;\\n\\t\\tthis.run = run;\\n\\t\\tthis.cost = cost;\\n\\t\\tthis.priority = priority; // Higher will be done sooner.\\n\\t}\\n}\\n\\n// Industry and Material data copied from Bitburner's code on February 10, 2022. (https://github.com/danielyxie/bitburner/blob/dev/src/Corporation/Industry.ts) with startupCost added manually.\\n/** @type {Industry[]} */\\nconst industries = [\\n\\tIndustry.fromObject({ name: 'Agriculture', reFac: 0.72, sciFac: 0.5, hwFac: 0.2, robFac: 0.3, aiFac: 0.3, advFac: 0.04, reqMats: { Water: 0.5, Energy: 0.5 }, prodMats: ['Plants', 'Food'], startupCost: 40e9 }),\\n\\tIndustry.fromObject({ name: 'Chemical', reFac: 0.25, sciFac: 0.75, hwFac: 0.2, robFac: 0.25, aiFac: 0.2, advFac: 0.07, reqMats: { Plants: 1, Energy: 0.5, Water: 0.5 }, prodMats: ['Chemicals'], startupCost: 70e9 }),\\n\\tIndustry.fromObject({ name: 'Fishing', reFac: 0.15, sciFac: 0.35, hwFac: 0.35, robFac: 0.5, aiFac: 0.2, advFac: 0.08, reqMats: { Energy: 0.5 }, prodMats: ['Food'], startupCost: 80e9 }),\\n\\tIndustry.fromObject({ name: 'Utilities', reFac: 0.5, sciFac: 0.6, robFac: 0.4, aiFac: 0.4, advFac: 0.08, reqMats: { Hardware: 0.1, Metal: 0.1 }, prodMats: ['Water'], startupCost: 150e9 }),\\n\\tIndustry.fromObject({ name: 'Energy', reFac: 0.65, sciFac: 0.7, robFac: 0.05, aiFac: 0.3, advFac: 0.08, reqMats: { Hardware: 0.1, Metal: 0.2 }, prodMats: ['Energy'], startupCost: 225e9 }),\\n\\tIndustry.fromObject({ name: 'Mining', reFac: 0.3, sciFac: 0.26, hwFac: 0.4, robFac: 0.45, aiFac: 0.45, advFac: 0.06, reqMats: { Energy: 0.8 }, prodMats: ['Metal'], startupCost: 300e9 }),\\n\\t//reFac is unique for 'Food' bc it diminishes greatly per city. Handle this separately in code?\\n\\tIndustry.fromObject({ name: 'Food', sciFac: 0.12, hwFac: 0.15, robFac: 0.3, aiFac: 0.25, advFac: 0.25, reFac: 0.05, reqMats: { Food: 0.5, Water: 0.5, Energy: 0.2 }, makesProducts: true, startupCost: 10e9 }),\\n\\tIndustry.fromObject({ name: 'Tobacco', reFac: 0.15, sciFac: 0.75, hwFac: 0.15, robFac: 0.2, aiFac: 0.15, advFac: 0.2, reqMats: { Plants: 1, Water: 0.2 }, makesProducts: true, startupCost: 20e9 }),\\n\\tIndustry.fromObject({ name: 'Software', sciFac: 0.62, advFac: 0.16, hwFac: 0.25, reFac: 0.15, aiFac: 0.18, robFac: 0.05, reqMats: { Hardware: 0.5, Energy: 0.5 }, prodMats: ['AICores'], makesProducts: true, startupCost: 25e9 }),\\n\\tIndustry.fromObject({ name: 'Pharmaceutical', reFac: 0.05, sciFac: 0.8, hwFac: 0.15, robFac: 0.25, aiFac: 0.2, advFac: 0.16, reqMats: { Chemicals: 2, Energy: 1, Water: 0.5 }, prodMats: ['Drugs'], makesProducts: true, startupCost: 200e9 }),\\n\\tIndustry.fromObject({ name: 'Computer', reFac: 0.2, sciFac: 0.62, robFac: 0.36, aiFac: 0.19, advFac: 0.17, reqMats: { Metal: 2, Energy: 1 }, prodMats: ['Hardware'], makesProducts: true, startupCost: 500e9 }),\\n\\tIndustry.fromObject({ name: 'RealEstate', robFac: 0.6, aiFac: 0.6, advFac: 0.25, sciFac: 0.05, hwFac: 0.05, reqMats: { Metal: 5, Energy: 5, Water: 2, Hardware: 4 }, prodMats: ['RealEstate'], makesProducts: true, startupCost: 600e9 }),\\n\\tIndustry.fromObject({ name: 'Healthcare', reFac: 0.1, sciFac: 0.75, advFac: 0.11, hwFac: 0.1, robFac: 0.1, aiFac: 0.1, reqMats: { Robots: 10, AICores: 5, Energy: 5, Water: 5 }, makesProducts: true, startupCost: 750e9 }),\\n\\tIndustry.fromObject({ name: 'Robotics', reFac: 0.32, sciFac: 0.65, aiFac: 0.36, advFac: 0.18, hwFac: 0.19, reqMats: { Hardware: 5, Energy: 3 }, prodMats: ['Robots'], makesProducts: true, startupCost: 1e12 }),\\n];\\n\\n// Global state\\nlet dictSourceFiles;\\n/** @type {CorporationInfo} */\\nlet myCorporation;\\nlet options;\\nlet verbose;\\nlet raisingCapital = 0; // Used to flag that we are trying to raise private funding\\nlet extraReserve = 0; // Used when we're saving to fund a new product.\\nlet fillSpaceQueue = []; // Flag these offices as needing workers assigned to roles.\\n\\nexport function autocomplete(data, _) {\\n\\tdata.flags(argsSchema);\\n\\treturn [];\\n}\\nlet c;\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.clearLog();\\n\\t// ns.tail();\\n\\tboxTailSingleton(ns, 'corp', '🏠', '400px');\\n\\tc = ns.corporation;\\n\\t// Pull in any information we only need at startup.\\n\\toptions = ns.flags(argsSchema);\\n\\tverbose = options.v || options.verbose;\\n\\n\\t// See if we've already created a corporation.\\n\\ttry {\\n\\t\\tmyCorporation = c.getCorporation();\\n\\t} catch {\\n\\t\\tc.createCorporation('corp', true);\\n\\t\\tmyCorporation = c.getCorporation();\\n\\t}\\n\\tawait ns.write('/tmp/incorp.txt', '', 'w');\\n\\t// If we already have a corporation, make sure we didn't leave any workers waiting for assignment.\\n\\tfor (const division of myCorporation.divisions) {\\n\\t\\tfor (const city of division.cities) {\\n\\t\\t\\tfillSpaceQueue.push(`${division.name}/${city}`);\\n\\t\\t}\\n\\t}\\n\\n\\t// We've set up the initial corporation, now run it over time.\\n\\twhile (true) {\\n\\t\\t// Do all our spending and expanding.\\n\\t\\tawait doManageCorporation(ns);\\n\\n\\t\\t// Try to manage sale prices for products.\\n\\t\\tawait doPriceDiscovery(ns);\\n\\n\\t\\t// While we wait for the next tick, process any open office positions\\n\\t\\tawait fillOpenPositionsFromQueue(ns);\\n\\n\\t\\t// Sleep until the next time we go into the 'START' phase\\n\\t\\tawait sleepWhileNotInStartState(ns, true);\\n\\n\\t\\tif (verbose) log(ns, ``);\\n\\t}\\n}\\n\\n/**\\n * This function is called in our main loop. Assess the current state of the corporation, and improve it as best we can.\\n * @param {NS} ns\\n **/\\nasync function doManageCorporation(ns) {\\n\\t// Assess the current state of the corporation, and figure out our budget.\\n\\tmyCorporation = c.getCorporation();\\n\\tlet netIncome = myCorporation.revenue - myCorporation.expenses;\\n\\tlet now = new Date().toLocaleString('en-US', { hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: true });\\n\\n\\tif (verbose) log(ns, `----- [ ${myCorporation.name} Quarterly Report ${now} ] -----`);\\n\\tlog(ns, `Corporate cash on hand: ${ns.nFormat(myCorporation.funds, '0.0a')} (Gross: ${ns.nFormat(myCorporation.revenue, '0.0a')}/s, Net: ${ns.nFormat(netIncome, '0.0a')}/s)`);\\n\\n\\t// See if we can raise more money.\\n\\tawait tryRaiseCapital(ns);\\n\\n\\tmyCorporation = c.getCorporation();\\n\\tlet budget = myCorporation.funds - options['reserve-amount'] - extraReserve;\\n\\t// If we're making more than $1 sextillion / sec, we need to stop. The game gets slow if we start employing too many people.\\n\\tif (myCorporation.revenue > 1e21) budget = 0;\\n\\tbudget = Math.max(0, budget);\\n\\tif (verbose) log(ns, `Working with a corporate budget of ${ns.nFormat(budget, '0.0a')}`);\\n\\n\\t// Let's figure out all of the things we'd like to do, before we commit to anything.\\n\\tlet tasks = [];\\n\\t/**\\n\\t * What sort of corporation-wide stuff would we like to do?\\n\\t * Buy Unlocks? Buy upgrades?\\n\\t */\\n\\tlet availableUnlocks = [];\\n\\tconst purchasedUnlocks = [];\\n\\tfor (const unlockable of unlocks) {\\n\\t\\tif (c.hasUnlockUpgrade(unlockable)) purchasedUnlocks.push(unlockable);\\n\\t\\telse availableUnlocks.push(unlockable);\\n\\t}\\n\\tfor (const unlockable of availableUnlocks) {\\n\\t\\tlet cost = c.getUnlockUpgradeCost(unlockable);\\n\\t\\tif (cost > budget) continue;\\n\\t\\t// If we can afford it, and we don't have it yet, consider buying it.\\n\\t\\tlet shouldBuy = false;\\n\\t\\tif (unlockable === 'Smart Supply' && cost < budget * 0.8) {\\n\\t\\t\\t// Push this one to the top of the list. Doing it in code is annoying.\\n\\t\\t\\ttasks.push(new Task('Unlock ' + unlockable, () => c.unlockUpgrade(unlockable), cost, 110));\\n\\t\\t} else if (unlockable === 'Warehouse API' && cost < budget * 0.25) shouldBuy = true;\\n\\t\\telse if (unlockable === 'Office API' && cost < budget * 0.25) shouldBuy = true;\\n\\t\\telse if (unlockable === 'Shady Accounting' && cost < budget * 0.5) shouldBuy = true;\\n\\t\\telse if (unlockable === 'Government Partnership' && cost < budget * 0.5) shouldBuy = true;\\n\\t\\t// else if (unlockable === 'Export' && cost < budget * 0.1) shouldBuy = true;\\n\\n\\t\\t// Put the task on our to-do list. Put all unlocks at priority 0 as \\\"nice-to-haves\\\".\\n\\t\\tif (shouldBuy) tasks.push(new Task('Unlock ' + unlockable, () => c.unlockUpgrade(unlockable), cost, 0));\\n\\t}\\n\\n\\tlet hasProductionDivision = false;\\n\\tfor (const division of myCorporation.divisions) {\\n\\t\\tlet industry = industries.find((i) => i.name === division.type);\\n\\t\\tif (industry.makesProducts) hasProductionDivision = true;\\n\\t}\\n\\t// Can we afford to level any upgrades?\\n\\tfor (const upgrade of upgrades) {\\n\\t\\tlet cost = c.getUpgradeLevelCost(upgrade);\\n\\t\\tlet nextLevel = c.getUpgradeLevel(upgrade) + 1;\\n\\t\\tif (cost > budget) continue;\\n\\t\\tif (upgrade === 'Wilson Analytics' && cost < budget * 0.9 && hasProductionDivision) {\\n\\t\\t\\t// Analytics fuels advertising, which drives up the price of products, which generates profits.\\n\\t\\t\\t// Scale the priority based on how cheap this is (cheaper is higher priority [0-100]).\\n\\t\\t\\tlet priority = Math.round((1 - cost / budget) * 100);\\n\\t\\t\\ttasks.push(new Task(`Upgrading '${upgrade}' to level ${nextLevel}`, () => c.levelUpgrade(upgrade), cost, priority));\\n\\t\\t} else if (['Smart Factories', 'Smart Storage'].includes(upgrade) && cost < budget * 0.1) {\\n\\t\\t\\t// More storage means more materials, which drives more production. More production means more sales.\\n\\t\\t\\ttasks.push(new Task(`Upgrading '${upgrade}' to level ${nextLevel}`, () => c.levelUpgrade(upgrade), cost, 10));\\n\\t\\t} else if (cost < budget * 0.01) {\\n\\t\\t\\t// Upgrade other stuff too, as long as it's cheap compared to our budget.\\n\\t\\t\\ttasks.push(new Task(`Upgrading '${upgrade}' to level ${nextLevel}`, () => c.levelUpgrade(upgrade), cost, 1));\\n\\t\\t}\\n\\t}\\n\\t/**\\n\\t * Let's take a look at our divisions for big problems. Do we need to expand to a new industry? Are any\\n\\t * of our existing industries showing a loss? What else might we need to consider here? We'll be looking\\n\\t * at every division at the end of the loop to do maintenance, so this is just high level stuff.\\n\\t */\\n\\tif (myCorporation.divisions.length === 0) {\\n\\t\\t// We definitely need a new division!\\n\\t\\t// Use up to 80% of our budget to start this first division.\\n\\t\\tlet newDivisionBudget = budget * 0.9;\\n\\t\\t// Just consider the basic materials-producing industries for our first division. Products take a long time to come online.\\n\\t\\tlet possibleIndustries = industries.filter((ind) => !ind.makesProducts);\\n\\t\\t// And only the ones where we'll be able to spend at least half our budget setting up shop.\\n\\t\\tpossibleIndustries = possibleIndustries.filter((ind) => ind.startupCost < newDivisionBudget * 0.5);\\n\\t\\t// TODO: Pick a starting industry using some sort of logic.\\n\\t\\t// For the moment, let's just try to go with Agriculture. It's cheap and works well.\\n\\t\\tlet newIndustry = possibleIndustries.find((ind) => ind.name === options['first']);\\n\\t\\tif (newIndustry) {\\n\\t\\t\\ttasks.push(new Task(`Add the first division, '${newIndustry.name}'`, () => doCreateNewDivision(ns, newIndustry, newDivisionBudget), newDivisionBudget, 100));\\n\\t\\t} else {\\n\\t\\t\\t// If we can't afford to create our first industry, something has gone very wrong. Quit now.\\n\\t\\t\\tlog(ns, `ERROR: Could not afford to create our first industry!`, 'error', true);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\t}\\n\\t// Figure out where we are in the fundraising progression. Don't buy a production industry until after accepting round 3.\\n\\tlet offer = c.getInvestmentOffer();\\n\\tif (myCorporation.divisions.length > 0 && myCorporation.divisions.length < desiredDivisions && offer.round > 3) {\\n\\t\\tlet newDivisionBudget = budget * 0.9;\\n\\t\\tlet possibleIndustries = industries.filter((ind) => ind.makesProducts);\\n\\t\\t// Only consider industries where we can still have a budget to actually get started.\\n\\t\\tpossibleIndustries = possibleIndustries.filter((ind) => ind.startupCost < budget * 0.5);\\n\\t\\tpossibleIndustries.sort((a, b) => a.startupCost - b.startupCost).reverse();\\n\\t\\tif (verbose && possibleIndustries.length) {\\n\\t\\t\\tlog(ns, `We would like to expand into a new industry. Possibilities:`);\\n\\t\\t\\tfor (const industry of possibleIndustries) {\\n\\t\\t\\t\\tlog(ns, `  ${ns.nFormat(industry.startupCost, '0.0a')} - ${industry.name}`);\\n\\t\\t\\t}\\n\\t\\t} else if (verbose) log(ns, `INFO: We would like to create a new division but we cannot afford one. Willing to spend ${ns.nFormat(budget, '0.0a')}.`);\\n\\n\\t\\t// Try to use the industry from the command line. If that doesn't work, fall back to picking from our list of possibilities.\\n\\t\\t//        let newIndustry = possibleIndustries.find((ind) => ind.name == 'Pharmaceutical');\\n\\t\\tlet newIndustry = possibleIndustries.find((ind) => ind.name === options['second']);\\n\\t\\tif (!newIndustry && possibleIndustries.length > 0) {\\n\\t\\t\\tnewIndustry = possibleIndustries[0];\\n\\t\\t}\\n\\t\\tif (newIndustry) {\\n\\t\\t\\ttasks.push(new Task(`Add a production division, '${newIndustry.name}'`, () => doCreateNewDivision(ns, newIndustry, newDivisionBudget), newDivisionBudget, 100));\\n\\t\\t} else {\\n\\t\\t\\tlog(ns, `ERROR: Buying industry failed. Aborting!`, 'error', true);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\t}\\n\\n\\t// If we have all of our divisions bought, it's worth spending hashes on research.\\n\\t// if (myCorporation.divisions.length >= desiredDivisions) {\\n\\t// \\tif (options['can-spend-hashes'])\\n\\t// \\t\\tawait doSpendHashes(ns, 'Exchange for Corporation Research');\\n\\t// }\\n\\n\\t/**\\n\\t * We've looked at the at the corporation, and come up with a list of tasks we'd like to do. Now, figure out\\n\\t * which ones we can actually accomplish on our budget.\\n\\t */\\n\\ttasks.sort((a, b) => a.cost - b.cost).reverse();\\n\\ttasks.sort((a, b) => a.priority - b.priority).reverse();\\n\\t/**\\n\\t * Finally, run each task in priority order. If we run out of money, should we buy lower priority stuff, or\\n\\t * wait? If we wait, the money might get spent expanding a division instead. This may all take some\\n\\t * adjustments over time.\\n\\t */\\n\\tlet spent = await runTasks(ns, tasks, budget);\\n\\tif (spent) budget -= spent;\\n\\tif (spent > 0 && verbose) log(ns, `Spent ${ns.nFormat(spent, '0.0a')} of our budget of ${ns.nFormat(budget, '0.0a')}.`);\\n\\n\\t/**\\n\\t * Even though we've done all of our desired high level tasks, we still need to tend to each division individually.\\n\\t * If we don't have all the automation bits, we may need to adjust pricing. If we have room in warehouses, we can buy\\n\\t * more materials. If we have products, we may be able to start on a new product. We may have research to spend.\\n\\t */\\n\\tfor (const division of myCorporation.divisions) {\\n\\t\\t// If we have multiple divisions, hold the lion's share of the budget for production industries.\\n\\t\\tlet industry = industries.find((ind) => ind.name === division.type);\\n\\t\\tlet divisionalBudget = budget;\\n\\t\\tif (myCorporation.divisions.length > 1 && !industry.makesProducts) {\\n\\t\\t\\tdivisionalBudget *= 0.05;\\n\\t\\t}\\n\\t\\tlet spent = await doManageDivision(ns, division, divisionalBudget);\\n\\t\\tif (spent) budget -= spent;\\n\\t}\\n}\\n\\n/**\\n * Try to raise money.\\n * Advances through the funding rounds, eventually going public. Potentially spends hacknet hashes for money.\\n * @param {NS} ns\\n */\\nasync function tryRaiseCapital(ns) {\\n\\t// First, spend hacknet hashes.\\n\\t// if (options['can-spend-hashes'] && myCorporation.funds < 10e9)\\n\\t// \\tawait doSpendHashes(ns, 'Sell for Corporation Funds');\\n\\t// If we're not public, then raise private funding.\\n\\tif (!myCorporation.public) {\\n\\t\\tlet offer = c.getInvestmentOffer();\\n\\t\\t// If we've finished round 4, clear our raising capital flag.\\n\\t\\tif (offer.round > 4) raisingCapital = 0;\\n\\t\\tlet willAccept = true;\\n\\t\\tif (offer && offer.round <= 4) {\\n\\t\\t\\tlog(ns, `Considering raising private capital round ${offer.round}. Offered ${ns.nFormat(offer.funds, '0.0a')} for ${offer.shares} shares.`);\\n\\n\\t\\t\\t// Make sure all employees are happy.\\n\\t\\t\\tlet satisfied = allEmployeesSatisfied(ns);\\n\\t\\t\\tif (!satisfied) {\\n\\t\\t\\t\\tlet prefix = '    *';\\n\\t\\t\\t\\tif (!willAccept) prefix = '     ';\\n\\t\\t\\t\\tlog(ns, `${prefix}  Round ${offer.round} financing waiting on employee stats to stabilize.`);\\n\\t\\t\\t\\twillAccept = false;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Make sure we have filled a reasonable amount of our warehouses with materials.\\n\\t\\t\\tfor (const division of myCorporation.divisions) {\\n\\t\\t\\t\\tlet industry = industries.find((i) => i.name === division.type);\\n\\t\\t\\t\\tfor (const city of division.cities) {\\n\\t\\t\\t\\t\\tlet warehouse = c.getWarehouse(division.name, city);\\n\\t\\t\\t\\t\\tlet warehouseSpaceRequiredForCycle = getReservedWarehouseSpace(ns, industry, division, city);\\n\\t\\t\\t\\t\\tlet warehouseSpaceAvailable = warehouse.size - warehouseSpaceRequiredForCycle - warehouse.sizeUsed;\\n\\t\\t\\t\\t\\tif (warehouseSpaceAvailable > warehouseSpaceRequiredForCycle * 0.2) {\\n\\t\\t\\t\\t\\t\\tlet prefix = '    *';\\n\\t\\t\\t\\t\\t\\tif (!willAccept) prefix = '     ';\\n\\t\\t\\t\\t\\t\\tlog(ns, `${prefix}  Round ${offer.round} financing waiting on ${division.name} warehouses to gain materials.`);\\n\\t\\t\\t\\t\\t\\twillAccept = false;\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t// If we have a product division, make sure it has a maximum number of products before we accept the offer.\\n\\t\\t\\tfor (const division of myCorporation.divisions) {\\n\\t\\t\\t\\tconst maxProducts = getMaxProducts(ns, division.name);\\n\\t\\t\\t\\tlet industry = industries.find((i) => i.name === division.type);\\n\\t\\t\\t\\tif (industry.makesProducts && division.products.length < maxProducts) {\\n\\t\\t\\t\\t\\tlet prefix = '    *';\\n\\t\\t\\t\\t\\tif (!willAccept) prefix = '     ';\\n\\t\\t\\t\\t\\tlog(ns, `${prefix}  Round ${offer.round} financing waiting on ${division.name} division to create products (${division.products.length}/${maxProducts})`);\\n\\t\\t\\t\\t\\twillAccept = false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (offer.round >= 4 && industry.makesProducts) {\\n\\t\\t\\t\\t\\t// Wait for the last product to finish researching\\n\\t\\t\\t\\t\\tlet completeProducts = division.products.map((prodName) => c.getProduct(division.name, prodName)).filter((prod) => prod.developmentProgress >= 100);\\n\\t\\t\\t\\t\\tif (completeProducts.length < maxProducts) {\\n\\t\\t\\t\\t\\t\\tlet prefix = '    *';\\n\\t\\t\\t\\t\\t\\tif (!willAccept) prefix = '     ';\\n\\t\\t\\t\\t\\t\\tlog(ns, `${prefix}  Round ${offer.round} financing waiting on ${division.name} division to complete products (${completeProducts.length}/${maxProducts})`);\\n\\t\\t\\t\\t\\t\\twillAccept = false;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t// TODO: Funding is proportional to revenue. We can cook the books so that revenue looks higher than it should by stockpiling goods, then selling them all at once.\\n\\n\\t\\t\\t// Make sure we aren't spending money on materials when we get funding. Each time we come through the loop and would purchase, increment the counter. After 4 times, purchase.\\n\\t\\t\\tif (willAccept) raisingCapital++;\\n\\t\\t\\telse raisingCapital = 0;\\n\\n\\t\\t\\t// If we've passed all the checks, then accept the next round of funding.\\n\\t\\t\\tif (options['can-accept-funding'] && raisingCapital > 4 && !options.mock) {\\n\\t\\t\\t\\tlet success = c.acceptInvestmentOffer();\\n\\t\\t\\t\\traisingCapital = 0;\\n\\t\\t\\t\\tif (success) log(ns, `WARNING: Accepted round ${offer.round} funding. Took ${ns.nFormat(offer.funds, '0.0a')} for ${offer.shares} shares.`);\\n\\t\\t\\t\\telse log(ns, `ERROR: Tried to accept round ${offer.round} funding, but something went wrong.`);\\n\\t\\t\\t} else if (options['can-accept-funding'] && raisingCapital > 0) {\\n\\t\\t\\t\\tlog(ns, `SUCCESS: Raising capital in ${5 - raisingCapital} cycles.`);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\t// We're public, so we can't be raising capital.\\n\\t\\t\\traisingCapital = 0;\\n\\t\\t}\\n\\t\\t// Finally, if we're out of private funding, we may as well go public\\n\\t\\toffer = c.getInvestmentOffer();\\n\\t\\tif (options['can-go-public'] && !options.mock && offer.round > 4) {\\n\\t\\t\\t// Looks like we're out of private funding. Time to go public.\\n\\t\\t\\tlog(ns, `SUCCESS: Private funding complete. Time to IPO. Selling ${options['issue-shares']} shares.`);\\n\\t\\t\\tc.goPublic(options['issue-shares']);\\n\\t\\t\\t// and set our dividend to 10%\\n\\t\\t\\tc.issueDividends(0.1);\\n\\t\\t}\\n\\t} else {\\n\\t\\t// We're public, so we can't be raising capital.\\n\\t\\traisingCapital = 0;\\n\\t}\\n}\\n\\n/**\\n * Do all employees have enough happiness, energy, and morale?\\n * @param {NS} ns\\n * @param {number} lowerLimit - minimum for all stats [0,1]\\n * @returns {boolean}\\n */\\nfunction allEmployeesSatisfied(ns, lowerLimit = 0.9995) {\\n\\tlet allSatisfied = true;\\n\\tfor (const division of myCorporation.divisions) {\\n\\t\\tfor (const city of division.cities) {\\n\\t\\t\\tlet office = c.getOffice(division.name, city);\\n\\t\\t\\tlet employees = office.employees.map((e) => c.getEmployee(division.name, city, e));\\n\\t\\t\\tlet avgMorale = employees.map((e) => e.mor).reduce((sum, mor) => sum + mor, 0) / employees.length;\\n\\t\\t\\tlet avgEnergy = employees.map((e) => e.ene).reduce((sum, ene) => sum + ene, 0) / employees.length;\\n\\t\\t\\tlet avgHappiness = employees.map((e) => e.hap).reduce((sum, hap) => sum + hap, 0) / employees.length;\\n\\t\\t\\tif (avgEnergy < office.maxEne * lowerLimit || avgHappiness < office.maxHap * lowerLimit || avgMorale < office.maxMor * lowerLimit) {\\n\\t\\t\\t\\tallSatisfied = false;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn allSatisfied;\\n}\\n\\n/**\\n * Given a list of tasks, execute them in order.\\n * @param {NS} ns\\n * @param {Task[]} tasks\\n * @param {number} budget\\n * @param {boolean} keepSpending Should we keep spending money on items further down the list after hitting an item we can't afford?\\n * @returns {number} the amount spent.\\n */\\nasync function runTasks(ns, tasks, budget, keepSpending = true) {\\n\\tconst startingBudget = budget;\\n\\tfor (const task of tasks) {\\n\\t\\tlet success = false;\\n\\t\\tif (budget - task.cost > 0) {\\n\\t\\t\\tlog(ns, `  Spending ${ns.nFormat(task.cost, '0.0a')} on ${task.name}`);\\n\\t\\t\\t// Some of the ns.corporation calls we use are void functions, so treat a return value of undefined with no exception as a success.\\n\\t\\t\\tif (!options.mock)\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tsuccess = await task.run();\\n\\t\\t\\t\\t\\tif (success === undefined) success = true;\\n\\t\\t\\t\\t} catch (e) {\\n\\t\\t\\t\\t\\tlog(ns, `WARNING: Failed to execute ${task.name} - ${task.run}`);\\n\\t\\t\\t\\t\\tlog(ns, `WARNING: ${e}`);\\n\\t\\t\\t\\t}\\n\\t\\t\\tif (success) budget -= task.cost;\\n\\t\\t}\\n\\t\\tif (!success && !keepSpending) break;\\n\\t}\\n\\treturn startingBudget - budget;\\n}\\n\\n/**\\n * Create a bare bones new division, then use any remaining money to set it up.\\n * @param {NS} ns\\n * @param {*} newIndustry\\n * @param {number} newDivisionBudget\\n * @returns {boolean} true if we created the new division, false if not.\\n */\\nasync function doCreateNewDivision(ns, newIndustry, newDivisionBudget) {\\n\\tif (options['no-expansion'] || options['mock']) return false;\\n\\tmyCorporation = c.getCorporation();\\n\\tlet numDivisions = myCorporation.divisions.length;\\n\\n\\tc.expandIndustry(newIndustry.name, newIndustry.name);\\n\\n\\tmyCorporation = c.getCorporation();\\n\\tif (numDivisions === myCorporation.divisions.length) {\\n\\t\\tlog(ns, `ERROR: Failed to create new division! Expected to create '${newIndustry.name}'.`, 'error', true);\\n\\t\\tns.exit();\\n\\t}\\n\\tnewDivisionBudget -= newIndustry.startupCost;\\n\\tif (verbose) log(ns, `Spending ${ns.nFormat(newIndustry.startupCost, '0.0a')} setting up a new '${newIndustry.name}' division.`);\\n\\tlet newDivision = c.getDivision(newIndustry.name);\\n\\n\\t// Hire the first three employees in Sector-12\\n\\tfillSpaceQueue.push(`${newDivision.name}/Sector-12`);\\n\\n\\t// Do the first round of purchasing now.\\n\\tawait doManageDivision(ns, newDivision, newDivisionBudget);\\n\\tif (newDivision) return true;\\n\\telse return false;\\n}\\n\\n/**\\n * Given an existing division, try to allocate our budget to growing the business.\\n * @param {NS} ns\\n * @param {Division} division division from ns.corporation.getDivision()\\n * @param {number} budget amount we can spend\\n * @returns {number} the amount we spent while managing this division.\\n */\\nasync function doManageDivision(ns, division, budget) {\\n\\tmyCorporation = c.getCorporation();\\n\\tconst industry = industries.find((ind) => ind.name === division.type);\\n\\tbudget = Math.max(0, budget);\\n\\tconst totalBudget = budget;\\n\\n\\t/**\\n\\t * Take stock of the current state of this division. Just like at the corporate level,\\n\\t * collect some tasks that we'd like to do, then see what we can execute. Don't worry too\\n\\t * much about spending the whole budget. Anything we don't spend now will get passed on\\n\\t * to other divisions, or recycled in the next pass.\\n\\t */\\n\\tif (verbose) log(ns, `Managing ${division.name} division with a budget of ${ns.nFormat(budget, '0.0a')}.`);\\n\\tlet spent = 0;\\n\\tlet tasks = [];\\n\\n\\t// Can we expand to new cities?\\n\\tif (division.cities.length < cities.length) {\\n\\t\\t// We aren't in all cities yet, so we want to expand.\\n\\t\\tfor (const city of cities) {\\n\\t\\t\\tif (!division.cities.includes(city)) {\\n\\t\\t\\t\\tlet cost = c.getExpandCityCost();\\n\\t\\t\\t\\tif (cost < budget * 0.25) {\\n\\t\\t\\t\\t\\tif (verbose) log(ns, `Want to open new offices in ${city}.`);\\n\\t\\t\\t\\t\\ttasks.push(new Task(`Expand ${division.name} to ${city}`, () => doExpandCity(ns, division.name, city), cost, 80));\\n\\t\\t\\t\\t} else if (verbose) log(ns, `WARNING: We would like to expand to ${city}, but it would cost ${ns.nFormat(cost, '0.0a')} on our budget of ${ns.nFormat(budget, '0.0a')}.`);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// Go ahead and expand immediately, so we can buy other stuff for any new locations on this cycle.\\n\\tif (tasks.length > 0) {\\n\\t\\tspent = await runTasks(ns, tasks, budget);\\n\\t\\tbudget -= spent;\\n\\t\\ttasks = [];\\n\\t}\\n\\t// Update our status\\n\\tmyCorporation = c.getCorporation();\\n\\tdivision = c.getDivision(division.name);\\n\\tlet hasMarketTA2 = c.hasResearched(division.name, 'Market-TA.II');\\n\\n\\t// Division wide tasks\\n\\t// Can we buy advertising? This is how we go exponential in our production industry.\\n\\tlet adCount = c.getHireAdVertCount(division.name);\\n\\tlet adPrice = c.getHireAdVertCost(division.name);\\n\\tif (industry.makesProducts && adPrice < budget * 0.9) {\\n\\t\\ttasks.push(new Task(`Buy advertising campaign #${adCount + 1} for ${division.name}`, () => c.hireAdVert(division.name), adPrice, 60));\\n\\t\\tadCount++;\\n\\t}\\n\\t// Buy the first advertising campaign for non-product industries\\n\\tif (adCount === 0 && !industry.makesProducts && adPrice < budget * 0.9) {\\n\\t\\t// Buy one advertising campaign in material markets\\n\\t\\ttasks.push(new Task(`Buy advertising campaign #${adCount + 1} for ${division.name}`, () => c.hireAdVert(division.name), adPrice, 60));\\n\\t}\\n\\t// Consider buying more advertising. All industires with MarketTA2, or a second one for production industries.\\n\\tif ((industry.makesProducts || hasMarketTA2) && adPrice < budget * 0.5) {\\n\\t\\ttasks.push(new Task(`Buy advertising campaign #${adCount + 1} for ${division.name}`, () => c.hireAdVert(division.name), adPrice, 20));\\n\\t}\\n\\n\\t// Should we spend any research?\\n\\tlet researchToSpend = division.research;\\n\\tif (industry.makesProducts || hasMarketTA2) {\\n\\t\\t// Willing to spend in inverse proportion to how much stored science helps this product.\\n\\t\\tresearchToSpend = division.research * (1 - industry.factors.Science);\\n\\t}\\n\\tlet researchTypes = ['Hi-Tech R&D Laboratory', 'uPgrade: Fulcrum', 'uPgrade: Capacity.I', 'uPgrade: Capacity.II', 'Market-TA.I', 'Market-TA.II'];\\n\\tfor (const researchType of researchTypes) {\\n\\t\\tlet hasResearch = false;\\n\\t\\tlet cost = Infinity;\\n\\t\\ttry {\\n\\t\\t\\thasResearch = c.hasResearched(division.name, researchType);\\n\\t\\t\\tcost = c.getResearchCost(division.name, researchType);\\n\\t\\t} catch { }\\n\\t\\tif (!hasResearch && researchToSpend >= cost) {\\n\\t\\t\\tlog(ns, `INFO: Buying research project ${researchType} for ${cost} research points.`, 'info');\\n\\t\\t\\tc.research(division.name, researchType);\\n\\t\\t\\tresearchToSpend -= cost;\\n\\t\\t} else if (!hasResearch && cost !== Infinity) {\\n\\t\\t\\tif (verbose) log(ns, `Considered spending up to ${researchToSpend} of ${division.research} research on '${researchType}' but it would cost ${cost}.`);\\n\\t\\t\\t// If we don't have this research, and can't afford to buy it, don't buy the next item on the list\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\t// If this is a production industry, see if we should be researching a new product.\\n\\tif (industry.makesProducts) {\\n\\t\\tconst maxProducts = getMaxProducts(ns, division.name);\\n\\t\\tlet products = division.products.map((p) => c.getProduct(division.name, p));\\n\\t\\tlet progress = products.map((p) => p.developmentProgress).filter((cmp) => cmp < 100)[0];\\n\\t\\tif (progress === undefined) progress = 100;\\n\\t\\tif (verbose) log(ns, `Projects: ${products.length}/${maxProducts}. Current project: ${progress}% complete.`);\\n\\t\\tif (progress === 100) {\\n\\t\\t\\t// No product being researched. Consider creating a new one.\\n\\t\\t\\tif (products.length < maxProducts) {\\n\\t\\t\\t\\t// We're not full, so go ahead.\\n\\t\\t\\t\\tspent += createNewProduct(ns, division);\\n\\t\\t\\t\\tbudget -= spent;\\n\\t\\t\\t} // Discontinue an existing product for a new one if we're not raising capital.\\n\\t\\t\\telse {\\n\\t\\t\\t\\t// log(ns, `Considering creating a new product. rC: ${raisingCapital} eR: ${mf(extraReserve)}`);\\n\\t\\t\\t\\tif (raisingCapital === 0) {\\n\\t\\t\\t\\t\\tif (extraReserve > 0 && myCorporation.funds > extraReserve) {\\n\\t\\t\\t\\t\\t\\t// We have enough money saved up. Time to ditch the product with the lowest budget.\\n\\t\\t\\t\\t\\t\\tproducts.sort((a, b) => budgetFromProductName(a.name) - budgetFromProductName(b.name));\\n\\t\\t\\t\\t\\t\\tlet lowBudgetProduct = products[0];\\n\\t\\t\\t\\t\\t\\tc.discontinueProduct(division.name, lowBudgetProduct.name);\\n\\t\\t\\t\\t\\t\\tmyCorporation = c.getCorporation();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t// Try to create the Product. If it fails, it will set a reserve for us.\\n\\t\\t\\t\\t\\tspent += createNewProduct(ns, division);\\n\\t\\t\\t\\t\\tbudget -= spent;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t// Per city tasks.\\n\\tfor (const city of division.cities) {\\n\\t\\t// Can we expand any of our offices for more employees?\\n\\t\\tlet officeSize = c.getOffice(division.name, city).size;\\n\\t\\tlet seats = 15; // Grow by officeSize when small, then by 15\\n\\t\\tseats = Math.min(seats, officeSize);\\n\\t\\tlet cost = c.getOfficeSizeUpgradeCost(division.name, city, seats);\\n\\t\\tif (industry.makesProducts && city === hqCity && cost < budget * 0.9) {\\n\\t\\t\\ttasks.push(new Task(`Buy space for ${seats} more employees of ${division.name}/${city}`, () => upgradeOfficeSize(ns, division.name, city, seats), cost, 70));\\n\\t\\t} else if (industry.makesProducts && city !== hqCity && cost < budget * 0.1) {\\n\\t\\t\\ttasks.push(new Task(`Buy space for ${seats} more employees of ${division.name}/${city}`, () => upgradeOfficeSize(ns, division.name, city, seats), cost, 70));\\n\\t\\t} else if (!industry.makesProducts && cost < budget * 0.4) {\\n\\t\\t\\ttasks.push(new Task(`Buy space for ${seats} more employees of ${division.name}/${city}`, () => upgradeOfficeSize(ns, division.name, city, seats), cost, 70));\\n\\t\\t}\\n\\n\\t\\t// Can we expand our warehouse space?\\n\\t\\tif (!c.hasWarehouse(division.name, city)) {\\n\\t\\t\\t// We don't have a warehouse here. We should try to buy one in this city.\\n\\t\\t\\tcost = c.getPurchaseWarehouseCost();\\n\\t\\t\\tif (cost < budget * 0.5) {\\n\\t\\t\\t\\ttasks.push(new Task(`Buy warehouse ${division.name}/${city}`, () => c.purchaseWarehouse(division.name, city), cost, 80));\\n\\t\\t\\t}\\n\\t\\t\\t// Anything else we want to do with a city requires a warehouse, so just skip to the next city.\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t// We have a warehouse. Can we expand it?\\n\\t\\tlet warehouse = c.getWarehouse(division.name, city);\\n\\t\\t// TODO: How much do we care about expanding the warehouse? We should base it on how much of an impact more materials would have.\\n\\t\\tcost = c.getUpgradeWarehouseCost(division.name, city);\\n\\t\\tif (cost < budget * 0.25) {\\n\\t\\t\\ttasks.push(new Task(`Buy warehouse space for ${division.name}/${city}`, () => c.upgradeWarehouse(division.name, city), cost, 20));\\n\\t\\t}\\n\\n\\t\\t// Turn on Smart Supply if we have it\\n\\t\\tif (c.hasUnlockUpgrade('Smart Supply') && !warehouse.smartSupplyEnabled) {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tif (verbose) log(ns, `Turning on Smart Supply for ${division.name}/${city}.`);\\n\\t\\t\\t\\tc.setSmartSupply(division.name, city, true);\\n\\t\\t\\t} catch (e) {\\n\\t\\t\\t\\tlog(ns, `ERROR: ${e}`);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Can we buy more materials given the space we currently have?\\n\\t\\t// First, wait to cycle around to 'START' so we have a clean read on the warehouse levels.\\n\\t\\tawait sleepWhileNotInStartState(ns);\\n\\t\\t// Calculate the required free space for a production cycle's worth of Material and products.\\n\\t\\tlet warehouseSpaceRequiredForCycle = getReservedWarehouseSpace(ns, industry, division, city);\\n\\n\\t\\t// We don't want to drive the corp too deeply negative with material purchases too soon, or\\n\\t\\t// else nothing else will ever be bought, and employees will never get happy.\\n\\t\\tlet freeSpace = warehouse.size - warehouse.sizeUsed;\\n\\t\\tlet warehouseSpaceAvailable = freeSpace - warehouseSpaceRequiredForCycle;\\n\\t\\tlet tolerance = warehouseSpaceRequiredForCycle * 0.01;\\n\\t\\tlet enoughSpace = warehouseSpaceAvailable >= tolerance; // Tiny safety margin\\n\\t\\tconst satisfied = allEmployeesSatisfied(ns);\\n\\t\\tif ((budget > 0 || satisfied) && enoughSpace && raisingCapital === 0) {\\n\\t\\t\\t// We have a decent amount of space to fill.\\n\\t\\t\\tif (verbose) log(ns, `   ${division.name}/${city} warehouse: Wants +${warehouseSpaceAvailable} m² materials. ${warehouseSpaceRequiredForCycle} m² reserved.`);\\n\\t\\t\\tfor (const material of bonusMaterials) {\\n\\t\\t\\t\\t//if (industry.prodMats.includes(material)) continue; // Don't buy the materials we make.\\n\\t\\t\\t\\tlet amt = (industry.scaledMaterialBonus[material] * warehouseSpaceAvailable) / 4;\\n\\t\\t\\t\\t// somewhat scale the amount we buy with our budget\\n\\t\\t\\t\\tlet scaleFactor = Math.log10(budget) - 11; // Don't go full speed until our budget is $100b or more.\\n\\t\\t\\t\\tscaleFactor = Math.max(-2, scaleFactor);\\n\\t\\t\\t\\tscaleFactor = Math.min(0, scaleFactor);\\n\\t\\t\\t\\tlet scale = Math.pow(10, scaleFactor);\\n\\t\\t\\t\\t// Only scale if we're waiting on employees to get happy.\\n\\t\\t\\t\\tif (!satisfied) amt = scale * amt;\\n\\t\\t\\t\\tc.buyMaterial(division.name, city, material, amt);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\t// Make sure we're not buying anything -- we're either out of room or out of money.\\n\\t\\t\\tfor (const material of bonusMaterials) {\\n\\t\\t\\t\\tc.buyMaterial(division.name, city, material, 0);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// It's possible to get into a situation where we've grown production faster than warehouse space.\\n\\t\\tif (warehouseSpaceAvailable < -tolerance) {\\n\\t\\t\\t// Start clearing things out.\\n\\t\\t\\tif (verbose) log(ns, `   ${division.name}/${city} warehouse: Wants to reserve ${warehouseSpaceRequiredForCycle} of ${warehouse.size} m², but only ${freeSpace} m² free! Selling some materials.`);\\n\\t\\t\\tfor (const material of allMaterials) {\\n\\t\\t\\t\\tlet amt = c.getMaterial(division.name, city, material).qty;\\n\\t\\t\\t\\tlet sellAmt = amt * 0.025;\\n\\t\\t\\t\\tc.sellMaterial(division.name, city, material, sellAmt.toFixed(2), 'MP*0.80');\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\t// Make sure we reset. It should be safe to sell '0' here, because the things we want to sell will get reset in the price discovery loop.\\n\\t\\t\\tfor (const material of allMaterials) {\\n\\t\\t\\t\\tc.sellMaterial(division.name, city, material, '0', 'MP');\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// Figure out which tasks we can afford to run, and in which order.\\n\\ttasks.sort((a, b) => a.cost - b.cost).reverse();\\n\\ttasks.sort((a, b) => a.priority - b.priority).reverse();\\n\\t// Finally, run all the tasks we've collected.\\n\\tspent += await runTasks(ns, tasks, budget);\\n\\tif (spent > 0 && verbose) log(ns, `Spent ${ns.nFormat(spent, '0.0a')} of our budget of ${ns.nFormat(totalBudget, '0.0a')}.`);\\n\\n\\treturn spent;\\n}\\n\\n/**\\n * How much space do we need to leave fee in this warehouse for a full cycle of production?\\n * @param {NS} ns\\n * @param {Industry} industry\\n * @param {Division} division\\n * @param {string} city\\n * @returns {number}\\n */\\nfunction getReservedWarehouseSpace(ns, industry, division, city) {\\n\\tlet rawMaterialSize = 0;\\n\\tlet warehouseSpaceRequiredForCycle = 0;\\n\\tlet maxProd = 0;\\n\\n\\t// Products take the same space as what was used to create it.\\n\\tfor (const matName in industry.reqMats) {\\n\\t\\tlet matAmt = industry.reqMats[matName];\\n\\t\\trawMaterialSize += matAmt * materialSizes[matName];\\n\\t}\\n\\n\\t// Max production is based on a bunch of production multipliers.\\n\\tmaxProd = getMaximumProduction(ns, division, city);\\n\\n\\t// How many materials could we produce? Material sizes are predefined.\\n\\tfor (const matName of industry.prodMats) {\\n\\t\\twarehouseSpaceRequiredForCycle += materialSizes[matName] * maxProd;\\n\\t}\\n\\n\\tif (industry.makesProducts) {\\n\\t\\tconst maxProducts = getMaxProducts(ns, division.name);\\n\\t\\twarehouseSpaceRequiredForCycle += maxProducts * maxProd * rawMaterialSize;\\n\\t}\\n\\n\\t// We produce stuff 10 times per cycle\\n\\twarehouseSpaceRequiredForCycle *= 10;\\n\\n\\t// If we don't have automatic price discovery, we'll need some extra free space.\\n\\tlet hasMarketTA2 = c.hasResearched(division.name, 'Market-TA.II');\\n\\tif (!hasMarketTA2) warehouseSpaceRequiredForCycle *= 3;\\n\\telse warehouseSpaceRequiredForCycle *= 1.5;\\n\\n\\treturn warehouseSpaceRequiredForCycle;\\n}\\n\\nfunction getMaximumProduction(ns, division, city) {\\n\\tlet office = c.getOffice(division.name, city);\\n\\tlet officeMult = getOfficeProductivity(office); // Workers\\n\\tlet prodMult = division.prodMult; // Materials\\n\\tlet corpMult = 1 + 0.03 * c.getUpgradeLevel('Smart Factories'); // Corporate upgrades.\\n\\tlet resMult = 1;\\n\\tif (c.hasResearched(division.name, 'Drones - Assembly')) resMult *= 1.2;\\n\\tif (c.hasResearched(division.name, 'Self-Correcting Assemblers')) resMult *= 1.1;\\n\\treturn officeMult * prodMult * corpMult * resMult;\\n}\\n\\n/**\\n * Try to create a new product for this division, with a budget at least twice the size of the last\\n * one we bought. If we don't have enough money, or all our product slots are full,\\n * then set a reserve for the desired amount.\\n *\\n * @param {NS} ns\\n * @param {Division} division\\n * @returns amount of money spent, if any.\\n */\\nfunction createNewProduct(ns, division) {\\n\\tlet wantToSpend = 2e9; // $2b minimum.\\n\\tlet spent = 0;\\n\\tlet spentOnProducts = [];\\n\\ttry {\\n\\t\\tspentOnProducts = division.products\\n\\t\\t\\t.map((p) => budgetFromProductName(p))\\n\\t\\t\\t.sort((a, b) => a - b)\\n\\t\\t\\t.reverse();\\n\\t} catch (error) { }\\n\\tif (spentOnProducts.length > 0) {\\n\\t\\t// If our products weren't named correctly default to assuming they were 2b, 4b, 8b...\\n\\t\\twantToSpend = wantToSpend * Math.pow(2, spentOnProducts.length - 1);\\n\\t\\twantToSpend = Math.max(spentOnProducts[0] * 2, wantToSpend, myCorporation.revenue * 100);\\n\\t}\\n\\tlet productName = `${division.type}-${Math.log10(wantToSpend).toFixed(2)}`;\\n\\ttry {\\n\\t\\tc.makeProduct(division.name, hqCity, productName, wantToSpend / 2, wantToSpend / 2);\\n\\t\\tlog(ns, `Creating new product '${productName}' for ${ns.nFormat(wantToSpend, '0.0a')}.`, 'info', true);\\n\\t\\tspent += wantToSpend;\\n\\t\\textraReserve = 0;\\n\\t} catch (e) {\\n\\t\\t// If we fail to create the product, just reserve the money we want to spend.\\n\\t\\tlog(ns, `Reserving budget of ${ns.nFormat(wantToSpend, '0.0a')} for next product.`);\\n\\t\\textraReserve = wantToSpend;\\n\\t}\\n\\treturn spent;\\n}\\n\\nfunction getMaxProducts(ns, divisionName) {\\n\\tlet maxProducts = 3;\\n\\tif (c.hasResearched(divisionName, 'uPgrade: Capacity.I')) maxProducts++;\\n\\tif (c.hasResearched(divisionName, 'uPgrade: Capacity.II')) maxProducts++;\\n\\treturn maxProducts;\\n}\\n\\n/** @param {NS} ns\\n * @param waitForNext\\n */\\nasync function sleepWhileNotInStartState(ns, waitForNext = false) {\\n\\tmyCorporation = c.getCorporation();\\n\\tif (waitForNext) {\\n\\t\\twhile (myCorporation.state === 'START') {\\n\\t\\t\\tawait ns.sleep(50);\\n\\t\\t\\tmyCorporation = c.getCorporation();\\n\\t\\t}\\n\\t}\\n\\tlet lastState = 'Unknown';\\n\\twhile (myCorporation.state !== 'START') {\\n\\t\\tif (verbose && myCorporation.state !== lastState) {\\n\\t\\t\\tlog(ns, `Waiting for corporation to move into the 'START' status. Currently: '${myCorporation.state}'.`);\\n\\t\\t\\tlastState = myCorporation.state;\\n\\t\\t}\\n\\t\\tawait ns.sleep(50); // Better keep the sleep short, in case we're in catch-up mode.\\n\\t\\tmyCorporation = c.getCorporation();\\n\\t}\\n\\tmyCorporation = c.getCorporation();\\n}\\n\\n/**\\n * Buy the specified number of seats, and hire employees to fill them.\\n * @param {NS} ns\\n * @param {string} divisionName\\n * @param {string} city\\n * @param {number} seats\\n * @returns {boolean} returns true on success\\n */\\nasync function upgradeOfficeSize(ns, divisionName, city, seats) {\\n\\t// First buy the new seats.\\n\\tlet success = false;\\n\\ttry {\\n\\t\\tif (seats > 0) c.upgradeOfficeSize(divisionName, city, seats);\\n\\t\\tsuccess = true;\\n\\t} catch (e) {\\n\\t\\tlog(ns, `ERROR: Failed to upgrade office size by ${seats} seats in ${city}.`);\\n\\t\\tlog(ns, `ERROR: ${e}`);\\n\\t}\\n\\tif (!success) return false;\\n\\n\\t/**\\n\\t * Now that we have more office space, we need to hire and assign workers. Since\\n\\t * worker assignment takes a long time, add them to a queue and we'll handle it\\n\\t * later.\\n\\t */\\n\\tfillSpaceQueue.push(`${divisionName}/${city}`);\\n\\n\\treturn true;\\n}\\n\\nasync function fillOpenPositionsFromQueue(ns) {\\n\\tmyCorporation = c.getCorporation();\\n\\tfillSpaceQueue = [...new Set(fillSpaceQueue)]; // Unique\\n\\t// Try not to run past the end of a cycle..\\n\\twhile (['START'].includes(myCorporation.state) && fillSpaceQueue.length > 0) {\\n\\t\\tlet office = fillSpaceQueue.shift();\\n\\t\\tlet divisionName = office.split('/')[0];\\n\\t\\tlet cityName = office.split('/')[1];\\n\\t\\tawait fillOpenPositions(ns, divisionName, cityName);\\n\\t\\tmyCorporation = c.getCorporation();\\n\\t}\\n}\\n\\n/**\\n * Fill any open positions with employees.\\n * @param {NS} ns\\n * @param {string} divisionName\\n * @param {string} cityName\\n */\\nasync function fillOpenPositions(ns, divisionName, cityName) {\\n\\tif (options.mock) return;\\n\\tlet office = c.getOffice(divisionName, cityName);\\n\\tlet employees = office.employees.map((e) => c.getEmployee(divisionName, cityName, e));\\n\\tlet numUnassigned = employees.filter((e) => e.pos === 'Unassigned').length;\\n\\tlet openJobs = office.size - office.employees.length;\\n\\tfor (let i = 0; i < openJobs; i++) {\\n\\t\\tc.hireEmployee(divisionName, cityName);\\n\\t}\\n\\topenJobs += numUnassigned;\\n\\toffice = c.getOffice(divisionName, cityName);\\n\\tif (openJobs > 0) {\\n\\t\\tif (verbose) log(ns, `Assigning ${openJobs} new employees to work in ${divisionName}/${cityName}`);\\n\\t\\tlet employeesPerJob = Math.floor(office.employees.length / jobs.length);\\n\\t\\tlet employeesLeft = office.employees.length % jobs.length;\\n\\t\\tfor (let i = 0; i < jobs.length; i++) {\\n\\t\\t\\tconst job = jobs[i];\\n\\t\\t\\tlet num = employeesPerJob;\\n\\t\\t\\tif (i < employeesLeft) num++;\\n\\t\\t\\t// if (verbose) log(ns, `Assigning ${num} employees to work as ${job} in ${cityName}`);\\n\\t\\t\\tif (num) await c.setAutoJobAssignment(divisionName, cityName, job, num);\\n\\t\\t}\\n\\t}\\n}\\n\\n/**\\n * Attempt to find a reasonably stable price for each product. This will take several production cycles to stabilize.\\n * @param {NS} ns\\n */\\nasync function doPriceDiscovery(ns) {\\n\\tif (verbose) log(ns, `Doing price discovery for products.`);\\n\\tmyCorporation = c.getCorporation();\\n\\tfor (const division of myCorporation.divisions) {\\n\\t\\tconst industry = industries.find((i) => i.name === division.type);\\n\\t\\t// If we have Market-TA.II researched, just let that work.\\n\\t\\tlet hasMarketTA2 = c.hasResearched(division.name, 'Market-TA.II');\\n\\t\\tif (hasMarketTA2) {\\n\\t\\t\\tfor (const city of division.cities) {\\n\\t\\t\\t\\t// Default prices\\n\\t\\t\\t\\tindustry.prodMats.forEach((material) => c.sellMaterial(division.name, city, material, 'MAX', 'MP'));\\n\\t\\t\\t\\tdivision.products.forEach((product) => c.sellProduct(division.name, city, product, 'MAX', 'MP'));\\n\\t\\t\\t\\t// Turn on automation.\\n\\t\\t\\t\\tindustry.prodMats.forEach((material) => c.setMaterialMarketTA2(division.name, city, material, true));\\n\\t\\t\\t\\tdivision.products.forEach((product) => c.setProductMarketTA2(division.name, product, true));\\n\\t\\t\\t}\\n\\t\\t\\t// No need to do any other price discovery on this division.\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t// Materials are easy. Just sell them for Market price.\\n\\t\\tfor (const materialName of industry.prodMats) {\\n\\t\\t\\tfor (const city of division.cities) {\\n\\t\\t\\t\\tc.sellMaterial(division.name, city, materialName, 'PROD', 'MP');\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Go through each product, and see if the price needs to be adjusted. We can only\\n\\t\\t// adjust the price on a per-product basis (despite the UI letting you do it\\n\\t\\t// manually, the API is busted.)\\n\\t\\tlet prevProductMultiplier = 1.0;\\n\\t\\tfor (const productName of division.products) {\\n\\t\\t\\tconst product = c.getProduct(division.name, productName);\\n\\t\\t\\tif (product.developmentProgress < 100) continue;\\n\\t\\t\\tlet sPrice = product.sCost;\\n\\t\\t\\t// sPrice ought to be of the form 'MP * 123.45'. If not, we should use the price of the last product we calculated.\\n\\t\\t\\tlet lastPriceMultiplier = prevProductMultiplier;\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tlet sMult = sPrice.split('*')[1];\\n\\t\\t\\t\\tlastPriceMultiplier = Number.parseFloat(sMult);\\n\\t\\t\\t} catch { }\\n\\t\\t\\tlet votes = [];\\n\\t\\t\\tfor (const city of division.cities) {\\n\\t\\t\\t\\t// Each city is going to \\\"vote\\\" for how they want the price to be manipulated.\\n\\t\\t\\t\\tlet qty = product.cityData[city][0];\\n\\t\\t\\t\\tlet produced = product.cityData[city][1];\\n\\t\\t\\t\\tlet sold = product.cityData[city][2];\\n\\t\\t\\t\\t// if (verbose) log(ns, `${division.name}/${city}:${product.name} (qty, prod, sold): ` + product.cityData[city].map((n) => nf(n)));\\n\\n\\t\\t\\t\\tif (produced === sold && qty === 0) {\\n\\t\\t\\t\\t\\t// We sold every item we produced. Vote to double the price.\\n\\t\\t\\t\\t\\tvotes.push(lastPriceMultiplier * 2);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// If we've accumulated a big stockpile, reduce our prices.\\n\\t\\t\\t\\telse if (qty > produced * 100) {\\n\\t\\t\\t\\t\\tvotes.push(lastPriceMultiplier * 0.9);\\n\\t\\t\\t\\t} else if (qty > produced * 40) {\\n\\t\\t\\t\\t\\tvotes.push(lastPriceMultiplier * 0.95);\\n\\t\\t\\t\\t} else if (qty > produced * 20) {\\n\\t\\t\\t\\t\\tvotes.push(lastPriceMultiplier * 0.98);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// Our stock levels must be good. If we sold less than production, then our price is probably high\\n\\t\\t\\t\\telse if (sold < produced) {\\n\\t\\t\\t\\t\\tlet newMultiplier = lastPriceMultiplier;\\n\\t\\t\\t\\t\\tif (sold <= produced * 0.5) {\\n\\t\\t\\t\\t\\t\\tnewMultiplier *= 0.75; // Our price is very high.\\n\\t\\t\\t\\t\\t} else if (sold <= produced * 0.9) {\\n\\t\\t\\t\\t\\t\\tnewMultiplier *= 0.95; // Our price is a bit high.\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tnewMultiplier *= 0.99; // Our price is just barely high\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tvotes.push(newMultiplier);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// If we sold more than production, then our price is probably low.\\n\\t\\t\\t\\telse if (produced < sold) {\\n\\t\\t\\t\\t\\tlet newMultiplier = lastPriceMultiplier;\\n\\t\\t\\t\\t\\tif (sold >= produced * 2) {\\n\\t\\t\\t\\t\\t\\tnewMultiplier *= 2; // We sold way too much. Double the price.\\n\\t\\t\\t\\t\\t} else if (sold >= produced * 1.33) {\\n\\t\\t\\t\\t\\t\\tnewMultiplier *= 1.05; // We sold a bit too much. Bring the price up a bit.\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tnewMultiplier *= 1.01;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tvotes.push(newMultiplier);\\n\\t\\t\\t\\t}\\n\\t\\t\\t} // end for-cities\\n\\t\\t\\t// All of the cities have voted. Use the lowest price that the cities have asked for.\\n\\t\\t\\tvotes.sort((a, b) => a - b);\\n\\t\\t\\tlet newMultiplier = votes[0];\\n\\t\\t\\tlet newPrice = `MP*${newMultiplier.toFixed(3)}`;\\n\\t\\t\\t// if (verbose) log(ns, `${prefix}Votes: ${votes.map((n) => nf(n)).join(', ')}.`);\\n\\t\\t\\tlet sChange = percentChange(lastPriceMultiplier, newMultiplier);\\n\\t\\t\\tif (verbose) log(ns, `    Adjusting '${product.name}' price from ${sPrice} to ${newPrice} (${sChange}).`);\\n\\t\\t\\tc.sellProduct(division.name, hqCity, product.name, 'MAX', newPrice, true);\\n\\t\\t\\tprevProductMultiplier = newMultiplier;\\n\\t\\t} // end for-products\\n\\t} // end for-divisions\\n}\\n\\n/**\\n * Expand to a new city and fill the newly-opened office positions.\\n * @param {NS} ns\\n * @param {string} divisionName\\n * @param {string} cityName\\n */\\nfunction doExpandCity(ns, divisionName, cityName) {\\n\\tc.expandCity(divisionName, cityName);\\n\\tfillSpaceQueue.push(`${divisionName}/${cityName}`);\\n}\\n\\n/**\\n * Spend hashes on something, as long as we have hacknet servers unlocked and a bit of money in the bank.\\n * @param {NS} ns\\n * @param {string} spendOn 'Sell for Corporation Funds' | 'Exchange for Corporation Research'\\n */\\n// async function doSpendHashes(ns, spendOn) {\\n// \\t// Make sure we have a decent amount of money ($100m) before spending hashes this way.\\n// \\tif (ns.getPlayer().money > 100e6 && 9 in dictSourceFiles) {\\n// \\t\\tlet spentHashes = 0;\\n// \\t\\tlet shortName = spendOn;\\n// \\t\\tif (spendOn === 'Sell for Corporation Funds') shortName = '$1B of corporate funding';\\n// \\t\\telse if (spendOn === 'Exchange for Corporation Research') shortName = '1000 research for each corporate division';\\n// \\t\\tdo {\\n// \\t\\t\\tlet numHashes = ns.hacknet.numHashes();\\n// \\t\\t\\tns.hacknet.spendHashes(spendOn);\\n// \\t\\t\\tspentHashes = numHashes - ns.hacknet.numHashes();\\n// \\t\\t\\tif (spentHashes > 0) log(ns, `  Spent ${nf(Math.round(spentHashes / 100) * 100)} hashes on ${shortName}`, 'success');\\n// \\t\\t} while (spentHashes > 0);\\n// \\t}\\n// }\\n\\n/**\\n * Log a message. Optionally, pop up a toast. Optionally, print to the terminal.\\n * @param {NS} ns\\n * @param {string} log message to log\\n * @param {string} toastStyle\\n * @param {boolean} printToTerminal\\n */\\nfunction log(ns, log, toastStyle = '', printToTerminal = false) {\\n\\tns.print(log);\\n\\tif (toastStyle) ns.toast(log, toastStyle);\\n\\tif (printToTerminal) ns.tprint(log);\\n}\\n\\n/**\\n * Assuming a product is named Industry-XX.XX, where XX.XX is the log10() of the budget.\\n * @param {string} projectName\\n * @returns {number} - the budget\\n */\\nfunction budgetFromProductName(projectName) {\\n\\tlet sExp = projectName.split('-')[1];\\n\\tlet exp = Number.parseFloat(sExp);\\n\\treturn Math.pow(10, exp);\\n}\\n\\nfunction getOfficeProductivity(office, forProduct = false) {\\n\\tconst opProd = office.employeeProd.Operations;\\n\\tconst engrProd = office.employeeProd.Engineer;\\n\\tconst mgmtProd = office.employeeProd.Management;\\n\\tconst total = opProd + engrProd + mgmtProd;\\n\\tif (total <= 0) return 0;\\n\\n\\tconst mgmtFactor = 1 + mgmtProd / (1.2 * total);\\n\\tconst prod = (Math.pow(opProd, 0.4) + Math.pow(engrProd, 0.3)) * mgmtFactor;\\n\\tconst balancingMult = 0.05;\\n\\n\\tif (forProduct) return 0.5 * balancingMult * prod;\\n\\telse return balancingMult * prod;\\n}\\n\\n/**\\n * Return the percentage change from from oldVal to NewVal.\\n * @param {number} oldVal\\n * @param {number} newVal\\n * @returns {string} formatted as \\\"+99.9%\\\"\\n */\\nfunction percentChange(oldVal, newVal) {\\n\\tlet percentChange = (newVal / oldVal) * 100 - 100;\\n\\tlet sChange = percentChange + '%';\\n\\tif (percentChange >= 0) sChange = '+' + sChange;\\n\\treturn sChange;\\n}\",\"filename\":\"megacorp.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/946453e7-f57d-46b1-b256-374764082c38\",\"moduleSequenceNumber\":1842562},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/85b3fad9-9c28-4683-875c-56725da2e4cd\",\"moduleSequenceNumber\":1842545},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/4807d9dd-b5ed-45e3-8e15-99e53cc4ae08\",\"moduleSequenceNumber\":1842546},{\"filename\":\"megacorp.js\",\"url\":\"blob:https://danielyxie.github.io/d19b7d59-53f8-4a60-bfef-84dae3901b23\",\"moduleSequenceNumber\":1842697}],\"dependents\":[],\"ramUsage\":1025,\"server\":\"home\",\"moduleSequenceNumber\":1842697,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"ns\",\"name\":\"corporation\",\"cost\":1022.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { boxTailSingleton } from 'utils.js';\\nlet ns;\\n\\n/** @param {NS} pns **/\\nexport async function main(pns) {\\n    ns = pns\\n    ns.disableLog('sleep');\\n    ns.disableLog('getServerMaxRam');\\n    ns.disableLog('fileExists');\\n    ns.disableLog('getServerMoneyAvailable');\\n    ns.clearLog();\\n    // boxTailSingleton(ns, 'player', '⛹', '200px');\\n    let lastSolverRun = Date.now();\\n    while (true) {\\n        await ns.sleep(100);\\n\\n        if (ns.getServerMaxRam('home') >= 128 && (Date.now() - lastSolverRun > 5 * 60 * 1000)) {\\n            if (ns.exec('autosolver.js', 'home') > 0)\\n                lastSolverRun = Date.now();\\n        }\\n\\n        if (ns.heart.break() < -54000 && !ns.fileExists('/tmp/ingang.txt')) {\\n            ns.exec('startGang.js', 'home');\\n        }\\n        if (!ns.fileExists('/tmp/incorp.txt') && ns.getServerMoneyAvailable('home') > 150_000_000_000) {\\n            ns.exec('megacorp.js', 'home');\\n        }\\n    }\\n}\",\"filename\":\"player.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"player.js\",\"url\":\"blob:https://danielyxie.github.io/66f96a52-c292-4c35-b46a-09581d61caa5\",\"moduleSequenceNumber\":1842695}],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"home\",\"moduleSequenceNumber\":1842695,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { list_servers } from 'opened_servers.js';\\nimport { recursiveScan } from 'find_server.js';\\nimport { boxTailSingleton, copyHackingFiles } from 'utils.js';\\n\\nfunction maxHackLevel(hackingMultiples) {\\n    if (hackingMultiples < 2)\\n        return 150;\\n    else if (hackingMultiples < 3)\\n        return 250\\n    else if (hackingMultiples < 4)\\n        return 350\\n    else if (hackingMultiples < 5)\\n        return 450\\n    else if (hackingMultiples < 6)\\n        return 600;\\n    else if (hackingMultiples < 8)\\n        return 800;\\n    return 25000;\\n}\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog('scan');\\n    ns.disableLog('getHackingLevel');\\n    ns.disableLog('installBackdoor');\\n    ns.disableLog('hasRootAccess');\\n    ns.disableLog('getServerNumPortsRequired');\\n    ns.disableLog('fileExists');\\n    ns.disableLog('sleep');\\n    ns.clearLog();\\n    // ns.tail();\\n    const player = JSON.parse(ns.read('/tmp/player.txt'));\\n    const bitNode = JSON.parse(ns.read(`/tmp/getBitNodeMultipliers.txt`));\\n    const mult = bitNode.HackingLevelMultiplier * player.hacking_mult + bitNode.HackExpGain * player.hacking_exp_mult;\\n    const maxHack = maxHackLevel(mult);\\n    boxTailSingleton(ns, 'ensureroot', '🗝', '200px');\\n    ns.print(`mul ${mult}, max hack ${maxHack}`);\\n    let hosts = list_servers(ns).filter(o => o.indexOf('pserv') === -1 && o !== 'darkweb');\\n    let oldhostLength = hosts.length;\\n    do {\\n        let servers = [];\\n        for (const host of hosts) {\\n            const fp = `/tmp/${host.replaceAll(/[\\\\.\\\\s]/g, '_')}.txt`;\\n            const data = ns.read(fp);\\n            let server;\\n            try {\\n                server = JSON.parse(data);\\n            } catch (e) {\\n                ns.print(`${fp} BAD JSON ${e.message} ${data}`);\\n                continue;\\n            }\\n            server.hasAdminRights = server.hasAdminRights || ensureRootAccess(ns, server);\\n            await copyHackingFiles(ns, server);\\n            if (server.hasAdminRights) {\\n                server.backdoorInstalled = server.backdoorInstalled || (await ensureBackdoor(ns, server));\\n            }\\n            //ns.print(`${server.hostname} ${server.hasAdminRights} && ${server.backdoorInstalled}`);\\n            await ns.write(fp, JSON.stringify(server, null, 2), \\\"w\\\");\\n            servers.push(server);\\n        }\\n        hosts = servers\\n            .filter((s) => !(s.hasAdminRights && s.backdoorInstalled) && s.requiredHackingSkill <= maxHack)\\n            .map(o => o.hostname);\\n\\n        if (oldhostLength !== hosts.length)\\n            ns.print('Hosts to backdoor ' + JSON.stringify(hosts));\\n        oldhostLength = hosts.length;\\n        await ns.sleep(5000);\\n    } while (hosts.length > 0);\\n}\\n\\nasync function ensureBackdoor(ns, server) {\\n    if (server.requiredHackingSkill <= ns.getHackingLevel()) {\\n        if (!server.backdoorInstalled) {\\n            ns.connect('home');\\n            let route = [];\\n            recursiveScan(ns, '', 'home', server.hostname, route);\\n            for (const r of route) {\\n                if (!ns.connect(r)) {\\n                    ns.print(`Failed to connect to ${r}`);\\n                    return false;\\n                }\\n            }\\n            ns.print(\\\"backdooring \\\" + server.hostname);\\n            await ns.installBackdoor();\\n            ns.print(\\\"backdoor installed \\\" + server.hostname);\\n            ns.connect('home');\\n        }\\n        return true;\\n    }\\n    return false;\\n}\\n\\nfunction ensureRootAccess(ns, server) {\\n    if (server.hostname === \\\"home\\\" || server.purchasedByPlayer || server.hasAdminRights) return true;\\n    let portsReq = server.numOpenPortsRequired;\\n    let maxPorts = countPorts(ns);\\n    if (portsReq <= maxPorts) {\\n        if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            ns.brutessh(server.hostname);\\n        }\\n        if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            ns.httpworm(server.hostname);\\n        }\\n        if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ns.ftpcrack(server.hostname);\\n        }\\n        if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            ns.relaysmtp(server.hostname);\\n        }\\n        if (ns.fileExists(\\\"sqlInject.exe\\\", \\\"home\\\")) {\\n            ns.sqlinject(server.hostname);\\n        }\\n        ns.nuke(server.hostname);\\n        ns.print(\\\"nuked \\\" + server.hostname);\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction countPorts(ns) {\\n    let ports = 0\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ports++;\\n    }\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n        ports++;\\n    }\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n        ports++;\\n    }\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n        ports++;\\n    }\\n    if (ns.fileExists(\\\"sqlInject.exe\\\", \\\"home\\\")) {\\n        ports++;\\n    }\\n    return ports\\n}\\n\\nexport function autocomplete(data, args) {\\n    return data.servers;\\n}\",\"filename\":\"ensureRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/c89c2a6d-c53d-4d71-a925-bcfa927d0ca3\",\"moduleSequenceNumber\":1842562},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/0df13f05-0257-45cb-a6ba-9d9c3543f86e\",\"moduleSequenceNumber\":1842545},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/511076b4-e99f-4aca-97c3-c4df979974cd\",\"moduleSequenceNumber\":1842546},{\"filename\":\"find_server.js\",\"url\":\"blob:https://danielyxie.github.io/df39925f-388d-491b-8ce6-5a27c3dba6e6\",\"moduleSequenceNumber\":1842547},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/669424ac-fe6d-4dac-8d69-5106e0e85a79\",\"moduleSequenceNumber\":1842545},{\"filename\":\"ensureRoot.js\",\"url\":\"blob:https://danielyxie.github.io/4f135ae5-cf91-4b58-a434-3cfd0fd7c0e9\",\"moduleSequenceNumber\":1842693}],\"dependents\":[],\"ramUsage\":6.85,\"server\":\"home\",\"moduleSequenceNumber\":1842693,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let doc = eval(\\\"document\\\");\\n/** @param {NS} ns **/\\nasync function getFlipResult(ns) {\\n\\tawait ns.sleep(1);\\n\\tlet resultAnswer = find(\\\"//*[@id=\\\\\\\"root\\\\\\\"]/div/div[2]/div[2]/div[1]/p\\\")\\n\\tif (resultAnswer != null) {\\n\\t\\tlet answer = resultAnswer.textContent;\\n\\t\\treturn answer;\\n\\t}\\n\\n\\treturn 'x';\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.tail();\\n\\tns.travelToCity(\\\"Aevum\\\");\\n\\tns.goToLocation(\\\"Iker Molina Casino\\\");\\n\\n\\tawait playRoulette(ns);\\n}\\n\\nasync function playCoinFlip(ns) {\\n\\tconst btnCoinFlip = find(\\\"//button[contains(text(), 'coin')]\\\");\\n\\tif (!btnCoinFlip) return ns.tprint(\\\"ERROR: Attempt to automatically navigate to the Casino appears to have failed.\\\");\\n\\tawait click(btnCoinFlip);\\n\\n\\tawait ns.sleep(100);\\n\\n\\tconst minPlay = 0;\\n\\tconst maxPlay = 10e3;\\n\\tconst inputWager = find(\\\"//input\\\");\\n\\tinputWager.value = minPlay;\\n\\n\\tconst results = [];\\n\\tfor (let i = 0; i < 1024; i++) {\\n\\t\\t// Click on the \\\"head\\\" button\\n\\t\\tlet btnHead = find(\\\"//button[text() = 'Head!']\\\");\\n\\t\\tawait click(btnHead);\\n\\t\\tlet result = await getFlipResult(ns);\\n\\t\\tns.print(`${i} ${result}`);\\n\\t\\tresults.push(result);\\n\\t}\\n\\tif (results.length === 1024) {\\n\\t\\tawait playToWinCoinFlip(ns, results, maxPlay);\\n\\t}\\n}\\nasync function playToWinCoinFlip(ns, results, maxPlay) {\\n\\tlet btnHead = find(\\\"//button[text() = 'Head!']\\\");\\n\\tlet btnTail = find(\\\"//button[text() = 'Tail!']\\\");\\n\\tconst inputWager = find(\\\"//input\\\");\\n\\tlet i = 0;\\n\\tlet wins = 0;\\n\\twhile (btnHead && btnTail) {\\n\\t\\tinputWager.value = Math.min(maxPlay, ns.getServerMoneyAvailable('home'));\\n\\t\\tif (results[i] === 'H') {\\n\\t\\t\\tawait click(btnHead);\\n\\t\\t} else {\\n\\t\\t\\tawait click(btnTail);\\n\\t\\t}\\n\\t\\tconst r = await getFlipResult(ns);\\n\\t\\tif (r === results[i]) {\\n\\t\\t\\twins++;\\n\\t\\t} else {\\n\\t\\t\\tns.print(`${r}$ !== ${results[i]} @ ${i}`)\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tns.print(wins);\\n\\t\\ti = (i + 1) % results.length;\\n\\t}\\n}\\nfunction arraysPercentEqual(a, b) {\\n\\tif (a === b) return 1;\\n\\tif (a == null || b == null) return 0;\\n\\tif (a.length !== b.length) return 0;\\n\\n\\t// If you don't care about the order of the elements inside\\n\\t// the array, you should sort both arrays here.\\n\\t// Please note that calling sort on an array will modify that array.\\n\\t// you might want to clone your array first.\\n\\tlet equalness = 0;\\n\\tfor (let i = 0; i < a.length; ++i) {\\n\\t\\tif (a[i] === b[i]) equalness++;\\n\\t}\\n\\treturn equalness / a.length;\\n}\\n\\nasync function playRoulette(ns) {\\n\\n\\tconst btnRoulette = find(\\\"//button[contains(text(), 'roulette')]\\\");\\n\\tif (!btnRoulette) return ns.tprint(\\\"ERROR: Attempt to automatically navigate to the Casino appears to have failed.\\\");\\n\\tconst startSeed = new Date().getTime();\\n\\tawait click(btnRoulette);\\n\\tconst after = new Date().getTime();\\n\\tconst seedRange = after - startSeed;\\n\\tns.print(`whrngSeedRange ${seedRange}`);\\n\\tawait ns.sleep(1);\\n\\tconst minPlay = 0;\\n\\tconst maxPlay = 1e7;\\n\\tconst inputWager = find(\\\"//input\\\");\\n\\t// inputWager.value = minPlay;\\n\\tawait setText2(inputWager, `${minPlay}`);\\n\\tconst sampleSize = 10;\\n\\tconst button1 = find(\\\"//button[text() = '1']\\\");\\n\\tconst results = [];\\n\\tfor (let i = 0; i < sampleSize; i++) {\\n\\t\\tawait click(button1);\\n\\t\\tconst r = await getSpinResult(ns);\\n\\n\\t\\tif (r === -1) {\\n\\t\\t\\tns.print('Results not found quiting leave casino try again');\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tresults.push(r);\\n\\t}\\n\\tns.print(`Results ${results.map(o => ns.nFormat(o, '00')).join(',')}`);\\n\\tlet goodSeeds = [];\\n\\tfor (let j = 0; j < seedRange; j++) {\\n\\t\\tconst seedTest = []\\n\\t\\tlet whrng = new WHRNG(startSeed + j);\\n\\t\\tfor (let i = 0; i < sampleSize; i++) {\\n\\t\\t\\tseedTest.push(whrng.randomRouletteNumber());\\n\\t\\t}\\n\\t\\tconst percentEqual = arraysPercentEqual(results, seedTest);\\n\\t\\tif (percentEqual >= .9) {\\n\\t\\t\\tgoodSeeds.push(whrng);\\n\\t\\t\\tns.print(`Seed is ${startSeed + j} with equality of ${percentEqual.toPrecision(2)} took ${j} attempts`);\\n\\t\\t}\\n\\t\\tns.print(`Seed ${ns.nFormat(j, '00')} ${seedTest.map(o => ns.nFormat(o, '00')).join(',')} ${percentEqual.toPrecision(2)} ${whrng.v}`);\\n\\t}\\n\\tif (goodSeeds.length === 1) {\\n\\t\\tawait playToWinRoulette(ns, goodSeeds[0], inputWager, maxPlay);\\n\\t} else if (goodSeeds.length > 1) {\\n\\t\\tns.print('Too many match, increase sample size');\\n\\t} else {\\n\\t\\tns.print('No seeds match, increase sample size');\\n\\t}\\n\\n}\\n\\nasync function playToWinRoulette(ns, whrng, inputWager, maxPlay) {\\n\\t// maxPlay = 0; //testing value\\n\\tlet losses = 0;\\n\\tlet plays = 0;\\n\\twhile (true) {\\n\\t\\t// inputWager.value = Math.floor(Math.min(maxPlay, ns.getPlayer().money));\\n\\t\\tawait setText2(inputWager, `${Math.floor(Math.min(maxPlay, ns.getServerMoneyAvailable('home')))}`);\\n\\t\\tconst luckynumber = whrng.randomRouletteNumber();\\n\\t\\tconst button = find(`//button[text() = '${luckynumber}']`);\\n\\t\\t// ns.print(`Clicking ${button.innerHTML}`);\\n\\t\\tawait click(button);\\n\\t\\tplays++;\\n\\t\\tconst result = await getSpinResult(ns);\\n\\t\\tns.print(`number lucky ${luckynumber} actual ${result}`);\\n\\t\\tif (luckynumber !== result) {\\n\\t\\t\\tlosses++;\\n\\t\\t}\\n\\t\\tif (losses / plays > .91) {\\n\\t\\t\\tns.print('Somethings broken loses are greater than expected');\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t}\\n}\\n\\nasync function getSpinResult(ns) {\\n\\twhile (true) {\\n\\t\\tlet result1 = find(\\\"//h4[contains(text(), 'lost')]\\\") || find(\\\"//h4[contains(text(), 'Lost')]\\\");\\n\\t\\tlet result2 = find(\\\"//h4[contains(text(), 'won')]\\\") || find(\\\"//h4[contains(text(), 'Won')]\\\");\\n\\t\\tif (result1 == null && result2 == null) {\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tawait ns.sleep(20);\\n\\tlet resultAnswer = find(\\\"(//h4)[2]\\\");\\n\\tif (resultAnswer != null) {\\n\\t\\tlet answer = resultAnswer.textContent;\\n\\t\\treturn parseInt(answer.replaceAll(/B|R/g, ''));\\n\\t}\\n\\n\\treturn -1;\\n}\\n\\nconst WHRNG = function (totalPlaytime) {\\n\\t// This one is seeded by the players total play time.\\n\\tconst v = (totalPlaytime / 1000) % 30000;\\n\\tthis.s1 = v;\\n\\tthis.s2 = v;\\n\\tthis.s3 = v;\\n\\tthis.v = v;\\n\\tthis.step = function () {\\n\\t\\tthis.s1 = (171 * this.s1) % 30269;\\n\\t\\tthis.s2 = (172 * this.s2) % 30307;\\n\\t\\tthis.s3 = (170 * this.s3) % 30323;\\n\\t}\\n\\tthis.random = function () {\\n\\t\\tthis.step();\\n\\t\\treturn (this.s1 / 30269.0 + this.s2 / 30307.0 + this.s3 / 30323.0) % 1.0;\\n\\t}\\n\\tthis.randomRouletteNumber = () => {\\n\\t\\treturn Math.floor(this.random() * 37);\\n\\t}\\n}\\n\\n// Some DOM helpers (partial credit to ShamesBond)\\nasync function click(elem) { await elem[Object.keys(elem)[1]].onClick({ isTrusted: true }); }\\nasync function setText2(input, text) { await input[Object.keys(input)[1]].onChange({ isTrusted: true, currentTarget: { value: text } }); }\\nfunction find(xpath) { return doc.evaluate(xpath, doc, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue; }\",\"filename\":\"casinoBreaker.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"casinoBreaker.js\",\"url\":\"blob:https://danielyxie.github.io/d1d07f41-b212-4d81-a664-327a9139262f\",\"moduleSequenceNumber\":1842617}],\"dependents\":[],\"ramUsage\":8.7,\"server\":\"home\",\"moduleSequenceNumber\":1842617,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.goToLocation\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nNew node init script must stay below 32GB\\n- make > $200k\\n- Hack Casino for $10b\\n- Upgrade home ram to 1TB\\n- Run init.js\\n */\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getServerMaxRam');\\n\\tns.disableLog('getUpgradeHomeRamCost');\\n\\tns.disableLog('getPlayer');\\n\\tns.clearLog();\\n\\tns.tail();\\n\\tlet casinoBreakerPid = 0;\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(100);\\n\\t\\tconst player = ns.getPlayer();\\n\\n\\t\\t//need a min of 1030 for corporation apis\\n\\t\\tif (ns.getServerMaxRam('home') <= 1024 && player.money > ns.getUpgradeHomeRamCost()) {\\n\\t\\t\\tns.upgradeHomeRam();\\n\\t\\t}\\n\\n\\t\\tif (casinoBreakerPid === -1 && ns.getServerMaxRam('home') > 1024) {\\n\\t\\t\\t//All done time to init\\n\\t\\t\\tns.exec('init.js', 'home');\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tif (casinoBreakerPid !== 0) {\\n\\t\\t\\tcasinoBreakerPid = ns.isRunning(casinoBreakerPid) ? casinoBreakerPid : -1;\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (player.money > 200000 && casinoBreakerPid === 0) {\\n\\t\\t\\tcasinoBreakerPid = ns.exec('casinoBreaker.js', 'home');\\n\\t\\t\\tif (casinoBreakerPid === 0)\\n\\t\\t\\t\\tcasinoBreakerPid = ns.getRunningScript('casinoBreaker.js', 'home').pid;\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (player.isWorking && casinoBreakerPid === 0) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.commitCrime('shoplift');\\n\\t}\\n}\",\"filename\":\"bootstrap32GB.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"bootstrap32GB.js\",\"url\":\"blob:https://danielyxie.github.io/a9a28448-5748-4300-b054-3083a636e17b\",\"moduleSequenceNumber\":1842579}],\"dependents\":[],\"ramUsage\":13.35,\"server\":\"home\",\"moduleSequenceNumber\":1842579,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"singularity.commitCrime\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { list_servers } from 'opened_servers.js';\\nimport { boxTailSingleton, ramUsage } from 'utils.js';\\nimport { calculateGrowThreads } from './growthFunctions.js';\\n\\nlet ns;\\nconst weaken_script = \\\"weaken.js\\\";\\nconst grow_script = \\\"grow.js\\\";\\nconst hack_script = \\\"hack.js\\\";\\nlet hack_scriptRam = 1.7;\\nlet grow_scriptRam, weaken_scriptRam = 1.75;\\nlet ServerGrowthRate = 1;\\nlet serversForExecution = [];\\nlet hackStatus = [];\\n/** @param {NS} pns **/\\nexport async function main(pns) {\\n\\tns = pns;\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('exec')\\n\\tns.clearLog();\\n\\tns.tail();\\n\\tboxTailSingleton(ns, 'mcp', '🥾', '200px');\\n\\tweaken_scriptRam = ns.getScriptRam(weaken_script, \\\"home\\\");\\n\\tgrow_scriptRam = ns.getScriptRam(grow_script, \\\"home\\\");\\n\\thack_scriptRam = ns.getScriptRam(hack_script, \\\"home\\\");\\n\\t; ({ ServerGrowthRate } = JSON.parse(ns.read('/tmp/getBitNodeMultipliers.txt')))\\n\\tawait run();\\n}\\nlet hackPercent = .5;\\nlet bonusServers = 0;\\nasync function updateServerLists() {\\n\\tserversForExecution = ['home'].concat(list_servers(ns).filter(s => ns.hasRootAccess(s)));\\n\\tconst beforeHackStatusLength = hackStatus.length;\\n\\tconst serversToHack = list_servers(ns).filter(s => ns.hasRootAccess(s)\\n\\t\\t&& ns.getServerMaxMoney(s) > 0\\n\\t\\t&& ns.getServerRequiredHackingLevel(s) <= ns.getHackingLevel() / 2);\\n\\n\\thackStatus = [];\\n\\tconst skippedServer = []\\n\\tconst player = ns.getPlayer();\\n\\tfor (const server of serversToHack) {\\n\\t\\tconst s = ns.getServer(server);\\n\\t\\ts.hackDifficulty = s.minDifficulty;\\n\\t\\t// check that hacks will succeed. Could be redundant check\\n\\t\\tconst hackChance = ns.formulas.hacking.hackChance(s, player);\\n\\t\\tif (hackChance < .99) {\\n\\t\\t\\t//ns.print(`Hack chance to low ${s} ${(hackChance * 100).toFixed(2)}%`)\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (s.serverGrowth < 40) {\\n\\t\\t\\t//ns.print(`Growth is to low ${s} ${s.serverGrowth}%`)\\n\\t\\t\\tskippedServer.push({ server: server });\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\thackStatus.push({ server: server });\\n\\t}\\n\\tconst lowRamUse = ramUsage(ns) < .5;\\n\\tconst oldHackPercent = hackPercent;\\n\\tconst oldBonusServers = bonusServers;\\n\\tif (lowRamUse) {\\n\\t\\thackPercent = Math.min(hackPercent + .1, .95);\\n\\t\\tif (hackPercent === .95) {\\n\\t\\t\\tbonusServers = Math.min(bonusServers + 1, skippedServer.length);\\n\\t\\t\\thackStatus.push(...skippedServer.slice(0, bonusServers));\\n\\t\\t}\\n\\t} else {\\n\\t\\tbonusServers = Math.max(bonusServers - 1, 0);\\n\\t\\tif (bonusServers <= 0) hackPercent = Math.max(hackPercent - .1, .5);\\n\\t}\\n\\tif (oldHackPercent !== hackPercent || oldBonusServers !== bonusServers) ns.tprint(`BonusServers added ${bonusServers} Hack percent ${hackPercent}`);\\n\\t// after aug install just start hacking on n00dles fist\\n\\tif (hackStatus.length === 0) hackStatus.push({ server: 'n00dles' });\\n\\tif (beforeHackStatusLength < hackStatus.length) ns.tprint(`Servers to hack ${hackStatus.length} ${hackStatus.map(o => o.server).join(',')}`);\\n}\\n\\nasync function run() {\\n\\tlet i = 0;\\n\\tawait updateServerLists();\\n\\tlet updateAfter = Date.now().valueOf() + 30 * 1000;\\n\\twhile (true) {\\n\\t\\tif (!hackStatus[i].pid || (hackStatus[i].pid && !ns.isRunning(hackStatus[i].pid.weaken))) {\\n\\t\\t\\tconst ret = await runHGW(hackStatus[i].server);\\n\\t\\t\\thackStatus[i] = ret;\\n\\t\\t}\\n\\t\\ti = (i + 1) % hackStatus.length;\\n\\t\\tawait ns.sleep(20);\\n\\t\\tif (updateAfter < Date.now()) {\\n\\t\\t\\tupdateAfter = Date.now() + 30 * 1000;\\n\\t\\t\\tawait updateServerLists();\\n\\t\\t\\ti = 0;\\n\\t\\t}\\n\\t}\\n}\\n\\nasync function runHGW(target) {\\n\\tconst currentSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\n\\tif (currentSec > 2) {\\n\\t\\tconst weaken = await runWeaken(target, 1, 1);\\n\\t\\treturn { server: target, promise: ns.asleep(weaken.time + 200), pid: { weaken: weaken.pid } };\\n\\t}\\n\\tconst hack = await runHack(target);\\n\\tconst grow = await runGrow(target, hack.amount);\\n\\tconst weaken = await runWeaken(target, hack.threadsCommitted, grow.threadsCommitted);\\n\\treturn { server: target, promise: ns.asleep(weaken.time + 200), pid: { weaken: weaken.pid, hack: hack.pid, grow: grow.pid } };\\n}\\n\\n//TODO move thread planning for HGW all together before exec\\nasync function runWeaken(target, hackThreads, growThreads) {\\n\\tconst ret = { time: 0, threadsCommitted: 0, pid: 0 };\\n\\tlet security = ns.growthAnalyzeSecurity(growThreads);\\n\\tsecurity += ns.hackAnalyzeSecurity(hackThreads);\\n\\t// slash the security if not at min to prep it\\n\\tconst currentSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\n\\tif (currentSec > 0) {\\n\\t\\tsecurity += currentSec\\n\\t}\\n\\tconst threadsNeeded = Math.max(Math.ceil(security / ns.weakenAnalyze(1, 1)), 1);\\n\\tconst homeThreadsNeeded = Math.max(Math.ceil(security / ns.weakenAnalyze(1, getCores('home'))), 1);\\n\\tconst { host, threads_available } = getHostAndThreads(weaken_scriptRam, threadsNeeded, homeThreadsNeeded);\\n\\tif (!host) return ret;\\n\\tlet threadToUse = Math.min(threads_available, threadsNeeded);\\n\\tif (host === 'home') { //hurray home for grow\\n\\t\\tthreadToUse = Math.min(threads_available, homeThreadsNeeded);\\n\\t}\\n\\tret.pid = await ns.exec(weaken_script, host, threadToUse, target, Math.random());\\n\\tret.time = ns.formulas.hacking.weakenTime(ns.getServer(target), ns.getPlayer());\\n\\tconst message = `Weak ${host}[${threadToUse}] -> ${target} in ${ns.tFormat(ret.time)}]`;\\n\\tif (ret.pid === 0) {\\n\\t\\tns.tprint('FAILED ' + message);\\n\\t\\tns.print('FAILED ' + message);\\n\\t\\treturn ret;\\n\\t}\\n\\tret.threadsCommitted = threadToUse;\\n\\treturn ret;\\n}\\n\\nasync function runGrow(target, hackAmount) {\\n\\tconst ret = { time: 0, threadsCommitted: 0, pid: 0 };\\n\\t// grow to counter the hack or just to fill up the server with money\\n\\tconst moneyToGrow = Math.max(hackAmount, ns.getServerMaxMoney(target) - ns.getServerMoneyAvailable(target));\\n\\tconst homeThreadsNeeded = Math.floor(calculateGrowThreads(ns, target, moneyToGrow, getCores('home'), { ServerGrowthRate }));\\n\\tconst threadsNeeded = Math.floor(calculateGrowThreads(ns, target, moneyToGrow, 1, { ServerGrowthRate }));\\n\\tconst { host, threads_available } = getHostAndThreads(grow_scriptRam, threadsNeeded, homeThreadsNeeded);\\n\\tif (!host) return ret;\\n\\tlet threadToUse = Math.min(threads_available, threadsNeeded);\\n\\tif (host === 'home') { //hurray home for grow\\n\\t\\tthreadToUse = Math.min(threads_available, homeThreadsNeeded);\\n\\t}\\n\\tif (threadToUse < 1) {\\n\\t\\treturn ret;\\n\\t}\\n\\tret.pid = await ns.exec(grow_script, host, threadToUse, target, Math.random());\\n\\tret.time = ns.formulas.hacking.growTime(ns.getServer(target), ns.getPlayer());\\n\\tconst message = `Grow ${host}[${threadToUse}] -> ${target} in ${ns.tFormat(ret.time)}]`;\\n\\tif (ret.pid === 0) {\\n\\t\\tns.tprint('FAILED ' + message);\\n\\t\\tns.print('FAILED ' + message);\\n\\t\\treturn ret;\\n\\t}\\n\\tret.threadsCommitted = threadToUse;\\n\\treturn ret;\\n}\\n\\nasync function runHack(target) {\\n\\tconst ret = { time: 0, threadsCommitted: 0, pid: 0, amount: 0 };\\n\\tconst threadsNeeded = Math.max(Math.floor(hackPercent / ns.formulas.hacking.hackPercent(ns.getServer(target), ns.getPlayer())), 1);\\n\\tconst { host, threads_available } = getHostAndThreads(hack_scriptRam, threadsNeeded, threadsNeeded * 1.1 /*try to dissuade hacks on home*/);\\n\\tif (!host) return ret;\\n\\tlet threadToUse = Math.min(threads_available, threadsNeeded);\\n\\tif (ns.getServerMoneyAvailable(target) / ns.getServerMaxMoney(target) < .9) {\\n\\t\\tthreadToUse = 1; // 0 or 1 just don't hack if server is not prepped\\n\\t}\\n\\n\\tconst cashingOut = ns.hackAnalyze(target) * threadToUse * ns.getServerMoneyAvailable(target);\\n\\tret.pid = await ns.exec(hack_script, host, threadToUse, target, Math.random());\\n\\tret.time = ns.formulas.hacking.hackTime(ns.getServer(target), ns.getPlayer());\\n\\tconst message = `Hack ${host}[${threadToUse}] -> ${target}[${ns.nFormat(cashingOut, \\\"($ 0.00 a)\\\")} in ${ns.tFormat(ret.time)}]`;\\n\\tif (ret.pid === 0) {\\n\\t\\tns.tprint('FAILED ' + message);\\n\\t\\tns.print('FAILED ' + message);\\n\\t\\treturn ret;\\n\\t}\\n\\tret.amount = cashingOut;\\n\\tns.print(message);\\n\\tret.threadsCommitted = threadToUse;\\n\\treturn ret;\\n}\\n\\nconst getCores = (host) => ns.getServer(host).cpuCores;\\nfunction getHostAndThreads(scriptRam, threadsNeeded, threadsNeededOnHome) {\\n\\tthreadsNeededOnHome = threadsNeededOnHome || threadsNeeded;\\n\\tconst hosts = serversForExecution.map((host) => {\\n\\t\\tlet maxRam = ns.getServerMaxRam(host);\\n\\t\\t// reserve some ram for other scripts\\n\\t\\tif (host === 'home') {\\n\\t\\t\\tmaxRam = Math.max(maxRam * .75, maxRam - 128);\\n\\t\\t}\\n\\t\\tconst threads_available = Math.floor((maxRam - ns.getServerUsedRam(host)) / scriptRam);\\n\\t\\tconst threadsAvailMinusNeed = host === 'home' ? threads_available - threadsNeededOnHome : threads_available - threadsNeeded;\\n\\t\\treturn { threads_available, host, threadsAvailMinusNeed };\\n\\t}).filter((hostO) => hostO.threads_available >= 1);\\n\\tif (hosts.length <= 0) return { host: null, threads_available: 0 };\\n\\thosts.sort((a, b) => a.threadsAvailMinusNeed - b.threadsAvailMinusNeed);\\n\\t// take the closet fit from front of the array or just the biggest threads available from the end\\n\\treturn hosts.filter(o => o.threadsAvailMinusNeed >= 0).shift() || hosts.pop();\\n}\",\"filename\":\"mcp_hgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"growthFunctions.js\",\"url\":\"blob:https://danielyxie.github.io/1caf134c-09de-489e-90fe-6eff08a1af96\",\"moduleSequenceNumber\":1842570},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/41900929-be44-4e8c-ae0c-a47448ff5b48\",\"moduleSequenceNumber\":1842562},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/d6a05629-7b88-4435-b001-dadcf46b2789\",\"moduleSequenceNumber\":1842545},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/b758d181-65fd-4e77-abe9-36d07dcd60d9\",\"moduleSequenceNumber\":1842546},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/3aeb7637-3078-4320-9ae6-fb67ca2b8d53\",\"moduleSequenceNumber\":1842545},{\"filename\":\"mcp_hgw.js\",\"url\":\"blob:https://danielyxie.github.io/efd451fd-19b0-4f16-9fe4-534cd3941284\",\"moduleSequenceNumber\":1842699}],\"dependents\":[],\"ramUsage\":12,\"server\":\"home\",\"moduleSequenceNumber\":1842699,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @author modar <gist.github.com/xmodar>\\n * {@link https://www.reddit.com/r/Bitburner/comments/tgtkr1/here_you_go_i_fixed_growthanalyze_and_growpercent/}\\n *\\n * @typedef {Partial<{\\n *   moneyAvailable: number;\\n *   hackDifficulty: number;\\n *   ServerGrowthRate: number // ns.getBitNodeMultipliers().ServerGrowthRate\\n *   ; // https://github.com/danielyxie/bitburner/blob/dev/src/BitNode/BitNode.tsx\\n * }>} GrowOptions\\n */\\n\\nexport function calculateGrowGain(ns, host, threads = 1, cores = 1, opts = {}) {\\n    threads = Math.max(Math.floor(threads), 0);\\n    const moneyMax = ns.getServerMaxMoney(host);\\n    const { moneyAvailable = ns.getServerMoneyAvailable(host) } = opts;\\n    const rate = growPercent(ns, host, threads, cores, opts);\\n    return Math.min(moneyMax, rate * (moneyAvailable + threads)) - moneyAvailable;\\n}\\n\\n/** @param {number} gain money to be added to the server after grow */\\nexport function calculateGrowThreads(ns, host, gain, cores = 1, opts = {}) {\\n    const moneyMax = ns.getServerMaxMoney(host);\\n    const { moneyAvailable = ns.getServerMoneyAvailable(host) } = opts;\\n    const money = Math.min(Math.max(moneyAvailable + gain, 0), moneyMax);\\n    const rate = Math.log(growPercent(ns, host, 1, cores, opts));\\n    const logX = Math.log(money * rate) + moneyAvailable * rate;\\n    return Math.max(lambertWLog(logX) / rate - moneyAvailable, 0);\\n}\\n\\nfunction growPercent(ns, host, threads = 1, cores = 1, opts = {}) {\\n    const { ServerGrowthRate = 1, hackDifficulty = ns.getServerSecurityLevel(host), } = opts;\\n    const growth = ns.getServerGrowth(host) / 100;\\n    const multiplier = ns.getPlayer().hacking_grow_mult;\\n    const base = Math.min(1 + 0.03 / hackDifficulty, 1.0035);\\n    const power = growth * ServerGrowthRate * multiplier * ((cores + 15) / 16);\\n    return base ** (power * threads);\\n}\\n\\n/**\\n * Lambert W-function for log(x) when k = 0\\n * {@link https://gist.github.com/xmodar/baa392fc2bec447d10c2c20bbdcaf687}\\n */\\nfunction lambertWLog(logX) {\\n    if (isNaN(logX)) return NaN;\\n    const logXE = logX + 1;\\n    const logY = 0.5 * log1Exp(logXE);\\n    const logZ = Math.log(log1Exp(logY));\\n    const logN = log1Exp(0.13938040121300527 + logY);\\n    const logD = log1Exp(-0.7875514895451805 + logZ);\\n    let w = -1 + 2.036 * (logN - logD);\\n    w *= (logXE - Math.log(w)) / (1 + w);\\n    w *= (logXE - Math.log(w)) / (1 + w);\\n    w *= (logXE - Math.log(w)) / (1 + w);\\n    return isNaN(w) ? (logXE < 0 ? 0 : Infinity) : w;\\n}\\nconst log1Exp = (x) => x <= 0 ? Math.log(1 + Math.exp(x)) : x + log1Exp(-x);\",\"filename\":\"growthFunctions.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"home\",\"moduleSequenceNumber\":1842570,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Basic window class that other widgets are built on\\nexport class curse_window {\\n\\tconstructor (ns, border=false, height=27, width=51) {\\n\\t\\tthis.ns = ns;\\n\\t\\t\\n\\t\\t// Disable log to prevent it from interfering with display\\n\\t\\tthis.ns.disableLog(\\\"ALL\\\");\\n\\t\\t\\n\\t\\t// Relationship to other windows\\n\\t\\t// isChild = false means this is the object running the display\\n\\t\\tthis.ischild = false;\\n\\t\\tthis.childwin = [];\\n\\t\\t\\n\\t\\t// Size of the buffer being output to the log\\n\\t\\tthis.height = height;\\n\\t\\tthis.width = width;\\n\\t\\t\\n\\t\\t// Location coordinates if set as child\\n\\t\\t// Relative to parent window\\n\\t\\tthis.x = 0;\\n\\t\\tthis.y = 0;\\n\\t\\t\\n\\t\\t// TODO: Unused, planned to sort windows by priority\\n\\t\\tthis.layer = 0;\\n\\t\\t\\n\\t\\t// Window can have a border, default false\\n\\t\\tthis.border = border;\\n\\t\\tthis.border_top = true;\\n\\t\\tthis.border_bottom = true;\\n\\t\\tthis.border_left = true;\\n\\t\\tthis.border_right = true;\\n\\t\\t\\n\\t\\t// Run once to build the buffer\\n\\t\\tthis.clearBuffer();\\n\\t}\\n\\t\\n\\t// Convenience handler to attach child window\\n\\taddChild(handle, x, y) {\\n\\t\\thandle.setPosition(x, y);\\n\\t\\thandle.ischild = true;\\n\\t\\thandle.parenthandle = this;\\n\\t\\tthis.childwin.push(handle);\\n\\t}\\n\\t\\n\\t// Get dimensions of the drawing area\\n\\tgetSubDimensions () {\\n\\t\\tlet bordervbuff = 0;\\n\\t\\tlet borderwbuff = 0;\\n\\t\\tif (this.border) {\\n\\t\\t\\tif (this.border_top) {\\n\\t\\t\\t\\tbordervbuff++\\n\\t\\t\\t}\\n\\t\\t\\tif (this.border_bottom) {\\n\\t\\t\\t\\tbordervbuff++\\n\\t\\t\\t}\\n\\t\\t\\tif (this.border_left) {\\n\\t\\t\\t\\tborderwbuff++\\n\\t\\t\\t}\\n\\t\\t\\tif (this.border_right) {\\n\\t\\t\\t\\tborderwbuff++\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn [this.width - borderwbuff, this.height - bordervbuff];\\n\\t}\\n\\t\\n\\t// Resize the window\\n\\tsetDimensions (height, width) {\\n\\t\\tthis.height = height;\\n\\t\\tthis.width = width;\\n\\t\\tthis.clearBuffer();\\n\\t}\\n\\t\\n\\t// Change position relative to parent window\\n\\tsetPosition (x, y) {\\n\\t\\tthis.x = x;\\n\\t\\tthis.y = y;\\n\\t}\\n\\t\\n\\t// Internal function used to print over existing text\\n\\tsubstringReplace (index, source, text) {\\n\\t\\tlet leftString = source.substring(0, index);\\n\\t\\tlet rightString = source.substring(index + text.length);\\n\\t\\treturn [leftString, text, rightString].join('');\\n\\t}\\n\\t\\n\\t// Basic function to arbitrarily place text in buffer\\n\\taddText(x, y, text) {\\n\\t\\t\\n\\t\\t// Use adjusted coordinates to adjust for border\\n\\t\\tlet ay = y;\\n\\t\\tlet ax = x;\\n\\t\\tif (this.border) {\\n\\t\\t\\tif (this.border_left) {\\n\\t\\t\\t\\tax++;\\n\\t\\t\\t}\\n\\t\\t\\tif (this.border_bottom) {\\n\\t\\t\\t\\tay++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\n\\t\\tay = this.height - ay - 1;\\n\\t\\t\\n\\t\\tlet drawArea = this.getSubDimensions();\\n\\t\\t\\n\\t\\tif (y < drawArea[1] && x < drawArea[0]) {\\n\\t\\t\\t\\n\\t\\t\\t// If final line is longer than window, truncate it\\n\\t\\t\\tif (text.length + ax > this.width) {\\n\\t\\t\\t\\ttext = text.substring(0, this.width - ax);\\n\\t\\t\\t}\\n\\t\\t\\n\\t\\t\\t// Use substringReplace to overwrite existing buffer line\\n\\t\\t\\tthis.buffer[ay] = this.substringReplace(ax, this.buffer[ay], text);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Function to create an empty buffer\\n\\t// Bulk of work is to create borders\\n\\tclearBuffer() {\\n\\t\\tif (this.border) {\\n\\t\\t\\tthis.buffer = [];\\n\\t\\t\\tif (this.border_top) {\\n\\t\\t\\t\\tlet line = '─'.repeat(this.width);\\n\\t\\t\\t\\tif (this.border_left) {\\n\\t\\t\\t\\t\\tline = this.substringReplace(0, line, '┌');\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (this.border_right) {\\n\\t\\t\\t\\t\\tline = this.substringReplace(line.length - 1, line, '┐');\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tthis.buffer.push(line);\\n\\t\\t\\t}\\n\\t\\t\\tlet line = ' '.repeat(this.width);\\n\\t\\t\\tif (this.border_left) {\\n\\t\\t\\t\\tline = this.substringReplace(0, line, '│');\\n\\t\\t\\t}\\n\\t\\t\\tif (this.border_right) {\\n\\t\\t\\t\\tline = this.substringReplace(line.length - 1, line, '│');\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\twhile (this.buffer.length < this.height) {\\n\\t\\t\\t\\tthis.buffer.push(line);\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\tif (this.border_bottom) {\\n\\t\\t\\t\\tthis.buffer.pop();\\n\\t\\t\\t\\tlet line = '─'.repeat(this.width);\\n\\t\\t\\t\\tif (this.border_left) {\\n\\t\\t\\t\\t\\tline = this.substringReplace(0, line, '└');\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (this.border_right) {\\n\\t\\t\\t\\t\\tline = this.substringReplace(line.length - 1, line, '┘');\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tthis.buffer.push(line);\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t} else {\\n\\t\\t\\t// Really simple whitespace buffer if there's no borders\\n\\t\\t\\tthis.buffer = [];\\n\\t\\t\\tlet line = ' '.repeat(this.width);\\n\\t\\t\\twhile (this.buffer.length < this.height) {\\n\\t\\t\\t\\tthis.buffer.push(line);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Print in a single action for experiency\\n\\tdrawToLog () {\\n\\t\\tthis.ns.print(this.buffer.join('\\\\n'));\\n\\t}\\n\\t\\n\\t// Function to composite together the output of this window and all it's\\n\\t// children.\\n\\trefreshBuffer(print=true) {\\n\\t\\t// Proactively clear the log if we're about to print\\n\\t\\tif (!this.ischild && print) {\\n\\t\\t\\tthis.ns.clearLog();\\n\\t\\t}\\n\\t\\t\\n\\t\\t// Go through children\\n\\t\\t// TODO: Add layer support\\n\\t\\tfor (let i = 0; i < this.childwin.length; i++) {\\n\\t\\t\\tconst child = this.childwin[i];\\n\\t\\t\\tchild.render(false);\\n\\t\\t\\tlet cbuffer = this.childwin[i].buffer;\\n\\t\\t\\t\\n\\t\\t\\t// Composite the buffers with the existing buffer\\n\\t\\t\\tfor (let y = 0; y < cbuffer.length; y++) {\\n\\t\\t\\t\\tlet index = (this.buffer.length - this.childwin[i].y - this.childwin[i].height) + y;\\n\\t\\t\\t\\tthis.buffer[index] = this.substringReplace(this.childwin[i].x, this.buffer[index], cbuffer[y]);\\n\\t\\t\\t\\tif (this.buffer[index].length > this.width) {\\n\\t\\t\\t\\t\\tthis.buffer[index] = this.buffer[index].slice(0,this.width);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t\\n\\trenderParent() {\\n\\t\\tif (this.ischild) {\\n\\t\\t\\tthis.parenthandle.renderParent()\\n\\t\\t} else {\\n\\t\\t\\tthis.render()\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Function for getting the buffer as a string rather than printing\\n\\t// Because ns is not used anywhere in this, is good for asynchronous rendering\\n\\tasync renderToString(clear=false, refresh=true) {\\n\\t\\tif (refresh) {\\n\\t\\t\\tthis.refreshBuffer(false)\\n\\t\\t}\\n\\t\\tlet output = this.buffer.join('\\\\n');\\n\\t\\tif (clear) {\\n\\t\\t\\tthis.clearBuffer();\\n\\t\\t}\\n\\t\\treturn output;\\n\\t}\\n\\t\\n\\t// Function compiling together multiple operations\\n\\t// Will print the buffer, but also supports simple paging to keep underlying\\n\\t// content unchanged.\\n\\trender (clear=false, refresh=true ) {\\n\\t\\tlet tempbuffer = []\\n\\t\\tif (!clear) {\\n\\t\\t\\ttempbuffer = [...this.buffer];\\n\\t\\t}\\n\\t\\t\\n\\t\\tif (refresh) {\\n\\t\\t\\tthis.refreshBuffer();\\n\\t\\t}\\n\\t\\t\\n\\t\\tif (!this.ischild) {\\n\\t\\t\\tthis.drawToLog();\\n\\t\\t}\\n\\t\\tif (clear) {\\n\\t\\t\\tthis.clearBuffer();\\n\\t\\t} else {\\n\\t\\t\\tthis.buffer = tempbuffer\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Render wrapper with included async, meant to be a drop i replacement\\n\\t// for ns.sleeps in code\\n\\tasync rendersleep(time, clear=false) {\\n\\t\\tlet sleephandle = this.ns.asleep(time);\\n\\t\\tthis.render(clear);\\n\\t\\tawait sleephandle;\\n\\t}\\n}\\n\\n// Specialty window, provides scrolling text output. Used to replicated existing\\n// log window.\\nexport class curse_stream extends curse_window {\\n\\tconstructor (ns, border=false, height=100, width=51) {\\n\\t\\tsuper(ns, border, height, width);\\n\\t\\tthis.textBuffer = [];\\n\\t\\tthis.renderOnPrint = false;\\n\\t}\\n\\t\\n\\t// extend clearbuffer to make sure it has a clean blankline saved\\n\\tclearBuffer() {\\n\\t\\tsuper.clearBuffer();\\n\\t\\t\\n\\t\\tthis.textBuffer = [];\\n\\t\\t\\n\\t\\tif (this.buffer.length > 1) {\\n\\t\\t\\tthis.blankLine = this.buffer[1]\\n\\t\\t} else {\\n\\t\\t\\tthis.blankLine = this.buffer[0]\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Mostly a drop in replacement for ns.print\\n\\t// TODO: Add support for multiple inputs\\n\\tprint (input) {\\n\\t\\tinput = String(input)\\n\\t\\t\\n\\t\\tlet subdim = super.getSubDimensions();\\n\\t\\t\\n\\t\\t// Check width and perform wordwrap if input exceeds linewidth\\n\\t\\tlet inputWrap = [];\\n\\t\\tlet inputTail = input.slice(subdim[0]-1);\\n\\t\\t\\n\\t\\twhile (inputTail != \\\"\\\") {\\n\\t\\t\\tinputWrap.push(input.slice(0, subdim[0]-1));\\n\\t\\t\\tinput = inputTail;\\n\\t\\t\\tinputTail = input.slice(subdim[0]-1);\\n\\t\\t}\\n\\t\\tinputWrap.push(input)\\n\\t\\t\\n\\t\\t// Add the lines individually so scrolling can be managed smoothly\\n\\t\\twhile (inputWrap.length > 0) {\\n\\t\\t\\tlet line = inputWrap.shift();\\n\\t\\t\\t\\n\\t\\t\\t// By removing top index all the bufferlines move up by one inherently\\n\\t\\t\\tif (this.border && this.border_top && this.buffer.length > 1) {\\n\\t\\t\\t\\tthis.buffer.splice(1, 1);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.buffer.splice(0, 1);\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\t// Insert a new blankline at the bottom to restore buffer size\\n\\t\\t\\tif (this.border && this.border_bottom) {\\n\\t\\t\\t\\tthis.buffer.splice(-1, 0, this.blankLine)\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.buffer.splice(this.buffer.length, 0, this.blankLine)\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Use addText to write on the new blankline\\n\\t\\t\\tthis.addText(0,0,line);\\n\\t\\t\\t\\n\\t\\t\\t// Keep the textbuffer for later\\n\\t\\t\\tthis.textBuffer.push(line);\\n\\t\\t\\n\\t\\t\\t// Trim the textbuffer if it's too long\\n\\t\\t\\tif (this.textBuffer.length > subdim[1]) {\\n\\t\\t\\t\\tthis.textBuffer.shift();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\n\\t\\t// If set to true, visually makes it print immediately, replicating\\n\\t\\t// normal print behavior. Resource intensive.\\n\\t\\tif (this.renderOnPrint) {\\n\\t\\t\\tsuper.renderParent();\\n\\t\\t}\\n\\t}\\n}\\n\\n// Simple progress bar widget\\nexport class curse_progress extends curse_window {\\n\\tconstructor (ns, border=false, height=1, width=51) {\\n\\t\\tif (border && height == 1) {\\n\\t\\t\\theight = 3;\\n\\t\\t}\\n\\t\\tsuper(ns, border, height, width);\\n\\t}\\n\\t\\n\\t// Only needs on function to generate the progress bar\\n\\tupdate (progress) {\\n\\t\\tlet width = this.getSubDimensions()[0];\\n\\t\\tlet increment = width / 100;\\n\\t\\t\\n\\t\\tprogress = progress * 100;\\n\\t\\t\\n\\t\\tthis.addText(0, 0, '#'.repeat(Math.ceil(increment * progress)).padEnd(width));\\n\\t}\\n}\\n\\n// Main function provides example code\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst win = new curse_stream(ns, true, 20);\\n\\tconst progwin = new curse_progress(ns, true, 3, 21);\\n\\tconst bouncetext = new curse_window(ns, false, 1, 4);\\n\\n\\tbouncetext.addText(0,0,\\\"BOO!\\\")\\n\\n\\twin.addChild(progwin, 5,6)\\n\\twin.addChild(bouncetext, 1, 10);\\n\\t\\n\\tlet y = 10;\\n\\tlet x = 1;\\n\\tlet z = 0;\\n\\tlet zdir = true\\n\\tlet drawarea = win.getSubDimensions()\\n\\twin.clearBuffer();\\n\\twhile (true) {\\n\\t\\tif (y > drawarea[1] - 1) {\\n\\t\\t\\ty = 0;\\n\\t\\t}\\n\\t\\tif (x > drawarea[0] - 2) {\\n\\t\\t\\tx = 0;\\n\\t\\t}\\n\\t\\t\\n\\t\\tbouncetext.setPosition(x, y)\\n\\t\\t\\n\\t\\tif (z > 99) {\\n\\t\\t\\tzdir = false\\n\\t\\t} else if ( z < 1 ) {\\n\\t\\t\\tzdir = true\\n\\t\\t}\\n\\t\\t\\n\\t\\tprogwin.update(z / 100)\\n\\n\\t\\twin.print(\\\"=\\\".repeat(z));\\n\\t\\tawait win.rendersleep(800);\\n\\t\\tx++;\\n\\t\\ty++;\\n\\t\\tif (zdir) {\\n\\t\\t\\tz++;\\n\\t\\t} else {\\n\\t\\t\\tz--;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"bcurses.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"bcurses.js\",\"url\":\"blob:https://danielyxie.github.io/02668ca8-200a-4345-ae30-6888acf92ad7\",\"moduleSequenceNumber\":680141}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":1842571,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n    ['trips-per-cycle', 1000],\\n    ['money-threshold', 1_000_000_000_000]\\n];\\n\\nexport function autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\n\\n// TODO: Joining factions gives a small amount of int xp.\\n// With singularity functions, soft reset, and the 10 corp factions you can create a script that farms int xp rather quickly.\\n// This would be faster than the below travel-based method, which has been nerfed quite heavily\\n\\n/** @param {NS} ns \\n * Script contributed by https://github.com/ShawnPatton\\n * Concept: A small amount of intelligence is granted when you (successfully) travel to a new city. This script converts money into intelligence exp! **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"travelToCity\\\");\\n    ns.disableLog(\\\"sleep\\\");\\n    ns.tail();\\n    let options = ns.flags(argsSchema);\\n    let tripsPerCycle = options['trips-per-cycle'];\\n    let moneyThreshold = options['money-threshold'];\\n    ns.print(`trips-per-cycle: ` + tripsPerCycle);\\n    ns.print(`money-threshold: ` + ns.nFormat(moneyThreshold, '$0.0a'));\\n    let justStarted = true;\\n    let previousInt = ns.getPlayer().intelligence;\\n    let currentInt = previousInt;\\n    let previousLevelTime = Date.now();\\n    let levelupTime;\\n    let cycles = 0;\\n    let duration = 0;\\n    let tripsPerLevel = 0;\\n    let tripsPerMs = 0;\\n    ns.print(`Starting Script at Int ` + currentInt);\\n    while (true) {\\n        while (ns.getPlayer().money > moneyThreshold) {\\n            for (let i = 0; i < tripsPerCycle; i++) {\\n                ns.travelToCity(\\\"Aevum\\\");\\n                ns.travelToCity(\\\"Sector-12\\\");\\n            }\\n            await ns.sleep(1);\\n            cycles++;\\n            if (previousInt != ns.getPlayer().intelligence) {\\n                currentInt = ns.getPlayer().intelligence;\\n                levelupTime = Date.now();\\n                duration = levelupTime - previousLevelTime;\\n                tripsPerLevel = cycles * tripsPerCycle * 2;\\n                tripsPerMs = Math.floor(tripsPerLevel / duration);\\n                ns.print(`Level Up: Int ` + currentInt + (justStarted ? ` Partial` : ` Full`) + ` Level in `\\n                    + ns.tFormat(duration) + ` & ` + tripsPerLevel + ` Travels`);\\n                ns.print(`Approximately ` + tripsPerMs + ` Trips/Millisecond`);\\n                previousLevelTime = levelupTime;\\n                previousInt = currentInt;\\n                justStarted = false;\\n                cycles = 0;\\n            }\\n        }\\n        await ns.sleep(10000);\\n        ns.print(`Below money threshold, waiting 10 seconds`);\\n    }\\n}\",\"filename\":\"farm_int.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"farm_int.js\",\"url\":\"blob:https://danielyxie.github.io/bddcc4d7-e555-44f8-adfd-7ca940d3f89d\",\"moduleSequenceNumber\":1813442}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":1842572,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { boxTailSingleton, tryGetBitNodeMultipliers } from 'utils.js';\\nimport {\\n    factions,\\n    getAllAugmentRepReq,\\n    getAllAugmentStats,\\n    getAugmentsPerFaction,\\n    getOwnedAugmentationsStatic\\n} from \\\"augments.js\\\";\\nconst companySpecificConfigs = [\\n    { name: \\\"NWO\\\", statModifier: 25 },\\n    { name: \\\"MegaCorp\\\", statModifier: 25 },\\n    { name: \\\"Blade Industries\\\", statModifier: 25 },\\n    { name: \\\"Fulcrum Secret Technologies\\\", companyName: \\\"Fulcrum Technologies\\\", repRequiredForFaction: 250000 }, // Special snowflake\\n    { name: \\\"Silhouette\\\", companyName: \\\"TBD\\\", repRequiredForFaction: 999e9 /* Hack to force work until max promotion. */ }\\n]\\nconst jobs = [ // Job stat requirements for a company with a base stat modifier of +224 (modifier of all megacorps except the ones above which are 25 higher)\\n    { name: \\\"it\\\", reqRep: [0, 7E3, 35E3, 175E3], reqHack: [225, 250, 275, 375], reqCha: [0, 0, 275, 300], repMult: [0.9, 1.1, 1.3, 1.4] },\\n    { name: \\\"software\\\", reqRep: [0, 8E3, 40E3, 200E3, 400E3, 800E3, 1.6e6, 3.2e6], reqHack: [225, 275, 475, 625, 725, 725, 825, 975], reqCha: [0, 0, 275, 375, 475, 475, 625, 725], repMult: [0.9, 1.1, 1.3, 1.5, 1.6, 1.6, 1.75, 2] },\\n]\\nconst factionSpecificConfigs = [\\n    { name: \\\"Slum Snakes\\\", forceUnlock: true },\\n]\\n\\n// These factions should ideally be completed in this order (TODO: Check for augmentation dependencies)\\nconst preferredEarlyFactionOrder = [\\n    \\\"Slum Snakes\\\", // Unlock Gangs\\n    \\\"Netburners\\\", // Required to set up hash income\\n    \\\"Tian Di Hui\\\", \\\"Aevum\\\", // These give all the company_rep and faction_rep bonuses early game\\n    \\\"CyberSec\\\", /* Quick, and NightSec aug depends on an aug from here */ \\\"NiteSec\\\", \\\"Tetrads\\\", // Cha augs to speed up earning company promotions\\n    \\\"Bachman & Associates\\\", // Boost company/faction rep for future augs\\n    \\\"Daedalus\\\", // Once we have all faction_rep boosting augs, there's no reason not to work towards Daedalus as soon as it's available/feasible so we can buy Red Pill\\n    \\\"Fulcrum Secret Technologies\\\", // Will be removed if hack level is too low to backdoor their server\\n    \\\"ECorp\\\", // More cmp_rep augs, and some strong hack ones as well\\n    \\\"BitRunners\\\", \\\"The Black Hand\\\", // Fastest sources of hacking augs after the above companies\\n    \\\"The Dark Army\\\", // Unique cmp_rep aug TODO: Can it sensibly be gotten before corps? Requires 300 all combat stats.\\n    \\\"Clarke Incorporated\\\", \\\"OmniTek Incorporated\\\", \\\"NWO\\\", // More hack augs from companies\\n    \\\"Chongqing\\\", // Unique Source of big 1.4x hack exp boost (Can only join if not in e.g. Aevum as well)\\n];\\n// This is an approximate order of most useful augmentations left to offer, assuming all early-game factions have been cleaned out\\nconst preferredCompanyFactionOrder = [\\n    \\\"Bachman & Associates\\\", // Augs boost company_rep by 1.65, faction_rep by 1.50. Lower rep-requirements than ECorp augs, so should be a priority to speed up future resets\\n    \\\"ECorp\\\", // Offers 2.26 multi worth of company_rep and major hacking stat boosts (1.51 hack / 1.54 exp / 1.43 success / 3.0 grow / 2.8 money / 1.25 speed), but high rep reqs\\n    \\\"Clarke Incorporated\\\", // Biggest boost to hacking after above factions (1.38)\\n    \\\"OmniTek Incorporated\\\", // Next big boost to hacking after above factions (1.20) (NWO is bigger, but this has lower Cha reqs.)\\n    \\\"NWO\\\", // Biggest boost to hacking after above factions (1.26)\\n    \\\"Blade Industries\\\", // Mostly redundant after Ecorp - provides remaining hack-related augs (1.10 money, 1.03 speed)\\n    \\\"MegaCorp\\\", // Offers 1 unique aug boosting all physical traits by 1.35\\n    \\\"KuaiGong International\\\", // 1.40 to agility, defense, strength\\n    \\\"Fulcrum Secret Technologies\\\", // Big boosts to company_rep and hacking, but requires high hack level to backdoor their server, so might have to be left until later\\n    \\\"Four Sigma\\\", // No unique augs, but note that if accessible early on, Fulcrum + Four Sigma is a one-two punch to get all company rep boosting augs in just 2 factions\\n]\\n// Order in which to focus on crime factions\\nconst preferredCrimeFactionOrder = [\\\"Netburners\\\", \\\"Slum Snakes\\\", \\\"NiteSec\\\", \\\"Tetrads\\\", \\\"The Black Hand\\\", \\\"The Syndicate\\\", \\\"The Dark Army\\\", \\\"Speakers for the Dead\\\", \\\"Daedalus\\\"]\\n\\nconst loopSleepInterval = 2000; // 2 seconds\\nconst statusUpdateInterval = 120000; // 2 minutes (outside of this, minor updates in e.g. stats aren't logged)\\nconst restartWorkInterval = 30000; // Collect e.g. rep earned by stopping and starting work;\\nlet noFocus = false; // Can be set via command line to disable doing work that requires focusing (crime, studying, or focused faction/company work)\\nlet noStudying = false; // Disable studying for Charisma. Useful in longer resets when Cha augs are insufficient to meet promotion requirements (Also disabled with --no-focus)\\nlet noCrime = false; // Disable doing crimes at all. (Also disabled with --no-focus)\\nlet crimeFocus = false; // Useful in crime-focused BNs when you want to focus on crime related factions\\nlet gangFocus = false; // Use to focus on unlock gang\\nlet shouldFocusAtWork = false; // Whether we should focus on work or let it be backgrounded (based on whether \\\"Neuroreceptor Management Implant\\\" is owned, or \\\"--no-focus\\\" is specified)\\nlet repToDonate = 150; // Updated after looking at bitnode mults\\nlet lastActionRestart = 0;\\nlet ownedAugmentations = [];\\nlet mostExpensiveAugByFaction = [];\\nlet mostExpensiveDesiredAugByFaction = [];\\nlet playerGang = null;\\nlet allGangFactions = [];\\n\\nlet options;\\nconst argsSchema = [\\n    ['first', []], // Grind rep with these factions first. Also forces a join of this faction if we normally wouldn't (e.g. no desired augs or all augs owned)\\n    ['skip', []], // Don't work for these factions\\n    ['o', false], // Immediately grind company factions for rep after getting their invite, rather than first getting all company invites we can\\n    ['desired-stats', []], // Factions will be removed from our 'early-faction-order' once all augs with these stats have been bought out\\n    ['no-focus', false], // Disable doing work that requires focusing (crime, studying, or focused faction/company work)\\n    ['no-studying', false], // Disable studying for Charisma. Useful in longer resets when Cha augs are insufficient to meet promotion requirements (Also disabled with --no-focus)\\n    ['no-crime', false], // Disable doing crimes at all. (Also disabled with --no-focus)\\n    ['crime-focus', false], // Useful in crime-focused BNs when you want to focus on crime related factions\\n    ['gang-focus', false], // Use to focus on unlock gang\\n    ['invites-only', false], // Just work to get invites, don't work for augmentations / faction rep\\n    ['prioritize-invites', false], // Prioritize working for as many invites as is practical before starting to grind for faction reputation\\n];\\n\\nexport function autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    const lastFlag = args.length > 1 ? args[args.length - 2] : null;\\n    if (lastFlag === \\\"--first\\\" || lastFlag === \\\"--skip\\\")\\n        return factionList.map(f => f.replaceAll(' ', '_')).sort();\\n    return [];\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('asleep');\\n    ns.disableLog('getServerRequiredHackingLevel');\\n    ns.disableLog('workForFaction');\\n    ns.disableLog('workForCompany');\\n    ns.disableLog('stopAction');\\n    ns.disableLog('applyToCompany');\\n    ns.disableLog('commitCrime');\\n    ns.clearLog();\\n    ns.tail();\\n    boxTailSingleton(ns, 'FactionWork', '♥', '200px');\\n    options = ns.flags(argsSchema);\\n    const desiredAugStats = (options['desired-stats'] || []);\\n    const firstFactions = options.first = (options.first || []).map(f => f.replaceAll('_', ' '));\\n    let skipFactionsConfig = options.skip = (options.skip || []).map(f => f.replaceAll('_', ' '));\\n    gangFocus = options['gang-focus'];\\n    noFocus = options['no-focus'];\\n    noStudying = options['no-studying'] || noFocus; // Can't study if we aren't allowed to steal focus\\n    noCrime = options['no-crime'] || noFocus; // Can't crime if we aren't allowed to steal focus\\n    crimeFocus = options['crime-focus'];\\n    if (crimeFocus && noFocus)\\n        return ns.tprint(\\\"ERROR: Cannot use --no-focus and --crime-focus at the same time. You need to focus to do crime!\\\");\\n    if (desiredAugStats.length === 0)\\n        desiredAugStats.push(...(crimeFocus || gangFocus ? ['str', 'def', 'dex', 'agi', 'faction_rep', 'hacking', 'hacknet'] : ['hacking', 'faction_rep', 'company_rep', 'charisma', 'hacknet']))\\n    // Log command line args used\\n    if (firstFactions.length > 0) ns.print(`--first factions: ${firstFactions.join(\\\", \\\")}`);\\n    if (skipFactionsConfig.length > 0) ns.print(`--skip factions: ${skipFactionsConfig.join(\\\", \\\")}`);\\n    if (desiredAugStats.length > 0) ns.print(`--desired-stats matching: ${desiredAugStats.join(\\\", \\\")}`);\\n    let bitnodeMults = tryGetBitNodeMultipliers(ns);\\n    repToDonate = 150 * (bitnodeMults.RepToDonateToFaction || 1);\\n    // Get some factions augmentations to decide what remains to be purchased\\n    const dictFactionAugs = getAugmentsPerFaction(ns);\\n    const dictAugRepReqs = getAllAugmentRepReq(ns);\\n    const dictAugStats = getAllAugmentStats(ns);\\n    ownedAugmentations = getOwnedAugmentationsStatic(ns);\\n    shouldFocusAtWork = !noFocus; // Focus at work for the best rate of rep gain, unless focus activities are disabled via command line\\n    if (shouldFocusAtWork) { // Check if we have an augmentation that lets us not have to focus at work (always nicer if we can background it)\\n        let activeAugmentations = getOwnedAugmentationsStatic(ns);\\n        shouldFocusAtWork = !activeAugmentations.includes(\\\"Neuroreceptor Management Implant\\\");\\n    }\\n\\n    if (ns.fileExists('/tmp/ingang.txt')) {\\n        let configGangIndex = preferredEarlyFactionOrder.findIndex(f => f === \\\"Slum Snakes\\\");\\n        if (configGangIndex !== -1) // If we're in a gang, don't need to earn an invite to slum snakes anymore\\n            preferredEarlyFactionOrder.splice(configGangIndex, 1);\\n        allGangFactions = [\\\"Tetrads\\\", \\\"The Black Hand\\\", \\\"The Syndicate\\\", \\\"The Dark Army\\\", \\\"Speakers for the Dead\\\", \\\"NiteSec\\\"];\\n    }\\n    mostExpensiveAugByFaction = Object.fromEntries(factionList.map(f => [f, dictFactionAugs[f]\\n        .filter(aug => !ownedAugmentations.includes(aug))\\n        .reduce((max, aug) => Math.max(max, dictAugRepReqs[aug]), -1)]));\\n    ns.print(\\\"Most expensive unowned aug by faction: \\\" + JSON.stringify(mostExpensiveAugByFaction, null, 2));\\n    // TODO: Detect when the most expensive aug from two factions is the same - only need it from the first one. (Update lists and remove 'afforded' augs?)\\n    mostExpensiveDesiredAugByFaction = Object.fromEntries(\\n        factionList.map(f => [f, dictFactionAugs[f].filter(aug => !ownedAugmentations.includes(aug) && (Object.keys(dictAugStats[aug]).length === 0 || !desiredAugStats ||\\n            Object.keys(dictAugStats[aug]).some(key => desiredAugStats.some(stat => key.includes(stat)))))\\n            .reduce((max, aug) => Math.max(max, dictAugRepReqs[aug]), -1)])\\n    );\\n    ns.print(\\\"Most expensive desired aug by faction: \\\" + JSON.stringify(mostExpensiveDesiredAugByFaction, null, 2));\\n    let completedFactions = Object.keys(mostExpensiveAugByFaction).filter(fac => mostExpensiveAugByFaction[fac] === -1 && !factionSpecificConfigs.find(c => c.name === fac)?.forceUnlock);\\n    let skipFactions = skipFactionsConfig.concat(completedFactions);\\n    let softCompletedFactions = Object.keys(mostExpensiveDesiredAugByFaction).filter(fac => mostExpensiveDesiredAugByFaction[fac] === -1 &&\\n        !completedFactions.includes(fac) && !factionSpecificConfigs.find(c => c.name === fac)?.forceUnlock);\\n    ns.print(`${completedFactions.length} factions are completed (all augs purchased): ${completedFactions.join(\\\", \\\")}`);\\n    ns.print(`${softCompletedFactions.length} factions will initially be skipped (all desired augs purchased): ${softCompletedFactions.join(\\\", \\\")}`);\\n\\n    let scope = -1; // Scope increases each time we complete a type of work and haven't progressed enough to unlock more factions\\n    let numJoinedFactions = ns.getPlayer().factions.length;\\n    while (true) { // After each loop, we will repeat all previous work \\\"strategies\\\" to see if anything new has been unlocked, and add one more \\\"strategy\\\" to the queue\\n        joinOpenInvitation(ns);\\n        scope++;\\n        ns.print(`Starting main work loop with scope: ${scope}...`);\\n\\n        const player = ns.getPlayer();\\n        if (player.factions.length > numJoinedFactions) { // If we've recently joined a new faction, reset our work scope\\n            scope = 0; // Back to basics until we've satisfied all highest-priority work\\n            numJoinedFactions = player.factions.length;\\n        }\\n\\n        if (gangFocus) {\\n            while (getKarma(ns)) {\\n                joinOpenInvitation(ns);\\n                if (player.isWorking && player.workType === 'Committing a crime') {\\n                    await ns.asleep(20);\\n                    continue;\\n                }\\n                let crimeStats = getBestCrime(ns, true);\\n                ns.commitCrime(crimeStats.name);\\n                ns.print(`Attempting to commit ${crimeStats.name}... @ ${crimeStats.rate.toPrecision(2)}karma/s`);\\n                await ns.sleep(crimeStats.time + 100);\\n            }\\n        }\\n\\n        // Remove Fulcrum from our \\\"EarlyFactionOrder\\\" if hack level is insufficient to backdoor their server\\n        let priorityFactions = crimeFocus ? preferredCrimeFactionOrder.slice() : preferredEarlyFactionOrder.slice();\\n        let fulcrummHackReq = ns.getServerRequiredHackingLevel(\\\"fulcrumassets\\\");\\n        if (player.hacking < fulcrummHackReq - 10) { // Assume that if we're within 10, we'll get there by the time we've earned the invite\\n            priorityFactions.splice(priorityFactions.findIndex(c => c === \\\"Fulcrum Secret Technologies\\\"), 1);\\n            ns.print(`Fulcrum faction server requires ${fulcrummHackReq} hack, so removing from our initial priority list for now.`);\\n        } // TODO: Otherwise, if we get Fulcrum, we have no need for a couple other company factions\\n        // Strategy 1: Tackle a consolidated list of desired faction order, interleaving simple factions and megacorporations\\n        const factionWorkOrder = firstFactions.concat(priorityFactions.filter(f => !firstFactions.includes(f) && !skipFactions.includes(f)))\\n            .filter(f => !softCompletedFactions.includes(f)); // Remove factions from our initial \\\"work order\\\" if we've bought all desired augmentations.\\n        for (const faction of factionWorkOrder) {\\n            let earnedNewFactionInvite = false;\\n            if (preferredCompanyFactionOrder.includes(faction)) // If this is a company faction, we need to work for the company first\\n                earnedNewFactionInvite = await workForMegacorpFactionInvite(ns, faction, true);\\n            // If new work was done for a company or their faction, restart the main work loop to see if we've since unlocked a higher-priority faction in the list\\n            if (earnedNewFactionInvite || await workForSingleFaction(ns, faction)) {\\n                scope--; // De-increment scope so that effective scope doesn't increase on the next loop (i.e. it will be incremented back to what it is now)\\n                break;\\n            }\\n        }\\n        if (scope < 1) continue;\\n\\n        // Strategy 2: Grind XP with all priority factions that are joined or can be joined, until every single one has desired REP\\n        for (const faction of factionWorkOrder)\\n            await workForSingleFaction(ns, faction);\\n        if (scope < 2) continue;\\n\\n        // Strategy 3: Work for any megacorporations not yet completed to earn their faction invites. Once joined, we don't lose these factions on reset.\\n        let megacorpFactions = preferredCompanyFactionOrder.filter(f => !skipFactions.includes(f));\\n        await workForAllMegacorps(ns, megacorpFactions, false);\\n        if (scope < 3) continue;\\n\\n        // Strategy 4: Work for megacorps again, but this time also work for the company factions once the invite is earned\\n        await workForAllMegacorps(ns, megacorpFactions, true);\\n        if (scope < 4) continue;\\n\\n        // Strategies 5+ now work towards getting an invite to *all factions in the game* (sorted by least-expensive final aug (correlated to easiest faction-invite requirement))\\n        let joinedFactions = player.factions; // In case our hard-coded list of factions is missing anything, merge it with the list of all factions\\n        let allIncompleteFactions = factionList.concat(joinedFactions.filter(f => !factionList.includes(f))).filter(f => !skipFactions.includes(f) && !completedFactions.includes(f))\\n            .sort((a, b) => mostExpensiveAugByFaction[a] - mostExpensiveAugByFaction[b]);\\n        // Strategy 5: For *all factions in the game*, try to earn an invite and work for rep until we can afford the most-expensive *desired* aug (or unlock donations, whichever comes first)\\n        for (const faction of allIncompleteFactions.filter(f => !softCompletedFactions.includes(f)))\\n            await workForSingleFaction(ns, faction);\\n        if (scope < 5) continue;\\n\\n        // Strategy 6: Revisit all factions until each has enough rep to unlock donations - so if we can't afford all augs this reset, at least we don't need to grind for rep on the next reset\\n        // For this, we reverse the order (ones with augs costing the most-rep to least) since these will take the most time to re-grind rep for if we can't buy them this reset.\\n        for (const faction of allIncompleteFactions.reverse())\\n            await workForSingleFaction(ns, faction, true);\\n        if (scope < 6) continue;\\n\\n        // Strategy 7:  Next, revisit all factions and grind XP until we can afford the most expensive aug, even if we could just buy the required rep next reset\\n        for (const faction of allIncompleteFactions.reverse()) // Re-reverse the sort order so we start with the easiest (cheapest) faction augs to complete\\n            await workForSingleFaction(ns, faction, true, true);\\n        if (scope < 7) continue;\\n\\n        // Strategy 8: Commit crimes for a while longer, then loop to see if there anything more we can do for the above factions\\n        if (noCrime) {\\n            ns.print(`--no-crime (or --no-focus): Crimes are disabled, so sleeping for a while (30s) then checking back on whether there's any work to be done...`);\\n            ns.sleep(30000);\\n        } else await crimeForKillsKarmaStats(ns, 0, -ns.heart.break() + 100, 0);\\n    }\\n}\\n\\n/** @param {NS} ns */\\nfunction joinOpenInvitation (ns) {\\n    let invitations = ns.checkFactionInvitations();\\n    for (let factionName of invitations) {\\n        // if (!skipFactions.includes(factionName))\\n        ns.joinFaction(factionName);\\n    }\\n}\\n\\n/** @param {NS} ns\\n * @returns {boolean}\\n */\\n//TODO merge with best killcrimesforstats\\nlet getKarma = (ns) => ns.heart.break() > -54000;\\nconst crimes = [\\\"shoplift\\\", \\\"rob store\\\", \\\"mug\\\", \\\"larceny\\\", \\\"deal drugs\\\", \\\"bond forgery\\\", \\\"traffick arms\\\", \\\"homicide\\\", \\\"grand theft auto\\\", \\\"kidnap\\\", \\\"assassinate\\\", \\\"heist\\\"]\\nexport function getBestCrime(ns, getKarma) {\\n    let doThisCrime = crimes[0];\\n    let bestCrimeStats = {};\\n    let crimeRate = -1;\\n    let crimeStats;\\n    for (const crime of crimes) {\\n        crimeStats = ns.getCrimeStats(crime);\\n        crimeStats.chance = ns.getCrimeChance(crime);\\n        crimeStats.rate = crimeStats.chance * (getKarma ? crimeStats.karma : crimeStats.money) / crimeStats.time * 1000;\\n\\n        //ns.print(crimeStats.rate.toPrecision(2));\\n        if (crimeStats.chance > .5 && crimeStats.rate > crimeRate) {\\n            crimeRate = crimeStats.rate;\\n            doThisCrime = crime;\\n            bestCrimeStats = crimeStats;\\n            //ns.print(`next crime ${doThisCrime} @ ${(getKarma ? crimeStats.rate.toPrecision(2) : ns.nFormat(crimeStats.rate, '0.0'))} ${(getKarma ? 'karma' : '$')}/s`);\\n        }\\n    }\\n    return {doThisCrime, ...bestCrimeStats};\\n}\\n\\n\\nconst factionList = Object.values(factions);\\n\\n/** @param {NS} ns\\n * @param {string} log\\n * @param {string} toastVariant\\n * Prints a message, and also toasts it! */\\nfunction announce(ns, log, toastVariant = 'info') {\\n    if (!ns.print || !ns.toast) return; // If an error is caught/logged because the script is being killed, ns becomes undefined\\n    ns.print(`${toastVariant}: ${log}`);\\n    ns.toast(log, toastVariant);\\n}\\n\\nconst requiredMoneyByFaction = {\\n    \\\"Tian Di Hui\\\": 1E6, \\\"Sector-12\\\": 15E6, \\\"Chongqing\\\": 20E6, \\\"New Tokyo\\\": 20E6, \\\"Ishima\\\": 30E6, \\\"Aevum\\\": 40E6, \\\"Volhaven\\\": 50E6,\\n    \\\"Slum Snakes\\\": 1E6, \\\"Silhouette\\\": 15E6, \\\"The Syndicate\\\": 10E6, \\\"The Covenant\\\": 75E9, \\\"Daedalus\\\": 100E9, \\\"Illuminati\\\": 150E9\\n};\\nconst requiredBackdoorByFaction = { \\\"CyberSec\\\": \\\"CSEC\\\", \\\"NiteSec\\\": \\\"avmnite-02h\\\", \\\"The Black Hand\\\": \\\"I.I.I.I\\\", \\\"BitRunners\\\": \\\"run4theh111z\\\", \\\"Fulcrum Secret Technologies\\\": \\\"fulcrumassets\\\" };\\nconst requiredHackByFaction = { \\\"Tian Di Hui\\\": 50, \\\"Netburners\\\": 80, \\\"Speakers for the Dead\\\": 100, \\\"The Dark Army\\\": 300, \\\"The Syndicate\\\": 200, \\\"The Covenant\\\": 850, \\\"Daedalus\\\": 2500, \\\"Illuminati\\\": 1500 };\\nconst requiredCombatByFaction = { \\\"Slum Snakes\\\": 30, \\\"Tetrads\\\": 75, \\\"Speakers for the Dead\\\": 300, \\\"The Dark Army\\\": 300, \\\"The Syndicate\\\": 200, \\\"The Covenant\\\": 850, \\\"Daedalus\\\": 1500, \\\"Illuminati\\\": 1200 };\\nconst requiredKarmaByFaction = { \\\"Slum Snakes\\\": 9, \\\"Tetrads\\\": 18, \\\"Silhouette\\\": 22, \\\"Speakers for the Dead\\\": 45, \\\"The Dark Army\\\": 45, \\\"The Syndicate\\\": 90 };\\nconst requiredKillsByFaction = { \\\"Speakers for the Dead\\\": 30, \\\"The Dark Army\\\": 5 };\\nconst reqHackingOrCombat = [\\\"Daedalus\\\"]; // Special case factions that require only hacking or combat stats, not both\\n\\n/** @param {NS} ns\\n * @param {string} factionName\\n */\\nasync function earnFactionInvite(ns, factionName) {\\n    const player = ns.getPlayer();\\n    const joinedFactions = player.factions;\\n    if (joinedFactions.includes(factionName)) return true;\\n    let invitations = ns.checkFactionInvitations();\\n    if (invitations.includes(factionName))\\n        return await tryJoinFaction(ns, factionName);\\n\\n    // Can't join certain factions for various reasons\\n    let reasonPrefix = `Cannot join faction \\\"${factionName}\\\" because`;\\n    let precludingFaction;\\n    if ([\\\"Aevum\\\", \\\"Sector-12\\\"].includes(factionName) && (precludingFaction = [\\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"].find(f => joinedFactions.includes(f))) ||\\n        [\\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\"].includes(factionName) && (precludingFaction = [\\\"Aevum\\\", \\\"Sector-12\\\", \\\"Volhaven\\\"].find(f => joinedFactions.includes(f))) ||\\n        [\\\"Volhaven\\\"].includes(factionName) && (precludingFaction = [\\\"Aevum\\\", \\\"Sector-12\\\", \\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\"].find(f => joinedFactions.includes(f))))\\n        return ns.print(`${reasonPrefix} precluding faction \\\"${precludingFaction}\\\"\\\" has been joined.`);\\n    // Skip factions for which money/hack level requirements aren't met. We do not attempt to \\\"train up\\\" for these things (happens automatically outside this script)\\n    let requirement;\\n    if ((requirement = requiredMoneyByFaction[factionName]) && player.money < requirement)\\n        return ns.print(`${reasonPrefix} you have insufficient money. Need: ${ns.nFormat(requirement, '0.0a')}, Have: ${ns.nFormat(player.money, '0.0a')}`);\\n    if ((requirement = requiredHackByFaction[factionName]) && player.hacking < requirement && !reqHackingOrCombat.includes(factionName))\\n        return ns.print(`${reasonPrefix} you have insufficient hack level. Need: ${requirement}, Have: ${player.hacking}`);\\n    // Note: This only complains if we have insufficient hack to backdoor this faction server. If we have sufficient hack, we will \\\"waitForInvite\\\" below assuming an external script is backdooring ASAP\\n    if ((requirement = requiredBackdoorByFaction[factionName]) && player.hacking < ns.getServerRequiredHackingLevel(requirement))\\n        return ns.print(`${reasonPrefix} you must fist backdoor ${requirement}, which needs hack: ${ns.getServerRequiredHackingLevel(requirement)}, Have: ${player.hacking}`);\\n    //await getNsDataThroughFile(ns, `ns.connect('fulcrumassets'); await ns.installBackdoor(); ns.connect(home)`, '/Temp/backdoor-fulcrum.txt') // TODO: Do backdoor if we can but haven't yet?\\n\\n    // See if we can take action to earn an invite for the next faction under consideration\\n    let workedForInvite = false;\\n    // If committing crimes can help us join a faction - we know how to do that\\n    let doCrime = false;\\n    if ((requirement = requiredKarmaByFaction[factionName]) && -ns.heart.break() < requirement) {\\n        ns.print(`${reasonPrefix} you have insufficient Karma. Need: ${-requirement}, Have: ${ns.heart.break()}`);\\n        doCrime = true;\\n    }\\n    if ((requirement = requiredKillsByFaction[factionName]) && player.numPeopleKilled < requirement) {\\n        ns.print(`${reasonPrefix} you have insufficient kills. Need: ${requirement}, Have: ${player.numPeopleKilled}`);\\n        doCrime = true;\\n    }\\n    let deficientStats = [{ name: \\\"str\\\", value: player.strength }, { name: \\\"str\\\", value: player.defense }, { name: \\\"str\\\", value: player.dexterity }, { name: \\\"str\\\", value: player.agility }];\\n    if ((requirement = requiredCombatByFaction[factionName]) &&\\n        (deficientStats.filter(stat => stat.value < requirement)).length > 0\\n        && !(reqHackingOrCombat.includes(factionName) && player.hacking >= requiredHackByFaction[factionName])) { // Some special-case factions (just 'Daedalus' for now) require *either* hacking *or* combat\\n        ns.print(`${reasonPrefix} you have insufficient combat stats. Need: ${requirement} of each, ` +\\n            `Have Str: ${player.strength}, Def: ${player.defense}, Dex: ${player.dexterity}, Agi: ${player.agility}`);\\n        const em = requirement / 25; // Hack: A rough heuristic suggesting we need an additional x1 multi for every ~50 pysical stat points we wish to grind out in a reasonable amount of time. TODO: Be smarter\\n        if (!crimeFocus && (player.strength_exp_mult * player.strength_mult < em || player.defense_exp_mult * player.defense_mult < em ||\\n            player.dexterity_exp_mult * player.dexterity_mult < em || player.agility_exp_mult * player.agility_mult < em))\\n            return ns.print(\\\"Physical mults / exp_mults are too low to increase stats in a reasonable amount of time\\\");\\n        doCrime = true; // TODO: There could be more efficient ways to gain combat stats than homicide, although at least this serves future crime factions\\n    }\\n    if (doCrime && noCrime)\\n        return ns.print(`--no-crime (or --no-focus): Doing crime to meet faction requirements is disabled.`);\\n    if (doCrime)\\n        workedForInvite = await crimeForKillsKarmaStats(ns, requiredKillsByFaction[factionName] || 0, requiredKarmaByFaction[factionName] || 0, requiredCombatByFaction[factionName] || 0);\\n\\n    // If travelling can help us join a faction - we can do that too\\n    if (['Tian Di Hui', 'Tetrads', 'The Dark Army'].includes(factionName))\\n        workedForInvite = await goToCity(ns, 'Chongqing');\\n    else if (['The Syndicate'].includes(factionName))\\n        workedForInvite = await goToCity(ns, 'Sector-12');\\n    else if ([\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"].includes(factionName))\\n        workedForInvite = await goToCity(ns, factionName);\\n    if (\\\"Silhouette\\\" === factionName) {\\n        ns.print(`You must be a CO (e.g. CEO/CTO) of a company to earn an invite to ${factionName}. This may take a while!`);\\n        let factionConfig = companySpecificConfigs.find(f => f.name === factionName); // We set up Silhouette with a \\\"company-specific-config\\\" so that we can work for an invite like any megacorporation faction.\\n        let companyNames = preferredCompanyFactionOrder.map(f => companySpecificConfigs.find(cf => cf.name === f)?.companyName || f);\\n        let favorByCompany = {};\\n        for (let companyName of companyNames) {\\n            favorByCompany[companyName] = ns.getCompanyFavor(companyName);\\n        }\\n        // Change the company to work for into whichever company we can get to CEO fastest with. Minimize needed_rep/rep_gain_rate. CEO job is at 3.2e6 rep, so (3.2e6-current_rep)/(100+favor).\\n        factionConfig.companyName = companyNames.sort((a, b) => (3.2e6 - ns.getCompanyRep(a)) / (100 + favorByCompany[a]) - (3.2e6 - ns.getCompanyRep(b)) / (100 + favorByCompany[b]))[0];\\n        while (!ns.joinFaction('${factionName}')) { await ns.asleep(1000); }\\n        workedForInvite = await workForMegacorpFactionInvite(ns, factionName, false); // Work until CTO and the external script joins this faction, triggering an exit condition.\\n    }\\n\\n    if (workedForInvite) // If we took some action to earn the faction invite, wait for it to come in\\n        return await waitForFactionInvite(ns, factionName);\\n    else\\n        return await tryJoinFaction(ns, factionName);\\n\\n}\\n\\n/** @param {NS} ns\\n * @param cityName\\n */\\nasync function goToCity(ns, cityName) {\\n    if (ns.getPlayer().city === cityName) {\\n        ns.print(`Already in city ${cityName}`);\\n        return true;\\n    }\\n    if (ns.travelToCity(cityName)) {\\n        lastActionRestart = Date.now();\\n        announce(ns, `Travelled to ${cityName}`, 'info');\\n        return true;\\n    }\\n    announce(ns, `Failed to travelled to ${cityName} for some reason...`, 'error');\\n    return false;\\n}\\n\\n/** @param {NS} ns\\n *  @param reqKills\\n *  @param reqKarma\\n *  @param reqStats\\n */\\nexport async function crimeForKillsKarmaStats(ns, reqKills, reqKarma, reqStats) {\\n    const bestCrimesByDifficulty = [\\\"heist\\\", \\\"assassinate\\\", \\\"homicide\\\", \\\"mug\\\"]; // Will change crimes as our success rate improves\\n    const chanceThresholds = [0.75, 0.9, 0.5, 0]; // Will change crimes once we reach this probability of success for better all-round gains\\n    let player = ns.getPlayer();\\n    let strRequirements = [];\\n    let forever = reqKills >= Number.MAX_SAFE_INTEGER || reqKarma >= Number.MAX_SAFE_INTEGER || reqStats >= Number.MAX_SAFE_INTEGER;\\n    if (reqKills) strRequirements.push(() => `${reqKills} kills (Have ${player.numPeopleKilled})`);\\n    if (reqKarma) strRequirements.push(() => `-${reqKarma} Karma (Have ${ns.heart.break()})`);\\n    if (reqStats) strRequirements.push(() => `${reqStats} of each combat stat (Have Str: ${player.strength}, Def: ${player.defense}, Dex: ${player.dexterity}, Agi: ${player.agility})`);\\n    let crime = '', lastCrime = '', lastStatusUpdateTime = 0, crimeCount = 0;\\n    while (forever || player.strength < reqStats || player.defense < reqStats || player.dexterity < reqStats || player.agility < reqStats || player.numPeopleKilled < reqKills || -ns.heart.break() < reqKarma) {\\n        joinOpenInvitation(ns);\\n        let crimeChances = {};\\n        for (let crime of bestCrimesByDifficulty) {\\n            crimeChances[crime] = ns.getCrimeChance(crime);\\n        }\\n        let needStats = player.strength < reqStats || player.defense < reqStats || player.dexterity < reqStats || player.agility < reqStats;\\n        let karma = -ns.heart.break();\\n        crime = (karma < 1 || player.strength < 10) && crimeCount < 10 ? \\\"mug\\\" : karma < 5 && player.strength > 20 && crimeCount < 20 && crimeChances[2] > 0.5 ? \\\"homicide\\\" : // Start with a few fast crimes to boost stats / crime chances if we haven't done much crime before\\n            (!needStats && (player.numPeopleKilled < reqKills || karma < reqKarma)) ? \\\"homicide\\\" : // If *all* we need now is kills or Karma, homicide is the fastest way to do that\\n                bestCrimesByDifficulty.find((c, index) => crimeChances[c] >= chanceThresholds[index]); // Otherwise, crime based on success chance vs relative reward (precomputed)\\n        if (lastCrime !== crime || (Date.now() - lastStatusUpdateTime) > statusUpdateInterval) {\\n            ns.print(`Committing \\\"${crime}\\\" (${(100 * crimeChances[crime]).toPrecision(3)}% success) ` + (forever ? 'forever...' : `until we reach ${strRequirements.map(r => r()).join(', ')}`));\\n            lastCrime = crime;\\n            lastStatusUpdateTime = Date.now();\\n        }\\n        ns.tail(); // Force a tail window open when auto-criming, or else it's very difficult to stop if it was accidentally closed.\\n        ns.commitCrime(crime);\\n        player = ns.getPlayer();\\n        while (player.isWorking) {\\n            await ns.sleep(20);\\n            player = ns.getPlayer();\\n        }\\n        crimeCount++;\\n    }\\n    ns.print(`Done committing crimes. Reached ${strRequirements.map(r => r()).join(', ')}`);\\n    return true;\\n}\\n\\n/** @param {NS} ns */\\nasync function studyForCharisma(ns) {\\n    await goToCity(ns, 'Volhaven');\\n    if (ns.universityCourse('ZB Institute Of Technology', 'Leadership')) {\\n        lastActionRestart = Date.now();\\n        announce(ns, `Started studying 'Leadership' at 'ZB Institute Of Technology`, 'success');\\n        return true;\\n    }\\n    announce(ns, `For some reason, failed to study at university (not in correct city?)`, 'error');\\n    return false;\\n}\\n\\n/** @param {NS} ns\\n * @param factionName\\n * @param maxWaitTime\\n */\\nexport async function waitForFactionInvite(ns, factionName, maxWaitTime = 20000) {\\n    ns.print(`Waiting for invite from faction \\\"${factionName}\\\"...`);\\n    let waitTime = maxWaitTime;\\n    let invitations;\\n    let joinedFactions;\\n    do {\\n        invitations = ns.checkFactionInvitations();\\n        joinedFactions = ns.getPlayer().factions;\\n        if (invitations.includes(factionName) || joinedFactions.includes(factionName))\\n            break;\\n        await ns.sleep(loopSleepInterval);\\n    } while (!invitations.includes(factionName) && !joinedFactions.includes(factionName) && (waitTime -= 1000) > 0);\\n    if (joinedFactions.includes(factionName)) // Another script may have auto-joined this faction before we could\\n        ns.print(`An external script has joined faction \\\"${factionName}\\\" for us.`);\\n    else if (!invitations.includes(factionName))\\n        return announce(ns, `Waited ${ns.tFormat(maxWaitTime)}, but still have not received an invite for faction: \\\"${factionName}\\\" (Requirements not met?)`, 'error');\\n    else if (!(await tryJoinFaction(ns, factionName)))\\n        return announce(ns, `Something went wrong. Earned \\\"${factionName}\\\" faction invite, but failed to join it.`, 'error');\\n    return true;\\n}\\n\\n/** @param {NS} ns\\n * @param factionName\\n */\\nexport async function tryJoinFaction(ns, factionName) {\\n    const joinedFactions = ns.getPlayer().factions;\\n    if (joinedFactions.includes(factionName))\\n        return true;\\n    if (!(ns.joinFaction(factionName)))\\n        return false;\\n    announce(ns, `Joined faction \\\"${factionName}\\\"`, 'success');\\n    return true;\\n}\\n\\n/** @param {NS} ns\\n * @param factionName\\n */\\nasync function getCurrentFactionFavour(ns, factionName) {\\n    return ns.getFactionFavor(factionName);\\n}\\n\\nlet lastFactionWorkStatus = \\\"\\\";\\n/** @param {NS} ns\\n * Checks how much reputation we need with this faction to either buy all augmentations or get 150 favour, then works to that amount.\\n * @param factionName\\n * @param forceUnlockDonations\\n * @param forceBestAug\\n * */\\nexport async function workForSingleFaction(ns, factionName, forceUnlockDonations = false, forceBestAug = false) {\\n    const repToFavour = (rep) => Math.ceil(25500 * 1.02 ** (rep - 1) - 25000);\\n    const factionConfig = factionSpecificConfigs.find(c => c.name === factionName);\\n    const forceUnlock = factionConfig?.forceUnlock || options.first.includes(factionName);\\n    let highestRepAug = forceBestAug ? mostExpensiveAugByFaction[factionName] : mostExpensiveDesiredAugByFaction[factionName];\\n    let startingFavor = await getCurrentFactionFavour(ns, factionName);\\n    let favorRepRequired = Math.max(0, repToFavour(repToDonate) - repToFavour(startingFavor));\\n    // When to stop grinding faction rep (usually ~467,000 to get 150 favour) Set this lower if there are no augs requiring that much REP\\n    let factionRepRequired = forceUnlockDonations ? favorRepRequired : Math.min(highestRepAug, favorRepRequired);\\n    if (highestRepAug === -1 && !forceUnlock)\\n        return ns.print(`All \\\"${factionName}\\\" augmentations are owned. Skipping unlocking faction...`);\\n    // Ensure we get an invite to location-based factions we might want / need\\n    if (!await earnFactionInvite(ns, factionName))\\n        return ns.print(`We are not yet part of faction \\\"${factionName}\\\". Skipping working for faction...`);\\n    if (startingFavor >= repToDonate) // If we have already got 150+ favor, we've unlocked donations - no need to grind for rep\\n        return ns.print(`Donations already unlocked for \\\"${factionName}\\\". You should buy access to augs. Skipping working for faction...`);\\n    // Cannot work for gang factions. Detect if this is our gang faction!\\n    if (factionName === playerGang || allGangFactions.includes(factionName))\\n        return ns.print(`\\\"${factionName}\\\" is an active gang faction. Cannot work for gang factions...`);\\n    if (forceUnlockDonations && mostExpensiveAugByFaction[factionName] < 0.2 * factionRepRequired) {// Special check to avoid pointless donation unlocking\\n        ns.print(`The last \\\"${factionName}\\\" aug is only ${mostExpensiveAugByFaction[factionName].toLocaleString()} rep, ` +\\n            `not worth grinding ${favorRepRequired.toLocaleString()} rep to unlock donations.`);\\n        forceUnlockDonations = false;\\n        factionRepRequired = highestRepAug = mostExpensiveAugByFaction[factionName];\\n    }\\n\\n    if (ns.getPlayer().workRepGained > 0) // If we're currently working faction work, stop to collect reputation and find out how much is remaining\\n        ns.stopAction();\\n    let currentReputation = ns.getFactionRep(factionName);\\n    // If the best faction aug is within 10% of our current rep, grind all the way to it so we can get it immediately, regardless of our current rep target\\n    if (forceBestAug || highestRepAug <= 1.1 * Math.max(currentReputation, factionRepRequired)) {\\n        forceBestAug = true;\\n        factionRepRequired = Math.max(highestRepAug, factionRepRequired);\\n    }\\n\\n    if (currentReputation >= factionRepRequired)\\n        return ns.print(`Faction \\\"${factionName}\\\" required rep of ${factionRepRequired.toLocaleString()} has already been attained ` +\\n            `(Current rep: ${Math.round(currentReputation).toLocaleString()}). Skipping working for faction...`)\\n\\n    ns.print(`Faction \\\"${factionName}\\\" Highest Aug Req: ${highestRepAug.toLocaleString()}, Current Favor (${startingFavor}/${repToDonate}) Req: ${favorRepRequired.toLocaleString()}`);\\n    if (options['invites-only'])\\n        return ns.print(`--invites-only Skipping working for faction...`);\\n\\n    let lastStatusUpdateTime = 0;\\n    while ((currentReputation = ns.getFactionRep(factionName)) < factionRepRequired) {\\n        joinOpenInvitation(ns);\\n        const factionWork = await detectBestFactionWork(ns, factionName); // Before each loop - determine what work gives the most rep/second for our current stats\\n        if (ns.workForFaction(factionName, factionWork, shouldFocusAtWork)) {\\n            lastActionRestart = Date.now();\\n            ns.tail(); // Force a tail window open to help the user kill this script if they accidentally closed the tail window and don't want to keep studying\\n        } else {\\n            announce(ns, `Something went wrong, failed to start \\\"${factionWork}\\\" work for faction \\\"${factionName}\\\" (Is gang faction, or not joined?)`, 'error');\\n            break;\\n        }\\n        let status = `Doing '${factionWork}' work for \\\"${factionName}\\\" until ${factionRepRequired.toLocaleString()} rep.`;\\n        if (lastFactionWorkStatus !== status) {\\n            // if (lastFactionWorkStatus !== status || (Date.now() - lastStatusUpdateTime) > statusUpdateInterval) {\\n            // ns.print((lastFactionWorkStatus = status) + ` Currently at ${Math.round(currentReputation).toLocaleString()}, earning ${(ns.getPlayer().workRepGainRate * 5).toFixed(2)} rep/sec.`);\\n            ns.print(lastFactionWorkStatus = status);\\n            lastStatusUpdateTime = Date.now();\\n        }\\n        await ns.sleep(restartWorkInterval);\\n        // Detect our rep requirement decreasing (e.g. if we exported for our daily +1 faction rep)\\n        let currentFavor = await getCurrentFactionFavour(ns, factionName);\\n        if (currentFavor > startingFavor && !forceBestAug) {\\n            favorRepRequired = Math.max(0, repToFavour(repToDonate) - repToFavour(startingFavor));\\n            factionRepRequired = forceUnlockDonations ? favorRepRequired : Math.min(highestRepAug, favorRepRequired);\\n        }\\n        // If we explicitly stop working, we immediately get our updated faction rep, otherwise it lags by 1 loop (until after next time we call workForFaction)\\n        if (currentReputation + ns.getPlayer().workRepGained >= factionRepRequired) // Note: Actual work rep gained will be subject to early cancellation policy\\n            ns.stopAction(); // We're close - stop working so our current rep is accurate when we check the while loop condition\\n    }\\n    if (currentReputation >= factionRepRequired)\\n        ns.print(`Attained ${Math.round(currentReputation).toLocaleString()} rep with \\\"${factionName}\\\" (needed ${factionRepRequired.toLocaleString()}).`);\\n    return currentReputation >= factionRepRequired;\\n}\\n\\n/** @param {NS} ns\\n * @param factionName\\n * Try all work types and see what gives the best rep gain with this faction! */\\nasync function detectBestFactionWork(ns, factionName) {\\n    let bestWork, bestRepRate = 0;\\n    for (const work of [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"]) {\\n        //if (!await getNsDataThroughFile(ns, `ns.workForFaction('${factionName}', '${work}') === true); ns.setFocus(${shouldFocusAtWork}`, '/Temp/work-for-faction.txt'))\\n        if (!ns.workForFaction(factionName, work, shouldFocusAtWork)) {\\n            // ns.print(`\\\"${factionName}\\\" work \\\"${work}\\\" not supported.`);\\n            continue; // This type of faction work must not be supported\\n        }\\n        const currentRepGainRate = ns.getPlayer().workRepGainRate;\\n        // ns.print(`\\\"${factionName}\\\" work ${work} provides ${currentRepGainRate} rep rate`);\\n        if (currentRepGainRate > bestRepRate) {\\n            bestRepRate = currentRepGainRate;\\n            bestWork = work;\\n        }\\n    }\\n    return bestWork || 'hacking'; // || hacking bug is fixed problem with gang and working nitesec\\n}\\n\\n/** @param {NS} ns\\n *  @param {Array<string>} megacorpFactionsInPreferredOrder - The list of all corporate factions to work for, sorted in the order they should be worked for\\n *  @param alsoWorkForCompanyFactions\\n *  @param oneCompanyFactionAtATime\\n * */\\nexport async function workForAllMegacorps(ns, megacorpFactionsInPreferredOrder, alsoWorkForCompanyFactions, oneCompanyFactionAtATime) {\\n    let player = ns.getPlayer();\\n    if (player.hacking < 225)\\n        return ns.print(`Hacking Skill ${player.hacking} is to low to work for any megacorps (min req. 225).`);\\n    let joinedCompanyFactions = player.factions.filter(f => megacorpFactionsInPreferredOrder.includes(f)); // Company factions we've already joined\\n    if (joinedCompanyFactions.length > 0)\\n        ns.print(`${joinedCompanyFactions.length} companies' factions have already been joined: ${joinedCompanyFactions.join(\\\", \\\")}`)\\n    let doFactionWork = alsoWorkForCompanyFactions && oneCompanyFactionAtATime;\\n    // Earn each obtainable megacorp faction invite, and optionally also grind faction rep\\n    for (const factionName of megacorpFactionsInPreferredOrder) {\\n        if ((await workForMegacorpFactionInvite(ns, factionName, doFactionWork)) && doFactionWork)\\n            await workForSingleFaction(ns, factionName);\\n    }\\n    if (alsoWorkForCompanyFactions && !oneCompanyFactionAtATime) { // If configured, start grinding rep with company factions we've joined\\n        ns.print(`Done working for companies, now working for all incomplete company factions...`);\\n        for (const factionName of megacorpFactionsInPreferredOrder)\\n            await workForSingleFaction(ns, factionName);\\n    }\\n}\\n\\n/** @param {NS} ns\\n * @param factionName\\n * @param waitForInvite\\n */\\nexport async function workForMegacorpFactionInvite(ns, factionName, waitForInvite) {\\n    const companyConfig = companySpecificConfigs.find(c => c.name === factionName); // For anything company-specific\\n    const companyName = companyConfig?.companyName || factionName; // Name of the company that gives the faction (same for all but Fulcrum)\\n    const statModifier = companyConfig?.statModifier || 0; // How much e.g. Hack / Cha is needed for a promotion above the base requirement for the job\\n    const repRequiredForFaction = companyConfig?.repRequiredForFaction || 200000; // Required to unlock the faction\\n\\n    let player = ns.getPlayer();\\n    if (player.factions.includes(factionName))\\n        return false; // Only return true if we did work to earn a new faction invite\\n    if ((ns.checkFactionInvitations()).includes(factionName))\\n        return waitForInvite ? await waitForFactionInvite(ns, factionName) : false;\\n    // TODO: In some scenarios, the best career path may require combat stats, this hard-codes the optimal path for hack stats\\n    const itJob = jobs.find(j => j.name === \\\"it\\\");\\n    const softwareJob = jobs.find(j => j.name === \\\"software\\\");\\n    if (itJob.reqHack[0] + statModifier > player.hacking) // We don't qualify to work for this company yet if we can't meet IT qualifications (lowest there are)\\n        return ns.print(`Cannot yet work for \\\"${companyName}\\\": Need Hack ${itJob.reqHack[0] + statModifier} to get hired (current Hack: ${player.hacking});`);\\n    ns.print(`Going to work for Company \\\"${companyName}\\\" next...`)\\n    let currentReputation, currentRole = \\\"\\\", currentJobTier = -1; // TODO: Derive our current position and promotion index based on player.jobs[companyName]\\n    let lastStatusUpdateTime = 0, lastStatus = \\\"\\\";\\n    let studying = false, working = false;\\n    while (((currentReputation = ns.getCompanyRep(companyName)) < repRequiredForFaction) && !player.factions.includes(factionName)) {\\n        joinOpenInvitation(ns);\\n        player = ns.getPlayer();\\n        // Determine the next promotion we're striving for (the sooner we get promoted, the faster we can earn company rep)\\n        const getTier = job => Math.min(job.reqRep.filter(r => r <= currentReputation).length, job.reqHack.filter(h => h <= player.hacking).length, job.reqCha.filter(c => c <= player.charisma).length) - 1;\\n        // It's generally best to hop back-and-forth between it and software engineer career paths (rep gain is about the same, but better money from software)\\n        const qualifyingItTier = getTier(itJob), qualifyingSoftwareTier = getTier(softwareJob);\\n        const bestJobTier = Math.max(qualifyingItTier, qualifyingSoftwareTier); // Go with whatever job promotes us higher\\n        const bestRoleName = qualifyingItTier > qualifyingSoftwareTier ? \\\"it\\\" : \\\"software\\\"; // If tied for qualifying tier, go for software\\n        if (currentJobTier < bestJobTier || currentRole !== bestRoleName) { // We are ready for a promotion, ask for one!\\n            if (ns.applyToCompany(companyName, bestRoleName))\\n                announce(ns, `Successfully applied to \\\"${companyName}\\\" for a '${bestRoleName}' Job or Promotion`, 'success');\\n            else if (currentJobTier !== -1) // Unless we just restarted \\\"work-for-factions\\\" and lost track of our current job, this is an error\\n                announce(ns, `Application to \\\"${companyName}\\\" for a '${bestRoleName}' Job or Promotion failed.`, 'error');\\n            currentJobTier = bestJobTier; // API to apply for a job immediately gives us the highest tier we qualify for\\n            currentRole = bestRoleName;\\n            player = ns.getPlayer();\\n        }\\n        const currentJob = player.jobs[companyName];\\n        const nextJobTier = currentRole === \\\"it\\\" ? currentJobTier : currentJobTier + 1;\\n        const nextJobName = currentRole === \\\"it\\\" || nextJobTier >= itJob.reqRep.length ? \\\"software\\\" : \\\"it\\\";\\n        const nextJob = nextJobName === \\\"it\\\" ? itJob : softwareJob;\\n        const requiredHack = nextJob.reqHack[nextJobTier] === 0 ? 0 : nextJob.reqHack[nextJobTier] + statModifier; // Stat modifier only applies to non-zero reqs\\n        const requiredCha = nextJob.reqCha[nextJobTier] === 0 ? 0 : nextJob.reqCha[nextJobTier] + statModifier; // Stat modifier only applies to non-zero reqs\\n        const requiredRep = nextJob.reqRep[nextJobTier]; // No modifier on rep requirements\\n        let status = `Next promotion ('${nextJobName}' #${nextJobTier}) at Hack:${requiredHack} Cha:${requiredCha} Rep:${requiredRep?.toLocaleString()}` +\\n            (repRequiredForFaction > nextJob.reqRep[nextJobTier] ? '' : `, but we won't need it, because we'll sooner hit ${repRequiredForFaction.toLocaleString()} reputation to unlock company faction \\\"${factionName}\\\"!`);\\n        // We should only study at university if every other requirement is met but Charisma\\n        if (currentReputation >= requiredRep && player.hacking >= requiredHack && player.charisma < requiredCha && !noStudying) {\\n            status = `Studying at ZB university until Cha reaches ${requiredCha}...\\\\n` + status;\\n            if (studying && player.className !== 'taking a Leadership course' && player.className !== 'Leadership' /* In case className is made more intuitive in the future */) {\\n                announce(ns, `Leadership studies were interrupted. player.className=\\\"${player.className}\\\" Restarting in 5 seconds...`, 'warning');\\n                studying = false; // If something external has interrupted our studies, take note\\n                ns.tail(); // Force a tail window open to help the user kill this script if they accidentally closed the tail window and don't want to keep studying\\n            }\\n            if (!studying) { // Study at ZB university if CHA is the limiter.\\n                if (await studyForCharisma(ns))\\n                    working = !(studying = true);\\n            }\\n        } else if (studying) { // If we no longer need to study and we currently are, turn off study mode and get back to work!\\n            studying = false;\\n            continue; // Restart the loop so we refresh our promotion index and apply for a promotion before working more\\n        }\\n\\n        // Regardless of the earlier promotion logic, always try for a promotion to make sure we don't miss a promotion due to buggy logic\\n        if (ns.applyToCompany(companyName, currentRole))\\n            announce(ns, `Unexpected '${currentRole}' promotion from ${currentJob} to \\\"${ns.getPlayer().jobs[companyName]}. Promotion logic must be off...\\\"`, 'warning');\\n        // TODO: If we ever get rid of the below periodic restart-work, we will need to monitor for interruptions with player.workType == e.g. \\\"Work for Company\\\"\\n        if (!studying && (!working || (Date.now() - lastActionRestart >= restartWorkInterval) /* We must periodically restart work to collect Rep Gains */)) {\\n            // Work for the company (assume daemon is grinding hack XP as fast as it can, so no point in studying for that)\\n            //if (await getNsDataThroughFile(ns, `ns.workForCompany('${companyName}')); ns.setFocus(${shouldFocusAtWork}`, '/Temp/work-for-company.txt')) {\\n            if (ns.workForCompany(companyName, shouldFocusAtWork)) {\\n                lastActionRestart = Date.now();\\n                working = true;\\n            } else {\\n                announce(ns, `Something went wrong, failed to start working for company \\\"${companyName}\\\".`, 'error');\\n                break;\\n            }\\n        }\\n        status = `Currently a \\\"${player.jobs[companyName]}\\\" ('${currentRole}' #${currentJobTier}) for \\\"${companyName}\\\"`;\\n        if (lastStatus !== status) {\\n            player = ns.getPlayer();\\n            ns.print(status + ` earning ${(player.workRepGainRate * 5).toFixed(2)} rep/sec.\\\\n` +\\n                `${status}\\\\nCurrent player stats are Hack:${player.hacking} ${player.hacking >= (requiredHack || 0) ? '✓' : '✗'} ` +\\n                `Cha:${player.charisma} ${player.charisma >= (requiredCha || 0) ? '✓' : '✗'} ` +\\n                `Rep:${Math.round(currentReputation).toLocaleString()} ${currentReputation >= (requiredRep || repRequiredForFaction) ? '✓' : '✗'}`);\\n            lastStatus = status;\\n        }\\n        await ns.sleep(loopSleepInterval); // Sleep now and wake up periodically and stop working to check our stats / reputation progress\\n    }\\n    // Return true if we succeeded, false otherwise.\\n    if (currentReputation >= repRequiredForFaction) {\\n        ns.print(`Attained ${repRequiredForFaction.toLocaleString()} rep with \\\"${companyName}\\\".`);\\n        if (!player.factions.includes(factionName) && waitForInvite)\\n            return await waitForFactionInvite(ns, factionName);\\n        return true;\\n    }\\n    ns.print(`Stopped working for \\\"${companyName}\\\" repRequiredForFaction: ${repRequiredForFaction.toLocaleString()} ` +\\n        `currentReputation: ${Math.round(currentReputation).toLocaleString()} inFaction: ${player.factions.includes(factionName)}`);\\n    return false;\\n}\",\"filename\":\"workForFaction.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"augments.js\",\"url\":\"blob:https://danielyxie.github.io/8338ff39-d16a-48a2-8ae5-8822e4576bd1\",\"moduleSequenceNumber\":1842574},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/923eb381-999e-4b56-860b-8d74c60f116d\",\"moduleSequenceNumber\":1842562},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/bae95f01-5112-47d8-8869-405d306e35ea\",\"moduleSequenceNumber\":1842545},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/f021bffa-b174-4dcc-9b46-affc31b70d25\",\"moduleSequenceNumber\":1842546},{\"filename\":\"workForFaction.js\",\"url\":\"blob:https://danielyxie.github.io/205d8de5-b7ed-4b6d-a976-3544d4bcf5ef\",\"moduleSequenceNumber\":1842698}],\"dependents\":[],\"ramUsage\":41.3,\"server\":\"home\",\"moduleSequenceNumber\":2080336,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.joinFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.getCrimeStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getCrimeChance\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getCompanyFavor\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.getCompanyRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.universityCourse\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.getFactionFavor\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.workForFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.applyToCompany\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.workForCompany\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const factions = {Illuminati:\\\"Illuminati\\\", Daedalus:\\\"Daedalus\\\", TheCovenant:\\\"The Covenant\\\", ECorp:\\\"ECorp\\\", MegaCorp:\\\"MegaCorp\\\",\\n    BachmanAssociates:\\\"Bachman & Associates\\\",BladeIndustries:\\\"Blade Industries\\\", NWO:\\\"NWO\\\", Clarke:\\\"Clarke Incorporated\\\",\\n    OmniTek:\\\"OmniTek Incorporated\\\", FourSigma:\\\"Four Sigma\\\", KuaiGong:\\\"KuaiGong International\\\", Fulcrum:\\\"Fulcrum Secret Technologies\\\",\\n    BitRunners:\\\"BitRunners\\\", TheBlackHand:\\\"The Black Hand\\\", NiteSec:\\\"NiteSec\\\", Aevum:\\\"Aevum\\\", Chongqing:\\\"Chongqing\\\", Ishima:\\\"Ishima\\\",\\n    NewTokyo:\\\"New Tokyo\\\", Sector12:\\\"Sector-12\\\", Volhaven:\\\"Volhaven\\\", SpeakersfortheDead:\\\"Speakers for the Dead\\\", TheDarkArmy:\\\"The Dark Army\\\",\\n    TheSyndicate:\\\"The Syndicate\\\", Silhouette:\\\"Silhouette\\\", Tetrads:\\\"Tetrads\\\", SlumSnakes:\\\"Slum Snakes\\\", Netburners:\\\"Netburners\\\",\\n    TianDiHui:\\\"Tian Di Hui\\\", CyberSec:\\\"CyberSec\\\", Bladeburners:\\\"Bladeburners\\\"};\\nexport const factionsWork = {\\\"Illuminati\\\":[\\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Daedalus\\\":[\\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"The Covenant\\\":[\\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"ECorp\\\":[\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"MegaCorp\\\":[\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Bachman & Associates\\\":[\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Blade Industries\\\":[\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"NWO\\\":[\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Clarke Incorporated\\\":[\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"OmniTek Incorporated\\\":[\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Four Sigma\\\":[\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"KuaiGong International\\\":[\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Fulcrum Secret Technologies\\\":[\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"BitRunners\\\":[\\\"hacking contracts\\\"],\\n    \\\"The Black Hand\\\":[\\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"NiteSec\\\":[\\\"hacking contracts\\\"],\\n    \\\"Aevum\\\":[\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Chongqing\\\":[\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Ishima\\\":[\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"New Tokyo\\\":[\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Sector-12\\\":[\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Volhaven\\\":[\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Speakers for the Dead\\\":[\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"The Dark Army\\\":[\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"The Syndicate\\\":[\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Silhouette\\\":[\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Tetrads\\\":[\\\"security\\\", \\\"field\\\"],\\n    \\\"Slum Snakes\\\":[\\\"security\\\", \\\"field\\\"],\\n    \\\"Netburners\\\":[\\\"hacking contracts\\\"],\\n    \\\"Tian Di Hui\\\":[\\\"security\\\", \\\"hacking contracts\\\"],\\n    \\\"CyberSec\\\":[\\\"hacking contracts\\\"],\\n    \\\"Bladeburners\\\":[]};\\nexport const allGangFactions = [\\\"Slum Snakes\\\", \\\"Tetrads\\\", \\\"The Black Hand\\\", \\\"The Syndicate\\\", \\\"The Dark Army\\\", \\\"Speakers for the Dead\\\", \\\"NiteSec\\\"];\\n\\nlet augmentationNames;\\n/** @param {NS} ns **/\\nexport async function initAugments(ns) {\\n    await writeAugmentsPerFaction(ns);\\n    await ns.write(`/tmp/getOwnedAugmentations.txt`, JSON.stringify(ns.getOwnedAugmentations(true), null, 2), 'w');\\n    await initAllAugmentRepReq(ns);\\n}\\n/** @param {NS} ns **/\\nasync function writeAugmentsPerFaction(ns){\\n    const factionNames = Object.values(factions);\\n    const data = {};\\n    for (let factionName of factionNames) {\\n        data[factionName] = ns.getAugmentationsFromFaction(factionName);\\n    }\\n    augmentationNames = [...new Set(Object.values(data).flat())]\\n    await ns.write(`/tmp/factionAugs.txt`, JSON.stringify(data, null, 2), 'w');\\n}\\n/** @param {NS} ns **/\\nexport function getAugmentsPerFaction(ns){\\n    return JSON.parse(ns.read(`/tmp/factionAugs.txt`));\\n}\\nexport function getAugmentationNames() {\\n    return augmentationNames;\\n}\\nconst augRepReq = {};\\nconst augStats= {};\\n/** @param {NS} ns **/\\nasync function initAllAugmentRepReq(ns) {\\n    for(let augmentationName of getAugmentationNames()) {\\n        augRepReq[augmentationName] = ns.getAugmentationRepReq(augmentationName);\\n        augStats[augmentationName] = ns.getAugmentationStats(augmentationName);\\n    }\\n    await ns.write(`/tmp/augRepReq.txt`, JSON.stringify(augRepReq, null, 2), 'w');\\n    await ns.write(`/tmp/augStats.txt`, JSON.stringify(augStats, null, 2), 'w');\\n}\\nexport const getAllAugmentRepReq = (ns) => JSON.parse(ns.read(`/tmp/augRepReq.txt`));\\nexport const getAllAugmentStats = (ns) => JSON.parse(ns.read(`/tmp/augStats.txt`));\\n\\n/** @param {NS} ns **/\\nexport function getOwnedAugmentationsStatic(ns) {\\n    return JSON.parse(ns.read(`/tmp/getOwnedAugmentations.txt`));\\n}\\n\\n// await getNsDataThroughFile(ns, 'Object.keys(ns.gang.getOtherGangInformation())')\",\"filename\":\"augments.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":19.1,\"server\":\"home\",\"moduleSequenceNumber\":2080339,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {boxTailSingleton, sleevesPortNumber} from \\\"./utils\\\";\\nimport {getAugmentsPerFaction, factionsWork, allGangFactions} from \\\"./augments\\\";\\n\\nconst interval = 5000; // Update (tick) this often\\nconst minTaskWorkTime = 29000; // Sleeves assigned a new task should stick to it for at least this many milliseconds\\nlet workByFaction; // Cache of crime statistics and which factions support which work\\nlet task, lastStatusUpdateTime, lastPurchaseTime, lastPurchaseStatusUpdate, availableAugs, cacheExpiry, lastReassignTime; // State by sleeve\\nlet playerInfo, numSleeves;\\nlet options;\\n\\nconst argsSchema = [\\n    ['min-shock-recovery', 97], // Minimum shock recovery before attempting to train or do crime (Set to 100 to disable, 0 to recover fully)\\n    ['shock-recovery', 0.05], // Set to a number between 0 and 1 to devote that ratio of time to periodic shock recovery (until shock is at 0)\\n    ['crime', null], // If specified, sleeves will perform only this crime regardless of stats\\n    ['aug-budget', 0.1], // Spend up to this much of current cash on augs per tick (Default is high, because these are permanent for the rest of the BN)\\n    ['buy-cooldown', 60 * 1000], // Must wait this may milliseconds before buying more augs for a sleeve\\n    ['min-aug-batch', 20], // Must be able to afford at least this many augs before we pull the trigger (or fewer if buying all remaining augs)\\n];\\n\\nexport function autocomplete(data, _) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    options = ns.flags(argsSchema);\\n    ns.disableLog('getServerMoneyAvailable');\\n    ns.disableLog('asleep');\\n    boxTailSingleton(ns, 'sleeves', '⛹⛹⛹⛹⛹⛹⛹⛹', '200px');\\n    // Ensure the global state is reset (e.g. after entering a new bitnode)\\n    task = [];\\n    lastStatusUpdateTime = [];\\n    lastPurchaseTime = [];\\n    lastPurchaseStatusUpdate = [];\\n    availableAugs = [];\\n    cacheExpiry = [];\\n    lastReassignTime = [];\\n    workByFaction = {};\\n    // Start the main loop\\n    while (true) {\\n        try { await mainLoop(ns); }\\n        catch (error) {\\n            ns.print(`WARNING: An error was caught (and suppressed) in the main loop: ${JSON.stringify(error)}`, false, 'warning');\\n        }\\n        await ns.asleep(interval);\\n    }\\n}\\n\\n/** @param {NS} ns\\n * Main loop that gathers data, checks on all sleeves, and manages them. */\\nasync function mainLoop(ns) {\\n    ns.clearLog();\\n    try {\\n        const sleeveData = JSON.parse(ns.read('/tmp/sleeves_static.txt'));\\n        numSleeves = sleeveData.getNumSleeves;\\n    } catch { }\\n    // Update info\\n    let readMore= true;\\n    let portData = [];\\n    while (readMore) {\\n        let portRead = ns.readPort(sleevesPortNumber);\\n        if ('NULL PORT DATA' !== portRead) {\\n            portData.push(portRead);\\n        } else {\\n            readMore = false;\\n        }\\n    }\\n    // TODO assign sleeves to get reps from port data.\\n    numSleeves = numSleeves || 8;\\n    playerInfo = ns.getPlayer();\\n    let budget = playerInfo.money * options['aug-budget'];\\n\\n    // Update all sleeve stats and loop over all sleeves to do some individual checks and task assignments\\n    let sleeveStats = [];\\n    let sleeveInfo = [];\\n    for (let i = 0; i < numSleeves; i++) {\\n        sleeveStats.push(ns.sleeve.getSleeveStats(i));\\n        sleeveInfo.push(ns.sleeve.getInformation(i));\\n    }\\n    for (let i = 0; i < numSleeves; i++) {\\n        let sleeve = { ...sleeveStats[i], ...sleeveInfo[i] }; // For convenience, merge all sleeve stats/info into one object\\n        // MANAGE SLEEVE AUGMENTATIONS\\n        if (sleeve.shock === 0) // No augs are available augs until shock is 0\\n            budget -= await manageSleeveAugs(ns, i, budget);\\n\\n        // ASSIGN SLEEVE TASK\\n        // These tasks should be immediately discontinued in certain conditions, even if it hasn't been 'minTaskWorkTime'\\n        if (task[i] === \\\"recover from shock\\\" && sleeve.shock === 0 ||\\n            task[i] === \\\"synchronize\\\" && sleeve.sync === 100)\\n            lastReassignTime[i] = 0;\\n        // Otherwise, don't change tasks if we've changed tasks recently (avoids e.g. disrupting long crimes too frequently)\\n        if (Date.now() - (lastReassignTime[i] || 0) < minTaskWorkTime) continue;\\n\\n        // Decide what we think the sleeve should be doing for the next little while\\n        let [designatedTask, command, args, statusUpdate] = await pickSleeveTask(ns, i, sleeve);\\n\\n        // Start the clock, this sleeve should stick to this task for minTaskWorkTime\\n        lastReassignTime[i] = Date.now();\\n        // Set the sleeve's new task if it's not the same as what they're already doing.\\n        if (task[i] !== designatedTask)\\n            await setSleeveTask(ns, i, designatedTask, command, args);\\n\\n        // For certain tasks, log a periodic status update.\\n        if (statusUpdate && Date.now() - (lastStatusUpdateTime[i] ?? 0) > minTaskWorkTime) {\\n            ns.print(`INFO: Sleeve ${i} is ${statusUpdate} `);\\n            lastStatusUpdateTime[i] = Date.now();\\n        }\\n    }\\n}\\n\\n/** @param {NS} ns\\n * @param i\\n * @param budget\\n * Purchases augmentations for sleeves */\\nasync function manageSleeveAugs(ns, i, budget) {\\n    // Retrieve and cache the set of available sleeve augs (cached temporarily, but not forever, in case rules around this change)\\n    if (availableAugs[i] == null || Date.now() > cacheExpiry[i]) {\\n        cacheExpiry[i] = Date.now() + 60000;\\n        availableAugs[i] = (ns.sleeve.getSleevePurchasableAugs(i)).sort((a, b) => a.cost - b.cost);\\n    }\\n    if (availableAugs[i].length === 0) return 0;\\n\\n    const cooldownLeft = Math.max(0, options['buy-cooldown'] - (Date.now() - (lastPurchaseTime[i] || 0)));\\n    const [batchCount, batchCost] = availableAugs[i].reduce(([n, c], aug) => c + aug.cost <= budget ? [n + 1, c + aug.cost] : [n, c], [0, 0]);\\n    const purchaseUpdate = `sleeve ${i} can afford ${batchCount.toFixed(0).padStart(2)}/${availableAugs[i].length.toFixed(0).padEnd(2)} remaining augs ` +\\n        `(cost ${ns.nFormat(batchCost, '0.0a')} of ${ns.nFormat(availableAugs[i].reduce((t, aug) => t + aug.cost, 0), '0.0a')}).`;\\n    if (lastPurchaseStatusUpdate[i] !== purchaseUpdate)\\n        ns.print(`INFO: With budget ${ns.nFormat(budget, '0.0a')}, ${(lastPurchaseStatusUpdate[i] = purchaseUpdate)} ` +\\n            `(Min batch size: ${options['min-aug-batch']}, Cooldown: ${ns.tFormat(cooldownLeft)})`);\\n    if (cooldownLeft === 0 && batchCount > 0 && ((batchCount >= availableAugs[i].length - 1) || batchCount >= options['min-aug-batch'])) { // Don't require the last aug it's so much more expensive\\n        let strAction = `Purchase ${batchCount} augmentations for sleeve ${i} at total cost of ${ns.nFormat(batchCost, '0.0.a')}`;\\n        let toPurchase = availableAugs[i].splice(0, batchCount);\\n        // if (await getNsDataThroughFile(ns, `ns.args.slice(1).reduce((s, aug) => s && ns.sleeve.purchaseSleeveAug(ns.args[0], aug), true)`,\\n        //     '/Temp/sleeve-purchase.txt', [i, ...toPurchase.map(a => a.name)])) {\\n        if (await [i, ...toPurchase.map(a => a.name)].slice(1).reduce((s, aug) => s && ns.sleeve.purchaseSleeveAug(i, aug), true)) {\\n            ns.print(`SUCCESS: ${strAction}`, true, 'success');\\n        } else ns.print(`ERROR: Failed to ${strAction}`, true, 'error');\\n        lastPurchaseTime[i] = Date.now();\\n        return batchCost; // Even if we think we failed, return the predicted cost so if the purchase did go through, we don't end up over-budget\\n    }\\n    return 0;\\n}\\n\\n/** @param {NS} ns\\n * @param i\\n * @param sleeve\\n * Picks the best task for a sleeve, and returns the information to assign and give status updates for that task. */\\nasync function pickSleeveTask(ns, i, sleeve) {\\n    // Must synchronize first iif you haven't maxed memory on every sleeve.\\n    if (sleeve.sync < 100)\\n        return [\\\"synchronize\\\", ns.sleeve.setToSynchronize, [i], `syncing... ${sleeve.sync.toFixed(2)}%`];\\n    // Opt to do shock recovery if above the --min-shock-recovery threshold, or if above 0 shock, with a probability of --shock-recovery\\n    if (sleeve.shock > options['min-shock-recovery'] || sleeve.shock > 0 && options['shock-recovery'] > 0 && Math.random() < options['shock-recovery'])\\n        return [\\\"recover from shock\\\", ns.sleeve.setToShockRecovery, [i], `recovering from shock... ${sleeve.shock.toFixed(2)}%`];\\n    // If player is currently working for faction or company rep, sleeves 0 can help him out (Note: Only one sleeve can work for a faction)\\n    if (i === 0 && playerInfo.isWorking && playerInfo.workType === \\\"Working for Faction\\\") {\\n        // TODO: We should be able to borrow logic from work-for-factions.js to have more sleeves work for useful factions / companies\\n        // We'll cycle through work types until we find one that is supported. TODO: Auto-determine the most productive faction work to do.\\n        const faction = playerInfo.currentWorkFactionName;\\n        const work = factionsWork[faction][0];\\n        return [`work for faction '${faction}' (${work})`, ns.sleeve.setToFactionWork, [i, faction, work],\\n            /*   */ `helping earn rep with faction ${faction} by doing ${work}.`];\\n    }\\n    if (i === 0 && playerInfo.isWorking && playerInfo.workType === \\\"Working for Company\\\") { // If player is currently working for a company rep, sleeves 0 shall help him out (only one sleeve can work for a company)\\n        return [`work for company '${playerInfo.companyName}'`, ns.sleeve.setToCompanyWork, [i, playerInfo.companyName],\\n            /*   */ `helping earn rep with company ${playerInfo.companyName}.`];\\n    }\\n    if (ns.fileExists('/tmp/ingang.txt')) {\\n        const factionAugs = getAugmentsPerFaction(ns);\\n        const factionsWithAugs = Object.entries(factionAugs)\\n            .filter(([faction, augList])=> augList.filter(aug => aug !== 'NeuroFlux Governor').length > 0 // work for factions with augs other than NFG\\n                && faction !== playerInfo.currentWorkFactionName // sleeve 0 is working for this faction\\n                && !allGangFactions.includes(faction) // can't work for competing gangs\\n                && playerInfo.factions.includes(faction) // player in faction\\n                && faction !== 'Bladeburners') // can't work for Bladeburners\\n            .map(([faction]) => faction);\\n        let faction = factionsWithAugs[i]; // just use sleeve index to pick a faction to work for\\n        if (faction) {\\n            const work = factionsWork[faction][0];\\n            return [`work for faction '${faction}' (${work})`, ns.sleeve.setToFactionWork, [i, faction, work],\\n                /*   */ `helping earn rep with faction ${faction} by doing ${work}.`];\\n        }\\n    }\\n    // Finally, do crime for Karma. Homicide has the rate gain, if we can manage a decent success rate.\\n    let crime = getBestCrime(ns, sleeve,  ns.heart.break() > -54000);\\n    return [`commit ${crime.name} `, ns.sleeve.setToCommitCrime, [i, crime.name],\\n        /*   */ `committing ${crime.name} with rate ${(crime.rate).toFixed(2)}`];\\n}\\n\\n/** @param {NS} ns\\n * @param i\\n * @param designatedTask\\n * @param command\\n * @param args\\n * Sets a sleeve to its designated task, with some extra error handling logic for working for factions. */\\nasync function setSleeveTask(ns, i, designatedTask, command, args) {\\n    let strAction = `Set sleeve ${i} to ${designatedTask} `;\\n    if (await command(...args)) {\\n        task[i] = designatedTask;\\n        ns.print(`SUCCESS: ${strAction} `);\\n        return true;\\n    }\\n    // If assigning the task failed...\\n    lastReassignTime[i] = 0;\\n    // If working for a faction, it's possible he current work isn't supported, so try the next one.\\n    if (designatedTask.startsWith('work for faction')) {\\n        ns.print(`WARN: Failed to ${strAction} - work type may not be supported.`, false, 'warning');\\n        workByFaction[playerInfo.currentWorkFactionName] = (workByFaction[playerInfo.currentWorkFactionName] || 0) + 1;\\n    } else\\n        ns.print(`ERROR: Failed to ${strAction} `, true, 'error');\\n    return false;\\n}\\n\\n/** @param {NS} ns\\n * @param sleeve\\n * @param crimeStats\\n * Calculate the chance a sleeve has of committing crime successfully. */\\nfunction calculateSleeveCrimeChance(ns, sleeve, crimeStats) {\\n    let chance =\\n        (crimeStats.hacking_success_weight || 0) * sleeve.hacking +\\n        (crimeStats.strength_success_weight || 0) * sleeve.strength +\\n        (crimeStats.defense_success_weight || 0) * sleeve.defense +\\n        (crimeStats.dexterity_success_weight || 0) * sleeve.dexterity +\\n        (crimeStats.agility_success_weight || 0) * sleeve.agility +\\n        (crimeStats.charisma_success_weight || 0) * sleeve.charisma;\\n    chance /= 975;\\n    chance /= crimeStats.difficulty;\\n    return Math.min(chance, 1);\\n}\\n\\nconst recommendedCrimes = [\\\"shoplift\\\", \\\"rob store\\\", \\\"mug\\\", \\\"traffick arms\\\", \\\"homicide\\\", \\\"grand theft auto\\\", \\\"kidnap\\\", \\\"assassinate\\\", \\\"heist\\\"]\\nfunction getBestCrime(ns, sleeve, getKarma) {\\n    let bestCrimeStats;\\n    let crimeRate = -1;\\n    let crimeStats;\\n    for (const crime of recommendedCrimes) {\\n        crimeStats = ns.getCrimeStats(crime);\\n        crimeStats.name = crime;\\n        crimeStats.chance = calculateSleeveCrimeChance(ns, sleeve, crimeStats);\\n        crimeStats.rate = crimeStats.chance * (getKarma ? crimeStats.karma : crimeStats.money) / crimeStats.time * 1000;\\n\\n        //ns.print(JSON.stringify(crimeStats));\\n        if (crimeStats.rate > crimeRate) {\\n            crimeRate = crimeStats.rate;\\n            bestCrimeStats = crimeStats;\\n            //  ns.print(`next crime ${bestCrimeStats.name} @ ${(getKarma ? bestCrimeStats.rate.toPrecision(2) : ns.nFormat(bestCrimeStats.rate, '0.0'))} ${(getKarma ? 'karma' : '$')}/s`);\\n        }\\n    }\\n    ns.print(`next crime ${bestCrimeStats.name} @ ${(getKarma ? bestCrimeStats.rate.toPrecision(2) : ns.nFormat(bestCrimeStats.rate, '0.0'))} ${(getKarma ? 'karma' : '$')}/s`);\\n    return bestCrimeStats;\\n}\",\"filename\":\"sleeves.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"augments.js\",\"url\":\"blob:https://danielyxie.github.io/f1a914d9-1d74-457d-95e2-6cefb3d91fc4\",\"moduleSequenceNumber\":1842574},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/2c6c564c-8430-41d1-b094-db6602edae11\",\"moduleSequenceNumber\":1842562},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/184c172c-404f-4555-881e-af928aee61bc\",\"moduleSequenceNumber\":1842545},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/6e009cd3-a107-4e56-a0c8-8bfd1f881938\",\"moduleSequenceNumber\":1842546},{\"filename\":\"sleeves.js\",\"url\":\"blob:https://danielyxie.github.io/3a7d8ee7-e6e3-45ae-b01e-48659a28daef\",\"moduleSequenceNumber\":1842696}],\"dependents\":[],\"ramUsage\":47.2,\"server\":\"home\",\"moduleSequenceNumber\":2080335,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"sleeve.getSleeveStats\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.getInformation\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.getSleevePurchasableAugs\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.purchaseSleeveAug\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToSynchronize\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToShockRecovery\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToFactionWork\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToCompanyWork\",\"cost\":4},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"sleeve.setToCommitCrime\",\"cost\":4},{\"type\":\"fn\",\"name\":\"singularity.getCrimeStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Binary heap. */\\nclass BinHeap {\\n    /**\\n     * Heap data array consisting of [weight, payload] pairs, arranged by weight\\n     * to satisfy heap condition.\\n     *\\n     * Encodes the binary tree by storing tree root at index 0 and\\n     * left child of element i at `i * 2 + 1` and\\n     * right child of element i at `i * 2 + 2`.\\n     */\\n    data;\\n\\n    constructor() {\\n        this.data = [];\\n    }\\n\\n    /** Get number of elements in the heap. */\\n    get size() {\\n        return this.data.length;\\n    }\\n\\n    /** Add a new element to the heap. */\\n    push(value, weight) {\\n        const i = this.data.length;\\n        this.data[i] = [weight, value];\\n        this.heapifyUp(i);\\n    }\\n\\n    /** Get the value of the root-most element of the heap, without changing the heap. */\\n    peek() {\\n        if (this.data.length === 0) return undefined;\\n\\n        return this.data[0][1];\\n    }\\n\\n    /** Remove the root-most element of the heap and return the removed element's value. */\\n    pop(){\\n        if (this.data.length === 0) return undefined;\\n\\n        const value = this.data[0][1];\\n\\n        this.data[0] = this.data[this.data.length - 1];\\n        this.data.length = this.data.length - 1;\\n\\n        this.heapifyDown(0);\\n\\n        return value;\\n    }\\n\\n    /** Change the weight of an element in the heap. */\\n    changeWeight(predicate, weight) {\\n        // Find first element with matching value, if any\\n        const i = this.data.findIndex((e) => predicate(e[1]));\\n        if (i === -1) return;\\n\\n        // Update that element's weight\\n        this.data[i][0] = weight;\\n\\n        // And re-heapify if needed\\n        const p = Math.floor((i - 1) / 2);\\n\\n        if (!this.heapOrderABeforeB(this.data[p][0], this.data[i][0]))\\n            // Needs to shift root-wards?\\n            this.heapifyUp(i);\\n        // Try shifting deeper\\n        else this.heapifyDown(i);\\n    }\\n\\n    /** Restore heap condition, starting at index i and traveling towards root. */\\n    heapifyUp(i) {\\n        // Swap the new element up towards root until it reaches root position or\\n        // settles under under a suitable parent\\n        while (i > 0) {\\n            const p = Math.floor((i - 1) / 2);\\n\\n            // Reached heap-ordered state already?\\n            if (this.heapOrderABeforeB(this.data[p][0], this.data[i][0])) break;\\n\\n            // Swap\\n            const tmp = this.data[p];\\n            this.data[p] = this.data[i];\\n            this.data[i] = tmp;\\n\\n            // And repeat at parent index\\n            i = p;\\n        }\\n    }\\n\\n    /** Restore heap condition, starting at index i and traveling away from root. */\\n    heapifyDown(i) {\\n        // Swap the shifted element down in the heap until it either reaches the\\n        // bottom layer or is in correct order relative to it's children\\n        while (i < this.data.length) {\\n            const l = i * 2 + 1;\\n            const r = i * 2 + 2;\\n            let toSwap = i;\\n\\n            // Find which one of element i and it's children should be closest to root\\n            if (l < this.data.length && this.heapOrderABeforeB(this.data[l][0], this.data[toSwap][0])) toSwap = l;\\n            if (r < this.data.length && this.heapOrderABeforeB(this.data[r][0], this.data[toSwap][0])) toSwap = r;\\n\\n            // Already in order?\\n            if (i === toSwap) break;\\n\\n            // Not in order. Swap child that should be closest to root up to 'i' and repeat\\n            const tmp = this.data[toSwap];\\n            this.data[toSwap] = this.data[i];\\n            this.data[i] = tmp;\\n\\n            i = toSwap;\\n        }\\n    }\\n\\n    /**\\n     * Should element with weight `weightA` be closer to root than element with\\n     * weight `weightB`?\\n     */\\n    heapOrderABeforeB(weightA, weightB){};\\n}\\n\\n/** Binary max-heap. */\\nexport class MaxHeap extends BinHeap {\\n    heapOrderABeforeB(weightA, weightB) {\\n        return weightA > weightB;\\n    }\\n}\\n\\n/** Binary min-heap. */\\nexport class MinHeap extends BinHeap {\\n    heapOrderABeforeB(weightA, weightB) {\\n        return weightA < weightB;\\n    }\\n}\",\"filename\":\"/util/heap.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":1842576,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.gang.createGang('Slum Snakes');\\n    await ns.write('/tmp/ingang.txt', ns.gang.getGangInformation().faction, 'w');\\n\\tns.exec('gangum.js', 'home');\\n}\",\"filename\":\"startGang.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"startGang.js\",\"url\":\"blob:https://danielyxie.github.io/d9d13265-fc20-41d6-8a2a-3476549400ab\",\"moduleSequenceNumber\":1927289}],\"dependents\":[],\"ramUsage\":5.9,\"server\":\"home\",\"moduleSequenceNumber\":1927289,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.createGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { list_servers } from 'opened_servers.js';\\nimport { boxTailSingleton, ramUsage } from 'utils.js';\\nimport { calculateGrowThreads } from './growthFunctions.js';\\n\\nlet ns;\\nconst weaken_script = \\\"weaken.js\\\";\\nconst grow_script = \\\"grow.js\\\";\\nconst hack_script = \\\"hack.js\\\";\\nlet hack_scriptRam = 1.7;\\nlet grow_scriptRam, weaken_scriptRam = 1.75;\\nlet ServerGrowthRate = 1;\\nlet serversForExecution = [];\\nlet hackStatus = [];\\n/** @param {NS} pns **/\\nexport async function main(pns) {\\n\\tns = pns;\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('exec')\\n\\tns.clearLog();\\n\\tns.tail();\\n\\tboxTailSingleton(ns, 'mcp_batch', '🥾', '200px');\\n\\tweaken_scriptRam = ns.getScriptRam(weaken_script, \\\"home\\\");\\n\\tgrow_scriptRam = ns.getScriptRam(grow_script, \\\"home\\\");\\n\\thack_scriptRam = ns.getScriptRam(hack_script, \\\"home\\\");\\n\\t; ({ ServerGrowthRate } = JSON.parse(ns.read('/tmp/getBitNodeMultipliers.txt')))\\n\\tawait run();\\n}\\nlet hackPercent = .5;\\nlet bonusServers = 0;\\nfunction updateServerLists() {\\n\\tserversForExecution = ['home'].concat(list_servers(ns).filter(s => ns.hasRootAccess(s)));\\n\\tconst beforeHackStatusLength = hackStatus.length;\\n\\tconst serversToHack = list_servers(ns).filter(s => ns.hasRootAccess(s)\\n\\t\\t&& ns.getServerMaxMoney(s) > 0\\n\\t\\t&& ns.getServerRequiredHackingLevel(s) <= ns.getHackingLevel() / 2);\\n\\n\\thackStatus = [];\\n\\tconst skippedServer = []\\n\\tconst player = ns.getPlayer();\\n\\tfor (const server of serversToHack) {\\n\\t\\tconst s = ns.getServer(server);\\n\\t\\ts.hackDifficulty = s.minDifficulty;\\n\\t\\t// check that hacks will succeed. Could be redundant check\\n\\t\\tconst hackChance = ns.formulas.hacking.hackChance(s, player);\\n\\t\\tif (hackChance < .99) {\\n\\t\\t\\t//ns.print(`Hack chance to low ${s} ${(hackChance * 100).toFixed(2)}%`)\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (s.serverGrowth < 40) {\\n\\t\\t\\t//ns.print(`Growth is to low ${s} ${s.serverGrowth}%`)\\n\\t\\t\\tskippedServer.push({ server: server });\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\thackStatus.push({ server: server });\\n\\t}\\n\\tconst lowRamUse = ramUsage(ns) < .5;\\n\\tconst oldHackPercent = hackPercent;\\n\\tconst oldBonusServers = bonusServers;\\n\\tif (lowRamUse) {\\n\\t\\thackPercent = Math.min(hackPercent + .1, .95);\\n\\t\\tif (hackPercent === .95) {\\n\\t\\t\\tbonusServers = Math.min(bonusServers + 1, skippedServer.length);\\n\\t\\t\\thackStatus.push(...skippedServer.slice(0, bonusServers));\\n\\t\\t}\\n\\t} else {\\n\\t\\tbonusServers = Math.max(bonusServers - 1, 0);\\n\\t\\tif (bonusServers <= 0) hackPercent = Math.max(hackPercent - .1, .5);\\n\\t}\\n\\tif (oldHackPercent !== hackPercent || oldBonusServers !== bonusServers) ns.print(`BonusServers added ${bonusServers} Hack percent ${hackPercent}`);\\n\\t// after aug install just start hacking on n00dles fist\\n\\tif (hackStatus.length === 0) hackStatus.push({ server: 'n00dles' });\\n\\tif (beforeHackStatusLength < hackStatus.length) ns.print(`Servers to hack ${hackStatus.length} ${hackStatus.map(o => o.server).join(',')}`);\\n}\\nlet batches = [];\\nlet target = 'n00dles';\\nasync function run() {\\n\\tlet i = 0;\\n\\tupdateServerLists();\\n\\tlet updateAfter = Date.now().valueOf() + 30 * 1000;\\n\\twhile (true) {\\n\\n\\t\\t//todo prep logic\\n\\n\\t\\t// const currentSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\n\\t\\t// if (currentSec > 0) { // weaken prep\\n\\t\\t// \\tconst weaken = await runWeaken(target);\\n\\t\\t// \\treturn { server: target, promise: ns.asleep(weaken.time + 200), pid: { weaken: weaken.pid } };\\n\\t\\t// }\\n\\n\\t\\t// todo run this check the moment before the hack lands, kill the PID if check fails\\n\\t\\t// if (ns.getServerMoneyAvailable(target) / ns.getServerMaxMoney(target) < .9) {\\n\\t\\t// \\treturn 0; // don't hack if server is not max money\\n\\t\\t// }\\n\\n\\t\\tns.print('planBatchRam');\\n\\t\\tlet newBatchPlan = await planBatchRam(target);\\n\\t\\twhile (newBatchPlan && batches.length < 50) {\\n\\t\\t\\tbatches.push(newBatchPlan);\\n\\t\\t\\tnewBatchPlan = await planBatchRam(target);\\n\\t\\t\\t// await ns.sleep(1);\\n\\t\\t}\\n\\t\\tns.print('executeBatchParts');\\n\\t\\tfor (const batch of batches) {\\n\\t\\t\\tawait executeBatchParts(batch);\\n\\t\\t}\\n\\t\\t// remove completed batches\\n\\t\\tbatches = batches.filter(o => o.weakenHosts || o.hackHost || o.growHost);\\n\\n\\t\\t// if (!hackStatus[i].pid || (hackStatus[i].pid && !ns.isRunning(hackStatus[i].pid.weaken))) {\\n\\t\\t// \\tconst ret = await runHGW(hackStatus[i].server);\\n\\t\\t// \\thackStatus[i] = ret;\\n\\t\\t// }\\n\\t\\t// i = (i + 1) % hackStatus.length;\\n\\t\\tawait ns.sleep(50);\\n\\t\\tif (updateAfter < Date.now()) {\\n\\t\\t\\tupdateAfter = Date.now() + 30 * 1000;\\n\\t\\t\\tupdateServerLists();\\n\\t\\t\\ti = 0;\\n\\t\\t}\\n\\t\\treturn; //run once testing\\n\\t}\\n}\\nasync function executeBatchParts(batch) {\\n\\t/*\\n\\t.weakenHosts []\\n\\t.hackHost\\n\\t\\tthreads_available, host, threadsAvailMinusNeed, ramUsed\\n\\t.growHost\\n\\t */\\n\\n\\tconst server = ns.getServer(batch.target);\\n\\tserver.hackDifficulty = server.minDifficulty;\\n\\tserver.moneyAvailable = server.moneyMax;\\n\\n\\t// (hackStart - 200) < NO_START_BATCH < (weakenEnd + 200)\\n\\tconst canRun = (date) => {\\n\\t\\tconst hacksOnSameTarget = batches.filter(o => o.target === batch.target && o.weakenEnd > 0);\\n\\t\\tconst batchesDuringDate = hacksOnSameTarget.filter(o => (o.hackEnd - 200) < date && date < (o.weakenEnd + 200));\\n\\t\\treturn batchesDuringDate.length === 0;\\n\\t}\\n\\n\\tif (batch.growEnd && batch.growHost && canRun(Date.now())) {\\n\\t\\tconst growTime = ns.formulas.hacking.growTime(server, ns.getPlayer());\\n\\t\\tconst newGrowEnd = Date.now() + growTime;\\n\\t\\tif (Math.abs(batch.growEnd - newGrowEnd) <= 100) {\\n\\t\\t\\tconst pid = await runGrow(batch.target, batch.growHost);\\n\\t\\t\\tif (pid === 0) {\\n\\t\\t\\t\\tns.tprint('FAILED ' + 'to start grow');\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tbatch.growStart = Date.now();\\n\\t\\t\\t\\tbatch.growEnd = newGrowEnd;\\n\\t\\t\\t\\tdelete batch.growHost;\\n\\t\\t\\t}\\n\\t\\t} else if ((newGrowEnd - batch.growEnd) > 100) {\\n\\t\\t\\tns.tprint('GROW START WINDOW MISSED');\\n\\t\\t\\tremoveExclusion(batch.growHost.host, batch.growHost.ramUsed);\\n\\t\\t\\tdelete batch.growHost;\\n\\t\\t}\\n\\t}\\n\\tif (batch.hackEnd && batch.hackHost && canRun(Date.now())) {\\n\\t\\tconst hackTime = ns.formulas.hacking.hackTime(server, ns.getPlayer());\\n\\t\\tconst newHackEnd = Date.now() + hackTime;\\n\\t\\tif (Math.abs(batch.hackEnd - newHackEnd) <= 100) {\\n\\t\\t\\tconst pid = await runHack(batch.target, batch.hackHost);\\n\\t\\t\\tif (pid === 0) {\\n\\t\\t\\t\\tns.tprint('FAILED ' + 'to start hack');\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tbatch.hackStart = Date.now();\\n\\t\\t\\t\\tbatch.hackEnd = newHackEnd;\\n\\t\\t\\t\\tdelete batch.hackHost;\\n\\t\\t\\t}\\n\\t\\t} else if ((newHackEnd - batch.hackEnd) > 100) {\\n\\t\\t\\tns.tprint('HACK START WINDOW MISSED');\\n\\t\\t\\tremoveExclusion(batch.hackHost.host, batch.hackHost.ramUsed);\\n\\t\\t\\tdelete batch.hackHost;\\n\\t\\t}\\n\\t}\\n\\n\\tif (batch.weakenHosts && canRun(Date.now())) {\\n\\t\\tbatch.weakenStart = Date.now();\\n\\t\\tconst pids = await runWeaken(batch.target, batch.weakenHosts);\\n\\t\\tif (pids.filter(o => o === 0)) {\\n\\t\\t\\tns.tprint('FAILED ' + 'to start all weakens');\\n\\t\\t} else {\\n\\t\\t\\tbatch.weakenEnd = ns.formulas.hacking.weakenTime(server, ns.getPlayer());\\n\\t\\t\\tbatch.growEnd = batch.weakenEnd - 200;\\n\\t\\t\\tbatch.hackEnd = batch.growEnd - 200;\\n\\t\\t\\tdelete batch.weakenHosts;\\n\\t\\t}\\n\\t}\\n}\\n\\nasync function planBatchRam(target) {\\n\\tconst server = ns.getServer(target);\\n\\tserver.hackDifficulty = server.minDifficulty;\\n\\tserver.moneyAvailable = server.moneyMax;\\n\\tconst hackThreadsNeeded = () => {\\n\\t\\treturn Math.max(Math.floor(hackPercent / ns.formulas.hacking.hackPercent(server, ns.getPlayer())), 1);\\n\\t}\\n\\tconst growThreadsNeeded = (host, hackThreads) => {\\n\\t\\tconst hackAmount = ns.hackAnalyze(target) * hackThreads * ns.getServerMaxMoney(target);\\n\\t\\treturn Math.ceil(calculateGrowThreads(ns, target, hackAmount, getCores(host), { ServerGrowthRate }));\\n\\t}\\n\\tconst weakenThreadsNeeded = (host, hackThreads, growThreads) => {\\n\\t\\tlet security = ns.growthAnalyzeSecurity(growThreads);\\n\\t\\tsecurity += ns.hackAnalyzeSecurity(hackThreads);\\n\\t\\treturn Math.max(Math.ceil(security / ns.weakenAnalyze(1, getCores(host))), 1);\\n\\t}\\n\\n\\tconst batchPlan = getHostsAndThreads(hackThreadsNeeded, growThreadsNeeded, weakenThreadsNeeded);\\n\\tif (!batchPlan.weakenHosts || !batchPlan.hackHost || !batchPlan.growHost) {\\n\\t\\tns.print('No room to plan another batch');\\n\\t\\treturn;\\n\\t}\\n\\tbatchPlan.target = target;\\n\\treturn batchPlan;\\n}\\n\\nasync function runWeaken(target, hosts) {\\n\\tlet pids = [];\\n\\tfor (const host of hosts) {\\n\\t\\tpids.push(await ns.exec(weaken_script, host.host, host.threads_available, target, Math.random()));\\n\\t\\tremoveExclusion(host.host, host.ramUsed);\\n\\t}\\n\\treturn pids;\\n}\\n\\nasync function runGrow(target, host) {\\n\\tconst pid = await ns.exec(grow_script, host.host, host.threads_available, target, Math.random());\\n\\tremoveExclusion(host.host, host.ramUsed);\\n\\treturn pid;\\n}\\n\\nasync function runHack(target, host) {\\n\\tconst pid = await ns.exec(hack_script, host.host, host.threads_available, target, Math.random());\\n\\tremoveExclusion(host.host, host.ramUsed);\\n\\treturn pid;\\n}\\n\\nconst getCores = (host) => ns.getServer(host).cpuCores;\\n\\nfunction getHostsAndThreads(hackThreadFunction, growThreadFunction, weakThreadFunction) {\\n\\tlet hackHost;\\n\\tlet growHost;\\n\\tlet weakenHosts;\\n\\thackHost = getHostAndThreadsFunc(hack_scriptRam, hackThreadFunction);\\n\\tif (hackHost.host) addExclusion(hackHost.host, hackHost.ramUsed);\\n\\tgrowHost = getHostAndThreadsFunc(grow_scriptRam, (host) => growThreadFunction(host, hackHost.threads_available));\\n\\tif (growHost.host) addExclusion(growHost.host, growHost.ramUsed);\\n\\tweakenHosts = getHostAndThreadsFunc(weaken_scriptRam, (host) => weakThreadFunction(host, hackHost.threads_available, growHost.threads_available), true);\\n\\n\\tif (!hackHost.host || !growHost.host || weakenHosts.length <= 0) {\\n\\t\\tremoveExclusion(hackHost.host, hackHost.ramUsed);\\n\\t\\tremoveExclusion(growHost.host, growHost.ramUsed);\\n\\t} else {\\n\\t\\tfor (const weakenHost of weakenHosts) {\\n\\t\\t\\taddExclusion(weakenHost.host, weakenHost.ramUsed);\\n\\t\\t}\\n\\t}\\n\\treturn { hackHost, growHost, weakenHosts };\\n}\\n\\nfunction getHostAndThreadsFunc(scriptRam, threadFunction, hostSplit) {\\n\\tconst emptyRet = { threads_available: 0, host: null, threadsAvailMinusNeed: 0, ramUsed: 0 };\\n\\tconst hosts = serversForExecution.map((host) => {\\n\\t\\tlet maxRam = ns.getServerMaxRam(host);\\n\\t\\t// reserve some ram for other scripts\\n\\t\\tif (host === 'home') {\\n\\t\\t\\tmaxRam = Math.max(maxRam * .75, maxRam - 128);\\n\\t\\t}\\n\\t\\tconst threads_available = Math.floor((maxRam - ns.getServerUsedRam(host) - excludedHostRam(host)) / scriptRam);\\n\\t\\tlet threadsNeeded = threadFunction(host);\\n\\t\\tconst ramUsed = parseFloat((threadsNeeded * scriptRam).toFixed(3));\\n\\t\\tconst threadsAvailMinusNeed = threads_available - threadsNeeded;\\n\\t\\treturn { threads_available, host, threadsAvailMinusNeed, ramUsed };\\n\\t}).filter((hostO) => hostO.threads_available >= 1);\\n\\tif (hosts.length <= 0) return emptyRet;\\n\\thosts.sort((a, b) => a.threadsAvailMinusNeed - b.threadsAvailMinusNeed);\\n\\tif (hostSplit) {\\n\\t\\tconst threadsNeeded = threadFunction('n00dles');\\n\\t\\tconst serversWithRamFree = hosts.filter(o => o.threads_available > 0);\\n\\t\\tlet acc = 0;\\n\\t\\tlet hostsAcc = [];\\n\\t\\twhile (acc < threadsNeeded) {\\n\\t\\t\\tconst s = serversWithRamFree.shift();\\n\\t\\t\\tif (!s) {\\n\\t\\t\\t\\t// not enough servers with threads_available to fill need\\n\\t\\t\\t\\treturn [];\\n\\t\\t\\t}\\n\\t\\t\\tacc += s.threads_available;\\n\\t\\t\\thostsAcc.push(s);\\n\\t\\t}\\n\\t\\treturn hostsAcc;\\n\\t}\\n\\t// take the closet fit from front of the array or return empty\\n\\treturn hosts.filter(o => o.threadsAvailMinusNeed >= 0).shift() || emptyRet;\\n}\\n\\nconst exclusionMap = {};\\nfunction addExclusion(host, ram) {\\n\\texclusionMap[host] = exclusionMap[host] || 0;\\n\\texclusionMap[host] = Math.min(exclusionMap[host] + ram, ns.getServerMaxRam(host))\\n}\\nfunction removeExclusion(host, ram) {\\n\\texclusionMap[host] = exclusionMap[host] || 0;\\n\\texclusionMap[host] = Math.max(exclusionMap[host] - ram, 0);\\n}\\nfunction excludedHostRam(host) {\\n\\treturn exclusionMap[host] || 0;\\n}\",\"filename\":\"mcp_hgw_batch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"growthFunctions.js\",\"url\":\"blob:https://danielyxie.github.io/255fcb15-7586-4e1e-88ec-655c52e5634b\",\"moduleSequenceNumber\":376},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/b6dcb16e-52a4-4ca3-b088-2c93660fe00b\",\"moduleSequenceNumber\":368},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/a551c763-7f60-485d-ba83-4431efd2b4ff\",\"moduleSequenceNumber\":351},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/39567991-3497-4061-8487-27e5c7966afe\",\"moduleSequenceNumber\":352},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/111b106d-8613-4a15-a498-d7a2ac68d100\",\"moduleSequenceNumber\":351},{\"filename\":\"mcp_hgw_batch.js\",\"url\":\"blob:https://danielyxie.github.io/6ac6bcc4-644e-4947-be2a-9ccff2a9f914\",\"moduleSequenceNumber\":4946}],\"dependents\":[],\"ramUsage\":11.4,\"server\":\"home\",\"moduleSequenceNumber\":1842578,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\",\"pserv-24\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/player.txt\",\"text\":\"{\\n  \\\"hacking\\\": 1,\\n  \\\"hp\\\": 10,\\n  \\\"max_hp\\\": 10,\\n  \\\"strength\\\": 1,\\n  \\\"defense\\\": 1,\\n  \\\"dexterity\\\": 5,\\n  \\\"agility\\\": 5,\\n  \\\"charisma\\\": 2,\\n  \\\"intelligence\\\": 172,\\n  \\\"hacking_chance_mult\\\": 1.4738578394107988,\\n  \\\"hacking_speed_mult\\\": 1.4738578394107988,\\n  \\\"hacking_money_mult\\\": 1.4738578394107988,\\n  \\\"hacking_grow_mult\\\": 1.4738578394107988,\\n  \\\"hacking_exp\\\": 0,\\n  \\\"strength_exp\\\": 0,\\n  \\\"defense_exp\\\": 0,\\n  \\\"dexterity_exp\\\": 60.76431443184871,\\n  \\\"agility_exp\\\": 60.76431443184871,\\n  \\\"charisma_exp\\\": 0,\\n  \\\"hacking_mult\\\": 1.4738578394107988,\\n  \\\"strength_mult\\\": 1.2928577538691215,\\n  \\\"defense_mult\\\": 1.2928577538691215,\\n  \\\"dexterity_mult\\\": 1.2928577538691215,\\n  \\\"agility_mult\\\": 1.2928577538691215,\\n  \\\"charisma_mult\\\": 2.092878131963334,\\n  \\\"hacking_exp_mult\\\": 1.4738578394107988,\\n  \\\"strength_exp_mult\\\": 1.2928577538691215,\\n  \\\"defense_exp_mult\\\": 1.2928577538691215,\\n  \\\"dexterity_exp_mult\\\": 1.2928577538691215,\\n  \\\"agility_exp_mult\\\": 1.2928577538691215,\\n  \\\"charisma_exp_mult\\\": 1.2928577538691215,\\n  \\\"company_rep_mult\\\": 1.2928577538691215,\\n  \\\"faction_rep_mult\\\": 1.2928577538691215,\\n  \\\"numPeopleKilled\\\": 0,\\n  \\\"money\\\": 5427115780.221368,\\n  \\\"city\\\": \\\"Aevum\\\",\\n  \\\"location\\\": \\\"The Slums\\\",\\n  \\\"companyName\\\": \\\"\\\",\\n  \\\"crime_money_mult\\\": 1.8358580104941524,\\n  \\\"crime_success_mult\\\": 1.8358580104941524,\\n  \\\"isWorking\\\": false,\\n  \\\"workType\\\": \\\"\\\",\\n  \\\"currentWorkFactionName\\\": \\\"\\\",\\n  \\\"currentWorkFactionDescription\\\": \\\"\\\",\\n  \\\"workHackExpGainRate\\\": 0,\\n  \\\"workStrExpGainRate\\\": 0,\\n  \\\"workDefExpGainRate\\\": 0,\\n  \\\"workDexExpGainRate\\\": 0,\\n  \\\"workAgiExpGainRate\\\": 0,\\n  \\\"workChaExpGainRate\\\": 0,\\n  \\\"workRepGainRate\\\": 0,\\n  \\\"workMoneyGainRate\\\": 0,\\n  \\\"workMoneyLossRate\\\": 0,\\n  \\\"workHackExpGained\\\": 0,\\n  \\\"workStrExpGained\\\": 0,\\n  \\\"workDefExpGained\\\": 0,\\n  \\\"workDexExpGained\\\": 0,\\n  \\\"workAgiExpGained\\\": 0,\\n  \\\"workChaExpGained\\\": 0,\\n  \\\"workRepGained\\\": 0,\\n  \\\"workMoneyGained\\\": 0,\\n  \\\"createProgramName\\\": \\\"\\\",\\n  \\\"createProgramReqLvl\\\": 100,\\n  \\\"className\\\": \\\"\\\",\\n  \\\"crimeType\\\": \\\"\\\",\\n  \\\"work_money_mult\\\": 1.4738578394107988,\\n  \\\"hacknet_node_money_mult\\\": 1.3962863741786513,\\n  \\\"hacknet_node_purchase_cost_mult\\\": 0.6558057286509372,\\n  \\\"hacknet_node_ram_cost_mult\\\": 0.6558057286509372,\\n  \\\"hacknet_node_core_cost_mult\\\": 0.6558057286509372,\\n  \\\"hacknet_node_level_cost_mult\\\": 0.6558057286509372,\\n  \\\"hasWseAccount\\\": false,\\n  \\\"hasTixApiAccess\\\": false,\\n  \\\"has4SData\\\": false,\\n  \\\"has4SDataTixApi\\\": false,\\n  \\\"bladeburner_max_stamina_mult\\\": 1,\\n  \\\"bladeburner_stamina_gain_mult\\\": 1,\\n  \\\"bladeburner_analysis_mult\\\": 1,\\n  \\\"bladeburner_success_chance_mult\\\": 1,\\n  \\\"bitNodeN\\\": 6,\\n  \\\"totalPlaytime\\\": 9607077600,\\n  \\\"playtimeSinceLastAug\\\": 166400,\\n  \\\"playtimeSinceLastBitnode\\\": 166400,\\n  \\\"jobs\\\": {},\\n  \\\"factions\\\": [],\\n  \\\"tor\\\": false,\\n  \\\"inBladeburner\\\": false,\\n  \\\"hasCorporation\\\": false,\\n  \\\"entropy\\\": 0\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/getBitNodeMultipliers.txt\",\"text\":\"{\\n  \\\"HackingLevelMultiplier\\\": 0.35,\\n  \\\"StrengthLevelMultiplier\\\": 1,\\n  \\\"DefenseLevelMultiplier\\\": 1,\\n  \\\"DexterityLevelMultiplier\\\": 1,\\n  \\\"AgilityLevelMultiplier\\\": 1,\\n  \\\"CharismaLevelMultiplier\\\": 1,\\n  \\\"ServerGrowthRate\\\": 1,\\n  \\\"ServerMaxMoney\\\": 0.4,\\n  \\\"ServerStartingMoney\\\": 0.5,\\n  \\\"ServerStartingSecurity\\\": 1.5,\\n  \\\"ServerWeakenRate\\\": 1,\\n  \\\"HomeComputerRamCost\\\": 1,\\n  \\\"PurchasedServerCost\\\": 1,\\n  \\\"PurchasedServerSoftcap\\\": 2,\\n  \\\"PurchasedServerLimit\\\": 1,\\n  \\\"PurchasedServerMaxRam\\\": 1,\\n  \\\"CompanyWorkMoney\\\": 0.5,\\n  \\\"CrimeMoney\\\": 0.75,\\n  \\\"HacknetNodeMoney\\\": 0.2,\\n  \\\"ManualHackMoney\\\": 1,\\n  \\\"ScriptHackMoney\\\": 0.75,\\n  \\\"ScriptHackMoneyGain\\\": 1,\\n  \\\"CodingContractMoney\\\": 1,\\n  \\\"ClassGymExpGain\\\": 1,\\n  \\\"CompanyWorkExpGain\\\": 1,\\n  \\\"CrimeExpGain\\\": 1,\\n  \\\"FactionWorkExpGain\\\": 1,\\n  \\\"HackExpGain\\\": 0.25,\\n  \\\"FactionPassiveRepGain\\\": 1,\\n  \\\"FactionWorkRepGain\\\": 1,\\n  \\\"RepToDonateToFaction\\\": 1,\\n  \\\"AugmentationMoneyCost\\\": 1,\\n  \\\"AugmentationRepCost\\\": 1,\\n  \\\"InfiltrationMoney\\\": 0.75,\\n  \\\"InfiltrationRep\\\": 1,\\n  \\\"FourSigmaMarketDataCost\\\": 1,\\n  \\\"FourSigmaMarketDataApiCost\\\": 1,\\n  \\\"CorporationValuation\\\": 0.2,\\n  \\\"CorporationSoftCap\\\": 0.9,\\n  \\\"BladeburnerRank\\\": 1,\\n  \\\"BladeburnerSkillCost\\\": 1,\\n  \\\"GangSoftcap\\\": 0.7,\\n  \\\"GangUniqueAugs\\\": 0.2,\\n  \\\"DaedalusAugsRequirement\\\": 1.166,\\n  \\\"StaneksGiftPowerMultiplier\\\": 0.5,\\n  \\\"StaneksGiftExtraSize\\\": 2,\\n  \\\"WorldDaemonDifficulty\\\": 2\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/factionAugs.txt\",\"text\":\"{\\n  \\\"Illuminati\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Synthetic Heart\\\",\\n    \\\"Synfibril Muscle\\\",\\n    \\\"NEMEAN Subdermal Weave\\\",\\n    \\\"Embedded Netburner Module Core V3 Upgrade\\\",\\n    \\\"Embedded Netburner Module Analyze Engine\\\",\\n    \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\n    \\\"QLink\\\"\\n  ],\\n  \\\"Daedalus\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Synthetic Heart\\\",\\n    \\\"Synfibril Muscle\\\",\\n    \\\"NEMEAN Subdermal Weave\\\",\\n    \\\"Embedded Netburner Module Core V3 Upgrade\\\",\\n    \\\"Embedded Netburner Module Analyze Engine\\\",\\n    \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\n    \\\"The Red Pill\\\"\\n  ],\\n  \\\"The Covenant\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Augmented Targeting III\\\",\\n    \\\"Synthetic Heart\\\",\\n    \\\"Synfibril Muscle\\\",\\n    \\\"Combat Rib III\\\",\\n    \\\"NEMEAN Subdermal Weave\\\",\\n    \\\"Graphene Bone Lacings\\\",\\n    \\\"Embedded Netburner Module Core V3 Upgrade\\\",\\n    \\\"Embedded Netburner Module Analyze Engine\\\",\\n    \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\n    \\\"SPTN-97 Gene Modification\\\"\\n  ],\\n  \\\"ECorp\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Graphene Bionic Spine Upgrade\\\",\\n    \\\"Graphene Bionic Legs Upgrade\\\",\\n    \\\"Embedded Netburner Module\\\",\\n    \\\"Embedded Netburner Module Core Implant\\\",\\n    \\\"Embedded Netburner Module Core V2 Upgrade\\\",\\n    \\\"Embedded Netburner Module Core V3 Upgrade\\\",\\n    \\\"Embedded Netburner Module Analyze Engine\\\",\\n    \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\n    \\\"PC Direct-Neural Interface\\\",\\n    \\\"PC Direct-Neural Interface Optimization Submodule\\\",\\n    \\\"ECorp HVMind Implant\\\"\\n  ],\\n  \\\"MegaCorp\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Graphene Bionic Legs Upgrade\\\",\\n    \\\"Embedded Netburner Module\\\",\\n    \\\"Embedded Netburner Module Core Implant\\\",\\n    \\\"Embedded Netburner Module Core V2 Upgrade\\\",\\n    \\\"Embedded Netburner Module Core V3 Upgrade\\\",\\n    \\\"Embedded Netburner Module Analyze Engine\\\",\\n    \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\n    \\\"ADR-V1 Pheromone Gene\\\",\\n    \\\"CordiARC Fusion Reactor\\\"\\n  ],\\n  \\\"Bachman & Associates\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Enhanced Social Interaction Implant\\\",\\n    \\\"Neuralstimulator\\\",\\n    \\\"Nuoptimal Nootropic Injector Implant\\\",\\n    \\\"Speech Enhancement\\\",\\n    \\\"FocusWire\\\",\\n    \\\"ADR-V2 Pheromone Gene\\\",\\n    \\\"SmartJaw\\\"\\n  ],\\n  \\\"Blade Industries\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Augmented Targeting I\\\",\\n    \\\"Augmented Targeting II\\\",\\n    \\\"Augmented Targeting III\\\",\\n    \\\"Synfibril Muscle\\\",\\n    \\\"Combat Rib I\\\",\\n    \\\"Combat Rib II\\\",\\n    \\\"Combat Rib III\\\",\\n    \\\"Nanofiber Weave\\\",\\n    \\\"Bionic Spine\\\",\\n    \\\"Bionic Legs\\\",\\n    \\\"Embedded Netburner Module\\\",\\n    \\\"Embedded Netburner Module Core Implant\\\",\\n    \\\"Embedded Netburner Module Core V2 Upgrade\\\",\\n    \\\"PC Direct-Neural Interface\\\",\\n    \\\"PC Direct-Neural Interface Optimization Submodule\\\",\\n    \\\"HyperSight Corneal Implant\\\",\\n    \\\"Neotra\\\"\\n  ],\\n  \\\"NWO\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Synthetic Heart\\\",\\n    \\\"Synfibril Muscle\\\",\\n    \\\"Enhanced Social Interaction Implant\\\",\\n    \\\"Embedded Netburner Module\\\",\\n    \\\"Embedded Netburner Module Core Implant\\\",\\n    \\\"Embedded Netburner Module Core V2 Upgrade\\\",\\n    \\\"Embedded Netburner Module Core V3 Upgrade\\\",\\n    \\\"Embedded Netburner Module Analyze Engine\\\",\\n    \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\n    \\\"ADR-V1 Pheromone Gene\\\",\\n    \\\"Neurotrainer III\\\",\\n    \\\"Power Recirculation Core\\\",\\n    \\\"Xanipher\\\",\\n    \\\"Hydroflame Left Arm\\\"\\n  ],\\n  \\\"Clarke Incorporated\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Enhanced Social Interaction Implant\\\",\\n    \\\"Neuralstimulator\\\",\\n    \\\"Neuronal Densification\\\",\\n    \\\"Nuoptimal Nootropic Injector Implant\\\",\\n    \\\"Speech Enhancement\\\",\\n    \\\"FocusWire\\\",\\n    \\\"ADR-V2 Pheromone Gene\\\",\\n    \\\"nextSENS Gene Modification\\\"\\n  ],\\n  \\\"OmniTek Incorporated\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Augmented Targeting I\\\",\\n    \\\"Augmented Targeting II\\\",\\n    \\\"Augmented Targeting III\\\",\\n    \\\"Combat Rib I\\\",\\n    \\\"Combat Rib II\\\",\\n    \\\"Combat Rib III\\\",\\n    \\\"Nanofiber Weave\\\",\\n    \\\"Bionic Spine\\\",\\n    \\\"Bionic Legs\\\",\\n    \\\"Enhanced Social Interaction Implant\\\",\\n    \\\"Embedded Netburner Module Core V2 Upgrade\\\",\\n    \\\"PC Direct-Neural Interface\\\",\\n    \\\"OmniTek InfoLoad\\\"\\n  ],\\n  \\\"Four Sigma\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Enhanced Social Interaction Implant\\\",\\n    \\\"Neuralstimulator\\\",\\n    \\\"Nuoptimal Nootropic Injector Implant\\\",\\n    \\\"Speech Enhancement\\\",\\n    \\\"FocusWire\\\",\\n    \\\"PC Direct-Neural Interface\\\",\\n    \\\"ADR-V1 Pheromone Gene\\\",\\n    \\\"ADR-V2 Pheromone Gene\\\",\\n    \\\"Neurotrainer III\\\"\\n  ],\\n  \\\"KuaiGong International\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Augmented Targeting I\\\",\\n    \\\"Augmented Targeting II\\\",\\n    \\\"Augmented Targeting III\\\",\\n    \\\"Synthetic Heart\\\",\\n    \\\"Synfibril Muscle\\\",\\n    \\\"Combat Rib I\\\",\\n    \\\"Combat Rib II\\\",\\n    \\\"Combat Rib III\\\",\\n    \\\"Bionic Spine\\\",\\n    \\\"Bionic Legs\\\",\\n    \\\"Embedded Netburner Module Core V2 Upgrade\\\",\\n    \\\"Speech Enhancement\\\",\\n    \\\"FocusWire\\\",\\n    \\\"HyperSight Corneal Implant\\\",\\n    \\\"Photosynthetic Cells\\\"\\n  ],\\n  \\\"Fulcrum Secret Technologies\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Synthetic Heart\\\",\\n    \\\"Synfibril Muscle\\\",\\n    \\\"Nanofiber Weave\\\",\\n    \\\"NEMEAN Subdermal Weave\\\",\\n    \\\"Graphene Bone Lacings\\\",\\n    \\\"Graphene Bionic Spine Upgrade\\\",\\n    \\\"Graphene Bionic Legs Upgrade\\\",\\n    \\\"Artificial Bio-neural Network Implant\\\",\\n    \\\"Enhanced Myelin Sheathing\\\",\\n    \\\"Embedded Netburner Module\\\",\\n    \\\"Embedded Netburner Module Core Implant\\\",\\n    \\\"Embedded Netburner Module Core V2 Upgrade\\\",\\n    \\\"Embedded Netburner Module Core V3 Upgrade\\\",\\n    \\\"Embedded Netburner Module Analyze Engine\\\",\\n    \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\n    \\\"PC Direct-Neural Interface Optimization Submodule\\\",\\n    \\\"PC Direct-Neural Interface NeuroNet Injector\\\"\\n  ],\\n  \\\"BitRunners\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Artificial Bio-neural Network Implant\\\",\\n    \\\"Enhanced Myelin Sheathing\\\",\\n    \\\"DataJack\\\",\\n    \\\"Embedded Netburner Module\\\",\\n    \\\"Embedded Netburner Module Core Implant\\\",\\n    \\\"Embedded Netburner Module Core V2 Upgrade\\\",\\n    \\\"Neural Accelerator\\\",\\n    \\\"Cranial Signal Processors - Gen III\\\",\\n    \\\"Cranial Signal Processors - Gen IV\\\",\\n    \\\"Cranial Signal Processors - Gen V\\\",\\n    \\\"Neurotrainer II\\\",\\n    \\\"BitRunners Neurolink\\\"\\n  ],\\n  \\\"The Black Hand\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Artificial Synaptic Potentiation\\\",\\n    \\\"Enhanced Myelin Sheathing\\\",\\n    \\\"DataJack\\\",\\n    \\\"Embedded Netburner Module\\\",\\n    \\\"Embedded Netburner Module Core Implant\\\",\\n    \\\"Neuralstimulator\\\",\\n    \\\"Cranial Signal Processors - Gen III\\\",\\n    \\\"Cranial Signal Processors - Gen IV\\\",\\n    \\\"The Black Hand\\\"\\n  ],\\n  \\\"NiteSec\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"BitWire\\\",\\n    \\\"Artificial Synaptic Potentiation\\\",\\n    \\\"Neural-Retention Enhancement\\\",\\n    \\\"DataJack\\\",\\n    \\\"Embedded Netburner Module\\\",\\n    \\\"Cranial Signal Processors - Gen I\\\",\\n    \\\"Cranial Signal Processors - Gen II\\\",\\n    \\\"Cranial Signal Processors - Gen III\\\",\\n    \\\"Neurotrainer II\\\",\\n    \\\"CRTX42-AA Gene Modification\\\"\\n  ],\\n  \\\"Aevum\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Wired Reflexes\\\",\\n    \\\"Speech Processor Implant\\\",\\n    \\\"Synaptic Enhancement Implant\\\",\\n    \\\"Neuralstimulator\\\",\\n    \\\"Neurotrainer I\\\",\\n    \\\"PCMatrix\\\"\\n  ],\\n  \\\"Chongqing\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Speech Processor Implant\\\",\\n    \\\"DataJack\\\",\\n    \\\"Neuralstimulator\\\",\\n    \\\"Nuoptimal Nootropic Injector Implant\\\",\\n    \\\"Neuregen Gene Modification\\\"\\n  ],\\n  \\\"Ishima\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Augmented Targeting I\\\",\\n    \\\"Combat Rib I\\\",\\n    \\\"Wired Reflexes\\\",\\n    \\\"Speech Processor Implant\\\",\\n    \\\"Neuralstimulator\\\",\\n    \\\"INFRARET Enhancement\\\"\\n  ],\\n  \\\"New Tokyo\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Speech Processor Implant\\\",\\n    \\\"DataJack\\\",\\n    \\\"Neuralstimulator\\\",\\n    \\\"Nuoptimal Nootropic Injector Implant\\\",\\n    \\\"NutriGen Implant\\\"\\n  ],\\n  \\\"Sector-12\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Augmented Targeting I\\\",\\n    \\\"Augmented Targeting II\\\",\\n    \\\"Wired Reflexes\\\",\\n    \\\"Speech Processor Implant\\\",\\n    \\\"Neuralstimulator\\\",\\n    \\\"CashRoot Starter Kit\\\"\\n  ],\\n  \\\"Volhaven\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Combat Rib I\\\",\\n    \\\"Combat Rib II\\\",\\n    \\\"Wired Reflexes\\\",\\n    \\\"Speech Processor Implant\\\",\\n    \\\"Neuralstimulator\\\",\\n    \\\"Nuoptimal Nootropic Injector Implant\\\",\\n    \\\"DermaForce Particle Barrier\\\"\\n  ],\\n  \\\"Speakers for the Dead\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Unstable Circadian Modulator\\\",\\n    \\\"Synthetic Heart\\\",\\n    \\\"Synfibril Muscle\\\",\\n    \\\"Nanofiber Weave\\\",\\n    \\\"Wired Reflexes\\\",\\n    \\\"Bionic Spine\\\",\\n    \\\"Bionic Legs\\\",\\n    \\\"Speech Enhancement\\\",\\n    \\\"The Shadow's Simulacrum\\\",\\n    \\\"Graphene BrachiBlades Upgrade\\\"\\n  ],\\n  \\\"The Dark Army\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"HemoRecirculator\\\",\\n    \\\"Augmented Targeting I\\\",\\n    \\\"Augmented Targeting II\\\",\\n    \\\"Augmented Targeting III\\\",\\n    \\\"Combat Rib I\\\",\\n    \\\"Combat Rib II\\\",\\n    \\\"Combat Rib III\\\",\\n    \\\"Nanofiber Weave\\\",\\n    \\\"Wired Reflexes\\\",\\n    \\\"The Shadow's Simulacrum\\\",\\n    \\\"Power Recirculation Core\\\",\\n    \\\"Graphene Bionic Arms Upgrade\\\"\\n  ],\\n  \\\"The Syndicate\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"HemoRecirculator\\\",\\n    \\\"Augmented Targeting I\\\",\\n    \\\"Augmented Targeting II\\\",\\n    \\\"Augmented Targeting III\\\",\\n    \\\"Combat Rib I\\\",\\n    \\\"Combat Rib II\\\",\\n    \\\"Combat Rib III\\\",\\n    \\\"Nanofiber Weave\\\",\\n    \\\"NEMEAN Subdermal Weave\\\",\\n    \\\"Wired Reflexes\\\",\\n    \\\"Bionic Spine\\\",\\n    \\\"Bionic Legs\\\",\\n    \\\"ADR-V1 Pheromone Gene\\\",\\n    \\\"The Shadow's Simulacrum\\\",\\n    \\\"Power Recirculation Core\\\",\\n    \\\"BrachiBlades\\\"\\n  ],\\n  \\\"Silhouette\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Speech Processor Implant\\\",\\n    \\\"TITN-41 Gene-Modification Injection\\\",\\n    \\\"ADR-V2 Pheromone Gene\\\"\\n  ],\\n  \\\"Tetrads\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"HemoRecirculator\\\",\\n    \\\"LuminCloaking-V1 Skin Implant\\\",\\n    \\\"LuminCloaking-V2 Skin Implant\\\",\\n    \\\"Power Recirculation Core\\\",\\n    \\\"Bionic Arms\\\"\\n  ],\\n  \\\"Slum Snakes\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Augmented Targeting I\\\",\\n    \\\"Combat Rib I\\\",\\n    \\\"Wired Reflexes\\\",\\n    \\\"LuminCloaking-V1 Skin Implant\\\",\\n    \\\"LuminCloaking-V2 Skin Implant\\\",\\n    \\\"SmartSonar Implant\\\"\\n  ],\\n  \\\"Netburners\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Hacknet Node CPU Architecture Neural-Upload\\\",\\n    \\\"Hacknet Node Cache Architecture Neural-Upload\\\",\\n    \\\"Hacknet Node NIC Architecture Neural-Upload\\\",\\n    \\\"Hacknet Node Kernel Direct-Neural Interface\\\",\\n    \\\"Hacknet Node Core Direct-Neural Interface\\\"\\n  ],\\n  \\\"Tian Di Hui\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Nanofiber Weave\\\",\\n    \\\"Wired Reflexes\\\",\\n    \\\"Speech Processor Implant\\\",\\n    \\\"Nuoptimal Nootropic Injector Implant\\\",\\n    \\\"Speech Enhancement\\\",\\n    \\\"ADR-V1 Pheromone Gene\\\",\\n    \\\"Social Negotiation Assistant (S.N.A)\\\",\\n    \\\"Neuroreceptor Management Implant\\\"\\n  ],\\n  \\\"CyberSec\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"BitWire\\\",\\n    \\\"Synaptic Enhancement Implant\\\",\\n    \\\"Cranial Signal Processors - Gen I\\\",\\n    \\\"Cranial Signal Processors - Gen II\\\",\\n    \\\"Neurotrainer I\\\"\\n  ],\\n  \\\"Bladeburners\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"EsperTech Bladeburner Eyewear\\\",\\n    \\\"EMS-4 Recombination\\\",\\n    \\\"ORION-MKIV Shoulder\\\",\\n    \\\"Hyperion Plasma Cannon V1\\\",\\n    \\\"Hyperion Plasma Cannon V2\\\",\\n    \\\"GOLEM Serum\\\",\\n    \\\"Vangelis Virus\\\",\\n    \\\"Vangelis Virus 3.0\\\",\\n    \\\"I.N.T.E.R.L.I.N.K.E.D\\\",\\n    \\\"Blade's Runners\\\",\\n    \\\"BLADE-51b Tesla Armor\\\",\\n    \\\"BLADE-51b Tesla Armor: Power Cells Upgrade\\\",\\n    \\\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\\\",\\n    \\\"BLADE-51b Tesla Armor: Unibeam Upgrade\\\",\\n    \\\"BLADE-51b Tesla Armor: Omnibeam Upgrade\\\",\\n    \\\"BLADE-51b Tesla Armor: IPU Upgrade\\\",\\n    \\\"The Blade's Simulacrum\\\"\\n  ]\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/getOwnedAugmentations.txt\",\"text\":\"[]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/augRepReq.txt\",\"text\":\"{\\n  \\\"NeuroFlux Governor\\\": 500,\\n  \\\"Synthetic Heart\\\": 750000,\\n  \\\"Synfibril Muscle\\\": 437500,\\n  \\\"NEMEAN Subdermal Weave\\\": 875000,\\n  \\\"Embedded Netburner Module Core V3 Upgrade\\\": 1750000,\\n  \\\"Embedded Netburner Module Analyze Engine\\\": 625000,\\n  \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\": 1000000,\\n  \\\"QLink\\\": 1875000,\\n  \\\"The Red Pill\\\": 2500000,\\n  \\\"Augmented Targeting III\\\": 27500,\\n  \\\"Combat Rib III\\\": 35000,\\n  \\\"Graphene Bone Lacings\\\": 1125000,\\n  \\\"SPTN-97 Gene Modification\\\": 1250000,\\n  \\\"Graphene Bionic Spine Upgrade\\\": 1625000,\\n  \\\"Graphene Bionic Legs Upgrade\\\": 750000,\\n  \\\"Embedded Netburner Module\\\": 15000,\\n  \\\"Embedded Netburner Module Core Implant\\\": 175000,\\n  \\\"Embedded Netburner Module Core V2 Upgrade\\\": 1000000,\\n  \\\"PC Direct-Neural Interface\\\": 375000,\\n  \\\"PC Direct-Neural Interface Optimization Submodule\\\": 500000,\\n  \\\"ECorp HVMind Implant\\\": 1500000,\\n  \\\"ADR-V1 Pheromone Gene\\\": 3750,\\n  \\\"CordiARC Fusion Reactor\\\": 1125000,\\n  \\\"Enhanced Social Interaction Implant\\\": 375000,\\n  \\\"Neuralstimulator\\\": 50000,\\n  \\\"Nuoptimal Nootropic Injector Implant\\\": 5000,\\n  \\\"Speech Enhancement\\\": 2500,\\n  \\\"FocusWire\\\": 75000,\\n  \\\"ADR-V2 Pheromone Gene\\\": 62500,\\n  \\\"SmartJaw\\\": 375000,\\n  \\\"Augmented Targeting I\\\": 5000,\\n  \\\"Augmented Targeting II\\\": 8750,\\n  \\\"Combat Rib I\\\": 7500,\\n  \\\"Combat Rib II\\\": 18750,\\n  \\\"Nanofiber Weave\\\": 37500,\\n  \\\"Bionic Spine\\\": 45000,\\n  \\\"Bionic Legs\\\": 150000,\\n  \\\"HyperSight Corneal Implant\\\": 150000,\\n  \\\"Neotra\\\": 562500,\\n  \\\"Neurotrainer III\\\": 25000,\\n  \\\"Power Recirculation Core\\\": 25000,\\n  \\\"Xanipher\\\": 875000,\\n  \\\"Hydroflame Left Arm\\\": 1250000,\\n  \\\"Neuronal Densification\\\": 187500,\\n  \\\"nextSENS Gene Modification\\\": 437500,\\n  \\\"OmniTek InfoLoad\\\": 625000,\\n  \\\"Photosynthetic Cells\\\": 562500,\\n  \\\"Artificial Bio-neural Network Implant\\\": 275000,\\n  \\\"Enhanced Myelin Sheathing\\\": 100000,\\n  \\\"PC Direct-Neural Interface NeuroNet Injector\\\": 1500000,\\n  \\\"DataJack\\\": 112500,\\n  \\\"Neural Accelerator\\\": 200000,\\n  \\\"Cranial Signal Processors - Gen III\\\": 50000,\\n  \\\"Cranial Signal Processors - Gen IV\\\": 125000,\\n  \\\"Cranial Signal Processors - Gen V\\\": 250000,\\n  \\\"Neurotrainer II\\\": 10000,\\n  \\\"BitRunners Neurolink\\\": 875000,\\n  \\\"Artificial Synaptic Potentiation\\\": 6250,\\n  \\\"The Black Hand\\\": 100000,\\n  \\\"BitWire\\\": 3750,\\n  \\\"Neural-Retention Enhancement\\\": 20000,\\n  \\\"Cranial Signal Processors - Gen I\\\": 10000,\\n  \\\"Cranial Signal Processors - Gen II\\\": 18750,\\n  \\\"CRTX42-AA Gene Modification\\\": 45000,\\n  \\\"Wired Reflexes\\\": 1250,\\n  \\\"Speech Processor Implant\\\": 7500,\\n  \\\"Synaptic Enhancement Implant\\\": 2000,\\n  \\\"Neurotrainer I\\\": 1000,\\n  \\\"PCMatrix\\\": 100000,\\n  \\\"Neuregen Gene Modification\\\": 37500,\\n  \\\"INFRARET Enhancement\\\": 7500,\\n  \\\"NutriGen Implant\\\": 6250,\\n  \\\"CashRoot Starter Kit\\\": 12500,\\n  \\\"DermaForce Particle Barrier\\\": 15000,\\n  \\\"Unstable Circadian Modulator\\\": 362500,\\n  \\\"The Shadow's Simulacrum\\\": 37500,\\n  \\\"Graphene BrachiBlades Upgrade\\\": 225000,\\n  \\\"HemoRecirculator\\\": 10000,\\n  \\\"Graphene Bionic Arms Upgrade\\\": 500000,\\n  \\\"BrachiBlades\\\": 12500,\\n  \\\"TITN-41 Gene-Modification Injection\\\": 25000,\\n  \\\"LuminCloaking-V1 Skin Implant\\\": 1500,\\n  \\\"LuminCloaking-V2 Skin Implant\\\": 5000,\\n  \\\"Bionic Arms\\\": 62500,\\n  \\\"SmartSonar Implant\\\": 22500,\\n  \\\"Hacknet Node CPU Architecture Neural-Upload\\\": 3750,\\n  \\\"Hacknet Node Cache Architecture Neural-Upload\\\": 2500,\\n  \\\"Hacknet Node NIC Architecture Neural-Upload\\\": 1875,\\n  \\\"Hacknet Node Kernel Direct-Neural Interface\\\": 7500,\\n  \\\"Hacknet Node Core Direct-Neural Interface\\\": 12500,\\n  \\\"Social Negotiation Assistant (S.N.A)\\\": 6250,\\n  \\\"Neuroreceptor Management Implant\\\": 75000,\\n  \\\"EsperTech Bladeburner Eyewear\\\": 1250,\\n  \\\"EMS-4 Recombination\\\": 2500,\\n  \\\"ORION-MKIV Shoulder\\\": 6250,\\n  \\\"Hyperion Plasma Cannon V1\\\": 12500,\\n  \\\"Hyperion Plasma Cannon V2\\\": 25000,\\n  \\\"GOLEM Serum\\\": 31250,\\n  \\\"Vangelis Virus\\\": 18750,\\n  \\\"Vangelis Virus 3.0\\\": 37500,\\n  \\\"I.N.T.E.R.L.I.N.K.E.D\\\": 25000,\\n  \\\"Blade's Runners\\\": 20000,\\n  \\\"BLADE-51b Tesla Armor\\\": 12500,\\n  \\\"BLADE-51b Tesla Armor: Power Cells Upgrade\\\": 18750,\\n  \\\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\\\": 21250,\\n  \\\"BLADE-51b Tesla Armor: Unibeam Upgrade\\\": 31250,\\n  \\\"BLADE-51b Tesla Armor: Omnibeam Upgrade\\\": 62500,\\n  \\\"BLADE-51b Tesla Armor: IPU Upgrade\\\": 15000,\\n  \\\"The Blade's Simulacrum\\\": 1250\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/augStats.txt\",\"text\":\"{\\n  \\\"NeuroFlux Governor\\\": {\\n    \\\"hacking_mult\\\": 1.01000004,\\n    \\\"strength_mult\\\": 1.01000004,\\n    \\\"defense_mult\\\": 1.01000004,\\n    \\\"dexterity_mult\\\": 1.01000004,\\n    \\\"agility_mult\\\": 1.01000004,\\n    \\\"charisma_mult\\\": 1.01000004,\\n    \\\"hacking_exp_mult\\\": 1.01000004,\\n    \\\"strength_exp_mult\\\": 1.01000004,\\n    \\\"defense_exp_mult\\\": 1.01000004,\\n    \\\"dexterity_exp_mult\\\": 1.01000004,\\n    \\\"agility_exp_mult\\\": 1.01000004,\\n    \\\"charisma_exp_mult\\\": 1.01000004,\\n    \\\"hacking_chance_mult\\\": 1.01000004,\\n    \\\"hacking_speed_mult\\\": 1.01000004,\\n    \\\"hacking_money_mult\\\": 1.01000004,\\n    \\\"hacking_grow_mult\\\": 1.01000004,\\n    \\\"company_rep_mult\\\": 1.01000004,\\n    \\\"faction_rep_mult\\\": 1.01000004,\\n    \\\"crime_money_mult\\\": 1.01000004,\\n    \\\"crime_success_mult\\\": 1.01000004,\\n    \\\"work_money_mult\\\": 1.01000004,\\n    \\\"hacknet_node_money_mult\\\": 1.01000004,\\n    \\\"hacknet_node_purchase_cost_mult\\\": 0.9900989706891496,\\n    \\\"hacknet_node_ram_cost_mult\\\": 0.9900989706891496,\\n    \\\"hacknet_node_core_cost_mult\\\": 0.9900989706891496,\\n    \\\"hacknet_node_level_cost_mult\\\": 0.9900989706891496\\n  },\\n  \\\"Synthetic Heart\\\": {\\n    \\\"strength_mult\\\": 1.5,\\n    \\\"agility_mult\\\": 1.5\\n  },\\n  \\\"Synfibril Muscle\\\": {\\n    \\\"strength_mult\\\": 1.3,\\n    \\\"defense_mult\\\": 1.3\\n  },\\n  \\\"NEMEAN Subdermal Weave\\\": {\\n    \\\"defense_mult\\\": 2.2\\n  },\\n  \\\"Embedded Netburner Module Core V3 Upgrade\\\": {\\n    \\\"hacking_mult\\\": 1.1,\\n    \\\"hacking_exp_mult\\\": 1.25,\\n    \\\"hacking_chance_mult\\\": 1.1,\\n    \\\"hacking_speed_mult\\\": 1.05,\\n    \\\"hacking_money_mult\\\": 1.4\\n  },\\n  \\\"Embedded Netburner Module Analyze Engine\\\": {\\n    \\\"hacking_speed_mult\\\": 1.1\\n  },\\n  \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\": {\\n    \\\"hacking_chance_mult\\\": 1.2,\\n    \\\"hacking_money_mult\\\": 1.4\\n  },\\n  \\\"QLink\\\": {\\n    \\\"hacking_mult\\\": 1.75,\\n    \\\"hacking_chance_mult\\\": 2.5,\\n    \\\"hacking_speed_mult\\\": 2,\\n    \\\"hacking_money_mult\\\": 4\\n  },\\n  \\\"The Red Pill\\\": {},\\n  \\\"Augmented Targeting III\\\": {\\n    \\\"dexterity_mult\\\": 1.3\\n  },\\n  \\\"Combat Rib III\\\": {\\n    \\\"strength_mult\\\": 1.18,\\n    \\\"defense_mult\\\": 1.18\\n  },\\n  \\\"Graphene Bone Lacings\\\": {\\n    \\\"strength_mult\\\": 1.7,\\n    \\\"defense_mult\\\": 1.7\\n  },\\n  \\\"SPTN-97 Gene Modification\\\": {\\n    \\\"hacking_mult\\\": 1.15,\\n    \\\"strength_mult\\\": 1.75,\\n    \\\"defense_mult\\\": 1.75,\\n    \\\"dexterity_mult\\\": 1.75,\\n    \\\"agility_mult\\\": 1.75\\n  },\\n  \\\"Graphene Bionic Spine Upgrade\\\": {\\n    \\\"strength_mult\\\": 1.6,\\n    \\\"defense_mult\\\": 1.6,\\n    \\\"dexterity_mult\\\": 1.6,\\n    \\\"agility_mult\\\": 1.6\\n  },\\n  \\\"Graphene Bionic Legs Upgrade\\\": {\\n    \\\"agility_mult\\\": 2.5\\n  },\\n  \\\"Embedded Netburner Module\\\": {\\n    \\\"hacking_mult\\\": 1.08\\n  },\\n  \\\"Embedded Netburner Module Core Implant\\\": {\\n    \\\"hacking_mult\\\": 1.07,\\n    \\\"hacking_exp_mult\\\": 1.07,\\n    \\\"hacking_chance_mult\\\": 1.03,\\n    \\\"hacking_speed_mult\\\": 1.03,\\n    \\\"hacking_money_mult\\\": 1.1\\n  },\\n  \\\"Embedded Netburner Module Core V2 Upgrade\\\": {\\n    \\\"hacking_mult\\\": 1.08,\\n    \\\"hacking_exp_mult\\\": 1.15,\\n    \\\"hacking_chance_mult\\\": 1.05,\\n    \\\"hacking_speed_mult\\\": 1.05,\\n    \\\"hacking_money_mult\\\": 1.3\\n  },\\n  \\\"PC Direct-Neural Interface\\\": {\\n    \\\"hacking_mult\\\": 1.08,\\n    \\\"company_rep_mult\\\": 1.3\\n  },\\n  \\\"PC Direct-Neural Interface Optimization Submodule\\\": {\\n    \\\"hacking_mult\\\": 1.1,\\n    \\\"company_rep_mult\\\": 1.75\\n  },\\n  \\\"ECorp HVMind Implant\\\": {\\n    \\\"hacking_grow_mult\\\": 3\\n  },\\n  \\\"ADR-V1 Pheromone Gene\\\": {\\n    \\\"company_rep_mult\\\": 1.1,\\n    \\\"faction_rep_mult\\\": 1.1\\n  },\\n  \\\"CordiARC Fusion Reactor\\\": {\\n    \\\"strength_mult\\\": 1.35,\\n    \\\"defense_mult\\\": 1.35,\\n    \\\"dexterity_mult\\\": 1.35,\\n    \\\"agility_mult\\\": 1.35,\\n    \\\"strength_exp_mult\\\": 1.35,\\n    \\\"defense_exp_mult\\\": 1.35,\\n    \\\"dexterity_exp_mult\\\": 1.35,\\n    \\\"agility_exp_mult\\\": 1.35\\n  },\\n  \\\"Enhanced Social Interaction Implant\\\": {\\n    \\\"charisma_mult\\\": 1.6,\\n    \\\"charisma_exp_mult\\\": 1.6\\n  },\\n  \\\"Neuralstimulator\\\": {\\n    \\\"hacking_exp_mult\\\": 1.12,\\n    \\\"hacking_chance_mult\\\": 1.1,\\n    \\\"hacking_speed_mult\\\": 1.02\\n  },\\n  \\\"Nuoptimal Nootropic Injector Implant\\\": {\\n    \\\"company_rep_mult\\\": 1.2\\n  },\\n  \\\"Speech Enhancement\\\": {\\n    \\\"charisma_mult\\\": 1.1,\\n    \\\"company_rep_mult\\\": 1.1\\n  },\\n  \\\"FocusWire\\\": {\\n    \\\"hacking_exp_mult\\\": 1.05,\\n    \\\"strength_exp_mult\\\": 1.05,\\n    \\\"defense_exp_mult\\\": 1.05,\\n    \\\"dexterity_exp_mult\\\": 1.05,\\n    \\\"agility_exp_mult\\\": 1.05,\\n    \\\"charisma_exp_mult\\\": 1.05,\\n    \\\"company_rep_mult\\\": 1.1,\\n    \\\"work_money_mult\\\": 1.2\\n  },\\n  \\\"ADR-V2 Pheromone Gene\\\": {\\n    \\\"company_rep_mult\\\": 1.2,\\n    \\\"faction_rep_mult\\\": 1.2\\n  },\\n  \\\"SmartJaw\\\": {\\n    \\\"charisma_mult\\\": 1.5,\\n    \\\"charisma_exp_mult\\\": 1.5,\\n    \\\"company_rep_mult\\\": 1.25,\\n    \\\"faction_rep_mult\\\": 1.25\\n  },\\n  \\\"Augmented Targeting I\\\": {\\n    \\\"dexterity_mult\\\": 1.1\\n  },\\n  \\\"Augmented Targeting II\\\": {\\n    \\\"dexterity_mult\\\": 1.2\\n  },\\n  \\\"Combat Rib I\\\": {\\n    \\\"strength_mult\\\": 1.1,\\n    \\\"defense_mult\\\": 1.1\\n  },\\n  \\\"Combat Rib II\\\": {\\n    \\\"strength_mult\\\": 1.14,\\n    \\\"defense_mult\\\": 1.14\\n  },\\n  \\\"Nanofiber Weave\\\": {\\n    \\\"strength_mult\\\": 1.2,\\n    \\\"defense_mult\\\": 1.2\\n  },\\n  \\\"Bionic Spine\\\": {\\n    \\\"strength_mult\\\": 1.15,\\n    \\\"defense_mult\\\": 1.15,\\n    \\\"dexterity_mult\\\": 1.15,\\n    \\\"agility_mult\\\": 1.15\\n  },\\n  \\\"Bionic Legs\\\": {\\n    \\\"agility_mult\\\": 1.6\\n  },\\n  \\\"HyperSight Corneal Implant\\\": {\\n    \\\"dexterity_mult\\\": 1.4,\\n    \\\"hacking_speed_mult\\\": 1.03,\\n    \\\"hacking_money_mult\\\": 1.1\\n  },\\n  \\\"Neotra\\\": {\\n    \\\"strength_mult\\\": 1.55,\\n    \\\"defense_mult\\\": 1.55\\n  },\\n  \\\"Neurotrainer III\\\": {\\n    \\\"hacking_exp_mult\\\": 1.2,\\n    \\\"strength_exp_mult\\\": 1.2,\\n    \\\"defense_exp_mult\\\": 1.2,\\n    \\\"dexterity_exp_mult\\\": 1.2,\\n    \\\"agility_exp_mult\\\": 1.2,\\n    \\\"charisma_exp_mult\\\": 1.2\\n  },\\n  \\\"Power Recirculation Core\\\": {\\n    \\\"hacking_mult\\\": 1.05,\\n    \\\"strength_mult\\\": 1.05,\\n    \\\"defense_mult\\\": 1.05,\\n    \\\"dexterity_mult\\\": 1.05,\\n    \\\"agility_mult\\\": 1.05,\\n    \\\"charisma_mult\\\": 1.05,\\n    \\\"hacking_exp_mult\\\": 1.1,\\n    \\\"strength_exp_mult\\\": 1.1,\\n    \\\"defense_exp_mult\\\": 1.1,\\n    \\\"dexterity_exp_mult\\\": 1.1,\\n    \\\"agility_exp_mult\\\": 1.1,\\n    \\\"charisma_exp_mult\\\": 1.1\\n  },\\n  \\\"Xanipher\\\": {\\n    \\\"hacking_mult\\\": 1.2,\\n    \\\"strength_mult\\\": 1.2,\\n    \\\"defense_mult\\\": 1.2,\\n    \\\"dexterity_mult\\\": 1.2,\\n    \\\"agility_mult\\\": 1.2,\\n    \\\"charisma_mult\\\": 1.2,\\n    \\\"hacking_exp_mult\\\": 1.15,\\n    \\\"strength_exp_mult\\\": 1.15,\\n    \\\"defense_exp_mult\\\": 1.15,\\n    \\\"dexterity_exp_mult\\\": 1.15,\\n    \\\"agility_exp_mult\\\": 1.15,\\n    \\\"charisma_exp_mult\\\": 1.15\\n  },\\n  \\\"Hydroflame Left Arm\\\": {\\n    \\\"strength_mult\\\": 2.7\\n  },\\n  \\\"Neuronal Densification\\\": {\\n    \\\"hacking_mult\\\": 1.15,\\n    \\\"hacking_exp_mult\\\": 1.1,\\n    \\\"hacking_speed_mult\\\": 1.03\\n  },\\n  \\\"nextSENS Gene Modification\\\": {\\n    \\\"hacking_mult\\\": 1.2,\\n    \\\"strength_mult\\\": 1.2,\\n    \\\"defense_mult\\\": 1.2,\\n    \\\"dexterity_mult\\\": 1.2,\\n    \\\"agility_mult\\\": 1.2,\\n    \\\"charisma_mult\\\": 1.2\\n  },\\n  \\\"OmniTek InfoLoad\\\": {\\n    \\\"hacking_mult\\\": 1.2,\\n    \\\"hacking_exp_mult\\\": 1.25\\n  },\\n  \\\"Photosynthetic Cells\\\": {\\n    \\\"strength_mult\\\": 1.4,\\n    \\\"defense_mult\\\": 1.4,\\n    \\\"agility_mult\\\": 1.4\\n  },\\n  \\\"Artificial Bio-neural Network Implant\\\": {\\n    \\\"hacking_mult\\\": 1.12,\\n    \\\"hacking_speed_mult\\\": 1.03,\\n    \\\"hacking_money_mult\\\": 1.15\\n  },\\n  \\\"Enhanced Myelin Sheathing\\\": {\\n    \\\"hacking_mult\\\": 1.08,\\n    \\\"hacking_exp_mult\\\": 1.1,\\n    \\\"hacking_speed_mult\\\": 1.03\\n  },\\n  \\\"PC Direct-Neural Interface NeuroNet Injector\\\": {\\n    \\\"hacking_mult\\\": 1.1,\\n    \\\"hacking_speed_mult\\\": 1.05,\\n    \\\"company_rep_mult\\\": 2\\n  },\\n  \\\"DataJack\\\": {\\n    \\\"hacking_money_mult\\\": 1.25\\n  },\\n  \\\"Neural Accelerator\\\": {\\n    \\\"hacking_mult\\\": 1.1,\\n    \\\"hacking_exp_mult\\\": 1.15,\\n    \\\"hacking_money_mult\\\": 1.2\\n  },\\n  \\\"Cranial Signal Processors - Gen III\\\": {\\n    \\\"hacking_mult\\\": 1.09,\\n    \\\"hacking_speed_mult\\\": 1.02,\\n    \\\"hacking_money_mult\\\": 1.15\\n  },\\n  \\\"Cranial Signal Processors - Gen IV\\\": {\\n    \\\"hacking_speed_mult\\\": 1.02,\\n    \\\"hacking_money_mult\\\": 1.2,\\n    \\\"hacking_grow_mult\\\": 1.25\\n  },\\n  \\\"Cranial Signal Processors - Gen V\\\": {\\n    \\\"hacking_mult\\\": 1.3,\\n    \\\"hacking_money_mult\\\": 1.25,\\n    \\\"hacking_grow_mult\\\": 1.75\\n  },\\n  \\\"Neurotrainer II\\\": {\\n    \\\"hacking_exp_mult\\\": 1.15,\\n    \\\"strength_exp_mult\\\": 1.15,\\n    \\\"defense_exp_mult\\\": 1.15,\\n    \\\"dexterity_exp_mult\\\": 1.15,\\n    \\\"agility_exp_mult\\\": 1.15,\\n    \\\"charisma_exp_mult\\\": 1.15\\n  },\\n  \\\"BitRunners Neurolink\\\": {\\n    \\\"hacking_mult\\\": 1.15,\\n    \\\"hacking_exp_mult\\\": 1.2,\\n    \\\"hacking_chance_mult\\\": 1.1,\\n    \\\"hacking_speed_mult\\\": 1.05\\n  },\\n  \\\"Artificial Synaptic Potentiation\\\": {\\n    \\\"hacking_exp_mult\\\": 1.05,\\n    \\\"hacking_chance_mult\\\": 1.05,\\n    \\\"hacking_speed_mult\\\": 1.02\\n  },\\n  \\\"The Black Hand\\\": {\\n    \\\"hacking_mult\\\": 1.1,\\n    \\\"strength_mult\\\": 1.15,\\n    \\\"dexterity_mult\\\": 1.15,\\n    \\\"hacking_speed_mult\\\": 1.02,\\n    \\\"hacking_money_mult\\\": 1.1\\n  },\\n  \\\"BitWire\\\": {\\n    \\\"hacking_mult\\\": 1.05\\n  },\\n  \\\"Neural-Retention Enhancement\\\": {\\n    \\\"hacking_exp_mult\\\": 1.25\\n  },\\n  \\\"Cranial Signal Processors - Gen I\\\": {\\n    \\\"hacking_mult\\\": 1.05,\\n    \\\"hacking_speed_mult\\\": 1.01\\n  },\\n  \\\"Cranial Signal Processors - Gen II\\\": {\\n    \\\"hacking_mult\\\": 1.07,\\n    \\\"hacking_chance_mult\\\": 1.05,\\n    \\\"hacking_speed_mult\\\": 1.02\\n  },\\n  \\\"CRTX42-AA Gene Modification\\\": {\\n    \\\"hacking_mult\\\": 1.08,\\n    \\\"hacking_exp_mult\\\": 1.15\\n  },\\n  \\\"Wired Reflexes\\\": {\\n    \\\"dexterity_mult\\\": 1.05,\\n    \\\"agility_mult\\\": 1.05\\n  },\\n  \\\"Speech Processor Implant\\\": {\\n    \\\"charisma_mult\\\": 1.2\\n  },\\n  \\\"Synaptic Enhancement Implant\\\": {\\n    \\\"hacking_speed_mult\\\": 1.03\\n  },\\n  \\\"Neurotrainer I\\\": {\\n    \\\"hacking_exp_mult\\\": 1.1,\\n    \\\"strength_exp_mult\\\": 1.1,\\n    \\\"defense_exp_mult\\\": 1.1,\\n    \\\"dexterity_exp_mult\\\": 1.1,\\n    \\\"agility_exp_mult\\\": 1.1,\\n    \\\"charisma_exp_mult\\\": 1.1\\n  },\\n  \\\"PCMatrix\\\": {\\n    \\\"charisma_mult\\\": 1.0777,\\n    \\\"charisma_exp_mult\\\": 1.0777,\\n    \\\"company_rep_mult\\\": 1.0777,\\n    \\\"faction_rep_mult\\\": 1.0777,\\n    \\\"crime_money_mult\\\": 1.0777,\\n    \\\"crime_success_mult\\\": 1.0777,\\n    \\\"work_money_mult\\\": 1.777\\n  },\\n  \\\"Neuregen Gene Modification\\\": {\\n    \\\"hacking_exp_mult\\\": 1.4\\n  },\\n  \\\"INFRARET Enhancement\\\": {\\n    \\\"dexterity_mult\\\": 1.1,\\n    \\\"crime_money_mult\\\": 1.1,\\n    \\\"crime_success_mult\\\": 1.25\\n  },\\n  \\\"NutriGen Implant\\\": {\\n    \\\"strength_exp_mult\\\": 1.2,\\n    \\\"defense_exp_mult\\\": 1.2,\\n    \\\"dexterity_exp_mult\\\": 1.2,\\n    \\\"agility_exp_mult\\\": 1.2\\n  },\\n  \\\"CashRoot Starter Kit\\\": {},\\n  \\\"DermaForce Particle Barrier\\\": {\\n    \\\"defense_mult\\\": 1.4\\n  },\\n  \\\"Unstable Circadian Modulator\\\": {\\n    \\\"hacking_mult\\\": 1.15,\\n    \\\"hacking_exp_mult\\\": 2\\n  },\\n  \\\"The Shadow's Simulacrum\\\": {\\n    \\\"company_rep_mult\\\": 1.15,\\n    \\\"faction_rep_mult\\\": 1.15\\n  },\\n  \\\"Graphene BrachiBlades Upgrade\\\": {\\n    \\\"strength_mult\\\": 1.4,\\n    \\\"defense_mult\\\": 1.4,\\n    \\\"crime_money_mult\\\": 1.3,\\n    \\\"crime_success_mult\\\": 1.1\\n  },\\n  \\\"HemoRecirculator\\\": {\\n    \\\"strength_mult\\\": 1.08,\\n    \\\"defense_mult\\\": 1.08,\\n    \\\"dexterity_mult\\\": 1.08,\\n    \\\"agility_mult\\\": 1.08\\n  },\\n  \\\"Graphene Bionic Arms Upgrade\\\": {\\n    \\\"strength_mult\\\": 1.85,\\n    \\\"dexterity_mult\\\": 1.85\\n  },\\n  \\\"BrachiBlades\\\": {\\n    \\\"strength_mult\\\": 1.15,\\n    \\\"defense_mult\\\": 1.15,\\n    \\\"crime_money_mult\\\": 1.15,\\n    \\\"crime_success_mult\\\": 1.1\\n  },\\n  \\\"TITN-41 Gene-Modification Injection\\\": {\\n    \\\"charisma_mult\\\": 1.15,\\n    \\\"charisma_exp_mult\\\": 1.15\\n  },\\n  \\\"LuminCloaking-V1 Skin Implant\\\": {\\n    \\\"agility_mult\\\": 1.05,\\n    \\\"crime_money_mult\\\": 1.1\\n  },\\n  \\\"LuminCloaking-V2 Skin Implant\\\": {\\n    \\\"defense_mult\\\": 1.1,\\n    \\\"agility_mult\\\": 1.1,\\n    \\\"crime_money_mult\\\": 1.25\\n  },\\n  \\\"Bionic Arms\\\": {\\n    \\\"strength_mult\\\": 1.3,\\n    \\\"dexterity_mult\\\": 1.3\\n  },\\n  \\\"SmartSonar Implant\\\": {\\n    \\\"dexterity_mult\\\": 1.1,\\n    \\\"dexterity_exp_mult\\\": 1.15,\\n    \\\"crime_money_mult\\\": 1.25\\n  },\\n  \\\"Hacknet Node CPU Architecture Neural-Upload\\\": {\\n    \\\"hacknet_node_money_mult\\\": 1.15,\\n    \\\"hacknet_node_purchase_cost_mult\\\": 0.85\\n  },\\n  \\\"Hacknet Node Cache Architecture Neural-Upload\\\": {\\n    \\\"hacknet_node_money_mult\\\": 1.1,\\n    \\\"hacknet_node_level_cost_mult\\\": 0.85\\n  },\\n  \\\"Hacknet Node NIC Architecture Neural-Upload\\\": {\\n    \\\"hacknet_node_money_mult\\\": 1.1,\\n    \\\"hacknet_node_purchase_cost_mult\\\": 0.9\\n  },\\n  \\\"Hacknet Node Kernel Direct-Neural Interface\\\": {\\n    \\\"hacknet_node_money_mult\\\": 1.25\\n  },\\n  \\\"Hacknet Node Core Direct-Neural Interface\\\": {\\n    \\\"hacknet_node_money_mult\\\": 1.45\\n  },\\n  \\\"Social Negotiation Assistant (S.N.A)\\\": {\\n    \\\"company_rep_mult\\\": 1.15,\\n    \\\"faction_rep_mult\\\": 1.15,\\n    \\\"work_money_mult\\\": 1.1\\n  },\\n  \\\"Neuroreceptor Management Implant\\\": {},\\n  \\\"EsperTech Bladeburner Eyewear\\\": {\\n    \\\"dexterity_mult\\\": 1.05,\\n    \\\"bladeburner_success_chance_mult\\\": 1.03\\n  },\\n  \\\"EMS-4 Recombination\\\": {\\n    \\\"bladeburner_stamina_gain_mult\\\": 1.02,\\n    \\\"bladeburner_analysis_mult\\\": 1.05,\\n    \\\"bladeburner_success_chance_mult\\\": 1.03\\n  },\\n  \\\"ORION-MKIV Shoulder\\\": {\\n    \\\"strength_mult\\\": 1.05,\\n    \\\"defense_mult\\\": 1.05,\\n    \\\"dexterity_mult\\\": 1.05,\\n    \\\"bladeburner_success_chance_mult\\\": 1.04\\n  },\\n  \\\"Hyperion Plasma Cannon V1\\\": {\\n    \\\"bladeburner_success_chance_mult\\\": 1.06\\n  },\\n  \\\"Hyperion Plasma Cannon V2\\\": {\\n    \\\"bladeburner_success_chance_mult\\\": 1.08\\n  },\\n  \\\"GOLEM Serum\\\": {\\n    \\\"strength_mult\\\": 1.07,\\n    \\\"defense_mult\\\": 1.07,\\n    \\\"dexterity_mult\\\": 1.07,\\n    \\\"agility_mult\\\": 1.07,\\n    \\\"bladeburner_stamina_gain_mult\\\": 1.05\\n  },\\n  \\\"Vangelis Virus\\\": {\\n    \\\"dexterity_exp_mult\\\": 1.1,\\n    \\\"bladeburner_analysis_mult\\\": 1.1,\\n    \\\"bladeburner_success_chance_mult\\\": 1.04\\n  },\\n  \\\"Vangelis Virus 3.0\\\": {\\n    \\\"defense_exp_mult\\\": 1.1,\\n    \\\"dexterity_exp_mult\\\": 1.1,\\n    \\\"bladeburner_analysis_mult\\\": 1.15,\\n    \\\"bladeburner_success_chance_mult\\\": 1.05\\n  },\\n  \\\"I.N.T.E.R.L.I.N.K.E.D\\\": {\\n    \\\"strength_exp_mult\\\": 1.05,\\n    \\\"defense_exp_mult\\\": 1.05,\\n    \\\"dexterity_exp_mult\\\": 1.05,\\n    \\\"agility_exp_mult\\\": 1.05,\\n    \\\"bladeburner_max_stamina_mult\\\": 1.1\\n  },\\n  \\\"Blade's Runners\\\": {\\n    \\\"agility_mult\\\": 1.05,\\n    \\\"bladeburner_max_stamina_mult\\\": 1.05,\\n    \\\"bladeburner_stamina_gain_mult\\\": 1.05\\n  },\\n  \\\"BLADE-51b Tesla Armor\\\": {\\n    \\\"strength_mult\\\": 1.04,\\n    \\\"defense_mult\\\": 1.04,\\n    \\\"dexterity_mult\\\": 1.04,\\n    \\\"agility_mult\\\": 1.04,\\n    \\\"bladeburner_stamina_gain_mult\\\": 1.02,\\n    \\\"bladeburner_success_chance_mult\\\": 1.03\\n  },\\n  \\\"BLADE-51b Tesla Armor: Power Cells Upgrade\\\": {\\n    \\\"bladeburner_max_stamina_mult\\\": 1.05,\\n    \\\"bladeburner_stamina_gain_mult\\\": 1.02,\\n    \\\"bladeburner_success_chance_mult\\\": 1.05\\n  },\\n  \\\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\\\": {\\n    \\\"defense_mult\\\": 1.05,\\n    \\\"bladeburner_success_chance_mult\\\": 1.06\\n  },\\n  \\\"BLADE-51b Tesla Armor: Unibeam Upgrade\\\": {\\n    \\\"bladeburner_success_chance_mult\\\": 1.08\\n  },\\n  \\\"BLADE-51b Tesla Armor: Omnibeam Upgrade\\\": {\\n    \\\"bladeburner_success_chance_mult\\\": 1.1\\n  },\\n  \\\"BLADE-51b Tesla Armor: IPU Upgrade\\\": {\\n    \\\"bladeburner_analysis_mult\\\": 1.15,\\n    \\\"bladeburner_success_chance_mult\\\": 1.02\\n  },\\n  \\\"The Blade's Simulacrum\\\": {}\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/sleeves_static.txt\",\"text\":\"{\\\"getNumSleeves\\\":8}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/n00dles.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"n00dles\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"52.1.4.2\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 4,\\n  \\\"organizationName\\\": \\\"Noodle Bar\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 1.5,\\n  \\\"hackDifficulty\\\": 1.5,\\n  \\\"minDifficulty\\\": 1,\\n  \\\"moneyAvailable\\\": 35000,\\n  \\\"moneyMax\\\": 350000,\\n  \\\"numOpenPortsRequired\\\": 0,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1,\\n  \\\"serverGrowth\\\": 3000\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/foodnstuff.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"foodnstuff\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"85.2.0.7\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\"FoodNStuff\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 15,\\n  \\\"hackDifficulty\\\": 15,\\n  \\\"minDifficulty\\\": 5,\\n  \\\"moneyAvailable\\\": 1000000,\\n  \\\"moneyMax\\\": 10000000,\\n  \\\"numOpenPortsRequired\\\": 0,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1,\\n  \\\"serverGrowth\\\": 5\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/zer0.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"zer0\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"53.0.1.1\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"ZER0 Nightclub\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 37.5,\\n  \\\"hackDifficulty\\\": 37.5,\\n  \\\"minDifficulty\\\": 13,\\n  \\\"moneyAvailable\\\": 3750000,\\n  \\\"moneyMax\\\": 37500000,\\n  \\\"numOpenPortsRequired\\\": 1,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 75,\\n  \\\"serverGrowth\\\": 40\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/sigma-cosmetics.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"sigma-cosmetics\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"36.7.9.7\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\"Sigma Cosmetics\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 15,\\n  \\\"hackDifficulty\\\": 15,\\n  \\\"minDifficulty\\\": 5,\\n  \\\"moneyAvailable\\\": 1150000,\\n  \\\"moneyMax\\\": 11500000,\\n  \\\"numOpenPortsRequired\\\": 0,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 5,\\n  \\\"serverGrowth\\\": 10\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/CSEC.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"CSEC\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"4.4.7.9\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 8,\\n  \\\"organizationName\\\": \\\"CyberSec\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 0,\\n  \\\"hackDifficulty\\\": 0,\\n  \\\"minDifficulty\\\": 1,\\n  \\\"moneyAvailable\\\": 0,\\n  \\\"moneyMax\\\": 0,\\n  \\\"numOpenPortsRequired\\\": 1,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 59,\\n  \\\"serverGrowth\\\": 0\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/phantasy.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"phantasy\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"61.3.1.4\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"Phantasy Club\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 30,\\n  \\\"hackDifficulty\\\": 30,\\n  \\\"minDifficulty\\\": 10,\\n  \\\"moneyAvailable\\\": 12000000,\\n  \\\"moneyMax\\\": 120000000,\\n  \\\"numOpenPortsRequired\\\": 2,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 100,\\n  \\\"serverGrowth\\\": 35\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/johnson-ortho.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"johnson-ortho\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"79.4.2.6\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Johnson Orthopedics\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 52.5,\\n  \\\"hackDifficulty\\\": 52.5,\\n  \\\"minDifficulty\\\": 18,\\n  \\\"moneyAvailable\\\": 42088404,\\n  \\\"moneyMax\\\": 420884040,\\n  \\\"numOpenPortsRequired\\\": 2,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 271,\\n  \\\"serverGrowth\\\": 48\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/summit-uni.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"summit-uni\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"98.6.1.5\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\"Summit University\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 76.5,\\n  \\\"hackDifficulty\\\": 76.5,\\n  \\\"minDifficulty\\\": 26,\\n  \\\"moneyAvailable\\\": 170370906.5,\\n  \\\"moneyMax\\\": 1703709065,\\n  \\\"numOpenPortsRequired\\\": 3,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 464,\\n  \\\"serverGrowth\\\": 58\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/rho-construction.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"rho-construction\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"52.4.2.7\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\"Rho Construction\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 72,\\n  \\\"hackDifficulty\\\": 72,\\n  \\\"minDifficulty\\\": 24,\\n  \\\"moneyAvailable\\\": 303213332.5,\\n  \\\"moneyMax\\\": 3032133325,\\n  \\\"numOpenPortsRequired\\\": 3,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 485,\\n  \\\"serverGrowth\\\": 60\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/galactic-cyber.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"galactic-cyber\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"45.9.9.5\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Galactic Cybersystems\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 94.5,\\n  \\\"hackDifficulty\\\": 94.5,\\n  \\\"minDifficulty\\\": 32,\\n  \\\"moneyAvailable\\\": 422627906.5,\\n  \\\"moneyMax\\\": 4226279065,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 866,\\n  \\\"serverGrowth\\\": 80\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/unitalife.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"unitalife\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"91.1.9.0\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"UnitaLife Group\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 118.5,\\n  \\\"hackDifficulty\\\": 118.5,\\n  \\\"minDifficulty\\\": 40,\\n  \\\"moneyAvailable\\\": 512928702,\\n  \\\"moneyMax\\\": 5129287020,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 781,\\n  \\\"serverGrowth\\\": 75\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/defcomm.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"defcomm\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"73.8.7.2\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"DefComm\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 133.5,\\n  \\\"hackDifficulty\\\": 133.5,\\n  \\\"minDifficulty\\\": 45,\\n  \\\"moneyAvailable\\\": 401919989,\\n  \\\"moneyMax\\\": 4019199890,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 951,\\n  \\\"serverGrowth\\\": 62\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/icarus.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"icarus\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"83.5.3.8\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Icarus Microsystems\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 138,\\n  \\\"hackDifficulty\\\": 138,\\n  \\\"minDifficulty\\\": 46,\\n  \\\"moneyAvailable\\\": 461232837,\\n  \\\"moneyMax\\\": 4612328370,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 850,\\n  \\\"serverGrowth\\\": 86\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/univ-energy.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"univ-energy\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"26.2.3.6\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 64,\\n  \\\"organizationName\\\": \\\"Universal Energy\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 123,\\n  \\\"hackDifficulty\\\": 123,\\n  \\\"minDifficulty\\\": 41,\\n  \\\"moneyAvailable\\\": 583392566.5,\\n  \\\"moneyMax\\\": 5833925665,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 805,\\n  \\\"serverGrowth\\\": 86\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/infocomm.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"infocomm\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"77.3.5.7\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"InfoComm\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 114,\\n  \\\"hackDifficulty\\\": 114,\\n  \\\"minDifficulty\\\": 38,\\n  \\\"moneyAvailable\\\": 420188951.5,\\n  \\\"moneyMax\\\": 4201889515,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 897,\\n  \\\"serverGrowth\\\": 56\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/global-pharm.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"global-pharm\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"46.2.1.1\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"Global Pharmaceuticals\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 123,\\n  \\\"hackDifficulty\\\": 123,\\n  \\\"minDifficulty\\\": 41,\\n  \\\"moneyAvailable\\\": 837873615.5,\\n  \\\"moneyMax\\\": 8378736155,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 834,\\n  \\\"serverGrowth\\\": 87\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/omnia.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"omnia\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"15.1.2.8\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"Omnia Cybersystems\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 139.5,\\n  \\\"hackDifficulty\\\": 139.5,\\n  \\\"minDifficulty\\\": 47,\\n  \\\"moneyAvailable\\\": 452290675,\\n  \\\"moneyMax\\\": 4522906750,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 873,\\n  \\\"serverGrowth\\\": 62\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/zeus-med.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"zeus-med\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"87.8.9.0\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Zeus Medical\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 121.5,\\n  \\\"hackDifficulty\\\": 121.5,\\n  \\\"minDifficulty\\\": 41,\\n  \\\"moneyAvailable\\\": 681247148.5,\\n  \\\"moneyMax\\\": 6812471485,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 826,\\n  \\\"serverGrowth\\\": 73\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/aevum-police.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"aevum-police\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"7.7.8.4\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\"Aevum Police Headquarters\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 114,\\n  \\\"hackDifficulty\\\": 114,\\n  \\\"minDifficulty\\\": 38,\\n  \\\"moneyAvailable\\\": 127371644.5,\\n  \\\"moneyMax\\\": 1273716445,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 406,\\n  \\\"serverGrowth\\\": 49\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/joesguns.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"joesguns\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"82.8.4.2\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\"Joe's Guns\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 22.5,\\n  \\\"hackDifficulty\\\": 22.5,\\n  \\\"minDifficulty\\\": 8,\\n  \\\"moneyAvailable\\\": 1250000,\\n  \\\"moneyMax\\\": 12500000,\\n  \\\"numOpenPortsRequired\\\": 0,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 10,\\n  \\\"serverGrowth\\\": 20\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/max-hardware.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"max-hardware\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"59.4.1.2\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"Max Hardware Store\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 22.5,\\n  \\\"hackDifficulty\\\": 22.5,\\n  \\\"minDifficulty\\\": 8,\\n  \\\"moneyAvailable\\\": 5000000,\\n  \\\"moneyMax\\\": 50000000,\\n  \\\"numOpenPortsRequired\\\": 1,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 80,\\n  \\\"serverGrowth\\\": 30\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/neo-net.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"neo-net\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"38.1.2.9\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"Neo Nightclub Network\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 37.5,\\n  \\\"hackDifficulty\\\": 37.5,\\n  \\\"minDifficulty\\\": 13,\\n  \\\"moneyAvailable\\\": 2500000,\\n  \\\"moneyMax\\\": 25000000,\\n  \\\"numOpenPortsRequired\\\": 1,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 50,\\n  \\\"serverGrowth\\\": 25\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/computek.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"computek\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"39.7.7.0\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"CompuTek\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 85.5,\\n  \\\"hackDifficulty\\\": 85.5,\\n  \\\"minDifficulty\\\": 29,\\n  \\\"moneyAvailable\\\": 113708273.5,\\n  \\\"moneyMax\\\": 1137082735,\\n  \\\"numOpenPortsRequired\\\": 3,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 310,\\n  \\\"serverGrowth\\\": 45\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/netlink.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"netlink\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"45.6.8.0\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 64,\\n  \\\"organizationName\\\": \\\"NetLink Technologies\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 118.5,\\n  \\\"hackDifficulty\\\": 118.5,\\n  \\\"minDifficulty\\\": 40,\\n  \\\"moneyAvailable\\\": 137500000,\\n  \\\"moneyMax\\\": 1375000000,\\n  \\\"numOpenPortsRequired\\\": 3,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 377,\\n  \\\"serverGrowth\\\": 53\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/crush-fitness.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"crush-fitness\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"0.4.0.4\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Crush Fitness\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 63,\\n  \\\"hackDifficulty\\\": 63,\\n  \\\"minDifficulty\\\": 21,\\n  \\\"moneyAvailable\\\": 23208682,\\n  \\\"moneyMax\\\": 232086820,\\n  \\\"numOpenPortsRequired\\\": 2,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 229,\\n  \\\"serverGrowth\\\": 28\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/rothman-uni.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"rothman-uni\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"59.2.0.8\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"Rothman University\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 82.5,\\n  \\\"hackDifficulty\\\": 82.5,\\n  \\\"minDifficulty\\\": 28,\\n  \\\"moneyAvailable\\\": 90751984.5,\\n  \\\"moneyMax\\\": 907519845,\\n  \\\"numOpenPortsRequired\\\": 3,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 373,\\n  \\\"serverGrowth\\\": 36\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/alpha-ent.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"alpha-ent\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"4.8.9.5\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 128,\\n  \\\"organizationName\\\": \\\"Alpha Enterprises\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 87,\\n  \\\"hackDifficulty\\\": 87,\\n  \\\"minDifficulty\\\": 29,\\n  \\\"moneyAvailable\\\": 373099784,\\n  \\\"moneyMax\\\": 3730997840,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 509,\\n  \\\"serverGrowth\\\": 54\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/aerocorp.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"aerocorp\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"54.5.8.0\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"AeroCorp\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 135,\\n  \\\"hackDifficulty\\\": 135,\\n  \\\"minDifficulty\\\": 45,\\n  \\\"moneyAvailable\\\": 589634526,\\n  \\\"moneyMax\\\": 5896345260,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 918,\\n  \\\"serverGrowth\\\": 55\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/deltaone.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"deltaone\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"64.7.4.0\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"DeltaOne\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 115.5,\\n  \\\"hackDifficulty\\\": 115.5,\\n  \\\"minDifficulty\\\": 39,\\n  \\\"moneyAvailable\\\": 663436394,\\n  \\\"moneyMax\\\": 6634363940,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 826,\\n  \\\"serverGrowth\\\": 60\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/solaris.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"solaris\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"64.7.9.4\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 128,\\n  \\\"organizationName\\\": \\\"Solaris Space Systems\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 118.5,\\n  \\\"hackDifficulty\\\": 118.5,\\n  \\\"minDifficulty\\\": 40,\\n  \\\"moneyAvailable\\\": 384999088,\\n  \\\"moneyMax\\\": 3849990880,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 764,\\n  \\\"serverGrowth\\\": 73\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/taiyang-digital.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"taiyang-digital\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"19.5.0.9\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Taiyang Digital\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 105,\\n  \\\"hackDifficulty\\\": 105,\\n  \\\"minDifficulty\\\": 35,\\n  \\\"moneyAvailable\\\": 432157458.5,\\n  \\\"moneyMax\\\": 4321574585,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 896,\\n  \\\"serverGrowth\\\": 78\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/zb-def.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"zb-def\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"33.5.2.9\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"ZB Defense Industries\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 87,\\n  \\\"hackDifficulty\\\": 87,\\n  \\\"minDifficulty\\\": 29,\\n  \\\"moneyAvailable\\\": 529990345,\\n  \\\"moneyMax\\\": 5299903450,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 806,\\n  \\\"serverGrowth\\\": 67\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/applied-energetics.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"applied-energetics\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"80.8.3.6\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Applied Energetics\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 108,\\n  \\\"hackDifficulty\\\": 108,\\n  \\\"minDifficulty\\\": 36,\\n  \\\"moneyAvailable\\\": 376718254,\\n  \\\"moneyMax\\\": 3767182540,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 810,\\n  \\\"serverGrowth\\\": 71\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/nova-med.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"nova-med\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"41.2.4.7\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Nova Medical\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 112.5,\\n  \\\"hackDifficulty\\\": 112.5,\\n  \\\"minDifficulty\\\": 38,\\n  \\\"moneyAvailable\\\": 565088823,\\n  \\\"moneyMax\\\": 5650888230,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 787,\\n  \\\"serverGrowth\\\": 77\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/titan-labs.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"titan-labs\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"44.3.6.8\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 128,\\n  \\\"organizationName\\\": \\\"Titan Laboratories\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 118.5,\\n  \\\"hackDifficulty\\\": 118.5,\\n  \\\"minDifficulty\\\": 40,\\n  \\\"moneyAvailable\\\": 418703123.5,\\n  \\\"moneyMax\\\": 4187031235,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 812,\\n  \\\"serverGrowth\\\": 66\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/fulcrumtech.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"fulcrumtech\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"11.5.9.8\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 512,\\n  \\\"organizationName\\\": \\\"Fulcrum Technologies\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 141,\\n  \\\"hackDifficulty\\\": 141,\\n  \\\"minDifficulty\\\": 47,\\n  \\\"moneyAvailable\\\": 872446048,\\n  \\\"moneyMax\\\": 8724460480,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 983,\\n  \\\"serverGrowth\\\": 92\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/kuai-gong.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"kuai-gong\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"49.4.8.1\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"KuaiGong International\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 142.5,\\n  \\\"hackDifficulty\\\": 142.5,\\n  \\\"minDifficulty\\\": 48,\\n  \\\"moneyAvailable\\\": 13903411007,\\n  \\\"moneyMax\\\": 139034110070,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1135,\\n  \\\"serverGrowth\\\": 94\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/clarkinc.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"clarkinc\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"77.3.8.5\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Clarke Incorporated\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 81,\\n  \\\"hackDifficulty\\\": 81,\\n  \\\"minDifficulty\\\": 27,\\n  \\\"moneyAvailable\\\": 11199697471,\\n  \\\"moneyMax\\\": 111996974710,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1016,\\n  \\\"serverGrowth\\\": 67\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/megacorp.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"megacorp\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"15.9.0.8\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"MegaCorp\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 148.5,\\n  \\\"hackDifficulty\\\": 148.5,\\n  \\\"minDifficulty\\\": 50,\\n  \\\"moneyAvailable\\\": 21398113930,\\n  \\\"moneyMax\\\": 213981139300,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1218,\\n  \\\"serverGrowth\\\": 99\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/fulcrumassets.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"fulcrumassets\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"79.4.1.6\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Fulcrum Technologies\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 148.5,\\n  \\\"hackDifficulty\\\": 148.5,\\n  \\\"minDifficulty\\\": 50,\\n  \\\"moneyAvailable\\\": 500000,\\n  \\\"moneyMax\\\": 5000000,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1571,\\n  \\\"serverGrowth\\\": 1\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/powerhouse-fitness.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"powerhouse-fitness\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"41.2.6.5\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"Powerhouse Fitness\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 90,\\n  \\\"hackDifficulty\\\": 90,\\n  \\\"minDifficulty\\\": 30,\\n  \\\"moneyAvailable\\\": 450000000,\\n  \\\"moneyMax\\\": 4500000000,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1062,\\n  \\\"serverGrowth\\\": 59\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/helios.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"helios\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"83.3.4.0\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 64,\\n  \\\"organizationName\\\": \\\"Helios Labs\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 142.5,\\n  \\\"hackDifficulty\\\": 142.5,\\n  \\\"minDifficulty\\\": 48,\\n  \\\"moneyAvailable\\\": 303837621,\\n  \\\"moneyMax\\\": 3038376210,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 809,\\n  \\\"serverGrowth\\\": 71\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/microdyne.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"microdyne\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"13.0.8.6\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 64,\\n  \\\"organizationName\\\": \\\"Microdyne Technologies\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 97.5,\\n  \\\"hackDifficulty\\\": 97.5,\\n  \\\"minDifficulty\\\": 33,\\n  \\\"moneyAvailable\\\": 304854386.5,\\n  \\\"moneyMax\\\": 3048543865,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 854,\\n  \\\"serverGrowth\\\": 71\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/stormtech.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"stormtech\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"60.7.1.4\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Storm Technologies\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 133.5,\\n  \\\"hackDifficulty\\\": 133.5,\\n  \\\"minDifficulty\\\": 45,\\n  \\\"moneyAvailable\\\": 525815617.5,\\n  \\\"moneyMax\\\": 5258156175,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 976,\\n  \\\"serverGrowth\\\": 91\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/omnitek.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"omnitek\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"43.2.9.3\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 512,\\n  \\\"organizationName\\\": \\\"OmniTek Incorporated\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 141,\\n  \\\"hackDifficulty\\\": 141,\\n  \\\"minDifficulty\\\": 47,\\n  \\\"moneyAvailable\\\": 9774557721,\\n  \\\"moneyMax\\\": 97745577210,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1017,\\n  \\\"serverGrowth\\\": 98\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/_.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\".\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"1.9.3.1\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\".\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 0,\\n  \\\"hackDifficulty\\\": 0,\\n  \\\"minDifficulty\\\": 1,\\n  \\\"moneyAvailable\\\": 0,\\n  \\\"moneyMax\\\": 0,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 509,\\n  \\\"serverGrowth\\\": 0\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/b-and-a.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"b-and-a\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"96.3.7.9\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Bachman & Associates\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 118.5,\\n  \\\"hackDifficulty\\\": 118.5,\\n  \\\"minDifficulty\\\": 40,\\n  \\\"moneyAvailable\\\": 13653922046.5,\\n  \\\"moneyMax\\\": 136539220465,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1059,\\n  \\\"serverGrowth\\\": 70\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/The-Cave.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"The-Cave\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"48.3.9.0\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Helios\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 0,\\n  \\\"hackDifficulty\\\": 0,\\n  \\\"minDifficulty\\\": 1,\\n  \\\"moneyAvailable\\\": 0,\\n  \\\"moneyMax\\\": 0,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 925,\\n  \\\"serverGrowth\\\": 0\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/vitalife.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"vitalife\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"55.3.5.8\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 64,\\n  \\\"organizationName\\\": \\\"VitaLife\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 127.5,\\n  \\\"hackDifficulty\\\": 127.5,\\n  \\\"minDifficulty\\\": 43,\\n  \\\"moneyAvailable\\\": 372317536,\\n  \\\"moneyMax\\\": 3723175360,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 835,\\n  \\\"serverGrowth\\\": 75\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/4sigma.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"4sigma\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"18.1.3.4\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Four Sigma\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 91.5,\\n  \\\"hackDifficulty\\\": 91.5,\\n  \\\"minDifficulty\\\": 31,\\n  \\\"moneyAvailable\\\": 9732931444.5,\\n  \\\"moneyMax\\\": 97329314445,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 932,\\n  \\\"serverGrowth\\\": 85\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/blade.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"blade\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"89.6.4.1\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 64,\\n  \\\"organizationName\\\": \\\"Blade Industries\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 133.5,\\n  \\\"hackDifficulty\\\": 133.5,\\n  \\\"minDifficulty\\\": 45,\\n  \\\"moneyAvailable\\\": 9564639110.5,\\n  \\\"moneyMax\\\": 95646391105,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1170,\\n  \\\"serverGrowth\\\": 72\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/ecorp.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"ecorp\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"88.9.1.1\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"ECorp\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 148.5,\\n  \\\"hackDifficulty\\\": 148.5,\\n  \\\"minDifficulty\\\": 50,\\n  \\\"moneyAvailable\\\": 27070364105,\\n  \\\"moneyMax\\\": 270703641050,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1133,\\n  \\\"serverGrowth\\\": 99\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/nwo.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"nwo\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"95.7.9.0\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"NWO\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 148.5,\\n  \\\"hackDifficulty\\\": 148.5,\\n  \\\"minDifficulty\\\": 50,\\n  \\\"moneyAvailable\\\": 18304934780,\\n  \\\"moneyMax\\\": 183049347800,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1184,\\n  \\\"serverGrowth\\\": 77\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/run4theh111z.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"run4theh111z\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"30.5.7.2\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"The Runners\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 0,\\n  \\\"hackDifficulty\\\": 0,\\n  \\\"minDifficulty\\\": 1,\\n  \\\"moneyAvailable\\\": 0,\\n  \\\"moneyMax\\\": 0,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 548,\\n  \\\"serverGrowth\\\": 0\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/snap-fitness.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"snap-fitness\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"1.7.3.9\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Snap Fitness\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 84,\\n  \\\"hackDifficulty\\\": 84,\\n  \\\"minDifficulty\\\": 28,\\n  \\\"moneyAvailable\\\": 225000000,\\n  \\\"moneyMax\\\": 2250000000,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 758,\\n  \\\"serverGrowth\\\": 51\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/catalyst.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"catalyst\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"23.1.0.2\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"Catalyst Ventures\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 93,\\n  \\\"hackDifficulty\\\": 93,\\n  \\\"minDifficulty\\\": 31,\\n  \\\"moneyAvailable\\\": 218248136,\\n  \\\"moneyMax\\\": 2182481360,\\n  \\\"numOpenPortsRequired\\\": 3,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 404,\\n  \\\"serverGrowth\\\": 50\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/lexo-corp.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"lexo-corp\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"57.2.2.4\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"LexoCorp\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 94.5,\\n  \\\"hackDifficulty\\\": 94.5,\\n  \\\"minDifficulty\\\": 32,\\n  \\\"moneyAvailable\\\": 379477310,\\n  \\\"moneyMax\\\": 3794773100,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 715,\\n  \\\"serverGrowth\\\": 64\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/I_I_I_I.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"I.I.I.I\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"45.9.3.9\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"I.I.I.I\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 0,\\n  \\\"hackDifficulty\\\": 0,\\n  \\\"minDifficulty\\\": 1,\\n  \\\"moneyAvailable\\\": 0,\\n  \\\"moneyMax\\\": 0,\\n  \\\"numOpenPortsRequired\\\": 3,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 353,\\n  \\\"serverGrowth\\\": 0\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/millenium-fitness.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"millenium-fitness\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"93.4.5.0\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\"Millenium Fitness Network\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 73.5,\\n  \\\"hackDifficulty\\\": 73.5,\\n  \\\"minDifficulty\\\": 25,\\n  \\\"moneyAvailable\\\": 125000000,\\n  \\\"moneyMax\\\": 1250000000,\\n  \\\"numOpenPortsRequired\\\": 3,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 518,\\n  \\\"serverGrowth\\\": 41\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/silver-helix.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"silver-helix\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"41.2.8.9\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 64,\\n  \\\"organizationName\\\": \\\"Silver Helix\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 45,\\n  \\\"hackDifficulty\\\": 45,\\n  \\\"minDifficulty\\\": 15,\\n  \\\"moneyAvailable\\\": 22500000,\\n  \\\"moneyMax\\\": 225000000,\\n  \\\"numOpenPortsRequired\\\": 2,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 150,\\n  \\\"serverGrowth\\\": 30\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/avmnite-02h.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"avmnite-02h\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"86.9.1.4\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"NiteSec\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 0,\\n  \\\"hackDifficulty\\\": 0,\\n  \\\"minDifficulty\\\": 1,\\n  \\\"moneyAvailable\\\": 0,\\n  \\\"moneyMax\\\": 0,\\n  \\\"numOpenPortsRequired\\\": 2,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 214,\\n  \\\"serverGrowth\\\": 0\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/zb-institute.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"zb-institute\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"20.0.6.9\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 64,\\n  \\\"organizationName\\\": \\\"ZB Institute of Technology\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 99,\\n  \\\"hackDifficulty\\\": 99,\\n  \\\"minDifficulty\\\": 33,\\n  \\\"moneyAvailable\\\": 482336579,\\n  \\\"moneyMax\\\": 4823365790,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 747,\\n  \\\"serverGrowth\\\": 80\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/omega-net.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"omega-net\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"7.7.4.7\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"Omega Software\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 39,\\n  \\\"hackDifficulty\\\": 39,\\n  \\\"minDifficulty\\\": 13,\\n  \\\"moneyAvailable\\\": 33200637,\\n  \\\"moneyMax\\\": 332006370,\\n  \\\"numOpenPortsRequired\\\": 2,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 203,\\n  \\\"serverGrowth\\\": 30\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/the-hub.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"the-hub\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"62.0.0.4\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 64,\\n  \\\"organizationName\\\": \\\"The Hub\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 67.5,\\n  \\\"hackDifficulty\\\": 67.5,\\n  \\\"minDifficulty\\\": 23,\\n  \\\"moneyAvailable\\\": 80304909.5,\\n  \\\"moneyMax\\\": 803049095,\\n  \\\"numOpenPortsRequired\\\": 2,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 307,\\n  \\\"serverGrowth\\\": 49\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/syscore.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"syscore\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"86.3.7.3\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"SysCore Securities\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 114,\\n  \\\"hackDifficulty\\\": 114,\\n  \\\"minDifficulty\\\": 38,\\n  \\\"moneyAvailable\\\": 245927404,\\n  \\\"moneyMax\\\": 2459274040,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 643,\\n  \\\"serverGrowth\\\": 69\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/hong-fang-tea.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"hong-fang-tea\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"94.2.3.1\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\"HongFang Teahouse\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 22.5,\\n  \\\"hackDifficulty\\\": 22.5,\\n  \\\"minDifficulty\\\": 8,\\n  \\\"moneyAvailable\\\": 1500000,\\n  \\\"moneyMax\\\": 15000000,\\n  \\\"numOpenPortsRequired\\\": 0,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 30,\\n  \\\"serverGrowth\\\": 20\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/harakiri-sushi.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"harakiri-sushi\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"92.7.6.3\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\"HaraKiri Sushi Bar Network\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 22.5,\\n  \\\"hackDifficulty\\\": 22.5,\\n  \\\"minDifficulty\\\": 8,\\n  \\\"moneyAvailable\\\": 2000000,\\n  \\\"moneyMax\\\": 20000000,\\n  \\\"numOpenPortsRequired\\\": 0,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 40,\\n  \\\"serverGrowth\\\": 40\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/nectar-net.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"nectar-net\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"11.9.9.0\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\"Nectar Nightclub Network\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 30,\\n  \\\"hackDifficulty\\\": 30,\\n  \\\"minDifficulty\\\": 10,\\n  \\\"moneyAvailable\\\": 1375000,\\n  \\\"moneyMax\\\": 13750000,\\n  \\\"numOpenPortsRequired\\\": 0,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 20,\\n  \\\"serverGrowth\\\": 25\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/iron-gym.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"iron-gym\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"47.3.5.0\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"Iron Gym Network\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 45,\\n  \\\"hackDifficulty\\\": 45,\\n  \\\"minDifficulty\\\": 15,\\n  \\\"moneyAvailable\\\": 10000000,\\n  \\\"moneyMax\\\": 100000000,\\n  \\\"numOpenPortsRequired\\\": 1,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 100,\\n  \\\"serverGrowth\\\": 20\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/ingang.txt\",\"text\":\"Slum Snakes\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"88.9.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"ecorp\",\"moduleSequenceNumber\":1843041,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":1843043,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":1843045,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":27070364105,\"moneyMax\":270703641050,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1133,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"15.9.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"megacorp\",\"moduleSequenceNumber\":1842963,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":1842965,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":1842967,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":21398113930,\"moneyMax\":213981139300,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1218,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"96.3.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"b-and-a\",\"moduleSequenceNumber\":1843011,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":1843013,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":1843015,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\".\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":118.5,\"hackDifficulty\":118.5,\"minDifficulty\":40,\"moneyAvailable\":13653922046.5,\"moneyMax\":136539220465,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1059,\"serverGrowth\":70}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"89.6.4.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/0d3d6f05-d0fb-4461-a281-72bdbe3124fe\",\"moduleSequenceNumber\":1847369}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":1847369,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/4feb18bf-7f05-43d2-9597-d6aa941e4c50\",\"moduleSequenceNumber\":1849192}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":1849192,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/dc53c98e-db2c-40c1-bbaf-54f46577c890\",\"moduleSequenceNumber\":1845531}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":1845531,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"4sigma\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":133.5,\"hackDifficulty\":133.5,\"minDifficulty\":45,\"moneyAvailable\":9564639110.5,\"moneyMax\":95646391105,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1170,\"serverGrowth\":72}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"95.7.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nwo\",\"moduleSequenceNumber\":1843047,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":1843049,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":1843051,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":18304934780,\"moneyMax\":183049347800,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1184,\"serverGrowth\":77}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"77.3.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"clarkinc\",\"moduleSequenceNumber\":1842957,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":1842959,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":1842961,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"megacorp\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":11199697471,\"moneyMax\":111996974710,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1016,\"serverGrowth\":67}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"43.2.9.3\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":439.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.5317081803013199],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.81000000000061,\"pid\":130435,\"ramUsage\":1.75,\"server\":\"omnitek\",\"threads\":47,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/0f869f47-ca95-4ca7-8124-4268d9b7dab2\",\"moduleSequenceNumber\":1843675}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",0.21901526800267423],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.009999999999952,\"pid\":130511,\"ramUsage\":1.75,\"server\":\"omnitek\",\"threads\":47,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/0f869f47-ca95-4ca7-8124-4268d9b7dab2\",\"moduleSequenceNumber\":1843675}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",0.09194561609080587],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.809999999999953,\"pid\":130512,\"ramUsage\":1.75,\"server\":\"omnitek\",\"threads\":47,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/0f869f47-ca95-4ca7-8124-4268d9b7dab2\",\"moduleSequenceNumber\":1843675}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",0.46349370557692904],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.609999999999953,\"pid\":130515,\"ramUsage\":1.75,\"server\":\"omnitek\",\"threads\":63,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/0f869f47-ca95-4ca7-8124-4268d9b7dab2\",\"moduleSequenceNumber\":1843675}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",0.5932370083430174],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.609999999999953,\"pid\":130518,\"ramUsage\":1.75,\"server\":\"omnitek\",\"threads\":47,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/0f869f47-ca95-4ca7-8124-4268d9b7dab2\",\"moduleSequenceNumber\":1843675}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/e2ada856-7ae0-4d90-b3fb-14b7e4894691\",\"moduleSequenceNumber\":1844994}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":1844994,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/e772f0c4-0eb1-451c-a11a-0e0b15a1cbfb\",\"moduleSequenceNumber\":1844995}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":1844995,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/0f869f47-ca95-4ca7-8124-4268d9b7dab2\",\"moduleSequenceNumber\":1843675}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":1843675,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":141,\"hackDifficulty\":141,\"minDifficulty\":47,\"moneyAvailable\":9774557721,\"moneyMax\":97745577210,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1017,\"serverGrowth\":98}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"18.1.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"4sigma\",\"moduleSequenceNumber\":1843029,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":1843031,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":1843033,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"vitalife\",\"blade\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91.5,\"hackDifficulty\":91.5,\"minDifficulty\":31,\"moneyAvailable\":9732931444.5,\"moneyMax\":97329314445,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":932,\"serverGrowth\":85}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"49.4.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":1842951,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":1842953,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":1842955,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":142.5,\"hackDifficulty\":142.5,\"minDifficulty\":48,\"moneyAvailable\":13903411007,\"moneyMax\":139034110070,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1135,\"serverGrowth\":94}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"11.5.9.8\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":164.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",0.8778911088761554],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.80999999999995,\"pid\":130498,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":47,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/601c66c6-5df8-4bcf-8024-3c8745a5f0fe\",\"moduleSequenceNumber\":1843937}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.6612995285592511],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999953,\"pid\":130502,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":47,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/601c66c6-5df8-4bcf-8024-3c8745a5f0fe\",\"moduleSequenceNumber\":1843937}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/1e1f2a3e-6cb0-473c-84e7-0f2a6a47631b\",\"moduleSequenceNumber\":1843148}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":1843148,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/cf360414-cf25-4218-b296-bbab15c289c8\",\"moduleSequenceNumber\":1844990}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":1844990,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/601c66c6-5df8-4bcf-8024-3c8745a5f0fe\",\"moduleSequenceNumber\":1843937}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":1843937,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"titan-labs\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":141,\"hackDifficulty\":141,\"minDifficulty\":47,\"moneyAvailable\":872446048,\"moneyMax\":8724460480,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":983,\"serverGrowth\":92}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"79.4.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":1842969,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":1842971,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":1842973,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":500000,\"moneyMax\":5000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1571,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"60.7.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"stormtech\",\"moduleSequenceNumber\":1842993,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":1842995,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":1842997,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"microdyne\",\"omnitek\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":133.5,\"hackDifficulty\":133.5,\"minDifficulty\":45,\"moneyAvailable\":525815617.5,\"moneyMax\":5258156175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":976,\"serverGrowth\":91}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"73.8.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":1842801,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":1842803,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":1842805,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":133.5,\"hackDifficulty\":133.5,\"minDifficulty\":45,\"moneyAvailable\":401919989,\"moneyMax\":4019199890,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":951,\"serverGrowth\":62}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"77.3.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":1842819,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":1842821,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":1842823,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":114,\"hackDifficulty\":114,\"minDifficulty\":38,\"moneyAvailable\":420188951.5,\"moneyMax\":4201889515,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":897,\"serverGrowth\":56}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"83.3.4.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/7bcbd651-ded0-49a3-bbca-c9a80649eb75\",\"moduleSequenceNumber\":1849193}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":1849193,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/72a66a3e-164a-46d4-b29b-09c3148f66b0\",\"moduleSequenceNumber\":1847103}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":1847103,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/90b3d4ee-f5f6-4566-b27b-653ce23f0f73\",\"moduleSequenceNumber\":1845261}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":1845261,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":142.5,\"hackDifficulty\":142.5,\"minDifficulty\":48,\"moneyAvailable\":303837621,\"moneyMax\":3038376210,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":809,\"serverGrowth\":71}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"55.3.5.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/4968b1fa-6b0d-4649-84ef-a67fbd419579\",\"moduleSequenceNumber\":1845532}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":1845532,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/51b53326-d8a4-4382-b1d5-096b54dc18ae\",\"moduleSequenceNumber\":1847100}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":1847100,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/8fa28345-2f43-4b6d-b439-e212e8fe3c58\",\"moduleSequenceNumber\":1846053}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":1846053,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"microdyne\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":127.5,\"hackDifficulty\":127.5,\"minDifficulty\":43,\"moneyAvailable\":372317536,\"moneyMax\":3723175360,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":835,\"serverGrowth\":75}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"83.5.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"icarus\",\"moduleSequenceNumber\":1842807,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":1842809,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":1842811,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":138,\"hackDifficulty\":138,\"minDifficulty\":46,\"moneyAvailable\":461232837,\"moneyMax\":4612328370,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":850,\"serverGrowth\":86}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"26.2.3.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/312b50ff-0667-4410-acfe-a989d3573efe\",\"moduleSequenceNumber\":1960122}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":1960122,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/41a814ce-c31c-469e-a178-40aa28890eb1\",\"moduleSequenceNumber\":1843935}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":1843935,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/ffbddc73-c29c-4004-b1ac-02910dfce498\",\"moduleSequenceNumber\":1843936}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":1843936,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"unitalife\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":123,\"hackDifficulty\":123,\"minDifficulty\":41,\"moneyAvailable\":583392566.5,\"moneyMax\":5833925665,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":805,\"serverGrowth\":86}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"44.3.6.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":122.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.5374308602112698],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":115.01000000000107,\"pid\":130398,\"ramUsage\":1.75,\"server\":\"titan-labs\",\"threads\":70,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/76ac0da0-883c-47f7-9bec-936d29dd4698\",\"moduleSequenceNumber\":1845259}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/8b940e14-9d81-4f64-aca9-c77af9e11696\",\"moduleSequenceNumber\":1847104}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":1847104,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/266d0654-632b-4e2b-8eb1-aa1a29e1afaf\",\"moduleSequenceNumber\":1847105}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":1847105,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/76ac0da0-883c-47f7-9bec-936d29dd4698\",\"moduleSequenceNumber\":1845259}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":1845259,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":118.5,\"hackDifficulty\":118.5,\"minDifficulty\":40,\"moneyAvailable\":418703123.5,\"moneyMax\":4187031235,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":812,\"serverGrowth\":66}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"13.0.8.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/36793961-02da-4554-a320-096ba9af07b7\",\"moduleSequenceNumber\":1850750}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":1850750,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/bb5f89f0-a2f6-422d-bb14-fb7189617ff3\",\"moduleSequenceNumber\":1845262}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":1845262,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/38238783-e991-4e61-9ec4-bb83cc3fb78e\",\"moduleSequenceNumber\":1847629}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":1847629,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nova-med\",\"stormtech\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97.5,\"hackDifficulty\":97.5,\"minDifficulty\":33,\"moneyAvailable\":304854386.5,\"moneyMax\":3048543865,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":854,\"serverGrowth\":71}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"19.5.0.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":1842915,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":1842917,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":1842919,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":105,\"hackDifficulty\":105,\"minDifficulty\":35,\"moneyAvailable\":432157458.5,\"moneyMax\":4321574585,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":896,\"serverGrowth\":78}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"45.9.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":1842789,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":1842791,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":1842793,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"rho-construction\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94.5,\"hackDifficulty\":94.5,\"minDifficulty\":32,\"moneyAvailable\":422627906.5,\"moneyMax\":4226279065,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":866,\"serverGrowth\":80}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"54.5.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":1842897,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":1842899,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":1842901,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"alpha-ent\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":135,\"hackDifficulty\":135,\"minDifficulty\":45,\"moneyAvailable\":589634526,\"moneyMax\":5896345260,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":918,\"serverGrowth\":55}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"15.1.2.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":1842831,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/32c797bf-9ad7-4f7c-8c6c-8efce41ecd50\",\"moduleSequenceNumber\":1843412}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":1843412,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/d8557e29-8c56-408c-b846-a3cf2a1f88ba\",\"moduleSequenceNumber\":1855467}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":1855467,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"global-pharm\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":139.5,\"hackDifficulty\":139.5,\"minDifficulty\":47,\"moneyAvailable\":452290675,\"moneyMax\":4522906750,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":873,\"serverGrowth\":62}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"33.5.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":1842921,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":1842923,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":1842925,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"solaris\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":529990345,\"moneyMax\":5299903450,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":806,\"serverGrowth\":67}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"80.8.3.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":1842927,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":1842929,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":1842931,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":108,\"hackDifficulty\":108,\"minDifficulty\":36,\"moneyAvailable\":376718254,\"moneyMax\":3767182540,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":810,\"serverGrowth\":71}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"64.7.9.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.9660946618960966],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":54.81000000000022,\"pid\":130466,\"ramUsage\":1.75,\"server\":\"solaris\",\"threads\":47,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/52d18f92-9c63-4ec1-9029-2047eb7b97a3\",\"moduleSequenceNumber\":1844727}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",0.6392637023972252],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":54.81000000000022,\"pid\":130469,\"ramUsage\":1.75,\"server\":\"solaris\",\"threads\":26,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/52d18f92-9c63-4ec1-9029-2047eb7b97a3\",\"moduleSequenceNumber\":1844727}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/0d443869-f6c0-4502-8677-f78ef7a19cdf\",\"moduleSequenceNumber\":1847365}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":1847365,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/d66c32bc-c6bb-4eaa-95a6-a9984d595ef1\",\"moduleSequenceNumber\":1844988}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":1844988,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/52d18f92-9c63-4ec1-9029-2047eb7b97a3\",\"moduleSequenceNumber\":1844727}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":1844727,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\",\"zb-def\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":118.5,\"hackDifficulty\":118.5,\"minDifficulty\":40,\"moneyAvailable\":384999088,\"moneyMax\":3849990880,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":764,\"serverGrowth\":73}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"64.7.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":1842903,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":1842905,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":1842907,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"aerocorp\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":115.5,\"hackDifficulty\":115.5,\"minDifficulty\":39,\"moneyAvailable\":663436394,\"moneyMax\":6634363940,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":826,\"serverGrowth\":60}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"46.2.1.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1842825,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/0125a8b2-e841-4798-98d4-4da09f443a94\",\"moduleSequenceNumber\":1878043}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1878043,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/9a8e039d-a3a2-48f0-907f-0d002c520a82\",\"moduleSequenceNumber\":1843411}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1843411,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"rho-construction\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":123,\"hackDifficulty\":123,\"minDifficulty\":41,\"moneyAvailable\":837873615.5,\"moneyMax\":8378736155,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":834,\"serverGrowth\":87}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"41.2.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":1842933,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":1842935,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":1842937,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"solaris\",\"titan-labs\",\"microdyne\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":112.5,\"hackDifficulty\":112.5,\"minDifficulty\":38,\"moneyAvailable\":565088823,\"moneyMax\":5650888230,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":787,\"serverGrowth\":77}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"87.8.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1842837,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1842839,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1842841,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":121.5,\"hackDifficulty\":121.5,\"minDifficulty\":41,\"moneyAvailable\":681247148.5,\"moneyMax\":6812471485,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":826,\"serverGrowth\":73}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"91.1.9.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":19.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",0.3802069699845223],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.409999999999954,\"pid\":130523,\"ramUsage\":1.75,\"server\":\"unitalife\",\"threads\":11,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/46696074-2883-4bfe-a170-7d7be410371e\",\"moduleSequenceNumber\":1847891}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":1842795,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/955f426c-0de4-4a9c-9e47-5e172f34ed45\",\"moduleSequenceNumber\":1843410}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":1843410,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/46696074-2883-4bfe-a170-7d7be410371e\",\"moduleSequenceNumber\":1847891}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":1847891,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"icarus\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":118.5,\"hackDifficulty\":118.5,\"minDifficulty\":40,\"moneyAvailable\":512928702,\"moneyMax\":5129287020,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":781,\"serverGrowth\":75}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"57.2.2.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1843071,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/7f3f9a9d-c8cd-444b-bd02-2d802acabf15\",\"moduleSequenceNumber\":1851530}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1851530,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/abc87c80-a639-46c9-aff9-a623d19ce08a\",\"moduleSequenceNumber\":1910956}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1910956,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94.5,\"hackDifficulty\":94.5,\"minDifficulty\":32,\"moneyAvailable\":379477310,\"moneyMax\":3794773100,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":715,\"serverGrowth\":64}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"52.4.2.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1842783,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/c1ab064b-85a0-4f9d-94a0-ce488dcdee90\",\"moduleSequenceNumber\":1954744}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1954744,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/91d1d7ac-ac37-43d0-8285-a31040435d44\",\"moduleSequenceNumber\":1845526}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1845526,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"summit-uni\",\"galactic-cyber\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":303213332.5,\"moneyMax\":3032133325,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":485,\"serverGrowth\":60}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"4.8.9.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":126,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.5977712032059301],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":145.0100000000004,\"pid\":130368,\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"threads\":69,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/524ceda9-f5ea-48de-aa07-fb546c0f51a5\",\"moduleSequenceNumber\":1844466}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",0.18285957569320366],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.409999999999954,\"pid\":130522,\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"threads\":3,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/f0541652-efda-4b39-8753-a5b0c841c0a5\",\"moduleSequenceNumber\":1846576}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/fba45307-4cf9-49d5-aea2-bd0698e6ac6d\",\"moduleSequenceNumber\":1846836}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1846836,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/f0541652-efda-4b39-8753-a5b0c841c0a5\",\"moduleSequenceNumber\":1846576}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1846576,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/524ceda9-f5ea-48de-aa07-fb546c0f51a5\",\"moduleSequenceNumber\":1844466}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1844466,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"rothman-uni\",\"aerocorp\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":373099784,\"moneyMax\":3730997840,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":509,\"serverGrowth\":54}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"7.7.8.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1842843,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/f45a6252-be67-4cc1-a708-b364882a48de\",\"moduleSequenceNumber\":1966350}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1966350,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/0ffa2217-79f6-4bb7-bf99-23a9f9575a55\",\"moduleSequenceNumber\":1847099}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1847099,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":114,\"hackDifficulty\":114,\"minDifficulty\":38,\"moneyAvailable\":127371644.5,\"moneyMax\":1273716445,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":406,\"serverGrowth\":49}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"59.2.0.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1842885,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/e54bacf4-575f-4de8-9e62-5ae283b196bc\",\"moduleSequenceNumber\":1868659}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1868659,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/d39e2028-a19d-48c4-837a-558f889ae57f\",\"moduleSequenceNumber\":1855992}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1855992,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"crush-fitness\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82.5,\"hackDifficulty\":82.5,\"minDifficulty\":28,\"moneyAvailable\":90751984.5,\"moneyMax\":907519845,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":373,\"serverGrowth\":36}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"20.0.6.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/416360e9-f177-473e-81ea-e88b21b415d4\",\"moduleSequenceNumber\":1846839}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1846839,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/80137610-111f-4d76-beb3-dbbd9bb466c5\",\"moduleSequenceNumber\":1845528}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1845528,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/f933ddc6-d335-4836-abd2-b7ca6826ef1b\",\"moduleSequenceNumber\":1847366}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1847366,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":482336579,\"moneyMax\":4823365790,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":747,\"serverGrowth\":80}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"98.6.1.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1842777,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/165e3aa6-fe09-4f62-a1ff-f2ec4c94abdc\",\"moduleSequenceNumber\":1868128}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1868128,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/eb6e4a10-dff1-47bd-83c7-1f666778dd37\",\"moduleSequenceNumber\":1845264}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1845264,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"johnson-ortho\",\"rho-construction\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76.5,\"hackDifficulty\":76.5,\"minDifficulty\":26,\"moneyAvailable\":170370906.5,\"moneyMax\":1703709065,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":464,\"serverGrowth\":58}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"86.3.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"moduleSequenceNumber\":1843119,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":1843121,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":1843123,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":114,\"hackDifficulty\":114,\"minDifficulty\":38,\"moneyAvailable\":245927404,\"moneyMax\":2459274040,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":643,\"serverGrowth\":69}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"23.1.0.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/097b9a49-5d0b-4d22-a24e-eb3e534b1433\",\"moduleSequenceNumber\":1851791}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":1851791,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":1843067,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/fdfbdd7e-9415-4f03-87df-b28edfe5b27b\",\"moduleSequenceNumber\":1859139}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":1859139,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"crush-fitness\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":218248136,\"moneyMax\":2182481360,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":404,\"serverGrowth\":50}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"62.0.0.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/f0813e0f-6a20-4df6-94d5-a5f82e4d83c9\",\"moduleSequenceNumber\":1845527}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":1845527,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/2a1b1d15-ec33-47d3-9e50-0ff592de2d91\",\"moduleSequenceNumber\":1847368}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":1847368,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/04ab1488-c635-436a-ab80-8917b8f15337\",\"moduleSequenceNumber\":1846838}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":1846838,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omega-net\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67.5,\"hackDifficulty\":67.5,\"minDifficulty\":23,\"moneyAvailable\":80304909.5,\"moneyMax\":803049095,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":307,\"serverGrowth\":49}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":true,\"ip\":\"39.7.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"computek\",\"moduleSequenceNumber\":1842867,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"computek\",\"moduleSequenceNumber\":1842869,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"computek\",\"moduleSequenceNumber\":1842871,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85.5,\"hackDifficulty\":85.5,\"minDifficulty\":29,\"moneyAvailable\":113708273.5,\"moneyMax\":1137082735,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":310,\"serverGrowth\":45}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"45.6.8.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/99fb56e5-098f-4a2c-ba64-aa68d39cea15\",\"moduleSequenceNumber\":1849453}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":1849453,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/29883e6d-db0b-49ca-ba81-98264843e5ed\",\"moduleSequenceNumber\":1845525}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":1845525,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/42389e26-2fb6-4bfd-8166-017bcc12a5aa\",\"moduleSequenceNumber\":1845257}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":1845257,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":118.5,\"hackDifficulty\":118.5,\"minDifficulty\":40,\"moneyAvailable\":137500000,\"moneyMax\":1375000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":377,\"serverGrowth\":53}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"79.4.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1842771,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1842773,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1842775,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"phantasy\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52.5,\"hackDifficulty\":52.5,\"minDifficulty\":18,\"moneyAvailable\":42088404,\"moneyMax\":420884040,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":271,\"serverGrowth\":48}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":true,\"ip\":\"52.1.4.2\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":1842708,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/079d5c80-0ea9-405a-b7d7-1d3087ff0243\",\"moduleSequenceNumber\":1848154}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":1848154,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/e5cf2fde-edb2-41f1-9934-bc3951b05bea\",\"moduleSequenceNumber\":1843939}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":1843939,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1.5,\"hackDifficulty\":1.0020000000000002,\"minDifficulty\":1,\"moneyAvailable\":350000,\"moneyMax\":350000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":true,\"ip\":\"85.2.0.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1842729,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/b6dfc195-fc83-46f0-822c-3bf9343bfaa1\",\"moduleSequenceNumber\":1864946}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1864946,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/f4e8fec0-eae2-4dec-8f68-cc5fd2f5697a\",\"moduleSequenceNumber\":1843674}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1843674,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":7.2959999999999985,\"minDifficulty\":5,\"moneyAvailable\":350665.57828424487,\"moneyMax\":10000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":true,\"ip\":\"36.7.9.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1842753,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/af8f9aee-13f9-4176-891c-928f67b76407\",\"moduleSequenceNumber\":1844992}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1844992,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/a123c899-7401-40f0-846c-ca5a8a523339\",\"moduleSequenceNumber\":1844464}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1844464,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":9.684,\"minDifficulty\":5,\"moneyAvailable\":396118.3960538921,\"moneyMax\":11500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":true,\"ip\":\"82.8.4.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":1842849,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/c0767517-68d6-49a9-8fe1-721b9d383695\",\"moduleSequenceNumber\":1853894}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":1853894,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/9b92579c-2d79-43e8-aba0-a4a8d8d4e14b\",\"moduleSequenceNumber\":1847101}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":1847101,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":7404312.820654017,\"moneyMax\":12500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"53.0.1.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":5.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",0.9636051428374393],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":54.81000000000022,\"pid\":130468,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":3,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/207e68bd-4b1d-4b1c-abed-1fbad8bea499\",\"moduleSequenceNumber\":1843149}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":1842747,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/207e68bd-4b1d-4b1c-abed-1fbad8bea499\",\"moduleSequenceNumber\":1843149}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":1843149,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/78e4ff3f-b3b2-4b73-8b2f-1a07518e1e77\",\"moduleSequenceNumber\":1846837}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":1846837,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"foodnstuff\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":37.5,\"hackDifficulty\":13.832000000000003,\"minDifficulty\":13,\"moneyAvailable\":1268617.9220395782,\"moneyMax\":37500000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":true,\"ip\":\"11.9.9.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1843137,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1843139,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1843141,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"harakiri-sushi\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":730114,\"moneyMax\":13750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":true,\"ip\":\"38.1.2.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":1842861,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/770a7c73-34b1-4fd8-b620-698d55f31d39\",\"moduleSequenceNumber\":1844199}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":1844199,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/5dc428ba-18bf-4d46-b365-0f1c41c2f9a7\",\"moduleSequenceNumber\":1843673}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":1843673,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"max-hardware\",\"computek\",\"netlink\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":37.5,\"hackDifficulty\":13,\"minDifficulty\":13,\"moneyAvailable\":9020976.882365903,\"moneyMax\":25000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"41.2.8.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/fff3db2e-6c42-43a5-ad33-9d1c649530e5\",\"moduleSequenceNumber\":1847367}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1847367,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/6bee0616-1a74-42c5-b631-5d7f2d73b30f\",\"moduleSequenceNumber\":1845529}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1845529,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c17bb4bf-2f29-4bb2-ad47-5c70d82bf49c\",\"moduleSequenceNumber\":1848414}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1848414,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"max-hardware\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":22500000,\"moneyMax\":225000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":true,\"ip\":\"94.2.3.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1843125,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1843127,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1843129,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":8.526,\"minDifficulty\":8,\"moneyAvailable\":757235,\"moneyMax\":15000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":true,\"ip\":\"92.7.6.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1843131,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1843133,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1843135,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":8.536000000000001,\"minDifficulty\":8,\"moneyAvailable\":1228014.5408833313,\"moneyMax\":20000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"61.3.1.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":19.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",0.3725355090521818],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.609999999999953,\"pid\":130520,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":11,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/57cf11b3-e170-40ba-8e89-a10ffed22c38\",\"moduleSequenceNumber\":1843150}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":1842765,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/99b86470-c9aa-4c74-a1b3-f7b833127463\",\"moduleSequenceNumber\":1845258}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":1845258,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/57cf11b3-e170-40ba-8e89-a10ffed22c38\",\"moduleSequenceNumber\":1843150}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":1843150,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"CSEC\",\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":12000000,\"moneyMax\":120000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":true,\"ip\":\"59.4.1.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1842855,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/11d23c27-253c-4bcd-851f-bc2a08be19f7\",\"moduleSequenceNumber\":1843938}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1843938,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/46ef9eec-72e0-4ba3-a21b-80a327e6e03b\",\"moduleSequenceNumber\":1843413}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1843413,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"joesguns\",\"neo-net\",\"silver-helix\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":8.764,\"minDifficulty\":8,\"moneyAvailable\":1688078,\"moneyMax\":50000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"7.7.4.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/0e72ba28-f248-49f4-96d2-45aaff8f5479\",\"moduleSequenceNumber\":1851790}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":1851790,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/9076e220-328c-4713-a0e0-1abab380c3c2\",\"moduleSequenceNumber\":1847890}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":1847890,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":1843111,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"max-hardware\",\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":39,\"hackDifficulty\":39,\"minDifficulty\":13,\"moneyAvailable\":33200637,\"moneyMax\":332006370,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":203,\"serverGrowth\":30}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"0.4.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1842879,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1842881,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1842883,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\",\"catalyst\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":23208682,\"moneyMax\":232086820,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":229,\"serverGrowth\":28}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"47.3.5.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/2fdcf8d7-3e21-4613-9223-4f7f49561881\",\"moduleSequenceNumber\":1847889}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1847889,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/9e8ba41e-4382-4072-bc43-30ac92e09c76\",\"moduleSequenceNumber\":1851528}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1851528,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/92e29cdb-a85e-4c65-90d2-c4981dfa4908\",\"moduleSequenceNumber\":1960123}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1960123,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":10000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"93.4.5.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1843083,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1843085,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/6cf3fb41-385c-4fae-90fc-ffa72d99aea0\",\"moduleSequenceNumber\":1910955}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1910955,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73.5,\"hackDifficulty\":73.5,\"minDifficulty\":25,\"moneyAvailable\":125000000,\"moneyMax\":1250000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":518,\"serverGrowth\":41}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"41.2.6.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1842975,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1842977,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/4f583a20-5be3-4768-942c-dc81a2d479eb\",\"moduleSequenceNumber\":1859137}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1859137,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":450000000,\"moneyMax\":4500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1062,\"serverGrowth\":59}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"1.7.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1843059,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1843061,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1843063,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":225000000,\"moneyMax\":2250000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":758,\"serverGrowth\":51}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"30.5.7.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1843053,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/6430c63d-3b87-4f3d-b90e-2c445a7f7f62\",\"moduleSequenceNumber\":1851792}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1851792,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/000a1f94-c3b0-4dda-a3ad-75a13ea973c8\",\"moduleSequenceNumber\":1859138}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1859138,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":548,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"45.9.3.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/e9ca0133-a2f9-44d7-ba20-ca938a1123e2\",\"moduleSequenceNumber\":1851529}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1851529,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/fb694885-0c4f-4125-9bbf-d910c4fdf119\",\"moduleSequenceNumber\":1847893}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1847893,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/ce5f8b1b-d0b0-467b-b08a-fcb3bb5c9233\",\"moduleSequenceNumber\":1911517}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1911517,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"crush-fitness\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":353,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"86.9.1.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/41e506e7-cdcf-4d83-823e-90c04ccaaff1\",\"moduleSequenceNumber\":1847892}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1847892,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/141872cb-ed0b-4f40-9db1-74179f66bd51\",\"moduleSequenceNumber\":1847894}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1847894,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1843099,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":214,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"1.9.3.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":1843005,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":1843007,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/b62231c9-dc02-44dd-a29f-5fae49d3f96e\",\"moduleSequenceNumber\":1849972}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":1849972,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"stormtech\",\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":509,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"4.4.7.9\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":5.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",0.5151042554748388],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.809999999999953,\"pid\":130501,\"ramUsage\":1.75,\"server\":\"CSEC\",\"threads\":3,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/f86852ad-885f-4d10-9db3-1e860fd7e8bc\",\"moduleSequenceNumber\":1845530}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":1842759,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/950de081-eca1-47bb-a60b-9291fa181648\",\"moduleSequenceNumber\":1859664}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":1859664,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/f86852ad-885f-4d10-9db3-1e860fd7e8bc\",\"moduleSequenceNumber\":1845530}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":1845530,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":59,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"48.3.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1843017,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1843019,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1843021,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"86.7.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":6000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"66.0.4.7\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-0\",\"httpPortOpen\":false,\"ip\":\"28.8.9.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/a49cb93f-7026-4d57-81db-b9d62b4a90a3\",\"moduleSequenceNumber\":1842713}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-0\",\"moduleSequenceNumber\":1842713,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/8f555d44-b08f-4fc7-b80f-41b47cccc269\",\"moduleSequenceNumber\":1842714}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-0\",\"moduleSequenceNumber\":1842714,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/949ff3f0-cf63-4cb2-9ee3-d58152af0ea9\",\"moduleSequenceNumber\":1842715}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-0\",\"moduleSequenceNumber\":1842715,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1\",\"httpPortOpen\":false,\"ip\":\"99.3.7.2\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":210,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",0.9336999178004373],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.409999999999954,\"pid\":130505,\"ramUsage\":1.75,\"server\":\"pserv-1\",\"threads\":73,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/51854985-f8f7-4fea-a1d6-8e59522481f4\",\"moduleSequenceNumber\":1844201}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",0.8123542896047298],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.409999999999954,\"pid\":130508,\"ramUsage\":1.75,\"server\":\"pserv-1\",\"threads\":47,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/51854985-f8f7-4fea-a1d6-8e59522481f4\",\"moduleSequenceNumber\":1844201}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/58ca3bd1-b3af-42d8-b501-2d82ff0e62aa\",\"moduleSequenceNumber\":1844200}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1\",\"moduleSequenceNumber\":1844200,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/19b03d4a-4926-44de-9457-93a2876ab6b2\",\"moduleSequenceNumber\":1845263}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1\",\"moduleSequenceNumber\":1845263,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/51854985-f8f7-4fea-a1d6-8e59522481f4\",\"moduleSequenceNumber\":1844201}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1\",\"moduleSequenceNumber\":1844201,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2\",\"httpPortOpen\":false,\"ip\":\"10.7.9.4\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":248.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",0.9515519047803174],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.81000000000061,\"pid\":130446,\"ramUsage\":1.75,\"server\":\"pserv-2\",\"threads\":47,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/460e2022-27e4-4fc5-a050-c10d29e12982\",\"moduleSequenceNumber\":1844202}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",0.579133467932138],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.81000000000061,\"pid\":130449,\"ramUsage\":1.75,\"server\":\"pserv-2\",\"threads\":47,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/460e2022-27e4-4fc5-a050-c10d29e12982\",\"moduleSequenceNumber\":1844202}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",0.13842962810397919],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":54.61000000000022,\"pid\":130486,\"ramUsage\":1.75,\"server\":\"pserv-2\",\"threads\":47,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/460e2022-27e4-4fc5-a050-c10d29e12982\",\"moduleSequenceNumber\":1844202}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",0.5673662193557789],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.609999999999953,\"pid\":130513,\"ramUsage\":1.7,\"server\":\"pserv-2\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/7c814f38-4e45-469b-94d0-45dfc42684df\",\"moduleSequenceNumber\":1845255}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/7c814f38-4e45-469b-94d0-45dfc42684df\",\"moduleSequenceNumber\":1845255}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-2\",\"moduleSequenceNumber\":1845255,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/e699bc97-0f9e-4c98-b85e-8447b482f001\",\"moduleSequenceNumber\":1845256}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-2\",\"moduleSequenceNumber\":1845256,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/460e2022-27e4-4fc5-a050-c10d29e12982\",\"moduleSequenceNumber\":1844202}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-2\",\"moduleSequenceNumber\":1844202,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-3\",\"httpPortOpen\":false,\"ip\":\"67.8.9.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":250.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",0.6608235118207508],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":114.81000000000107,\"pid\":130411,\"ramUsage\":1.75,\"server\":\"pserv-3\",\"threads\":47,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/95d236a0-2ef4-4ea1-8337-d9b40ad6bc71\",\"moduleSequenceNumber\":1844993}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",0.9859517950381063],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":54.81000000000022,\"pid\":130480,\"ramUsage\":1.75,\"server\":\"pserv-3\",\"threads\":48,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/95d236a0-2ef4-4ea1-8337-d9b40ad6bc71\",\"moduleSequenceNumber\":1844993}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",0.35657907206968287],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":54.61000000000022,\"pid\":130483,\"ramUsage\":1.75,\"server\":\"pserv-3\",\"threads\":47,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/95d236a0-2ef4-4ea1-8337-d9b40ad6bc71\",\"moduleSequenceNumber\":1844993}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",0.6292861930761897],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.609999999999953,\"pid\":130516,\"ramUsage\":1.7,\"server\":\"pserv-3\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/8743683c-787a-41a5-9618-eb5d05040e63\",\"moduleSequenceNumber\":1844991}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/8743683c-787a-41a5-9618-eb5d05040e63\",\"moduleSequenceNumber\":1844991}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-3\",\"moduleSequenceNumber\":1844991,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/c347dee4-bbec-4327-9f22-f19f7e4c452b\",\"moduleSequenceNumber\":1844726}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-3\",\"moduleSequenceNumber\":1844726,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/95d236a0-2ef4-4ea1-8337-d9b40ad6bc71\",\"moduleSequenceNumber\":1844993}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-3\",\"moduleSequenceNumber\":1844993,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4\",\"httpPortOpen\":false,\"ip\":\"44.0.3.3\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/2aa46931-a7a4-4dd1-b972-be92ec540fc2\",\"moduleSequenceNumber\":1844989}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-4\",\"moduleSequenceNumber\":1844989,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/c706bf66-1262-4eca-9e61-d8cbb2c6b11d\",\"moduleSequenceNumber\":1844465}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4\",\"moduleSequenceNumber\":1844465,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/714fe7c6-1334-4128-8bb8-b6f027285fd9\",\"moduleSequenceNumber\":1845260}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4\",\"moduleSequenceNumber\":1845260,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-5\",\"httpPortOpen\":false,\"ip\":\"22.3.6.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/221ca842-2239-4df8-8a89-338a701a0304\",\"moduleSequenceNumber\":1852320}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-5\",\"moduleSequenceNumber\":1852320,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/aa6608f5-face-45e1-bb06-be22f889d6d1\",\"moduleSequenceNumber\":1852321}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-5\",\"moduleSequenceNumber\":1852321,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/f881dde6-bd92-4979-a450-e1e9c6e69531\",\"moduleSequenceNumber\":1860451}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-5\",\"moduleSequenceNumber\":1860451,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-6\",\"httpPortOpen\":false,\"ip\":\"26.8.8.3\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/21db4c19-326c-4e66-9e85-e0edb67db493\",\"moduleSequenceNumber\":1865742}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-6\",\"moduleSequenceNumber\":1865742,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/1d6a28bc-3369-4254-a88d-bb2a15a514a5\",\"moduleSequenceNumber\":1862295}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-6\",\"moduleSequenceNumber\":1862295,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/8563c1a4-0a43-46b4-a8a0-e324ce76c6f7\",\"moduleSequenceNumber\":1875362}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-6\",\"moduleSequenceNumber\":1875362,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-7\",\"httpPortOpen\":false,\"ip\":\"10.9.2.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/4532b58e-db87-465b-a0a8-718436d05c94\",\"moduleSequenceNumber\":1874021}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-7\",\"moduleSequenceNumber\":1874021,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/7c52f442-6b3c-4a20-a8b0-57c6c4545af2\",\"moduleSequenceNumber\":1869196}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-7\",\"moduleSequenceNumber\":1869196,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/7f1eea0c-0975-45b2-a70f-d2adf383c266\",\"moduleSequenceNumber\":1905932}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-7\",\"moduleSequenceNumber\":1905932,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8\",\"httpPortOpen\":false,\"ip\":\"6.8.2.9\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/1208d9a9-545b-424f-b1a1-19698b371eb4\",\"moduleSequenceNumber\":1909829}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-8\",\"moduleSequenceNumber\":1909829,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/539f486a-85a8-412e-8478-976303804769\",\"moduleSequenceNumber\":1879926}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8\",\"moduleSequenceNumber\":1879926,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/89ab9fc1-464c-4c05-b49f-35b1eef58aa7\",\"moduleSequenceNumber\":1909827}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8\",\"moduleSequenceNumber\":1909827,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-9\",\"httpPortOpen\":false,\"ip\":\"51.4.7.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/51f0403e-e75e-4530-90c3-7a7bdd6bea06\",\"moduleSequenceNumber\":1909828}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-9\",\"moduleSequenceNumber\":1909828,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/3322eb5a-7c26-4694-8339-002c1fc9b679\",\"moduleSequenceNumber\":1890776}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-9\",\"moduleSequenceNumber\":1890776,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/21413dd2-8104-407e-acb7-3ceb43c33d70\",\"moduleSequenceNumber\":1910112}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-9\",\"moduleSequenceNumber\":1910112,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-10\",\"httpPortOpen\":false,\"ip\":\"31.5.6.2\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/28fb2754-d988-41ca-88dc-280ce1b97982\",\"moduleSequenceNumber\":1910673}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-10\",\"moduleSequenceNumber\":1910673,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/007b127d-52b9-4a47-9792-cdede08dccaf\",\"moduleSequenceNumber\":1898729}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-10\",\"moduleSequenceNumber\":1898729,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/78776e32-e8e2-458c-a25e-626c71f27a67\",\"moduleSequenceNumber\":1910110}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-10\",\"moduleSequenceNumber\":1910110,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-11\",\"httpPortOpen\":false,\"ip\":\"40.5.7.4\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/21680ae7-7580-4545-b560-7073d9efb8e1\",\"moduleSequenceNumber\":1910111}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-11\",\"moduleSequenceNumber\":1910111,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/27811586-af03-4fa0-a285-8dd910d43cea\",\"moduleSequenceNumber\":1909266}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-11\",\"moduleSequenceNumber\":1909266,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/f3c3fbb9-4fce-4daf-be51-2043b48a8261\",\"moduleSequenceNumber\":1910954}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-11\",\"moduleSequenceNumber\":1910954,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-12\",\"httpPortOpen\":false,\"ip\":\"63.8.9.3\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/8275f9bf-8901-42fd-a6b5-60d98b1d5f20\",\"moduleSequenceNumber\":1953610}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-12\",\"moduleSequenceNumber\":1953610,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/2bb4e366-a88f-41ff-89a8-9b366e64f89e\",\"moduleSequenceNumber\":1919364}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-12\",\"moduleSequenceNumber\":1919364,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/a9c59062-bcbe-43e6-a969-2c54cdd1c7fb\",\"moduleSequenceNumber\":1954177}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-12\",\"moduleSequenceNumber\":1954177,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-13\",\"httpPortOpen\":false,\"ip\":\"27.1.2.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/080b80d8-1052-4f97-8936-3d07970725a1\",\"moduleSequenceNumber\":1994574}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-13\",\"moduleSequenceNumber\":1994574,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/842f1b45-0682-458d-9529-bf77dd16e7f2\",\"moduleSequenceNumber\":1981356}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-13\",\"moduleSequenceNumber\":1981356,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/fc8c7df5-809e-4c94-a15b-b7490d78f963\",\"moduleSequenceNumber\":1994576}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-13\",\"moduleSequenceNumber\":1994576,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-14\",\"httpPortOpen\":false,\"ip\":\"7.9.1.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",0.5001305750184117],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.609999999999953,\"pid\":130517,\"ramUsage\":1.75,\"server\":\"pserv-14\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/e87c5163-5d1c-49c9-aba3-9c10b7321f43\",\"moduleSequenceNumber\":1989660}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/dcaa1fd0-a32c-4046-ac6f-30d18536a60b\",\"moduleSequenceNumber\":1994575}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-14\",\"moduleSequenceNumber\":1994575,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/e87c5163-5d1c-49c9-aba3-9c10b7321f43\",\"moduleSequenceNumber\":1989660}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-14\",\"moduleSequenceNumber\":1989660,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-14\",\"moduleSequenceNumber\":1989370,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-15\",\"httpPortOpen\":false,\"ip\":\"20.0.7.5\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",0.6564858871243853],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.81000000000061,\"pid\":130448,\"ramUsage\":1.75,\"server\":\"pserv-15\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/5f2b4148-b7f7-42af-96a2-5c99c1add70a\",\"moduleSequenceNumber\":1998054}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-15\",\"moduleSequenceNumber\":1997757,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/5f2b4148-b7f7-42af-96a2-5c99c1add70a\",\"moduleSequenceNumber\":1998054}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-15\",\"moduleSequenceNumber\":1998054,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-15\",\"moduleSequenceNumber\":1997761,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-16\",\"httpPortOpen\":false,\"ip\":\"97.5.2.6\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",0.9641743446843614],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":54.61000000000022,\"pid\":130482,\"ramUsage\":1.75,\"server\":\"pserv-16\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/df39346c-db84-47b7-944c-2bd1608a0495\",\"moduleSequenceNumber\":2002441}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-16\",\"moduleSequenceNumber\":2002436,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/df39346c-db84-47b7-944c-2bd1608a0495\",\"moduleSequenceNumber\":2002441}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-16\",\"moduleSequenceNumber\":2002441,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-16\",\"moduleSequenceNumber\":2002440,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-17\",\"httpPortOpen\":false,\"ip\":\"85.9.9.2\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",0.8992345782520013],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.609999999999953,\"pid\":130514,\"ramUsage\":1.75,\"server\":\"pserv-17\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/259f5526-d0e3-4929-ab7c-83faeec20a05\",\"moduleSequenceNumber\":2007466}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-17\",\"moduleSequenceNumber\":2007163,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/259f5526-d0e3-4929-ab7c-83faeec20a05\",\"moduleSequenceNumber\":2007466}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-17\",\"moduleSequenceNumber\":2007466,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-17\",\"moduleSequenceNumber\":2007167,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-18\",\"httpPortOpen\":false,\"ip\":\"62.6.7.6\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.8602753456116927],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.81000000000061,\"pid\":130434,\"ramUsage\":1.75,\"server\":\"pserv-18\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/18287971-60b9-4384-ba10-fc170b0e17be\",\"moduleSequenceNumber\":2014032}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-18\",\"moduleSequenceNumber\":2013726,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/18287971-60b9-4384-ba10-fc170b0e17be\",\"moduleSequenceNumber\":2014032}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-18\",\"moduleSequenceNumber\":2014032,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-18\",\"moduleSequenceNumber\":2013730,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-19\",\"httpPortOpen\":false,\"ip\":\"93.1.7.6\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.3972425397301593],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":115.01000000000107,\"pid\":130397,\"ramUsage\":1.75,\"server\":\"pserv-19\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/6c2dc276-8363-4d71-bde8-728818e41975\",\"moduleSequenceNumber\":2020363}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-19\",\"moduleSequenceNumber\":2020054,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/6c2dc276-8363-4d71-bde8-728818e41975\",\"moduleSequenceNumber\":2020363}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-19\",\"moduleSequenceNumber\":2020363,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-19\",\"moduleSequenceNumber\":2020058,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-20\",\"httpPortOpen\":false,\"ip\":\"50.7.1.4\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-20\",\"moduleSequenceNumber\":2054109,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/025d7d67-241e-4cb4-804d-da7071131af8\",\"moduleSequenceNumber\":2054114}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-20\",\"moduleSequenceNumber\":2054114,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-20\",\"moduleSequenceNumber\":2054113,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-21\",\"httpPortOpen\":false,\"ip\":\"88.7.6.9\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-21\",\"moduleSequenceNumber\":2060563,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/f999eaa9-5585-4eab-9e4d-6e4bf208c5d8\",\"moduleSequenceNumber\":2060568}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-21\",\"moduleSequenceNumber\":2060568,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-21\",\"moduleSequenceNumber\":2060567,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-22\",\"httpPortOpen\":false,\"ip\":\"28.3.4.9\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-22\",\"moduleSequenceNumber\":2066770,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/ef5ccfb8-896e-4ab6-9ca5-d1ed71dbe5b0\",\"moduleSequenceNumber\":2067088}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-22\",\"moduleSequenceNumber\":2067088,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-22\",\"moduleSequenceNumber\":2066774,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-23\",\"httpPortOpen\":false,\"ip\":\"1.9.6.9\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",0.1862038224095568],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.409999999999954,\"pid\":130504,\"ramUsage\":1.75,\"server\":\"pserv-23\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/919e390e-3334-4390-8bde-c8974d8971dc\",\"moduleSequenceNumber\":2073042}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-23\",\"moduleSequenceNumber\":2073037,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/919e390e-3334-4390-8bde-c8974d8971dc\",\"moduleSequenceNumber\":2073042}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-23\",\"moduleSequenceNumber\":2073042,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-23\",\"moduleSequenceNumber\":2073041,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-24\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-24\",\"httpPortOpen\":false,\"ip\":\"45.1.4.7\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-24\",\"moduleSequenceNumber\":2079048,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/631977fc-ee52-4408-8b59-187a8df3ea75\",\"moduleSequenceNumber\":2079053}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-24\",\"moduleSequenceNumber\":2079053,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-24\",\"moduleSequenceNumber\":2079052,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Aevum\",\"playerReputation\":107535.47100462484}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":101421.15812211185}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Tetrads\",\"playerReputation\":19487.986025339473}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":1659771.9253458565}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":134118.1142025763}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":73784.1237840088}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Bladeburners\",\"playerReputation\":7168.903460675586}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":10,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":20,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":true,\"EnableBashHotkeys\":true,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":300,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":true,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#FFF\",\"primary\":\"#F8F8F2\",\"primarydark\":\"#FAFAEB\",\"successlight\":\"#ADE146\",\"success\":\"#A6E22E\",\"successdark\":\"#98E104\",\"errorlight\":\"#FF69A0\",\"error\":\"#F92672\",\"errordark\":\"#D10F56\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#E1D992\",\"warning\":\"#E6DB74\",\"warningdark\":\"#EDDD54\",\"infolight\":\"#92E1F1\",\"info\":\"#66D9EF\",\"infodark\":\"#31CDED\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#F92672\",\"money\":\"#E6DB74\",\"hack\":\"#A6E22E\",\"combat\":\"#75715E\",\"cha\":\"#AE81FF\",\"int\":\"#66D9EF\",\"rep\":\"#E69F66\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#272822\",\"backgroundsecondary\":\"#1B1C18\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":\"1.25\",\"fontFamily\":\"monospace\"},\"overview\":{\"x\":-446,\"y\":5,\"opened\":true},\"EditorTheme\":{\"base\":\"vs-dark\",\"inherit\":true,\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}}}}","VersionSave":"15","AllGangsSave":"{\"Slum Snakes\":{\"power\":1776.463672980106,\"territory\":1},\"Tetrads\":{\"power\":1150.5209815734954,\"territory\":0},\"The Syndicate\":{\"power\":1184.7457785312267,\"territory\":0},\"The Dark Army\":{\"power\":1159.2060167990478,\"territory\":0},\"Speakers for the Dead\":{\"power\":6.553555867817848,\"territory\":0},\"NiteSec\":{\"power\":1119.1542810313956,\"territory\":0},\"The Black Hand\":{\"power\":197.19303150801395,\"territory\":0}}","LastExportBonus":"1651065792882","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}