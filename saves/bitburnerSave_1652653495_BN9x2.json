{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":290,\"hp\":1020,\"max_hp\":1020,\"strength\":5144,\"defense\":10103,\"dexterity\":2402,\"agility\":5074,\"charisma\":288,\"intelligence\":178,\"hacking_chance_mult\":1.8901243207766345,\"hacking_speed_mult\":1.9857646114079328,\"hacking_money_mult\":2.2870504281397284,\"hacking_grow_mult\":1.8901243207766345,\"hacking_exp\":530379.2938185814,\"strength_exp\":241580.32348264716,\"defense_exp\":241580.32348264716,\"dexterity_exp\":408008.2990171215,\"agility_exp\":339680.04953247536,\"charisma_exp\":194805.58557431086,\"intelligence_exp\":136006.1264785184,\"hacking_mult\":2.6197123085964162,\"strength_mult\":58.11425594905929,\"defense_mult\":114.13976762632639,\"dexterity_mult\":25.01250113455981,\"agility_mult\":54.32068178464971,\"charisma_mult\":3.3818104347335542,\"hacking_exp_mult\":3.8110264809306367,\"strength_exp_mult\":6.4825560440630134,\"defense_exp_mult\":6.4825560440630134,\"dexterity_exp_mult\":8.200433395739708,\"agility_exp_mult\":6.4825560440630134,\"charisma_exp_mult\":3.343005685026874,\"company_rep_mult\":4.966751303468498,\"faction_rep_mult\":2.8943772164734827,\"money\":1214481785818.8303,\"city\":\"Aevum\",\"location\":\"Travel Agency\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[\"hacknet-node-0\",\"hacknet-node-1\",\"hacknet-node-2\",\"hacknet-node-3\",\"hacknet-node-4\"],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":640,\"hashes\":337.144423290073,\"upgrades\":{\"Sell for Money\":1765,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":1,\"Exchange for Bladeburner SP\":1,\"Generate Coding Contract\":0}}},\"factions\":[\"Aevum\",\"Slum Snakes\",\"Bladeburners\"],\"factionInvitations\":[\"CyberSec\",\"Netburners\",\"The Syndicate\",\"Daedalus\"],\"queuedAugmentations\":[],\"augmentations\":[{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":25,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"BrachiBlades\"},{\"level\":1,\"name\":\"SmartSonar Implant\"},{\"level\":1,\"name\":\"Combat Rib II\"},{\"level\":1,\"name\":\"DermaForce Particle Barrier\"},{\"level\":1,\"name\":\"HemoRecirculator\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"NutriGen Implant\"},{\"level\":1,\"name\":\"Synthetic Heart\"},{\"level\":1,\"name\":\"HyperSight Corneal Implant\"},{\"level\":1,\"name\":\"FocusWire\"},{\"level\":1,\"name\":\"Synfibril Muscle\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"ADR-V2 Pheromone Gene\"},{\"level\":1,\"name\":\"The Shadow's Simulacrum\"},{\"level\":1,\"name\":\"Power Recirculation Core\"},{\"level\":1,\"name\":\"Bionic Legs\"},{\"level\":1,\"name\":\"Neurotrainer III\"},{\"level\":1,\"name\":\"Bionic Spine\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Combat Rib III\"},{\"level\":1,\"name\":\"Augmented Targeting III\"},{\"level\":1,\"name\":\"Graphene Bionic Spine Upgrade\"},{\"level\":1,\"name\":\"CordiARC Fusion Reactor\"},{\"level\":1,\"name\":\"Graphene Bionic Legs Upgrade\"},{\"level\":1,\"name\":\"Xanipher\"},{\"level\":1,\"name\":\"EsperTech Bladeburner Eyewear\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"The Blade's Simulacrum\"},{\"level\":1,\"name\":\"GOLEM Serum\"},{\"level\":1,\"name\":\"Blade's Runners\"},{\"level\":1,\"name\":\"I.N.T.E.R.L.I.N.K.E.D\"},{\"level\":1,\"name\":\"Graphene Bone Lacings\"},{\"level\":1,\"name\":\"NEMEAN Subdermal Weave\"},{\"level\":1,\"name\":\"Vangelis Virus\"},{\"level\":1,\"name\":\"BLADE-51b Tesla Armor\"},{\"level\":1,\"name\":\"ORION-MKIV Shoulder\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"}],\"sourceFiles\":[{\"lvl\":3,\"n\":1},{\"lvl\":3,\"n\":5},{\"lvl\":3,\"n\":2},{\"lvl\":3,\"n\":3},{\"lvl\":3,\"n\":4},{\"lvl\":3,\"n\":10},{\"lvl\":1,\"n\":9},{\"lvl\":3,\"n\":6},{\"lvl\":3,\"n\":7},{\"lvl\":3,\"n\":11}],\"numPeopleKilled\":0,\"karma\":-78408.30000000066,\"crime_money_mult\":4.6535503253989425,\"crime_success_mult\":2.5898019202220204,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":5,\"workExpMult\":4,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":100,\"graftAugmentationName\":\"\",\"timeWorkedGraftAugmentation\":0,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":2000,\"work_money_mult\":3.8921440013432465,\"hacknet_node_money_mult\":4.51617227635618,\"hacknet_node_purchase_cost_mult\":0.39120272080184615,\"hacknet_node_ram_cost_mult\":0.5113761056233282,\"hacknet_node_core_cost_mult\":0.5113761056233282,\"hacknet_node_level_cost_mult\":0.434669689779829,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":{\"ctor\":\"Gang\",\"data\":{\"facName\":\"Slum Snakes\",\"members\":[{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":906827.2101463234,\"hack\":1655,\"str\":468017,\"def\":134280,\"dex\":7359,\"agi\":4,\"cha\":4720,\"hack_exp\":15703.401559387868,\"str_exp\":769570.4579585862,\"def_exp\":277653.8702688631,\"dex_exp\":42617.24336449172,\"agi_exp\":0,\"cha_exp\":44074.02812398378,\"hack_mult\":1,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":4.553535943756801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":451102.84949360904,\"str_asc_points\":9400259.733132947,\"def_asc_points\":3702242.75887174,\"dex_asc_points\":1097356.7277358447,\"agi_asc_points\":35.211284746924015,\"cha_asc_points\":1029319.4983723531,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Fawn\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":1063309.9640205104,\"hack\":1744,\"str\":470099,\"def\":136476,\"dex\":7661,\"agi\":4,\"cha\":4900,\"hack_exp\":18461.453073735207,\"str_exp\":884892.7647382146,\"def_exp\":321695.0650558207,\"dex_exp\":49981.87192941486,\"agi_exp\":0,\"cha_exp\":51583.087808972225,\"hack_mult\":1,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":4.553535943756801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":458092.4483107886,\"str_asc_points\":9131826.249221893,\"def_asc_points\":3651568.903442322,\"dex_asc_points\":1109009.9165880335,\"agi_asc_points\":36.24169913524208,\"cha_asc_points\":1035935.3565284993,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Turduck'n\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":1523004.4895736282,\"hack\":2354,\"str\":425540,\"def\":120857,\"dex\":9351,\"agi\":4,\"cha\":5678,\"hack_exp\":33468.96543099445,\"str_exp\":1200561.8102320675,\"def_exp\":425912.4255582519,\"dex_exp\":85301.95077484669,\"agi_exp\":0,\"cha_exp\":84333.34525701568,\"hack_mult\":1,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":4.553535943756801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":618513.7299363656,\"str_asc_points\":6905399.321342011,\"def_asc_points\":2629509.3598460667,\"dex_asc_points\":1327002.4323265478,\"agi_asc_points\":36.24169913524208,\"cha_asc_points\":1137522.609742287,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Fender\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":1524747.927859682,\"hack\":2358,\"str\":425504,\"def\":120859,\"dex\":9366,\"agi\":4,\"cha\":5684,\"hack_exp\":33548.36707247869,\"str_exp\":1201736.4121809911,\"def_exp\":426360.2367437012,\"dex_exp\":85504.82030127244,\"agi_exp\":0,\"cha_exp\":84489.65377740518,\"hack_mult\":1,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":4.553535943756801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":619976.8489538834,\"str_asc_points\":6902495.321469974,\"def_asc_points\":2628787.136460838,\"dex_asc_points\":1330157.0511483653,\"agi_asc_points\":36.06992734436678,\"cha_asc_points\":1139033.1767888938,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Just Moe\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":1752770.1960043241,\"hack\":2424,\"str\":427082,\"def\":121728,\"dex\":9549,\"agi\":4,\"cha\":5800,\"hack_exp\":38415.72255863061,\"str_exp\":1364339.7842436412,\"def_exp\":484472.1921720834,\"dex_exp\":97685.97851380125,\"agi_exp\":0,\"cha_exp\":96600.8139542049,\"hack_mult\":1,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":4.553535943756801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":615088.499373129,\"str_asc_points\":6731621.075849071,\"def_asc_points\":2568186.949924221,\"dex_asc_points\":1313630.0679853065,\"agi_asc_points\":33.59293693050895,\"cha_asc_points\":1126620.836517955,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Mixer\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":1759077.5529066743,\"hack\":2439,\"str\":426816,\"def\":121639,\"dex\":9582,\"agi\":4,\"cha\":5826,\"hack_exp\":38746.57044961463,\"str_exp\":1368585.0470705228,\"def_exp\":485908.54498739884,\"dex_exp\":98309.02873140952,\"agi_exp\":0,\"cha_exp\":97298.92321288277,\"hack_mult\":1,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":4.553535943756801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":620589.8734530178,\"str_asc_points\":6717949.116096782,\"def_asc_points\":2562220.802809428,\"dex_asc_points\":1319513.941056588,\"agi_asc_points\":27.91134695154574,\"cha_asc_points\":1133576.4885356163,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Hip\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":33771.04479318005,\"hack\":648,\"str\":264654,\"def\":66500,\"dex\":3451,\"agi\":4,\"cha\":2134,\"hack_exp\":1163.236596675605,\"str_exp\":46026.10763587902,\"def_exp\":16200.756348425477,\"dex_exp\":2998.616268706917,\"agi_exp\":0,\"cha_exp\":3008.8386072397725,\"hack_mult\":1,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":4.553535943756801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":583395.6112538788,\"str_asc_points\":7924840.339546671,\"def_asc_points\":2970755.8162019807,\"dex_asc_points\":1280435.932350244,\"agi_asc_points\":23.775974022119172,\"cha_asc_points\":1130632.441541752,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Teal\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":149270.03696709275,\"hack\":1191,\"str\":334057,\"def\":89118,\"dex\":5485,\"agi\":4,\"cha\":3391,\"hack_exp\":4002.79967111217,\"str_exp\":156633.8743122538,\"def_exp\":55234.28659456864,\"dex_exp\":10306.00665387997,\"agi_exp\":0,\"cha_exp\":10340.773703384746,\"hack_mult\":1,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":4.553535943756801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":588803.5434984071,\"str_asc_points\":7822923.168837523,\"def_asc_points\":2943266.1369664962,\"dex_asc_points\":1289177.048166811,\"agi_asc_points\":20.46894374623247,\"cha_asc_points\":1138270.2509683995,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"TFT\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":113212.97468041576,\"hack\":584,\"str\":374120,\"def\":104030,\"dex\":3510,\"agi\":4,\"cha\":2437,\"hack_exp\":1916.1388665619095,\"str_exp\":127278.51464244051,\"def_exp\":46740.540749202184,\"dex_exp\":5654.593654091169,\"agi_exp\":0,\"cha_exp\":6176.6011228229845,\"hack_mult\":1,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":4.553535943756801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":275894.7684806772,\"str_asc_points\":10562207.187443161,\"def_asc_points\":4309692.677218269,\"dex_asc_points\":793562.8563684097,\"agi_asc_points\":11.936265015286558,\"cha_asc_points\":830395.9654883051,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Brownstone\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":1007888.4826689439,\"hack\":1082,\"str\":495349,\"def\":147183,\"dex\":5613,\"agi\":4,\"cha\":3936,\"hack_exp\":11823.453797920629,\"str_exp\":852005.2869035895,\"def_exp\":316239.678689421,\"dex_exp\":35855.93409835537,\"agi_exp\":0,\"cha_exp\":39867.359276310635,\"hack_mult\":1,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":4.553535943756801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":227341.82758146248,\"str_asc_points\":10243071.147766344,\"def_asc_points\":4269653.989057742,\"dex_asc_points\":690560.5036539781,\"agi_asc_points\":0,\"cha_asc_points\":748724.7382035605,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Sal\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":660069.5316266028,\"hack\":838,\"str\":479403,\"def\":141786,\"dex\":4767,\"agi\":4,\"cha\":3435,\"hack_exp\":7227.452027594174,\"str_exp\":585053.7126515366,\"def_exp\":217820.8092297574,\"dex_exp\":22884.645803886535,\"agi_exp\":0,\"cha_exp\":25950.730716156093,\"hack_mult\":1,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":4.553535943756801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":187257.58643099244,\"str_asc_points\":10646710.512413807,\"def_asc_points\":4465160.271231962,\"dex_asc_points\":620078.1096518401,\"agi_asc_points\":0,\"cha_asc_points\":699302.017908031,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Right Hand\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":433948.1411474183,\"hack\":620,\"str\":445224,\"def\":129325,\"dex\":3887,\"agi\":4,\"cha\":2827,\"hack_exp\":4482.407287154063,\"str_exp\":403348.4052273096,\"def_exp\":149024.88195514466,\"dex_exp\":14769.564485740495,\"agi_exp\":0,\"cha_exp\":16825.692157883605,\"hack_mult\":1,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":4.553535943756801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":145690.8861232621,\"str_asc_points\":10235885.575604267,\"def_asc_points\":4227626.955861115,\"dex_asc_points\":522437.275860418,\"agi_asc_points\":0,\"cha_asc_points\":594637.4323916296,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Spine\",\"Nanofiber Weave\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Left Shark\"}}],\"wanted\":75.88373924162332,\"respect\":10910748.99562829,\"isHackingGang\":false,\"respectGainRate\":2492.4253246493613,\"wantedGainRate\":0.000340817127442144,\"moneyGainRate\":91926603.79059611,\"storedCycles\":9,\"storedTerritoryAndPowerCycles\":34,\"territoryClashChance\":1,\"territoryWarfareEngaged\":true,\"notifyMemberDeath\":true}},\"corporation\":{\"ctor\":\"Corporation\",\"data\":{\"name\":\"corp\",\"divisions\":[{\"ctor\":\"Industry\",\"data\":{\"name\":\"Agriculture\",\"type\":\"Agriculture\",\"sciResearch\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Scientific Research\",\"qty\":1685.729963622739,\"qlt\":0,\"dmd\":0,\"dmdR\":[0,0],\"cmp\":0,\"cmpR\":[0,0],\"mv\":0,\"mku\":0,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":0,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"researched\":{\"Hi-Tech R&D Laboratory\":true},\"reqMats\":{\"Water\":0.5,\"Energy\":0.5},\"prodMats\":[\"Plants\",\"Food\"],\"products\":{},\"makesProducts\":false,\"awareness\":11.113999999999663,\"popularity\":2.8942000000000174,\"startingCost\":40000000000,\"reFac\":0.72,\"sciFac\":0.5,\"hwFac\":0.2,\"robFac\":0.3,\"aiFac\":0.3,\"advFac\":0.04,\"prodMult\":157.3540887530432,\"upgrades\":[0,1],\"state\":\"START\",\"newInd\":false,\"offices\":{\"Aevum\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"uRL374J\",\"mor\":100,\"hap\":99.99755038149266,\"ene\":99.99755038149266,\"int\":77,\"cha\":71,\"exp\":80.40100000000017,\"cre\":84,\"eff\":100,\"sal\":1224,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Sa3AA40\",\"mor\":100,\"hap\":99.99964752416103,\"ene\":99.99964752416103,\"int\":64,\"cha\":66,\"exp\":68.40100000000017,\"cre\":66,\"eff\":72,\"sal\":996,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"TijD3Dh\",\"mor\":100,\"hap\":99.99865873340171,\"ene\":99.99865873340171,\"int\":76,\"cha\":97,\"exp\":76.40100000000017,\"cre\":51,\"eff\":96,\"sal\":1176,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"BhkDmRe\",\"mor\":100,\"hap\":99.99815042431948,\"ene\":99.99815042431948,\"int\":81,\"cha\":84,\"exp\":82.40100000000017,\"cre\":76,\"eff\":55,\"sal\":1122,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"5HfM5ut\",\"mor\":100,\"hap\":99.99835380409212,\"ene\":99.99835380409212,\"int\":75,\"cha\":59,\"exp\":62.40100000000017,\"cre\":95,\"eff\":84,\"sal\":1113,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"hqPvMp8\",\"mor\":100,\"hap\":99.99833397082483,\"ene\":99.99833397082483,\"int\":67,\"cha\":99,\"exp\":56.40100000000017,\"cre\":64,\"eff\":84,\"sal\":1098,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"LBilGOu\",\"mor\":100,\"hap\":99.99873571154642,\"ene\":99.99873571154642,\"int\":84,\"cha\":78,\"exp\":81.96900000000015,\"cre\":75,\"eff\":64,\"sal\":1137,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Dp8iDLx\",\"mor\":100,\"hap\":99.99785558354776,\"ene\":99.99785558354776,\"int\":81,\"cha\":90,\"exp\":69.96900000000015,\"cre\":94,\"eff\":82,\"sal\":1239,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"HPpzw0e\",\"mor\":100,\"hap\":99.99701726824476,\"ene\":99.99701726824476,\"int\":68,\"cha\":100,\"exp\":98.96900000000015,\"cre\":99,\"eff\":58,\"sal\":1260,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"EeH04gZ\",\"mor\":100,\"hap\":99.99806726287925,\"ene\":99.99806726287925,\"int\":66,\"cha\":98,\"exp\":74.96900000000015,\"cre\":62,\"eff\":89,\"sal\":1158,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"i6kir1D\",\"mor\":100,\"hap\":99.99733250624459,\"ene\":99.99733250624459,\"int\":100,\"cha\":58,\"exp\":82.96900000000015,\"cre\":66,\"eff\":62,\"sal\":1095,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"nM8Ycyg\",\"mor\":100,\"hap\":99.99872328707637,\"ene\":99.99872328707637,\"int\":87,\"cha\":95,\"exp\":68.96900000000015,\"cre\":68,\"eff\":83,\"sal\":1194,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"wXUZDrx\",\"mor\":100,\"hap\":99.99787429691405,\"ene\":99.99787429691405,\"int\":75,\"cha\":71,\"exp\":68.58500000000014,\"cre\":62,\"eff\":65,\"sal\":1014,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"9hvCImU\",\"mor\":100,\"hap\":99.9979465111931,\"ene\":99.9979465111931,\"int\":57,\"cha\":52,\"exp\":77.58500000000014,\"cre\":61,\"eff\":76,\"sal\":960,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ozaarGu\",\"mor\":100,\"hap\":99.99989111150747,\"ene\":99.99989111150747,\"int\":63,\"cha\":64,\"exp\":84.58500000000014,\"cre\":53,\"eff\":92,\"sal\":1059,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"LGh3Jvv\",\"mor\":100,\"hap\":99.99762171852711,\"ene\":99.99762171852711,\"int\":72,\"cha\":100,\"exp\":88.58500000000014,\"cre\":77,\"eff\":55,\"sal\":1167,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"LyawV4G\",\"mor\":100,\"hap\":99.99962153710884,\"ene\":99.99962153710884,\"int\":97,\"cha\":96,\"exp\":65.58500000000014,\"cre\":69,\"eff\":66,\"sal\":1170,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"2t78Hqi\",\"mor\":100,\"hap\":99.99793036737059,\"ene\":99.99793036737059,\"int\":85,\"cha\":99,\"exp\":56.585000000000136,\"cre\":52,\"eff\":53,\"sal\":1026,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"AkiAHg2\",\"mor\":100,\"hap\":99.99808951137048,\"ene\":99.99808951137048,\"int\":73,\"cha\":87,\"exp\":53.585000000000136,\"cre\":60,\"eff\":61,\"sal\":993,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"5OliexF\",\"mor\":100,\"hap\":99.99795190103099,\"ene\":99.99795190103099,\"int\":72,\"cha\":73,\"exp\":60.585000000000136,\"cre\":62,\"eff\":62,\"sal\":978,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"SAMaRcp\",\"mor\":100,\"hap\":99.9999190280123,\"ene\":99.9999190280123,\"int\":69,\"cha\":54,\"exp\":76.58500000000014,\"cre\":79,\"eff\":92,\"sal\":1101,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"WiOWoYQ\",\"mor\":100,\"hap\":99.99960734146188,\"ene\":99.99960734146188,\"int\":61,\"cha\":71,\"exp\":100.58500000000014,\"cre\":60,\"eff\":67,\"sal\":1068,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"IqqwmZI\",\"mor\":100,\"hap\":99.99970465486366,\"ene\":99.99970465486366,\"int\":52,\"cha\":96,\"exp\":95.58500000000014,\"cre\":79,\"eff\":89,\"sal\":1224,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"BFNTCdB\",\"mor\":100,\"hap\":99.99908617314979,\"ene\":99.99908617314979,\"int\":72,\"cha\":78,\"exp\":98.58500000000014,\"cre\":95,\"eff\":89,\"sal\":1287,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"LGld1Na\",\"mor\":100,\"hap\":99.99806289700302,\"ene\":99.99806289700302,\"int\":91,\"cha\":75,\"exp\":95.58500000000014,\"cre\":70,\"eff\":60,\"sal\":1164,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"8T4wgFo\",\"mor\":100,\"hap\":99.99722441433435,\"ene\":99.99722441433435,\"int\":97,\"cha\":96,\"exp\":82.58500000000014,\"cre\":78,\"eff\":86,\"sal\":1308,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Uy8go3P\",\"mor\":100,\"hap\":99.99702218640294,\"ene\":99.99702218640294,\"int\":74,\"cha\":60,\"exp\":97.58500000000014,\"cre\":64,\"eff\":55,\"sal\":1041,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"viAcaPy\",\"mor\":100,\"hap\":99.99754759310392,\"ene\":99.99754759310392,\"int\":72,\"cha\":55,\"exp\":99.58500000000014,\"cre\":82,\"eff\":71,\"sal\":1128,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"QNSMwN8\",\"mor\":100,\"hap\":99.99951001948418,\"ene\":99.99951001948418,\"int\":64,\"cha\":89,\"exp\":89.58500000000014,\"cre\":51,\"eff\":50,\"sal\":1020,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"MkhYhve\",\"mor\":100,\"hap\":99.99708275791744,\"ene\":99.99708275791744,\"int\":61,\"cha\":82,\"exp\":79.58500000000014,\"cre\":76,\"eff\":82,\"sal\":1131,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"nRWdBL4\",\"mor\":100,\"hap\":99.99950990517351,\"ene\":99.99950990517351,\"int\":70,\"cha\":61,\"exp\":61.585000000000136,\"cre\":74,\"eff\":86,\"sal\":1047,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"8kTHuAv\",\"mor\":100,\"hap\":99.9986251155872,\"ene\":99.9986251155872,\"int\":62,\"cha\":55,\"exp\":85.58500000000014,\"cre\":76,\"eff\":82,\"sal\":1071,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"S4ceh9p\",\"mor\":100,\"hap\":99.99762637994203,\"ene\":99.99762637994203,\"int\":77,\"cha\":95,\"exp\":53.585000000000136,\"cre\":82,\"eff\":55,\"sal\":1077,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"araFv1Q\",\"mor\":100,\"hap\":99.99889285347523,\"ene\":99.99889285347523,\"int\":57,\"cha\":73,\"exp\":56.585000000000136,\"cre\":82,\"eff\":58,\"sal\":969,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"JS6qQQ1\",\"mor\":100,\"hap\":99.99946459446812,\"ene\":99.99946459446812,\"int\":55,\"cha\":87,\"exp\":76.58500000000014,\"cre\":84,\"eff\":98,\"sal\":1191,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"5aP1tHQ\",\"mor\":100,\"hap\":99.99853054328223,\"ene\":99.99853054328223,\"int\":61,\"cha\":55,\"exp\":72.58500000000014,\"cre\":78,\"eff\":96,\"sal\":1077,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"PVcOsdJ\",\"mor\":100,\"hap\":99.9970293047794,\"ene\":99.9970293047794,\"int\":99,\"cha\":94,\"exp\":54.585000000000136,\"cre\":92,\"eff\":57,\"sal\":1179,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"eb4A6TO\",\"mor\":100,\"hap\":99.99805536923662,\"ene\":99.99805536923662,\"int\":82,\"cha\":85,\"exp\":68.58500000000014,\"cre\":73,\"eff\":58,\"sal\":1089,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"sufEOfC\",\"mor\":100,\"hap\":99.99970862846237,\"ene\":99.99970862846237,\"int\":69,\"cha\":69,\"exp\":90.58500000000014,\"cre\":62,\"eff\":67,\"sal\":1062,\"loc\":\"\",\"pos\":\"Business\"}}],\"employeeProd\":{\"Operations\":2786.0080613437212,\"Engineer\":2969.0714949624903,\"Business\":1590.5000332210257,\"Management\":3386.4582222455706,\"Research & Development\":3659.214767315384,\"total\":14391.252579088194,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":8,\"Engineer\":8,\"Business\":7,\"Management\":8,\"Research & Development\":8,\"Training\":0,\"Unassigned\":0,\"total\":39},\"loc\":\"Aevum\",\"size\":39}},\"Chongqing\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"o0ruxl5\",\"mor\":100,\"hap\":99.99883833540945,\"ene\":99.99883833540945,\"int\":96,\"cha\":53,\"exp\":99.39800000000017,\"cre\":73,\"eff\":95,\"sal\":1236,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"8umRekG\",\"mor\":100,\"hap\":99.99934656729577,\"ene\":99.99934656729577,\"int\":74,\"cha\":98,\"exp\":90.39800000000017,\"cre\":94,\"eff\":82,\"sal\":1302,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"aysXLRi\",\"mor\":100,\"hap\":99.99781707353101,\"ene\":99.99781707353101,\"int\":71,\"cha\":73,\"exp\":55.39800000000017,\"cre\":79,\"eff\":84,\"sal\":1074,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Yv8a4vJ\",\"mor\":100,\"hap\":99.997819998784,\"ene\":99.997819998784,\"int\":75,\"cha\":62,\"exp\":91.39800000000017,\"cre\":94,\"eff\":87,\"sal\":1215,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"mViLGhn\",\"mor\":100,\"hap\":99.99942237348274,\"ene\":99.99942237348274,\"int\":80,\"cha\":95,\"exp\":92.39800000000017,\"cre\":88,\"eff\":94,\"sal\":1335,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"CrJt4yV\",\"mor\":100,\"hap\":99.99732469982797,\"ene\":99.99732469982797,\"int\":97,\"cha\":88,\"exp\":76.39800000000017,\"cre\":80,\"eff\":94,\"sal\":1293,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"K9lqnHt\",\"mor\":100,\"hap\":99.99746306029712,\"ene\":99.99746306029712,\"int\":99,\"cha\":79,\"exp\":95.96600000000015,\"cre\":79,\"eff\":61,\"sal\":1230,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"fP1IcO4\",\"mor\":100,\"hap\":99.99755868806994,\"ene\":99.99755868806994,\"int\":59,\"cha\":72,\"exp\":81.96600000000015,\"cre\":87,\"eff\":65,\"sal\":1083,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Vr2k9ro\",\"mor\":100,\"hap\":99.99994414221212,\"ene\":99.99994414221212,\"int\":100,\"cha\":82,\"exp\":76.96600000000015,\"cre\":89,\"eff\":60,\"sal\":1212,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"61WfIOQ\",\"mor\":100,\"hap\":99.9978330200231,\"ene\":99.9978330200231,\"int\":54,\"cha\":84,\"exp\":75.96600000000015,\"cre\":51,\"eff\":53,\"sal\":942,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"UScIY20\",\"mor\":100,\"hap\":99.99986921487648,\"ene\":99.99986921487648,\"int\":94,\"cha\":71,\"exp\":64.96600000000015,\"cre\":72,\"eff\":54,\"sal\":1056,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"FVVqG8f\",\"mor\":100,\"hap\":99.99865515140714,\"ene\":99.99865515140714,\"int\":52,\"cha\":61,\"exp\":89.96600000000015,\"cre\":61,\"eff\":100,\"sal\":1080,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"4idbq1t\",\"mor\":100,\"hap\":99.9976053314687,\"ene\":99.9976053314687,\"int\":80,\"cha\":86,\"exp\":83.58200000000014,\"cre\":86,\"eff\":58,\"sal\":1170,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"CKL66uF\",\"mor\":100,\"hap\":99.99974543679397,\"ene\":99.99974543679397,\"int\":56,\"cha\":89,\"exp\":53.582000000000136,\"cre\":76,\"eff\":81,\"sal\":1056,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"5ib7hyS\",\"mor\":100,\"hap\":99.99773488944898,\"ene\":99.99773488944898,\"int\":68,\"cha\":60,\"exp\":73.58200000000014,\"cre\":60,\"eff\":74,\"sal\":996,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"zF7NO55\",\"mor\":100,\"hap\":99.99837396384275,\"ene\":99.99837396384275,\"int\":66,\"cha\":73,\"exp\":91.58200000000014,\"cre\":87,\"eff\":63,\"sal\":1131,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"NQZ4S7u\",\"mor\":100,\"hap\":99.99901141985147,\"ene\":99.99901141985147,\"int\":89,\"cha\":91,\"exp\":88.58200000000014,\"cre\":61,\"eff\":63,\"sal\":1167,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"h4QFhNq\",\"mor\":100,\"hap\":99.9998822957597,\"ene\":99.9998822957597,\"int\":66,\"cha\":92,\"exp\":92.58200000000014,\"cre\":77,\"eff\":87,\"sal\":1233,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"dNTI7zS\",\"mor\":100,\"hap\":99.99780693030533,\"ene\":99.99780693030533,\"int\":74,\"cha\":74,\"exp\":100.58200000000014,\"cre\":60,\"eff\":87,\"sal\":1176,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"yLpMKWa\",\"mor\":100,\"hap\":99.9985848838217,\"ene\":99.9985848838217,\"int\":73,\"cha\":58,\"exp\":84.58200000000014,\"cre\":99,\"eff\":66,\"sal\":1131,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"mkcdyio\",\"mor\":100,\"hap\":99.99824844965045,\"ene\":99.99824844965045,\"int\":68,\"cha\":57,\"exp\":57.582000000000136,\"cre\":58,\"eff\":51,\"sal\":864,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"VmpZvTo\",\"mor\":100,\"hap\":99.99795609105081,\"ene\":99.99795609105081,\"int\":75,\"cha\":65,\"exp\":96.58200000000014,\"cre\":92,\"eff\":57,\"sal\":1146,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"CsBIjei\",\"mor\":100,\"hap\":99.99921565182298,\"ene\":99.99921565182298,\"int\":56,\"cha\":64,\"exp\":103.58200000000014,\"cre\":81,\"eff\":63,\"sal\":1092,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"mLa67bk\",\"mor\":100,\"hap\":99.9995380215125,\"ene\":99.9995380215125,\"int\":51,\"cha\":64,\"exp\":88.58200000000014,\"cre\":51,\"eff\":81,\"sal\":996,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"HseuxJP\",\"mor\":100,\"hap\":99.99845545866057,\"ene\":99.99845545866057,\"int\":81,\"cha\":58,\"exp\":97.58200000000014,\"cre\":89,\"eff\":70,\"sal\":1176,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"SKXepGO\",\"mor\":100,\"hap\":99.99986937809925,\"ene\":99.99986937809925,\"int\":95,\"cha\":96,\"exp\":60.582000000000136,\"cre\":76,\"eff\":73,\"sal\":1191,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"TbFdHGS\",\"mor\":100,\"hap\":99.99744321787082,\"ene\":99.99744321787082,\"int\":92,\"cha\":95,\"exp\":87.58200000000014,\"cre\":71,\"eff\":87,\"sal\":1287,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"o6PviwI\",\"mor\":100,\"hap\":99.9984254020023,\"ene\":99.9984254020023,\"int\":69,\"cha\":59,\"exp\":72.58200000000014,\"cre\":77,\"eff\":50,\"sal\":972,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"g3KRSyA\",\"mor\":100,\"hap\":99.99767430729688,\"ene\":99.99767430729688,\"int\":89,\"cha\":70,\"exp\":98.58200000000014,\"cre\":52,\"eff\":55,\"sal\":1083,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ftAD08W\",\"mor\":100,\"hap\":99.99800239986915,\"ene\":99.99800239986915,\"int\":52,\"cha\":87,\"exp\":94.58200000000014,\"cre\":51,\"eff\":50,\"sal\":993,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"F6O3QT9\",\"mor\":100,\"hap\":99.99993995410063,\"ene\":99.99993995410063,\"int\":76,\"cha\":74,\"exp\":79.58200000000014,\"cre\":84,\"eff\":87,\"sal\":1191,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"arjvcgD\",\"mor\":100,\"hap\":99.99888945258392,\"ene\":99.99888945258392,\"int\":61,\"cha\":83,\"exp\":66.58200000000014,\"cre\":86,\"eff\":52,\"sal\":1035,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"hBgvhdY\",\"mor\":100,\"hap\":99.99802887930517,\"ene\":99.99802887930517,\"int\":86,\"cha\":97,\"exp\":58.582000000000136,\"cre\":65,\"eff\":60,\"sal\":1089,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"AuFFNWo\",\"mor\":100,\"hap\":99.99849551855071,\"ene\":99.99849551855071,\"int\":74,\"cha\":92,\"exp\":54.582000000000136,\"cre\":54,\"eff\":66,\"sal\":1011,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"HZcw6CG\",\"mor\":100,\"hap\":99.99857383241887,\"ene\":99.99857383241887,\"int\":94,\"cha\":59,\"exp\":77.58200000000014,\"cre\":80,\"eff\":72,\"sal\":1137,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"P7MbTir\",\"mor\":100,\"hap\":99.99715518974796,\"ene\":99.99715518974796,\"int\":68,\"cha\":78,\"exp\":94.58200000000014,\"cre\":62,\"eff\":92,\"sal\":1173,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"iGMt0ue\",\"mor\":100,\"hap\":99.99849858824909,\"ene\":99.99849858824909,\"int\":84,\"cha\":77,\"exp\":89.58200000000014,\"cre\":86,\"eff\":59,\"sal\":1176,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"kYAeho3\",\"mor\":100,\"hap\":99.99959316891665,\"ene\":99.99959316891665,\"int\":89,\"cha\":98,\"exp\":78.58200000000014,\"cre\":100,\"eff\":73,\"sal\":1305,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"e9qXEM3\",\"mor\":100,\"hap\":99.99826015960349,\"ene\":99.99826015960349,\"int\":98,\"cha\":50,\"exp\":65.58200000000014,\"cre\":54,\"eff\":76,\"sal\":1020,\"loc\":\"\",\"pos\":\"Business\"}}],\"employeeProd\":{\"Operations\":2928.575512682265,\"Engineer\":3009.780278697439,\"Business\":1550.5442399737067,\"Management\":3688.467047589639,\"Research & Development\":3485.7340115020643,\"total\":14663.101090445112,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":8,\"Engineer\":8,\"Business\":7,\"Management\":8,\"Research & Development\":8,\"Training\":0,\"Unassigned\":0,\"total\":39},\"loc\":\"Chongqing\",\"size\":39}},\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"WLKafQq\",\"mor\":100,\"hap\":99.99971229170879,\"ene\":99.99971229170879,\"int\":52,\"cha\":98,\"exp\":72.40400000000017,\"cre\":85,\"eff\":53,\"sal\":1068,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"vo4hSwY\",\"mor\":100,\"hap\":99.99810005229043,\"ene\":99.99810005229043,\"int\":94,\"cha\":52,\"exp\":99.40400000000017,\"cre\":89,\"eff\":83,\"sal\":1239,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"nefXyw9\",\"mor\":100,\"hap\":99.998211696495,\"ene\":99.998211696495,\"int\":71,\"cha\":82,\"exp\":79.40400000000017,\"cre\":90,\"eff\":91,\"sal\":1227,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"bAIde67\",\"mor\":100,\"hap\":99.9971155037434,\"ene\":99.9971155037434,\"int\":69,\"cha\":56,\"exp\":80.40400000000017,\"cre\":83,\"eff\":90,\"sal\":1122,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"pPOOGkz\",\"mor\":100,\"hap\":99.99821111407786,\"ene\":99.99821111407786,\"int\":57,\"cha\":67,\"exp\":89.40400000000017,\"cre\":79,\"eff\":90,\"sal\":1134,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"q2eC975\",\"mor\":100,\"hap\":99.99985352288995,\"ene\":99.99985352288995,\"int\":73,\"cha\":97,\"exp\":60.40400000000017,\"cre\":79,\"eff\":89,\"sal\":1182,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"t7Jszhv\",\"mor\":100,\"hap\":99.99944192793357,\"ene\":99.99944192793357,\"int\":53,\"cha\":55,\"exp\":98.96300000000015,\"cre\":57,\"eff\":73,\"sal\":999,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"0QgnPrx\",\"mor\":100,\"hap\":99.99785956819845,\"ene\":99.99785956819845,\"int\":74,\"cha\":70,\"exp\":94.96300000000015,\"cre\":51,\"eff\":86,\"sal\":1116,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"GN7EEUS\",\"mor\":100,\"hap\":99.99818516663156,\"ene\":99.99818516663156,\"int\":50,\"cha\":82,\"exp\":54.96300000000015,\"cre\":69,\"eff\":60,\"sal\":936,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Clhtn0d\",\"mor\":100,\"hap\":99.99889115957978,\"ene\":99.99889115957978,\"int\":50,\"cha\":63,\"exp\":74.96300000000015,\"cre\":95,\"eff\":69,\"sal\":1044,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"HjTo950\",\"mor\":100,\"hap\":99.99836612834487,\"ene\":99.99836612834487,\"int\":52,\"cha\":55,\"exp\":84.96300000000015,\"cre\":72,\"eff\":64,\"sal\":972,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"nBIdAAj\",\"mor\":100,\"hap\":99.99805775795637,\"ene\":99.99805775795637,\"int\":64,\"cha\":93,\"exp\":89.96300000000015,\"cre\":63,\"eff\":95,\"sal\":1203,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"uOaT3xI\",\"mor\":100,\"hap\":99.99790110618629,\"ene\":99.99790110618629,\"int\":72,\"cha\":51,\"exp\":95.57900000000014,\"cre\":99,\"eff\":92,\"sal\":1218,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"NgRCY1p\",\"mor\":100,\"hap\":99.99850642059269,\"ene\":99.99850642059269,\"int\":62,\"cha\":57,\"exp\":71.57900000000014,\"cre\":53,\"eff\":71,\"sal\":933,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"rwjNHtE\",\"mor\":100,\"hap\":99.99761511438822,\"ene\":99.99761511438822,\"int\":75,\"cha\":62,\"exp\":98.57900000000014,\"cre\":60,\"eff\":71,\"sal\":1089,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"r3F5lCz\",\"mor\":100,\"hap\":99.9999008261586,\"ene\":99.9999008261586,\"int\":84,\"cha\":78,\"exp\":79.57900000000014,\"cre\":72,\"eff\":71,\"sal\":1143,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"sT0mxmH\",\"mor\":100,\"hap\":99.99870658568757,\"ene\":99.99870658568757,\"int\":94,\"cha\":62,\"exp\":63.579000000000136,\"cre\":80,\"eff\":99,\"sal\":1185,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"1QTsr1N\",\"mor\":100,\"hap\":99.99903782494779,\"ene\":99.99903782494779,\"int\":55,\"cha\":98,\"exp\":81.57900000000014,\"cre\":75,\"eff\":55,\"sal\":1083,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"JBRcdPO\",\"mor\":100,\"hap\":99.99939687194033,\"ene\":99.99939687194033,\"int\":57,\"cha\":86,\"exp\":88.57900000000014,\"cre\":72,\"eff\":63,\"sal\":1089,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"xISPnMD\",\"mor\":100,\"hap\":99.99755609049588,\"ene\":99.99755609049588,\"int\":98,\"cha\":79,\"exp\":57.579000000000136,\"cre\":51,\"eff\":77,\"sal\":1077,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"pNNidCy\",\"mor\":100,\"hap\":99.99883162766201,\"ene\":99.99883162766201,\"int\":97,\"cha\":70,\"exp\":70.57900000000014,\"cre\":88,\"eff\":64,\"sal\":1158,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"bVZ6lqf\",\"mor\":100,\"hap\":99.99705751100308,\"ene\":99.99705751100308,\"int\":94,\"cha\":82,\"exp\":62.579000000000136,\"cre\":93,\"eff\":58,\"sal\":1158,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"J7vr9Wl\",\"mor\":100,\"hap\":99.99831837943994,\"ene\":99.99831837943994,\"int\":54,\"cha\":94,\"exp\":60.579000000000136,\"cre\":72,\"eff\":59,\"sal\":1008,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"eXWv8LA\",\"mor\":100,\"hap\":99.99982331921233,\"ene\":99.99982331921233,\"int\":89,\"cha\":97,\"exp\":91.57900000000014,\"cre\":72,\"eff\":64,\"sal\":1230,\"loc\":\"\",\"pos\":\"Business\"}}],\"employeeProd\":{\"Operations\":1788.7006928302162,\"Engineer\":1920.84867499629,\"Business\":989.3436174799621,\"Management\":2115.5087120763724,\"Research & Development\":2148.0724964344226,\"total\":8962.474193817263,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":5,\"Engineer\":5,\"Business\":4,\"Management\":5,\"Research & Development\":5,\"Training\":0,\"Unassigned\":0,\"total\":24},\"loc\":\"Sector-12\",\"size\":24}},\"New Tokyo\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"fmgoOBP\",\"mor\":100,\"hap\":99.99702739855839,\"ene\":99.99702739855839,\"int\":57,\"cha\":52,\"exp\":72.39500000000017,\"cre\":56,\"eff\":51,\"sal\":852,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"HF4WM2n\",\"mor\":100,\"hap\":99.99843104804287,\"ene\":99.99843104804287,\"int\":61,\"cha\":93,\"exp\":82.39500000000017,\"cre\":72,\"eff\":79,\"sal\":1149,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"l2rThef\",\"mor\":100,\"hap\":99.99846635770717,\"ene\":99.99846635770717,\"int\":65,\"cha\":65,\"exp\":98.39500000000017,\"cre\":54,\"eff\":76,\"sal\":1062,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"3BSQ4xp\",\"mor\":100,\"hap\":99.9994539053474,\"ene\":99.9994539053474,\"int\":64,\"cha\":83,\"exp\":68.39500000000017,\"cre\":62,\"eff\":56,\"sal\":987,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"G5pkEzR\",\"mor\":100,\"hap\":99.99762923597385,\"ene\":99.99762923597385,\"int\":67,\"cha\":53,\"exp\":61.39500000000017,\"cre\":67,\"eff\":67,\"sal\":933,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"byqcLlQ\",\"mor\":100,\"hap\":99.99889381939043,\"ene\":99.99889381939043,\"int\":52,\"cha\":60,\"exp\":64.39500000000017,\"cre\":59,\"eff\":52,\"sal\":849,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"cXdksZb\",\"mor\":100,\"hap\":99.99951500064545,\"ene\":99.99951500064545,\"int\":50,\"cha\":72,\"exp\":96.93300000000015,\"cre\":62,\"eff\":64,\"sal\":1023,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"5x3dE3F\",\"mor\":100,\"hap\":99.99993388185669,\"ene\":99.99993388185669,\"int\":78,\"cha\":54,\"exp\":83.93300000000015,\"cre\":90,\"eff\":96,\"sal\":1194,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"f8m4LLn\",\"mor\":100,\"hap\":99.99984072815299,\"ene\":99.99984072815299,\"int\":64,\"cha\":68,\"exp\":100.93300000000015,\"cre\":62,\"eff\":82,\"sal\":1119,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"C6UunxH\",\"mor\":100,\"hap\":99.99996368444015,\"ene\":99.99996368444015,\"int\":67,\"cha\":93,\"exp\":87.93300000000015,\"cre\":59,\"eff\":69,\"sal\":1116,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"QlPpLXh\",\"mor\":100,\"hap\":99.9988523704977,\"ene\":99.9988523704977,\"int\":72,\"cha\":73,\"exp\":83.93300000000015,\"cre\":87,\"eff\":73,\"sal\":1155,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"7NQ8Jee\",\"mor\":100,\"hap\":99.99904117661812,\"ene\":99.99904117661812,\"int\":91,\"cha\":91,\"exp\":82.93300000000015,\"cre\":57,\"eff\":92,\"sal\":1230,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"hclt7xO\",\"mor\":100,\"hap\":99.99898346454664,\"ene\":99.99898346454664,\"int\":59,\"cha\":54,\"exp\":70.57600000000014,\"cre\":73,\"eff\":92,\"sal\":1035,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"6y0CSTv\",\"mor\":100,\"hap\":99.997395840177,\"ene\":99.997395840177,\"int\":97,\"cha\":51,\"exp\":68.57600000000014,\"cre\":63,\"eff\":95,\"sal\":1113,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"HrecNEV\",\"mor\":100,\"hap\":99.9989143428742,\"ene\":99.9989143428742,\"int\":100,\"cha\":62,\"exp\":72.57600000000014,\"cre\":91,\"eff\":55,\"sal\":1131,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"FcJGJLV\",\"mor\":100,\"hap\":99.99785192018905,\"ene\":99.99785192018905,\"int\":69,\"cha\":50,\"exp\":100.57600000000014,\"cre\":82,\"eff\":59,\"sal\":1071,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"se4uSb2\",\"mor\":100,\"hap\":99.9973044868497,\"ene\":99.9973044868497,\"int\":90,\"cha\":51,\"exp\":72.57600000000014,\"cre\":79,\"eff\":96,\"sal\":1155,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"lr0oZER\",\"mor\":100,\"hap\":99.99738300331781,\"ene\":99.99738300331781,\"int\":65,\"cha\":99,\"exp\":83.57600000000014,\"cre\":58,\"eff\":95,\"sal\":1191,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"kfRlpeV\",\"mor\":100,\"hap\":99.99730802796334,\"ene\":99.99730802796334,\"int\":92,\"cha\":90,\"exp\":53.576000000000136,\"cre\":76,\"eff\":86,\"sal\":1182,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"vQd9QLs\",\"mor\":100,\"hap\":99.9977799138953,\"ene\":99.9977799138953,\"int\":81,\"cha\":75,\"exp\":83.57600000000014,\"cre\":69,\"eff\":68,\"sal\":1119,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"gqm9Qcy\",\"mor\":100,\"hap\":99.99781512300773,\"ene\":99.99781512300773,\"int\":90,\"cha\":69,\"exp\":57.576000000000136,\"cre\":81,\"eff\":85,\"sal\":1137,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"JLuWCEw\",\"mor\":100,\"hap\":99.99700037604399,\"ene\":99.99700037604399,\"int\":54,\"cha\":83,\"exp\":90.57600000000014,\"cre\":58,\"eff\":78,\"sal\":1080,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"eKltVJO\",\"mor\":100,\"hap\":99.99717111286252,\"ene\":99.99717111286252,\"int\":78,\"cha\":63,\"exp\":72.57600000000014,\"cre\":97,\"eff\":81,\"sal\":1164,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"4qiKPH7\",\"mor\":100,\"hap\":99.99737879092464,\"ene\":99.99737879092464,\"int\":99,\"cha\":74,\"exp\":85.57600000000014,\"cre\":87,\"eff\":60,\"sal\":1206,\"loc\":\"\",\"pos\":\"Business\"}}],\"employeeProd\":{\"Operations\":1700.8367782339724,\"Engineer\":2000.2108934899065,\"Business\":859.9078199823568,\"Management\":2141.732215003575,\"Research & Development\":2166.1659255127975,\"total\":8868.853632222606,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":5,\"Engineer\":5,\"Business\":4,\"Management\":5,\"Research & Development\":5,\"Training\":0,\"Unassigned\":0,\"total\":24},\"loc\":\"New Tokyo\",\"size\":24}},\"Ishima\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"20IeGIc\",\"mor\":100,\"hap\":99.99716681609789,\"ene\":99.99716681609789,\"int\":61,\"cha\":75,\"exp\":104.39200000000017,\"cre\":55,\"eff\":95,\"sal\":1158,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"5owCbYV\",\"mor\":100,\"hap\":99.99846574566426,\"ene\":99.99846574566426,\"int\":75,\"cha\":88,\"exp\":84.39200000000017,\"cre\":83,\"eff\":100,\"sal\":1278,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"4oaKnBl\",\"mor\":100,\"hap\":99.99716225439742,\"ene\":99.99716225439742,\"int\":83,\"cha\":58,\"exp\":61.392000000000166,\"cre\":70,\"eff\":90,\"sal\":1074,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"1MH0q1w\",\"mor\":100,\"hap\":99.9992272598184,\"ene\":99.9992272598184,\"int\":51,\"cha\":81,\"exp\":96.97500000000015,\"cre\":84,\"eff\":90,\"sal\":1197,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"EBbfOGY\",\"mor\":100,\"hap\":99.99797196840346,\"ene\":99.99797196840346,\"int\":65,\"cha\":88,\"exp\":84.97500000000015,\"cre\":59,\"eff\":51,\"sal\":1032,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"GoMRbC7\",\"mor\":100,\"hap\":99.999810433747,\"ene\":99.999810433747,\"int\":64,\"cha\":88,\"exp\":100.97500000000015,\"cre\":70,\"eff\":96,\"sal\":1245,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"j5f92fC\",\"mor\":100,\"hap\":99.99919528497783,\"ene\":99.99919528497783,\"int\":81,\"cha\":51,\"exp\":89.59100000000014,\"cre\":99,\"eff\":55,\"sal\":1116,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"U51vTSt\",\"mor\":100,\"hap\":99.99778561670587,\"ene\":99.99778561670587,\"int\":80,\"cha\":99,\"exp\":94.59100000000014,\"cre\":79,\"eff\":99,\"sal\":1344,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"WdSAd8B\",\"mor\":100,\"hap\":99.9993411663005,\"ene\":99.9993411663005,\"int\":67,\"cha\":93,\"exp\":97.59100000000014,\"cre\":66,\"eff\":54,\"sal\":1122,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"SIcNcXc\",\"mor\":100,\"hap\":99.99821758561586,\"ene\":99.99821758561586,\"int\":75,\"cha\":61,\"exp\":86.59100000000014,\"cre\":93,\"eff\":72,\"sal\":1152,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"YfAWLMA\",\"mor\":100,\"hap\":99.99835786836415,\"ene\":99.99835786836415,\"int\":60,\"cha\":97,\"exp\":78.59100000000014,\"cre\":77,\"eff\":67,\"sal\":1128,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"yWx7QG0\",\"mor\":100,\"hap\":99.99949557620079,\"ene\":99.99949557620079,\"int\":89,\"cha\":53,\"exp\":101.59100000000014,\"cre\":53,\"eff\":94,\"sal\":1161,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"g4ww47w\",\"mor\":100,\"hap\":99.99885528657136,\"ene\":99.99885528657136,\"int\":78,\"cha\":68,\"exp\":60.573000000000135,\"cre\":52,\"eff\":57,\"sal\":936,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"5jSLYxd\",\"mor\":100,\"hap\":99.99825729344558,\"ene\":99.99825729344558,\"int\":88,\"cha\":55,\"exp\":58.573000000000135,\"cre\":81,\"eff\":70,\"sal\":1047,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"DXDPEc8\",\"mor\":100,\"hap\":99.99799471313507,\"ene\":99.99799471313507,\"int\":85,\"cha\":99,\"exp\":59.573000000000135,\"cre\":84,\"eff\":96,\"sal\":1260,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"uQdjnL8\",\"mor\":100,\"hap\":99.99807458608757,\"ene\":99.99807458608757,\"int\":74,\"cha\":65,\"exp\":63.573000000000135,\"cre\":56,\"eff\":77,\"sal\":996,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"FJ818QG\",\"mor\":100,\"hap\":99.99989089115428,\"ene\":99.99989089115428,\"int\":64,\"cha\":92,\"exp\":90.57300000000014,\"cre\":73,\"eff\":52,\"sal\":1104,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"uPLfDQF\",\"mor\":100,\"hap\":99.99910992003814,\"ene\":99.99910992003814,\"int\":64,\"cha\":89,\"exp\":65.57300000000014,\"cre\":98,\"eff\":99,\"sal\":1236,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"TfhYsxp\",\"mor\":100,\"hap\":99.99822107303278,\"ene\":99.99822107303278,\"int\":60,\"cha\":58,\"exp\":72.57300000000014,\"cre\":92,\"eff\":100,\"sal\":1137,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"bGc8Sz9\",\"mor\":100,\"hap\":99.99936335745363,\"ene\":99.99936335745363,\"int\":83,\"cha\":60,\"exp\":91.57300000000014,\"cre\":89,\"eff\":82,\"sal\":1206,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Gvasx32\",\"mor\":100,\"hap\":99.99873695799104,\"ene\":99.99873695799104,\"int\":69,\"cha\":61,\"exp\":73.57300000000014,\"cre\":93,\"eff\":72,\"sal\":1095,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"e5FxTWA\",\"mor\":100,\"hap\":99.99804021321941,\"ene\":99.99804021321941,\"int\":70,\"cha\":92,\"exp\":101.57300000000014,\"cre\":58,\"eff\":79,\"sal\":1191,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"FnFF4fj\",\"mor\":100,\"hap\":99.99720816799642,\"ene\":99.99720816799642,\"int\":77,\"cha\":97,\"exp\":74.57300000000014,\"cre\":58,\"eff\":62,\"sal\":1095,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"rpGYOWE\",\"mor\":100,\"hap\":99.99771687232936,\"ene\":99.99771687232936,\"int\":65,\"cha\":62,\"exp\":71.57300000000014,\"cre\":74,\"eff\":91,\"sal\":1080,\"loc\":\"\",\"pos\":\"Business\"}}],\"employeeProd\":{\"Operations\":1771.5815365804667,\"Engineer\":2046.8905927839407,\"Business\":884.9303664881239,\"Management\":2328.943100612012,\"Research & Development\":2258.843318505676,\"total\":9291.18891497022,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":5,\"Engineer\":5,\"Business\":4,\"Management\":5,\"Research & Development\":5,\"Training\":0,\"Unassigned\":0,\"total\":24},\"loc\":\"Ishima\",\"size\":24}},\"Volhaven\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"IZze4oY\",\"mor\":100,\"hap\":99.99720391891584,\"ene\":99.99720391891584,\"int\":98,\"cha\":100,\"exp\":86.38900000000017,\"cre\":71,\"eff\":82,\"sal\":1299,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"STyKbHW\",\"mor\":100,\"hap\":99.99966537020036,\"ene\":99.99966537020036,\"int\":82,\"cha\":83,\"exp\":66.38900000000017,\"cre\":52,\"eff\":96,\"sal\":1125,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"u7bq8pg\",\"mor\":100,\"hap\":99.99923169396855,\"ene\":99.99923169396855,\"int\":72,\"cha\":62,\"exp\":57.389000000000166,\"cre\":94,\"eff\":89,\"sal\":1110,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"G1SnY9I\",\"mor\":100,\"hap\":99.99780865378212,\"ene\":99.99780865378212,\"int\":85,\"cha\":68,\"exp\":72.97200000000015,\"cre\":67,\"eff\":72,\"sal\":1083,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"sQiVzfP\",\"mor\":100,\"hap\":99.99728402101199,\"ene\":99.99728402101199,\"int\":61,\"cha\":59,\"exp\":74.97200000000015,\"cre\":99,\"eff\":72,\"sal\":1086,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"92vhKgB\",\"mor\":100,\"hap\":99.99892595995208,\"ene\":99.99892595995208,\"int\":52,\"cha\":79,\"exp\":72.97200000000015,\"cre\":87,\"eff\":93,\"sal\":1140,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"gaNyypu\",\"mor\":100,\"hap\":99.99964360124447,\"ene\":99.99964360124447,\"int\":63,\"cha\":88,\"exp\":80.58800000000014,\"cre\":100,\"eff\":64,\"sal\":1176,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"x7L8nNh\",\"mor\":100,\"hap\":99.99718346463915,\"ene\":99.99718346463915,\"int\":64,\"cha\":97,\"exp\":82.58800000000014,\"cre\":67,\"eff\":91,\"sal\":1194,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"xPnSbsg\",\"mor\":100,\"hap\":99.99868012631279,\"ene\":99.99868012631279,\"int\":56,\"cha\":83,\"exp\":71.58800000000014,\"cre\":61,\"eff\":70,\"sal\":1014,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"DBCr7fx\",\"mor\":100,\"hap\":99.99933736471564,\"ene\":99.99933736471564,\"int\":86,\"cha\":88,\"exp\":68.58800000000014,\"cre\":68,\"eff\":70,\"sal\":1131,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"E4eMXE6\",\"mor\":100,\"hap\":99.99985159745243,\"ene\":99.99985159745243,\"int\":96,\"cha\":56,\"exp\":97.58800000000014,\"cre\":70,\"eff\":70,\"sal\":1158,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"IbDBCe6\",\"mor\":100,\"hap\":99.99992446408193,\"ene\":99.99992446408193,\"int\":73,\"cha\":69,\"exp\":77.58800000000014,\"cre\":59,\"eff\":89,\"sal\":1092,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"LeU6bJv\",\"mor\":100,\"hap\":99.99816358809576,\"ene\":99.99816358809576,\"int\":56,\"cha\":81,\"exp\":100.58800000000014,\"cre\":74,\"eff\":51,\"sal\":1077,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"cwNIzzb\",\"mor\":100,\"hap\":99.99800017125047,\"ene\":99.99800017125047,\"int\":83,\"cha\":92,\"exp\":79.58800000000014,\"cre\":56,\"eff\":65,\"sal\":1116,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"yg3rFv1\",\"mor\":100,\"hap\":99.99772673891269,\"ene\":99.99772673891269,\"int\":99,\"cha\":51,\"exp\":55.588000000000136,\"cre\":70,\"eff\":60,\"sal\":996,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Xf18w1T\",\"mor\":100,\"hap\":99.99718068478045,\"ene\":99.99718068478045,\"int\":86,\"cha\":75,\"exp\":73.58800000000014,\"cre\":100,\"eff\":79,\"sal\":1230,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"qlVyXoi\",\"mor\":100,\"hap\":99.99789511925452,\"ene\":99.99789511925452,\"int\":89,\"cha\":84,\"exp\":84.58800000000014,\"cre\":62,\"eff\":96,\"sal\":1236,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"k5x2uoa\",\"mor\":100,\"hap\":99.9985755597178,\"ene\":99.9985755597178,\"int\":75,\"cha\":98,\"exp\":86.58800000000014,\"cre\":96,\"eff\":73,\"sal\":1275,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"z6Ic2h0\",\"mor\":100,\"hap\":99.99700492034529,\"ene\":99.99700492034529,\"int\":68,\"cha\":53,\"exp\":103.58800000000014,\"cre\":86,\"eff\":54,\"sal\":1083,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"AaZeRJQ\",\"mor\":100,\"hap\":99.99700533714791,\"ene\":99.99700533714791,\"int\":63,\"cha\":73,\"exp\":85.58800000000014,\"cre\":67,\"eff\":96,\"sal\":1143,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"MwJhAEC\",\"mor\":100,\"hap\":99.99856076077108,\"ene\":99.99856076077108,\"int\":84,\"cha\":73,\"exp\":60.588000000000136,\"cre\":70,\"eff\":73,\"sal\":1071,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"KQoMFjd\",\"mor\":100,\"hap\":99.99946860078724,\"ene\":99.99946860078724,\"int\":65,\"cha\":77,\"exp\":98.58800000000014,\"cre\":54,\"eff\":76,\"sal\":1101,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"SdiLwFY\",\"mor\":100,\"hap\":99.99798691548855,\"ene\":99.99798691548855,\"int\":79,\"cha\":79,\"exp\":101.58800000000014,\"cre\":79,\"eff\":97,\"sal\":1296,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"L0gctI3\",\"mor\":100,\"hap\":99.9982438921988,\"ene\":99.9982438921988,\"int\":62,\"cha\":100,\"exp\":77.58800000000014,\"cre\":79,\"eff\":54,\"sal\":1107,\"loc\":\"\",\"pos\":\"Business\"}}],\"employeeProd\":{\"Operations\":1796.895112611962,\"Engineer\":1987.4789995660362,\"Business\":920.2827580663622,\"Management\":2201.664313453514,\"Research & Development\":2354.4980663317965,\"total\":9260.819250029672,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":5,\"Engineer\":5,\"Business\":4,\"Management\":5,\"Research & Development\":5,\"Training\":0,\"Unassigned\":0,\"total\":24},\"loc\":\"Volhaven\",\"size\":24}}},\"lastCycleRevenue\":20075539.077452153,\"lastCycleExpenses\":4655594.745752037,\"thisCycleRevenue\":0,\"thisCycleExpenses\":1950630,\"warehouses\":{\"Aevum\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":9,\"sizeUsed\":689.0668443962238,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":466.98563283460715,\"loc\":\"Aevum\",\"size\":1800,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":76.33572563157703,\"dmdR\":[65,85],\"cmp\":52.076111875697485,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":233.49201810461824,\"sll\":0,\"prd\":-233.49201810461824,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1480.8111048400501,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":91.40957878345476,\"dmdR\":[80,99],\"cmp\":77.12918782100017,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":233.49201810461824,\"sll\":0,\"prd\":-233.49201810461824,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2015.8848398358034,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":73.9957477000186,\"dmd\":76.07298852798206,\"dmdR\":[70,90],\"cmp\":81.56191310951945,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":466.9840362092365,\"prd\":466.9840362092365,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":4463.802971618909,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":2743.253722922425}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":73.9957477000186,\"dmd\":77.78482507906273,\"dmdR\":[20,90],\"cmp\":42.357077817516824,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":466.9840362092365,\"prd\":466.9840362092365,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3391.989496735572,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":8944.764726606527}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":1511.1115008689123,\"qlt\":0,\"dmd\":89.87908417613346,\"dmdR\":[80,90],\"cmp\":82.01708271407807,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8118.285546197218,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":272.0000701564042,\"qlt\":0,\"dmd\":98.57885457080032,\"dmdR\":[80,99],\"cmp\":86.05347130746581,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":80580.72535812309,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":1360.0003507820195,\"qlt\":0,\"dmd\":91.37161700674284,\"dmdR\":[80,99],\"cmp\":81.58302807048425,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":15093.652954783744,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":65280.016837537,\"qlt\":0,\"dmd\":57.59074452611896,\"dmdR\":[5,99],\"cmp\":36.85806910878285,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":87162.51057845558,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}},\"Chongqing\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":9,\"sizeUsed\":664.4888202018772,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":477.86702463493947,\"loc\":\"Chongqing\",\"size\":1800,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":67.14978404893282,\"dmdR\":[65,85],\"cmp\":48.199780245449936,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":238.9329560027874,\"sll\":0,\"prd\":-238.9329560027874,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1515.2647825965657,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":90.95904928856037,\"dmdR\":[80,99],\"cmp\":80.1684075787156,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":238.9329560027874,\"sll\":0,\"prd\":-238.9329560027874,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1993.221059909815,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":74.4516575022334,\"dmd\":75.4028937279486,\"dmdR\":[70,90],\"cmp\":72.1795007520704,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":477.8659120055748,\"prd\":477.8659120055748,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5366.606799190676,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":4188.557669347493}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":74.4516575022334,\"dmd\":64.66097334802855,\"dmdR\":[20,90],\"cmp\":56.642954394762604,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":477.8659120055748,\"prd\":477.8659120055748,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2975.9788301057365,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":5633.900064802997}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":1453.9254465571107,\"qlt\":0,\"dmd\":87.98046619493978,\"dmdR\":[80,90],\"cmp\":74.03080652952649,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7642.59085268187,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.07613817324329421}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":259.32926563690785,\"qlt\":0,\"dmd\":83.01933859889047,\"dmdR\":[80,99],\"cmp\":95.1498005864868,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":70478.76331862331,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.01667282804904511}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":1312.8778773941913,\"qlt\":0,\"dmd\":99,\"dmdR\":[80,99],\"cmp\":94.51588019185786,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":15461.43715935243,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.013880223902049136}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":63260.174570115494,\"qlt\":0,\"dmd\":41.428081753416386,\"dmdR\":[5,99],\"cmp\":50.36232337389282,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":79602.15229414956,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.07018684298637802}}}}},\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":9,\"sizeUsed\":844.2054770874375,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":395.1852428383051,\"loc\":\"Sector-12\",\"size\":1800,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":74.6010637588084,\"dmdR\":[65,85],\"cmp\":50.33422617037717,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":197.59232794607536,\"sll\":0,\"prd\":-197.59232794607536,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1505.3923387180932,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":91.65815991302331,\"dmdR\":[80,99],\"cmp\":80.13672885958806,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":197.59232794607536,\"sll\":0,\"prd\":-197.59232794607536,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2060.152464874107,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":62.35578284324208,\"dmd\":87.99271484990382,\"dmdR\":[70,90],\"cmp\":61.40424858373201,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":395.1846558921507,\"prd\":395.1846558921507,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5136.971080673206,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":4970.617170162794}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":62.35578284324208,\"dmd\":69.40388228821335,\"dmdR\":[20,90],\"cmp\":45.46729641160465,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":395.1846558921507,\"prd\":395.1846558921507,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3003.336635059622,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":5594.83881906244}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":1851.3278006303458,\"qlt\":0,\"dmd\":80,\"dmdR\":[80,90],\"cmp\":83.0648625868578,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7205.154040612237,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":333.2390041134627,\"qlt\":0,\"dmd\":94.09694618519931,\"dmdR\":[80,99],\"cmp\":87.30083701267023,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":80158.97331821108,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":1666.195020567309,\"qlt\":0,\"dmd\":81.58413883840247,\"dmdR\":[80,99],\"cmp\":80.34581005778152,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":16098.408472137411,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":79977.36098723092,\"qlt\":0,\"dmd\":26.154421135626233,\"dmdR\":[5,99],\"cmp\":58.69849394872034,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":57409.78581533845,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}},\"New Tokyo\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":9,\"sizeUsed\":851.1454726984907,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":392.29120271294585,\"loc\":\"New Tokyo\",\"size\":1800,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":76.24766023541547,\"dmdR\":[65,85],\"cmp\":51.48188944471699,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":196.144719004405,\"sll\":0,\"prd\":-196.144719004405,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1481.0523788970784,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":92.00969564863463,\"dmdR\":[80,99],\"cmp\":82.87694133138478,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":196.144719004405,\"sll\":0,\"prd\":-196.144719004405,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2031.279091760865,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":63.23991916307101,\"dmd\":84.61461992805077,\"dmdR\":[70,90],\"cmp\":83.54450848265313,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":392.28943800881,\"prd\":392.28943800881,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":4615.681124983785,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":2000.4297558453316}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":63.23991916307101,\"dmd\":70.64928452767117,\"dmdR\":[20,90],\"cmp\":55.216131151709995,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":392.28943800881,\"prd\":392.28943800881,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3047.4520120819166,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":4580.291490601476}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":1866.547089251077,\"qlt\":0,\"dmd\":80.6060871403272,\"dmdR\":[80,90],\"cmp\":74.2849189764369,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8748.624888863567,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":335.9784760651939,\"qlt\":0,\"dmd\":90.34479441116686,\"dmdR\":[80,99],\"cmp\":95.39514311314375,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":74077.09019210526,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":1679.8923803259686,\"qlt\":0,\"dmd\":89.51793971568853,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":16671.40711126842,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":80634.83425564646,\"qlt\":0,\"dmd\":70.09047176827767,\"dmdR\":[5,99],\"cmp\":52.35126266542354,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":67715.37349258765,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}},\"Ishima\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":9,\"sizeUsed\":831.5162576910825,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":400.616419681876,\"loc\":\"Ishima\",\"size\":1800,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0.001811515595363744,\"qlt\":0,\"dmd\":81.25817520640129,\"dmdR\":[65,85],\"cmp\":48.43139155145689,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":200.30839099249752,\"sll\":0,\"prd\":-200.308209840938,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1544.407050893207,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0.001811515595363744,\"qlt\":0,\"dmd\":87.75210809190139,\"dmdR\":[80,99],\"cmp\":75.61984666310781,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":200.30839099249752,\"sll\":0,\"prd\":-200.308209840938,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2018.373282469775,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":63.761388062480805,\"dmd\":77.90232517661754,\"dmdR\":[70,90],\"cmp\":75.4107185165693,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":400.616419681876,\"prd\":400.616419681876,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":4719.72207825218,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":2776.4832402621505}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":63.761388062480805,\"dmd\":73.97956149866462,\"dmdR\":[20,90],\"cmp\":45.337186879628085,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":400.616419681876,\"prd\":400.616419681876,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2978.5042509290233,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":5921.323697047583}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":1823.5003267547086,\"qlt\":0,\"dmd\":80.53301892836699,\"dmdR\":[80,90],\"cmp\":86.98185919195618,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8129.445132151032,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":328.23005881584737,\"qlt\":0,\"dmd\":85.86669075208309,\"dmdR\":[80,99],\"cmp\":81.04470889476329,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":78536.83713122272,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":1641.150294079237,\"qlt\":0,\"dmd\":88.99739738650052,\"dmdR\":[80,99],\"cmp\":95.8500780511475,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":15295.584925592764,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":78775.21411580336,\"qlt\":0,\"dmd\":36.92925748627059,\"dmdR\":[5,99],\"cmp\":53.7333772203547,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":77359.02017795015,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}},\"Volhaven\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":9,\"sizeUsed\":837.3926325684656,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":398.1731305126456,\"loc\":\"Volhaven\",\"size\":1800,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":73.6856643211497,\"dmdR\":[65,85],\"cmp\":50.65183353816295,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":199.0861415709795,\"sll\":0,\"prd\":-199.0861415709795,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1493.8196033250701,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":91.83016959529684,\"dmdR\":[80,99],\"cmp\":81.5854477720243,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":199.0861415709795,\"sll\":0,\"prd\":-199.0861415709795,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2012.155787095927,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":63.10372065772262,\"dmd\":72.57760030437674,\"dmdR\":[70,90],\"cmp\":46.241493380739044,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":398.172283141959,\"prd\":398.172283141959,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":4858.924652366871,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":5743.767711384592}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":63.10372065772262,\"dmd\":77.65699699598586,\"dmdR\":[20,90],\"cmp\":55.49772276119681,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":398.172283141959,\"prd\":398.172283141959,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3015.2772064730234,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":5084.173032154454}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":1836.3873521238286,\"qlt\":0,\"dmd\":81.64552350931532,\"dmdR\":[80,90],\"cmp\":82.90935208250072,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7809.2269560049135,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":330.54972338228936,\"qlt\":0,\"dmd\":88.00425225676379,\"dmdR\":[80,99],\"cmp\":96.69823969332954,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":71778.85992775616,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":1652.7486169114445,\"qlt\":0,\"dmd\":91.32016318777923,\"dmdR\":[80,99],\"cmp\":88.89509212430794,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":15515.806997221107,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":79331.93361174934,\"qlt\":0,\"dmd\":46.36502444171793,\"dmdR\":[5,99],\"cmp\":55.508454282023976,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":77568.09074941422,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}}}}},{\"ctor\":\"Industry\",\"data\":{\"name\":\"Computer\",\"type\":\"Computer\",\"sciResearch\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Scientific Research\",\"qty\":5194.849437379132,\"qlt\":0,\"dmd\":0,\"dmdR\":[0,0],\"cmp\":0,\"cmpR\":[0,0],\"mv\":0,\"mku\":0,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":0,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"researched\":{},\"reqMats\":{\"Metal\":2,\"Energy\":1},\"prodMats\":[\"Hardware\"],\"products\":{\"Computer-9.30\":{\"ctor\":\"Product\",\"data\":{\"name\":\"Computer-9.30\",\"dmd\":40.333294701787246,\"cmp\":28.384000000000203,\"mku\":2.2780658398236824,\"pCost\":38379.06115957178,\"sCost\":\"MP*1.421\",\"fin\":true,\"prog\":100.14488771193783,\"createCity\":\"Aevum\",\"designCost\":1000000000,\"advCost\":1000000000,\"rat\":1422.472962898989,\"qlt\":1503.3122427392675,\"per\":1393.3774235512917,\"dur\":1465.6595466077058,\"rel\":1359.3347462629813,\"aes\":1351.5531093281638,\"fea\":1427.7227922934499,\"data\":{\"Aevum\":[0,33.87617688079103,34.775402703124215],\"Chongqing\":[0,25.671032685271996,25.671032685271996],\"Ishima\":[0,25.692700794459377,25.692700794459377],\"New Tokyo\":[0,25.45867711839258,25.45867711839258],\"Sector-12\":[0,25.979793275667554,25.979793275667554],\"Volhaven\":[0,26.027836664083356,26.027836664083356]},\"loc\":\"\",\"siz\":0.21000000000000002,\"reqMats\":{\"Metal\":2,\"Energy\":1},\"prdman\":{\"Aevum\":[false,0],\"Chongqing\":[false,0],\"Ishima\":[false,0],\"New Tokyo\":[false,0],\"Sector-12\":[false,0],\"Volhaven\":[false,0]},\"sllman\":{\"Aevum\":[true,\"MAX\"],\"Chongqing\":[true,\"MAX\"],\"Ishima\":[true,\"MAX\"],\"New Tokyo\":[true,\"MAX\"],\"Sector-12\":[true,\"MAX\"],\"Volhaven\":[true,\"MAX\"]},\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":{\"Aevum\":0,\"Chongqing\":0,\"Ishima\":0,\"New Tokyo\":0,\"Sector-12\":0,\"Volhaven\":0},\"maxsll\":30.4331929164197}},\"Computer-9.60\":{\"ctor\":\"Product\",\"data\":{\"name\":\"Computer-9.60\",\"dmd\":45.86366935161409,\"cmp\":49.19759999999954,\"mku\":2.1666826630987694,\"pCost\":38379.06115957178,\"sCost\":\"MP*1.435\",\"fin\":true,\"prog\":100.23419756308095,\"createCity\":\"Aevum\",\"designCost\":1995262314.9688828,\"advCost\":1995262314.9688828,\"rat\":1524.8502119501218,\"qlt\":1611.6230026591832,\"per\":1494.4853874970772,\"dur\":1570.7175558163867,\"rel\":1456.7253990732745,\"aes\":1447.9323094203571,\"fea\":1530.6433043720574,\"data\":{\"Aevum\":[24.542386732793034,33.83179291711225,34.77480438251444],\"Chongqing\":[0,25.63778921478289,25.63778921478289],\"Ishima\":[0,25.659748482869674,25.659748482869674],\"New Tokyo\":[0,25.425725169200046,25.425725169200046],\"Sector-12\":[0,25.946199178547328,25.946199178547328],\"Volhaven\":[0,25.994160519540124,25.994160519540124]},\"loc\":\"\",\"siz\":0.21000000000000002,\"reqMats\":{\"Metal\":2,\"Energy\":1},\"prdman\":{\"Aevum\":[false,0],\"Chongqing\":[false,0],\"Ishima\":[false,0],\"New Tokyo\":[false,0],\"Sector-12\":[false,0],\"Volhaven\":[false,0]},\"sllman\":{\"Aevum\":[true,\"MAX\"],\"Chongqing\":[true,\"MAX\"],\"Ishima\":[true,\"MAX\"],\"New Tokyo\":[true,\"MAX\"],\"Sector-12\":[true,\"MAX\"],\"Volhaven\":[true,\"MAX\"]},\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":{\"Aevum\":0,\"Chongqing\":0,\"Ishima\":0,\"New Tokyo\":0,\"Sector-12\":0,\"Volhaven\":0},\"maxsll\":30.167463069376186}},\"Computer-9.90\":{\"ctor\":\"Product\",\"data\":{\"name\":\"Computer-9.90\",\"dmd\":0.001,\"cmp\":0.1904000000000002,\"mku\":0,\"pCost\":0,\"sCost\":0,\"fin\":false,\"prog\":86.54472897636523,\"createCity\":\"Aevum\",\"designCost\":3981071705.5349693,\"advCost\":3981071705.5349693,\"rat\":0,\"qlt\":0,\"per\":0,\"dur\":0,\"rel\":0,\"aes\":0,\"fea\":0,\"data\":{\"Aevum\":[0,0,0],\"Chongqing\":[0,0,0],\"Ishima\":[0,0,0],\"New Tokyo\":[0,0,0],\"Sector-12\":[0,0,0],\"Volhaven\":[0,0,0]},\"loc\":\"\",\"siz\":0,\"reqMats\":{},\"prdman\":{\"Aevum\":[false,0],\"Chongqing\":[false,0],\"Ishima\":[false,0],\"New Tokyo\":[false,0],\"Sector-12\":[false,0],\"Volhaven\":[false,0]},\"sllman\":{\"Aevum\":[false,0],\"Chongqing\":[false,0],\"Ishima\":[false,0],\"New Tokyo\":[false,0],\"Sector-12\":[false,0],\"Volhaven\":[false,0]},\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":{\"Aevum\":0,\"Chongqing\":0,\"Ishima\":0,\"New Tokyo\":0,\"Sector-12\":0,\"Volhaven\":0},\"maxsll\":0}}},\"makesProducts\":true,\"awareness\":229.25094489667936,\"popularity\":100.31181441407797,\"startingCost\":500000000000,\"reFac\":0.2,\"sciFac\":0.62,\"hwFac\":0,\"robFac\":0.36,\"aiFac\":0.19,\"advFac\":0.17,\"prodMult\":20.220031089217876,\"upgrades\":[0,36],\"state\":\"START\",\"newInd\":false,\"offices\":{\"Aevum\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"rE2pxrg\",\"mor\":100,\"hap\":99.99862542216832,\"ene\":99.99862542216832,\"int\":92,\"cha\":84,\"exp\":88.03000000000011,\"cre\":97,\"eff\":54,\"sal\":1236,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"KBK9t5E\",\"mor\":100,\"hap\":99.99863584193656,\"ene\":99.99863584193656,\"int\":78,\"cha\":62,\"exp\":90.03000000000011,\"cre\":50,\"eff\":74,\"sal\":1053,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"u8iIjHE\",\"mor\":100,\"hap\":99.99809897497879,\"ene\":99.99809897497879,\"int\":67,\"cha\":55,\"exp\":76.03000000000011,\"cre\":97,\"eff\":65,\"sal\":1071,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"O9gsLQE\",\"mor\":100,\"hap\":99.99999189034551,\"ene\":99.99999189034551,\"int\":56,\"cha\":75,\"exp\":56.030000000000115,\"cre\":56,\"eff\":85,\"sal\":975,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"w7XajQf\",\"mor\":100,\"hap\":99.9980484761496,\"ene\":99.9980484761496,\"int\":63,\"cha\":70,\"exp\":72.03000000000011,\"cre\":76,\"eff\":54,\"sal\":996,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"2a13Zlt\",\"mor\":100,\"hap\":99.99941588963767,\"ene\":99.99941588963767,\"int\":78,\"cha\":92,\"exp\":86.03000000000011,\"cre\":61,\"eff\":86,\"sal\":1200,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"DyabH00\",\"mor\":100,\"hap\":99.99824526975091,\"ene\":99.99824526975091,\"int\":58,\"cha\":72,\"exp\":67.03000000000011,\"cre\":57,\"eff\":88,\"sal\":1017,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Z1gzwhw\",\"mor\":100,\"hap\":99.99916610319868,\"ene\":99.99916610319868,\"int\":64,\"cha\":63,\"exp\":98.03000000000011,\"cre\":54,\"eff\":52,\"sal\":984,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"JXKl0Pg\",\"mor\":100,\"hap\":99.99979872763677,\"ene\":99.99979872763677,\"int\":50,\"cha\":67,\"exp\":70.03000000000011,\"cre\":100,\"eff\":70,\"sal\":1062,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"zN21VmM\",\"mor\":100,\"hap\":99.99760795390951,\"ene\":99.99760795390951,\"int\":97,\"cha\":95,\"exp\":68.03000000000011,\"cre\":59,\"eff\":76,\"sal\":1176,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"J3XDjKO\",\"mor\":100,\"hap\":99.99834160759514,\"ene\":99.99834160759514,\"int\":96,\"cha\":53,\"exp\":83.03000000000011,\"cre\":64,\"eff\":74,\"sal\":1101,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"qwfKEUU\",\"mor\":100,\"hap\":99.99997505096766,\"ene\":99.99997505096766,\"int\":50,\"cha\":56,\"exp\":69.03000000000011,\"cre\":68,\"eff\":100,\"sal\":1020,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Tqb3jJZ\",\"mor\":100,\"hap\":99.99847789955922,\"ene\":99.99847789955922,\"int\":66,\"cha\":54,\"exp\":101.03000000000011,\"cre\":51,\"eff\":83,\"sal\":1056,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"6qZpyqt\",\"mor\":100,\"hap\":99.99916543857977,\"ene\":99.99916543857977,\"int\":73,\"cha\":88,\"exp\":70.03000000000011,\"cre\":85,\"eff\":90,\"sal\":1209,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"H78F8oJ\",\"mor\":100,\"hap\":99.9975062535691,\"ene\":99.9975062535691,\"int\":60,\"cha\":86,\"exp\":99.03000000000011,\"cre\":72,\"eff\":52,\"sal\":1098,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"uBsGnXv\",\"mor\":100,\"hap\":99.9971550634253,\"ene\":99.9971550634253,\"int\":88,\"cha\":95,\"exp\":79.03000000000011,\"cre\":74,\"eff\":83,\"sal\":1248,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ijChPKG\",\"mor\":100,\"hap\":99.99876236987113,\"ene\":99.99876236987113,\"int\":70,\"cha\":77,\"exp\":97.03000000000011,\"cre\":87,\"eff\":57,\"sal\":1155,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"lsAA2FQ\",\"mor\":100,\"hap\":99.99944832820466,\"ene\":99.99944832820466,\"int\":71,\"cha\":85,\"exp\":55.030000000000115,\"cre\":63,\"eff\":74,\"sal\":1035,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"YnQbVva\",\"mor\":100,\"hap\":99.99762908514676,\"ene\":99.99762908514676,\"int\":74,\"cha\":63,\"exp\":65.03000000000011,\"cre\":91,\"eff\":72,\"sal\":1086,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"52wGXHx\",\"mor\":100,\"hap\":99.99819088813923,\"ene\":99.99819088813923,\"int\":74,\"cha\":53,\"exp\":70.03000000000011,\"cre\":68,\"eff\":64,\"sal\":978,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Mn8r1S0\",\"mor\":100,\"hap\":99.99895150671546,\"ene\":99.99895150671546,\"int\":73,\"cha\":92,\"exp\":86.03000000000011,\"cre\":67,\"eff\":53,\"sal\":1104,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"BtW9fX0\",\"mor\":100,\"hap\":99.99958127104864,\"ene\":99.99958127104864,\"int\":88,\"cha\":87,\"exp\":72.03000000000011,\"cre\":56,\"eff\":76,\"sal\":1128,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"E8DRsbv\",\"mor\":100,\"hap\":99.99869732196629,\"ene\":99.99869732196629,\"int\":91,\"cha\":60,\"exp\":53.030000000000115,\"cre\":60,\"eff\":58,\"sal\":957,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"2CWKDUz\",\"mor\":100,\"hap\":99.99783456933295,\"ene\":99.99783456933295,\"int\":57,\"cha\":90,\"exp\":84.03000000000011,\"cre\":60,\"eff\":70,\"sal\":1074,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"qta3ZFx\",\"mor\":100,\"hap\":99.99750883207734,\"ene\":99.99750883207734,\"int\":50,\"cha\":59,\"exp\":103.01200000000011,\"cre\":81,\"eff\":66,\"sal\":1068,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"b36EVt2\",\"mor\":100,\"hap\":99.99908458409172,\"ene\":99.99908458409172,\"int\":80,\"cha\":74,\"exp\":88.01200000000011,\"cre\":69,\"eff\":54,\"sal\":1086,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ec3DQZ3\",\"mor\":100,\"hap\":99.99939644086732,\"ene\":99.99939644086732,\"int\":93,\"cha\":96,\"exp\":53.012000000000114,\"cre\":61,\"eff\":50,\"sal\":1050,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Q7geHSj\",\"mor\":100,\"hap\":99.99733484330775,\"ene\":99.99733484330775,\"int\":94,\"cha\":97,\"exp\":93.01200000000011,\"cre\":94,\"eff\":69,\"sal\":1332,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Qd82JlS\",\"mor\":100,\"hap\":99.99928360384821,\"ene\":99.99928360384821,\"int\":59,\"cha\":64,\"exp\":59.012000000000114,\"cre\":93,\"eff\":99,\"sal\":1113,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"YAdK10z\",\"mor\":100,\"hap\":99.99807751034672,\"ene\":99.99807751034672,\"int\":79,\"cha\":74,\"exp\":53.012000000000114,\"cre\":100,\"eff\":84,\"sal\":1161,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"HhJrbrQ\",\"mor\":100,\"hap\":99.99942269217178,\"ene\":99.99942269217178,\"int\":100,\"cha\":98,\"exp\":96.01200000000011,\"cre\":56,\"eff\":67,\"sal\":1242,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"yjKj23b\",\"mor\":100,\"hap\":99.99723487365326,\"ene\":99.99723487365326,\"int\":65,\"cha\":82,\"exp\":87.01200000000011,\"cre\":83,\"eff\":90,\"sal\":1212,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"pd4QHov\",\"mor\":100,\"hap\":99.99851680298494,\"ene\":99.99851680298494,\"int\":91,\"cha\":63,\"exp\":79.01200000000011,\"cre\":61,\"eff\":65,\"sal\":1068,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"nXG4jBV\",\"mor\":100,\"hap\":99.99853691037934,\"ene\":99.99853691037934,\"int\":99,\"cha\":83,\"exp\":80.01200000000011,\"cre\":88,\"eff\":53,\"sal\":1200,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"AGU3PlX\",\"mor\":100,\"hap\":99.99987822777368,\"ene\":99.99987822777368,\"int\":64,\"cha\":84,\"exp\":103.01200000000011,\"cre\":62,\"eff\":96,\"sal\":1218,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"NtElesu\",\"mor\":100,\"hap\":99.99720057919404,\"ene\":99.99720057919404,\"int\":86,\"cha\":73,\"exp\":62.012000000000114,\"cre\":54,\"eff\":79,\"sal\":1053,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Y3HMmkl\",\"mor\":100,\"hap\":99.9980369895492,\"ene\":99.9980369895492,\"int\":88,\"cha\":97,\"exp\":81.01200000000011,\"cre\":86,\"eff\":53,\"sal\":1206,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"SozfOKe\",\"mor\":100,\"hap\":99.99787387060843,\"ene\":99.99787387060843,\"int\":79,\"cha\":100,\"exp\":62.012000000000114,\"cre\":52,\"eff\":58,\"sal\":1044,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"jtbPTyU\",\"mor\":100,\"hap\":99.99923002085335,\"ene\":99.99923002085335,\"int\":92,\"cha\":90,\"exp\":94.01200000000011,\"cre\":77,\"eff\":84,\"sal\":1302,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"0yHLAYa\",\"mor\":100,\"hap\":99.99813221838825,\"ene\":99.99813221838825,\"int\":90,\"cha\":92,\"exp\":97.01200000000011,\"cre\":73,\"eff\":83,\"sal\":1296,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"i8fCM2g\",\"mor\":100,\"hap\":99.99995137088611,\"ene\":99.99995137088611,\"int\":89,\"cha\":65,\"exp\":91.01200000000011,\"cre\":83,\"eff\":68,\"sal\":1179,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"7ljjSlY\",\"mor\":100,\"hap\":99.9977755639508,\"ene\":99.9977755639508,\"int\":81,\"cha\":100,\"exp\":84.01200000000011,\"cre\":76,\"eff\":70,\"sal\":1224,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"lvHOl9V\",\"mor\":100,\"hap\":99.99704364043238,\"ene\":99.99704364043238,\"int\":61,\"cha\":95,\"exp\":78.01200000000011,\"cre\":92,\"eff\":69,\"sal\":1176,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"jg5rtpL\",\"mor\":100,\"hap\":99.99715546105548,\"ene\":99.99715546105548,\"int\":81,\"cha\":53,\"exp\":77.01200000000011,\"cre\":56,\"eff\":88,\"sal\":1056,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"NmDTzMc\",\"mor\":100,\"hap\":99.99744501934262,\"ene\":99.99744501934262,\"int\":50,\"cha\":50,\"exp\":86.01200000000011,\"cre\":69,\"eff\":95,\"sal\":1041,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"0FWtVSt\",\"mor\":100,\"hap\":99.99995869168686,\"ene\":99.99995869168686,\"int\":67,\"cha\":59,\"exp\":103.01200000000011,\"cre\":81,\"eff\":57,\"sal\":1092,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"sBvIkCA\",\"mor\":100,\"hap\":99.99892514075434,\"ene\":99.99892514075434,\"int\":50,\"cha\":72,\"exp\":57.012000000000114,\"cre\":89,\"eff\":58,\"sal\":969,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"eIxXHwD\",\"mor\":100,\"hap\":99.99734577633082,\"ene\":99.99734577633082,\"int\":78,\"cha\":94,\"exp\":56.012000000000114,\"cre\":56,\"eff\":86,\"sal\":1101,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"TkZrOth\",\"mor\":100,\"hap\":99.99839815681305,\"ene\":99.99839815681305,\"int\":97,\"cha\":88,\"exp\":70.01200000000011,\"cre\":64,\"eff\":64,\"sal\":1140,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"spXYvNR\",\"mor\":100,\"hap\":99.997808614677,\"ene\":99.997808614677,\"int\":92,\"cha\":59,\"exp\":78.01200000000011,\"cre\":68,\"eff\":94,\"sal\":1164,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Zv6MRJK\",\"mor\":100,\"hap\":99.99803068825781,\"ene\":99.99803068825781,\"int\":88,\"cha\":90,\"exp\":64.01200000000011,\"cre\":95,\"eff\":89,\"sal\":1269,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"SEzx179\",\"mor\":100,\"hap\":99.99915333808842,\"ene\":99.99915333808842,\"int\":88,\"cha\":74,\"exp\":74.01200000000011,\"cre\":77,\"eff\":80,\"sal\":1170,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"EAqlRkR\",\"mor\":100,\"hap\":99.99824854736669,\"ene\":99.99824854736669,\"int\":94,\"cha\":78,\"exp\":84.01200000000011,\"cre\":66,\"eff\":51,\"sal\":1110,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"KlyKMfZ\",\"mor\":100,\"hap\":99.9983506446157,\"ene\":99.9983506446157,\"int\":100,\"cha\":65,\"exp\":99.01200000000011,\"cre\":81,\"eff\":60,\"sal\":1206,\"loc\":\"\",\"pos\":\"Business\"}}],\"employeeProd\":{\"Operations\":3820.729028098363,\"Engineer\":4338.254889265267,\"Business\":2303.3674866960496,\"Management\":4765.846881117944,\"Research & Development\":4978.688316325421,\"total\":20206.88660150304,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":11,\"Engineer\":11,\"Business\":10,\"Management\":11,\"Research & Development\":11,\"Training\":0,\"Unassigned\":0,\"total\":54},\"loc\":\"Aevum\",\"size\":54}},\"Chongqing\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"VD4eZmj\",\"mor\":100,\"hap\":99.99818932023207,\"ene\":99.99818932023207,\"int\":79,\"cha\":86,\"exp\":81.02700000000011,\"cre\":75,\"eff\":61,\"sal\":1137,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"4YjNv9v\",\"mor\":100,\"hap\":99.99807224780082,\"ene\":99.99807224780082,\"int\":53,\"cha\":92,\"exp\":94.02700000000011,\"cre\":80,\"eff\":51,\"sal\":1101,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"T3Y5MP5\",\"mor\":100,\"hap\":99.99837974765262,\"ene\":99.99837974765262,\"int\":73,\"cha\":90,\"exp\":95.02700000000011,\"cre\":82,\"eff\":63,\"sal\":1200,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"eYQqwgL\",\"mor\":100,\"hap\":99.9997488895571,\"ene\":99.9997488895571,\"int\":62,\"cha\":54,\"exp\":58.027000000000115,\"cre\":88,\"eff\":67,\"sal\":978,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"68L05Lc\",\"mor\":100,\"hap\":99.99880765731017,\"ene\":99.99880765731017,\"int\":83,\"cha\":87,\"exp\":89.02700000000011,\"cre\":95,\"eff\":81,\"sal\":1296,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Kh9eGYA\",\"mor\":100,\"hap\":99.9999881852386,\"ene\":99.9999881852386,\"int\":71,\"cha\":76,\"exp\":85.02700000000011,\"cre\":78,\"eff\":62,\"sal\":1107,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"60GLC3U\",\"mor\":100,\"hap\":99.99949110265139,\"ene\":99.99949110265139,\"int\":65,\"cha\":76,\"exp\":75.02700000000011,\"cre\":99,\"eff\":96,\"sal\":1224,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"nTpyxSu\",\"mor\":100,\"hap\":99.99757691053865,\"ene\":99.99757691053865,\"int\":93,\"cha\":64,\"exp\":101.02700000000011,\"cre\":51,\"eff\":78,\"sal\":1152,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"OwNcszr\",\"mor\":100,\"hap\":99.9983519312865,\"ene\":99.9983519312865,\"int\":65,\"cha\":90,\"exp\":84.02700000000011,\"cre\":51,\"eff\":84,\"sal\":1113,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"h4Qvs1O\",\"mor\":100,\"hap\":99.99923147273795,\"ene\":99.99923147273795,\"int\":91,\"cha\":66,\"exp\":89.02700000000011,\"cre\":64,\"eff\":66,\"sal\":1119,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Zf3l0vJ\",\"mor\":100,\"hap\":99.99706868969413,\"ene\":99.99706868969413,\"int\":86,\"cha\":99,\"exp\":67.02700000000011,\"cre\":80,\"eff\":88,\"sal\":1251,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"33z950D\",\"mor\":100,\"hap\":99.99989705035199,\"ene\":99.99989705035199,\"int\":92,\"cha\":61,\"exp\":94.02700000000011,\"cre\":58,\"eff\":59,\"sal\":1083,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"VIShkMd\",\"mor\":100,\"hap\":99.99785301450811,\"ene\":99.99785301450811,\"int\":59,\"cha\":96,\"exp\":100.02700000000011,\"cre\":77,\"eff\":52,\"sal\":1143,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"0XhkKWX\",\"mor\":100,\"hap\":99.99842274404567,\"ene\":99.99842274404567,\"int\":80,\"cha\":57,\"exp\":67.02700000000011,\"cre\":62,\"eff\":92,\"sal\":1065,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"CnoUncm\",\"mor\":100,\"hap\":99.99961207030331,\"ene\":99.99961207030331,\"int\":59,\"cha\":86,\"exp\":95.02700000000011,\"cre\":68,\"eff\":57,\"sal\":1086,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Mc8SVD2\",\"mor\":100,\"hap\":99.99776068445927,\"ene\":99.99776068445927,\"int\":91,\"cha\":78,\"exp\":63.027000000000115,\"cre\":64,\"eff\":89,\"sal\":1146,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"VmQRF86\",\"mor\":100,\"hap\":99.99719684170721,\"ene\":99.99719684170721,\"int\":91,\"cha\":74,\"exp\":58.027000000000115,\"cre\":70,\"eff\":82,\"sal\":1116,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ZndNCz9\",\"mor\":100,\"hap\":99.99921521613322,\"ene\":99.99921521613322,\"int\":65,\"cha\":87,\"exp\":66.02700000000011,\"cre\":54,\"eff\":63,\"sal\":996,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"3XlKV8f\",\"mor\":100,\"hap\":99.99787254377385,\"ene\":99.99787254377385,\"int\":78,\"cha\":62,\"exp\":100.02700000000011,\"cre\":98,\"eff\":95,\"sal\":1290,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"7jwMFxZ\",\"mor\":100,\"hap\":99.99971239586709,\"ene\":99.99971239586709,\"int\":51,\"cha\":94,\"exp\":75.02700000000011,\"cre\":68,\"eff\":93,\"sal\":1134,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"tEZOTiU\",\"mor\":100,\"hap\":99.99935220021061,\"ene\":99.99935220021061,\"int\":98,\"cha\":79,\"exp\":96.02700000000011,\"cre\":61,\"eff\":85,\"sal\":1248,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"6t9OfBx\",\"mor\":100,\"hap\":99.99771207635045,\"ene\":99.99771207635045,\"int\":84,\"cha\":54,\"exp\":94.02700000000011,\"cre\":54,\"eff\":99,\"sal\":1146,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"bXL8Afm\",\"mor\":100,\"hap\":99.99784157796648,\"ene\":99.99784157796648,\"int\":73,\"cha\":90,\"exp\":58.027000000000115,\"cre\":56,\"eff\":82,\"sal\":1068,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"oQmwqTg\",\"mor\":100,\"hap\":99.997666092947,\"ene\":99.997666092947,\"int\":50,\"cha\":96,\"exp\":94.02700000000011,\"cre\":63,\"eff\":61,\"sal\":1083,\"loc\":\"\",\"pos\":\"Business\"}}],\"employeeProd\":{\"Operations\":1749.7172536437224,\"Engineer\":2025.0970567872637,\"Business\":920.7204097431215,\"Management\":2327.6007824171948,\"Research & Development\":2179.5443343475436,\"total\":9202.679836938845,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":5,\"Engineer\":5,\"Business\":4,\"Management\":5,\"Research & Development\":5,\"Training\":0,\"Unassigned\":0,\"total\":24},\"loc\":\"Chongqing\",\"size\":24}},\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"wrAaDxE\",\"mor\":100,\"hap\":99.99887546921883,\"ene\":99.99887546921883,\"int\":98,\"cha\":54,\"exp\":78.03300000000011,\"cre\":82,\"eff\":58,\"sal\":1101,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"EoqxlbZ\",\"mor\":100,\"hap\":99.99778134164576,\"ene\":99.99778134164576,\"int\":84,\"cha\":92,\"exp\":97.03300000000011,\"cre\":79,\"eff\":85,\"sal\":1302,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Z9NqY4l\",\"mor\":100,\"hap\":99.99719013824513,\"ene\":99.99719013824513,\"int\":89,\"cha\":67,\"exp\":84.03300000000011,\"cre\":92,\"eff\":51,\"sal\":1140,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"kzkV3Mg\",\"mor\":100,\"hap\":99.9977635749529,\"ene\":99.9977635749529,\"int\":80,\"cha\":72,\"exp\":99.03300000000011,\"cre\":52,\"eff\":98,\"sal\":1194,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"FKV98NW\",\"mor\":100,\"hap\":99.9980868383624,\"ene\":99.9980868383624,\"int\":74,\"cha\":93,\"exp\":65.03300000000011,\"cre\":98,\"eff\":60,\"sal\":1161,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"XnxuP7w\",\"mor\":100,\"hap\":99.9971567805121,\"ene\":99.9971567805121,\"int\":81,\"cha\":67,\"exp\":65.03300000000011,\"cre\":94,\"eff\":95,\"sal\":1197,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"QYSZqlO\",\"mor\":100,\"hap\":99.99951576655165,\"ene\":99.99951576655165,\"int\":79,\"cha\":69,\"exp\":55.015000000000114,\"cre\":94,\"eff\":80,\"sal\":1122,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ymZj41l\",\"mor\":100,\"hap\":99.9971509387501,\"ene\":99.9971509387501,\"int\":58,\"cha\":59,\"exp\":63.015000000000114,\"cre\":57,\"eff\":70,\"sal\":912,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"3bRSk0V\",\"mor\":100,\"hap\":99.99870325707421,\"ene\":99.99870325707421,\"int\":76,\"cha\":74,\"exp\":66.01500000000011,\"cre\":72,\"eff\":64,\"sal\":1047,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"8gp1nX6\",\"mor\":100,\"hap\":99.99983502729296,\"ene\":99.99983502729296,\"int\":55,\"cha\":61,\"exp\":86.01500000000011,\"cre\":94,\"eff\":94,\"sal\":1161,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"kDO8gA2\",\"mor\":100,\"hap\":99.99841522808875,\"ene\":99.99841522808875,\"int\":62,\"cha\":64,\"exp\":95.01500000000011,\"cre\":96,\"eff\":78,\"sal\":1176,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ImlhjBV\",\"mor\":100,\"hap\":99.99955666167845,\"ene\":99.99955666167845,\"int\":92,\"cha\":67,\"exp\":82.01500000000011,\"cre\":51,\"eff\":76,\"sal\":1095,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"5q8qQf3\",\"mor\":100,\"hap\":99.99874318455348,\"ene\":99.99874318455348,\"int\":82,\"cha\":93,\"exp\":89.01500000000011,\"cre\":87,\"eff\":88,\"sal\":1308,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"1cro0DQ\",\"mor\":100,\"hap\":99.99800285721902,\"ene\":99.99800285721902,\"int\":70,\"cha\":59,\"exp\":83.01500000000011,\"cre\":87,\"eff\":54,\"sal\":1050,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"PQqUSWg\",\"mor\":100,\"hap\":99.99986187310483,\"ene\":99.99986187310483,\"int\":93,\"cha\":91,\"exp\":99.01500000000011,\"cre\":75,\"eff\":60,\"sal\":1245,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"fu3n1WS\",\"mor\":100,\"hap\":99.99723045610637,\"ene\":99.99723045610637,\"int\":75,\"cha\":92,\"exp\":57.015000000000114,\"cre\":95,\"eff\":77,\"sal\":1179,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Hc7N7Xz\",\"mor\":100,\"hap\":99.99802603529966,\"ene\":99.99802603529966,\"int\":51,\"cha\":90,\"exp\":83.01500000000011,\"cre\":83,\"eff\":65,\"sal\":1107,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"x0RNdUY\",\"mor\":100,\"hap\":99.99822902184457,\"ene\":99.99822902184457,\"int\":76,\"cha\":68,\"exp\":102.01500000000011,\"cre\":84,\"eff\":94,\"sal\":1263,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"HJcT7QA\",\"mor\":100,\"hap\":99.99795742018769,\"ene\":99.99795742018769,\"int\":83,\"cha\":89,\"exp\":97.01500000000011,\"cre\":86,\"eff\":86,\"sal\":1314,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"DLRhiO8\",\"mor\":100,\"hap\":99.99821446317304,\"ene\":99.99821446317304,\"int\":89,\"cha\":100,\"exp\":91.01500000000011,\"cre\":71,\"eff\":88,\"sal\":1308,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"afCps4m\",\"mor\":100,\"hap\":99.99745433770147,\"ene\":99.99745433770147,\"int\":98,\"cha\":78,\"exp\":98.01500000000011,\"cre\":69,\"eff\":64,\"sal\":1212,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"PBW0w8u\",\"mor\":100,\"hap\":99.99755858289006,\"ene\":99.99755858289006,\"int\":73,\"cha\":52,\"exp\":76.01500000000011,\"cre\":95,\"eff\":53,\"sal\":1038,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"K8sGkLL\",\"mor\":100,\"hap\":99.99987415318003,\"ene\":99.99987415318003,\"int\":63,\"cha\":63,\"exp\":101.01500000000011,\"cre\":74,\"eff\":54,\"sal\":1056,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"uTCd83H\",\"mor\":100,\"hap\":99.99704059129301,\"ene\":99.99704059129301,\"int\":97,\"cha\":66,\"exp\":80.01500000000011,\"cre\":99,\"eff\":76,\"sal\":1245,\"loc\":\"\",\"pos\":\"Business\"}}],\"employeeProd\":{\"Operations\":1754.4157624458844,\"Engineer\":2017.8299582529144,\"Business\":796.1255289265374,\"Management\":2513.3923728044656,\"Research & Development\":2245.0439633569836,\"total\":9326.807585786786,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":5,\"Engineer\":5,\"Business\":4,\"Management\":5,\"Research & Development\":5,\"Training\":0,\"Unassigned\":0,\"total\":24},\"loc\":\"Sector-12\",\"size\":24}},\"New Tokyo\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"R5GSAHB\",\"mor\":100,\"hap\":99.99829898792326,\"ene\":99.99829898792326,\"int\":67,\"cha\":71,\"exp\":63.024000000000115,\"cre\":95,\"eff\":83,\"sal\":1128,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"0dX5c0B\",\"mor\":100,\"hap\":99.9992202721829,\"ene\":99.9992202721829,\"int\":90,\"cha\":62,\"exp\":101.02400000000011,\"cre\":66,\"eff\":75,\"sal\":1173,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"a2ECAmE\",\"mor\":100,\"hap\":99.99880091619413,\"ene\":99.99880091619413,\"int\":100,\"cha\":63,\"exp\":84.02400000000011,\"cre\":100,\"eff\":55,\"sal\":1197,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"alUkOcT\",\"mor\":100,\"hap\":99.99865834847414,\"ene\":99.99865834847414,\"int\":52,\"cha\":81,\"exp\":78.02400000000011,\"cre\":85,\"eff\":83,\"sal\":1128,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Ls7gPfS\",\"mor\":100,\"hap\":99.99911584637192,\"ene\":99.99911584637192,\"int\":90,\"cha\":79,\"exp\":66.02400000000011,\"cre\":86,\"eff\":68,\"sal\":1158,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"kv1DrZx\",\"mor\":100,\"hap\":99.99784027639211,\"ene\":99.99784027639211,\"int\":79,\"cha\":71,\"exp\":83.02400000000011,\"cre\":86,\"eff\":87,\"sal\":1209,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"RLejSNd\",\"mor\":100,\"hap\":99.99904905996759,\"ene\":99.99904905996759,\"int\":71,\"cha\":59,\"exp\":66.02400000000011,\"cre\":57,\"eff\":98,\"sal\":1044,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"rWU93he\",\"mor\":100,\"hap\":99.99928318143078,\"ene\":99.99928318143078,\"int\":65,\"cha\":57,\"exp\":68.02400000000011,\"cre\":60,\"eff\":75,\"sal\":966,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Dk2Gimi\",\"mor\":100,\"hap\":99.99999439311321,\"ene\":99.99999439311321,\"int\":73,\"cha\":88,\"exp\":68.02400000000011,\"cre\":83,\"eff\":94,\"sal\":1209,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"89SXOWW\",\"mor\":100,\"hap\":99.99841949279939,\"ene\":99.99841949279939,\"int\":98,\"cha\":73,\"exp\":91.02400000000011,\"cre\":67,\"eff\":66,\"sal\":1176,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"C9kgCMB\",\"mor\":100,\"hap\":99.99702564987665,\"ene\":99.99702564987665,\"int\":82,\"cha\":79,\"exp\":85.02400000000011,\"cre\":97,\"eff\":100,\"sal\":1320,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Px1pKZ4\",\"mor\":100,\"hap\":99.99993678956584,\"ene\":99.99993678956584,\"int\":73,\"cha\":63,\"exp\":83.02400000000011,\"cre\":82,\"eff\":82,\"sal\":1140,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"OUX7RS0\",\"mor\":100,\"hap\":99.99711798389714,\"ene\":99.99711798389714,\"int\":90,\"cha\":66,\"exp\":100.02400000000011,\"cre\":63,\"eff\":97,\"sal\":1239,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"dG9Xi7E\",\"mor\":100,\"hap\":99.99721372125161,\"ene\":99.99721372125161,\"int\":50,\"cha\":78,\"exp\":95.02400000000011,\"cre\":86,\"eff\":95,\"sal\":1203,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"VRFawIs\",\"mor\":100,\"hap\":99.99734053863719,\"ene\":99.99734053863719,\"int\":92,\"cha\":71,\"exp\":101.02400000000011,\"cre\":54,\"eff\":91,\"sal\":1218,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ExQ4HFb\",\"mor\":100,\"hap\":99.99708945139288,\"ene\":99.99708945139288,\"int\":71,\"cha\":61,\"exp\":61.024000000000115,\"cre\":73,\"eff\":81,\"sal\":1032,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"0XJy6dz\",\"mor\":100,\"hap\":99.99821640773968,\"ene\":99.99821640773968,\"int\":92,\"cha\":55,\"exp\":71.02400000000011,\"cre\":64,\"eff\":57,\"sal\":1008,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"xjf71Dc\",\"mor\":100,\"hap\":99.99848460799561,\"ene\":99.99848460799561,\"int\":56,\"cha\":84,\"exp\":87.02400000000011,\"cre\":90,\"eff\":93,\"sal\":1221,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"GFGeMCa\",\"mor\":100,\"hap\":99.99889741196117,\"ene\":99.99889741196117,\"int\":75,\"cha\":58,\"exp\":91.02400000000011,\"cre\":88,\"eff\":68,\"sal\":1131,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"tMbV2pb\",\"mor\":100,\"hap\":99.99708906549066,\"ene\":99.99708906549066,\"int\":71,\"cha\":64,\"exp\":59.024000000000115,\"cre\":98,\"eff\":78,\"sal\":1101,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ENq2wUR\",\"mor\":100,\"hap\":99.99895097345649,\"ene\":99.99895097345649,\"int\":78,\"cha\":80,\"exp\":103.02400000000011,\"cre\":72,\"eff\":69,\"sal\":1197,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"JLPN0lk\",\"mor\":100,\"hap\":99.99782218708174,\"ene\":99.99782218708174,\"int\":98,\"cha\":61,\"exp\":83.02400000000011,\"cre\":78,\"eff\":56,\"sal\":1119,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"cgddikF\",\"mor\":100,\"hap\":99.99972088807162,\"ene\":99.99972088807162,\"int\":60,\"cha\":77,\"exp\":61.024000000000115,\"cre\":68,\"eff\":71,\"sal\":1002,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"prrbocm\",\"mor\":100,\"hap\":99.99959855461564,\"ene\":99.99959855461564,\"int\":69,\"cha\":75,\"exp\":66.02400000000011,\"cre\":97,\"eff\":80,\"sal\":1152,\"loc\":\"\",\"pos\":\"Business\"}}],\"employeeProd\":{\"Operations\":1845.5765636988147,\"Engineer\":1993.4957919759208,\"Business\":862.0309314947551,\"Management\":2052.887096468173,\"Research & Development\":2402.68553860481,\"total\":9156.675922242475,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":5,\"Engineer\":5,\"Business\":4,\"Management\":5,\"Research & Development\":5,\"Training\":0,\"Unassigned\":0,\"total\":24},\"loc\":\"New Tokyo\",\"size\":24}},\"Ishima\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"hom3od4\",\"mor\":100,\"hap\":99.99945601527659,\"ene\":99.99945601527659,\"int\":93,\"cha\":93,\"exp\":58.021000000000114,\"cre\":83,\"eff\":92,\"sal\":1248,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"54NEzJZ\",\"mor\":100,\"hap\":99.99715632595621,\"ene\":99.99715632595621,\"int\":56,\"cha\":93,\"exp\":61.021000000000114,\"cre\":53,\"eff\":69,\"sal\":987,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"k3BhWvA\",\"mor\":100,\"hap\":99.99979978865044,\"ene\":99.99979978865044,\"int\":55,\"cha\":99,\"exp\":99.02100000000011,\"cre\":80,\"eff\":58,\"sal\":1164,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Pgkhm5J\",\"mor\":100,\"hap\":99.99723488412292,\"ene\":99.99723488412292,\"int\":98,\"cha\":81,\"exp\":85.02100000000011,\"cre\":92,\"eff\":62,\"sal\":1245,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"rPs3p2V\",\"mor\":100,\"hap\":99.9999736893451,\"ene\":99.9999736893451,\"int\":92,\"cha\":64,\"exp\":94.02100000000011,\"cre\":72,\"eff\":87,\"sal\":1218,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"EUqAWc7\",\"mor\":100,\"hap\":99.99829182033633,\"ene\":99.99829182033633,\"int\":81,\"cha\":54,\"exp\":78.02100000000011,\"cre\":99,\"eff\":72,\"sal\":1143,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"U9MP2D3\",\"mor\":100,\"hap\":99.9985556677177,\"ene\":99.9985556677177,\"int\":97,\"cha\":92,\"exp\":61.021000000000114,\"cre\":56,\"eff\":100,\"sal\":1209,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"rStxvip\",\"mor\":100,\"hap\":99.99831239994143,\"ene\":99.99831239994143,\"int\":51,\"cha\":74,\"exp\":75.02100000000011,\"cre\":82,\"eff\":66,\"sal\":1035,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"uY0RTDu\",\"mor\":100,\"hap\":99.99884360726385,\"ene\":99.99884360726385,\"int\":98,\"cha\":96,\"exp\":91.02100000000011,\"cre\":72,\"eff\":66,\"sal\":1260,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"wE7Gz2U\",\"mor\":100,\"hap\":99.99909188603473,\"ene\":99.99909188603473,\"int\":98,\"cha\":55,\"exp\":102.02100000000011,\"cre\":96,\"eff\":53,\"sal\":1203,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"MYkqfhf\",\"mor\":100,\"hap\":99.99956846540147,\"ene\":99.99956846540147,\"int\":59,\"cha\":69,\"exp\":88.02100000000011,\"cre\":87,\"eff\":57,\"sal\":1071,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"81eRRLb\",\"mor\":100,\"hap\":99.99892758450602,\"ene\":99.99892758450602,\"int\":69,\"cha\":71,\"exp\":101.02100000000011,\"cre\":96,\"eff\":88,\"sal\":1266,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"xSakFRo\",\"mor\":100,\"hap\":99.99874907379736,\"ene\":99.99874907379736,\"int\":62,\"cha\":84,\"exp\":101.02100000000011,\"cre\":81,\"eff\":100,\"sal\":1275,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"B0cE8kW\",\"mor\":100,\"hap\":99.99754447491893,\"ene\":99.99754447491893,\"int\":76,\"cha\":76,\"exp\":84.02100000000011,\"cre\":97,\"eff\":50,\"sal\":1140,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"s4nUcOO\",\"mor\":100,\"hap\":99.9985094132917,\"ene\":99.9985094132917,\"int\":63,\"cha\":77,\"exp\":57.021000000000114,\"cre\":86,\"eff\":63,\"sal\":1029,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"nnVDv79\",\"mor\":100,\"hap\":99.99748805275328,\"ene\":99.99748805275328,\"int\":79,\"cha\":86,\"exp\":97.02100000000011,\"cre\":88,\"eff\":69,\"sal\":1248,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"dbxJZ0M\",\"mor\":100,\"hap\":99.99875487001935,\"ene\":99.99875487001935,\"int\":96,\"cha\":70,\"exp\":80.02100000000011,\"cre\":84,\"eff\":98,\"sal\":1275,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"9GezXzE\",\"mor\":100,\"hap\":99.99991858640493,\"ene\":99.99991858640493,\"int\":56,\"cha\":81,\"exp\":92.02100000000011,\"cre\":76,\"eff\":71,\"sal\":1119,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"aqJpyJI\",\"mor\":100,\"hap\":99.99988911223953,\"ene\":99.99988911223953,\"int\":80,\"cha\":64,\"exp\":73.02100000000011,\"cre\":68,\"eff\":55,\"sal\":1011,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"GTg7rjJ\",\"mor\":100,\"hap\":99.99897241370874,\"ene\":99.99897241370874,\"int\":68,\"cha\":63,\"exp\":60.021000000000114,\"cre\":95,\"eff\":80,\"sal\":1089,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"EDodLmE\",\"mor\":100,\"hap\":99.99955002227195,\"ene\":99.99955002227195,\"int\":95,\"cha\":54,\"exp\":94.02100000000011,\"cre\":65,\"eff\":75,\"sal\":1140,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"9gjVULE\",\"mor\":100,\"hap\":99.99889537406834,\"ene\":99.99889537406834,\"int\":89,\"cha\":59,\"exp\":55.021000000000114,\"cre\":63,\"eff\":90,\"sal\":1059,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"89Lm7Dg\",\"mor\":100,\"hap\":99.99775847907264,\"ene\":99.99775847907264,\"int\":72,\"cha\":100,\"exp\":82.02100000000011,\"cre\":91,\"eff\":59,\"sal\":1203,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ejbooy4\",\"mor\":100,\"hap\":99.99805846299682,\"ene\":99.99805846299682,\"int\":93,\"cha\":56,\"exp\":82.02100000000011,\"cre\":97,\"eff\":70,\"sal\":1185,\"loc\":\"\",\"pos\":\"Business\"}}],\"employeeProd\":{\"Operations\":1820.6411292798387,\"Engineer\":2003.0730019528044,\"Business\":851.1366095370838,\"Management\":2223.2683982320095,\"Research & Development\":2247.9731305082855,\"total\":9146.092269510022,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":5,\"Engineer\":5,\"Business\":4,\"Management\":5,\"Research & Development\":5,\"Training\":0,\"Unassigned\":0,\"total\":24},\"loc\":\"Ishima\",\"size\":24}},\"Volhaven\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"6VFbypX\",\"mor\":100,\"hap\":99.99931708749541,\"ene\":99.99931708749541,\"int\":85,\"cha\":66,\"exp\":93.01800000000011,\"cre\":72,\"eff\":72,\"sal\":1155,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"nlbDLyE\",\"mor\":100,\"hap\":99.99993581210077,\"ene\":99.99993581210077,\"int\":97,\"cha\":72,\"exp\":82.01800000000011,\"cre\":52,\"eff\":93,\"sal\":1179,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"8u49TSc\",\"mor\":100,\"hap\":99.99830830787656,\"ene\":99.99830830787656,\"int\":99,\"cha\":85,\"exp\":61.018000000000114,\"cre\":94,\"eff\":83,\"sal\":1257,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"nCQajMg\",\"mor\":100,\"hap\":99.9982514979624,\"ene\":99.9982514979624,\"int\":69,\"cha\":92,\"exp\":97.01800000000011,\"cre\":91,\"eff\":78,\"sal\":1272,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"eZjJkkc\",\"mor\":100,\"hap\":99.99833051835796,\"ene\":99.99833051835796,\"int\":89,\"cha\":82,\"exp\":81.01800000000011,\"cre\":75,\"eff\":56,\"sal\":1140,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"UPh6srM\",\"mor\":100,\"hap\":99.9992831885261,\"ene\":99.9992831885261,\"int\":71,\"cha\":86,\"exp\":97.01800000000011,\"cre\":52,\"eff\":68,\"sal\":1113,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"zOsxs2N\",\"mor\":100,\"hap\":99.9974721701628,\"ene\":99.9974721701628,\"int\":62,\"cha\":71,\"exp\":78.01800000000011,\"cre\":94,\"eff\":79,\"sal\":1143,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"KUzUYNk\",\"mor\":100,\"hap\":99.99771850860782,\"ene\":99.99771850860782,\"int\":57,\"cha\":55,\"exp\":54.018000000000114,\"cre\":83,\"eff\":83,\"sal\":987,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"h8bdLma\",\"mor\":100,\"hap\":99.99924441883279,\"ene\":99.99924441883279,\"int\":52,\"cha\":74,\"exp\":78.01800000000011,\"cre\":99,\"eff\":73,\"sal\":1119,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"xmbutnS\",\"mor\":100,\"hap\":99.99782461751563,\"ene\":99.99782461751563,\"int\":99,\"cha\":67,\"exp\":67.01800000000011,\"cre\":59,\"eff\":89,\"sal\":1134,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"xaQCVgw\",\"mor\":100,\"hap\":99.99923426691642,\"ene\":99.99923426691642,\"int\":97,\"cha\":56,\"exp\":55.018000000000114,\"cre\":69,\"eff\":68,\"sal\":1026,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"EzwPgMz\",\"mor\":100,\"hap\":99.998724785376,\"ene\":99.998724785376,\"int\":95,\"cha\":89,\"exp\":62.018000000000114,\"cre\":77,\"eff\":96,\"sal\":1248,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"DRlyoNv\",\"mor\":100,\"hap\":99.99912162687068,\"ene\":99.99912162687068,\"int\":82,\"cha\":88,\"exp\":82.01800000000011,\"cre\":63,\"eff\":83,\"sal\":1185,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"SgO16sz\",\"mor\":100,\"hap\":99.99931168637343,\"ene\":99.99931168637343,\"int\":98,\"cha\":70,\"exp\":62.018000000000114,\"cre\":94,\"eff\":73,\"sal\":1182,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"vpVvZMY\",\"mor\":100,\"hap\":99.99963167223052,\"ene\":99.99963167223052,\"int\":94,\"cha\":51,\"exp\":78.01800000000011,\"cre\":64,\"eff\":78,\"sal\":1086,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"U8hlYGC\",\"mor\":100,\"hap\":99.9991764119218,\"ene\":99.9991764119218,\"int\":73,\"cha\":96,\"exp\":74.01800000000011,\"cre\":54,\"eff\":88,\"sal\":1146,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"YLtuGgB\",\"mor\":100,\"hap\":99.99845169883042,\"ene\":99.99845169883042,\"int\":70,\"cha\":70,\"exp\":95.01800000000011,\"cre\":78,\"eff\":93,\"sal\":1209,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"qDgLBvx\",\"mor\":100,\"hap\":99.99740513101202,\"ene\":99.99740513101202,\"int\":89,\"cha\":81,\"exp\":53.018000000000114,\"cre\":96,\"eff\":71,\"sal\":1161,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Tmuelp6\",\"mor\":100,\"hap\":99.99735992515386,\"ene\":99.99735992515386,\"int\":88,\"cha\":70,\"exp\":54.018000000000114,\"cre\":60,\"eff\":96,\"sal\":1095,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"oN4WMEP\",\"mor\":100,\"hap\":99.99826382288634,\"ene\":99.99826382288634,\"int\":74,\"cha\":70,\"exp\":75.01800000000011,\"cre\":88,\"eff\":82,\"sal\":1158,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"30pD8S3\",\"mor\":100,\"hap\":99.99878786774356,\"ene\":99.99878786774356,\"int\":75,\"cha\":95,\"exp\":83.01800000000011,\"cre\":87,\"eff\":50,\"sal\":1161,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"8pB0GKR\",\"mor\":100,\"hap\":99.9985428962054,\"ene\":99.9985428962054,\"int\":92,\"cha\":65,\"exp\":62.018000000000114,\"cre\":67,\"eff\":66,\"sal\":1047,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Lz0IavS\",\"mor\":100,\"hap\":99.99811089642715,\"ene\":99.99811089642715,\"int\":69,\"cha\":98,\"exp\":62.018000000000114,\"cre\":50,\"eff\":70,\"sal\":1038,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"DRWX6F5\",\"mor\":100,\"hap\":99.99785701434207,\"ene\":99.99785701434207,\"int\":86,\"cha\":70,\"exp\":56.018000000000114,\"cre\":97,\"eff\":73,\"sal\":1137,\"loc\":\"\",\"pos\":\"Business\"}}],\"employeeProd\":{\"Operations\":1905.115678085041,\"Engineer\":1867.181744105741,\"Business\":908.0658494062016,\"Management\":2306.3458701720097,\"Research & Development\":2421.7333534084037,\"total\":9408.442495177398,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":5,\"Engineer\":5,\"Business\":4,\"Management\":5,\"Research & Development\":5,\"Training\":0,\"Unassigned\":0,\"total\":24},\"loc\":\"Volhaven\",\"size\":24}}},\"lastCycleRevenue\":20390796.75346577,\"lastCycleExpenses\":7228251.545944994,\"thisCycleRevenue\":0,\"thisCycleExpenses\":1984530,\"warehouses\":{\"Aevum\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":11,\"sizeUsed\":771.7321557729597,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":135.50470752316411,\"loc\":\"Aevum\",\"size\":2200,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":75,\"dmdR\":[65,85],\"cmp\":50,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1500,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":92.12429924328633,\"dmdR\":[80,99],\"cmp\":85.12305910978993,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":135.46032355948535,\"sll\":0,\"prd\":-135.46032355948535,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1992.7483908826248,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.2869666537396477}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":79.02732196723296,\"dmdR\":[75,85],\"cmp\":71.55871527865371,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":270.9206471189707,\"sll\":0,\"prd\":-270.9206471189707,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3082.1581178722067,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.31789766749448173}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":249.32135615347292,\"dmd\":85.74046157875135,\"dmdR\":[80,90],\"cmp\":79.27895301658376,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":67.75235376158206,\"prd\":67.75235376158206,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8170.7616557951515,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":73659.17138666207}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":596.9235792267258,\"qlt\":0,\"dmd\":89.11335316721188,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0.10946400190142218,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":76604.4276452346,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.372079911259772}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":2225.623553776767,\"qlt\":0,\"dmd\":85.74992283101834,\"dmdR\":[80,99],\"cmp\":96.25290841205101,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0.2888633383509752,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":13415.294062708164,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.11709315738993836}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":49110.8219136067,\"qlt\":0,\"dmd\":53.093456744306735,\"dmdR\":[5,99],\"cmp\":48.564930165708574,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":6.081333438967899,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":98225.24830255548,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.5940230119448529}}}}},\"Chongqing\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":11,\"sizeUsed\":1112.0076668633735,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":102.68413074108798,\"loc\":\"Chongqing\",\"size\":2200,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":75,\"dmdR\":[65,85],\"cmp\":50,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1500,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":94.03539188161567,\"dmdR\":[80,99],\"cmp\":81.86895316333747,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":102.65088727059887,\"sll\":0,\"prd\":-102.65088727059887,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2027.9754520595868,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.2727374858926542}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":78.52049723658871,\"dmdR\":[75,85],\"cmp\":70.81708423178831,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":205.30177454119774,\"sll\":0,\"prd\":-205.30177454119774,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2658.243273010888,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.35097087665646465}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":223.62688796902688,\"dmd\":83.36218875308683,\"dmdR\":[80,90],\"cmp\":86.38384965208984,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":51.34206537054399,\"prd\":51.34206537054399,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8154.628919461934,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":34520.94155746658}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":1055.1094451972087,\"qlt\":0,\"dmd\":81.67978513439748,\"dmdR\":[80,99],\"cmp\":93.25734106773257,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0.10687633595184956,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":68380.96099231899,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.10271227040878876}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":2809.8631846845933,\"qlt\":0,\"dmd\":81.46256455653601,\"dmdR\":[80,99],\"cmp\":80.7507099518261,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0.2820347754284919,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":13543.884361669298,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.18864494137054}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":60693.32515926196,\"qlt\":0,\"dmd\":62.578023072400086,\"dmdR\":[5,99],\"cmp\":41.57530324020868,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":5.937574219547198,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":78791.01795855492,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.4020363524946166}}}}},\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":11,\"sizeUsed\":1099.4553987119134,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":103.91917310267021,\"loc\":\"Sector-12\",\"size\":2200,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":75,\"dmdR\":[65,85],\"cmp\":50,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1500,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":94.2395981100587,\"dmdR\":[80,99],\"cmp\":76.0416544975681,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":103.88557900555,\"sll\":0,\"prd\":-103.88557900554999,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2056.826687165599,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.2996560127440838}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":81.17109325018413,\"dmdR\":[75,85],\"cmp\":70.70319473573575,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":207.7711580111,\"sll\":0,\"prd\":-207.77115801109997,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2806.115121804791,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.2595954264987158}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":223.5510494666255,\"dmd\":88.61804890367137,\"dmdR\":[80,90],\"cmp\":70.23235054890901,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":51.95958655133511,\"prd\":51.95958655133511,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7744.2052809052175,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":75133.32624248089}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":1025.7299760472863,\"qlt\":0,\"dmd\":91.34753092580002,\"dmdR\":[80,99],\"cmp\":82.64614126688362,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0.10590797923530616,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":74745.36091023576,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.24176556442809133}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":2822.016353788466,\"qlt\":0,\"dmd\":81.77542161471295,\"dmdR\":[80,99],\"cmp\":87.39152634873506,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0.27947938964872465,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":14073.066634684144,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.20403340700313768}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":60877.75506188473,\"qlt\":0,\"dmd\":47.118997115702115,\"dmdR\":[5,99],\"cmp\":45.891508177116876,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":5.883776624183676,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":80017.7705049134,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.38228197781366213}}}}},\"New Tokyo\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":11,\"sizeUsed\":1120.6050346552058,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":101.83470847357032,\"loc\":\"New Tokyo\",\"size\":2200,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":75,\"dmdR\":[65,85],\"cmp\":50,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1500,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":94.10060960845664,\"dmdR\":[80,99],\"cmp\":73.75330599467596,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":101.8017565243778,\"sll\":0,\"prd\":-101.80175652437778,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2049.6170973107596,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.35566283970597196}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":84.91397805536175,\"dmdR\":[75,85],\"cmp\":69.22084148816516,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":203.6035130487556,\"sll\":0,\"prd\":-203.60351304875556,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2639.204060448851,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.4359171459786444}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":223.28485803686152,\"dmd\":81.15702603772957,\"dmdR\":[80,90],\"cmp\":78.55614052111432,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":50.91735423678516,\"prd\":50.91735423678516,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8125.028528176996,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":51065.68515803649}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":1049.219858939658,\"qlt\":0,\"dmd\":88.07360866141893,\"dmdR\":[80,99],\"cmp\":82.4848567683386,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0.107693017753897,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":77137.66270223884,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.1564442101112341}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":2900.283690433933,\"qlt\":0,\"dmd\":87.26822431187334,\"dmdR\":[80,99],\"cmp\":98.22627227886957,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0.2841899079616727,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":13529.845000029392,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.04186736839462026}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":61193.3472283967,\"qlt\":0,\"dmd\":52.316791826279655,\"dmdR\":[5,99],\"cmp\":59.24629034888467,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":5.982945430772056,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":86783.19498781666,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.33210130117201275}}}}},\"Ishima\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":10,\"sizeUsed\":946.9944912423081,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":102.77080317783751,\"loc\":\"Ishima\",\"size\":2000,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":75,\"dmdR\":[65,85],\"cmp\":50,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1500,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":87.19970369482051,\"dmdR\":[80,99],\"cmp\":76.22507684491976,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":102.7378508662478,\"sll\":0,\"prd\":-102.73785086624781,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2022.450100288668,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.27308153204946983}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":84.93261785913253,\"dmdR\":[75,85],\"cmp\":77.74860977743913,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":205.4757017324956,\"sll\":0,\"prd\":-205.47570173249562,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2392.3077727932036,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.33183273001871205}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":223.39670791330482,\"dmd\":86.08820525574284,\"dmdR\":[80,90],\"cmp\":83.1961368010834,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":51.385401588918754,\"prd\":51.385401588918754,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7261.10232669838,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":41141.254719398945}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":898.2021540502608,\"qlt\":0,\"dmd\":92.06935741142586,\"dmdR\":[80,99],\"cmp\":94.46832399979365,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0.0829286268551789,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":70845.88242692944,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.0829286268551789}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":2276.774725670565,\"qlt\":0,\"dmd\":81.77509414031233,\"dmdR\":[80,99],\"cmp\":83.38862144530364,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0.2198307723002088,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":13946.27889153539,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.2198307723002088}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":54043.18833002424,\"qlt\":0,\"dmd\":33.98296388026411,\"dmdR\":[5,99],\"cmp\":48.89634222443998,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0.28116278812882234,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":66340.6359121753,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.28116278812882234}}}}},\"Volhaven\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":10,\"sizeUsed\":933.1399919640933,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":104.11134665633342,\"loc\":\"Volhaven\",\"size\":2000,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":75,\"dmdR\":[65,85],\"cmp\":50,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1500,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":83.03166945027075,\"dmdR\":[80,99],\"cmp\":80.67494434011036,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":104.07767051179019,\"sll\":0,\"prd\":-104.07767051179019,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1957.212058504979,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.29330489880464544}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":77.68777638657309,\"dmdR\":[75,85],\"cmp\":61.87507523623169,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":208.15534102358038,\"sll\":0,\"prd\":-208.15534102358038,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2840.9914122948267,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.46951605954645437}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":221.8915040092787,\"dmd\":89.25379273631027,\"dmdR\":[80,90],\"cmp\":82.6174190079229,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":52.05567332816671,\"prd\":52.05567332816671,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7833.39996859068,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":46137.371522072215}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":867.0077392372847,\"qlt\":0,\"dmd\":93.72017014217347,\"dmdR\":[80,99],\"cmp\":94.37768689468648,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0.08891163329600986,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":71647.52191998778,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.08891163329600986}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":2302.111222752353,\"qlt\":0,\"dmd\":91.86624942536572,\"dmdR\":[80,99],\"cmp\":88.93502638960024,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0.1602516501802814,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":15806.704020769448,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.1602516501802814}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":53885.00001404313,\"qlt\":0,\"dmd\":83.67302420218172,\"dmdR\":[5,99],\"cmp\":39.72360844457393,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0.8402026176581947,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":92571.75971602343,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.8402026176581947}}}}}}}}],\"funds\":2140256118.9715261,\"revenue\":40466335.830917925,\"expenses\":11883846.29169703,\"fundingRound\":3,\"public\":false,\"totalShares\":1000000000,\"numShares\":300000000,\"shareSalesUntilPriceUpdate\":1000000,\"shareSaleCooldown\":0,\"issueNewSharesCooldown\":0,\"dividendPercentage\":0,\"dividendTaxPercentage\":50,\"issuedShares\":0,\"sharePrice\":15.508097750619816,\"storedCycles\":0,\"avgProfit\":28582489.539220892,\"state\":{\"ctor\":\"CorporationState\",\"data\":{\"state\":1}},\"unlockUpgrades\":[0,1,0,0,0,0,0,1,1],\"upgrades\":[10,10,2,5,7,7,7,7,7,1],\"upgradeMultipliers\":[1.3,2,1.002,1.025,1.7000000000000002,1.7000000000000002,1.7000000000000002,1.7000000000000002,1.07,1.05]}},\"bladeburner\":{\"ctor\":\"Bladeburner\",\"data\":{\"numHosp\":4,\"moneyLost\":13600000,\"rank\":16496.025356133032,\"maxRank\":16496.025356133032,\"skillPoints\":13,\"totalSkillPoints\":5498,\"teamSize\":0,\"teamLost\":0,\"hpLost\":162,\"storedCycles\":6,\"randomEventCounter\":315,\"actionTimeToComplete\":92,\"actionTimeCurrent\":69,\"actionTimeOverflow\":0,\"action\":{\"ctor\":\"ActionIdentifier\",\"data\":{\"name\":\"Assassination\",\"type\":3}},\"cities\":{\"Aevum\":{\"ctor\":\"City\",\"data\":{\"name\":\"Aevum\",\"pop\":1102152691,\"popEst\":1182241540.6079698,\"comms\":131,\"chaos\":0.710390050855801}},\"Chongqing\":{\"ctor\":\"City\",\"data\":{\"name\":\"Chongqing\",\"pop\":1638808208,\"popEst\":1208829324,\"comms\":140,\"chaos\":0.834900000000039}},\"Sector-12\":{\"ctor\":\"City\",\"data\":{\"name\":\"Sector-12\",\"pop\":2045090427,\"popEst\":933554597.749155,\"comms\":149,\"chaos\":0.8121894602000961}},\"New Tokyo\":{\"ctor\":\"City\",\"data\":{\"name\":\"New Tokyo\",\"pop\":697746497,\"popEst\":1173751517.1679587,\"comms\":133,\"chaos\":0}},\"Ishima\":{\"ctor\":\"City\",\"data\":{\"name\":\"Ishima\",\"pop\":1848295135,\"popEst\":1032321383.5295777,\"comms\":68,\"chaos\":2.2705938687981995}},\"Volhaven\":{\"ctor\":\"City\",\"data\":{\"name\":\"Volhaven\",\"pop\":2906709326,\"popEst\":2358116133,\"comms\":128,\"chaos\":37.473617597598945}}},\"city\":\"Volhaven\",\"skills\":{\"Short-Circuit\":21,\"Digital Observer\":21,\"Evasive System\":21,\"Reaper\":17,\"Overclock\":38,\"Blade's Intuition\":20,\"Cloak\":25,\"Datamancer\":41,\"Cyber's Edge\":5},\"skillMultipliers\":{\"successChanceAll\":1.6,\"successChanceStealth\":2.375,\"successChanceKill\":2.1550000000000002,\"successChanceContract\":1,\"successChanceOperation\":1.8399999999999999,\"successChanceEstimate\":3.05,\"actionTime\":0.62,\"effHack\":1,\"effStr\":1.34,\"effDef\":1.34,\"effDex\":2.4656,\"effAgi\":2.4656,\"effCha\":1,\"effInt\":1,\"stamina\":1.1,\"money\":1,\"expGain\":1},\"staminaBonus\":0,\"maxStamina\":2745.9839097253766,\"stamina\":2745.9839097253766,\"contracts\":{\"Tracking\":{\"ctor\":\"Contract\",\"data\":{\"name\":\"Tracking\",\"level\":24,\"maxLevel\":24,\"autoLevel\":true,\"baseDifficulty\":133.7726702006402,\"difficultyFac\":1.02,\"rewardFac\":1.041,\"successes\":344,\"failures\":27,\"rankGain\":0.3,\"rankLoss\":0,\"hpLoss\":0.5,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":598.6720833332944,\"weights\":{\"hack\":0,\"str\":0.05,\"def\":0.05,\"dex\":0.35,\"agi\":0.35,\"cha\":0.1,\"int\":0.05},\"decays\":{\"hack\":0,\"str\":0.91,\"def\":0.91,\"dex\":0.91,\"agi\":0.91,\"cha\":0.9,\"int\":1},\"teamCount\":0}},\"Bounty Hunter\":{\"ctor\":\"Contract\",\"data\":{\"name\":\"Bounty Hunter\",\"level\":4,\"maxLevel\":4,\"autoLevel\":true,\"baseDifficulty\":252.8762988614121,\"difficultyFac\":1.04,\"rewardFac\":1.085,\"successes\":15,\"failures\":0,\"rankGain\":0.9,\"rankLoss\":0,\"hpLoss\":1,\"hpLost\":0,\"isStealth\":false,\"isKill\":true,\"count\":936.8974999999224,\"weights\":{\"hack\":0,\"str\":0.15,\"def\":0.15,\"dex\":0.25,\"agi\":0.25,\"cha\":0.1,\"int\":0.1},\"decays\":{\"hack\":0,\"str\":0.91,\"def\":0.91,\"dex\":0.91,\"agi\":0.91,\"cha\":0.8,\"int\":0.9},\"teamCount\":0}},\"Retirement\":{\"ctor\":\"Contract\",\"data\":{\"name\":\"Retirement\",\"level\":21,\"maxLevel\":21,\"autoLevel\":true,\"baseDifficulty\":217.91742032796338,\"difficultyFac\":1.03,\"rewardFac\":1.065,\"successes\":271,\"failures\":1,\"rankGain\":0.6,\"rankLoss\":0,\"hpLoss\":1,\"hpLost\":0,\"isStealth\":false,\"isKill\":true,\"count\":612.3779166666216,\"weights\":{\"hack\":0,\"str\":0.2,\"def\":0.2,\"dex\":0.2,\"agi\":0.2,\"cha\":0.1,\"int\":0.1},\"decays\":{\"hack\":0,\"str\":0.91,\"def\":0.91,\"dex\":0.91,\"agi\":0.91,\"cha\":0.8,\"int\":0.9},\"teamCount\":0}}},\"operations\":{\"Investigation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Investigation\",\"level\":4,\"maxLevel\":4,\"autoLevel\":true,\"baseDifficulty\":408.58406983470826,\"difficultyFac\":1.03,\"rewardFac\":1.07,\"successes\":12,\"failures\":4,\"rankGain\":2.2,\"rankLoss\":0.2,\"hpLoss\":0,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":537.0504166668181,\"weights\":{\"hack\":0.25,\"str\":0.05,\"def\":0.05,\"dex\":0.2,\"agi\":0.1,\"cha\":0.25,\"int\":0.1},\"decays\":{\"hack\":0.85,\"str\":0.9,\"def\":0.9,\"dex\":0.9,\"agi\":0.9,\"cha\":0.7,\"int\":0.9},\"teamCount\":0,\"reqdRank\":25}},\"Undercover Operation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Undercover Operation\",\"level\":13,\"maxLevel\":13,\"autoLevel\":true,\"baseDifficulty\":474.6947595900964,\"difficultyFac\":1.04,\"rewardFac\":1.09,\"successes\":99,\"failures\":1,\"rankGain\":4.4,\"rankLoss\":0.4,\"hpLoss\":2,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":503.3352083335246,\"weights\":{\"hack\":0.2,\"str\":0.05,\"def\":0.05,\"dex\":0.2,\"agi\":0.2,\"cha\":0.2,\"int\":0.1},\"decays\":{\"hack\":0.8,\"str\":0.9,\"def\":0.9,\"dex\":0.9,\"agi\":0.9,\"cha\":0.7,\"int\":0.9},\"teamCount\":0,\"reqdRank\":100}},\"Sting Operation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Sting Operation\",\"level\":8,\"maxLevel\":8,\"autoLevel\":true,\"baseDifficulty\":674.370237251699,\"difficultyFac\":1.04,\"rewardFac\":1.095,\"successes\":40,\"failures\":3,\"rankGain\":5.5,\"rankLoss\":0.5,\"hpLoss\":2.5,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":519.9985416669056,\"weights\":{\"hack\":0.25,\"str\":0.05,\"def\":0.05,\"dex\":0.25,\"agi\":0.1,\"cha\":0.2,\"int\":0.1},\"decays\":{\"hack\":0.8,\"str\":0.85,\"def\":0.85,\"dex\":0.85,\"agi\":0.85,\"cha\":0.7,\"int\":0.9},\"teamCount\":0,\"reqdRank\":500}},\"Raid\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Raid\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":872.5384976955173,\"difficultyFac\":1.045,\"rewardFac\":1.1,\"successes\":0,\"failures\":0,\"rankGain\":55,\"rankLoss\":2.5,\"hpLoss\":50,\"hpLost\":0,\"isStealth\":false,\"isKill\":true,\"count\":481.9702083335382,\"weights\":{\"hack\":0.1,\"str\":0.2,\"def\":0.2,\"dex\":0.2,\"agi\":0.2,\"cha\":0,\"int\":0.1},\"decays\":{\"hack\":0.7,\"str\":0.8,\"def\":0.8,\"dex\":0.8,\"agi\":0.8,\"cha\":0,\"int\":0.9},\"teamCount\":0,\"reqdRank\":3000}},\"Stealth Retirement Operation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Stealth Retirement Operation\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":1043.3317731080997,\"difficultyFac\":1.05,\"rewardFac\":1.11,\"successes\":0,\"failures\":0,\"rankGain\":22,\"rankLoss\":2,\"hpLoss\":10,\"hpLost\":0,\"isStealth\":true,\"isKill\":true,\"count\":262.9910416668634,\"weights\":{\"hack\":0.1,\"str\":0.1,\"def\":0.1,\"dex\":0.3,\"agi\":0.3,\"cha\":0,\"int\":0.1},\"decays\":{\"hack\":0.7,\"str\":0.8,\"def\":0.8,\"dex\":0.8,\"agi\":0.8,\"cha\":0,\"int\":0.9},\"teamCount\":0,\"reqdRank\":20000}},\"Assassination\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Assassination\",\"level\":14,\"maxLevel\":14,\"autoLevel\":true,\"baseDifficulty\":1578.0630882414714,\"difficultyFac\":1.06,\"rewardFac\":1.14,\"successes\":114,\"failures\":0,\"rankGain\":44,\"rankLoss\":4,\"hpLoss\":5,\"hpLost\":0,\"isStealth\":true,\"isKill\":true,\"count\":116.38791666677466,\"weights\":{\"hack\":0.1,\"str\":0.1,\"def\":0.1,\"dex\":0.3,\"agi\":0.3,\"cha\":0,\"int\":0.1},\"decays\":{\"hack\":0.6,\"str\":0.8,\"def\":0.8,\"dex\":0.8,\"agi\":0.8,\"cha\":0,\"int\":0.8},\"teamCount\":0,\"reqdRank\":50000}}},\"blackops\":{\"Operation Typhoon\":true,\"Operation Zero\":true,\"Operation X\":true,\"Operation Titan\":true,\"Operation Ares\":true,\"Operation Archangel\":true},\"logging\":{\"general\":true,\"contracts\":true,\"ops\":true,\"blackops\":true,\"events\":true},\"automateEnabled\":false,\"automateActionHigh\":{\"ctor\":\"ActionIdentifier\",\"data\":{\"name\":\"\",\"type\":1}},\"automateThreshHigh\":0,\"automateActionLow\":{\"ctor\":\"ActionIdentifier\",\"data\":{\"name\":\"\",\"type\":1}},\"automateThreshLow\":0,\"consoleHistory\":[],\"consoleLogs\":[\"[5/15 15:57:15] Assassination successfully completed! Gained 96.087 rank\",\"[5/15 15:59:02] Assassination successfully completed! Gained 102.936 rank\",\"[5/15 15:59:05] Intelligence indicates that the Synthoid population of Chongqing just changed significantly\",\"[5/15 16:00:48] Assassination successfully completed! Gained 96.240 rank\",\"[5/15 16:02:33] Assassination successfully completed! Gained 108.804 rank\",\"[5/15 16:05:08] Operation Zero successful! Gained 50.3 rank\",\"[5/15 16:05:18] Intelligence indicates that a large number of Synthoids migrated from Sector-12 to some other city\",\"[5/15 16:06:52] Assassination successfully completed! Gained 91.642 rank\",\"[5/15 16:08:36] Assassination successfully completed! Gained 108.035 rank\",\"[5/15 16:10:20] Assassination successfully completed! Gained 93.945 rank\",\"[5/15 16:12:03] Assassination successfully completed! Gained 95.278 rank\",\"[5/15 16:12:51] Intelligence indicates that the Synthoid population of Ishima just changed significantly\",\"[5/15 16:13:45] Assassination successfully completed! Gained 97.686 rank\",\"[5/15 16:15:33] Assassination successfully completed! Gained 104.746 rank\",\"[5/15 16:17:20] Assassination successfully completed! Gained 106.245 rank\",\"[5/15 16:19:07] Assassination successfully completed! Gained 120.997 rank\",\"[5/15 16:20:53] Assassination successfully completed! Gained 120.272 rank\",\"[5/15 16:21:25] Intelligence indicates that a new Synthoid community was formed in a city\",\"[5/15 16:22:39] Assassination successfully completed! Gained 117.153 rank\",\"[5/15 16:24:25] Assassination successfully completed! Gained 124.110 rank\",\"[5/15 16:26:09] Assassination successfully completed! Gained 112.603 rank\",\"[5/15 16:27:53] Assassination successfully completed! Gained 116.977 rank\",\"[5/15 16:29:36] Assassination successfully completed! Gained 110.829 rank\",\"[5/15 16:30:25] Intelligence indicates that a large number of Synthoids migrated from Sector-12 to some other city\",\"[5/15 16:31:19] Assassination successfully completed! Gained 120.690 rank\",\"[5/15 16:33:02] Assassination successfully completed! Gained 122.897 rank\",\"[5/15 16:34:50] Assassination successfully completed! Gained 140.033 rank\",\"[5/15 16:36:38] Assassination successfully completed! Gained 116.853 rank\",\"[5/15 16:37:31] Intelligence indicates that the Synthoid population of Aevum just changed significantly\",\"[5/15 16:38:24] Assassination successfully completed! Gained 122.200 rank\",\"[5/15 16:40:10] Assassination successfully completed! Gained 130.534 rank\",\"[5/15 16:41:56] Assassination successfully completed! Gained 117.706 rank\",\"[5/15 16:44:47] Operation X successful! Gained 68.8 rank\",\"[5/15 16:46:37] Tracking contract successfully completed! Gained 0.705 rank and $629.951k\",\"[5/15 16:49:09] Assassination successfully completed! Gained 116.210 rank\",\"[5/15 16:51:11] Assassination successfully completed! Gained 137.903 rank\",\"[5/15 16:53:06] Assassination successfully completed! Gained 120.413 rank\",\"[5/15 16:53:26] Tensions between Synthoids and humans lead to riots in Volhaven! Chaos increased\",\"[5/15 16:54:58] Assassination successfully completed! Gained 131.013 rank\",\"[5/15 16:56:48] Assassination successfully completed! Gained 139.915 rank\",\"[5/15 16:58:37] Assassination successfully completed! Gained 140.145 rank\",\"[5/15 17:00:31] Assassination successfully completed! Gained 135.915 rank\",\"[5/15 17:00:39] Tensions between Synthoids and humans lead to riots in Volhaven! Chaos increased\",\"[5/15 17:02:24] Assassination successfully completed! Gained 138.956 rank\",\"[5/15 17:04:14] Assassination successfully completed! Gained 159.889 rank\",\"[5/15 17:05:22] Intelligence indicates that a large number of Synthoids migrated from Chongqing to some other city\",\"[5/15 17:06:04] Assassination successfully completed! Gained 153.013 rank\",\"[5/15 17:07:53] Assassination successfully completed! Gained 133.781 rank\",\"[5/15 17:09:40] Assassination successfully completed! Gained 143.920 rank\",\"[5/15 17:11:26] Assassination successfully completed! Gained 136.894 rank\",\"[5/15 17:13:11] Assassination successfully completed! Gained 138.117 rank\",\"[5/15 17:14:55] Assassination successfully completed! Gained 141.524 rank\",\"[5/15 17:16:17] Intelligence indicates that the Synthoid population of Ishima just changed significantly\",\"[5/15 17:16:38] Assassination successfully completed! Gained 155.991 rank\",\"[5/15 17:18:20] Assassination successfully completed! Gained 155.564 rank\",\"[5/15 17:21:00] Intelligence indicates that the Synthoid population of Sector-12 just changed significantly\",\"[5/15 17:21:37] Operation Titan successful! Gained 86.8 rank\",\"[5/15 17:23:16] Assassination successfully completed! Gained 148.224 rank\",\"[5/15 17:24:55] Assassination successfully completed! Gained 136.906 rank\",\"[5/15 17:25:42] Tensions between Synthoids and humans lead to riots in Chongqing! Chaos increased\",\"[5/15 17:26:39] Assassination successfully completed! Gained 155.648 rank\",\"[5/15 17:28:23] Assassination successfully completed! Gained 179.457 rank\",\"[5/15 17:30:06] Assassination successfully completed! Gained 154.589 rank\",\"[5/15 17:31:48] Assassination successfully completed! Gained 181.410 rank\",\"[5/15 17:33:29] Assassination successfully completed! Gained 183.405 rank\",\"[5/15 17:34:22] Intelligence indicates that the Synthoid population of New Tokyo just changed significantly\",\"[5/15 17:35:10] Assassination successfully completed! Gained 176.459 rank\",\"[5/15 17:36:49] Assassination successfully completed! Gained 169.331 rank\",\"[5/15 17:38:27] Assassination successfully completed! Gained 155.707 rank\",\"[5/15 17:40:05] Assassination successfully completed! Gained 159.569 rank\",\"[5/15 17:41:42] Assassination successfully completed! Gained 176.712 rank\",\"[5/15 17:43:18] Assassination successfully completed! Gained 158.301 rank\",\"[5/15 17:43:49] Intelligence indicates that the Synthoid population of New Tokyo just changed significantly\",\"[5/15 17:44:53] Assassination successfully completed! Gained 151.252 rank\",\"[5/15 17:46:28] Assassination successfully completed! Gained 177.307 rank\",\"[5/15 17:50:33] Operation Ares successful! Gained 123.1 rank\",\"[5/15 17:51:53] Intelligence indicates that the Synthoid population of Ishima just changed significantly\",\"[5/15 17:52:12] Assassination successfully completed! Gained 209.058 rank\",\"[5/15 17:53:50] Assassination successfully completed! Gained 209.202 rank\",\"[5/15 17:55:28] Assassination successfully completed! Gained 184.332 rank\",\"[5/15 17:57:06] Assassination successfully completed! Gained 182.442 rank\",\"[5/15 17:57:37] Intelligence indicates that a Synthoid community migrated from Aevum to some other city\",\"[5/15 17:58:43] Assassination successfully completed! Gained 201.266 rank\",\"[5/15 18:00:19] Assassination successfully completed! Gained 208.664 rank\",\"[5/15 18:01:54] Assassination successfully completed! Gained 199.566 rank\",\"[5/15 18:03:28] Assassination successfully completed! Gained 200.326 rank\",\"[5/15 18:05:01] Assassination successfully completed! Gained 208.779 rank\",\"[5/15 18:06:34] Assassination successfully completed! Gained 200.678 rank\",\"[5/15 18:08:05] Assassination successfully completed! Gained 207.400 rank\",\"[5/15 18:09:36] Assassination successfully completed! Gained 206.932 rank\",\"[5/15 18:11:34] Intelligence indicates that the Synthoid population of Ishima just changed significantly\",\"[5/15 18:14:38] Operation Archangel successful! Gained 169.3 rank\",\"[5/15 18:16:07] Assassination successfully completed! Gained 172.375 rank\",\"[5/15 18:17:36] Assassination successfully completed! Gained 205.235 rank\",\"[5/15 18:19:05] Assassination successfully completed! Gained 172.672 rank\",\"[5/15 18:19:29] Intelligence indicates that the Synthoid population of Ishima just changed significantly\",\"[5/15 18:20:39] Assassination successfully completed! Gained 204.702 rank\",\"[5/15 18:22:12] Assassination successfully completed! Gained 200.013 rank\",\"[5/15 18:23:44] Assassination successfully completed! Gained 201.560 rank\",\"[5/15 18:24:22] Intelligence indicates that the Synthoid population of Aevum just changed significantly\"]}},\"bladeburner_max_stamina_mult\":1.3167000000000004,\"bladeburner_stamina_gain_mult\":1.2819870000000004,\"bladeburner_analysis_mult\":1.2540000000000002,\"bladeburner_success_chance_mult\":1.3081151616000002,\"sleeves\":[{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":1166,\"strength\":31673,\"defense\":25866,\"dexterity\":4821,\"agility\":5672,\"charisma\":737,\"intelligence\":1,\"hp\":2596,\"max_hp\":2596,\"hacking_exp\":136082.58063544935,\"strength_exp\":119789.01576180004,\"defense_exp\":119789.01576180004,\"dexterity_exp\":137757.36812607007,\"agility_exp\":119789.01576180004,\"charisma_exp\":162514.83536338055,\"intelligence_exp\":0,\"hacking_mult\":13.081055489392524,\"strength_mult\":403.7458211949797,\"defense_mult\":329.72149620864525,\"dexterity_mult\":59.923627612024475,\"agility_mult\":72.312896269152,\"charisma_mult\":8.904795419520001,\"hacking_exp_mult\":15.320075574544287,\"strength_exp_mult\":3.2663792700000003,\"defense_exp_mult\":3.2663792700000003,\"dexterity_exp_mult\":3.7563361604999996,\"agility_exp_mult\":3.2663792700000003,\"charisma_exp_mult\":11.994676978284,\"hacking_chance_mult\":15105.59910877075,\"hacking_speed_mult\":5706.906757338713,\"hacking_money_mult\":155601339310.30765,\"hacking_grow_mult\":1443.75876198709,\"company_rep_mult\":15.536583404842508,\"faction_rep_mult\":2.3516761125,\"crime_money_mult\":3.0461022109375007,\"crime_success_mult\":1.6300212500000002,\"work_money_mult\":2.34564,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"NutriGen Implant\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"BitWire\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"INFRARET Enhancement\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"Speech Processor Implant\",\"level\":1},{\"name\":\"DermaForce Particle Barrier\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen I\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"Artificial Synaptic Potentiation\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"Augmented Targeting III\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen II\",\"level\":1},{\"name\":\"Neurotrainer III\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"TITN-41 Gene-Modification Injection\",\"level\":1},{\"name\":\"CRTX42-AA Gene Modification\",\"level\":1},{\"name\":\"Neural-Retention Enhancement\",\"level\":1},{\"name\":\"Embedded Netburner Module\",\"level\":1},{\"name\":\"Bionic Arms\",\"level\":1},{\"name\":\"Neuregen Gene Modification\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen III\",\"level\":1},{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"Neuralstimulator\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"The Black Hand\",\"level\":1},{\"name\":\"Enhanced Myelin Sheathing\",\"level\":1},{\"name\":\"PCMatrix\",\"level\":1},{\"name\":\"HyperSight Corneal Implant\",\"level\":1},{\"name\":\"Synfibril Muscle\",\"level\":1},{\"name\":\"Enhanced Social Interaction Implant\",\"level\":1},{\"name\":\"Neuronal Densification\",\"level\":1},{\"name\":\"Neural Accelerator\",\"level\":1},{\"name\":\"nextSENS Gene Modification\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen V\",\"level\":1},{\"name\":\"Embedded Netburner Module Core Implant\",\"level\":1},{\"name\":\"Graphene BrachiBlades Upgrade\",\"level\":1},{\"name\":\"SmartJaw\",\"level\":1},{\"name\":\"Photosynthetic Cells\",\"level\":1},{\"name\":\"Synthetic Heart\",\"level\":1},{\"name\":\"Neotra\",\"level\":1},{\"name\":\"OmniTek InfoLoad\",\"level\":1},{\"name\":\"Artificial Bio-neural Network Implant\",\"level\":1},{\"name\":\"NEMEAN Subdermal Weave\",\"level\":1},{\"name\":\"PC Direct-Neural Interface\",\"level\":1},{\"name\":\"Graphene Bionic Arms Upgrade\",\"level\":1},{\"name\":\"Graphene Bone Lacings\",\"level\":1},{\"name\":\"Xanipher\",\"level\":1},{\"name\":\"BitRunners Neurolink\",\"level\":1},{\"name\":\"Graphene Bionic Legs Upgrade\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V2 Upgrade\",\"level\":1},{\"name\":\"PC Direct-Neural Interface Optimization Submodule\",\"level\":1},{\"name\":\"SPTN-97 Gene Modification\",\"level\":1},{\"name\":\"Unstable Circadian Modulator\",\"level\":1},{\"name\":\"CordiARC Fusion Reactor\",\"level\":1},{\"name\":\"Graphene Bionic Spine Upgrade\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V3 Upgrade\",\"level\":1},{\"name\":\"PC Direct-Neural Interface NeuroNet Injector\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"Heist\",\"currentTask\":3,\"currentTaskLocation\":\"182766132.65625003\",\"currentTaskMaxTime\":600000,\"currentTaskTime\":194200,\"earningsForSleeves\":{\"hack\":75486.73178554971,\"str\":67270.28001062991,\"def\":67270.28001062991,\"dex\":70598.46801300178,\"agi\":67270.28001062991,\"cha\":53976.046402278,\"money\":0},\"earningsForPlayer\":{\"hack\":75486.73178554971,\"str\":67270.28001062991,\"def\":67270.28001062991,\"dex\":70598.46801300178,\"agi\":67270.28001062991,\"cha\":53976.046402278,\"money\":1161499724.7301085},\"earningsForTask\":{\"hack\":68940.3400854493,\"str\":14698.706715,\"def\":14698.706715,\"dex\":16903.512722249998,\"agi\":14698.706715,\"cha\":53976.046402278,\"money\":913830663.2812501},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":6894.034008544929,\"str\":1469.8706715,\"def\":1469.8706715,\"dex\":1690.3512722249998,\"agi\":1469.8706715,\"cha\":5397.6046402278,\"money\":182766132.65625003},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":4,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":228,\"strength\":33258,\"defense\":27160,\"dexterity\":5054,\"agility\":5956,\"charisma\":229,\"intelligence\":1,\"hp\":2726,\"max_hp\":2726,\"hacking_exp\":156043.78728544936,\"strength_exp\":157488.0957978,\"defense_exp\":157488.0957978,\"dexterity_exp\":180602.81016747007,\"agility_exp\":157488.0957978,\"charisma_exp\":194783.12397343814,\"intelligence_exp\":0,\"hacking_mult\":2.499490224,\"strength_mult\":403.7458211949797,\"defense_mult\":329.72149620864525,\"dexterity_mult\":59.923627612024475,\"agility_mult\":72.312896269152,\"charisma_mult\":2.688645960000001,\"hacking_exp_mult\":2.0162834999999997,\"strength_exp_mult\":3.2663792700000003,\"defense_exp_mult\":3.2663792700000003,\"dexterity_exp_mult\":3.7563361604999996,\"agility_exp_mult\":3.2663792700000003,\"charisma_exp_mult\":3.2594230919250005,\"hacking_chance_mult\":1000.1255805247804,\"hacking_speed_mult\":628.3312476318202,\"hacking_money_mult\":139999351.43914825,\"hacking_grow_mult\":153.93679428100586,\"company_rep_mult\":15.536583404842508,\"faction_rep_mult\":2.3516761125,\"crime_money_mult\":3.0461022109375007,\"crime_success_mult\":1.6300212500000002,\"work_money_mult\":2.34564,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"NutriGen Implant\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"INFRARET Enhancement\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"DermaForce Particle Barrier\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"Augmented Targeting III\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"Neurotrainer III\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"Bionic Arms\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"The Black Hand\",\"level\":1},{\"name\":\"PCMatrix\",\"level\":1},{\"name\":\"HyperSight Corneal Implant\",\"level\":1},{\"name\":\"Graphene BrachiBlades Upgrade\",\"level\":1},{\"name\":\"SmartJaw\",\"level\":1},{\"name\":\"PC Direct-Neural Interface\",\"level\":1},{\"name\":\"Synfibril Muscle\",\"level\":1},{\"name\":\"nextSENS Gene Modification\",\"level\":1},{\"name\":\"Graphene Bionic Arms Upgrade\",\"level\":1},{\"name\":\"PC Direct-Neural Interface Optimization Submodule\",\"level\":1},{\"name\":\"Photosynthetic Cells\",\"level\":1},{\"name\":\"Neotra\",\"level\":1},{\"name\":\"Synthetic Heart\",\"level\":1},{\"name\":\"Graphene Bionic Legs Upgrade\",\"level\":1},{\"name\":\"NEMEAN Subdermal Weave\",\"level\":1},{\"name\":\"Xanipher\",\"level\":1},{\"name\":\"Graphene Bone Lacings\",\"level\":1},{\"name\":\"CordiARC Fusion Reactor\",\"level\":1},{\"name\":\"SPTN-97 Gene Modification\",\"level\":1},{\"name\":\"PC Direct-Neural Interface NeuroNet Injector\",\"level\":1},{\"name\":\"Graphene Bionic Spine Upgrade\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"Heist\",\"currentTask\":3,\"currentTaskLocation\":\"182766132.65625003\",\"currentTaskMaxTime\":600000,\"currentTaskTime\":207200,\"earningsForSleeves\":{\"hack\":20975.289930005783,\"str\":70619.54622257817,\"def\":70619.54622257817,\"dex\":74947.60921259856,\"agi\":71124.49374257815,\"cha\":23467.846261860002,\"money\":0},\"earningsForPlayer\":{\"hack\":20975.289930005783,\"str\":70619.54622257817,\"def\":70619.54622257817,\"dex\":74947.60921259856,\"agi\":71124.49374257815,\"cha\":23467.846261860002,\"money\":1673528714.6478171},\"earningsForTask\":{\"hack\":14517.241199999993,\"str\":23517.930744000005,\"def\":23517.930744000005,\"dex\":27045.620355599996,\"agi\":23517.930744000005,\"cha\":23467.846261860002,\"money\":1462129061.2500002},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":907.3275749999998,\"str\":1469.8706715,\"def\":1469.8706715,\"dex\":1690.3512722249998,\"agi\":1469.8706715,\"cha\":1466.7403913662502,\"money\":182766132.65625003},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":4,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":228,\"strength\":33258,\"defense\":27160,\"dexterity\":5054,\"agility\":5956,\"charisma\":229,\"intelligence\":1,\"hp\":2726,\"max_hp\":2726,\"hacking_exp\":156043.78728544936,\"strength_exp\":157488.0957978,\"defense_exp\":157488.0957978,\"dexterity_exp\":180602.81016747007,\"agility_exp\":157488.0957978,\"charisma_exp\":194783.12397343814,\"intelligence_exp\":0,\"hacking_mult\":2.499490224,\"strength_mult\":403.7458211949797,\"defense_mult\":329.72149620864525,\"dexterity_mult\":59.923627612024475,\"agility_mult\":72.312896269152,\"charisma_mult\":2.688645960000001,\"hacking_exp_mult\":2.0162834999999997,\"strength_exp_mult\":3.2663792700000003,\"defense_exp_mult\":3.2663792700000003,\"dexterity_exp_mult\":3.7563361604999996,\"agility_exp_mult\":3.2663792700000003,\"charisma_exp_mult\":3.2594230919250005,\"hacking_chance_mult\":909.2050732043456,\"hacking_speed_mult\":542.1563717239353,\"hacking_money_mult\":79051017.18754846,\"hacking_grow_mult\":153.93679428100586,\"company_rep_mult\":15.536583404842508,\"faction_rep_mult\":2.3516761125,\"crime_money_mult\":3.0461022109375007,\"crime_success_mult\":1.6300212500000002,\"work_money_mult\":2.34564,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"NutriGen Implant\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"INFRARET Enhancement\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"DermaForce Particle Barrier\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"Augmented Targeting III\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"Neurotrainer III\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"Bionic Arms\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"The Black Hand\",\"level\":1},{\"name\":\"PCMatrix\",\"level\":1},{\"name\":\"Graphene BrachiBlades Upgrade\",\"level\":1},{\"name\":\"HyperSight Corneal Implant\",\"level\":1},{\"name\":\"SmartJaw\",\"level\":1},{\"name\":\"PC Direct-Neural Interface\",\"level\":1},{\"name\":\"Synfibril Muscle\",\"level\":1},{\"name\":\"nextSENS Gene Modification\",\"level\":1},{\"name\":\"Photosynthetic Cells\",\"level\":1},{\"name\":\"Neotra\",\"level\":1},{\"name\":\"Graphene Bionic Arms Upgrade\",\"level\":1},{\"name\":\"PC Direct-Neural Interface Optimization Submodule\",\"level\":1},{\"name\":\"Synthetic Heart\",\"level\":1},{\"name\":\"Graphene Bionic Legs Upgrade\",\"level\":1},{\"name\":\"NEMEAN Subdermal Weave\",\"level\":1},{\"name\":\"Xanipher\",\"level\":1},{\"name\":\"Graphene Bone Lacings\",\"level\":1},{\"name\":\"CordiARC Fusion Reactor\",\"level\":1},{\"name\":\"SPTN-97 Gene Modification\",\"level\":1},{\"name\":\"PC Direct-Neural Interface NeuroNet Injector\",\"level\":1},{\"name\":\"Graphene Bionic Spine Upgrade\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"Heist\",\"currentTask\":3,\"currentTaskLocation\":\"182766132.65625003\",\"currentTaskMaxTime\":600000,\"currentTaskTime\":207200,\"earningsForSleeves\":{\"hack\":20774.815009555376,\"str\":69787.80119627796,\"def\":69787.80119627796,\"dex\":74000.35744109839,\"agi\":70166.51183627795,\"cha\":23467.846261860002,\"money\":0},\"earningsForPlayer\":{\"hack\":20774.815009555376,\"str\":69787.80119627796,\"def\":69787.80119627796,\"dex\":74000.35744109839,\"agi\":70166.51183627795,\"cha\":23467.846261860002,\"money\":1678114534.6740708},\"earningsForTask\":{\"hack\":14517.241199999993,\"str\":23517.930744000005,\"def\":23517.930744000005,\"dex\":27045.620355599996,\"agi\":23517.930744000005,\"cha\":23467.846261860002,\"money\":1462129061.2500002},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":907.3275749999998,\"str\":1469.8706715,\"def\":1469.8706715,\"dex\":1690.3512722249998,\"agi\":1469.8706715,\"cha\":1466.7403913662502,\"money\":182766132.65625003},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":4,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":228,\"strength\":33258,\"defense\":27160,\"dexterity\":5054,\"agility\":5956,\"charisma\":229,\"intelligence\":1,\"hp\":2726,\"max_hp\":2726,\"hacking_exp\":156043.78728544936,\"strength_exp\":157488.0957978,\"defense_exp\":157488.0957978,\"dexterity_exp\":180602.81016747007,\"agility_exp\":157488.0957978,\"charisma_exp\":194783.12397343814,\"intelligence_exp\":0,\"hacking_mult\":2.499490224000001,\"strength_mult\":403.7458211949797,\"defense_mult\":329.72149620864525,\"dexterity_mult\":59.923627612024475,\"agility_mult\":72.312896269152,\"charisma_mult\":2.688645960000001,\"hacking_exp_mult\":2.0162834999999997,\"strength_exp_mult\":3.2663792700000003,\"defense_exp_mult\":3.2663792700000003,\"dexterity_exp_mult\":3.7563361604999996,\"agility_exp_mult\":3.2663792700000003,\"charisma_exp_mult\":3.2594230919250005,\"hacking_chance_mult\":787.1905395708619,\"hacking_speed_mult\":537.1995134681736,\"hacking_money_mult\":76922720.5709606,\"hacking_grow_mult\":153.93679428100586,\"company_rep_mult\":15.536583404842508,\"faction_rep_mult\":2.3516761125,\"crime_money_mult\":3.0461022109375007,\"crime_success_mult\":1.6300212500000002,\"work_money_mult\":2.34564,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"NutriGen Implant\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"INFRARET Enhancement\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"DermaForce Particle Barrier\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"Augmented Targeting III\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"Neurotrainer III\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"Bionic Arms\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"The Black Hand\",\"level\":1},{\"name\":\"PCMatrix\",\"level\":1},{\"name\":\"Graphene BrachiBlades Upgrade\",\"level\":1},{\"name\":\"HyperSight Corneal Implant\",\"level\":1},{\"name\":\"Synfibril Muscle\",\"level\":1},{\"name\":\"nextSENS Gene Modification\",\"level\":1},{\"name\":\"SmartJaw\",\"level\":1},{\"name\":\"PC Direct-Neural Interface\",\"level\":1},{\"name\":\"Photosynthetic Cells\",\"level\":1},{\"name\":\"Neotra\",\"level\":1},{\"name\":\"Graphene Bionic Arms Upgrade\",\"level\":1},{\"name\":\"PC Direct-Neural Interface Optimization Submodule\",\"level\":1},{\"name\":\"Synthetic Heart\",\"level\":1},{\"name\":\"Graphene Bionic Legs Upgrade\",\"level\":1},{\"name\":\"NEMEAN Subdermal Weave\",\"level\":1},{\"name\":\"Xanipher\",\"level\":1},{\"name\":\"Graphene Bone Lacings\",\"level\":1},{\"name\":\"CordiARC Fusion Reactor\",\"level\":1},{\"name\":\"SPTN-97 Gene Modification\",\"level\":1},{\"name\":\"PC Direct-Neural Interface NeuroNet Injector\",\"level\":1},{\"name\":\"Graphene Bionic Spine Upgrade\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"Heist\",\"currentTask\":3,\"currentTaskLocation\":\"182766132.65625003\",\"currentTaskMaxTime\":600000,\"currentTaskTime\":327200,\"earningsForSleeves\":{\"hack\":21150.69335910604,\"str\":64111.75880342948,\"def\":64111.75880342948,\"dex\":67296.08410142998,\"agi\":64364.232563429476,\"cha\":23467.846261860002,\"money\":0},\"earningsForPlayer\":{\"hack\":21150.69335910604,\"str\":64111.75880342948,\"def\":64111.75880342948,\"dex\":67296.08410142998,\"agi\":64364.232563429476,\"cha\":23467.846261860002,\"money\":1675893255.9087777},\"earningsForTask\":{\"hack\":14517.241199999993,\"str\":17420.689440000002,\"def\":17420.689440000002,\"dex\":20033.792855999996,\"agi\":17420.689440000002,\"cha\":23467.846261860002,\"money\":1462129061.2500002},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":907.3275749999998,\"str\":1088.7930900000001,\"def\":1088.7930900000001,\"dex\":1252.1120534999998,\"agi\":1088.7930900000001,\"cha\":1466.7403913662502,\"money\":182766132.65625003},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":4,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":227,\"strength\":33127,\"defense\":27053,\"dexterity\":5034,\"agility\":5933,\"charisma\":229,\"intelligence\":1,\"hp\":2715,\"max_hp\":2715,\"hacking_exp\":154229.13213544938,\"strength_exp\":153959.0883378,\"defense_exp\":153959.0883378,\"dexterity_exp\":176633.55158846983,\"agility_exp\":153959.0883378,\"charisma_exp\":191849.64319070565,\"intelligence_exp\":0,\"hacking_mult\":2.499490224000001,\"strength_mult\":403.7458211949797,\"defense_mult\":329.72149620864525,\"dexterity_mult\":59.923627612024475,\"agility_mult\":72.312896269152,\"charisma_mult\":2.688645960000001,\"hacking_exp_mult\":2.0162834999999997,\"strength_exp_mult\":3.2663792700000003,\"defense_exp_mult\":3.2663792700000003,\"dexterity_exp_mult\":3.7563361604999996,\"agility_exp_mult\":3.2663792700000003,\"charisma_exp_mult\":3.2594230919250005,\"hacking_chance_mult\":787.1905395708619,\"hacking_speed_mult\":537.1995134681736,\"hacking_money_mult\":76922720.5709606,\"hacking_grow_mult\":153.93679428100586,\"company_rep_mult\":15.536583404842508,\"faction_rep_mult\":2.3516761125,\"crime_money_mult\":3.0461022109375007,\"crime_success_mult\":1.6300212500000002,\"work_money_mult\":2.34564,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"NutriGen Implant\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"INFRARET Enhancement\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"DermaForce Particle Barrier\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"Augmented Targeting III\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"Neurotrainer III\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"Bionic Arms\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"The Black Hand\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"PCMatrix\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"HyperSight Corneal Implant\",\"level\":1},{\"name\":\"Graphene BrachiBlades Upgrade\",\"level\":1},{\"name\":\"Synfibril Muscle\",\"level\":1},{\"name\":\"nextSENS Gene Modification\",\"level\":1},{\"name\":\"SmartJaw\",\"level\":1},{\"name\":\"Photosynthetic Cells\",\"level\":1},{\"name\":\"Synthetic Heart\",\"level\":1},{\"name\":\"Neotra\",\"level\":1},{\"name\":\"NEMEAN Subdermal Weave\",\"level\":1},{\"name\":\"PC Direct-Neural Interface\",\"level\":1},{\"name\":\"Graphene Bionic Arms Upgrade\",\"level\":1},{\"name\":\"Graphene Bone Lacings\",\"level\":1},{\"name\":\"Xanipher\",\"level\":1},{\"name\":\"Graphene Bionic Legs Upgrade\",\"level\":1},{\"name\":\"PC Direct-Neural Interface Optimization Submodule\",\"level\":1},{\"name\":\"SPTN-97 Gene Modification\",\"level\":1},{\"name\":\"CordiARC Fusion Reactor\",\"level\":1},{\"name\":\"Graphene Bionic Spine Upgrade\",\"level\":1},{\"name\":\"PC Direct-Neural Interface NeuroNet Injector\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"Heist\",\"currentTask\":3,\"currentTaskLocation\":\"182766132.65625003\",\"currentTaskMaxTime\":600000,\"currentTaskTime\":263200,\"earningsForSleeves\":{\"hack\":19227.780086455776,\"str\":69501.54142932787,\"def\":69501.54142932787,\"dex\":73580.07092667889,\"agi\":69876.04417332786,\"cha\":20534.365479127504,\"money\":0},\"earningsForPlayer\":{\"hack\":19227.780086455776,\"str\":69501.54142932787,\"def\":69501.54142932787,\"dex\":73580.07092667889,\"agi\":69876.04417332786,\"cha\":20534.365479127504,\"money\":1511574125.8195329},\"earningsForTask\":{\"hack\":12702.586049999994,\"str\":20578.189401000003,\"def\":20578.189401000003,\"dex\":23664.917811149997,\"agi\":20578.189401000003,\"cha\":20534.365479127504,\"money\":1279362928.5937502},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":907.3275749999998,\"str\":1469.8706715,\"def\":1469.8706715,\"dex\":1690.3512722249998,\"agi\":1469.8706715,\"cha\":1466.7403913662502,\"money\":182766132.65625003},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":4,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":226,\"strength\":32809,\"defense\":26793,\"dexterity\":4988,\"agility\":5876,\"charisma\":227,\"intelligence\":1,\"hp\":2689,\"max_hp\":2689,\"hacking_exp\":150599.82183544937,\"strength_exp\":145734.20536379996,\"defense_exp\":145734.20536379996,\"dexterity_exp\":167382.83616836995,\"agility_exp\":145734.20536379996,\"charisma_exp\":185982.68162524063,\"intelligence_exp\":0,\"hacking_mult\":2.499490224000001,\"strength_mult\":403.7458211949797,\"defense_mult\":329.72149620864525,\"dexterity_mult\":59.923627612024475,\"agility_mult\":72.312896269152,\"charisma_mult\":2.688645960000001,\"hacking_exp_mult\":2.0162834999999997,\"strength_exp_mult\":3.2663792700000003,\"defense_exp_mult\":3.2663792700000003,\"dexterity_exp_mult\":3.7563361604999996,\"agility_exp_mult\":3.2663792700000003,\"charisma_exp_mult\":3.2594230919250005,\"hacking_chance_mult\":619.5911370097298,\"hacking_speed_mult\":441.955369187261,\"hacking_money_mult\":42265231.08294535,\"hacking_grow_mult\":153.93679428100586,\"company_rep_mult\":15.536583404842508,\"faction_rep_mult\":2.3516761125,\"crime_money_mult\":3.0461022109375007,\"crime_success_mult\":1.6300212500000002,\"work_money_mult\":2.34564,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"NutriGen Implant\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"INFRARET Enhancement\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"DermaForce Particle Barrier\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"Augmented Targeting III\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"Neurotrainer III\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"Bionic Arms\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"The Black Hand\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"Synfibril Muscle\",\"level\":1},{\"name\":\"nextSENS Gene Modification\",\"level\":1},{\"name\":\"PCMatrix\",\"level\":1},{\"name\":\"Graphene BrachiBlades Upgrade\",\"level\":1},{\"name\":\"HyperSight Corneal Implant\",\"level\":1},{\"name\":\"SmartJaw\",\"level\":1},{\"name\":\"Photosynthetic Cells\",\"level\":1},{\"name\":\"Synthetic Heart\",\"level\":1},{\"name\":\"Neotra\",\"level\":1},{\"name\":\"NEMEAN Subdermal Weave\",\"level\":1},{\"name\":\"PC Direct-Neural Interface\",\"level\":1},{\"name\":\"Graphene Bionic Arms Upgrade\",\"level\":1},{\"name\":\"Graphene Bone Lacings\",\"level\":1},{\"name\":\"Xanipher\",\"level\":1},{\"name\":\"Graphene Bionic Legs Upgrade\",\"level\":1},{\"name\":\"PC Direct-Neural Interface Optimization Submodule\",\"level\":1},{\"name\":\"SPTN-97 Gene Modification\",\"level\":1},{\"name\":\"CordiARC Fusion Reactor\",\"level\":1},{\"name\":\"Graphene Bionic Spine Upgrade\",\"level\":1},{\"name\":\"PC Direct-Neural Interface NeuroNet Injector\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"Heist\",\"currentTask\":3,\"currentTaskLocation\":\"182766132.65625003\",\"currentTaskMaxTime\":600000,\"currentTaskTime\":561200,\"earningsForSleeves\":{\"hack\":17459.813300755384,\"str\":64237.09707087864,\"def\":64237.09707087864,\"dex\":66882.86427957864,\"agi\":64237.09707087864,\"cha\":17600.884696395,\"money\":0},\"earningsForPlayer\":{\"hack\":17459.813300755384,\"str\":64237.09707087864,\"def\":64237.09707087864,\"dex\":66882.86427957864,\"agi\":64237.09707087864,\"cha\":17600.884696395,\"money\":1307772795.9375},\"earningsForTask\":{\"hack\":10887.930899999996,\"str\":17638.448058,\"def\":17638.448058,\"dex\":20284.215266699997,\"agi\":17638.448058,\"cha\":17600.884696395,\"money\":1096596795.9375002},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":907.3275749999998,\"str\":1469.8706715,\"def\":1469.8706715,\"dex\":1690.3512722249998,\"agi\":1469.8706715,\"cha\":1466.7403913662502,\"money\":182766132.65625003},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":4,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":226,\"strength\":32652,\"defense\":26665,\"dexterity\":4965,\"agility\":5848,\"charisma\":227,\"intelligence\":1,\"hp\":2676,\"max_hp\":2676,\"hacking_exp\":148785.16668544937,\"strength_exp\":141836.70315179997,\"defense_exp\":141836.70315179997,\"dexterity_exp\":163037.50862457007,\"agility_exp\":141836.70315179997,\"charisma_exp\":183049.20084250811,\"intelligence_exp\":0,\"hacking_mult\":2.499490224000001,\"strength_mult\":403.7458211949797,\"defense_mult\":329.72149620864525,\"dexterity_mult\":59.923627612024475,\"agility_mult\":72.312896269152,\"charisma_mult\":2.688645960000001,\"hacking_exp_mult\":2.0162834999999997,\"strength_exp_mult\":3.2663792700000003,\"defense_exp_mult\":3.2663792700000003,\"dexterity_exp_mult\":3.7563361604999996,\"agility_exp_mult\":3.2663792700000003,\"charisma_exp_mult\":3.2594230919250005,\"hacking_chance_mult\":681.550250710703,\"hacking_speed_mult\":477.97473177602313,\"hacking_money_mult\":55128562.28210268,\"hacking_grow_mult\":269.38938999176025,\"company_rep_mult\":15.536583404842508,\"faction_rep_mult\":2.3516761125,\"crime_money_mult\":3.0461022109375007,\"crime_success_mult\":1.6300212500000002,\"work_money_mult\":2.34564,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"NutriGen Implant\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"INFRARET Enhancement\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"DermaForce Particle Barrier\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"Augmented Targeting III\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"Neurotrainer III\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"Bionic Arms\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"The Black Hand\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"Synfibril Muscle\",\"level\":1},{\"name\":\"nextSENS Gene Modification\",\"level\":1},{\"name\":\"PCMatrix\",\"level\":1},{\"name\":\"Graphene BrachiBlades Upgrade\",\"level\":1},{\"name\":\"HyperSight Corneal Implant\",\"level\":1},{\"name\":\"SmartJaw\",\"level\":1},{\"name\":\"Photosynthetic Cells\",\"level\":1},{\"name\":\"Synthetic Heart\",\"level\":1},{\"name\":\"Neotra\",\"level\":1},{\"name\":\"NEMEAN Subdermal Weave\",\"level\":1},{\"name\":\"PC Direct-Neural Interface\",\"level\":1},{\"name\":\"Graphene Bionic Arms Upgrade\",\"level\":1},{\"name\":\"Graphene Bone Lacings\",\"level\":1},{\"name\":\"Xanipher\",\"level\":1},{\"name\":\"Graphene Bionic Legs Upgrade\",\"level\":1},{\"name\":\"PC Direct-Neural Interface Optimization Submodule\",\"level\":1},{\"name\":\"SPTN-97 Gene Modification\",\"level\":1},{\"name\":\"CordiARC Fusion Reactor\",\"level\":1},{\"name\":\"Graphene Bionic Spine Upgrade\",\"level\":1},{\"name\":\"PC Direct-Neural Interface NeuroNet Injector\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"Heist\",\"currentTask\":3,\"currentTaskLocation\":\"182766132.65625003\",\"currentTaskMaxTime\":600000,\"currentTaskTime\":289200,\"earningsForSleeves\":{\"hack\":17364.435215305628,\"str\":65817.66901387752,\"def\":65817.66901387752,\"dex\":68463.43622257753,\"agi\":65817.66901387752,\"cha\":17600.884696395,\"money\":0},\"earningsForPlayer\":{\"hack\":17364.435215305628,\"str\":65817.66901387752,\"def\":65817.66901387752,\"dex\":68463.43622257753,\"agi\":65817.66901387752,\"cha\":17600.884696395,\"money\":1310877795.9375},\"earningsForTask\":{\"hack\":10887.930899999996,\"str\":17638.448058,\"def\":17638.448058,\"dex\":20284.215266699997,\"agi\":17638.448058,\"cha\":17600.884696395,\"money\":1096596795.9375002},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":907.3275749999998,\"str\":1469.8706715,\"def\":1469.8706715,\"dex\":1690.3512722249998,\"agi\":1469.8706715,\"cha\":1466.7403913662502,\"money\":182766132.65625003},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":4,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":225,\"strength\":32225,\"defense\":26316,\"dexterity\":4902,\"agility\":5771,\"charisma\":225,\"intelligence\":1,\"hp\":2641,\"max_hp\":2641,\"hacking_exp\":143341.20123544938,\"strength_exp\":131753.56309080002,\"defense_exp\":131753.56309080002,\"dexterity_exp\":151510.29755442007,\"agility_exp\":131753.56309080002,\"charisma_exp\":174248.75849431058,\"intelligence_exp\":0,\"hacking_mult\":2.499490224000001,\"strength_mult\":403.7458211949797,\"defense_mult\":329.72149620864525,\"dexterity_mult\":59.923627612024475,\"agility_mult\":72.312896269152,\"charisma_mult\":2.688645960000001,\"hacking_exp_mult\":2.0162834999999997,\"strength_exp_mult\":3.2663792700000003,\"defense_exp_mult\":3.2663792700000003,\"dexterity_exp_mult\":3.7563361604999996,\"agility_exp_mult\":3.2663792700000003,\"charisma_exp_mult\":3.2594230919250005,\"hacking_chance_mult\":180.3698710933692,\"hacking_speed_mult\":144.68512913169337,\"hacking_money_mult\":1309937.5773086438,\"hacking_grow_mult\":50.26507568359375,\"company_rep_mult\":15.536583404842508,\"faction_rep_mult\":2.3516761125,\"crime_money_mult\":3.0461022109375007,\"crime_success_mult\":1.6300212500000002,\"work_money_mult\":2.34564,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"NutriGen Implant\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"INFRARET Enhancement\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"DermaForce Particle Barrier\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"Augmented Targeting III\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"Neurotrainer III\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"Bionic Arms\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"The Black Hand\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"Synfibril Muscle\",\"level\":1},{\"name\":\"nextSENS Gene Modification\",\"level\":1},{\"name\":\"PCMatrix\",\"level\":1},{\"name\":\"Graphene BrachiBlades Upgrade\",\"level\":1},{\"name\":\"HyperSight Corneal Implant\",\"level\":1},{\"name\":\"SmartJaw\",\"level\":1},{\"name\":\"Photosynthetic Cells\",\"level\":1},{\"name\":\"Synthetic Heart\",\"level\":1},{\"name\":\"Neotra\",\"level\":1},{\"name\":\"NEMEAN Subdermal Weave\",\"level\":1},{\"name\":\"PC Direct-Neural Interface\",\"level\":1},{\"name\":\"Graphene Bionic Arms Upgrade\",\"level\":1},{\"name\":\"Graphene Bone Lacings\",\"level\":1},{\"name\":\"Xanipher\",\"level\":1},{\"name\":\"Graphene Bionic Legs Upgrade\",\"level\":1},{\"name\":\"PC Direct-Neural Interface Optimization Submodule\",\"level\":1},{\"name\":\"SPTN-97 Gene Modification\",\"level\":1},{\"name\":\"CordiARC Fusion Reactor\",\"level\":1},{\"name\":\"Graphene Bionic Spine Upgrade\",\"level\":1},{\"name\":\"PC Direct-Neural Interface NeuroNet Injector\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"Heist\",\"currentTask\":3,\"currentTaskLocation\":\"182766132.65625003\",\"currentTaskMaxTime\":600000,\"currentTaskTime\":587200,\"earningsForSleeves\":{\"hack\":15282.331620705434,\"str\":63779.145638430666,\"def\":63779.145638430666,\"dex\":65983.95164568067,\"agi\":63779.145638430666,\"cha\":14667.403913662502,\"money\":0},\"earningsForPlayer\":{\"hack\":15282.331620705434,\"str\":63779.145638430666,\"def\":63779.145638430666,\"dex\":65983.95164568067,\"agi\":63779.145638430666,\"cha\":14667.403913662502,\"money\":1131374163.28125},\"earningsForTask\":{\"hack\":9073.275749999997,\"str\":14698.706715,\"def\":14698.706715,\"dex\":16903.512722249998,\"agi\":14698.706715,\"cha\":14667.403913662502,\"money\":913830663.2812501},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":907.3275749999998,\"str\":1469.8706715,\"def\":1469.8706715,\"dex\":1690.3512722249998,\"agi\":1469.8706715,\"cha\":1466.7403913662502,\"money\":182766132.65625003},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":4,\"sync\":100}}],\"sleevesFromCovenant\":5,\"bitNodeN\":9,\"entropy\":0,\"lastUpdate\":1652653494413,\"lastSave\":1652653472751,\"totalPlaytime\":11323948400,\"playtimeSinceLastAug\":5988600,\"playtimeSinceLastBitnode\":132066600,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":629951.0257236871,\"casino\":10060000000,\"class\":0,\"codingcontract\":375000000,\"corporation\":0,\"crime\":0,\"gang\":1857023918366.968,\"hacking\":28507786,\"hacknet\":1765000000,\"hacknet_expenses\":-249001900.09743777,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":-654234869389.063,\"stock\":0,\"total\":1214481784814.8303,\"work\":0,\"servers\":0,\"other\":-287400000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":323651293.6472544,\"casino\":912044635652,\"class\":0,\"codingcontract\":5437500000,\"corporation\":-150000000000,\"crime\":274396231.07540816,\"gang\":2303607333550.776,\"hacking\":450574500.23526585,\"hacknet\":43771000000,\"hacknet_expenses\":-79349167280.1138,\"hospitalization\":-13600000,\"infiltration\":0,\"sleeves\":-652601364889.0631,\"stock\":0,\"total\":1514573380512.7378,\"work\":0,\"servers\":-23216018709.024063,\"other\":-23132400000,\"augmentations\":-823023159836.8112}},\"scriptProdSinceLastAug\":28507786,\"exploits\":[\"UndocumentedFunctionCall\",\"Bypass\",\"Unclickable\",\"RealityAlteration\",\"TimeCompression\",\"N00dles\",\"PrototypeTampering\",\"EditSaveFile\",\"YoureNotMeantToAccessThis\",\"INeedARainbow\"],\"achievements\":[{\"ID\":\"CYBERSEC\",\"unlockedOn\":1641831349068},{\"ID\":\"NITESEC\",\"unlockedOn\":1641831349080},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1641831349084},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1641831349088},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1641831349091},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1641831349095},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1641831349099},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1641831349103},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1641831349108},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1641831349113},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1641831349117},{\"ID\":\"NS2\",\"unlockedOn\":1641831349120},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1641831349122},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1641831349125},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1641831349128},{\"ID\":\"TOR\",\"unlockedOn\":1641831349131},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1641911770908},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1641911770911},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1641911890917},{\"ID\":\"DONATION\",\"unlockedOn\":1641919651447},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1641924992259},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1642040620386},{\"ID\":\"TRAVEL\",\"unlockedOn\":1642040800461},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1642088780181},{\"ID\":\"4S\",\"unlockedOn\":1642220579557},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1642295956244},{\"ID\":\"SF1.1\",\"unlockedOn\":1642393317233},{\"ID\":\"UNDOCUMENTEDFUNCTIONCALL\",\"unlockedOn\":1643121077987},{\"ID\":\"BYPASS\",\"unlockedOn\":1643121317987},{\"ID\":\"UNCLICKABLE\",\"unlockedOn\":1643122337977},{\"ID\":\"REALITYALTERATION\",\"unlockedOn\":1643122481910},{\"ID\":\"TIMECOMPRESSION\",\"unlockedOn\":1643122661782},{\"ID\":\"N00DLES\",\"unlockedOn\":1643122721781},{\"ID\":\"PROTOTYPETAMPERING\",\"unlockedOn\":1643123081783},{\"ID\":\"EDITSAVEFILE\",\"unlockedOn\":1643123929773},{\"ID\":\"DEVMENU\",\"unlockedOn\":1643123929787},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1643640264308},{\"ID\":\"SF5.1\",\"unlockedOn\":1643839768581},{\"ID\":\"GANG\",\"unlockedOn\":1644242713578},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1644317906781},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1644319506423},{\"ID\":\"SF2.1\",\"unlockedOn\":1644381062608},{\"ID\":\"FAST_BN\",\"unlockedOn\":1644550423832},{\"ID\":\"WORKOUT\",\"unlockedOn\":1644551683850},{\"ID\":\"GANG_TERRITORY\",\"unlockedOn\":1644764420851},{\"ID\":\"CORPORATION\",\"unlockedOn\":1645195464613},{\"ID\":\"CORPORATION_BRIBE\",\"unlockedOn\":1645593375384},{\"ID\":\"SF3.1\",\"unlockedOn\":1645739905350},{\"ID\":\"FROZE\",\"unlockedOn\":1646454615199},{\"ID\":\"SF4.1\",\"unlockedOn\":1649078749377},{\"ID\":\"RAINBOW\",\"unlockedOn\":1649863203492},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1649963517455},{\"ID\":\"CORPORATION_REAL_ESTATE\",\"unlockedOn\":1650074051205},{\"ID\":\"CORPORATION_PROD_1000\",\"unlockedOn\":1650120923422},{\"ID\":\"MONEY_1Q\",\"unlockedOn\":1650133518302},{\"ID\":\"MAX_RAM\",\"unlockedOn\":1650203744383},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1650215744382},{\"ID\":\"SF10.1\",\"unlockedOn\":1650238596854},{\"ID\":\"QUEUE_40\",\"unlockedOn\":1650363811385},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1650567008902},{\"ID\":\"SLEEVE_8\",\"unlockedOn\":1650587229287},{\"ID\":\"FIRST_HACKNET_SERVER\",\"unlockedOn\":1650587469464},{\"ID\":\"MAX_CACHE\",\"unlockedOn\":1650624669287},{\"ID\":\"ALL_HACKNET_SERVER\",\"unlockedOn\":1650880670062},{\"ID\":\"HACKNET_SERVER_1B\",\"unlockedOn\":1650907131627},{\"ID\":\"SF9.1\",\"unlockedOn\":1650936509084},{\"ID\":\"BLADEBURNER_DIVISION\",\"unlockedOn\":1650976064697},{\"ID\":\"BLADEBURNER_OVERCLOCK\",\"unlockedOn\":1651104026364},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1651136761161},{\"ID\":\"SF6.1\",\"unlockedOn\":1651153482894},{\"ID\":\"SF7.1\",\"unlockedOn\":1651367291296},{\"ID\":\"SF11.1\",\"unlockedOn\":1651671520642},{\"ID\":\"INSTALL_100\",\"unlockedOn\":1651797499985}],\"terminalCommandHistory\":[\"run farm_int.js\",\"run farm_int.js --money-threshold 10000000000\",\"run bootstrap32GB.js\",\"nano casinoBreaker.js\",\"run test.js\",\"nano aug_buyer.js\",\"run aug_buyer.js\",\"nano gangum.js\",\"nano player.js\",\"nano init.js\",\"run player.js\",\"run test.js\",\"run init.js\",\"nano workForFaction.js\",\"nano autosolver.js\",\"run workForFaction.js\",\"run workForFaction.js --crime-focus\",\"nano workForFaction.js\",\"run workForFaction.js --crime-focus\",\"run init.js\",\"run max_hack.js\",\"nano utils.js\",\"nano au\",\"nano aug\",\"nano augments.js\",\"run farm_int.js --money-threshold 1000000000\",\"run bootstrap32GB.js\",\"nano sleeves.js\",\"nano aug_buyer.js\",\"run farm_int.js --money-threshold 1000000000\",\"nano aug_buyer.js\",\"run bootstrap32GB.js\",\"run init.js\",\"nano bootstrap32GB.js\",\"nano player.js\",\"nano workForFaction.js\",\"nano init.js\",\"nano hacknet.js\",\"nano aug_buyer.js\",\"nano run init.js\",\"run init.js\",\"nano aug_buyer.js\",\"nano player.js\",\"nano workForFaction.js\",\"run player.js `\",\"nano spend-hacknet-hash.js\",\"run spend-hacknet-hash.js --no-capacity-upgrades --spend-on Exchange_for_Bladeburner_Rank\",\"run spend-hacknet-hash.js --no-capacity-upgrades --spend-on Exchange_for_Bladeburner_SP\",\"nano in\",\"nano init.js\"],\"identifier\":\"1137a2b24916d3\",\"factionWorkType\":\"Faction Security Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"70.4.9.8\",\"isConnectedTo\":true,\"maxRam\":2048,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"Formulas.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"fl1ght.exe\"],\"ramUsed\":1842.1999999999998,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"spend-hacknet-hash.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5911.409999996815,\"pid\":5,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/60b4ce94-68a9-4fd7-8e98-da51bc770c88\",\"moduleSequenceNumber\":85026},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/7adad5ce-0593-43a9-af3e-1ff5b4a904bb\",\"moduleSequenceNumber\":85009},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/69ed73f8-e451-4256-a0f8-9db20ef5e871\",\"moduleSequenceNumber\":85010},{\"filename\":\"spend-hacknet-hash.js\",\"url\":\"blob:https://danielyxie.github.io/e642fbb1-ace9-487e-971a-5ddfd148e5b7\",\"moduleSequenceNumber\":85179}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--no-capacity-upgrades\",\"--spend-on\",\"Exchange_for_Bladeburner_SP\"],\"dataMap\":{},\"filename\":\"spend-hacknet-hash.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5911.409999996815,\"pid\":6,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/60b4ce94-68a9-4fd7-8e98-da51bc770c88\",\"moduleSequenceNumber\":85026},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/7adad5ce-0593-43a9-af3e-1ff5b4a904bb\",\"moduleSequenceNumber\":85009},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/69ed73f8-e451-4256-a0f8-9db20ef5e871\",\"moduleSequenceNumber\":85010},{\"filename\":\"spend-hacknet-hash.js\",\"url\":\"blob:https://danielyxie.github.io/e642fbb1-ace9-487e-971a-5ddfd148e5b7\",\"moduleSequenceNumber\":85179}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--no-capacity-upgrades\",\"--spend-on\",\"Exchange_for_Bladeburner_Rank\"],\"dataMap\":{},\"filename\":\"spend-hacknet-hash.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5911.409999996815,\"pid\":7,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/60b4ce94-68a9-4fd7-8e98-da51bc770c88\",\"moduleSequenceNumber\":85026},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/7adad5ce-0593-43a9-af3e-1ff5b4a904bb\",\"moduleSequenceNumber\":85009},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/69ed73f8-e451-4256-a0f8-9db20ef5e871\",\"moduleSequenceNumber\":85010},{\"filename\":\"spend-hacknet-hash.js\",\"url\":\"blob:https://danielyxie.github.io/e642fbb1-ace9-487e-971a-5ddfd148e5b7\",\"moduleSequenceNumber\":85179}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"player.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5911.409999996815,\"pid\":8,\"ramUsage\":3.7,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"player.js\",\"url\":\"blob:https://danielyxie.github.io/0cb22ee6-1d40-403b-b924-94e7f8269a41\",\"moduleSequenceNumber\":85180}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"sleeves.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5911.409999996815,\"pid\":9,\"ramUsage\":47.7,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"augments.js\",\"url\":\"blob:https://danielyxie.github.io/7fb1762c-d3c8-41a7-a6e7-a014a355b117\",\"moduleSequenceNumber\":85038},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/3ad78e69-1dbf-48dd-90a5-ea823f784841\",\"moduleSequenceNumber\":85026},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/edfab91c-7b38-494c-9dec-d63b6c0e26f7\",\"moduleSequenceNumber\":85026},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/70c03d54-01a7-4979-a0a9-02df5f5ee001\",\"moduleSequenceNumber\":85009},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/1837b198-ff06-4718-81b3-b50ea040fd56\",\"moduleSequenceNumber\":85010},{\"filename\":\"sleeves.js\",\"url\":\"blob:https://danielyxie.github.io/7c913c35-e05c-4688-8896-4a83ac8ecca6\",\"moduleSequenceNumber\":85181}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"bladeburner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5911.409999996815,\"pid\":10,\"ramUsage\":68.1,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"augments.js\",\"url\":\"blob:https://danielyxie.github.io/71166e6b-5084-4c49-aa75-c3b12910a0fa\",\"moduleSequenceNumber\":85038},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/89384b99-e360-4b13-9d73-00ff49ba31f8\",\"moduleSequenceNumber\":85026},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/9f2d9e41-e4cc-45db-b85b-8d9a12dbddb1\",\"moduleSequenceNumber\":85009},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/f168ad7a-54bb-4992-81b6-b004b0af83aa\",\"moduleSequenceNumber\":85010},{\"filename\":\"bladeburner.js\",\"url\":\"blob:https://danielyxie.github.io/41dedaba-9600-43d1-ba6e-7deb004d6eab\",\"moduleSequenceNumber\":85182}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"megacorp.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5911.409999996815,\"pid\":11,\"ramUsage\":1025.5,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/f960d151-0913-4af2-b509-89c42a5ff977\",\"moduleSequenceNumber\":85026},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/e6469d08-684e-4ded-9865-a594209c3ec9\",\"moduleSequenceNumber\":85009},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/976444c6-bf92-4f4b-a75f-e21f6c2bac40\",\"moduleSequenceNumber\":85010},{\"filename\":\"megacorp.js\",\"url\":\"blob:https://danielyxie.github.io/96ee3afa-972e-4238-88f2-0554e5e7ee97\",\"moduleSequenceNumber\":85183}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--crime-focus\"],\"dataMap\":{},\"filename\":\"workForFaction.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5911.409999996815,\"pid\":12,\"ramUsage\":41.8,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"augments.js\",\"url\":\"blob:https://danielyxie.github.io/1d70f9d9-45b5-4ffb-b969-dc59345e8093\",\"moduleSequenceNumber\":85038},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/68e94e11-f21c-4279-a5f5-7435d4f1d77b\",\"moduleSequenceNumber\":85026},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/2eacd125-0c2b-4ee0-87c7-f5035144b5c9\",\"moduleSequenceNumber\":85009},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/c2f4ceaf-ff88-489c-9dae-76c46bdab73d\",\"moduleSequenceNumber\":85010},{\"filename\":\"workForFaction.js\",\"url\":\"blob:https://danielyxie.github.io/ac1acee1-715f-4af6-a03c-065335034294\",\"moduleSequenceNumber\":85184}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"gangum.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5911.409999996815,\"pid\":13,\"ramUsage\":38.6,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/5f3212db-b648-47f9-9c6b-f66668055fcd\",\"moduleSequenceNumber\":85026},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/c16e8856-4543-449f-91a1-c178bcd6aaf8\",\"moduleSequenceNumber\":85009},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/40f8c83a-0364-401b-bf90-234056ccdf26\",\"moduleSequenceNumber\":85010},{\"filename\":\"gangum.js\",\"url\":\"blob:https://danielyxie.github.io/73d1d515-93b0-405e-a139-09cdc1474686\",\"moduleSequenceNumber\":85185}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"mcp_hgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":346074.0269340727,\"onlineMoneyMade\":28507786,\"onlineRunningTime\":5911.409999996815,\"pid\":16,\"ramUsage\":12.5,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"growthFunctions.js\",\"url\":\"blob:https://danielyxie.github.io/2a7c6bd3-af29-40a8-bfb9-61a93e272219\",\"moduleSequenceNumber\":85034},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/19b2b978-43fa-464d-bdda-997d58ce179b\",\"moduleSequenceNumber\":85026},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/6c145cf0-5526-484f-9579-0d46334701ea\",\"moduleSequenceNumber\":85009},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/c5dcf052-50b9-412e-b1b9-88e70184414f\",\"moduleSequenceNumber\":85010},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/55ce384a-2b2d-4da4-8275-69c55a4ec302\",\"moduleSequenceNumber\":85009},{\"filename\":\"mcp_hgw.js\",\"url\":\"blob:https://danielyxie.github.io/95d8826e-2b36-4e36-a89c-ea6d2538a66a\",\"moduleSequenceNumber\":85188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"custom-stats.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5911.409999996815,\"pid\":17,\"ramUsage\":3.25,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/f25f8080-52de-4935-95de-c71080078063\",\"moduleSequenceNumber\":85026},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/341b2762-b2f4-44a0-8d14-84704f0b6830\",\"moduleSequenceNumber\":85009},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/20f91f5c-d8b7-448d-8c0a-51071448f052\",\"moduleSequenceNumber\":85010},{\"filename\":\"custom-stats.js\",\"url\":\"blob:https://danielyxie.github.io/b795c28d-7216-4eda-af1d-ec3a4c1a3bfb\",\"moduleSequenceNumber\":85189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.27045633713781614],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.610000000000255,\"pid\":4511,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":235,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/98544238-a7aa-4b0a-b630-b0945e93f40c\",\"moduleSequenceNumber\":148369}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.5937928950304041],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.610000000000255,\"pid\":4512,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/04fa3b46-7f29-4f43-a3e7-9cbadd2124cb\",\"moduleSequenceNumber\":148370}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",0.20919700513398354],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.609999999999935,\"pid\":4563,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":59,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/98544238-a7aa-4b0a-b630-b0945e93f40c\",\"moduleSequenceNumber\":148369}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { boxTailSingleton, copyHackingFiles, tryGetBitNodeMultipliers } from \\\"utils.js\\\"\\nimport { getOwnedAugmentationsStatic } from 'augments.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getServerMoneyAvailable');\\n    ns.disableLog('fileExists');\\n    ns.disableLog('hacknet.upgradeLevel');\\n    ns.disableLog('hacknet.upgradeRam');\\n    ns.disableLog('hacknet.upgradeCore');\\n    ns.disableLog('hacknetNodes.coreUpgradeCost');\\n    ns.disableLog('hacknetNodes.ramUpgradeCost');\\n    ns.disableLog('hacknetNodes.levelUpgradeCost');\\n    ns.disableLog('getServer');\\n    ns.disableLog('getPurchasedServers');\\n    ns.disableLog('getPurchasedServerLimit');\\n    ns.disableLog('getPurchasedServerCost');\\n    //ns.tail();\\n    const multis = tryGetBitNodeMultipliers(ns);\\n    boxTailSingleton(ns, 'purchase pc', '🖳', '100px');\\n    ns.clearLog();\\n    let player = ns.getPlayer();\\n    const bitNodeN = player.bitNodeN;\\n    function purchasePortHacks(player) {\\n        if (!player.tor) return;\\n        // BruteSSH.exe - $500k - Opens up SSH Ports.\\n        // FTPCrack.exe - $1.500m - Opens up FTP Ports.\\n        // relaySMTP.exe - $5.000m - Opens up SMTP Ports.\\n        // HTTPWorm.exe - $30.000m - Opens up HTTP Ports.\\n        // SQLInject.exe - $250.000m - Opens up SQL Ports.\\n        if (!ns.fileExists(\\\"BruteSSH.exe\\\") && player.money > 500000) {\\n            if (ns.purchaseProgram(\\\"BruteSSH.exe\\\"))\\n                ns.print('purchased BruteSSH');\\n        }\\n        if (!ns.fileExists(\\\"FTPCrack.exe\\\") && player.money > 1500000) {\\n            if (ns.purchaseProgram(\\\"FTPCrack.exe\\\"))\\n                ns.print('purchased FTPCrack');\\n        }\\n        if (!ns.fileExists(\\\"relaySMTP.exe\\\") && player.money > 5000000) {\\n            if (ns.purchaseProgram(\\\"relaySMTP.exe\\\"))\\n                ns.print('purchased relaySMTP');\\n        }\\n        if (!ns.fileExists(\\\"HTTPWorm.exe\\\") && player.money > 30000000) {\\n            if (ns.purchaseProgram(\\\"HTTPWorm.exe\\\"))\\n                ns.print('purchased HTTPWorm');\\n        }\\n        if (!ns.fileExists(\\\"SQLInject.exe\\\") && player.money > 250000000) {\\n            if (ns.purchaseProgram(\\\"SQLInject.exe\\\"))\\n                ns.print('purchased SQLInject');\\n        }\\n    }\\n    function purchaseTor(player) {\\n        if (player.money > 200000 && !player.tor) {\\n            if (ns.purchaseTor()) {\\n                ns.print('purchased TOR');\\n                player.tor = true;\\n            }\\n        }\\n        purchasePortHacks(player);\\n    }\\n    purchaseTor(player);\\n    if ([2, 6, 7, 8, 11].includes(bitNodeN) && player.hacking < 200 || (ns.heart.break() > -54000)) {\\n        ns.print(`Not buying servers in bitnode ${bitNodeN}`);\\n    } else {\\n        // PurchasedServerMaxRam\\n        const ram = Math.min(ns.getServer('home').maxRam / 4, 1048576 * multis.PurchasedServerMaxRam);\\n        let i = ns.getPurchasedServers().length;\\n        while (i < ns.getPurchasedServerLimit()) {\\n            player = ns.getPlayer();\\n            purchaseTor(player);\\n            // Check if we have enough money to purchase a server\\n            const cost = ns.getPurchasedServerCost(ram);\\n            // ns.print(ns.nFormat(cost, '0.0a'));\\n            if (player.money > cost) {\\n                const name = \\\"pserv-\\\" + i;\\n                ns.purchaseServer(name, ram);\\n                await copyHackingFiles(ns, { hostname: name, hasAdminRights: true });\\n                ns.print(`purchased server ${name} ${ns.nFormat(cost, '$0.0a')} with ${ns.nFormat(ram, '0a')} ram`)\\n                ++i;\\n            }\\n            await ns.sleep(3000);\\n        }\\n    }\\n}\",\"filename\":\"purchase-servers.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"augments.js\",\"url\":\"blob:https://danielyxie.github.io/6c52db23-aaf1-47e6-ba7d-8ee201a8b808\",\"moduleSequenceNumber\":148245},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/37c25852-44a0-4103-9a69-46c37c00f196\",\"moduleSequenceNumber\":148233},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/eaa40328-002f-4839-9aeb-07a7d13e6756\",\"moduleSequenceNumber\":148216},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/82c80530-f580-49e0-bb75-3f298f4e0256\",\"moduleSequenceNumber\":148217},{\"filename\":\"purchase-servers.js\",\"url\":\"blob:https://danielyxie.github.io/ab817a66-a6a6-4459-9ed9-dfdc17c2c6d3\",\"moduleSequenceNumber\":148352}],\"dependents\":[],\"ramUsage\":14.1,\"server\":\"home\",\"moduleSequenceNumber\":148352,\"_hash\":\"b1af83699f444efce3e11ba6c7a23f6e52f1ba000b1153b271ee1e4fbe1dca12\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst args = ns.flags([[\\\"help\\\", false]]);\\n\\tconst server = ns.args[0];\\n\\tif (args.help || !server) {\\n\\t\\tns.tprint(\\\"This script does a more detailed analysis of a server.\\\");\\n\\t\\tns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\n\\t\\tns.tprint(\\\"Example:\\\");\\n\\t\\tns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n\\t\\treturn;\\n\\t}\\n\\tconst s = ns.getServer(server);\\n\\tconst player = ns.getPlayer();\\n\\tconst maxRam = ns.getServerMaxRam(server);\\n\\tconst usedRam = ns.getServerUsedRam(server);\\n\\tconst money = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst minSec = ns.getServerMinSecurityLevel(server);\\n\\tconst sec = ns.getServerSecurityLevel(server);\\n\\tns.tprint(`\\n${server}:\\n    RAM        : ${usedRam} / ${maxRam} (${usedRam / maxRam * 100}%)\\n    $          : ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${(money / maxMoney * 100).toFixed(2)}%)\\n    security   : ${minSec.toFixed(2)} / ${sec.toFixed(2)}\\n    growth     : ${ns.getServerGrowth(server)}\\n    hack time  : ${ns.tFormat(ns.getHackTime(server))}\\n    hack time  : ${ns.tFormat(ns.formulas.hacking.hackTime(s, player))}\\n    grow time  : ${ns.tFormat(ns.getGrowTime(server))}\\n    grow time  : ${ns.tFormat(ns.formulas.hacking.growTime(s, player))}\\n    weaken time: ${ns.tFormat(ns.getWeakenTime(server))}\\n    weaken time: ${ns.tFormat(ns.formulas.hacking.weakenTime(s, player))}\\n    grow x2    : ${(ns.growthAnalyze(server, 2)).toFixed(2)} threads\\n    grow x3    : ${(ns.growthAnalyze(server, 3)).toFixed(2)} threads\\n    grow x4    : ${(ns.growthAnalyze(server, 4)).toFixed(2)} threads\\n    hack 10%   : ${(.10 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 25%   : ${(.25 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 50%   : ${(.50 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hackChance : ${(ns.hackAnalyzeChance(server) * 100).toFixed(2)}%\\n`);\\n}\\n\\nexport function autocomplete(data, args) {\\n\\treturn data.servers;\\n}\",\"filename\":\"analyze_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"analyze_server.js\",\"url\":\"blob:https://danielyxie.github.io/ff0c4155-92eb-4804-a5b3-8169b86c3190\",\"moduleSequenceNumber\":56295}],\"dependents\":[],\"ramUsage\":7.85,\"server\":\"home\",\"moduleSequenceNumber\":148214,\"_hash\":\"91dcb01282737a1ba790ffe2b0a91ff70f2888e7c730f4a1a722ea4efa4c8075\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const flags = ns.flags([\\n        ['refreshrate', 200],\\n        ['help', false],\\n    ])\\n    if (flags.help) {\\n        ns.tprint(\\\"This script helps visualize the money and security of a server.\\\");\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\n        return;\\n    }\\n    ns.tail();\\n    ns.disableLog('ALL');\\n    const servers = flags._[0] ? [flags._[0]] : [];\\n    // ns.tprint(JSON.stringify(servers));\\n    while (true) {\\n        ns.clearLog();\\n        for (var i = 0; i < servers.length; i++) {\\n            const server = servers[i];\\n            const s = ns.getServer(server);\\n            const player = ns.getPlayer();\\n            let maxMoney = ns.getServerMaxMoney(server);\\n            const minSec = ns.getServerMinSecurityLevel(server);\\n            let money = ns.getServerMoneyAvailable(server);\\n            const percentOfMaxMoney = money / (maxMoney || 1);\\n            const sec = ns.getServerSecurityLevel(server);\\n            const currentSecurity = s.hackDifficulty - s.minDifficulty;\\n            const owk = ns.weakenAnalyze(1, 1);\\n            const hackT = ns.formulas.hacking.hackTime(s, player);\\n            const growT = ns.formulas.hacking.growTime(s, player);\\n            const weakT = ns.formulas.hacking.weakenTime(s, player);\\n            const hackChance = ns.formulas.hacking.hackChance(s, player);\\n            s.hackDifficulty = s.minDifficulty;\\n            const growPercent = ns.formulas.hacking.growPercent(s, 1, player, 1);\\n            const hackPercent = ns.formulas.hacking.hackPercent(s, player);\\n            const hackThreads = Math.floor(.5 / hackPercent);\\n            ns.print(`\\n${server}:\\n    $          : ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${(percentOfMaxMoney * 100).toFixed(2)}%)\\n    security   : ${minSec.toFixed(2)} / ${sec.toFixed(2)} +${(currentSecurity).toFixed(2)}\\n    growth     : ${ns.getServerGrowth(server)} (${(growPercent * 100).toFixed(2)}%)\\n    hack time  : ${ns.tFormat(hackT)} (t=${hackThreads}) (${(hackPercent * 100).toFixed(2)}%)\\n    grow time  : ${ns.tFormat(growT)} (t=${maxMoney === 0 ? 'NaN' : Math.ceil(ns.growthAnalyze(server, growthFactor))})(${(growthFactor * 100).toFixed(0)}%) \\n    weaken time: ${ns.tFormat(weakT)} (t=${Math.max(Math.ceil(currentSecurity / owk), 1)})\\n    hackChance : ${(hackChance * 100).toFixed(2)}%\\n`);\\n        }\\n        await ns.sleep(flags.refreshrate);\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return data.servers;\\n}\",\"filename\":\"monitor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"config.js\",\"url\":\"blob:https://danielyxie.github.io/bd3a0ada-a58d-4e27-8a18-869f7225b1cb\",\"moduleSequenceNumber\":189939},{\"filename\":\"monitor.js\",\"url\":\"blob:https://danielyxie.github.io/55872c20-974b-4910-837d-4bacd970cbf9\",\"moduleSequenceNumber\":190125}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":148215,\"_hash\":\"8397cd7b16d2fd5914391c970d442000b728a85d540b028212423f7d73ad8475\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function scan(ns, parent, server, list) {\\n    const children = ns.scan(server);\\n    for (let child of children) {\\n        if (parent == child) {\\n            continue;\\n        }\\n        if (child.indexOf('hacknet-node') < 0)\\n            list.push(child);\\n        scan(ns, server, child, list);\\n    }\\n}\\nexport function list_servers(ns) {\\n    const list = [];\\n    scan(ns, '', 'home', list);\\n    return list;\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.tprint(list_servers(ns));\\n}\\n\\nexport function autocomplete(data, args) {\\n    return data.servers;\\n}\",\"filename\":\"opened_servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/c1552d57-574a-4f5b-8b0a-ab6ca813e240\",\"moduleSequenceNumber\":22477}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":148216,\"_hash\":\"06ce4d2601ca3986016c5ec63d4754fff87fc878ed41b258d88ee6ba15694c79\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { list_servers } from 'opened_servers.js';\\nimport { createSidebarItem, sidebar } from \\\"/box/box.js\\\"\\n\\nexport const sleevesPortNumber = 15;\\n\\nexport const findBox = (title) => {\\n\\tlet res = [];\\n\\tsidebar.querySelectorAll('div.sbitem').forEach(sbitem => res.push({ sbitem, title: sbitem.querySelector('div.head > span').innerText }));\\n\\tlet box = res.find(o => o.title === title);\\n\\treturn box ? box.sbitem : box;\\n}\\n\\nexport const boxTailSingleton = (ns, title, icon, height, pinned = \\\"<div/>\\\") => {\\n\\tlet box = findBox(title);\\n\\tif (!box) {\\n\\t\\tbox = createSidebarItem(title, pinned, icon);\\n\\t}\\n\\tlet ci = box.contextItems['kill'];\\n\\tif (!ci) {\\n\\t\\tbox.addContextItem('kill', () => ns.kill());\\n\\t}\\n\\t// update the function with this current ns instance;\\n\\tbox.contextItems['kill'].fn = () => ns.kill();\\n\\n\\tif (height) box.style.height = height;\\n\\n\\t// ns.atExit(function () {\\n\\t// \\tbox.remove();\\n\\t// });\\n\\n\\tconst _clearLog = ns.clearLog;\\n\\tns.clearLog = () => {\\n\\t\\t_clearLog();\\n\\t\\tbox.logDiv = box.body.querySelector('div.log');\\n\\t\\tif (box.logDiv) box.logDiv.replaceChildren([]);\\n\\t}\\n\\tconst logEntryLimit = 500;\\n\\tconst _print = ns.print;\\n\\tns.print = (m) => {\\n\\t\\tbox.log(`<span>${m}</span>`);\\n\\t\\t_print(m);\\n\\t\\tbox.logDiv = box.body.querySelector('div.log');\\n\\t\\twhile (box.logDiv.children.length > logEntryLimit) box.logDiv.children[0].remove();\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nexport async function runHackScript(ns, script, host, threads, target) {\\n\\tif (!ns.fileExists(script, host)) {\\n\\t\\tawait ns.scp(script, host);\\n\\t}\\n\\treturn Promise.resolve(ns.exec(script, host, threads, target, Math.random()));\\n}\\n\\n/** @param {NS} ns **/\\nexport function getHosts(ns, scriptRam) {\\n\\tconst openedServers = list_servers(ns).filter(s => ns.hasRootAccess(s) && ns.getServerMaxRam(s) > 1);\\n\\tconst s = ns.getServer('home');\\n\\t// reserve some ram for other scripts\\n\\tif (s.maxRam >= 64) {\\n\\t\\ts.maxRam = s.maxRam - 32;\\n\\t} else if (host === 'home' && s.maxRam === 32) {\\n\\t\\ts.maxRam = s.maxRam - 16;\\n\\t}\\n\\tconst hostServers = [{\\n\\t\\tserver: s,\\n\\t\\tcpuCores: s.cpuCores,\\n\\t\\tthreadsAvailable: Math.max(Math.floor((s.maxRam - s.ramUsed) / scriptRam), 0)\\n\\t}];\\n\\tfor (const host of openedServers) {\\n\\t\\tconst s = ns.getServer(host);\\n\\t\\tconst threadsAvailable = Math.max(Math.floor((s.maxRam - s.ramUsed) / scriptRam), 0);\\n\\t\\thostServers.push({\\n\\t\\t\\tserver: s,\\n\\t\\t\\tcpuCores: s.cpuCores,\\n\\t\\t\\tthreadsAvailable\\n\\t\\t});\\n\\t}\\n\\treturn hostServers;\\n}\\n/** @param {NS} ns **/\\nexport function ramUsage(ns) {\\n\\tconst serversWithRam = ['home'].concat(list_servers(ns).filter(s => ns.hasRootAccess(s) && ns.getServerMaxRam(s) > 1));\\n\\treturn serversWithRam.map(o => ns.getServerUsedRam(o) / ns.getServerMaxRam(o)).reduce((a, b) => a + b, 0) / serversWithRam.length;\\n}\\n\\nconst weaken_script = \\\"weaken.js\\\";\\nconst grow_script = \\\"grow.js\\\";\\nconst hack_script = \\\"hack.js\\\";\\n/** @param {NS} ns **/\\nexport async function copyHackingFiles(ns, server) {\\n\\tif (server.hasAdminRights) {\\n\\t\\tif (!ns.fileExists(hack_script, server.hostname)) {\\n\\t\\t\\tawait ns.scp(hack_script, server.hostname);\\n\\t\\t}\\n\\t\\tif (!ns.fileExists(grow_script, server.hostname)) {\\n\\t\\t\\tawait ns.scp(grow_script, server.hostname);\\n\\t\\t}\\n\\t\\tif (!ns.fileExists(weaken_script, server.hostname)) {\\n\\t\\t\\tawait ns.scp(weaken_script, server.hostname);\\n\\t\\t}\\n\\t}\\n}\\nexport function tryGetBitNodeMultipliers(ns) {\\n\\treturn JSON.parse(ns.read(`/tmp/getBitNodeMultipliers.txt`));\\n}\\nexport function inGangStatic(ns) {\\n\\treturn ns.read(`/tmp/ingang.txt`);\\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.45,\"server\":\"home\",\"moduleSequenceNumber\":148217,\"_hash\":\"0894d46a0b308b241154ca127120e84f76b3a7b4399137accac07bf645071683\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function recursiveScan(ns, parent, server, target, route) {\\n\\tconst children = ns.scan(server);\\n\\tfor (let child of children) {\\n\\t\\tif (parent == child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child == target) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(server);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\tif (recursiveScan(ns, server, child, target, route)) {\\n\\t\\t\\troute.unshift(server);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst args = ns.flags([[\\\"help\\\", false]]);\\n\\tlet route = [];\\n\\tlet server = args._[0];\\n\\tif (!server || args.help) {\\n\\t\\tns.tprint(\\\"This script helps you find a server on the network and shows you the path to get to it.\\\");\\n\\t\\tns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\n\\t\\tns.tprint(\\\"Example:\\\");\\n\\t\\tns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n\\t\\treturn;\\n\\t}\\n\\n\\tlet connectString = '';\\n\\trecursiveScan(ns, '', 'home', server, route);\\n\\tfor (const i in route) {\\n\\t\\tawait ns.sleep(0);\\n\\t\\tconst extra = i > 0 ? \\\"└ \\\" : \\\"\\\";\\n\\t\\tns.tprint(`${\\\" \\\".repeat(i)}${extra}${route[i]}`);\\n\\t}\\n\\troute.shift();\\n\\tns.tprint(`connect ${route.join(`; connect `)}`);\\n}\\n\\nexport function autocomplete(data, args) {\\n\\treturn data.servers;\\n}\",\"filename\":\"find_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"find_server.js\",\"url\":\"blob:https://danielyxie.github.io/aa996dab-2b75-4ac7-82c3-a10106e54f89\",\"moduleSequenceNumber\":634665}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":148218,\"_hash\":\"3b9f505a588b13c309d36d04796340a4ebaa1ba23ac8bb2cf738a08417e8143c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/56657993-9643-438f-9377-9d0b549c17b6\",\"moduleSequenceNumber\":148368}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":148368,\"_hash\":\"7c3005da5d66c68df85df0df50d2b0b0b00778857a07d88670bbf183a0a4ebec\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/04fa3b46-7f29-4f43-a3e7-9cbadd2124cb\",\"moduleSequenceNumber\":148370}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":148370,\"_hash\":\"d23919e9f2448a7ca545faeb9799d8136a808b1dd9c8d5c7ac741c458d2a3156\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/98544238-a7aa-4b0a-b630-b0945e93f40c\",\"moduleSequenceNumber\":148369}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":148369,\"_hash\":\"fbec4b055c178ac2b6828ed994c26bf05b233d7383518107ad159953759a8b89\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { list_servers } from 'opened_servers.js';\\nimport { boxTailSingleton, ramUsage } from 'utils.js';\\n\\nlet ns;\\nconst weaken_script = \\\"weaken.js\\\";\\nconst grow_script = \\\"grow.js\\\";\\nconst hack_script = \\\"hack.js\\\";\\nlet hack_scriptRam = 1.7;\\nlet grow_scriptRam, weaken_scriptRam = 1.75;\\nlet serversForExecution = [];\\nlet hackStatus = [];\\n/** @param {NS} pns **/\\nexport async function main(pns) {\\n\\tns = pns;\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('exec')\\n\\tns.clearLog();\\n\\tns.tail();\\n\\tboxTailSingleton(ns, 'mcp', '🥾', '200px');\\n\\tweaken_scriptRam = ns.getScriptRam(weaken_script, \\\"home\\\");\\n\\tgrow_scriptRam = ns.getScriptRam(grow_script, \\\"home\\\");\\n\\thack_scriptRam = ns.getScriptRam(hack_script, \\\"home\\\");\\n\\tawait run();\\n}\\nlet hackPercent = .5;\\nlet bonusServers = 0;\\nasync function updateServerLists() {\\n\\tserversForExecution = ['home'].concat(list_servers(ns).filter(s => ns.hasRootAccess(s)));\\n\\tconst beforeHackStatusLength = hackStatus.length;\\n\\tconst serversToHack = list_servers(ns).filter(s => ns.hasRootAccess(s)\\n\\t\\t&& ns.getServerMaxMoney(s) > 0\\n\\t\\t&& ns.getServerRequiredHackingLevel(s) <= ns.getHackingLevel() / 2);\\n\\n\\thackStatus = [];\\n\\tconst skippedServer = []\\n\\tconst player = ns.getPlayer();\\n\\tfor (const server of serversToHack) {\\n\\t\\tconst s = ns.getServer(server);\\n\\t\\ts.hackDifficulty = s.minDifficulty;\\n\\t\\t// check that hacks will succeed. Could be redundant check\\n\\t\\tconst hackChance = ns.formulas.hacking.hackChance(s, player);\\n\\t\\tif (hackChance < .99) {\\n\\t\\t\\t//ns.print(`Hack chance to low ${s} ${(hackChance * 100).toFixed(2)}%`)\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (s.serverGrowth < 40) {\\n\\t\\t\\t//ns.print(`Growth is to low ${s} ${s.serverGrowth}%`)\\n\\t\\t\\tskippedServer.push({ server: server });\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\thackStatus.push({ server: server });\\n\\t}\\n\\tconst lowRamUse = ramUsage(ns) < .5;\\n\\tconst oldHackPercent = hackPercent;\\n\\tconst oldBonusServers = bonusServers;\\n\\tif (lowRamUse) {\\n\\t\\thackPercent = Math.min(hackPercent + .1, .95);\\n\\t\\tif (hackPercent === .95) {\\n\\t\\t\\tbonusServers = Math.min(bonusServers + 1, skippedServer.length);\\n\\t\\t\\thackStatus.push(...skippedServer.slice(0, bonusServers));\\n\\t\\t}\\n\\t} else {\\n\\t\\tbonusServers = Math.max(bonusServers - 1, 0);\\n\\t\\tif (bonusServers <= 0) hackPercent = Math.max(hackPercent - .1, .5);\\n\\t}\\n\\tif (oldHackPercent !== hackPercent || oldBonusServers !== bonusServers) ns.tprint(`BonusServers added ${bonusServers} Hack percent ${hackPercent}`);\\n\\t// after aug install just start hacking on n00dles fist\\n\\tif (hackStatus.length === 0) hackStatus.push({ server: 'n00dles' });\\n\\tif (beforeHackStatusLength < hackStatus.length) ns.tprint(`Servers to hack ${hackStatus.length} ${hackStatus.map(o => o.server).join(',')}`);\\n}\\n\\nasync function run() {\\n\\tlet i = 0;\\n\\tlet res;\\n\\tawait updateServerLists();\\n\\tlet updateAfter = Date.now().valueOf() + 30 * 1000;\\n\\twhile (true) {\\n\\t\\tconst state = getNextState(hackStatus[i].server, hackStatus[i].nextStateUpdateRequiredAt);\\n\\t\\tif (state) {\\n\\t\\t\\thackStatus[i] = state;\\n\\n\\t\\t\\tswitch (state.nextState) {\\n\\t\\t\\t\\tcase 'weaken':\\n\\t\\t\\t\\t\\tres = await runWeaken(state.server, state.currentSecurity, state.threadsCommitted);\\n\\t\\t\\t\\t\\t// ns.print(`Weak time ${ns.tFormat(res.time)}`);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'grow':\\n\\t\\t\\t\\t\\tres = await runGrow(state.server, state.percentMoney, state.threadsCommitted);\\n\\t\\t\\t\\t\\t// ns.print(`Grow time ${ns.tFormat(res.time)}`);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'hack':\\n\\t\\t\\t\\t\\tres = await runHack(state.server, state.threadsCommitted);\\n\\t\\t\\t\\t\\t// ns.print(`Hack time ${ns.tFormat(res.time)}`);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\n\\t\\t\\tstate.nextStateUpdateRequiredAt = Date.now() + res.time;\\n\\t\\t\\t// ns.print(`Next update at: ${new Date(state.nextStateUpdateRequiredAt).toTimeString()}`);\\n\\t\\t\\tstate.threadsCommitted = res.threadsCommitted\\n\\t\\t}\\n\\t\\ti = (i + 1) % hackStatus.length;\\n\\t\\tawait ns.sleep(1000);\\n\\t\\tif (updateAfter < Date.now()) {\\n\\t\\t\\tupdateAfter = Date.now() + 30 * 1000;\\n\\t\\t\\tawait updateServerLists();\\n\\t\\t\\ti = 0;\\n\\t\\t}\\n\\t}\\n}\\nconst getCores = (host) => ns.getServer(host).cpuCores;\\n\\nasync function runWeaken(target, currentSecurity, threads) {\\n\\tlet time = 0;\\n\\tlet threadsCommitted = 0;\\n\\tconst { host, threads_available } = getHostAndThreads(weaken_scriptRam);\\n\\tif (!host) return { time, threadsCommitted };\\n\\tlet threadToUse = threads_available;\\n\\tconst owk = ns.weakenAnalyze(1, getCores(host));\\n\\tconst threadsNeeded = Math.max(Math.ceil(currentSecurity / owk) - threads, 1);\\n\\tthreadToUse = Math.min(threadToUse, threadsNeeded);\\n\\tif (!ns.fileExists(weaken_script, host)) {\\n\\t\\tawait ns.scp(weaken_script, host);\\n\\t}\\n\\tconst pid = await ns.exec(weaken_script, host, threadToUse, target, Math.random());\\n\\tif (pid > 0) {\\n\\t\\tif (hasFormulas() && threadsNeeded <= threadToUse) {\\n\\t\\t\\ttime = ns.formulas.hacking.weakenTime(ns.getServer(target), ns.getPlayer());\\n\\t\\t}\\n\\t\\t// ns.print(`Weaken ${host}[${threadToUse}] -> ${target}`);\\n\\t\\tthreadsCommitted = threadToUse;\\n\\t}\\n\\treturn { time, threadsCommitted };\\n}\\n\\nasync function runGrow(target, percentMoney, threads) {\\n\\tlet time = 0;\\n\\tlet threadsCommitted = 0;\\n\\tconst { host, threads_available } = getHostAndThreads(grow_scriptRam);\\n\\tif (!host) return { time, threadsCommitted };\\n\\tconst growthFactor = 1 / (percentMoney || 0.0000001);\\n\\tconst threadsNeeded = Math.max(Math.floor(ns.growthAnalyze(target, growthFactor, getCores(host))) - threads, 1);\\n\\tlet threadToUse = Math.min(threads_available, threadsNeeded);\\n\\tif (!ns.fileExists(grow_script, host)) {\\n\\t\\tawait ns.scp(grow_script, host);\\n\\t}\\n\\n\\tconst pid = await ns.exec(grow_script, host, threadToUse, target, Math.random());\\n\\tif (pid > 0) {\\n\\t\\tif (hasFormulas() && threadsNeeded <= threadToUse) {\\n\\t\\t\\ttime = ns.formulas.hacking.growTime(ns.getServer(target), ns.getPlayer());\\n\\t\\t}\\n\\t\\t// ns.print(`Grow ${host}[${threadToUse}] -> ${target}`);\\n\\t\\tthreadsCommitted = threadToUse;\\n\\t}\\n\\tconst w = await runWeaken(target,ns.growthAnalyzeSecurity(threadsCommitted),0);\\n\\treturn { time:w.time, threadsCommitted: w.threadsCommitted + threadsCommitted };\\n}\\n\\nasync function runHack(target, threads) {\\n\\tlet time = 0;\\n\\tlet threadsCommitted = 0;\\n\\tconst { host, threads_available } = getHostAndThreads(hack_scriptRam);\\n\\tif (!host) return { time, threadsCommitted };\\n\\tconst threadsNeeded = Math.max(parseInt((hackPercent / ns.hackAnalyze(target)).toFixed(0)) - threads, 1);\\n\\tlet threadToUse = Math.min(threads_available, threadsNeeded);\\n\\tif (!ns.fileExists(hack_script, host)) {\\n\\t\\tawait ns.scp(hack_script, host);\\n\\t}\\n\\n\\tconst cashingOut = ns.hackAnalyze(target) * threadToUse * ns.getServerMoneyAvailable(target);\\n\\tconst pid = await ns.exec(hack_script, host, threadToUse, target, Math.random());\\n\\n\\tif (pid > 0) {\\n\\t\\tif (hasFormulas() && threadsNeeded <= threadToUse) {\\n\\t\\t\\ttime = ns.formulas.hacking.hackTime(ns.getServer(target), ns.getPlayer());\\n\\t\\t}\\n\\t\\tns.print(`Hack ${host}[${threadToUse}] -> ${target}[${ns.nFormat(cashingOut, \\\"($ 0.00 a)\\\")}]`);\\n\\t\\tthreadsCommitted = threadToUse;\\n\\t}\\n\\n\\tconst w = await runWeaken(target,ns.hackAnalyzeSecurity(threadsCommitted),0);\\n\\treturn { time:w.time, threadsCommitted: w.threadsCommitted + threadsCommitted };\\n}\\n\\nfunction hasFormulas() {\\n\\treturn ns.fileExists('Formulas.exe');\\n}\\nfunction getHostAndThreads(scriptRam) {\\n\\tconst host = serversForExecution.find((host) => {\\n\\t\\tlet maxRam = ns.getServerMaxRam(host);\\n\\t\\t// reserve some ram for other scripts\\n\\t\\tif (host === 'home') {\\n\\t\\t\\tmaxRam = Math.max(maxRam * .75, maxRam - 128);\\n\\t\\t}\\n\\t\\tconst threads_available = Math.floor((maxRam - ns.getServerUsedRam(host)) / scriptRam);\\n\\t\\treturn threads_available >= 1;\\n\\t});\\n\\tif (!host) return { host: null, threads_available: 0 };\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\t// reserve some ram for other scripts\\n\\tif (host === 'home') {\\n\\t\\tmaxRam = Math.max(maxRam * .75, maxRam - 128);\\n\\t}\\n\\tconst threads_available = Math.floor((maxRam - ns.getServerUsedRam(host)) / scriptRam);\\n\\treturn { host, threads_available };\\n}\\nfunction getNextState(server, nextStateUpdateRequiredAt) {\\n\\tif (nextStateUpdateRequiredAt > Date.now()) return null;\\n\\tlet nextState;\\n\\tconst sec = parseFloat((ns.getServerSecurityLevel(server) - ns.getServerMinSecurityLevel(server)).toFixed(2));\\n\\tconst percentMoney = parseFloat((ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server)).toFixed(2));\\n\\tif (sec > 5) {\\n\\t\\tnextState = 'weaken';\\n\\t} else if (percentMoney < 0.95) {\\n\\t\\tnextState = 'grow';\\n\\t} else {\\n\\t\\tnextState = 'hack';\\n\\t}\\n\\t// \\tns.print(`Next state for ${server} ${nextState} \\n\\t//   $% : ${percentMoney * 100} \\n\\t//   sec: +${sec.toFixed(2)} \\n\\t//   at : ${new Date(nextStateUpdateRequiredAt ? nextStateUpdateRequiredAt : Date.now()).toTimeString()}`);\\n\\treturn {\\n\\t\\tserver: server,\\n\\t\\tnextState: nextState,\\n\\t\\tpercentMoney: percentMoney,\\n\\t\\tcurrentSecurity: sec,\\n\\t\\tnextStateUpdateRequiredAt: 0,\\n\\t\\tthreadsCommitted: 0\\n\\t};\\n}\",\"filename\":\"mcp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/51d7401f-f6da-4383-9e1c-02e92518e750\",\"moduleSequenceNumber\":66217},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/41c83801-606b-42bd-bcfc-dde73d406d0a\",\"moduleSequenceNumber\":66199},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/34b9c5a0-0024-42be-af83-52652d6a5370\",\"moduleSequenceNumber\":336608},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/2b1f73f4-ca97-457e-8df9-81ade5657196\",\"moduleSequenceNumber\":66199},{\"filename\":\"mcp.js\",\"url\":\"blob:https://danielyxie.github.io/de4d6c75-838a-4c4d-9eb8-fc9e0b2ce2d2\",\"moduleSequenceNumber\":337762}],\"dependents\":[],\"ramUsage\":13.6,\"server\":\"home\",\"moduleSequenceNumber\":148222,\"_hash\":\"40eafd0a62ace6a9ec46bb73cec73dc5213d36aa5cacc77b5a2d69dd95e433ba\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { copyHackingFiles } from 'utils.js';\\nimport { getAugsRemainingAtFaction, getAllAugmentStats, hasStat } from 'augments.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.clearLog();\\n\\tns.tail();\\n// import { getOwnedAugmentationsStatic, getAugmentsPerFaction, getAllAugmentStats, hasStat } from 'augments.js';\\nfunction wantListGenerator() {\\n\\tconst augmentStats = getAllAugmentStats(ns);\\n\\t// const bladeburnerDesiredStats = ['agi', 'dex', 'str', 'def', 'faction_rep', 'company_rep', 'hacknet'];\\n\\tconst bladeburnerDesiredStats = ['agi', 'dex', 'str', 'def', 'faction_rep'];\\n\\tconst anauglist = Object.entries(augmentStats)\\n\\t\\t.filter(([name, augstats]) =>\\n\\t\\t\\tbladeburnerDesiredStats.filter((stat) => hasStat(stat, augstats)).length > 0)\\n\\t\\t.sort(([, augstatsa], [, augstatsb]) => augstatsa.price - augstatsb.price)\\n\\t\\t.map(([name, augstats]) => name);\\n\\tns.print(JSON.stringify(anauglist, null, 2));\\n}\\nwantListGenerator();\\n\\t// bb want list\\n\\n\\n\\t// const factionAugs = getAugsRemainingAtFaction(ns);\\n\\t// const factionsWithAugs = Object.entries(factionAugs)\\n\\t// \\t.filter(([faction, augList]) =>\\n\\t// \\t\\taugList.filter(aug => aug !== 'NeuroFlux Governor').length > 0 // work for factions with augs other than NFG\\n\\t// \\t\\t&& faction !==  ns.getPlayer().currentWorkFactionName // sleeve 0 is working for this faction\\n\\t// \\t\\t// && !allGangFactions.includes(faction) // can't work for competing gangs\\n\\t// \\t\\t&& ns.getPlayer().factions.includes(faction) // player in faction\\n\\t// \\t\\t&& faction !== 'Bladeburners'\\n\\t// \\t\\t&& faction !== 'Slum Snakes');\\n\\t// let faction = factionsWithAugs[i][0]\\n\\n\\t// const excludedAugs = ['QLink', 'Hydroflame Left Arm'];\\n\\t// const ag = ns.sleeve.getSleevePurchasableAugs(1).filter(a => !excludedAugs.includes(a.name)).sort((a, b) => a.cost - b.cost);\\n\\t//  const factionsWithAugs = Object.entries(factionAugs)\\n\\t//         .filter(([faction, augList]) =>\\n\\t//             augList.filter(aug => aug !== 'NeuroFlux Governor').length > 0 // work for factions with augs other than NFG\\n\\t//             && faction !== playerInfo.currentWorkFactionName // sleeve 0 is working for this faction\\n\\t//             // && !allGangFactions.includes(faction) // can't work for competing gangs\\n\\t//             && playerInfo.factions.includes(faction) // player in faction\\n\\t//             && faction !== 'Bladeburners'\\n\\t//             && faction !== 'Slum Snakes');\\n\\t// const blackOpsNames = ns.bladeburner.getBlackOpNames();\\n\\t// let blackOpsRanks = {};\\n\\t// const blackOpsToBeDone = {};\\n\\t// for (let blackOpsName of blackOpsNames) {\\n\\t// \\tblackOpsRanks[blackOpsName] = ns.bladeburner.getBlackOpRank(blackOpsName);\\n\\t// \\tblackOpsToBeDone[blackOpsName] = ns.bladeburner.getActionCountRemaining(\\\"blackops\\\", blackOpsName);\\n\\t// }\\n\\t// let remainingBlackOpsNames = blackOpsNames.filter(n => blackOpsToBeDone[n] === 1)\\n\\t// \\t.sort((b1, b2) => blackOpsRanks[b1] - blackOpsRanks[b2]);\\n\\t// const currentAction = ns.bladeburner.getCurrentAction();\\n\\t// // Special case: If the user has manually kicked off the last BlackOps, don't interrupt it, let it be our last task\\n\\t// ns.print(`${currentAction?.name} === ${remainingBlackOpsNames[remainingBlackOpsNames.length - 1]} ${currentAction?.name === remainingBlackOpsNames[remainingBlackOpsNames - 1]}`);\\n\\t// const currentDuration = ns.bladeburner.getActionTime(currentAction.type, currentAction.name);\\n\\t// ns.print(`currentDuration ${currentDuration}`);\\n\\t// lastAssignedTask = currentAction;\\n\\n\\n\\t// ns.print(JSON.stringify(getAugsRemainingAtFaction(ns), null, 2));\\n\\n\\t// const s = ns.getPurchasedServers();\\n\\t// for (let server of s) {\\n\\t// \\tawait copyHackingFiles(ns, { hostname: server, hasAdminRights: true });\\n\\t// }\\n\\t// for (let i =0; i<ns.hacknet.numNodes();i++) {\\n\\t// await copyHackingFiles(ns, { hostname: `hacknet-node-${i}`, hasAdminRights: true });\\n\\t// }\\n\\t// let activeAugmentations = getOwnedAugmentationsStatic(ns);\\n\\t//     ns.print(activeAugmentations.includes(\\\"Neuroreceptor Management Implant\\\"));\\n\\t// \\tns.workForFaction(\\\"NiteSec\\\", 'security', false);\\n\\t// ns.print(ns.corporation.hasUnlockUpgrade('Smart Supply'));\\n\\t// ns.print(JSON.stringify(ns.corporation.getWarehouse('Agriculture', 'Sector-12'),null, 2));\\n\\t// ns.print(JSON.stringify(ns.getPlayer(), null, 2));\\n\\t// const words = [\\n\\t// \\t'bitburner', 'hack', 'cpu', 'hacknet', 'augment','install','noodles','noodle','vitalife'\\n\\t// ]\\n\\t// for (let word of words)\\n\\t// \\tns.print(`${word} ${ns.rainbow(word)}`);\\n\\t// const gang = ns.gang.getGangInformation();\\n\\t// const chanceVsOtherGang = Object.entries(ns.gang.getOtherGangInformation())\\n\\t// \\t.filter(([k, s]) => k !== gang.faction && s.territory > 0)\\n\\t// \\t.map(([k, s]) => ns.gang.getChanceToWinClash(k));\\n\\n\\n\\t// let members = [];\\n\\t// let names = ns.gang.getMemberNames();\\n\\t// for (const name of names) {\\n\\t// \\tmembers.push(ns.gang.getMemberInformation(name));\\n\\t// }\\n\\t// let tasks = [];\\n\\t// names = ns.gang.getTaskNames();\\n\\t// for (const name of names) {\\n\\t// \\ttasks.push(ns.gang.getTaskStats(name));\\n\\t// }\\n\\t// let i = 0;\\n\\t// for (const member of members) {\\n\\t// \\ti++;\\n\\t// \\tlet prevTask = member.task;\\n\\t// \\tlet bestTask = '';\\n\\t// \\tlet mg = 0;\\n\\t// \\tfor (const task of tasks) {\\n\\t// \\t\\tlet nmg = ns.formulas.gang.respectGain(gang, member, task);\\n\\t// \\t\\t//if (nmg > 0) \\n\\t// \\t\\tns.print(`${member.name} ${task.name} ${nmg}`);\\n\\t// \\t\\tif (nmg > mg) {\\n\\t// \\t\\t\\tbestTask = task.name;\\n\\t// \\t\\t\\tmg = nmg;\\n\\t// \\t\\t}\\n\\t// \\t}\\n\\t// \\tns.print(`BEST TASK ${member.name} ${bestTask} ${mg}`);\\n\\t// }\\n\\t// const target = 'CSEC';\\n\\t// const server = ns.getServer(target);\\n\\t// const player = ns.getPlayer();\\n\\t// ns.print(ns.getBitNodeMultipliers())\\n\\t// ns.print(JSON.stringify(player, null, 2));\\n\\t// ns.print(ns.gang.getMemberNames())\\n\\t// ns.print(ns.gang.getTaskNames());\\n\\t// const hnc = ns.hacknet.getPurchaseNodeCost();\\n\\t// const mgr = 0; //ns.hacknet.getNodeStats(200, 64, 16, player.hacknet_node_money_mult)\\n\\t// const htime = ns.formulas.hacking.hackTime(ns.getServer(target), ns.getPlayer());\\n\\n\\t// const owk = ns.weakenAnalyze(1, 4);\\n\\t// const securityLevelToBeat = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\n\\t// const threadsNeeded = Math.ceil(securityLevelToBeat / owk);\\n\\t// const bingo = ns.weakenAnalyze(threads, 4)\\n\\t// ns.print(`${owk} * ${threads} >= ${securityLevelToBeat} `);\\n\\t// ns.tprint(`${ns.hackAnalyze(target)} ${mgr} ${''}`);\\n\\t// ns.print(`${hnc} ${mgr}`);\\n\\t// server.hackDifficulty = server.minDifficulty;\\n\\t// const ht1 = ns.formulas.hacking.growPercent(server, 1, player, 1);\\n\\t// const threads = 2.1 / ht1;\\n\\t// const ht2 = ns.formulas.hacking.growPercent(server, 10000, player, 1);\\n\\t// let percent = 0;\\n\\t// let growThreadsNeeded = 1;\\n\\t// while (percent < 2.1) {\\n\\t// \\tpercent = ns.formulas.hacking.growPercent(server, growThreadsNeeded++, player, 1);\\n\\t// \\tns.print(`${percent}`);\\n\\t// \\tawait ns.sleep(0);\\n\\t// }\\n\\t// server.hackDifficulty = server.minDifficulty;\\n\\t// const ht2 = ns.formulas.hacking.hackPercent(server, player);\\n\\t// ns.print(`${ht1} ${threads} ${ht2} ${growThreadsNeeded} ${percent}`);\\n\\t// let growO = ns.hackAnalyzeSecurity(1);\\n\\t// let growSecurityInc = ns.growthAnalyzeSecurity(1);\\n\\t// ns.print(`${growO} ${1} ${growSecurityInc}`);\\n\\t// \\tconst t = ns.formulas.hacking.weakenTime(server, player);\\n\\t// \\tconst wt1 = Date.now() + ns.formulas.hacking.weakenTime(server, player);\\n\\t// \\tawait ns.sleep(500);\\n\\t// \\tconst wt2 = Date.now() - (wt1 - ns.formulas.hacking.weakenTime(server, player));\\n\\t// \\tns.print(`${t} ${wt2}`);\\n\\n\\t// ns.print(`${ns.hackAnalyze('johnson-ortho')} `);\\n\\n\\n\\tNumber.prototype.toExponential = () => null;\\n\\t// eval('window').performance.now = () => 0;\\n\\n\\n\\t// ns.print(`${ns.alterReality()}`);\\n\\t// ns.print(`${ns.bypass(eval('document'))}`);\\n\\t// eval('document').querySelector(\\\"#unclickable\\\").click()\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"augments.js\",\"url\":\"blob:https://danielyxie.github.io/975fd8f1-7ed9-4ffb-ae4a-b3fa71e8399d\",\"moduleSequenceNumber\":1040120},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/35299be7-d0fa-4d10-a9aa-eb7b3989bc77\",\"moduleSequenceNumber\":1040108},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/0c658734-c299-49b5-aaba-2ae1e0257de1\",\"moduleSequenceNumber\":1040091},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/ab40182f-bf71-42c8-916c-df4926e01cee\",\"moduleSequenceNumber\":1040092},{\"filename\":\"test.js\",\"url\":\"blob:https://danielyxie.github.io/bdbf5dd4-4926-403b-bda2-210e6d9b6ccf\",\"moduleSequenceNumber\":1052126}],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"home\",\"moduleSequenceNumber\":148223,\"_hash\":\"af2f03b0ce88e6f0b83f35a162009ee18fa7c5b600da8dcfb01a53df06ce6280\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ramUsage } from 'utils.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst args = ns.flags([[\\\"help\\\", false]]);\\n\\tif (args.help) {\\n\\t\\tns.tprint(\\\"This script will enhance your HUD (Heads up Display) with custom statistics.\\\");\\n\\t\\tns.tprint(`Usage: run ${ns.getScriptName()}`);\\n\\t\\tns.tprint(\\\"Example:\\\");\\n\\t\\tns.tprint(`> run ${ns.getScriptName()}`);\\n\\t\\treturn;\\n\\t}\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('disableLog');\\n\\tns.disableLog('getServerMaxRam')\\n\\tns.disableLog('getServerUsedRam');\\n\\n\\tconst doc = eval('document');\\n\\tconst hook0 = doc.getElementById('overview-extra-hook-0');\\n\\tconst hook1 = doc.getElementById('overview-extra-hook-1');\\n\\tconst monies = [];\\n\\tlet moneyLastTick = ns.getPlayer().money;\\n\\twhile (true) {\\n\\t\\ttry {\\n\\t\\t\\tconst headers = []\\n\\t\\t\\tconst values = [];\\n\\t\\t\\tconst player = ns.getPlayer();\\n\\n\\t\\t\\theaders.push(\\\"Scripts\\\");\\n\\t\\t\\tvalues.push(ns.nFormat(ns.getScriptIncome()[0], \\\"($0.00a)\\\") + '/s');\\n\\n\\t\\t\\tmonies.push(player.money - moneyLastTick);\\n\\t\\t\\tif (monies.length > 600) monies.shift();\\n\\t\\t\\tmoneyLastTick = player.money;\\n\\t\\t\\theaders.push(\\\"Money\\\");\\n\\t\\t\\tvalues.push(ns.nFormat(monies.reduce((a, b) => a + b, 0) / monies.length, \\\"($0.00a)\\\") + '/s');\\n\\n\\t\\t\\theaders.push(\\\"Ram Use\\\");\\n\\t\\t\\tvalues.push((ramUsage(ns) * 100).toFixed(1) + '%');\\n\\n\\t\\t\\tif (ns.heart.break() > -54000) {\\n\\t\\t\\t\\theaders.push(\\\"Karma\\\");\\n\\t\\t\\t\\tvalues.push(ns.heart.break().toFixed(0));\\n\\t\\t\\t}\\n\\n\\t\\t\\t// if (ns.fileExists('/tmp/ingang.txt')) {\\n\\t\\t\\t// \\tconst gangInfo = ns.getGangInformation();\\n\\t\\t\\t// \\theaders.push(\\\"Respect\\\");\\n\\t\\t\\t// \\tvalues.push(ns.nFormat(gangInfo.respect, '0.00a'));\\n\\t\\t\\t// \\theaders.push(\\\"Penalty\\\");\\n\\t\\t\\t// \\tvalues.push(ns.nFormat(gangInfo.wantedPenalty, '0.00%'));\\n\\t\\t\\t// \\theaders.push(\\\"Territory\\\");\\n\\t\\t\\t// \\tvalues.push(ns.nFormat(gangInfo.territory, '0.00%'));\\n\\t\\t\\t// }\\n\\n\\t\\t\\tif (ns.getSharePower() > 1) {\\n\\t\\t\\t\\theaders.push(\\\"Share\\\");\\n\\t\\t\\t\\tvalues.push(((ns.getSharePower() - 1) * 100).toFixed(2) + '%');\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Now drop it into the placeholder elements\\n\\t\\t\\thook0.innerText = headers.join(\\\"\\\\n\\\");\\n\\t\\t\\thook1.innerText = values.join(\\\"\\\\n\\\");\\n\\t\\t} catch (err) { // This might come in handy later\\n\\t\\t\\tns.print(\\\"ERROR: Update Skipped: \\\" + String(err));\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"custom-stats.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/0df71969-7ae4-486a-ae21-057676e1418d\",\"moduleSequenceNumber\":148233},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/98263799-fe8f-4cc7-aac9-1d28a1b892b7\",\"moduleSequenceNumber\":148216},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/fc386c21-9006-4ab3-81b9-0a397e9b776a\",\"moduleSequenceNumber\":148217},{\"filename\":\"custom-stats.js\",\"url\":\"blob:https://danielyxie.github.io/b025b06c-d157-41a6-99f6-a1c3b46ae462\",\"moduleSequenceNumber\":148355}],\"dependents\":[],\"ramUsage\":3.25,\"server\":\"home\",\"moduleSequenceNumber\":148355,\"_hash\":\"4b9469a509c8cf93404e80bb1625b76b7717f843073b3d3bc8f890e2b5eccf59\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getSharePower\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { initAugments } from \\\"./augments\\\";\\nimport { boxTailSingleton } from \\\"utils.js\\\"\\nlet ns;\\n\\n/** @param {NS} pns **/\\nexport async function main(pns) {\\n\\tns = pns;\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('scan');\\n\\tboxTailSingleton(ns, 'init', '🖳', '100px');\\n\\tns.clearLog();\\n\\n\\tconst tmpFiles = ns.ls('home', 'tmp');\\n\\tfor (const tmpFp of tmpFiles) {\\n\\t\\tns.rm(tmpFp, 'home');\\n\\t}\\n\\n\\tif (ns.heart.break() < -54000) {\\n\\t\\tns.print('heart plenty broken tyvm');\\n\\t\\tns.gang.createGang('Slum Snakes');\\n\\t}\\n\\tif (ns.gang.inGang()) {\\n\\t\\tawait ns.write('/tmp/ingang.txt', ns.gang.getGangInformation().faction, 'w');\\n\\t}\\n\\tawait ns.write('/tmp/player.txt', JSON.stringify(ns.getPlayer(), null, 2), \\\"w\\\");\\n\\tconst multis = JSON.stringify(ns.getBitNodeMultipliers(), null, 2);\\n\\tconst fp = `/tmp/getBitNodeMultipliers.txt`;\\n\\tawait ns.write(fp, multis, 'w');\\n\\n\\tns.print('init augs details');\\n\\tawait initAugments(ns);\\n\\tns.print('init sleeves statics');\\n\\tawait writeSleeveData();\\n\\n\\tawait writeServers('', 'home');\\n\\tns.exec('hacknet.js', 'home', 1, '--max-spend', 200e6);\\n\\tns.exec('spend-hacknet-hash.js', 'home');\\n\\tns.exec('spend-hacknet-hash.js', 'home', 1, '--no-capacity-upgrades', '--spend-on', 'Exchange_for_Bladeburner_SP'); \\n\\tns.exec('spend-hacknet-hash.js', 'home', 1, '--no-capacity-upgrades', '--spend-on', 'Exchange_for_Bladeburner_Rank');\\n\\tns.exec('player.js', 'home');\\n\\tns.exec('sleeves.js', 'home');\\n\\tns.exec('bladeburner.js', 'home');\\n\\tns.exec('megacorp.js', 'home');\\n\\tns.exec('workForFaction.js', 'home', 1, !ns.gang.inGang() ? `--gang-focus` : '--crime-focus');\\n\\tif (ns.gang.inGang()) ns.exec('gangum.js', 'home');\\n\\tns.exec('purchase-servers.js', 'home');\\n\\tns.exec('ensureRoot.js', 'home');\\n\\tns.exec('mcp_hgw.js', 'home');\\n\\tns.exec('custom-stats.js', 'home');\\n\\t// ns.exec('charts.js', 'home');\\n\\t// ns.exec('chart_ram.js', 'home');\\n}\\nimport { list_servers } from 'opened_servers.js';\\nasync function writeServers() {\\n\\tconst hosts = list_servers(ns);\\n\\tfor (let host of hosts) {\\n\\t\\tconst serverDetails = ns.getServer(host);\\n\\t\\tserverDetails.hasAdminRights = false;\\n\\t\\tserverDetails.backdoorInstalled = false;\\n\\t\\tconst fp = `/tmp/${host.replaceAll(/[\\\\.\\\\s]/g, '_')}.txt`;\\n\\t\\tawait ns.write(fp, JSON.stringify(serverDetails, null, 2), 'w');\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nasync function writeSleeveData() {\\n\\tconst getNumSleeves = ns.sleeve.getNumSleeves();\\n\\tconst data = {\\n\\t\\tgetNumSleeves\\n\\t};\\n\\tawait ns.write('/tmp/sleeves_static.txt', JSON.stringify(data), 'w')\\n}\",\"filename\":\"init.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/0967390f-d2ed-4d62-9936-ffe436f6ceb8\",\"moduleSequenceNumber\":148216},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/19c3c4eb-4683-4c23-8ef3-e64da0ca0df1\",\"moduleSequenceNumber\":148233},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/63dbb508-81b2-4c76-bd91-3cdec1394a7e\",\"moduleSequenceNumber\":148216},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/3458d2b7-c414-4c4b-8f14-4e1002c2910c\",\"moduleSequenceNumber\":148217},{\"filename\":\"augments.js\",\"url\":\"blob:https://danielyxie.github.io/d8dc2e19-045d-4a54-afac-cc186f9aa3b4\",\"moduleSequenceNumber\":148245},{\"filename\":\"init.js\",\"url\":\"blob:https://danielyxie.github.io/7cb9f207-6aca-499a-9de9-3d5ee3b1fee2\",\"moduleSequenceNumber\":148341}],\"dependents\":[],\"ramUsage\":39.3,\"server\":\"silver-helix\",\"moduleSequenceNumber\":148341,\"_hash\":\"7aa01bec4da1f4c16c3d9fb7bd13adf6cfcf9652aa23b26ca06e0fa7ef89f671\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.createGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrice\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:https://danielyxie.github.io/3b1b54ab-f25c-4150-8ab0-a3aba0cf2cff\",\"moduleSequenceNumber\":265319}],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":148226,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { list_servers } from 'opened_servers.js';\\nconst share_script = \\\"share.js\\\";\\nlet share_scriptRam = 4;\\nlet serversForExecution;\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst flags = ns.flags([['allram', false]]);\\n\\tns.disableLog('getServerMaxRam');\\n\\tns.disableLog('getServerUsedRam');\\n\\tns.disableLog('sleep');\\n\\tshare_scriptRam = ns.getScriptRam(share_script, \\\"home\\\");\\n\\tconst openedServers = (await list_servers(ns)).filter(s => ns.hasRootAccess(s))\\n\\tserversForExecution = ns.getPurchasedServers().concat(openedServers);\\n\\tlet updateAfter = Date.now().valueOf() + 30 * 1000;\\n\\twhile (true) {\\n\\t\\tif (updateAfter < Date.now()) {\\n\\t\\t\\tconst openedServers = (await list_servers(ns)).filter(s => ns.hasRootAccess(s))\\n\\t\\t\\tserversForExecution = ns.getPurchasedServers().concat(openedServers);\\n\\t\\t\\tupdateAfter = Date.now() + 30 * 1000;\\n\\t\\t}\\n\\t\\tfor (const host of serversForExecution) {\\n\\t\\t\\tconst threadsAvailable = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host)) / share_scriptRam);\\n\\t\\t\\tif (threadsAvailable <= 0) continue;\\n\\t\\t\\tif (!ns.fileExists(share_script, host)) {\\n\\t\\t\\t\\tawait ns.scp(share_script, host);\\n\\t\\t\\t}\\n\\t\\t\\tawait ns.exec(share_script, host, threadsAvailable);\\n\\t\\t\\tawait ns.sleep(0);\\n\\t\\t}\\n\\t\\t// only use max 75% of home for sharing \\n\\t\\tconst threadsAvailable = Math.floor(((ns.getServerMaxRam('home') * .75) - ns.getServerUsedRam('home')) / share_scriptRam);\\n\\t\\tif (threadsAvailable > 0) {\\n\\t\\t\\tawait ns.exec(share_script, 'home', threadsAvailable, Math.random());\\n\\t\\t}\\n\\t\\tawait ns.sleep(0);\\n\\t}\\n}\",\"filename\":\"sharing_is_caring.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/c9e7c2b2-b650-45c5-8aa9-0c7408df8c08\",\"moduleSequenceNumber\":139654},{\"filename\":\"sharing_is_caring.js\",\"url\":\"blob:https://danielyxie.github.io/0484b4cf-e8ce-469e-94a7-9390769aca10\",\"moduleSequenceNumber\":265219}],\"dependents\":[],\"ramUsage\":6.3,\"server\":\"home\",\"moduleSequenceNumber\":148227,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//https://github.com/kroitor/asciichart\\n\\n// control sequences for coloring\\n\\nexport const black = \\\"\\\\x1b[30m\\\"\\nexport const red = \\\"\\\\x1b[31m\\\"\\nexport const green = \\\"\\\\x1b[32m\\\"\\nexport const yellow = \\\"\\\\x1b[33m\\\"\\nexport const blue = \\\"\\\\x1b[34m\\\"\\nexport const magenta = \\\"\\\\x1b[35m\\\"\\nexport const cyan = \\\"\\\\x1b[36m\\\"\\nexport const lightgray = \\\"\\\\x1b[37m\\\"\\nexport const adefault = \\\"\\\\x1b[39m\\\"\\nexport const darkgray = \\\"\\\\x1b[90m\\\"\\nexport const lightred = \\\"\\\\x1b[91m\\\"\\nexport const lightgreen = \\\"\\\\x1b[92m\\\"\\nexport const lightyellow = \\\"\\\\x1b[93m\\\"\\nexport const lightblue = \\\"\\\\x1b[94m\\\"\\nexport const lightmagenta = \\\"\\\\x1b[95m\\\"\\nexport const lightcyan = \\\"\\\\x1b[96m\\\"\\nexport const white = \\\"\\\\x1b[97m\\\"\\nexport const reset = \\\"\\\\x1b[0m\\\"\\n\\nexport function colored(char, color) {\\n    // do not color it if color is not specified\\n    return (color === undefined) ? char : (color + char + reset)\\n}\\n\\nexport function plot(series, cfg = undefined) {\\n    // this function takes both one array and array of arrays\\n    // if an array of numbers is passed it is transformed to\\n    // an array of exactly one array with numbers\\n    if (typeof (series[0]) == \\\"number\\\") {\\n        series = [series]\\n    }\\n\\n    cfg = (typeof cfg !== 'undefined') ? cfg : {}\\n\\n    let min = (typeof cfg.min !== 'undefined') ? cfg.min : series[0][0]\\n    let max = (typeof cfg.max !== 'undefined') ? cfg.max : series[0][0]\\n\\n    for (let j = 0; j < series.length; j++) {\\n        for (let i = 0; i < series[j].length; i++) {\\n            min = Math.min(min, series[j][i])\\n            max = Math.max(max, series[j][i])\\n        }\\n    }\\n\\n    let defaultSymbols = ['┼', '┤', '╶', '╴', '─', '╰', '╭', '╮', '╯', '│']\\n    let range = Math.abs(max - min)\\n    let offset = (typeof cfg.offset !== 'undefined') ? cfg.offset : 3\\n    let padding = (typeof cfg.padding !== 'undefined') ? cfg.padding : '           '\\n    let height = (typeof cfg.height !== 'undefined') ? cfg.height : range\\n    let colors = (typeof cfg.colors !== 'undefined') ? cfg.colors : []\\n    let ratio = range !== 0 ? height / range : 1;\\n    let min2 = Math.round(min * ratio)\\n    let max2 = Math.round(max * ratio)\\n    let rows = Math.abs(max2 - min2)\\n    let width = 0\\n    for (let i = 0; i < series.length; i++) {\\n        width = Math.max(width, series[i].length)\\n    }\\n    width = width + offset\\n    let symbols = (typeof cfg.symbols !== 'undefined') ? cfg.symbols : defaultSymbols\\n    let format = (typeof cfg.format !== 'undefined') ? cfg.format : function (x) {\\n        return (padding + x.toFixed(2)).slice(-padding.length)\\n    }\\n\\n    let result = new Array(rows + 1) // empty space\\n    for (let i = 0; i <= rows; i++) {\\n        result[i] = new Array(width)\\n        for (let j = 0; j < width; j++) {\\n            result[i][j] = ' '\\n        }\\n    }\\n    for (let y = min2; y <= max2; ++y) { // axis + labels\\n        let label = format(rows > 0 ? max - (y - min2) * range / rows : y, y - min2)\\n        result[y - min2][Math.max(offset - label.length, 0)] = label\\n        result[y - min2][offset - 1] = (y == 0) ? symbols[0] : symbols[1]\\n    }\\n\\n    for (let j = 0; j < series.length; j++) {\\n        let currentColor = colors[j % colors.length]\\n        let y0 = Math.round(series[j][0] * ratio) - min2\\n        result[rows - y0][offset - 1] = colored(symbols[0], currentColor) // first value\\n\\n        for (let x = 0; x < series[j].length - 1; x++) { // plot the line\\n            let y0 = Math.round(series[j][x + 0] * ratio) - min2\\n            let y1 = Math.round(series[j][x + 1] * ratio) - min2\\n            if (y0 == y1) {\\n                result[rows - y0][x + offset] = colored(symbols[4], currentColor)\\n            } else {\\n                result[rows - y1][x + offset] = colored((y0 > y1) ? symbols[5] : symbols[6], currentColor)\\n                result[rows - y0][x + offset] = colored((y0 > y1) ? symbols[7] : symbols[8], currentColor)\\n                let from = Math.min(y0, y1)\\n                let to = Math.max(y0, y1)\\n                for (let y = from + 1; y < to; y++) {\\n                    result[rows - y][x + offset] = colored(symbols[9], currentColor)\\n                }\\n            }\\n        }\\n    }\\n    return result.map(function (x) { return x.join('') }).join('\\\\n')\\n}\",\"filename\":\"asciichart.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":148228,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as asciichart from 'asciichart.js';\\n//store here to be a bit more persisten to script restarts\\nconst series = { 'n00dles': new Array(50).fill(0) };\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const flags = ns.flags([\\n        ['port', 1],\\n        ['refreshrate', 10000],\\n        ['help', false],\\n    ])\\n    if (flags.help) {\\n        ns.tprint(\\\"This script plots a chart using data from a pipe\\\");\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} PIPE_NUMBER`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} 1`)\\n        return;\\n    }\\n    ns.tail();\\n    ns.disableLog('ALL');\\n    const padding = '       ';\\n    const config = {\\n        offset: 2,    // axis offset from the left (min 2)\\n        padding, // padding string for label formatting (can be overridden)\\n        height: 5,   // any height you want\\n        // the label format function applies default padding\\n        format: function (x, i) { return (padding + ns.nFormat(x, '0.00a')).slice(-padding.length) }\\n    };\\n\\n    const port = flags.port;\\n    ns.print(JSON.stringify(Object.values(series), null, 2));\\n    while (true) {\\n        ns.clearLog();\\n        const dollars = {};\\n        let d = ns.peek(port);\\n        while (d !== 'NULL PORT DATA') {\\n            d = ns.readPort(port)\\n            if (d === 'NULL PORT DATA') continue;\\n            const [target, v] = d.split(':');\\n            const dollar = Math.floor(parseFloat(v));\\n            if (!dollars[target]) dollars[target] = 0;\\n            dollars[target] += dollar;\\n            // ns.toast(`Hacked ${target} ${ns.nFormat(dollar, \\\"$0.000a\\\")}`, 'info', 3000);\\n            series[target] = series[target] || new Array(50).fill(0);\\n        }\\n        ns.print(`Interval ${ns.tFormat(flags.refreshrate)}`)\\n        for (const [target, datum] of Object.entries(series)) {\\n            series[target].push(dollars[target] || 0);\\n            series[target].shift();\\n            ns.print(target);\\n            ns.print(`${asciichart.plot(datum, config)}`);\\n        }\\n        await ns.sleep(flags.refreshrate);\\n    }\\n}\",\"filename\":\"charts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"asciichart.js\",\"url\":\"blob:https://danielyxie.github.io/fa10554f-3439-4c5e-b6fd-3700223e1df1\",\"moduleSequenceNumber\":3101},{\"filename\":\"charts.js\",\"url\":\"blob:https://danielyxie.github.io/c9208acd-fb4b-4bdd-b04a-0a533ee35e58\",\"moduleSequenceNumber\":3113}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":148229,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { list_servers } from \\\"opened_servers.js\\\";\\nimport { boxTailSingleton } from 'utils.js';\\n\\n/** @param {NS} ns **/\\nexport function main(ns) {\\n    boxTailSingleton(ns, 'autosolver', '🔎', '20px');\\n    const contracts = list_servers(ns).map((server) => {\\n        const onServer = ns.ls(server, \\\".cct\\\").map((contract) => {\\n            const type = ns.codingcontract.getContractType(contract, server);\\n            const data = ns.codingcontract.getData(contract, server);\\n            const didSolve = solve(type, data, server, contract, ns);\\n            return `${server} - ${contract} - ${type} - ${didSolve || \\\"FAILED!\\\"}`;\\n        });\\n        return onServer;\\n    }).filter(o => o.length);\\n    ns.print(`Found ${contracts.length} contracts`);\\n    contracts.forEach((contract) => ns.print(contract));\\n}\\n\\nfunction solve(type, data, server, contract, ns) {\\n    let solution;\\n    switch (type) {\\n        case \\\"Algorithmic Stock Trader I\\\":\\n            solution = maxProfit([1, data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader II\\\":\\n            solution = maxProfit([Math.ceil(data.length / 2), data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader III\\\":\\n            solution = maxProfit([2, data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader IV\\\":\\n            solution = maxProfit(data);\\n            break;\\n        case \\\"Minimum Path Sum in a Triangle\\\":\\n            solution = solveTriangleSum(data, ns);\\n            break;\\n        case \\\"Unique Paths in a Grid I\\\":\\n            solution = uniquePathsI(data);\\n            break;\\n        case \\\"Unique Paths in a Grid II\\\":\\n            solution = uniquePathsII(data);\\n            break;\\n        case \\\"Generate IP Addresses\\\":\\n            solution = generateIps(data);\\n            break;\\n        case \\\"Find Largest Prime Factor\\\":\\n            solution = factor(data);\\n            break;\\n        case \\\"Spiralize Matrix\\\":\\n            solution = spiral(data);\\n            break;\\n        case \\\"Merge Overlapping Intervals\\\":\\n            solution = mergeOverlap(data);\\n            break;\\n        case \\\"Subarray with Maximum Sum\\\":\\n            solution = subArrayMaxSum(data);\\n            break;\\n        case \\\"Array Jumping Game\\\":\\n            solution = arrayJump(data);\\n            break;\\n        case \\\"Find All Valid Math Expressions\\\":\\n            solution = allExpressions(data);\\n            break;\\n        case \\\"Sanitize Parentheses in Expression\\\":\\n            solution = sanitizeParentheses(data);\\n            break;\\n        case \\\"Total Ways to Sum\\\":\\n            solution = totalWayToSum(data);\\n            break;\\n        case \\\"Total Ways to Sum II\\\":\\n            solution = solveWaysToSumII(data);\\n            break;\\n        case \\\"HammingCodes: Encoded Binary to Integer\\\":\\n            solution = hammingDecode(data);\\n            break;\\n        case \\\"HammingCodes: Integer to encoded Binary\\\":\\n            solution = hammingEncode(data);\\n            break;\\n        case \\\"Array Jumping Game II\\\":\\n            solution = arrayJumpingGameII(data);\\n            break;\\n        case \\\"Shortest Path in a Grid\\\":\\n            solution = shortestPathInAGrid(data);\\n            break;\\n        default:\\n            solution = null;\\n            ns.print(type + ' No solution implemented');\\n            break;\\n    }\\n    return (solution !== null) ? ns.codingcontract.attempt(solution, contract, server, { returnReward: true }) : null;\\n}\\n\\n//ALGORITHMIC STOCK TRADER\\n\\nfunction maxProfit(arrayData) {\\n    let i, j, k;\\n\\n    let maxTrades = arrayData[0];\\n    let stockPrices = arrayData[1];\\n\\n    // WHY?\\n    let tempStr = \\\"[0\\\";\\n    for (i = 0; i < stockPrices.length; i++) {\\n        tempStr += \\\",0\\\";\\n    }\\n    tempStr += \\\"]\\\";\\n    let tempArr = \\\"[\\\" + tempStr;\\n    for (i = 0; i < maxTrades - 1; i++) {\\n        tempArr += \\\",\\\" + tempStr;\\n    }\\n    tempArr += \\\"]\\\";\\n\\n    let highestProfit = JSON.parse(tempArr);\\n\\n    for (i = 0; i < maxTrades; i++) {\\n        for (j = 0; j < stockPrices.length; j++) { // Buy / Start\\n            for (k = j; k < stockPrices.length; k++) { // Sell / End\\n                if (i > 0 && j > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n                } else if (i > 0 && j > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n                } else if (i > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n                } else if (j > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n                } else {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], stockPrices[k] - stockPrices[j]);\\n                }\\n            }\\n        }\\n    }\\n    return highestProfit[maxTrades - 1][stockPrices.length - 1];\\n}\\n\\n//SMALLEST TRIANGLE SUM\\n\\nfunction solveTriangleSum(arrayData, ns) {\\n    let triangle = arrayData;\\n    let nextArray;\\n    let previousArray = triangle[0];\\n\\n    for (let i = 1; i < triangle.length; i++) {\\n        nextArray = [];\\n        for (let j = 0; j < triangle[i].length; j++) {\\n            if (j == 0) {\\n                nextArray.push(previousArray[j] + triangle[i][j]);\\n            } else if (j == triangle[i].length - 1) {\\n                nextArray.push(previousArray[j - 1] + triangle[i][j]);\\n            } else {\\n                nextArray.push(Math.min(previousArray[j], previousArray[j - 1]) + triangle[i][j]);\\n            }\\n\\n        }\\n\\n        previousArray = nextArray;\\n    }\\n\\n    return Math.min.apply(null, nextArray);\\n}\\n\\n//UNIQUE PATHS IN A GRID\\n\\nfunction uniquePathsI(grid) {\\n    const rightMoves = grid[0] - 1;\\n    const downMoves = grid[1] - 1;\\n\\n    return Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / (factorial(downMoves)));\\n}\\n\\nfunction factorial(n) {\\n    return factorialDivision(n, 1);\\n}\\n\\nfunction factorialDivision(n, d) {\\n    if (n == 0 || n == 1 || n == d)\\n        return 1;\\n    return factorialDivision(n - 1, d) * n;\\n}\\n\\nfunction uniquePathsII(grid, ignoreFirst = false, ignoreLast = false) {\\n    const rightMoves = grid[0].length - 1;\\n    const downMoves = grid.length - 1;\\n\\n    let totalPossiblePaths = Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / (factorial(downMoves)));\\n\\n    for (let i = 0; i < grid.length; i++) {\\n        for (let j = 0; j < grid[i].length; j++) {\\n\\n            if (grid[i][j] == 1 && (!ignoreFirst || (i != 0 || j != 0)) && (!ignoreLast || (i != grid.length - 1 || j != grid[i].length - 1))) {\\n                const newArray = [];\\n                for (let k = i; k < grid.length; k++) {\\n                    newArray.push(grid[k].slice(j, grid[i].length));\\n                }\\n\\n                let removedPaths = uniquePathsII(newArray, true, ignoreLast);\\n                removedPaths *= uniquePathsI([i + 1, j + 1]);\\n\\n                totalPossiblePaths -= removedPaths;\\n            }\\n        }\\n\\n    }\\n\\n    return totalPossiblePaths;\\n}\\n\\n//GENERATE IP ADDRESSES\\n\\nfunction generateIps(num) {\\n    num = num.toString();\\n\\n    const length = num.length;\\n\\n    const ips = [];\\n\\n    for (let i = 1; i < length - 2; i++) {\\n        for (let j = i + 1; j < length - 1; j++) {\\n            for (let k = j + 1; k < length; k++) {\\n                const ip = [\\n                    num.slice(0, i),\\n                    num.slice(i, j),\\n                    num.slice(j, k),\\n                    num.slice(k, num.length)\\n                ];\\n                let isValid = true;\\n\\n                ip.forEach(seg => {\\n                    isValid = isValid && isValidIpSegment(seg);\\n                });\\n\\n                if (isValid) ips.push(ip.join(\\\".\\\"));\\n\\n            }\\n\\n        }\\n    }\\n\\n    return ips;\\n\\n}\\n\\nfunction isValidIpSegment(segment) {\\n    if (segment[0] == \\\"0\\\" && segment != \\\"0\\\") return false;\\n    segment = Number(segment);\\n    if (segment < 0 || segment > 255) return false;\\n    return true;\\n}\\n\\n//GREATEST FACTOR\\n\\nfunction factor(num) {\\n    for (let div = 2; div <= Math.sqrt(num); div++) {\\n        if (num % div != 0) {\\n            continue;\\n        }\\n        num = num / div;\\n        div = 1;\\n    }\\n    return num;\\n}\\n\\n//SPIRALIZE Matrix\\n\\nfunction spiral(arr, accum = []) {\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(arr.shift());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(column(arr, arr[0].length - 1));\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(arr.pop().reverse());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(column(arr, 0).reverse());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    return spiral(arr, accum);\\n}\\n\\nfunction column(arr, index) {\\n    const res = [];\\n    for (let i = 0; i < arr.length; i++) {\\n        const elm = arr[i].splice(index, 1)[0];\\n        if (elm) {\\n            res.push(elm);\\n        }\\n    }\\n    return res;\\n}\\n\\n// Merge Overlapping Intervals\\n\\nfunction mergeOverlap(intervals) {\\n    intervals.sort(([minA], [minB]) => minA - minB);\\n    for (let i = 0; i < intervals.length; i++) {\\n        for (let j = i + 1; j < intervals.length; j++) {\\n            const [min, max] = intervals[i];\\n            const [laterMin, laterMax] = intervals[j];\\n            if (laterMin <= max) {\\n                const newMax = laterMax > max ? laterMax : max;\\n                const newInterval = [min, newMax];\\n                intervals[i] = newInterval;\\n                intervals.splice(j, 1);\\n                j = i;\\n            }\\n        }\\n    }\\n    return intervals;\\n}\\n\\n// Subarray with Maximum Sum\\n\\nfunction subArrays(arr, start, end, acc) {\\n    // Stop if we have reached the end of the array    \\n    if (end === arr.length)\\n        return acc;\\n    // Increment the end point and start from 0\\n    else if (start > end)\\n        subArrays(arr, 0, end + 1, acc);\\n    // create the subarray\\n    else {\\n        let subArr = [];\\n        for (let i = start; i < end; i++) {\\n            subArr.push(arr[i]);\\n        }\\n        subArr.push(arr[end]);\\n        acc.push(subArr);\\n\\n        subArrays(arr, start + 1, end, acc);\\n    }\\n    return acc;\\n}\\n\\nfunction subArrayMaxSum(arr) {\\n    arr = arr || [-6, 4, 1, 8, 10, -6];\\n    const arrays = subArrays(arr, 0, 0, []);\\n    const sums = arrays.map(o => o.reduce((a, b) => a + b, 0));\\n    return Math.max(...sums);\\n}\\n\\nfunction arrayJump(arr) {\\n    let n = arr.length;\\n    let jumps = Array.from({ length: n }, (_, i) => 0);\\n    let min;\\n    jumps[n - 1] = 0;\\n    for (let i = n - 2; i >= 0; i--) {\\n        if (arr[i] == 0)\\n            jumps[i] = Number.MAX_VALUE;\\n        else if (arr[i] >= n - i - 1)\\n            jumps[i] = 1;\\n        else {\\n            min = Number.MAX_VALUE;\\n            for (let j = i + 1; j < n && j <= arr[i] + i; j++) {\\n                if (min > jumps[j])\\n                    min = jumps[j];\\n            }\\n            if (min != Number.MAX_VALUE)\\n                jumps[i] = min + 1;\\n            else\\n                jumps[i] = min;\\n        }\\n    }\\n    return jumps[0] < Number.MAX_VALUE ? 1 : 0;\\n}\\n\\n// works for simple answers locks up a browser for large ones\\nfunction allExpressions(data) {\\n    const digits = data[0].split('')\\n    const operators = ['+', '-', '*', '']\\n    let expressions = [digits[0], '-' + digits[0]]\\n        .flatMap(d => operators.map(op => d + op))\\n    for (let i = 1; i < digits.length - 1; i++) {\\n        expressions = expressions\\n            .flatMap(e => operators.map(op => e + digits[i] + op))\\n    }\\n    return expressions.map(e => e + digits[digits.length - 1])\\n        .filter(e => {\\n            try { return eval(e) === data[1] }\\n            catch (e) { return false }\\n        })\\n}\\n\\n// Sanitize Parentheses in Expression\\n\\nfunction sanitizeParentheses(data) {\\n    const solution = Sanitize(data);\\n    if (solution == null) { return ('[\\\"\\\"]') }\\n    else { return (\\\"[\\\" + solution.join(\\\",\\\") + \\\"]\\\") }\\n}\\n\\nfunction Sanitize_removeOneParth(item) {\\n    const possibleAnswers = [];\\n    for (let i = 0; i < item.length; i++) {\\n        if (item[i].toLowerCase().indexOf(\\\"(\\\") === -1 && item[i].toLowerCase().indexOf(\\\")\\\") === -1) {\\n            continue\\n        }\\n        let possible = item.substring(0, i) + item.substring(i + 1);\\n        possibleAnswers.push(possible)\\n    }\\n    return possibleAnswers\\n}\\n\\nfunction Sanitize_isValid(item) {\\n    let unclosed = 0;\\n    for (let i = 0; i < item.length; i++) {\\n        if (item[i] == \\\"(\\\") { unclosed++ }\\n        else if (item[i] == \\\")\\\") { unclosed-- }\\n        if (unclosed < 0) { return false }\\n    }\\n    return unclosed == 0\\n}\\n\\nfunction Sanitize(data) {\\n    let currentPossible = [data];\\n    for (let i = 0; i < currentPossible.length; i++) {\\n        let newPossible = new Set();\\n        for (var j = 0; j < currentPossible.length; j++) {\\n            let newRemovedPossible = Sanitize_removeOneParth(currentPossible[j])\\n\\n            for (let item of newRemovedPossible) {\\n                newPossible.add(item)\\n            }\\n        }\\n\\n        const validBoolList = [];\\n\\n        for (let item of newPossible) {\\n            validBoolList.push(Sanitize_isValid(item))\\n        }\\n        if (validBoolList.includes(true)) {\\n            let finalList = [];\\n            newPossible = [...newPossible]\\n\\n            for (var j = 0; j < validBoolList.length; j++) {\\n                if (validBoolList[j]) {\\n                    finalList.push(newPossible[j])\\n                }\\n            }\\n\\n            finalList = new Set(finalList)\\n\\n            return [...finalList]\\n        }\\n        currentPossible = [...newPossible]\\n    }\\n\\n    return null\\n}\\n\\nfunction totalWayToSum(data) {\\n    let cache = {};\\n    let n = data;\\n    return twts(n, n, cache) - 1;\\n}\\n\\nfunction twts(limit, n, cache) {\\n    if (n < 1) { return 1; }\\n    if (limit == 1) { return 1; }\\n    if (n < limit) { return twts(n, n, cache); }\\n\\n    if (n in cache) {\\n        let c = cache[n];\\n        if (limit in c) { return c[limit]; }\\n    }\\n\\n    let s = 0;\\n    for (let i = 1; i <= limit; i++) {\\n        s += twts(i, n - i, cache);\\n    }\\n\\n    if (!(n in cache)) { cache[n] = {}; }\\n    cache[n][limit] = s; return s;\\n}\\n\\n/**\\n *\\n * @param {number[][]} input [targetNumber,[available numbers]]\\n * @returns\\n */\\nasync function solveWaysToSumII(input) {\\n    /**\\n     *\\n     * @param {number} target\\n     * @param {number[]} nums\\n     * @returns\\n     */\\n    let n = input[0];\\n    let nums = input[1];\\n    let table = new Array(n + 1);\\n    for (let i = 0; i < n + 1; i++) {\\n        table[i] = 0;\\n    }\\n    table[0] = 1;\\n\\n    for (let i of nums) {\\n        if (i >= n) {\\n            continue;\\n        }\\n        for (let j = i; j <= n; j++) {\\n            table[j] += table[j - i];\\n        }\\n        // console.log(table);\\n    }\\n    return table[n];\\n}\\n\\nfunction hammingEncode(data) {\\n    let N = Math.floor(Math.log2(data));\\n    let vec = Array.from({ length: N + 1 }, (_, i) => Math.floor(data / 2 ** (N - i)) % 2);\\n\\n    let masks = [\\n        /*012345678901234567890123456789012345678901234567890123456*/\\n        \\\"111111111111111111111111111111111111111111111111111111111\\\",\\n        \\\"110110101011010101010101011010101010101010101010101010101\\\",\\n        \\\"101101100110110011001100110110011001100110011001100110011\\\",\\n        \\\"011100011110001111000011110001111000011110000111100001111\\\",\\n        \\\"000011111110000000111111110000000111111110000000011111111\\\",\\n        \\\"000000000001111111111111110000000000000001111111111111111\\\",\\n        \\\"000000000000000000000000001111111111111111111111111111111\\\"\\n    ].map(x => x.split(\\\"\\\").map(y => Number(y)));\\n\\n    function hadamard(x, y) {\\n        return Array.from({ length: Math.min(x.length, y.length) }, (_, i) => x[i] * y[i]);\\n    }\\n    let parities = masks.map(mask => hadamard(mask, vec).reduce((a, n) => a + n) % 2);\\n\\n    for (let i = 1; i < parities.length; ++i) { parities[0] += parities[i]; }\\n    parities[0] %= 2;\\n\\n    /*01234567890123456789012345678901234567890123456789012345678901234*/\\n    let p_bit = \\\"11101000100000001000000000000000100000000000000000000000000000001\\\";\\n\\n    let output = [];\\n    for (let i = 0, p = 0, d = 0; d < vec.length; ++i) {\\n        if (p_bit[i] === \\\"1\\\") {\\n            output.push(parities[p++]);\\n        } else {\\n            output.push(vec[d++]);\\n        }\\n    }\\n\\n    return output.join(\\\"\\\");\\n}\\n\\n\\nfunction arrayJumpingGameII(arrayData) {\\n    let n = arrayData.length;\\n    let reach = 0;\\n    let jumps = 0;\\n    let lastJump = -1;\\n    while (reach < n - 1) {\\n        let jumpedFrom = -1;\\n        for (let i = reach; i > lastJump; i--) {\\n            if (i + arrayData[i] > reach) {\\n                reach = i + arrayData[i];\\n                jumpedFrom = i;\\n            }\\n        }\\n        if (jumpedFrom === -1) {\\n            jumps = 0;\\n            break;\\n        }\\n        lastJump = jumpedFrom;\\n        jumps++;\\n    }\\n    return jumps\\n}\\n\\n\\nfunction shortestPathInAGrid(data) {\\n    let H = data.length, W = data[0].length;\\n    let dist = Array.from(Array(H), () => Array(W).fill(Number.POSITIVE_INFINITY));\\n    dist[0][0] = 0;\\n\\n    let queue = [[0, 0]];\\n    while (queue.length > 0) {\\n        let [i, j] = queue.shift();\\n        let d = dist[i][j];\\n\\n        if (i > 0     && d + 1 < dist[i - 1][j] && data[i - 1][j] !== 1)\\n        { dist[i - 1][j] = d + 1; queue.push([i - 1, j]); }\\n        if (i < H - 1 && d + 1 < dist[i + 1][j] && data[i + 1][j] !== 1)\\n        { dist[i + 1][j] = d + 1; queue.push([i + 1, j]); }\\n        if (j > 0     && d + 1 < dist[i][j - 1] && data[i][j - 1] !== 1)\\n        { dist[i][j - 1] = d + 1; queue.push([i, j - 1]); }\\n        if (j < W - 1 && d + 1 < dist[i][j + 1] && data[i][j + 1] !== 1)\\n        { dist[i][j + 1] = d + 1; queue.push([i, j + 1]); }\\n    }\\n\\n    let path = \\\"\\\";\\n    if (Number.isFinite(dist[H - 1][W - 1])) {\\n        let i = H - 1, j = W - 1;\\n        while (i !== 0 || j !== 0) {\\n            let d = dist[i][j];\\n\\n            let new_i = 0, new_j = 0, dir = \\\"\\\";\\n            if (i > 0     && dist[i - 1][j] < d)\\n            { d = dist[i - 1][j]; new_i = i - 1; new_j = j; dir = \\\"D\\\"; }\\n            if (i < H - 1 && dist[i + 1][j] < d)\\n            { d = dist[i + 1][j]; new_i = i + 1; new_j = j; dir = \\\"U\\\"; }\\n            if (j > 0     && dist[i][j - 1] < d)\\n            { d = dist[i][j - 1]; new_i = i; new_j = j - 1; dir = \\\"R\\\"; }\\n            if (j < W - 1 && dist[i][j + 1] < d)\\n            { d = dist[i][j + 1]; new_i = i; new_j = j + 1; dir = \\\"L\\\"; }\\n\\n            i = new_i; j = new_j;\\n            path = dir + path;\\n        }\\n    }\\n\\n    return path;\\n}\\n\\nfunction hammingDecode(_data) {\\n    let _build = _data.split(\\\"\\\"); // ye, an array again\\n    let _testArray = []; //for the \\\"tests\\\". if any is false, it is been altered data, will check and fix it later\\n    let _sum_parity = Math.ceil(Math.log2(_data.length)); // excluding first bit\\n    let count = (arr, val) => arr.reduce((a, v) => (v === val ? a + 1 : a), 0); // count.... again ;)\\n    let _overallParity = _build.splice(0, 1).join(\\\"\\\"); // remove first index, for checking and to use the _build properly later\\n    _testArray.push((_overallParity === (count(_build, \\\"1\\\") % 2).toString())); // checking the \\\"overall\\\" parity\\n    for (var i = 0; i < _sum_parity; i++) {\\n        let _tempIndex = Math.pow(2, i) - 1 // get the parityBits Index\\n        let _tempStep = _tempIndex + 1 // set the stepsize\\n        let _tempData = [..._build] // \\\"copy\\\" the build-data\\n        let _tempArray = [] // init empty array for \\\"testing\\\"\\n        while (_tempData[_tempIndex] !== undefined) { // extract from the copied data until the \\\"starting\\\" index is undefined\\n            var _temp = [..._tempData.splice(_tempIndex, _tempStep * 2)] // extract 2*stepsize\\n            _tempArray.push(..._temp.splice(0, _tempStep)) // and cut again for keeping first half\\n        }\\n        let _tempParity = _tempArray.shift() // and cut the first index for checking with the rest of the data\\n        _testArray.push(((_tempParity === (count(_tempArray, \\\"1\\\") % 2).toString()))) // is the _tempParity the calculated data?\\n    }\\n    let _fixIndex = 0; // init the \\\"fixing\\\" index amd start with -1, bc we already removed the first bit\\n    for (let i = 1; i < _sum_parity + 1; i++) {\\n        _fixIndex += (_testArray[i]) ? 0 : (Math.pow(2, i) / 2)\\n    }\\n    _build.unshift(_overallParity)\\n    // fix the actual hammingcode if there is an error\\n    if (_fixIndex > 0 && _testArray[0] === false) { // if the overall is false and the sum of calculated values is greater equal 0, fix the corresponding hamming-bit\\n        _build[_fixIndex] = (_build[_fixIndex] === \\\"0\\\") ? \\\"1\\\" : \\\"0\\\"\\n    }\\n    else if (_testArray[0] === false) { // otherwise, if the the overall_parity is only wrong, fix that one\\n        _overallParity = (_overallParity === \\\"0\\\") ? \\\"1\\\" : \\\"0\\\"\\n    }\\n    else if (_testArray[0] === true && _testArray.some((truth) => truth === false)) {\\n        return 0 // uhm, there's some strange going on... 2 bits are altered? How?\\n    }\\n    // oof.. halfway through... we fixed the altered bit, now \\\"extract\\\" the parity from the build and parse the binary data\\n    for (let i = _sum_parity; i >= 0; i--) { // start from the last parity down the starting one\\n        _build.splice(Math.pow(2, i), 1)\\n    }\\n    _build.splice(0, 1)\\n    return parseInt(_build.join(\\\"\\\"), 2)\\n}\",\"filename\":\"autosolver.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/d4880d5d-c9ce-4d8f-aedd-e6c71dac567a\",\"moduleSequenceNumber\":148233},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/64b651e4-85fb-4c7a-b9de-14cda3812c26\",\"moduleSequenceNumber\":148216},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/4d8b36eb-49f1-4744-8f3c-877eeaef4aa3\",\"moduleSequenceNumber\":148217},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/ef1b6d45-dc6d-41d9-a31e-d2b52f6e5773\",\"moduleSequenceNumber\":148216},{\"filename\":\"autosolver.js\",\"url\":\"blob:https://danielyxie.github.io/eeb3825e-4f08-4bed-948b-7fd36fa75775\",\"moduleSequenceNumber\":151182}],\"dependents\":[],\"ramUsage\":22.5,\"server\":\"home\",\"moduleSequenceNumber\":151182,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as asciichart from 'asciichart.js';\\nimport { ramUsage } from 'utils.js'\\n//store here to be a bit more persisten to script restarts\\nconst series = { 'ramUsage': new Array(53).fill(0) };\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const flags = ns.flags([\\n        ['refreshrate', 5000],\\n        ['help', false],\\n    ])\\n    if (flags.help) {\\n        ns.tprint(\\\"This script plots a chart of ram use\\\");\\n        ns.tprint(`USAGE: run ${ns.getScriptName()}`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\n        return;\\n    }\\n    ns.tail();\\n    ns.disableLog('ALL');\\n    const padding = '    ';\\n    const config = {\\n        offset: 2,    // axis offset from the left (min 2)\\n        padding, // padding string for label formatting (can be overridden)\\n        height: 10,   // any height you want\\n        max: 1.0,\\n        min: 0.0,\\n        // the label format function applies default padding\\n        format: function (x, i) { return (padding + ns.nFormat(x, '0%')).slice(-padding.length) }\\n    };\\n    ns.print(JSON.stringify(Object.values(series), null, 2));\\n    while (true) {\\n        ns.clearLog();\\n        ns.print(`Interval ${ns.tFormat(flags.refreshrate)}`);\\n        const target = 'ramUsage';\\n        series[target].push(ramUsage(ns));\\n        series[target].shift();\\n        ns.print(target);\\n        ns.print(`${asciichart.plot(series[target], config)}`);\\n        await ns.sleep(flags.refreshrate);\\n    }\\n}\",\"filename\":\"chart_ram.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/83fa09fe-32bd-4d59-8717-ac94540e4c08\",\"moduleSequenceNumber\":284738},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/826c67e6-7819-4ab8-8249-f79d6f3a27d5\",\"moduleSequenceNumber\":336741},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/f117f58d-43a7-46f3-9777-dab0feada846\",\"moduleSequenceNumber\":393316},{\"filename\":\"asciichart.js\",\"url\":\"blob:https://danielyxie.github.io/254076b6-d233-4a9c-9b8d-42cd2ae58775\",\"moduleSequenceNumber\":284731},{\"filename\":\"chart_ram.js\",\"url\":\"blob:https://danielyxie.github.io/92a5a2a2-a9c2-4f97-9d21-7b291d9d1707\",\"moduleSequenceNumber\":547735}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"home\",\"moduleSequenceNumber\":148231,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { boxTailSingleton } from \\\"utils.js\\\"\\nlet ns;\\n\\nlet gang = {};\\nlet members = [];\\nlet tasks = [];\\nlet maxOtherGangPower;\\nlet chanceVsOtherGang;\\nlet warTracker;\\nlet isEarlyGang = true;\\nlet needMoreMembers = true;\\nconst memberNames = [\\n  'Teal', 'Fawn', 'TFT',\\n  'Turduck\\\\'n', 'Fender', 'Just Moe',\\n  'Mixer', 'Hip', 'Brownstone',\\n  'Sal', 'Right Hand', 'Left Shark'\\n];\\nconst combatAugmentPriorityOrder = ['Bionic Arms', 'Nanofiber Weave', 'Bionic Spine', 'Synfibril Muscle', 'BrachiBlades', 'Synthetic Heart', 'Graphene Bone Lacings'];\\nconst gangumStatus = {};\\n/** @param {NS} pns **/\\nexport async function main(pns) {\\n  ns = pns;\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('gang.purchaseEquipment');\\n  ns.disableLog('gang.setMemberTask');\\n  ns.disableLog('sleep');\\n  ns.disableLog('gang.setTerritoryWarfare');\\n  ns.disableLog('gang.canRecruitMember');\\n  if (!ns.fileExists('/tmp/ingang.txt')) {\\n    ns.print('not in gang');\\n    return;\\n  }\\n  boxTailSingleton(ns, 'gangum', '\\\\u270A', '220px');\\n  ns.clearLog();\\n\\n  warTracker = {\\n    prevPower: -1,\\n    lastPowerChange: Date.now(),\\n    nextTick: -1\\n  };\\n  const moneyTask = (g, m, t) => isEarlyGang && m.str < 10000 ? ns.formulas.gang.moneyGain(g, m, t) : (t.name === 'Traffick Illegal Arms' ? 1 : 0);\\n  const respectTask = ns.formulas.gang.respectGain;\\n  const wantedTask = (g, m, t) => -1 * ns.formulas.gang.wantedLevelGain(g, m, t);\\n  const warTask = (g, m, t) => t.name === 'Territory Warfare' ? 100 : 0;\\n  isEarlyGang = true;\\n  while (true) {\\n    gang = ns.gang.getGangInformation();\\n    const og = ns.gang.getOtherGangInformation();\\n    // seem like there are rounding errors on territory percent so always consider max of all gangs power\\n    // maxOtherGangPower = Math.max(...Object.entries(og).map(([k, s]) => (k === gang.faction ? 0 : (s.territory <= 0 ? 0 : s.power))));\\n    maxOtherGangPower = Math.max(...Object.entries(og).map(([k, s]) => (k === gang.faction ? 0 : s.power)));\\n    const chanceVsOtherGangs = Object.entries(ns.gang.getOtherGangInformation())\\n      .filter(([k, s]) => k !== gang.faction && s.territory > 0)\\n      .map(([k, s]) => ns.gang.getChanceToWinClash(k));\\n    chanceVsOtherGang = chanceVsOtherGangs.reduce((a, b) => a + b, 0) / chanceVsOtherGangs.length\\n    isEarlyGang = gang.respect < 3.2e6\\n    needMoreMembers = gang.respect < 3125; // 15625;//1.6e6;\\n    const curMembers = ns.gang.getMemberNames();\\n    const newMemberNames = memberNames.filter(o => !curMembers.includes(o));\\n    if (ns.gang.canRecruitMember() && ns.gang.recruitMember(newMemberNames[0])) {\\n      ns.toast('Recruited', 'info', 10000);\\n    }\\n\\n    getMembersStats();\\n    getTasksStats();\\n    await equip();\\n    ascend();\\n    war();\\n    let [makeWar, makeWarMsg] = isWartime();\\n    gangumStatus['isWartime'.padEnd(10)] = `${makeWar} ${(gang.territory * 100).toFixed(3)}%`\\n    gangumStatus.makeWarMsg = makeWarMsg || gangumStatus.makeWarMsg;\\n    if (makeWar) {\\n      setTasks(warTask);\\n    } else if (needMoreMembers) {\\n      setTasks(respectTask);\\n    } else {\\n      setTasks(moneyTask);\\n    }\\n\\n    ns.clearLog();\\n    for (let [k, v] of Object.entries(gangumStatus)) {\\n      ns.print(`${k}: ${v}`);\\n    }\\n    await ns.sleep(100);\\n  }\\n}\\n\\nfunction isWartime() {\\n  // no need for war any more\\n  if (gang.territory === 1) {\\n    warTracker.nextTick = Date.now();\\n    return [false, 'Territory maxed No more war'];\\n  }\\n  // too powerful don't get more power\\n  if (maxOtherGangPower * 1.5 < gang.power) {\\n    warTracker.nextTick = Date.now();\\n    return [false, 'Power higher enough no more warfare'];\\n  }\\n  if (warTracker.prevPower === -1) {\\n    warTracker.prevPower = gang.power;\\n  }\\n  let warningMsg = '';\\n  const isBonusTime = ns.gang.getBonusTime() >= 10;\\n  if (warTracker.prevPower !== gang.power) {\\n    warTracker.prevPower = gang.power;\\n    warTracker.lastPowerChange = Date.now();\\n    warTracker.nextTick = warTracker.lastPowerChange + (isBonusTime ? 1.6 : 20) * 1000;\\n    const hour = `${new Date().getHours()}`\\n    const min = `${new Date().getMinutes()}`;\\n    const sec = `${new Date().getSeconds()}`;\\n    warningMsg += `PowerTick ${hour}:${min.padStart(2, '0')}:${sec.padStart(2, '0')} clash ${(chanceVsOtherGang * 100).toPrecision(2)}%`;\\n  }\\n  if (warTracker.nextTick === -1) {\\n    return [false, `waiting for tick`];\\n  }\\n  if (warTracker.prevPower === gang.power) {\\n    if (warTracker.nextTick > Date.now()) {\\n      // waiting for next tick\\n    } else {\\n      // tick was early\\n      warningMsg += `war tick was early by ${Date.now() - warTracker.nextTick}`;\\n      warTracker.nextTick = -1;\\n    }\\n  }\\n  let timeTillTick = warTracker.nextTick - Date.now();\\n  // if before war tick and until just past the tick. Power tick will update nextTick to stop war time\\n  if (-2000 < timeTillTick && timeTillTick < 300) {\\n    //WarTime!\\n    warningMsg += `Wartime remaining ${timeTillTick}`;\\n    return [true, warningMsg];\\n  } else {\\n    return [false, warningMsg];\\n  }\\n}\\n\\nfunction war() {\\n  // if gang power is at max try to continue war for more territory\\n  const enableWar = (chanceVsOtherGang > .6) || (maxOtherGangPower * 1.5 <= gang.power);\\n  if (gang.territoryWarfareEngaged !== enableWar) {\\n    // ns.print(`Changing warfare to ${enableWar}`);\\n    ns.toast(`Changing warfare to ${enableWar}`, enableWar ? 'warning' : 'info', 30000);\\n  }\\n  // ns.print(`maxOtherGangPower ${maxOtherGangPower} strongerGangs ${strongerGangs} gang.power ${gang.power} gang.territoryWarfareEngaged ${gang.territoryWarfareEngaged}`)\\n  ns.gang.setTerritoryWarfare(enableWar);\\n}\\n\\nasync function equip() {\\n  const nameStatsMap = {};\\n  let equipmentNames = ns.gang.getEquipmentNames();\\n  for (const equipName of equipmentNames) {\\n    nameStatsMap[equipName] = ns.gang.getEquipmentStats(equipName);\\n  }\\n  const combatGear = Object.entries(nameStatsMap).filter(([e, stats]) => stats.str || stats.def || stats.cha);\\n  for (const [equipName] of combatGear) {\\n    for (const member of members) {\\n      const augsAndUpgrades = [];\\n      augsAndUpgrades.push(...member.augmentations);\\n      augsAndUpgrades.push(...member.upgrades);\\n      if (augsAndUpgrades.includes(equipName)) {\\n        continue;\\n      }\\n      if (ns.gang.purchaseEquipment(member.name, equipName)) {\\n        // ns.print(`Purchased ${equipName} for ${member.name}`);\\n        gangumStatus[member.name.padEnd(10)] += ' ' + equipName;\\n        if (combatAugmentPriorityOrder.includes(equipName)) {\\n          ns.toast(`Purchased ${equipName} for ${member.name}`, 'success', 10000);\\n        }\\n        // restrict soft reset loop to do so only for the augs\\n        // } else if (combatAugmentPriorityOrder.includes(equipName)) {\\n      } else if (!augsAndUpgrades.includes(equipName)) {\\n        if (ns.getServerMoneyAvailable('home') < ns.gang.getEquipmentCost(equipName) && ns.gang.getEquipmentCost(equipName) < 10e9) {\\n          ns.print(`Resetting to buy ${equipName} for ${member.name}`);\\n          ns.exec('aug_buyer.js', 'home');\\n          await ns.sleep(10000);\\n        }\\n      }\\n    }\\n  }\\n}\\n\\nfunction ascend() {\\n  for (const member of members) {\\n    const res = ns.gang.getAscensionResult(member.name);\\n    if (!res) continue;\\n    let str_mult = 1.6;\\n    if (!isEarlyGang) {\\n      str_mult = 1.1;\\n    }\\n    if (res.str > str_mult) {\\n      ns.gang.ascendMember(member.name);\\n      const msg = `Ascended ${member.name} asc_multi ${member.str_asc_mult.toPrecision(4)}, res_multi ${res.str.toPrecision(4)}`\\n      ns.toast(msg, 'info', 30000);\\n    }\\n  }\\n}\\n\\nfunction getMembersStats() {\\n  members = [];\\n  const names = ns.gang.getMemberNames();\\n  for (const name of names) {\\n    members.push(ns.gang.getMemberInformation(name));\\n  }\\n}\\n\\nfunction getTasksStats() {\\n  tasks = [];\\n  const names = ns.gang.getTaskNames();\\n  for (const name of names) {\\n    tasks.push(ns.gang.getTaskStats(name));\\n  }\\n}\\n\\nlet vigilantesNeeded = 0;\\n\\nfunction setTasks(taskFunc) {\\n  let vigilante = 0;\\n  if (ns.formulas.gang.wantedPenalty(gang) < 0.99 && gang.wantedLevel > 2) {\\n    vigilantesNeeded = (vigilantesNeeded * 1.5) || .15;\\n    vigilante = Math.floor(members.length * vigilantesNeeded);\\n    vigilantesNeeded = vigilante >= members.length ? members.length : vigilantesNeeded;\\n  } else {\\n    vigilantesNeeded = 0;\\n  }\\n  let i = 0;\\n  for (const member of members) {\\n    i++;\\n    let prevTask = member.task;\\n    let bestTask = '';\\n    let mg = 0;\\n    for (const task of tasks) {\\n      let nmg = taskFunc(gang, member, task);\\n      if (nmg > mg) {\\n        bestTask = task.name;\\n        mg = nmg;\\n      }\\n    }\\n    // if nothing or unassigned train\\n    if (bestTask === '' || bestTask === 'Unassigned') {\\n      bestTask = gang.isHacking ? 'Train Hacking' : 'Train Combat';\\n    }\\n    if (bestTask !== 'Territory Warfare' && vigilantesNeeded !== 0 && members.length - i < vigilante) {\\n      bestTask = 'Vigilante Justice';\\n    }\\n    // if waiting for a power tick\\n    if (warTracker.nextTick === -1) {\\n      bestTask = 'Territory Warfare';\\n    }\\n    if (ns.gang.setMemberTask(member.name, bestTask) && prevTask !== bestTask) {\\n      gangumStatus[member.name.padEnd(10)] = bestTask;\\n    }\\n  }\\n}\",\"filename\":\"gangum.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/c457f16a-e3d8-4118-8538-48f520d0c311\",\"moduleSequenceNumber\":148233},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/a12ca37c-366c-40e4-8df6-ecc668384243\",\"moduleSequenceNumber\":148216},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/ccacd132-d598-45b1-848e-3db1c6f67c0b\",\"moduleSequenceNumber\":148217},{\"filename\":\"gangum.js\",\"url\":\"blob:https://danielyxie.github.io/11f4b9fc-3ba8-45c1-93d2-481296c75d8a\",\"moduleSequenceNumber\":148351}],\"dependents\":[],\"ramUsage\":38.6,\"server\":\"home\",\"moduleSequenceNumber\":148351,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getOtherGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getChanceToWinClash\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.canRecruitMember\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.recruitMember\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.setTerritoryWarfare\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentStats\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"gang.getAscensionResult\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getTaskNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getTaskStats\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let css=`body{--prilt:#fd0;--pri:#fd0;--pridk:#fd0;--successlt:#ce5;--success:#ce5;--successdk:#ce5;--errlt:#c04;--err:#c04;--errdk:#c04;--seclt:#28c;--sec:#28c;--secdk:#28c;--warnlt:#f70;--warn:#f70;--warndk:#f70;--infolt:#3ef;--info:#3ef;--infodk:#3ef;--welllt:#146;--well:#222;--white:#fff;--black:#000;--hp:#c04;--money:#fc7;--hack:#ce5;--combat:#f70;--cha:#b8f;--int:#3ef;--rep:#b8f;--disabled:#888;--bgpri:#000;--bgsec:#111;--button:#146;--ff:\\\"Lucida Console\\\";overflow:hidden;display:flex}#root{flex:1 1 calc(100vw - 248px);overflow:scroll}.sb{font:12px var(--ff);color:var(--pri);background:var(--bgsec);overflow:hidden scroll;width:500px;min-height:100%;border-left:1px solid var(--welllt)}.sb *{vertical-align:middle;margin:0;font:inherit}.sb.c{width:45px}.sb.t, .sb.t>div{transition:height 200ms, width 200ms, color 200ms}.sbitem,.box{overflow:hidden;min-height:28px}.sbitem{border-top:1px solid var(--welllt);resize:vertical;width:unset !important}.sbitem.c{color:var(--sec)}.box{position:fixed;width:min-content;min-width:min-content;resize:both;background:var(--bgsec)}.box.c{height:unset !important;width:unset !important;background:none}.head{font-size:14px;display:flex;white-space:pre;font-weight:bold;user-select:none}:is(.sb,.sbitem)>.head{direction:rtl;cursor:pointer;padding:3px 0px}.box>.head{background:var(--pri);color:var(--bgpri);padding:3px;cursor:move}.body{font-size:12px;flex-direction:column;height:calc(100% - 30px)}.flex,:not(.noflex)>.body{display:flex}.flex>*,.body>*{flex:1 1 auto}.box>.body{border:1px solid var(--welllt)}.sb .title{margin:0 auto}.sbitem .close{display:none}.c:not(.sb),.c>.sbitem{height:28px !important;resize:none}.box.c>.body{display:none}.box.prompt{box-shadow:0 0 0 10000px #0007;min-width:400px}.box.prompt>.head>.icon{display:none}.sb .contextMenu{opacity:0.95;resize:none;background:var(--bgpri)}.sb .contextMenu .head{display:none}.sb .contextMenu .body{height:unset;border-radius:5px}.sb .icon{cursor:pointer;font:25px \\\"codicon\\\";line-height:0.9}:is(.sb,.sbitem)>.head>.icon{padding:0px 10px}.c>.head>.collapser{transform:rotate(180deg)}.sb :is(input,select,button,textarea){color:var(--pri);outline:none;border:none;white-space:pre}.sb :is(textarea,.log){white-space:pre-wrap;background:none;padding:0px;overflow-y:scroll}.sb :is(input,select){padding:3px;background:var(--well);border-bottom:1px solid var(--prilt);transition:border-bottom 250ms}.sb input:hover{border-bottom:1px solid var(--black)}.sb input:focus{border-bottom:1px solid var(--prilt)}.sb :is(button,input[type=checkbox]){background:var(--button);transition:background 250ms;border:1px solid var(--well)}.sb :is(button,input[type=checkbox]):hover{background:var(--bgsec)}.sb :is(button,input[type=checkbox]):focus, .sb select{border:1px solid var(--sec)}.sb button{padding:3px 6px;user-select:none}.sb .ts{color:var(--infolt)}.sb input[type=checkbox]{appearance:none;display:inline-flex;align-items:center;justify-content:center;width:22px;height:22px}.sb input[type=checkbox]:checked::after{font:22px codicon;content:\\\"\\\"}.g2{display:grid;grid:auto-flow auto / auto auto;gap:6px;margin:5px;place-items:center}.g2>.l{justify-self:start}.g2>.r{justify-self:end}.g2>.f{grid-column:1 / span 2;text-align:center}.hidden, .tooltip{display:none}*:hover>.tooltip{display:block;position:absolute;left:-5px;bottom:calc(100% + 5px);border:1px solid var(--welllt);background:var(--bgsec);color:var(--pri);font:14px var(--ff);padding:5px;white-space:pre}.nogrow{flex:0 1 auto !important}`;\\nexport let win=globalThis, doc=win[\\\"document\\\"], sidebar=doc.querySelector(\\\".sb\\\"),\\n  ts=()=>`[<span class=ts>${new Date().toLocaleTimeString(\\\"en-gb\\\")}</span>]`,\\n  slp=ms=>new Promise(r=>setTimeout(r,ms)),\\n  elemFromHTML=html=>new Range().createContextualFragment(html).firstElementChild;\\nif (!sidebar){\\n  sidebar=doc.body.appendChild(elemFromHTML(`<div class=\\\"sb\\\"><style>${css}</style><div class=\\\"head\\\"><a class=\\\"icon collapser\\\">\\\\ueab6</a><span class=title>box.sidebar v1.0</span></div>`));\\n  sidebar.addEventListener('keydown',e=>e.stopPropagation());\\n  sidebar.querySelector('.head').addEventListener('click',()=>{\\n    transition(()=>sidebar.classList.toggle('c'));\\n    setTimeout(()=>doc.querySelector(\\\".monaco-editor\\\")&&Object.assign(doc.querySelector(\\\".monaco-editor\\\").style,{width:\\\"0px\\\"}),255);\\n  });\\n  win._boxEdgeDetect=()=>doc.querySelectorAll('.sb .box').forEach(box=>Object.assign(box.style,{left:Math.max(Math.min(win.innerWidth-box.offsetWidth,box.offsetLeft),0)+\\\"px\\\",top:Math.max(Math.min(win.innerHeight-box.offsetHeight,box.offsetTop),0)+\\\"px\\\"}));\\n  win.addEventListener(\\\"resize\\\",win._boxEdgeDetect);\\n}\\nlet createItem=(title, content, icon, ...classes)=>{\\n  let item=sidebar.appendChild(elemFromHTML(`<div class=\\\"${classes.join(\\\" \\\")}\\\"><div class=\\\"head\\\"><a class=\\\"icon\\\">${icon}</a><span class=title>${title}</span><a class=\\\"icon collapser\\\">\\\\ueab7</a><a class=\\\"icon close\\\">\\\\ueab8</a></div><div class=\\\"body\\\">${content}</div></div>`));\\n  Object.assign(item,{\\n    head:item.querySelector(\\\".head\\\"),\\n    body:item.querySelector(\\\".body\\\"),\\n    toggleType:()=>[\\\"box\\\",\\\"sbitem\\\"].forEach(cl=>item.classList.toggle(cl)),\\n    logTarget:item.querySelector(\\\".log\\\"),\\n    log:(html, timestamp=true)=>{\\n      if (!item.logTarget) item.logTarget=item.body.appendChild(elemFromHTML(\\\"<div class=log></div>\\\"));\\n      let logEntry=item.logTarget.appendChild(elemFromHTML(`<p>${timestamp?ts():\\\"\\\"} ${html}</p>`));\\n      item.logTarget.scrollTop=item.logTarget.scrollHeight;\\n      return logEntry;\\n    },\\n    contextItems:{},\\n    addContextItem:(name,fn,cFn=()=>1)=>item.contextItems[name]={fn:fn,cFn:cFn},\\n  });\\n\\n  [[\\\"Remove Item\\\",()=>item[\\\"remove\\\"]()],\\n  [\\\"Cancel\\\",()=>0],\\n  [\\\"Float to Top\\\",()=>sidebar.querySelector(\\\".head\\\").insertAdjacentElement(\\\"afterEnd\\\",item),()=>item.classList.contains(\\\"sbitem\\\")],\\n  [\\\"Sink to Bottom\\\",()=>sidebar.appendChild(item),()=>item.classList.contains(\\\"sbitem\\\")],\\n  [\\\"Toggle Type\\\",()=>item.toggleType()]].forEach(args=>item.addContextItem(...args));\\n    \\n  item.addEventListener('mousedown',e=>item.classList.contains(\\\"box\\\")&&Object.assign(item.style,{zIndex:zIndex()}));\\n  item.head.addEventListener('mousedown',e=>{\\n    if(item.classList.contains(\\\"sbitem\\\")) return e.button||transition(()=>item.classList.toggle(\\\"c\\\"));\\n    if (e.target.tagName===\\\"A\\\") return;\\n    let x=e.clientX,y=e.clientY,l=item.offsetLeft,t=item.offsetTop;\\n    let boxDrag=e=>Object.assign(item.style,{left:Math.max(Math.min(win.innerWidth-item.offsetWidth,l+e.clientX-x),0)+\\\"px\\\",top:Math.max(Math.min(win.innerHeight-item.offsetHeight,t+e.clientY-y),0)+\\\"px\\\"});\\n    let boxDragEnd=e=>doc.removeEventListener('mouseup',boxDragEnd)||doc.removeEventListener('mousemove',boxDrag);\\n    doc.addEventListener('mouseup',boxDragEnd)||doc.addEventListener('mousemove',boxDrag);\\n  });\\n  item.head.querySelector(\\\".close\\\").addEventListener('click',e=>item[\\\"remove\\\"]());\\n  item.head.querySelector(\\\".collapser\\\").addEventListener('click',e=>item.classList.contains(\\\"box\\\")&&transition(()=>item.classList.toggle(\\\"c\\\")||win._boxEdgeDetect()));\\n  item.head.addEventListener(\\\"contextmenu\\\",e=>e.preventDefault()||contextMenu(item,e.clientX,e.clientY));\\n  Object.assign(item.style,{left:Math.floor(win.innerWidth/2-item.offsetWidth/2)+\\\"px\\\",top:Math.floor(win.innerHeight/2-item.offsetHeight/2)+\\\"px\\\",height:(item.offsetHeight||200)+\\\"px\\\",width:(item.offsetWidth||200)+\\\"px\\\",zIndex:zIndex()});\\n  return item;\\n};\\nexport let createBox=(title, content, icon=\\\"\\\\uea74\\\", ...classes)=>createItem(title, content, icon, ...classes, \\\"box\\\");\\nexport let createSidebarItem=(title, content, icon=\\\"\\\\uea74\\\", ...classes)=>createItem(title, content, icon, ...classes, \\\"sbitem\\\");\\nexport let confirm=text=>{\\n  let box=createBox(\\\"Confirmation Prompt\\\",`<div class=g2><div class=f>${text}</div><button class=r><u>Y</u>es</button><button class=l><u>N</u>o</button></div>`,\\\"\\\",\\\"prompt\\\");\\n  box.querySelector(\\\"button\\\").focus();\\n  box.addEventListener('keyup',e=>(e.key.toLowerCase()===\\\"y\\\"&&box.querySelector(\\\"button\\\").click())||(e.key.toLowerCase()===\\\"n\\\"&&box.querySelectorAll(\\\"button\\\")[1].click()));\\n  return new Promise(r=>box.querySelectorAll(\\\"button\\\").forEach((button,i)=>button.addEventListener('click',()=>box[\\\"remove\\\"](r(i==0)))));\\n};\\nexport let prompt=text=>{\\n  let box=createBox(\\\"Input Prompt\\\",`<div class=g2><div class=f>${text}</div><input class=r /><button class=l>Submit</button></div>`,\\\"\\\",\\\"prompt\\\");\\n  box.querySelector(\\\"input\\\").focus();\\n  box.querySelector(\\\"input\\\").addEventListener('keyup',e=>e.key=='Enter'&&box.querySelector(\\\"button\\\").click());\\n  return new Promise(r=>box.querySelector(\\\"button\\\").addEventListener('click',()=>box[\\\"remove\\\"](r(box.querySelector(\\\"input\\\").value))));\\n};\\nexport let select=(text,options)=>{\\n  let box=createBox(\\\"Selection Prompt\\\",`<div class=g2><div class=f>${text}</div><select class=r>${options.map(option=>`<option value=\\\"${option}\\\">${option}</option>`).join(\\\"\\\")}</select><button class=l>Submit</button></div>`,\\\"\\\",\\\"prompt\\\");\\n  box.querySelector(\\\"select\\\").focus();\\n  return new Promise(r=>box.querySelector(\\\"button\\\").addEventListener('click',()=>box[\\\"remove\\\"](r(box.querySelector(\\\"select\\\").value))));\\n};\\nexport let alert=text=>{\\n  let box=createBox(\\\"Alert Message\\\",`<div class=g2><div class=f>${text}</div><button class=f>Ok</button></div>`,\\\"\\\", \\\"prompt\\\");\\n  box.querySelector(\\\"button\\\").focus();\\n  return new Promise(r=>box.querySelector(\\\"button\\\").addEventListener('click',()=>r(box[\\\"remove\\\"]())));\\n};\\nlet contextMenu=(item,x,y)=>{\\n  if (item.classList.contains(\\\"prompt\\\")) return;\\n  let options = Object.entries(item.contextItems).filter(([name,entry])=>entry.cFn());\\n  let box=createBox(\\\"\\\",`<div class=g2><div class=f>${item.querySelector(\\\".title\\\").innerText}.context</div>${options.map(([name,entry])=>`<button class=n>${name}</button>`).join(\\\"\\\")}</div>`,\\\"\\\", \\\"contextMenu\\\");\\n  box.querySelector(\\\"button\\\").focus();\\n  Object.assign(box.style,{left:Math.max(Math.min(win.innerWidth-box.offsetWidth/2,x),box.offsetWidth/2)+\\\"px\\\",top:Math.max(Math.min(win.innerHeight-box.offsetHeight/2,y),box.offsetHeight/2)+\\\"px\\\",transform:\\\"translate(-50%, -50%)\\\"});\\n  box.querySelectorAll(\\\"button\\\").forEach(button=>button.addEventListener(\\\"click\\\",()=>box[\\\"remove\\\"](item.contextItems[button.innerText].fn())));\\n  box.addEventListener(\\\"mousedown\\\",e=>e.stopPropagation());\\n  let docFunction=()=>box[\\\"remove\\\"](doc.removeEventListener(\\\"mousedown\\\",docFunction));\\n  setTimeout(()=>doc.addEventListener(\\\"mousedown\\\",docFunction),10);\\n};\\nlet transition=fn=>{\\n  sidebar.classList.add(\\\"t\\\");\\n  fn();\\n  setTimeout(()=>sidebar.classList[\\\"remove\\\"](\\\"t\\\"),200);\\n}\\nlet zIndex=()=>Math.max(9000,...[...doc.querySelectorAll(\\\".sb .box\\\")].map(box=>box.style.zIndex))+1;\",\"filename\":\"/box/box.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":148233,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHosts, runHackScript } from 'utils.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = 'joesguns';\\n\\twhile (true) {\\n\\t\\tconst hosts = getHosts(ns, 1.75);\\n\\t\\tfor (const host of hosts) {\\n\\t\\t\\tif (host.server.hostname === 'home') continue;\\n\\t\\t\\tif (!host.threadsAvailable) continue;\\n\\t\\t\\tawait runHackScript(ns, 'weaken.js', host.server.hostname, host.threadsAvailable, target);\\n\\t\\t}\\n\\t\\tawait ns.sleep(ns.formulas.hacking.weakenTime(ns.getServer(target), ns.getPlayer()) + 100);\\n\\t}\\n}\",\"filename\":\"max_hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/227fce01-e7ff-4330-8faa-ccaf50f9c115\",\"moduleSequenceNumber\":25158},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/0f672cd3-3915-4616-89eb-72a144fe6f6e\",\"moduleSequenceNumber\":25141},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/e42bbeb5-eac1-4fea-b3dd-c71b9135a50b\",\"moduleSequenceNumber\":25142},{\"filename\":\"max_hack.js\",\"url\":\"blob:https://danielyxie.github.io/8e8acd19-8537-43df-b03b-34c8232f21a6\",\"moduleSequenceNumber\":59961}],\"dependents\":[],\"ramUsage\":6.9,\"server\":\"home\",\"moduleSequenceNumber\":148234,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { boxTailSingleton } from 'utils.js';\\n\\nconst _ = globalThis._; // lodash\\n// Global constants\\nexport const argsSchema = [\\n\\t['no-expansion', false], // If this flag is set, do not expand to new industries. Just work on what we have.\\n\\t['reserve-amount', 1e9], // Don't spend the corporation's last $billion if we can help it.\\n\\t['verbose', false],  // Print extra log messages.\\n\\t['can-accept-funding', true], // When we run low on money, should we look for outside funding?\\n\\t['can-go-public', true], // If we can't get private funding, should we go public?\\n\\t['issue-shares', 0], // If we go public, how many shares should we issue?\\n\\t['can-spend-hashes', true], // Can we spend hacknet hashes (assuming we have them)?\\n\\t['o', false],\\n\\t['mock', false], // Run the task assignment queue, but don't actually spend any money.\\n\\t['price-discovery-only', false], // Don't do any auto-buying, just try to keep the sale price balanced as high as possible. (Emulating TA2 as best we can)\\n\\t['first', 'Agriculture'], // What should we use for our first division? Agriculture works well, but others should be fine too.\\n\\t['second', 'RealEstate'], // What should we prefer for our second division? If we can't afford it, we'll buy what we can afford instead.\\n];\\n\\nconst desiredDivisions = 2; // One Material division to kickstart things, then a product division to really make money.\\n\\nconst bonusMaterials = ['Hardware', 'Robots', 'AICores', 'RealEstate'];\\nconst materialSizes = { Water: 0.05, Energy: 0.01, Food: 0.03, Plants: 0.05, Metal: 0.1, Hardware: 0.06, Chemicals: 0.05, Drugs: 0.02, Robots: 0.5, AICores: 0.1, RealEstate: 0.005 };\\nconst allMaterials = ['Water', 'Energy', 'Food', 'Plants', 'Metal', 'Hardware', 'Chemicals', 'Drugs', 'Robots', 'AICores', 'RealEstate'];\\n// Map of material (by name) to their sizes (how much space it takes in warehouse)\\nconst unlocks = ['Export', 'Smart Supply', 'Market Research - Demand', 'Market Data - Competition', 'VeChain', 'Shady Accounting', 'Government Partnership', 'Warehouse API', 'Office API'];\\nconst upgrades = ['Smart Factories', 'Smart Storage', 'DreamSense', 'Wilson Analytics', 'Nuoptimal Nootropic Injector Implants', 'Speech Processor Implants', 'Neural Accelerators', 'FocusWires', 'ABC SalesBots', 'Project Insight'];\\nconst cities = ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\nconst hqCity = 'Aevum'; // Our production industries will need a headquarters. It doesn't matter which city we use.\\nconst jobs = ['Operations', 'Engineer', 'Research & Development', 'Management', 'Business']; // Also, 'Training', but that's not a real job.\\n\\n// Classes here, since we want to use Industry shortly.\\nclass Industry {\\n\\tconstructor(name = '', robFac = 0.0, aiFac = 0.0, advFac = 0.0, sciFac = 0.0, hwFac = 0.0, reFac = 0.0, reqMats = {}, prodMats = [], makesProducts = false, startupCost = 0) {\\n\\t\\tthis.name = name;\\n\\t\\tthis.factors = {\\n\\t\\t\\tHardware: hwFac,\\n\\t\\t\\tRobots: robFac,\\n\\t\\t\\tAICores: aiFac,\\n\\t\\t\\tRealEstate: reFac,\\n\\t\\t\\tScience: sciFac,\\n\\t\\t\\tAdvertising: advFac,\\n\\t\\t};\\n\\t\\tthis.reqMats = reqMats;\\n\\t\\tthis.prodMats = prodMats;\\n\\t\\tthis.makesProducts = makesProducts;\\n\\t\\tthis.startupCost = startupCost;\\n\\t\\tthis.materialBonusPerSqMeter = {};\\n\\t\\tfor (const material of bonusMaterials) {\\n\\t\\t\\tthis.materialBonusPerSqMeter[material] = this.factors[material] / materialSizes[material];\\n\\t\\t}\\n\\t\\tlet scaleFactor = Object.values(this.materialBonusPerSqMeter).reduce((sum, prod) => sum + prod, 0);\\n\\t\\tthis.scaledMaterialBonus = {};\\n\\t\\tfor (const material of bonusMaterials) {\\n\\t\\t\\tthis.scaledMaterialBonus[material] = this.materialBonusPerSqMeter[material] / scaleFactor;\\n\\t\\t}\\n\\t}\\n\\tstatic fromObject(obj) {\\n\\t\\treturn new Industry(obj.name, obj.robFac, obj.aiFac, obj.advFac, obj.sciFac, obj.hwFac, obj.reFac, obj.reqMats, obj.prodMats, obj.makesProducts, obj.startupCost);\\n\\t}\\n}\\nclass Task {\\n\\t/**\\n\\t * A Task that we will try to run later.\\n\\t * @param {string} name Human readable name of the task to be run.\\n\\t * @param {function} run callback to run the task.\\n\\t * @param {number} cost allocated budget for this task\\n\\t * @param {number} priority priority, higher number is a higher priority\\n\\t */\\n\\tconstructor(name, run, cost = 0, priority = 0) {\\n\\t\\tthis.name = name;\\n\\t\\tthis.run = run;\\n\\t\\tthis.cost = cost;\\n\\t\\tthis.priority = priority; // Higher will be done sooner.\\n\\t}\\n}\\n\\n// Industry and Material data copied from Bitburner's code on February 10, 2022. (https://github.com/danielyxie/bitburner/blob/dev/src/Corporation/Industry.ts) with startupCost added manually.\\n/** @type {Industry[]} */\\nconst industries = [\\n\\tIndustry.fromObject({ name: 'Agriculture', reFac: 0.72, sciFac: 0.5, hwFac: 0.2, robFac: 0.3, aiFac: 0.3, advFac: 0.04, reqMats: { Water: 0.5, Energy: 0.5 }, prodMats: ['Plants', 'Food'], startupCost: 40e9 }),\\n\\tIndustry.fromObject({ name: 'Chemical', reFac: 0.25, sciFac: 0.75, hwFac: 0.2, robFac: 0.25, aiFac: 0.2, advFac: 0.07, reqMats: { Plants: 1, Energy: 0.5, Water: 0.5 }, prodMats: ['Chemicals'], startupCost: 70e9 }),\\n\\tIndustry.fromObject({ name: 'Fishing', reFac: 0.15, sciFac: 0.35, hwFac: 0.35, robFac: 0.5, aiFac: 0.2, advFac: 0.08, reqMats: { Energy: 0.5 }, prodMats: ['Food'], startupCost: 80e9 }),\\n\\tIndustry.fromObject({ name: 'Utilities', reFac: 0.5, sciFac: 0.6, robFac: 0.4, aiFac: 0.4, advFac: 0.08, reqMats: { Hardware: 0.1, Metal: 0.1 }, prodMats: ['Water'], startupCost: 150e9 }),\\n\\tIndustry.fromObject({ name: 'Energy', reFac: 0.65, sciFac: 0.7, robFac: 0.05, aiFac: 0.3, advFac: 0.08, reqMats: { Hardware: 0.1, Metal: 0.2 }, prodMats: ['Energy'], startupCost: 225e9 }),\\n\\tIndustry.fromObject({ name: 'Mining', reFac: 0.3, sciFac: 0.26, hwFac: 0.4, robFac: 0.45, aiFac: 0.45, advFac: 0.06, reqMats: { Energy: 0.8 }, prodMats: ['Metal'], startupCost: 300e9 }),\\n\\t//reFac is unique for 'Food' bc it diminishes greatly per city. Handle this separately in code?\\n\\tIndustry.fromObject({ name: 'Food', sciFac: 0.12, hwFac: 0.15, robFac: 0.3, aiFac: 0.25, advFac: 0.25, reFac: 0.05, reqMats: { Food: 0.5, Water: 0.5, Energy: 0.2 }, makesProducts: true, startupCost: 10e9 }),\\n\\tIndustry.fromObject({ name: 'Tobacco', reFac: 0.15, sciFac: 0.75, hwFac: 0.15, robFac: 0.2, aiFac: 0.15, advFac: 0.2, reqMats: { Plants: 1, Water: 0.2 }, makesProducts: true, startupCost: 20e9 }),\\n\\tIndustry.fromObject({ name: 'Software', sciFac: 0.62, advFac: 0.16, hwFac: 0.25, reFac: 0.15, aiFac: 0.18, robFac: 0.05, reqMats: { Hardware: 0.5, Energy: 0.5 }, prodMats: ['AICores'], makesProducts: true, startupCost: 25e9 }),\\n\\tIndustry.fromObject({ name: 'Pharmaceutical', reFac: 0.05, sciFac: 0.8, hwFac: 0.15, robFac: 0.25, aiFac: 0.2, advFac: 0.16, reqMats: { Chemicals: 2, Energy: 1, Water: 0.5 }, prodMats: ['Drugs'], makesProducts: true, startupCost: 200e9 }),\\n\\tIndustry.fromObject({ name: 'Computer', reFac: 0.2, sciFac: 0.62, robFac: 0.36, aiFac: 0.19, advFac: 0.17, reqMats: { Metal: 2, Energy: 1 }, prodMats: ['Hardware'], makesProducts: true, startupCost: 500e9 }),\\n\\tIndustry.fromObject({ name: 'RealEstate', robFac: 0.6, aiFac: 0.6, advFac: 0.25, sciFac: 0.05, hwFac: 0.05, reqMats: { Metal: 5, Energy: 5, Water: 2, Hardware: 4 }, prodMats: ['RealEstate'], makesProducts: true, startupCost: 600e9 }),\\n\\tIndustry.fromObject({ name: 'Healthcare', reFac: 0.1, sciFac: 0.75, advFac: 0.11, hwFac: 0.1, robFac: 0.1, aiFac: 0.1, reqMats: { Robots: 10, AICores: 5, Energy: 5, Water: 5 }, makesProducts: true, startupCost: 750e9 }),\\n\\tIndustry.fromObject({ name: 'Robotics', reFac: 0.32, sciFac: 0.65, aiFac: 0.36, advFac: 0.18, hwFac: 0.19, reqMats: { Hardware: 5, Energy: 3 }, prodMats: ['Robots'], makesProducts: true, startupCost: 1e12 }),\\n];\\n\\n// Global state\\n/** @type {CorporationInfo} */\\nlet myCorporation;\\nlet options;\\nlet verbose;\\nlet raisingCapital = 0; // Used to flag that we are trying to raise private funding\\nlet extraReserve = 0; // Used when we're saving to fund a new product.\\nlet fillSpaceQueue = []; // Flag these offices as needing workers assigned to roles.\\n\\nexport function autocomplete(data, _) {\\n\\tdata.flags(argsSchema);\\n\\treturn [];\\n}\\nlet c;\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tc = ns.corporation;\\n\\t// Pull in any information we only need at startup.\\n\\toptions = ns.flags(argsSchema);\\n\\tverbose = options.verbose;\\n\\n\\tlet createCorp = false;\\n\\t// See if we've already created a corporation.\\n\\ttry {\\n\\t\\tmyCorporation = c.getCorporation();\\n\\t} catch {\\n\\t\\tcreateCorp = true;\\n\\t}\\n\\tif (createCorp) {\\n\\t\\ttry {\\n\\t\\t\\tc.createCorporation('corp', true);\\n\\t\\t\\tmyCorporation = c.getCorporation();\\n\\t\\t} catch {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t}\\n\\tawait ns.write('/tmp/incorp.txt', '', 'w');\\n\\tboxTailSingleton(ns, 'corp', '🏠', '400px');\\n\\tns.clearLog();\\n\\t// If we already have a corporation, make sure we didn't leave any workers waiting for assignment.\\n\\tfor (const division of myCorporation.divisions) {\\n\\t\\tfor (const city of division.cities) {\\n\\t\\t\\tfillSpaceQueue.push(`${division.name}/${city}`);\\n\\t\\t}\\n\\t}\\n\\n\\t// We've set up the initial corporation, now run it over time.\\n\\twhile (true) {\\n\\t\\t// Do all our spending and expanding.\\n\\t\\tawait doManageCorporation(ns);\\n\\n\\t\\t// Try to manage sale prices for products.\\n\\t\\tawait doPriceDiscovery(ns);\\n\\n\\t\\t// While we wait for the next tick, process any open office positions\\n\\t\\tawait fillOpenPositionsFromQueue(ns);\\n\\n\\t\\t// Sleep until the next time we go into the 'START' phase\\n\\t\\tawait sleepWhileNotInStartState(ns, true);\\n\\n\\t\\tif (verbose) log(ns, ``);\\n\\t}\\n}\\n\\n/**\\n * This function is called in our main loop. Assess the current state of the corporation, and improve it as best we can.\\n * @param {NS} ns\\n **/\\nasync function doManageCorporation(ns) {\\n\\t// Assess the current state of the corporation, and figure out our budget.\\n\\tmyCorporation = c.getCorporation();\\n\\tlet netIncome = myCorporation.revenue - myCorporation.expenses;\\n\\tlet now = new Date().toLocaleString('en-US', { hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: true });\\n\\n\\tif (verbose) log(ns, `----- [ ${myCorporation.name} Quarterly Report ${now} ] -----`);\\n\\tlog(ns, `Corporate cash on hand: ${ns.nFormat(myCorporation.funds, '0.0a')} (Gross: ${ns.nFormat(myCorporation.revenue, '0.0a')}/s, Net: ${ns.nFormat(netIncome, '0.0a')}/s)`);\\n\\n\\t// See if we can raise more money.\\n\\tawait tryRaiseCapital(ns);\\n\\n\\tmyCorporation = c.getCorporation();\\n\\tlet budget = myCorporation.funds - options['reserve-amount'] - extraReserve;\\n\\t// If we're making more than $1 sextillion / sec, we need to stop. The game gets slow if we start employing too many people.\\n\\tif (myCorporation.revenue > 1e21) budget = 0;\\n\\tbudget = Math.max(0, budget);\\n\\tif (verbose) log(ns, `Working with a corporate budget of ${ns.nFormat(budget, '0.0a')}`);\\n\\n\\t// Let's figure out all of the things we'd like to do, before we commit to anything.\\n\\tlet tasks = [];\\n\\t/**\\n\\t * What sort of corporation-wide stuff would we like to do?\\n\\t * Buy Unlocks? Buy upgrades?\\n\\t */\\n\\tlet availableUnlocks = [];\\n\\tconst purchasedUnlocks = [];\\n\\tfor (const unlockable of unlocks) {\\n\\t\\tif (c.hasUnlockUpgrade(unlockable)) purchasedUnlocks.push(unlockable);\\n\\t\\telse availableUnlocks.push(unlockable);\\n\\t}\\n\\tfor (const unlockable of availableUnlocks) {\\n\\t\\tlet cost = c.getUnlockUpgradeCost(unlockable);\\n\\t\\tif (cost > budget) continue;\\n\\t\\t// If we can afford it, and we don't have it yet, consider buying it.\\n\\t\\tlet shouldBuy = false;\\n\\t\\tif (unlockable === 'Smart Supply' && cost < budget * 0.8) {\\n\\t\\t\\t// Push this one to the top of the list. Doing it in code is annoying.\\n\\t\\t\\ttasks.push(new Task('Unlock ' + unlockable, () => c.unlockUpgrade(unlockable), cost, 110));\\n\\t\\t} else if (unlockable === 'Shady Accounting' && cost < budget * 0.5) shouldBuy = true;\\n\\t\\telse if (unlockable === 'Government Partnership' && cost < budget * 0.5) shouldBuy = true;\\n\\t\\t// else if (unlockable === 'Export' && cost < budget * 0.1) shouldBuy = true;\\n\\n\\t\\t// Put the task on our to-do list. Put all unlocks at priority 0 as \\\"nice-to-haves\\\".\\n\\t\\tif (shouldBuy) tasks.push(new Task('Unlock ' + unlockable, () => c.unlockUpgrade(unlockable), cost, 0));\\n\\t}\\n\\n\\tlet hasProductionDivision = false;\\n\\tfor (const division of myCorporation.divisions) {\\n\\t\\tlet industry = industries.find((i) => i.name === division.type);\\n\\t\\tif (industry.makesProducts) hasProductionDivision = true;\\n\\t}\\n\\t// Can we afford to level any upgrades?\\n\\tfor (const upgrade of upgrades) {\\n\\t\\tlet cost = c.getUpgradeLevelCost(upgrade);\\n\\t\\tlet nextLevel = c.getUpgradeLevel(upgrade) + 1;\\n\\t\\tif (cost > budget) continue;\\n\\t\\tif (upgrade === 'Wilson Analytics' && cost < budget * 0.9 && hasProductionDivision) {\\n\\t\\t\\t// Analytics fuels advertising, which drives up the price of products, which generates profits.\\n\\t\\t\\t// Scale the priority based on how cheap this is (cheaper is higher priority [0-100]).\\n\\t\\t\\tlet priority = Math.round((1 - cost / budget) * 100);\\n\\t\\t\\ttasks.push(new Task(`Upgrading '${upgrade}' to level ${nextLevel}`, () => c.levelUpgrade(upgrade), cost, priority));\\n\\t\\t} else if (['Smart Factories', 'Smart Storage'].includes(upgrade) && cost < budget * 0.1) {\\n\\t\\t\\t// More storage means more materials, which drives more production. More production means more sales.\\n\\t\\t\\ttasks.push(new Task(`Upgrading '${upgrade}' to level ${nextLevel}`, () => c.levelUpgrade(upgrade), cost, 10));\\n\\t\\t} else if (cost < budget * 0.01) {\\n\\t\\t\\t// Upgrade other stuff too, as long as it's cheap compared to our budget.\\n\\t\\t\\ttasks.push(new Task(`Upgrading '${upgrade}' to level ${nextLevel}`, () => c.levelUpgrade(upgrade), cost, 1));\\n\\t\\t}\\n\\t}\\n\\t/**\\n\\t * Let's take a look at our divisions for big problems. Do we need to expand to a new industry? Are any\\n\\t * of our existing industries showing a loss? What else might we need to consider here? We'll be looking\\n\\t * at every division at the end of the loop to do maintenance, so this is just high level stuff.\\n\\t */\\n\\tif (myCorporation.divisions.length === 0) {\\n\\t\\t// We definitely need a new division!\\n\\t\\t// Use up to 80% of our budget to start this first division.\\n\\t\\tlet newDivisionBudget = budget * 0.9;\\n\\t\\t// Just consider the basic materials-producing industries for our first division. Products take a long time to come online.\\n\\t\\tlet possibleIndustries = industries.filter((ind) => !ind.makesProducts);\\n\\t\\t// And only the ones where we'll be able to spend at least half our budget setting up shop.\\n\\t\\tpossibleIndustries = possibleIndustries.filter((ind) => ind.startupCost < newDivisionBudget * 0.5);\\n\\t\\t// TODO: Pick a starting industry using some sort of logic.\\n\\t\\t// For the moment, let's just try to go with Agriculture. It's cheap and works well.\\n\\t\\tlet newIndustry = possibleIndustries.find((ind) => ind.name === options['first']);\\n\\t\\tif (newIndustry) {\\n\\t\\t\\ttasks.push(new Task(`Add the first division, '${newIndustry.name}'`, () => doCreateNewDivision(ns, newIndustry, newDivisionBudget), newDivisionBudget, 100));\\n\\t\\t} else {\\n\\t\\t\\t// If we can't afford to create our first industry, something has gone very wrong. Quit now.\\n\\t\\t\\tlog(ns, `ERROR: Could not afford to create our first industry!`, 'error', true);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\t}\\n\\t// Figure out where we are in the fundraising progression. Don't buy a production industry until after accepting round 3.\\n\\tlet offer = c.getInvestmentOffer();\\n\\tif (myCorporation.divisions.length > 0 && myCorporation.divisions.length < desiredDivisions && offer.round > 3) {\\n\\t\\tlet newDivisionBudget = budget * 0.9;\\n\\t\\tlet possibleIndustries = industries.filter((ind) => ind.makesProducts);\\n\\t\\t// Only consider industries where we can still have a budget to actually get started.\\n\\t\\tpossibleIndustries = possibleIndustries.filter((ind) => ind.startupCost < budget * 0.5);\\n\\t\\tpossibleIndustries.sort((a, b) => a.startupCost - b.startupCost).reverse();\\n\\t\\tif (verbose && possibleIndustries.length) {\\n\\t\\t\\tlog(ns, `We would like to expand into a new industry. Possibilities:`);\\n\\t\\t\\tfor (const industry of possibleIndustries) {\\n\\t\\t\\t\\tlog(ns, `  ${ns.nFormat(industry.startupCost, '0.0a')} - ${industry.name}`);\\n\\t\\t\\t}\\n\\t\\t} else if (verbose) log(ns, `INFO: We would like to create a new division but we cannot afford one. Willing to spend ${ns.nFormat(budget, '0.0a')}.`);\\n\\n\\t\\t// Try to use the industry from the command line. If that doesn't work, fall back to picking from our list of possibilities.\\n\\t\\t//        let newIndustry = possibleIndustries.find((ind) => ind.name == 'Pharmaceutical');\\n\\t\\tlet newIndustry = possibleIndustries.find((ind) => ind.name === options['second']);\\n\\t\\tif (!newIndustry && possibleIndustries.length > 0) {\\n\\t\\t\\tnewIndustry = possibleIndustries[0];\\n\\t\\t}\\n\\t\\tif (newIndustry) {\\n\\t\\t\\ttasks.push(new Task(`Add a production division, '${newIndustry.name}'`, () => doCreateNewDivision(ns, newIndustry, newDivisionBudget), newDivisionBudget, 100));\\n\\t\\t} else {\\n\\t\\t\\tlog(ns, `ERROR: Buying industry failed. Aborting!`, 'error', true);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\t}\\n\\n\\t// If we have all of our divisions bought, it's worth spending hashes on research.\\n\\t// if (myCorporation.divisions.length >= desiredDivisions) {\\n\\t// \\tif (options['can-spend-hashes'])\\n\\t// \\t\\tawait doSpendHashes(ns, 'Exchange for Corporation Research');\\n\\t// }\\n\\n\\t/**\\n\\t * We've looked at the at the corporation, and come up with a list of tasks we'd like to do. Now, figure out\\n\\t * which ones we can actually accomplish on our budget.\\n\\t */\\n\\ttasks.sort((a, b) => a.cost - b.cost).reverse();\\n\\ttasks.sort((a, b) => a.priority - b.priority).reverse();\\n\\t/**\\n\\t * Finally, run each task in priority order. If we run out of money, should we buy lower priority stuff, or\\n\\t * wait? If we wait, the money might get spent expanding a division instead. This may all take some\\n\\t * adjustments over time.\\n\\t */\\n\\tlet spent = await runTasks(ns, tasks, budget);\\n\\tif (spent) budget -= spent;\\n\\tif (spent > 0 && verbose) log(ns, `Spent ${ns.nFormat(spent, '0.0a')} of our budget of ${ns.nFormat(budget, '0.0a')}.`);\\n\\n\\t/**\\n\\t * Even though we've done all of our desired high level tasks, we still need to tend to each division individually.\\n\\t * If we don't have all the automation bits, we may need to adjust pricing. If we have room in warehouses, we can buy\\n\\t * more materials. If we have products, we may be able to start on a new product. We may have research to spend.\\n\\t */\\n\\tfor (const division of myCorporation.divisions) {\\n\\t\\t// If we have multiple divisions, hold the lion's share of the budget for production industries.\\n\\t\\tlet industry = industries.find((ind) => ind.name === division.type);\\n\\t\\tlet divisionalBudget = budget;\\n\\t\\tif (myCorporation.divisions.length > 1 && !industry.makesProducts) {\\n\\t\\t\\tdivisionalBudget *= 0.05;\\n\\t\\t}\\n\\t\\tlet spent = await doManageDivision(ns, division, divisionalBudget);\\n\\t\\tif (spent) budget -= spent;\\n\\t}\\n}\\n\\n/**\\n * Try to raise money.\\n * Advances through the funding rounds, eventually going public. Potentially spends hacknet hashes for money.\\n * @param {NS} ns\\n */\\nasync function tryRaiseCapital(ns) {\\n\\t// First, spend hacknet hashes.\\n\\t// if (options['can-spend-hashes'] && myCorporation.funds < 10e9)\\n\\t// \\tawait doSpendHashes(ns, 'Sell for Corporation Funds');\\n\\t// If we're not public, then raise private funding.\\n\\tif (!myCorporation.public) {\\n\\t\\tlet offer = c.getInvestmentOffer();\\n\\t\\t// If we've finished round 4, clear our raising capital flag.\\n\\t\\tif (offer.round > 4) raisingCapital = 0;\\n\\t\\tlet willAccept = true;\\n\\t\\tif (offer && offer.round <= 4) {\\n\\t\\t\\tlog(ns, `Considering raising private capital round ${offer.round}. Offered ${ns.nFormat(offer.funds, '0.0a')} for ${offer.shares} shares.`);\\n\\n\\t\\t\\t// Make sure all employees are happy.\\n\\t\\t\\tlet satisfied = allEmployeesSatisfied(ns);\\n\\t\\t\\tif (!satisfied) {\\n\\t\\t\\t\\tlet prefix = '    *';\\n\\t\\t\\t\\tif (!willAccept) prefix = '     ';\\n\\t\\t\\t\\tlog(ns, `${prefix}  Round ${offer.round} financing waiting on employee stats to stabilize.`);\\n\\t\\t\\t\\twillAccept = false;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Make sure we have filled a reasonable amount of our warehouses with materials.\\n\\t\\t\\tfor (const division of myCorporation.divisions) {\\n\\t\\t\\t\\tlet industry = industries.find((i) => i.name === division.type);\\n\\t\\t\\t\\tfor (const city of division.cities) {\\n\\t\\t\\t\\t\\tif (!c.hasWarehouse(division.name, city)) continue;\\n\\t\\t\\t\\t\\tlet warehouse = c.getWarehouse(division.name, city);\\n\\t\\t\\t\\t\\tlet warehouseSpaceRequiredForCycle = getReservedWarehouseSpace(ns, industry, division, city);\\n\\t\\t\\t\\t\\tlet warehouseSpaceAvailable = warehouse.size - warehouseSpaceRequiredForCycle - warehouse.sizeUsed;\\n\\t\\t\\t\\t\\tif (warehouseSpaceAvailable > warehouseSpaceRequiredForCycle * 0.2) {\\n\\t\\t\\t\\t\\t\\tlet prefix = '    *';\\n\\t\\t\\t\\t\\t\\tif (!willAccept) prefix = '     ';\\n\\t\\t\\t\\t\\t\\tlog(ns, `${prefix}  Round ${offer.round} financing waiting on ${division.name} warehouses to gain materials.`);\\n\\t\\t\\t\\t\\t\\twillAccept = false;\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t// If we have a product division, make sure it has a maximum number of products before we accept the offer.\\n\\t\\t\\tfor (const division of myCorporation.divisions) {\\n\\t\\t\\t\\tconst maxProducts = getMaxProducts(ns, division.name);\\n\\t\\t\\t\\tlet industry = industries.find((i) => i.name === division.type);\\n\\t\\t\\t\\tif (industry.makesProducts && division.products.length < maxProducts) {\\n\\t\\t\\t\\t\\tlet prefix = '    *';\\n\\t\\t\\t\\t\\tif (!willAccept) prefix = '     ';\\n\\t\\t\\t\\t\\tlog(ns, `${prefix}  Round ${offer.round} financing waiting on ${division.name} division to create products (${division.products.length}/${maxProducts})`);\\n\\t\\t\\t\\t\\twillAccept = false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (offer.round >= 4 && industry.makesProducts) {\\n\\t\\t\\t\\t\\t// Wait for the last product to finish researching\\n\\t\\t\\t\\t\\tlet completeProducts = division.products.map((prodName) => c.getProduct(division.name, prodName)).filter((prod) => prod.developmentProgress >= 100);\\n\\t\\t\\t\\t\\tif (completeProducts.length < maxProducts) {\\n\\t\\t\\t\\t\\t\\tlet prefix = '    *';\\n\\t\\t\\t\\t\\t\\tif (!willAccept) prefix = '     ';\\n\\t\\t\\t\\t\\t\\tlog(ns, `${prefix}  Round ${offer.round} financing waiting on ${division.name} division to complete products (${completeProducts.length}/${maxProducts})`);\\n\\t\\t\\t\\t\\t\\twillAccept = false;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t// TODO: Funding is proportional to revenue. We can cook the books so that revenue looks higher than it should by stockpiling goods, then selling them all at once.\\n\\n\\t\\t\\t// Make sure we aren't spending money on materials when we get funding. Each time we come through the loop and would purchase, increment the counter. After 4 times, purchase.\\n\\t\\t\\tif (willAccept) raisingCapital++;\\n\\t\\t\\telse raisingCapital = 0;\\n\\n\\t\\t\\t// If we've passed all the checks, then accept the next round of funding.\\n\\t\\t\\tif (options['can-accept-funding'] && raisingCapital > 4 && !options.mock) {\\n\\t\\t\\t\\tlet success = c.acceptInvestmentOffer();\\n\\t\\t\\t\\traisingCapital = 0;\\n\\t\\t\\t\\tif (success) log(ns, `WARNING: Accepted round ${offer.round} funding. Took ${ns.nFormat(offer.funds, '0.0a')} for ${offer.shares} shares.`);\\n\\t\\t\\t\\telse log(ns, `ERROR: Tried to accept round ${offer.round} funding, but something went wrong.`);\\n\\t\\t\\t} else if (options['can-accept-funding'] && raisingCapital > 0) {\\n\\t\\t\\t\\tlog(ns, `SUCCESS: Raising capital in ${5 - raisingCapital} cycles.`);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\t// We're public, so we can't be raising capital.\\n\\t\\t\\traisingCapital = 0;\\n\\t\\t}\\n\\t\\t// Finally, if we're out of private funding, we may as well go public\\n\\t\\toffer = c.getInvestmentOffer();\\n\\t\\tif (options['can-go-public'] && !options.mock && offer.round > 4) {\\n\\t\\t\\t// Looks like we're out of private funding. Time to go public.\\n\\t\\t\\tlog(ns, `SUCCESS: Private funding complete. Time to IPO. Selling ${options['issue-shares']} shares.`);\\n\\t\\t\\tc.goPublic(options['issue-shares']);\\n\\t\\t\\t// and set our dividend to 10%\\n\\t\\t\\tc.issueDividends(0.1);\\n\\t\\t}\\n\\t} else {\\n\\t\\t// We're public, so we can't be raising capital.\\n\\t\\traisingCapital = 0;\\n\\t}\\n}\\n\\n/**\\n * Do all employees have enough happiness, energy, and morale?\\n * @param {NS} ns\\n * @param {number} lowerLimit - minimum for all stats [0,1]\\n * @returns {boolean}\\n */\\nfunction allEmployeesSatisfied(ns, lowerLimit = 0.9995) {\\n\\tlet allSatisfied = true;\\n\\tfor (const division of myCorporation.divisions) {\\n\\t\\tfor (const city of division.cities) {\\n\\t\\t\\tlet office = c.getOffice(division.name, city);\\n\\t\\t\\tlet employees = office.employees.map((e) => c.getEmployee(division.name, city, e));\\n\\t\\t\\tlet avgMorale = employees.map((e) => e.mor).reduce((sum, mor) => sum + mor, 0) / employees.length;\\n\\t\\t\\tlet avgEnergy = employees.map((e) => e.ene).reduce((sum, ene) => sum + ene, 0) / employees.length;\\n\\t\\t\\tlet avgHappiness = employees.map((e) => e.hap).reduce((sum, hap) => sum + hap, 0) / employees.length;\\n\\t\\t\\tif (avgEnergy < office.maxEne * lowerLimit || avgHappiness < office.maxHap * lowerLimit || avgMorale < office.maxMor * lowerLimit) {\\n\\t\\t\\t\\tallSatisfied = false;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn allSatisfied;\\n}\\n\\n/**\\n * Given a list of tasks, execute them in order.\\n * @param {NS} ns\\n * @param {Task[]} tasks\\n * @param {number} budget\\n * @param {boolean} keepSpending Should we keep spending money on items further down the list after hitting an item we can't afford?\\n * @returns {number} the amount spent.\\n */\\nasync function runTasks(ns, tasks, budget, keepSpending = true) {\\n\\tconst startingBudget = budget;\\n\\tfor (const task of tasks) {\\n\\t\\tlet success = false;\\n\\t\\tif (budget - task.cost > 0) {\\n\\t\\t\\tlog(ns, `  Spending ${ns.nFormat(task.cost, '0.0a')} on ${task.name}`);\\n\\t\\t\\t// Some of the ns.corporation calls we use are void functions, so treat a return value of undefined with no exception as a success.\\n\\t\\t\\tif (!options.mock)\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tsuccess = await task.run();\\n\\t\\t\\t\\t\\tif (success === undefined) success = true;\\n\\t\\t\\t\\t} catch (e) {\\n\\t\\t\\t\\t\\tlog(ns, `WARNING: Failed to execute ${task.name} - ${task.run}`);\\n\\t\\t\\t\\t\\tlog(ns, `WARNING: ${e}`);\\n\\t\\t\\t\\t}\\n\\t\\t\\tif (success) budget -= task.cost;\\n\\t\\t}\\n\\t\\tif (!success && !keepSpending) break;\\n\\t}\\n\\treturn startingBudget - budget;\\n}\\n\\n/**\\n * Create a bare bones new division, then use any remaining money to set it up.\\n * @param {NS} ns\\n * @param {*} newIndustry\\n * @param {number} newDivisionBudget\\n * @returns {boolean} true if we created the new division, false if not.\\n */\\nasync function doCreateNewDivision(ns, newIndustry, newDivisionBudget) {\\n\\tif (options['no-expansion'] || options['mock']) return false;\\n\\tmyCorporation = c.getCorporation();\\n\\tlet numDivisions = myCorporation.divisions.length;\\n\\n\\tc.expandIndustry(newIndustry.name, newIndustry.name);\\n\\n\\tmyCorporation = c.getCorporation();\\n\\tif (numDivisions === myCorporation.divisions.length) {\\n\\t\\tlog(ns, `ERROR: Failed to create new division! Expected to create '${newIndustry.name}'.`, 'error', true);\\n\\t\\tns.exit();\\n\\t}\\n\\tnewDivisionBudget -= newIndustry.startupCost;\\n\\tif (verbose) log(ns, `Spending ${ns.nFormat(newIndustry.startupCost, '0.0a')} setting up a new '${newIndustry.name}' division.`);\\n\\tlet newDivision = c.getDivision(newIndustry.name);\\n\\n\\t// Hire the first three employees in Sector-12\\n\\tfillSpaceQueue.push(`${newDivision.name}/Sector-12`);\\n\\n\\t// Do the first round of purchasing now.\\n\\tawait doManageDivision(ns, newDivision, newDivisionBudget);\\n\\tif (newDivision) return true;\\n\\telse return false;\\n}\\n\\n/**\\n * Given an existing division, try to allocate our budget to growing the business.\\n * @param {NS} ns\\n * @param {Division} division division from ns.corporation.getDivision()\\n * @param {number} budget amount we can spend\\n * @returns {number} the amount we spent while managing this division.\\n */\\nasync function doManageDivision(ns, division, budget) {\\n\\tmyCorporation = c.getCorporation();\\n\\tconst industry = industries.find((ind) => ind.name === division.type);\\n\\tbudget = Math.max(0, budget);\\n\\tconst totalBudget = budget;\\n\\n\\t/**\\n\\t * Take stock of the current state of this division. Just like at the corporate level,\\n\\t * collect some tasks that we'd like to do, then see what we can execute. Don't worry too\\n\\t * much about spending the whole budget. Anything we don't spend now will get passed on\\n\\t * to other divisions, or recycled in the next pass.\\n\\t */\\n\\tif (verbose) log(ns, `Managing ${division.name} division with a budget of ${ns.nFormat(budget, '0.0a')}.`);\\n\\tlet spent = 0;\\n\\tlet tasks = [];\\n\\n\\t// Can we expand to new cities?\\n\\tif (division.cities.length < cities.length) {\\n\\t\\t// We aren't in all cities yet, so we want to expand.\\n\\t\\tfor (const city of cities) {\\n\\t\\t\\tif (!division.cities.includes(city)) {\\n\\t\\t\\t\\tlet cost = c.getExpandCityCost();\\n\\t\\t\\t\\tif (cost < budget * 0.25) {\\n\\t\\t\\t\\t\\tif (verbose) log(ns, `Want to open new offices in ${city}.`);\\n\\t\\t\\t\\t\\ttasks.push(new Task(`Expand ${division.name} to ${city}`, () => doExpandCity(ns, division.name, city), cost, 80));\\n\\t\\t\\t\\t} else if (verbose) log(ns, `WARNING: We would like to expand to ${city}, but it would cost ${ns.nFormat(cost, '0.0a')} on our budget of ${ns.nFormat(budget, '0.0a')}.`);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// Go ahead and expand immediately, so we can buy other stuff for any new locations on this cycle.\\n\\tif (tasks.length > 0) {\\n\\t\\tspent = await runTasks(ns, tasks, budget);\\n\\t\\tbudget -= spent;\\n\\t\\ttasks = [];\\n\\t}\\n\\t// Update our status\\n\\tmyCorporation = c.getCorporation();\\n\\tdivision = c.getDivision(division.name);\\n\\tlet hasMarketTA2 = c.hasResearched(division.name, 'Market-TA.II');\\n\\n\\t// Division wide tasks\\n\\t// Can we buy advertising? This is how we go exponential in our production industry.\\n\\tlet adCount = c.getHireAdVertCount(division.name);\\n\\tlet adPrice = c.getHireAdVertCost(division.name);\\n\\tif (industry.makesProducts && adPrice < budget * 0.9) {\\n\\t\\ttasks.push(new Task(`Buy advertising campaign #${adCount + 1} for ${division.name}`, () => c.hireAdVert(division.name), adPrice, 60));\\n\\t\\tadCount++;\\n\\t}\\n\\t// Buy the first advertising campaign for non-product industries\\n\\tif (adCount === 0 && !industry.makesProducts && adPrice < budget * 0.9) {\\n\\t\\t// Buy one advertising campaign in material markets\\n\\t\\ttasks.push(new Task(`Buy advertising campaign #${adCount + 1} for ${division.name}`, () => c.hireAdVert(division.name), adPrice, 60));\\n\\t}\\n\\t// Consider buying more advertising. All industires with MarketTA2, or a second one for production industries.\\n\\tif ((industry.makesProducts || hasMarketTA2) && adPrice < budget * 0.5) {\\n\\t\\ttasks.push(new Task(`Buy advertising campaign #${adCount + 1} for ${division.name}`, () => c.hireAdVert(division.name), adPrice, 20));\\n\\t}\\n\\n\\t// Should we spend any research?\\n\\tlet researchToSpend = division.research;\\n\\tif (industry.makesProducts || hasMarketTA2) {\\n\\t\\t// Willing to spend in inverse proportion to how much stored science helps this product.\\n\\t\\tresearchToSpend = division.research * (1 - industry.factors.Science);\\n\\t}\\n\\tlet researchTypes = ['Hi-Tech R&D Laboratory', 'uPgrade: Fulcrum', 'uPgrade: Capacity.I', 'uPgrade: Capacity.II', 'Market-TA.I', 'Market-TA.II'];\\n\\tfor (const researchType of researchTypes) {\\n\\t\\tlet hasResearch = false;\\n\\t\\tlet cost = Infinity;\\n\\t\\ttry {\\n\\t\\t\\thasResearch = c.hasResearched(division.name, researchType);\\n\\t\\t\\tcost = c.getResearchCost(division.name, researchType);\\n\\t\\t} catch { }\\n\\t\\tif (!hasResearch && researchToSpend >= cost) {\\n\\t\\t\\tlog(ns, `INFO: Buying research project ${researchType} for ${cost} research points.`, 'info');\\n\\t\\t\\tc.research(division.name, researchType);\\n\\t\\t\\tresearchToSpend -= cost;\\n\\t\\t} else if (!hasResearch && cost !== Infinity) {\\n\\t\\t\\tif (verbose) log(ns, `Considered spending up to ${researchToSpend} of ${division.research} research on '${researchType}' but it would cost ${cost}.`);\\n\\t\\t\\t// If we don't have this research, and can't afford to buy it, don't buy the next item on the list\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\t// If this is a production industry, see if we should be researching a new product.\\n\\tif (industry.makesProducts) {\\n\\t\\tconst maxProducts = getMaxProducts(ns, division.name);\\n\\t\\tlet products = division.products.map((p) => c.getProduct(division.name, p));\\n\\t\\tlet progress = products.map((p) => p.developmentProgress).filter((cmp) => cmp < 100)[0];\\n\\t\\tif (progress === undefined) progress = 100;\\n\\t\\tif (verbose) log(ns, `Projects: ${products.length}/${maxProducts}. Current project: ${progress}% complete.`);\\n\\t\\tif (progress === 100) {\\n\\t\\t\\t// No product being researched. Consider creating a new one.\\n\\t\\t\\tif (products.length < maxProducts) {\\n\\t\\t\\t\\t// We're not full, so go ahead.\\n\\t\\t\\t\\tspent += createNewProduct(ns, division);\\n\\t\\t\\t\\tbudget -= spent;\\n\\t\\t\\t} // Discontinue an existing product for a new one if we're not raising capital.\\n\\t\\t\\telse {\\n\\t\\t\\t\\t// log(ns, `Considering creating a new product. rC: ${raisingCapital} eR: ${mf(extraReserve)}`);\\n\\t\\t\\t\\tif (raisingCapital === 0) {\\n\\t\\t\\t\\t\\tif (extraReserve > 0 && myCorporation.funds > extraReserve) {\\n\\t\\t\\t\\t\\t\\t// We have enough money saved up. Time to ditch the product with the lowest budget.\\n\\t\\t\\t\\t\\t\\tproducts.sort((a, b) => budgetFromProductName(a.name) - budgetFromProductName(b.name));\\n\\t\\t\\t\\t\\t\\tlet lowBudgetProduct = products[0];\\n\\t\\t\\t\\t\\t\\tc.discontinueProduct(division.name, lowBudgetProduct.name);\\n\\t\\t\\t\\t\\t\\tmyCorporation = c.getCorporation();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t// Try to create the Product. If it fails, it will set a reserve for us.\\n\\t\\t\\t\\t\\tspent += createNewProduct(ns, division);\\n\\t\\t\\t\\t\\tbudget -= spent;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t// Per city tasks.\\n\\tfor (const city of division.cities) {\\n\\t\\t// Can we expand any of our offices for more employees?\\n\\t\\tlet officeSize = c.getOffice(division.name, city).size;\\n\\t\\tlet seats = 15; // Grow by officeSize when small, then by 15\\n\\t\\tseats = Math.min(seats, officeSize);\\n\\t\\tlet cost = c.getOfficeSizeUpgradeCost(division.name, city, seats);\\n\\t\\tif (industry.makesProducts && city === hqCity && cost < budget * 0.9) {\\n\\t\\t\\ttasks.push(new Task(`Buy space for ${seats} more employees of ${division.name}/${city}`, () => upgradeOfficeSize(ns, division.name, city, seats), cost, 70));\\n\\t\\t} else if (industry.makesProducts && city !== hqCity && cost < budget * 0.1) {\\n\\t\\t\\ttasks.push(new Task(`Buy space for ${seats} more employees of ${division.name}/${city}`, () => upgradeOfficeSize(ns, division.name, city, seats), cost, 70));\\n\\t\\t} else if (!industry.makesProducts && cost < budget * 0.4) {\\n\\t\\t\\ttasks.push(new Task(`Buy space for ${seats} more employees of ${division.name}/${city}`, () => upgradeOfficeSize(ns, division.name, city, seats), cost, 70));\\n\\t\\t}\\n\\n\\t\\t// Can we expand our warehouse space?\\n\\t\\tif (!c.hasWarehouse(division.name, city)) {\\n\\t\\t\\t// We don't have a warehouse here. We should try to buy one in this city.\\n\\t\\t\\tcost = c.getPurchaseWarehouseCost();\\n\\t\\t\\tif (cost < budget * 0.5) {\\n\\t\\t\\t\\ttasks.push(new Task(`Buy warehouse ${division.name}/${city}`, () => c.purchaseWarehouse(division.name, city), cost, 80));\\n\\t\\t\\t}\\n\\t\\t\\t// Anything else we want to do with a city requires a warehouse, so just skip to the next city.\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t// We have a warehouse. Can we expand it?\\n\\t\\tlet warehouse = c.getWarehouse(division.name, city);\\n\\t\\t// TODO: How much do we care about expanding the warehouse? We should base it on how much of an impact more materials would have.\\n\\t\\tcost = c.getUpgradeWarehouseCost(division.name, city);\\n\\t\\tif (cost < budget * 0.25) {\\n\\t\\t\\ttasks.push(new Task(`Buy warehouse space for ${division.name}/${city}`, () => c.upgradeWarehouse(division.name, city), cost, 20));\\n\\t\\t}\\n\\n\\t\\t// Turn on Smart Supply if we have it\\n\\t\\tif (c.hasUnlockUpgrade('Smart Supply') && !warehouse.smartSupplyEnabled) {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tif (verbose) log(ns, `Turning on Smart Supply for ${division.name}/${city}.`);\\n\\t\\t\\t\\tc.setSmartSupply(division.name, city, true);\\n\\t\\t\\t} catch (e) {\\n\\t\\t\\t\\tlog(ns, `ERROR: ${e}`);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Can we buy more materials given the space we currently have?\\n\\t\\t// First, wait to cycle around to 'START' so we have a clean read on the warehouse levels.\\n\\t\\tawait sleepWhileNotInStartState(ns);\\n\\t\\t// Calculate the required free space for a production cycle's worth of Material and products.\\n\\t\\tlet warehouseSpaceRequiredForCycle = getReservedWarehouseSpace(ns, industry, division, city);\\n\\n\\t\\t// We don't want to drive the corp too deeply negative with material purchases too soon, or\\n\\t\\t// else nothing else will ever be bought, and employees will never get happy.\\n\\t\\tlet freeSpace = warehouse.size - warehouse.sizeUsed;\\n\\t\\tlet warehouseSpaceAvailable = freeSpace - warehouseSpaceRequiredForCycle;\\n\\t\\tlet tolerance = warehouseSpaceRequiredForCycle * 0.01;\\n\\t\\tlet enoughSpace = warehouseSpaceAvailable >= tolerance; // Tiny safety margin\\n\\t\\tconst satisfied = allEmployeesSatisfied(ns);\\n\\t\\tif ((budget > 0 || satisfied) && enoughSpace && raisingCapital === 0) {\\n\\t\\t\\t// We have a decent amount of space to fill.\\n\\t\\t\\tif (verbose) log(ns, `   ${division.name}/${city} warehouse: Wants +${warehouseSpaceAvailable} m² materials. ${warehouseSpaceRequiredForCycle} m² reserved.`);\\n\\t\\t\\tfor (const material of bonusMaterials) {\\n\\t\\t\\t\\t//if (industry.prodMats.includes(material)) continue; // Don't buy the materials we make.\\n\\t\\t\\t\\tlet amt = (industry.scaledMaterialBonus[material] * warehouseSpaceAvailable) / 4;\\n\\t\\t\\t\\t// somewhat scale the amount we buy with our budget\\n\\t\\t\\t\\tlet scaleFactor = Math.log10(budget) - 11; // Don't go full speed until our budget is $100b or more.\\n\\t\\t\\t\\tscaleFactor = Math.max(-2, scaleFactor);\\n\\t\\t\\t\\tscaleFactor = Math.min(0, scaleFactor);\\n\\t\\t\\t\\tlet scale = Math.pow(10, scaleFactor);\\n\\t\\t\\t\\t// Only scale if we're waiting on employees to get happy.\\n\\t\\t\\t\\tif (!satisfied) amt = scale * amt;\\n\\t\\t\\t\\tc.buyMaterial(division.name, city, material, amt);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\t// Make sure we're not buying anything -- we're either out of room or out of money.\\n\\t\\t\\tfor (const material of bonusMaterials) {\\n\\t\\t\\t\\tc.buyMaterial(division.name, city, material, 0);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// It's possible to get into a situation where we've grown production faster than warehouse space.\\n\\t\\tif (warehouseSpaceAvailable < -tolerance) {\\n\\t\\t\\t// Start clearing things out.\\n\\t\\t\\tif (verbose) log(ns, `   ${division.name}/${city} warehouse: Wants to reserve ${warehouseSpaceRequiredForCycle} of ${warehouse.size} m², but only ${freeSpace} m² free! Selling some materials.`);\\n\\t\\t\\tfor (const material of allMaterials) {\\n\\t\\t\\t\\tlet amt = c.getMaterial(division.name, city, material).qty;\\n\\t\\t\\t\\tlet sellAmt = amt * 0.025;\\n\\t\\t\\t\\tc.sellMaterial(division.name, city, material, sellAmt.toFixed(2), 'MP*0.80');\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\t// Make sure we reset. It should be safe to sell '0' here, because the things we want to sell will get reset in the price discovery loop.\\n\\t\\t\\tfor (const material of allMaterials) {\\n\\t\\t\\t\\tc.sellMaterial(division.name, city, material, '0', 'MP');\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// Figure out which tasks we can afford to run, and in which order.\\n\\ttasks.sort((a, b) => a.cost - b.cost).reverse();\\n\\ttasks.sort((a, b) => a.priority - b.priority).reverse();\\n\\t// Finally, run all the tasks we've collected.\\n\\tspent += await runTasks(ns, tasks, budget);\\n\\tif (spent > 0 && verbose) log(ns, `Spent ${ns.nFormat(spent, '0.0a')} of our budget of ${ns.nFormat(totalBudget, '0.0a')}.`);\\n\\n\\treturn spent;\\n}\\n\\n/**\\n * How much space do we need to leave fee in this warehouse for a full cycle of production?\\n * @param {NS} ns\\n * @param {Industry} industry\\n * @param {Division} division\\n * @param {string} city\\n * @returns {number}\\n */\\nfunction getReservedWarehouseSpace(ns, industry, division, city) {\\n\\tlet rawMaterialSize = 0;\\n\\tlet warehouseSpaceRequiredForCycle = 0;\\n\\tlet maxProd = 0;\\n\\n\\t// Products take the same space as what was used to create it.\\n\\tfor (const matName in industry.reqMats) {\\n\\t\\tlet matAmt = industry.reqMats[matName];\\n\\t\\trawMaterialSize += matAmt * materialSizes[matName];\\n\\t}\\n\\n\\t// Max production is based on a bunch of production multipliers.\\n\\tmaxProd = getMaximumProduction(ns, division, city);\\n\\n\\t// How many materials could we produce? Material sizes are predefined.\\n\\tfor (const matName of industry.prodMats) {\\n\\t\\twarehouseSpaceRequiredForCycle += materialSizes[matName] * maxProd;\\n\\t}\\n\\n\\tif (industry.makesProducts) {\\n\\t\\tconst maxProducts = getMaxProducts(ns, division.name);\\n\\t\\twarehouseSpaceRequiredForCycle += maxProducts * maxProd * rawMaterialSize;\\n\\t}\\n\\n\\t// We produce stuff 10 times per cycle\\n\\twarehouseSpaceRequiredForCycle *= 10;\\n\\n\\t// If we don't have automatic price discovery, we'll need some extra free space.\\n\\tlet hasMarketTA2 = c.hasResearched(division.name, 'Market-TA.II');\\n\\tif (!hasMarketTA2) warehouseSpaceRequiredForCycle *= 3;\\n\\telse warehouseSpaceRequiredForCycle *= 1.5;\\n\\n\\treturn warehouseSpaceRequiredForCycle;\\n}\\n\\nfunction getMaximumProduction(ns, division, city) {\\n\\tlet office = c.getOffice(division.name, city);\\n\\tlet officeMult = getOfficeProductivity(office); // Workers\\n\\tlet prodMult = division.prodMult; // Materials\\n\\tlet corpMult = 1 + 0.03 * c.getUpgradeLevel('Smart Factories'); // Corporate upgrades.\\n\\tlet resMult = 1;\\n\\tif (c.hasResearched(division.name, 'Drones - Assembly')) resMult *= 1.2;\\n\\tif (c.hasResearched(division.name, 'Self-Correcting Assemblers')) resMult *= 1.1;\\n\\treturn officeMult * prodMult * corpMult * resMult;\\n}\\n\\n/**\\n * Try to create a new product for this division, with a budget at least twice the size of the last\\n * one we bought. If we don't have enough money, or all our product slots are full,\\n * then set a reserve for the desired amount.\\n *\\n * @param {NS} ns\\n * @param {Division} division\\n * @returns amount of money spent, if any.\\n */\\nfunction createNewProduct(ns, division) {\\n\\tlet wantToSpend = 2e9; // $2b minimum.\\n\\tlet spent = 0;\\n\\tlet spentOnProducts = [];\\n\\ttry {\\n\\t\\tspentOnProducts = division.products\\n\\t\\t\\t.map((p) => budgetFromProductName(p))\\n\\t\\t\\t.sort((a, b) => a - b)\\n\\t\\t\\t.reverse();\\n\\t} catch (error) { }\\n\\tif (spentOnProducts.length > 0) {\\n\\t\\t// If our products weren't named correctly default to assuming they were 2b, 4b, 8b...\\n\\t\\twantToSpend = wantToSpend * Math.pow(2, spentOnProducts.length - 1);\\n\\t\\twantToSpend = Math.max(spentOnProducts[0] * 2, wantToSpend, myCorporation.revenue * 100);\\n\\t}\\n\\tlet productName = `${division.type}-${Math.log10(wantToSpend).toFixed(2)}`;\\n\\ttry {\\n\\t\\tc.makeProduct(division.name, hqCity, productName, wantToSpend / 2, wantToSpend / 2);\\n\\t\\tlog(ns, `Creating new product '${productName}' for ${ns.nFormat(wantToSpend, '0.0a')}.`, 'info', true);\\n\\t\\tspent += wantToSpend;\\n\\t\\textraReserve = 0;\\n\\t} catch (e) {\\n\\t\\t// If we fail to create the product, just reserve the money we want to spend.\\n\\t\\tlog(ns, `Reserving budget of ${ns.nFormat(wantToSpend, '0.0a')} for next product.`);\\n\\t\\textraReserve = wantToSpend;\\n\\t}\\n\\treturn spent;\\n}\\n\\nfunction getMaxProducts(ns, divisionName) {\\n\\tlet maxProducts = 3;\\n\\tif (c.hasResearched(divisionName, 'uPgrade: Capacity.I')) maxProducts++;\\n\\tif (c.hasResearched(divisionName, 'uPgrade: Capacity.II')) maxProducts++;\\n\\treturn maxProducts;\\n}\\n\\n/** @param {NS} ns\\n * @param waitForNext\\n */\\nasync function sleepWhileNotInStartState(ns, waitForNext = false) {\\n\\tmyCorporation = c.getCorporation();\\n\\tif (waitForNext) {\\n\\t\\twhile (myCorporation.state === 'START') {\\n\\t\\t\\tawait ns.sleep(50);\\n\\t\\t\\tmyCorporation = c.getCorporation();\\n\\t\\t}\\n\\t}\\n\\tlet lastState = 'Unknown';\\n\\twhile (myCorporation.state !== 'START') {\\n\\t\\tif (verbose && myCorporation.state !== lastState) {\\n\\t\\t\\tlog(ns, `Waiting for corporation to move into the 'START' status. Currently: '${myCorporation.state}'.`);\\n\\t\\t\\tlastState = myCorporation.state;\\n\\t\\t}\\n\\t\\tawait ns.sleep(50); // Better keep the sleep short, in case we're in catch-up mode.\\n\\t\\tmyCorporation = c.getCorporation();\\n\\t}\\n\\tmyCorporation = c.getCorporation();\\n}\\n\\n/**\\n * Buy the specified number of seats, and hire employees to fill them.\\n * @param {NS} ns\\n * @param {string} divisionName\\n * @param {string} city\\n * @param {number} seats\\n * @returns {boolean} returns true on success\\n */\\nasync function upgradeOfficeSize(ns, divisionName, city, seats) {\\n\\t// First buy the new seats.\\n\\tlet success = false;\\n\\ttry {\\n\\t\\tif (seats > 0) c.upgradeOfficeSize(divisionName, city, seats);\\n\\t\\tsuccess = true;\\n\\t} catch (e) {\\n\\t\\tlog(ns, `ERROR: Failed to upgrade office size by ${seats} seats in ${city}.`);\\n\\t\\tlog(ns, `ERROR: ${e}`);\\n\\t}\\n\\tif (!success) return false;\\n\\n\\t/**\\n\\t * Now that we have more office space, we need to hire and assign workers. Since\\n\\t * worker assignment takes a long time, add them to a queue and we'll handle it\\n\\t * later.\\n\\t */\\n\\tfillSpaceQueue.push(`${divisionName}/${city}`);\\n\\n\\treturn true;\\n}\\n\\nasync function fillOpenPositionsFromQueue(ns) {\\n\\tmyCorporation = c.getCorporation();\\n\\tfillSpaceQueue = [...new Set(fillSpaceQueue)]; // Unique\\n\\t// Try not to run past the end of a cycle..\\n\\twhile (['START'].includes(myCorporation.state) && fillSpaceQueue.length > 0) {\\n\\t\\tlet office = fillSpaceQueue.shift();\\n\\t\\tlet divisionName = office.split('/')[0];\\n\\t\\tlet cityName = office.split('/')[1];\\n\\t\\tawait fillOpenPositions(ns, divisionName, cityName);\\n\\t\\tmyCorporation = c.getCorporation();\\n\\t}\\n}\\n\\n/**\\n * Fill any open positions with employees.\\n * @param {NS} ns\\n * @param {string} divisionName\\n * @param {string} cityName\\n */\\nasync function fillOpenPositions(ns, divisionName, cityName) {\\n\\tif (options.mock) return;\\n\\tlet office = c.getOffice(divisionName, cityName);\\n\\tlet employees = office.employees.map((e) => c.getEmployee(divisionName, cityName, e));\\n\\tlet numUnassigned = employees.filter((e) => e.pos === 'Unassigned').length;\\n\\tlet openJobs = office.size - office.employees.length;\\n\\tfor (let i = 0; i < openJobs; i++) {\\n\\t\\tc.hireEmployee(divisionName, cityName);\\n\\t}\\n\\topenJobs += numUnassigned;\\n\\toffice = c.getOffice(divisionName, cityName);\\n\\tif (openJobs > 0) {\\n\\t\\tif (verbose) log(ns, `Assigning ${openJobs} new employees to work in ${divisionName}/${cityName}`);\\n\\t\\tlet employeesPerJob = Math.floor(office.employees.length / jobs.length);\\n\\t\\tlet employeesLeft = office.employees.length % jobs.length;\\n\\t\\tfor (let i = 0; i < jobs.length; i++) {\\n\\t\\t\\tconst job = jobs[i];\\n\\t\\t\\tlet num = employeesPerJob;\\n\\t\\t\\tif (i < employeesLeft) num++;\\n\\t\\t\\t// if (verbose) log(ns, `Assigning ${num} employees to work as ${job} in ${cityName}`);\\n\\t\\t\\tif (num) await c.setAutoJobAssignment(divisionName, cityName, job, num);\\n\\t\\t}\\n\\t}\\n}\\n\\n/**\\n * Attempt to find a reasonably stable price for each product. This will take several production cycles to stabilize.\\n * @param {NS} ns\\n */\\nasync function doPriceDiscovery(ns) {\\n\\tif (verbose) log(ns, `Doing price discovery for products.`);\\n\\tmyCorporation = c.getCorporation();\\n\\tfor (const division of myCorporation.divisions) {\\n\\t\\tconst industry = industries.find((i) => i.name === division.type);\\n\\t\\t// If we have Market-TA.II researched, just let that work.\\n\\t\\tlet hasMarketTA2 = c.hasResearched(division.name, 'Market-TA.II');\\n\\t\\tif (hasMarketTA2) {\\n\\t\\t\\tfor (const city of division.cities) {\\n\\t\\t\\t\\t// Default prices\\n\\t\\t\\t\\tindustry.prodMats.forEach((material) => c.sellMaterial(division.name, city, material, 'MAX', 'MP'));\\n\\t\\t\\t\\tdivision.products.forEach((product) => c.sellProduct(division.name, city, product, 'MAX', 'MP'));\\n\\t\\t\\t\\t// Turn on automation.\\n\\t\\t\\t\\tindustry.prodMats.forEach((material) => c.setMaterialMarketTA2(division.name, city, material, true));\\n\\t\\t\\t\\tdivision.products.forEach((product) => c.setProductMarketTA2(division.name, product, true));\\n\\t\\t\\t}\\n\\t\\t\\t// No need to do any other price discovery on this division.\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t// Materials are easy. Just sell them for Market price.\\n\\t\\tfor (const materialName of industry.prodMats) {\\n\\t\\t\\tfor (const city of division.cities) {\\n\\t\\t\\t\\t// sometimes in low valuation nodes might not have a warehouse yet\\n\\t\\t\\t\\tif(!c.hasWarehouse(division.name, city)){\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tc.sellMaterial(division.name, city, materialName, 'PROD', 'MP');\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Go through each product, and see if the price needs to be adjusted. We can only\\n\\t\\t// adjust the price on a per-product basis (despite the UI letting you do it\\n\\t\\t// manually, the API is busted.)\\n\\t\\tlet prevProductMultiplier = 1.0;\\n\\t\\tfor (const productName of division.products) {\\n\\t\\t\\tconst product = c.getProduct(division.name, productName);\\n\\t\\t\\tif (product.developmentProgress < 100) continue;\\n\\t\\t\\tlet sPrice = product.sCost;\\n\\t\\t\\t// sPrice ought to be of the form 'MP * 123.45'. If not, we should use the price of the last product we calculated.\\n\\t\\t\\tlet lastPriceMultiplier = prevProductMultiplier;\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tlet sMult = sPrice.split('*')[1];\\n\\t\\t\\t\\tlastPriceMultiplier = Number.parseFloat(sMult);\\n\\t\\t\\t} catch { }\\n\\t\\t\\tlet votes = [];\\n\\t\\t\\tfor (const city of division.cities) {\\n\\t\\t\\t\\t// sometimes in low valuation nodes might not have a warehouse yet\\n\\t\\t\\t\\tif(!c.hasWarehouse(division.name, city)){\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// Each city is going to \\\"vote\\\" for how they want the price to be manipulated.\\n\\t\\t\\t\\tlet qty = product.cityData[city][0];\\n\\t\\t\\t\\tlet produced = product.cityData[city][1];\\n\\t\\t\\t\\tlet sold = product.cityData[city][2];\\n\\t\\t\\t\\t// if (verbose) log(ns, `${division.name}/${city}:${product.name} (qty, prod, sold): ` + product.cityData[city].map((n) => nf(n)));\\n\\n\\t\\t\\t\\tif (produced === sold && qty === 0) {\\n\\t\\t\\t\\t\\t// We sold every item we produced. Vote to double the price.\\n\\t\\t\\t\\t\\tvotes.push(lastPriceMultiplier * 2);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// If we've accumulated a big stockpile, reduce our prices.\\n\\t\\t\\t\\telse if (qty > produced * 100) {\\n\\t\\t\\t\\t\\tvotes.push(lastPriceMultiplier * 0.9);\\n\\t\\t\\t\\t} else if (qty > produced * 40) {\\n\\t\\t\\t\\t\\tvotes.push(lastPriceMultiplier * 0.95);\\n\\t\\t\\t\\t} else if (qty > produced * 20) {\\n\\t\\t\\t\\t\\tvotes.push(lastPriceMultiplier * 0.98);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// Our stock levels must be good. If we sold less than production, then our price is probably high\\n\\t\\t\\t\\telse if (sold < produced) {\\n\\t\\t\\t\\t\\tlet newMultiplier = lastPriceMultiplier;\\n\\t\\t\\t\\t\\tif (sold <= produced * 0.5) {\\n\\t\\t\\t\\t\\t\\tnewMultiplier *= 0.75; // Our price is very high.\\n\\t\\t\\t\\t\\t} else if (sold <= produced * 0.9) {\\n\\t\\t\\t\\t\\t\\tnewMultiplier *= 0.95; // Our price is a bit high.\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tnewMultiplier *= 0.99; // Our price is just barely high\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tvotes.push(newMultiplier);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// If we sold more than production, then our price is probably low.\\n\\t\\t\\t\\telse if (produced < sold) {\\n\\t\\t\\t\\t\\tlet newMultiplier = lastPriceMultiplier;\\n\\t\\t\\t\\t\\tif (sold >= produced * 2) {\\n\\t\\t\\t\\t\\t\\tnewMultiplier *= 2; // We sold way too much. Double the price.\\n\\t\\t\\t\\t\\t} else if (sold >= produced * 1.33) {\\n\\t\\t\\t\\t\\t\\tnewMultiplier *= 1.05; // We sold a bit too much. Bring the price up a bit.\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tnewMultiplier *= 1.01;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tvotes.push(newMultiplier);\\n\\t\\t\\t\\t}\\n\\t\\t\\t} // end for-cities\\n\\t\\t\\t// All of the cities have voted. Use the lowest price that the cities have asked for.\\n\\t\\t\\tvotes.sort((a, b) => a - b);\\n\\t\\t\\tlet newMultiplier = votes[0];\\n\\t\\t\\tlet newPrice = `MP*${newMultiplier.toFixed(3)}`;\\n\\t\\t\\t// if (verbose) log(ns, `${prefix}Votes: ${votes.map((n) => nf(n)).join(', ')}.`);\\n\\t\\t\\tlet sChange = percentChange(lastPriceMultiplier, newMultiplier);\\n\\t\\t\\tif (verbose) log(ns, `    Adjusting '${product.name}' price from ${sPrice} to ${newPrice} (${sChange}).`);\\n\\t\\t\\tc.sellProduct(division.name, hqCity, product.name, 'MAX', newPrice, true);\\n\\t\\t\\tprevProductMultiplier = newMultiplier;\\n\\t\\t} // end for-products\\n\\t} // end for-divisions\\n}\\n\\n/**\\n * Expand to a new city and fill the newly-opened office positions.\\n * @param {NS} ns\\n * @param {string} divisionName\\n * @param {string} cityName\\n */\\nfunction doExpandCity(ns, divisionName, cityName) {\\n\\tc.expandCity(divisionName, cityName);\\n\\tfillSpaceQueue.push(`${divisionName}/${cityName}`);\\n}\\n\\n/**\\n * Spend hashes on something, as long as we have hacknet servers unlocked and a bit of money in the bank.\\n * @param {NS} ns\\n * @param {string} spendOn 'Sell for Corporation Funds' | 'Exchange for Corporation Research'\\n */\\n// async function doSpendHashes(ns, spendOn) {\\n// \\t// Make sure we have a decent amount of money ($100m) before spending hashes this way.\\n// \\tif (ns.getPlayer().money > 100e6 && 9 in dictSourceFiles) {\\n// \\t\\tlet spentHashes = 0;\\n// \\t\\tlet shortName = spendOn;\\n// \\t\\tif (spendOn === 'Sell for Corporation Funds') shortName = '$1B of corporate funding';\\n// \\t\\telse if (spendOn === 'Exchange for Corporation Research') shortName = '1000 research for each corporate division';\\n// \\t\\tdo {\\n// \\t\\t\\tlet numHashes = ns.hacknet.numHashes();\\n// \\t\\t\\tns.hacknet.spendHashes(spendOn);\\n// \\t\\t\\tspentHashes = numHashes - ns.hacknet.numHashes();\\n// \\t\\t\\tif (spentHashes > 0) log(ns, `  Spent ${nf(Math.round(spentHashes / 100) * 100)} hashes on ${shortName}`, 'success');\\n// \\t\\t} while (spentHashes > 0);\\n// \\t}\\n// }\\n\\n/**\\n * Log a message. Optionally, pop up a toast. Optionally, print to the terminal.\\n * @param {NS} ns\\n * @param {string} log message to log\\n * @param {string} toastStyle\\n * @param {boolean} printToTerminal\\n */\\nfunction log(ns, log, toastStyle = '', printToTerminal = false) {\\n\\tns.print(log);\\n\\tif (toastStyle) ns.toast(log, toastStyle);\\n\\tif (printToTerminal) ns.tprint(log);\\n}\\n\\n/**\\n * Assuming a product is named Industry-XX.XX, where XX.XX is the log10() of the budget.\\n * @param {string} projectName\\n * @returns {number} - the budget\\n */\\nfunction budgetFromProductName(projectName) {\\n\\tlet sExp = projectName.split('-')[1];\\n\\tlet exp = Number.parseFloat(sExp);\\n\\treturn Math.pow(10, exp);\\n}\\n\\nfunction getOfficeProductivity(office, forProduct = false) {\\n\\tconst opProd = office.employeeProd.Operations;\\n\\tconst engrProd = office.employeeProd.Engineer;\\n\\tconst mgmtProd = office.employeeProd.Management;\\n\\tconst total = opProd + engrProd + mgmtProd;\\n\\tif (total <= 0) return 0;\\n\\n\\tconst mgmtFactor = 1 + mgmtProd / (1.2 * total);\\n\\tconst prod = (Math.pow(opProd, 0.4) + Math.pow(engrProd, 0.3)) * mgmtFactor;\\n\\tconst balancingMult = 0.05;\\n\\n\\tif (forProduct) return 0.5 * balancingMult * prod;\\n\\telse return balancingMult * prod;\\n}\\n\\n/**\\n * Return the percentage change from from oldVal to NewVal.\\n * @param {number} oldVal\\n * @param {number} newVal\\n * @returns {string} formatted as \\\"+99.9%\\\"\\n */\\nfunction percentChange(oldVal, newVal) {\\n\\tlet percentChange = (newVal / oldVal) * 100 - 100;\\n\\tlet sChange = percentChange + '%';\\n\\tif (percentChange >= 0) sChange = '+' + sChange;\\n\\treturn sChange;\\n}\",\"filename\":\"megacorp.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/3e400d7b-ae1c-48ae-8b3d-4a16f02c87da\",\"moduleSequenceNumber\":148233},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/ac8cfd13-943b-4462-971b-a9c03dc4900c\",\"moduleSequenceNumber\":148216},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/653c0fe2-28ee-4b4d-9613-904565c53370\",\"moduleSequenceNumber\":148217},{\"filename\":\"megacorp.js\",\"url\":\"blob:https://danielyxie.github.io/453f9a6b-674c-48e7-b275-f9d3e2380676\",\"moduleSequenceNumber\":148349}],\"dependents\":[],\"ramUsage\":1025.5,\"server\":\"home\",\"moduleSequenceNumber\":148349,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"ns\",\"name\":\"corporation\",\"cost\":1022.4},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { boxTailSingleton } from 'utils.js';\\nlet ns;\\n\\n/** @param {NS} pns **/\\nexport async function main(pns) {\\n    ns = pns\\n    // ns.disableLog('ALL');\\n    // ns.clearLog();\\n    // boxTailSingleton(ns, 'player', '⛹', '200px');\\n    let lastSolverRun = Date.now();\\n    while (true) {\\n        await ns.sleep(100);\\n\\n        if (ns.getServerMaxRam('home') >= 128 && (Date.now() - lastSolverRun > 5 * 60 * 1000)) {\\n            if (ns.exec('autosolver.js', 'home') > 0)\\n                lastSolverRun = Date.now();\\n        }\\n\\n        if (ns.heart.break() < -54000 && !ns.fileExists('/tmp/ingang.txt')) {\\n            ns.exec('startGang.js', 'home');\\n        }\\n        if (!ns.fileExists('/tmp/incorp.txt') && ns.getServerMoneyAvailable('home') > 150_000_000_000) {\\n            ns.exec('megacorp.js', 'home');\\n        }\\n        const player = ns.getPlayer();\\n        if (!player.factions.includes(\\\"Bladeburners\\\")\\n            && (player.strength > 100 && player.defense > 100 && player.dexterity > 100 || player.agility > 100)) {\\n            ns.exec('joinBladeburners.js', 'home');\\n        }\\n        // bug augs and reset every 2 hours after gangs are unlocked\\n        if (ns.getTimeSinceLastAug() > 2 * 60 * 60 * 1000 && ns.heart.break() < -54000) {\\n            ns.exec('spend-hacknet-hash.js','home', 1, '--liquidate');\\n            await ns.sleep(10000);\\n            ns.exec('aug_buyer.js', 'home', 1, '--no-soft-reset');\\n        }\\n    }\\n}\",\"filename\":\"player.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"player.js\",\"url\":\"blob:https://danielyxie.github.io/a7a38e84-e8d1-4ceb-8234-f95f4db8b031\",\"moduleSequenceNumber\":148346}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"home\",\"moduleSequenceNumber\":148346,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getTimeSinceLastAug\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { list_servers } from 'opened_servers.js';\\nimport { recursiveScan } from 'find_server.js';\\nimport { boxTailSingleton, copyHackingFiles } from 'utils.js';\\n\\nfunction maxHackLevel(hackingMultiples) {\\n    if (hackingMultiples < 2)\\n        return 150;\\n    else if (hackingMultiples < 3)\\n        return 250\\n    else if (hackingMultiples < 4)\\n        return 350\\n    else if (hackingMultiples < 5)\\n        return 450\\n    else if (hackingMultiples < 6)\\n        return 600;\\n    else if (hackingMultiples < 8)\\n        return 800;\\n    return 25000;\\n}\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog('scan');\\n    ns.disableLog('getHackingLevel');\\n    ns.disableLog('installBackdoor');\\n    ns.disableLog('hasRootAccess');\\n    ns.disableLog('getServerNumPortsRequired');\\n    ns.disableLog('fileExists');\\n    ns.disableLog('sleep');\\n    const player = JSON.parse(ns.read('/tmp/player.txt'));\\n    const bitNode = JSON.parse(ns.read(`/tmp/getBitNodeMultipliers.txt`));\\n    const mult = bitNode.HackingLevelMultiplier * player.hacking_mult + bitNode.HackExpGain * player.hacking_exp_mult;\\n    const maxHack = maxHackLevel(mult);\\n    boxTailSingleton(ns, 'ensureroot', '🗝', '200px');\\n    ns.clearLog();\\n    ns.print(`mul ${mult}, max hack ${maxHack}`);\\n    let hosts = list_servers(ns).filter(o => o.indexOf('pserv') === -1 && o !== 'darkweb');\\n    let oldhostLength = hosts.length;\\n    do {\\n        let servers = [];\\n        for (const host of hosts) {\\n            const fp = `/tmp/${host.replaceAll(/[\\\\.\\\\s]/g, '_')}.txt`;\\n            const data = ns.read(fp);\\n            let server;\\n            try {\\n                server = JSON.parse(data);\\n            } catch (e) {\\n                ns.print(`${fp} BAD JSON ${e.message} ${data}`);\\n                continue;\\n            }\\n            server.hasAdminRights = server.hasAdminRights || ensureRootAccess(ns, server);\\n            await copyHackingFiles(ns, server);\\n            if (server.hasAdminRights) {\\n                server.backdoorInstalled = server.backdoorInstalled || (await ensureBackdoor(ns, server));\\n            }\\n            //ns.print(`${server.hostname} ${server.hasAdminRights} && ${server.backdoorInstalled}`);\\n            await ns.write(fp, JSON.stringify(server, null, 2), \\\"w\\\");\\n            servers.push(server);\\n        }\\n        hosts = servers\\n            .filter((s) => !(s.hasAdminRights && s.backdoorInstalled) && s.requiredHackingSkill <= maxHack)\\n            .map(o => o.hostname);\\n\\n        if (oldhostLength !== hosts.length)\\n            ns.print('Hosts to backdoor ' + JSON.stringify(hosts));\\n        oldhostLength = hosts.length;\\n        await ns.sleep(5000);\\n    } while (hosts.length > 0);\\n}\\n\\nasync function ensureBackdoor(ns, server) {\\n    if (server.requiredHackingSkill <= ns.getHackingLevel()) {\\n        if (!server.backdoorInstalled) {\\n            ns.connect('home');\\n            let route = [];\\n            recursiveScan(ns, '', 'home', server.hostname, route);\\n            for (const r of route) {\\n                if (!ns.connect(r)) {\\n                    ns.print(`Failed to connect to ${r}`);\\n                    return false;\\n                }\\n            }\\n            ns.print(\\\"backdooring \\\" + server.hostname);\\n            await ns.installBackdoor();\\n            ns.print(\\\"backdoor installed \\\" + server.hostname);\\n            ns.connect('home');\\n        }\\n        return true;\\n    }\\n    return false;\\n}\\n\\nfunction ensureRootAccess(ns, server) {\\n    if (server.hostname === \\\"home\\\" || server.purchasedByPlayer || server.hasAdminRights) return true;\\n    let portsReq = server.numOpenPortsRequired;\\n    let maxPorts = countPorts(ns);\\n    if (portsReq <= maxPorts) {\\n        if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            ns.brutessh(server.hostname);\\n        }\\n        if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            ns.httpworm(server.hostname);\\n        }\\n        if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ns.ftpcrack(server.hostname);\\n        }\\n        if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            ns.relaysmtp(server.hostname);\\n        }\\n        if (ns.fileExists(\\\"sqlInject.exe\\\", \\\"home\\\")) {\\n            ns.sqlinject(server.hostname);\\n        }\\n        ns.nuke(server.hostname);\\n        ns.print(\\\"nuked \\\" + server.hostname);\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction countPorts(ns) {\\n    let ports = 0\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ports++;\\n    }\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n        ports++;\\n    }\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n        ports++;\\n    }\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n        ports++;\\n    }\\n    if (ns.fileExists(\\\"sqlInject.exe\\\", \\\"home\\\")) {\\n        ports++;\\n    }\\n    return ports\\n}\\n\\nexport function autocomplete(data, args) {\\n    return data.servers;\\n}\",\"filename\":\"ensureRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/6bedbeae-5b5e-43c8-9d76-76b3af85a272\",\"moduleSequenceNumber\":148233},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/f063650a-ba83-461f-96de-b8034c169e8b\",\"moduleSequenceNumber\":148216},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/652ffa0b-da23-439c-819e-28b0d83f3e07\",\"moduleSequenceNumber\":148217},{\"filename\":\"find_server.js\",\"url\":\"blob:https://danielyxie.github.io/096ff0a5-8b35-48d6-89be-3a63b6999f1d\",\"moduleSequenceNumber\":148218},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/e04302e5-c9c8-4235-876d-d36ae9791381\",\"moduleSequenceNumber\":148216},{\"filename\":\"ensureRoot.js\",\"url\":\"blob:https://danielyxie.github.io/f166cbe7-f585-4c42-90ac-96bb2c3076c4\",\"moduleSequenceNumber\":148353}],\"dependents\":[],\"ramUsage\":7.35,\"server\":\"home\",\"moduleSequenceNumber\":148353,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let doc = eval(\\\"document\\\");\\n\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.tail();\\n    ns.travelToCity(\\\"Aevum\\\");\\n    ns.goToLocation(\\\"Iker Molina Casino\\\");\\n\\n    await playRoulette(ns);\\n    const alertSpan = find(`//span[text() = \\\"${kickedOutAlert}\\\"]`);\\n    if (alertSpan) {\\n        find('/html/body/div[4]/div[1]')?.click();\\n    }\\n}\\n\\nfunction arraysPercentEqual(a, b) {\\n    if (a === b) return 1;\\n    if (a == null || b == null) return 0;\\n    if (a.length !== b.length) return 0;\\n\\n    // If you don't care about the order of the elements inside\\n    // the array, you should sort both arrays here.\\n    // Please note that calling sort on an array will modify that array.\\n    // you might want to clone your array first.\\n    let equalness = 0;\\n    for (let i = 0; i < a.length; ++i) {\\n        if (a[i] === b[i]) equalness++;\\n    }\\n    return equalness / a.length;\\n}\\n\\nasync function playRoulette(ns) {\\n    const btnRoulette = find(\\\"//button[contains(text(), 'roulette')]\\\");\\n    if (!btnRoulette) return ns.tprint(\\\"ERROR: Attempt to automatically navigate to the Casino appears to have failed.\\\");\\n    const startSeed = new Date().getTime();\\n    await click(btnRoulette);\\n    const after = new Date().getTime();\\n    const seedRange = after - startSeed;\\n    ns.print(`whrngSeedRange ${seedRange}`);\\n    await ns.sleep(1);\\n    const minPlay = 0;\\n    const maxPlay = 1e7;\\n    const inputWager = find(\\\"//input\\\");\\n    // inputWager.value = minPlay;\\n    await setText2(inputWager, `${minPlay}`);\\n    const sampleSize = 10;\\n    const button1 = find(\\\"//button[text() = '1']\\\");\\n    const results = [];\\n    for (let i = 0; i < sampleSize; i++) {\\n        await click(button1);\\n        const r = await getSpinResult(ns);\\n\\n        if (r === -1) {\\n            ns.print('Results not found quiting leave casino try again');\\n            return;\\n        }\\n        results.push(r);\\n    }\\n    ns.print(`Results ${results.map(o => ns.nFormat(o, '00')).join(',')}`);\\n    let goodSeeds = [];\\n    for (let j = 0; j < seedRange; j++) {\\n        const seedTest = []\\n        let whrng = new WHRNG(startSeed + j);\\n        for (let i = 0; i < sampleSize; i++) {\\n            seedTest.push(whrng.randomRouletteNumber());\\n        }\\n        const percentEqual = arraysPercentEqual(results, seedTest);\\n        if (percentEqual >= .9) {\\n            goodSeeds.push(whrng);\\n            ns.print(`Seed is ${startSeed + j} with equality of ${percentEqual.toPrecision(2)} took ${j} attempts`);\\n        }\\n        ns.print(`Seed ${ns.nFormat(j, '00')} ${seedTest.map(o => ns.nFormat(o, '00')).join(',')} ${percentEqual.toPrecision(2)} ${whrng.v}`);\\n    }\\n    if (goodSeeds.length === 1) {\\n        await playToWinRoulette(ns, goodSeeds[0], inputWager, maxPlay);\\n    } else if (goodSeeds.length > 1) {\\n        ns.print('Too many match, increase sample size');\\n        ns.goToLocation('Slums');\\n        await playRoulette(ns);\\n    } else {\\n        ns.print('No seeds match, probably a win translated to a loss and incremented seed');\\n        ns.goToLocation('Slums');\\n        await playRoulette(ns);\\n    }\\n}\\n\\nconst kickedOutAlert = 'Alright cheater get out of here. You\\\\'re not allowed here anymore.';\\nasync function playToWinRoulette(ns, whrng, inputWager, maxPlay) {\\n    // maxPlay = 0; //testing value\\n    let losses = 0;\\n    let plays = 4;\\n    // while (true) {\\n    while (!find(`//span[text() = \\\"${kickedOutAlert}\\\"]`)) {\\n        // inputWager.value = Math.floor(Math.min(maxPlay, ns.getPlayer().money));\\n        const halfCash = ns.getServerMoneyAvailable('home') / 2 ;\\n        if (halfCash < 1) throw new Error('Out of cash');\\n        await setText2(inputWager, `${Math.floor(Math.min(maxPlay, halfCash))}`);\\n        const luckynumber = whrng.randomRouletteNumber();\\n        const button = find(`//button[text() = '${luckynumber}']`);\\n        // ns.print(`Clicking ${button.innerHTML}`);\\n        await click(button);\\n        plays++;\\n        const result = await getSpinResult(ns);\\n        ns.print(`number lucky ${luckynumber} actual ${result}`);\\n        if (luckynumber !== result) {\\n            losses++;\\n            // uncomment this for ver > 1.6.4\\n            // whrng.randomRouletteNumber();\\n        }\\n        if (losses / plays > .91) {\\n            ns.print('Somethings broken loses are greater than expected');\\n            return;\\n        }\\n    }\\n}\\n\\nasync function getSpinResult(ns) {\\n    while (true) {\\n        let result1 = find(\\\"//h4[contains(text(), 'lost')]\\\") || find(\\\"//h4[contains(text(), 'Lost')]\\\");\\n        let result2 = find(\\\"//h4[contains(text(), 'won')]\\\") || find(\\\"//h4[contains(text(), 'Won')]\\\");\\n        if (result1 == null && result2 == null) {\\n            await ns.sleep(100);\\n        }\\n        else {\\n            break;\\n        }\\n    }\\n\\n    await ns.sleep(20);\\n    let resultAnswer = find(\\\"(//h4)[2]\\\");\\n    if (resultAnswer != null) {\\n        let answer = resultAnswer.textContent;\\n        return parseInt(answer.replaceAll(/B|R/g, ''));\\n    }\\n\\n    return -1;\\n}\\n\\nconst WHRNG = function (totalPlaytime) {\\n    // This one is seeded by the players total play time.\\n    const v = (totalPlaytime / 1000) % 30000;\\n    this.s1 = v;\\n    this.s2 = v;\\n    this.s3 = v;\\n    this.v = v;\\n    this.step = function () {\\n        this.s1 = (171 * this.s1) % 30269;\\n        this.s2 = (172 * this.s2) % 30307;\\n        this.s3 = (170 * this.s3) % 30323;\\n    }\\n    this.random = function () {\\n        this.step();\\n        return (this.s1 / 30269.0 + this.s2 / 30307.0 + this.s3 / 30323.0) % 1.0;\\n    }\\n    this.randomRouletteNumber = () => {\\n        return Math.floor(this.random() * 37);\\n    }\\n}\\n\\n// Some DOM helpers (partial credit to ShamesBond)\\nasync function click(elem) { await elem[Object.keys(elem)[1]].onClick({ isTrusted: true }); }\\nasync function setText2(input, text) { await input[Object.keys(input)[1]].onChange({ isTrusted: true, currentTarget: { value: text } }); }\\nfunction find(xpath) { return doc.evaluate(xpath, doc, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue; }\",\"filename\":\"casinoBreaker.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"casinoBreaker.js\",\"url\":\"blob:https://danielyxie.github.io/44c577ab-7fba-48a2-8a22-2c8a544359a1\",\"moduleSequenceNumber\":148256}],\"dependents\":[],\"ramUsage\":8.7,\"server\":\"home\",\"moduleSequenceNumber\":148256,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.goToLocation\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nNew node init script must stay below 32GB\\n- make > $200k\\n- Hack Casino for $10b\\n- Upgrade home ram to 1TB\\n- Run init.js\\n */\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getServerMaxRam');\\n\\tns.disableLog('getUpgradeHomeRamCost');\\n\\tns.disableLog('getPlayer');\\n\\tns.clearLog();\\n\\tns.tail();\\n\\tlet casinoBreakerPid = 0;\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(100);\\n\\t\\tconst player = ns.getPlayer();\\n\\n\\t\\t//need a min of 1030 for corporation apis\\n\\t\\t//bitnode 9 2tb of home ram > $10b\\n\\t\\tconst ramWanted = 1024;\\n\\t\\t// const ramWanted = 2048;\\n\\t\\tif (ns.getServerMaxRam('home') < ramWanted && player.money > ns.getUpgradeHomeRamCost()) {\\n\\t\\t\\tns.upgradeHomeRam();\\n\\t\\t}\\n\\n\\t\\tif (casinoBreakerPid === -1 && ns.getServerMaxRam('home') >= ramWanted) {\\n\\t\\t\\t//All done time to init\\n\\t\\t\\tns.exec('init.js', 'home');\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tif (casinoBreakerPid !== 0) {\\n\\t\\t\\tcasinoBreakerPid = ns.isRunning(casinoBreakerPid) ? casinoBreakerPid : -1;\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (player.money > 200000 && casinoBreakerPid === 0) {\\n\\t\\t\\twhile (ns.isBusy()) {\\n\\t\\t\\t\\t// need to finish crime before hitting the casino\\n\\t\\t\\t\\tawait ns.sleep(20);\\n\\t\\t\\t}\\n\\t\\t\\tcasinoBreakerPid = ns.exec('casinoBreaker.js', 'home');\\n\\t\\t\\tif (casinoBreakerPid === 0) {\\n\\t\\t\\t\\tcasinoBreakerPid = ns.getRunningScript('casinoBreaker.js', 'home').pid;\\n\\t\\t\\t\\tns.print(`casinoBreakerPid ${casinoBreakerPid}`);\\n\\t\\t\\t}\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (ns.isBusy() || casinoBreakerPid !== 0) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.commitCrime('shoplift');\\n\\t}\\n}\",\"filename\":\"bootstrap32GB.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"bootstrap32GB.js\",\"url\":\"blob:https://danielyxie.github.io/ab24fbd9-ab77-4854-83e3-c6038125d122\",\"moduleSequenceNumber\":148255}],\"dependents\":[],\"ramUsage\":13.85,\"server\":\"home\",\"moduleSequenceNumber\":148255,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"singularity.commitCrime\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { list_servers } from 'opened_servers.js';\\nimport { boxTailSingleton, ramUsage } from 'utils.js';\\nimport { calculateGrowThreads } from './growthFunctions.js';\\n\\nlet ns;\\nconst weaken_script = \\\"weaken.js\\\";\\nconst grow_script = \\\"grow.js\\\";\\nconst hack_script = \\\"hack.js\\\";\\nlet hack_scriptRam = 1.7;\\nlet grow_scriptRam, weaken_scriptRam = 1.75;\\nlet ServerGrowthRate = 1;\\nlet serversForExecution = [];\\nlet hackStatus = [];\\n/** @param {NS} pns **/\\nexport async function main(pns) {\\n\\tns = pns;\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('exec')\\n\\tboxTailSingleton(ns, 'mcp', '🥾', '200px');\\n\\tns.clearLog();\\n\\tweaken_scriptRam = ns.getScriptRam(weaken_script, \\\"home\\\");\\n\\tgrow_scriptRam = ns.getScriptRam(grow_script, \\\"home\\\");\\n\\thack_scriptRam = ns.getScriptRam(hack_script, \\\"home\\\");\\n\\t; ({ ServerGrowthRate } = JSON.parse(ns.read('/tmp/getBitNodeMultipliers.txt')))\\n\\tawait run();\\n}\\nlet hackPercent = .5;\\nlet bonusServers = 0;\\nasync function updateServerLists() {\\n\\tserversForExecution = ['home'].concat(list_servers(ns).filter(s => ns.hasRootAccess(s)));\\n\\tconst beforeHackStatusLength = hackStatus.length;\\n\\tconst serversToHack = list_servers(ns).filter(s => ns.hasRootAccess(s)\\n\\t\\t&& ns.getServerMaxMoney(s) > 0\\n\\t\\t&& ns.getServerRequiredHackingLevel(s) <= ns.getHackingLevel() / 2);\\n\\n\\thackStatus = [];\\n\\tconst skippedServer = []\\n\\tconst player = ns.getPlayer();\\n\\tfor (const server of serversToHack) {\\n\\t\\tconst s = ns.getServer(server);\\n\\t\\ts.hackDifficulty = s.minDifficulty;\\n\\t\\t// check that hacks will succeed. Could be redundant check\\n\\t\\tconst hackChance = ns.formulas.hacking.hackChance(s, player);\\n\\t\\tif (hackChance < .99) {\\n\\t\\t\\t//ns.print(`Hack chance to low ${s} ${(hackChance * 100).toFixed(2)}%`)\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (s.serverGrowth < 40) {\\n\\t\\t\\t//ns.print(`Growth is to low ${s} ${s.serverGrowth}%`)\\n\\t\\t\\tskippedServer.push({ server: server });\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\thackStatus.push({ server: server });\\n\\t}\\n\\tconst lowRamUse = ramUsage(ns) < .5;\\n\\tconst oldHackPercent = hackPercent;\\n\\tconst oldBonusServers = bonusServers;\\n\\tif (lowRamUse) {\\n\\t\\thackPercent = Math.min(hackPercent + .1, .95);\\n\\t\\tif (hackPercent === .95) {\\n\\t\\t\\tbonusServers = Math.min(bonusServers + 1, skippedServer.length);\\n\\t\\t\\thackStatus.push(...skippedServer.slice(0, bonusServers));\\n\\t\\t}\\n\\t} else {\\n\\t\\tbonusServers = Math.max(bonusServers - 1, 0);\\n\\t\\tif (bonusServers <= 0) hackPercent = Math.max(hackPercent - .1, .5);\\n\\t}\\n\\tif (oldHackPercent !== hackPercent || oldBonusServers !== bonusServers) ns.tprint(`BonusServers added ${bonusServers} Hack percent ${hackPercent}`);\\n\\t// after aug install just start hacking on n00dles fist\\n\\tif (hackStatus.length === 0) hackStatus.push({ server: 'n00dles' });\\n\\tif (beforeHackStatusLength < hackStatus.length) ns.tprint(`Servers to hack ${hackStatus.length} ${hackStatus.map(o => o.server).join(',')}`);\\n}\\n\\nasync function run() {\\n\\tlet i = 0;\\n\\tawait updateServerLists();\\n\\tlet updateAfter = Date.now().valueOf() + 30 * 1000;\\n\\twhile (true) {\\n\\t\\tif (!hackStatus[i].pid || (hackStatus[i].pid && !ns.isRunning(hackStatus[i].pid.weaken))) {\\n\\t\\t\\tconst ret = await runHGW(hackStatus[i].server);\\n\\t\\t\\thackStatus[i] = ret;\\n\\t\\t}\\n\\t\\ti = (i + 1) % hackStatus.length;\\n\\t\\tawait ns.sleep(20);\\n\\t\\tif (updateAfter < Date.now()) {\\n\\t\\t\\tupdateAfter = Date.now() + 30 * 1000;\\n\\t\\t\\tawait updateServerLists();\\n\\t\\t\\ti = 0;\\n\\t\\t}\\n\\t}\\n}\\n\\nasync function runHGW(target) {\\n\\tconst currentSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\n\\tif (currentSec > 2) {\\n\\t\\tconst weaken = await runWeaken(target, 1, 1);\\n\\t\\treturn { server: target, promise: ns.asleep(weaken.time + 200), pid: { weaken: weaken.pid } };\\n\\t}\\n\\tconst hack = await runHack(target);\\n\\tconst grow = await runGrow(target, hack.amount);\\n\\tconst weaken = await runWeaken(target, hack.threadsCommitted, grow.threadsCommitted);\\n\\treturn { server: target, promise: ns.asleep(weaken.time + 200), pid: { weaken: weaken.pid, hack: hack.pid, grow: grow.pid } };\\n}\\n\\n//TODO move thread planning for HGW all together before exec\\nasync function runWeaken(target, hackThreads, growThreads) {\\n\\tconst ret = { time: 0, threadsCommitted: 0, pid: 0 };\\n\\tlet security = ns.growthAnalyzeSecurity(growThreads);\\n\\tsecurity += ns.hackAnalyzeSecurity(hackThreads);\\n\\t// slash the security if not at min to prep it\\n\\tconst currentSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\n\\tif (currentSec > 0) {\\n\\t\\tsecurity += currentSec\\n\\t}\\n\\tconst threadsNeeded = Math.max(Math.ceil(security / ns.weakenAnalyze(1, 1)), 1);\\n\\tconst homeThreadsNeeded = Math.max(Math.ceil(security / ns.weakenAnalyze(1, getCores('home'))), 1);\\n\\tconst { host, threads_available } = getHostAndThreads(weaken_scriptRam, threadsNeeded, homeThreadsNeeded);\\n\\tif (!host) return ret;\\n\\tlet threadToUse = Math.min(threads_available, threadsNeeded);\\n\\tif (host === 'home') { //hurray home for grow\\n\\t\\tthreadToUse = Math.min(threads_available, homeThreadsNeeded);\\n\\t}\\n\\tret.pid = await ns.exec(weaken_script, host, threadToUse, target, Math.random());\\n\\tret.time = ns.formulas.hacking.weakenTime(ns.getServer(target), ns.getPlayer());\\n\\tconst message = `Weak ${host}[${threadToUse}] -> ${target} in ${ns.tFormat(ret.time)}]`;\\n\\tif (ret.pid === 0) {\\n\\t\\tns.tprint('FAILED ' + message);\\n\\t\\tns.print('FAILED ' + message);\\n\\t\\treturn ret;\\n\\t}\\n\\tret.threadsCommitted = threadToUse;\\n\\treturn ret;\\n}\\n\\nasync function runGrow(target, hackAmount) {\\n\\tconst ret = { time: 0, threadsCommitted: 0, pid: 0 };\\n\\t// grow to counter the hack or just to fill up the server with money\\n\\tconst moneyToGrow = Math.max(hackAmount, ns.getServerMaxMoney(target) - ns.getServerMoneyAvailable(target));\\n\\tconst homeThreadsNeeded = Math.floor(calculateGrowThreads(ns, target, moneyToGrow, getCores('home'), { ServerGrowthRate }));\\n\\tconst threadsNeeded = Math.floor(calculateGrowThreads(ns, target, moneyToGrow, 1, { ServerGrowthRate }));\\n\\tconst { host, threads_available } = getHostAndThreads(grow_scriptRam, threadsNeeded, homeThreadsNeeded);\\n\\tif (!host) return ret;\\n\\tlet threadToUse = Math.min(threads_available, threadsNeeded);\\n\\tif (host === 'home') { //hurray home for grow\\n\\t\\tthreadToUse = Math.min(threads_available, homeThreadsNeeded);\\n\\t}\\n\\tif (threadToUse < 1) {\\n\\t\\treturn ret;\\n\\t}\\n\\tret.pid = await ns.exec(grow_script, host, threadToUse, target, Math.random());\\n\\tret.time = ns.formulas.hacking.growTime(ns.getServer(target), ns.getPlayer());\\n\\tconst message = `Grow ${host}[${threadToUse}] -> ${target} in ${ns.tFormat(ret.time)}]`;\\n\\tif (ret.pid === 0) {\\n\\t\\tns.tprint('FAILED ' + message);\\n\\t\\tns.print('FAILED ' + message);\\n\\t\\treturn ret;\\n\\t}\\n\\tret.threadsCommitted = threadToUse;\\n\\treturn ret;\\n}\\n\\nasync function runHack(target) {\\n\\tconst ret = { time: 0, threadsCommitted: 0, pid: 0, amount: 0 };\\n\\tconst threadsNeeded = Math.max(Math.floor(hackPercent / ns.formulas.hacking.hackPercent(ns.getServer(target), ns.getPlayer())), 1);\\n\\tconst { host, threads_available } = getHostAndThreads(hack_scriptRam, threadsNeeded, threadsNeeded * 1.1 /*try to dissuade hacks on home*/);\\n\\tif (!host) return ret;\\n\\tlet threadToUse = Math.min(threads_available, threadsNeeded);\\n\\tif (ns.getServerMoneyAvailable(target) / ns.getServerMaxMoney(target) < .9) {\\n\\t\\tthreadToUse = 1; // 0 or 1 just don't hack if server is not prepped\\n\\t}\\n\\n\\tconst cashingOut = ns.hackAnalyze(target) * threadToUse * ns.getServerMoneyAvailable(target);\\n\\tret.pid = await ns.exec(hack_script, host, threadToUse, target, Math.random());\\n\\tret.time = ns.formulas.hacking.hackTime(ns.getServer(target), ns.getPlayer());\\n\\tconst message = `Hack ${host}[${threadToUse}] -> ${target}[${ns.nFormat(cashingOut, \\\"($ 0.00 a)\\\")} in ${ns.tFormat(ret.time)}]`;\\n\\tif (ret.pid === 0) {\\n\\t\\tns.tprint('FAILED ' + message);\\n\\t\\tns.print('FAILED ' + message);\\n\\t\\treturn ret;\\n\\t}\\n\\tret.amount = cashingOut;\\n\\tns.print(message);\\n\\tret.threadsCommitted = threadToUse;\\n\\treturn ret;\\n}\\n\\nconst getCores = (host) => ns.getServer(host).cpuCores;\\nfunction getHostAndThreads(scriptRam, threadsNeeded, threadsNeededOnHome) {\\n\\tthreadsNeededOnHome = threadsNeededOnHome || threadsNeeded;\\n\\tconst hosts = serversForExecution.map((host) => {\\n\\t\\tlet maxRam = ns.getServerMaxRam(host);\\n\\t\\t// reserve some ram for other scripts\\n\\t\\tif (host === 'home') {\\n\\t\\t\\tmaxRam = Math.max(maxRam * .75, maxRam - 128);\\n\\t\\t}\\n\\t\\tconst threads_available = Math.floor((maxRam - ns.getServerUsedRam(host)) / scriptRam);\\n\\t\\tconst threadsAvailMinusNeed = host === 'home' ? threads_available - threadsNeededOnHome : threads_available - threadsNeeded;\\n\\t\\treturn { threads_available, host, threadsAvailMinusNeed };\\n\\t}).filter((hostO) => hostO.threads_available >= 1);\\n\\tif (hosts.length <= 0) return { host: null, threads_available: 0 };\\n\\thosts.sort((a, b) => a.threadsAvailMinusNeed - b.threadsAvailMinusNeed);\\n\\t// take the closet fit from front of the array or just the biggest threads available from the end\\n\\treturn hosts.filter(o => o.threadsAvailMinusNeed >= 0).shift() || hosts.pop();\\n}\",\"filename\":\"mcp_hgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"growthFunctions.js\",\"url\":\"blob:https://danielyxie.github.io/3611b7a9-f8d6-47ff-b0f8-7d7ab81d408e\",\"moduleSequenceNumber\":148241},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/46e1b457-b520-43dd-ba37-cd2254a20b95\",\"moduleSequenceNumber\":148233},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/8bf47a8e-575f-47e5-94dc-ad5e626997f4\",\"moduleSequenceNumber\":148216},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/7dde4f8b-ecb0-4ab1-b3ab-e9ec20e7cee0\",\"moduleSequenceNumber\":148217},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/f7769620-c1bb-4ca5-89f7-340763c675ef\",\"moduleSequenceNumber\":148216},{\"filename\":\"mcp_hgw.js\",\"url\":\"blob:https://danielyxie.github.io/2a213c9e-cec7-4840-bae5-3e9d3b66d762\",\"moduleSequenceNumber\":148354}],\"dependents\":[],\"ramUsage\":12.5,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":148354,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @author modar <gist.github.com/xmodar>\\n * {@link https://www.reddit.com/r/Bitburner/comments/tgtkr1/here_you_go_i_fixed_growthanalyze_and_growpercent/}\\n *\\n * @typedef {Partial<{\\n *   moneyAvailable: number;\\n *   hackDifficulty: number;\\n *   ServerGrowthRate: number // ns.getBitNodeMultipliers().ServerGrowthRate\\n *   ; // https://github.com/danielyxie/bitburner/blob/dev/src/BitNode/BitNode.tsx\\n * }>} GrowOptions\\n */\\n\\nexport function calculateGrowGain(ns, host, threads = 1, cores = 1, opts = {}) {\\n    threads = Math.max(Math.floor(threads), 0);\\n    const moneyMax = ns.getServerMaxMoney(host);\\n    const { moneyAvailable = ns.getServerMoneyAvailable(host) } = opts;\\n    const rate = growPercent(ns, host, threads, cores, opts);\\n    return Math.min(moneyMax, rate * (moneyAvailable + threads)) - moneyAvailable;\\n}\\n\\n/** @param {number} gain money to be added to the server after grow */\\nexport function calculateGrowThreads(ns, host, gain, cores = 1, opts = {}) {\\n    const moneyMax = ns.getServerMaxMoney(host);\\n    const { moneyAvailable = ns.getServerMoneyAvailable(host) } = opts;\\n    const money = Math.min(Math.max(moneyAvailable + gain, 0), moneyMax);\\n    const rate = Math.log(growPercent(ns, host, 1, cores, opts));\\n    const logX = Math.log(money * rate) + moneyAvailable * rate;\\n    return Math.max(lambertWLog(logX) / rate - moneyAvailable, 0);\\n}\\n\\nfunction growPercent(ns, host, threads = 1, cores = 1, opts = {}) {\\n    const { ServerGrowthRate = 1, hackDifficulty = ns.getServerSecurityLevel(host), } = opts;\\n    const growth = ns.getServerGrowth(host) / 100;\\n    const multiplier = ns.getPlayer().hacking_grow_mult;\\n    const base = Math.min(1 + 0.03 / hackDifficulty, 1.0035);\\n    const power = growth * ServerGrowthRate * multiplier * ((cores + 15) / 16);\\n    return base ** (power * threads);\\n}\\n\\n/**\\n * Lambert W-function for log(x) when k = 0\\n * {@link https://gist.github.com/xmodar/baa392fc2bec447d10c2c20bbdcaf687}\\n */\\nfunction lambertWLog(logX) {\\n    if (isNaN(logX)) return NaN;\\n    const logXE = logX + 1;\\n    const logY = 0.5 * log1Exp(logXE);\\n    const logZ = Math.log(log1Exp(logY));\\n    const logN = log1Exp(0.13938040121300527 + logY);\\n    const logD = log1Exp(-0.7875514895451805 + logZ);\\n    let w = -1 + 2.036 * (logN - logD);\\n    w *= (logXE - Math.log(w)) / (1 + w);\\n    w *= (logXE - Math.log(w)) / (1 + w);\\n    w *= (logXE - Math.log(w)) / (1 + w);\\n    return isNaN(w) ? (logXE < 0 ? 0 : Infinity) : w;\\n}\\nconst log1Exp = (x) => x <= 0 ? Math.log(1 + Math.exp(x)) : x + log1Exp(-x);\",\"filename\":\"growthFunctions.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"home\",\"moduleSequenceNumber\":148241,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Basic window class that other widgets are built on\\nexport class curse_window {\\n\\tconstructor (ns, border=false, height=27, width=51) {\\n\\t\\tthis.ns = ns;\\n\\t\\t\\n\\t\\t// Disable log to prevent it from interfering with display\\n\\t\\tthis.ns.disableLog(\\\"ALL\\\");\\n\\t\\t\\n\\t\\t// Relationship to other windows\\n\\t\\t// isChild = false means this is the object running the display\\n\\t\\tthis.ischild = false;\\n\\t\\tthis.childwin = [];\\n\\t\\t\\n\\t\\t// Size of the buffer being output to the log\\n\\t\\tthis.height = height;\\n\\t\\tthis.width = width;\\n\\t\\t\\n\\t\\t// Location coordinates if set as child\\n\\t\\t// Relative to parent window\\n\\t\\tthis.x = 0;\\n\\t\\tthis.y = 0;\\n\\t\\t\\n\\t\\t// TODO: Unused, planned to sort windows by priority\\n\\t\\tthis.layer = 0;\\n\\t\\t\\n\\t\\t// Window can have a border, default false\\n\\t\\tthis.border = border;\\n\\t\\tthis.border_top = true;\\n\\t\\tthis.border_bottom = true;\\n\\t\\tthis.border_left = true;\\n\\t\\tthis.border_right = true;\\n\\t\\t\\n\\t\\t// Run once to build the buffer\\n\\t\\tthis.clearBuffer();\\n\\t}\\n\\t\\n\\t// Convenience handler to attach child window\\n\\taddChild(handle, x, y) {\\n\\t\\thandle.setPosition(x, y);\\n\\t\\thandle.ischild = true;\\n\\t\\thandle.parenthandle = this;\\n\\t\\tthis.childwin.push(handle);\\n\\t}\\n\\t\\n\\t// Get dimensions of the drawing area\\n\\tgetSubDimensions () {\\n\\t\\tlet bordervbuff = 0;\\n\\t\\tlet borderwbuff = 0;\\n\\t\\tif (this.border) {\\n\\t\\t\\tif (this.border_top) {\\n\\t\\t\\t\\tbordervbuff++\\n\\t\\t\\t}\\n\\t\\t\\tif (this.border_bottom) {\\n\\t\\t\\t\\tbordervbuff++\\n\\t\\t\\t}\\n\\t\\t\\tif (this.border_left) {\\n\\t\\t\\t\\tborderwbuff++\\n\\t\\t\\t}\\n\\t\\t\\tif (this.border_right) {\\n\\t\\t\\t\\tborderwbuff++\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn [this.width - borderwbuff, this.height - bordervbuff];\\n\\t}\\n\\t\\n\\t// Resize the window\\n\\tsetDimensions (height, width) {\\n\\t\\tthis.height = height;\\n\\t\\tthis.width = width;\\n\\t\\tthis.clearBuffer();\\n\\t}\\n\\t\\n\\t// Change position relative to parent window\\n\\tsetPosition (x, y) {\\n\\t\\tthis.x = x;\\n\\t\\tthis.y = y;\\n\\t}\\n\\t\\n\\t// Internal function used to print over existing text\\n\\tsubstringReplace (index, source, text) {\\n\\t\\tlet leftString = source.substring(0, index);\\n\\t\\tlet rightString = source.substring(index + text.length);\\n\\t\\treturn [leftString, text, rightString].join('');\\n\\t}\\n\\t\\n\\t// Basic function to arbitrarily place text in buffer\\n\\taddText(x, y, text) {\\n\\t\\t\\n\\t\\t// Use adjusted coordinates to adjust for border\\n\\t\\tlet ay = y;\\n\\t\\tlet ax = x;\\n\\t\\tif (this.border) {\\n\\t\\t\\tif (this.border_left) {\\n\\t\\t\\t\\tax++;\\n\\t\\t\\t}\\n\\t\\t\\tif (this.border_bottom) {\\n\\t\\t\\t\\tay++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\n\\t\\tay = this.height - ay - 1;\\n\\t\\t\\n\\t\\tlet drawArea = this.getSubDimensions();\\n\\t\\t\\n\\t\\tif (y < drawArea[1] && x < drawArea[0]) {\\n\\t\\t\\t\\n\\t\\t\\t// If final line is longer than window, truncate it\\n\\t\\t\\tif (text.length + ax > this.width) {\\n\\t\\t\\t\\ttext = text.substring(0, this.width - ax);\\n\\t\\t\\t}\\n\\t\\t\\n\\t\\t\\t// Use substringReplace to overwrite existing buffer line\\n\\t\\t\\tthis.buffer[ay] = this.substringReplace(ax, this.buffer[ay], text);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Function to create an empty buffer\\n\\t// Bulk of work is to create borders\\n\\tclearBuffer() {\\n\\t\\tif (this.border) {\\n\\t\\t\\tthis.buffer = [];\\n\\t\\t\\tif (this.border_top) {\\n\\t\\t\\t\\tlet line = '─'.repeat(this.width);\\n\\t\\t\\t\\tif (this.border_left) {\\n\\t\\t\\t\\t\\tline = this.substringReplace(0, line, '┌');\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (this.border_right) {\\n\\t\\t\\t\\t\\tline = this.substringReplace(line.length - 1, line, '┐');\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tthis.buffer.push(line);\\n\\t\\t\\t}\\n\\t\\t\\tlet line = ' '.repeat(this.width);\\n\\t\\t\\tif (this.border_left) {\\n\\t\\t\\t\\tline = this.substringReplace(0, line, '│');\\n\\t\\t\\t}\\n\\t\\t\\tif (this.border_right) {\\n\\t\\t\\t\\tline = this.substringReplace(line.length - 1, line, '│');\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\twhile (this.buffer.length < this.height) {\\n\\t\\t\\t\\tthis.buffer.push(line);\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\tif (this.border_bottom) {\\n\\t\\t\\t\\tthis.buffer.pop();\\n\\t\\t\\t\\tlet line = '─'.repeat(this.width);\\n\\t\\t\\t\\tif (this.border_left) {\\n\\t\\t\\t\\t\\tline = this.substringReplace(0, line, '└');\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (this.border_right) {\\n\\t\\t\\t\\t\\tline = this.substringReplace(line.length - 1, line, '┘');\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tthis.buffer.push(line);\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t} else {\\n\\t\\t\\t// Really simple whitespace buffer if there's no borders\\n\\t\\t\\tthis.buffer = [];\\n\\t\\t\\tlet line = ' '.repeat(this.width);\\n\\t\\t\\twhile (this.buffer.length < this.height) {\\n\\t\\t\\t\\tthis.buffer.push(line);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Print in a single action for experiency\\n\\tdrawToLog () {\\n\\t\\tthis.ns.print(this.buffer.join('\\\\n'));\\n\\t}\\n\\t\\n\\t// Function to composite together the output of this window and all it's\\n\\t// children.\\n\\trefreshBuffer(print=true) {\\n\\t\\t// Proactively clear the log if we're about to print\\n\\t\\tif (!this.ischild && print) {\\n\\t\\t\\tthis.ns.clearLog();\\n\\t\\t}\\n\\t\\t\\n\\t\\t// Go through children\\n\\t\\t// TODO: Add layer support\\n\\t\\tfor (let i = 0; i < this.childwin.length; i++) {\\n\\t\\t\\tconst child = this.childwin[i];\\n\\t\\t\\tchild.render(false);\\n\\t\\t\\tlet cbuffer = this.childwin[i].buffer;\\n\\t\\t\\t\\n\\t\\t\\t// Composite the buffers with the existing buffer\\n\\t\\t\\tfor (let y = 0; y < cbuffer.length; y++) {\\n\\t\\t\\t\\tlet index = (this.buffer.length - this.childwin[i].y - this.childwin[i].height) + y;\\n\\t\\t\\t\\tthis.buffer[index] = this.substringReplace(this.childwin[i].x, this.buffer[index], cbuffer[y]);\\n\\t\\t\\t\\tif (this.buffer[index].length > this.width) {\\n\\t\\t\\t\\t\\tthis.buffer[index] = this.buffer[index].slice(0,this.width);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t\\n\\trenderParent() {\\n\\t\\tif (this.ischild) {\\n\\t\\t\\tthis.parenthandle.renderParent()\\n\\t\\t} else {\\n\\t\\t\\tthis.render()\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Function for getting the buffer as a string rather than printing\\n\\t// Because ns is not used anywhere in this, is good for asynchronous rendering\\n\\tasync renderToString(clear=false, refresh=true) {\\n\\t\\tif (refresh) {\\n\\t\\t\\tthis.refreshBuffer(false)\\n\\t\\t}\\n\\t\\tlet output = this.buffer.join('\\\\n');\\n\\t\\tif (clear) {\\n\\t\\t\\tthis.clearBuffer();\\n\\t\\t}\\n\\t\\treturn output;\\n\\t}\\n\\t\\n\\t// Function compiling together multiple operations\\n\\t// Will print the buffer, but also supports simple paging to keep underlying\\n\\t// content unchanged.\\n\\trender (clear=false, refresh=true ) {\\n\\t\\tlet tempbuffer = []\\n\\t\\tif (!clear) {\\n\\t\\t\\ttempbuffer = [...this.buffer];\\n\\t\\t}\\n\\t\\t\\n\\t\\tif (refresh) {\\n\\t\\t\\tthis.refreshBuffer();\\n\\t\\t}\\n\\t\\t\\n\\t\\tif (!this.ischild) {\\n\\t\\t\\tthis.drawToLog();\\n\\t\\t}\\n\\t\\tif (clear) {\\n\\t\\t\\tthis.clearBuffer();\\n\\t\\t} else {\\n\\t\\t\\tthis.buffer = tempbuffer\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Render wrapper with included async, meant to be a drop i replacement\\n\\t// for ns.sleeps in code\\n\\tasync rendersleep(time, clear=false) {\\n\\t\\tlet sleephandle = this.ns.asleep(time);\\n\\t\\tthis.render(clear);\\n\\t\\tawait sleephandle;\\n\\t}\\n}\\n\\n// Specialty window, provides scrolling text output. Used to replicated existing\\n// log window.\\nexport class curse_stream extends curse_window {\\n\\tconstructor (ns, border=false, height=100, width=51) {\\n\\t\\tsuper(ns, border, height, width);\\n\\t\\tthis.textBuffer = [];\\n\\t\\tthis.renderOnPrint = false;\\n\\t}\\n\\t\\n\\t// extend clearbuffer to make sure it has a clean blankline saved\\n\\tclearBuffer() {\\n\\t\\tsuper.clearBuffer();\\n\\t\\t\\n\\t\\tthis.textBuffer = [];\\n\\t\\t\\n\\t\\tif (this.buffer.length > 1) {\\n\\t\\t\\tthis.blankLine = this.buffer[1]\\n\\t\\t} else {\\n\\t\\t\\tthis.blankLine = this.buffer[0]\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Mostly a drop in replacement for ns.print\\n\\t// TODO: Add support for multiple inputs\\n\\tprint (input) {\\n\\t\\tinput = String(input)\\n\\t\\t\\n\\t\\tlet subdim = super.getSubDimensions();\\n\\t\\t\\n\\t\\t// Check width and perform wordwrap if input exceeds linewidth\\n\\t\\tlet inputWrap = [];\\n\\t\\tlet inputTail = input.slice(subdim[0]-1);\\n\\t\\t\\n\\t\\twhile (inputTail != \\\"\\\") {\\n\\t\\t\\tinputWrap.push(input.slice(0, subdim[0]-1));\\n\\t\\t\\tinput = inputTail;\\n\\t\\t\\tinputTail = input.slice(subdim[0]-1);\\n\\t\\t}\\n\\t\\tinputWrap.push(input)\\n\\t\\t\\n\\t\\t// Add the lines individually so scrolling can be managed smoothly\\n\\t\\twhile (inputWrap.length > 0) {\\n\\t\\t\\tlet line = inputWrap.shift();\\n\\t\\t\\t\\n\\t\\t\\t// By removing top index all the bufferlines move up by one inherently\\n\\t\\t\\tif (this.border && this.border_top && this.buffer.length > 1) {\\n\\t\\t\\t\\tthis.buffer.splice(1, 1);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.buffer.splice(0, 1);\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\t// Insert a new blankline at the bottom to restore buffer size\\n\\t\\t\\tif (this.border && this.border_bottom) {\\n\\t\\t\\t\\tthis.buffer.splice(-1, 0, this.blankLine)\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.buffer.splice(this.buffer.length, 0, this.blankLine)\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Use addText to write on the new blankline\\n\\t\\t\\tthis.addText(0,0,line);\\n\\t\\t\\t\\n\\t\\t\\t// Keep the textbuffer for later\\n\\t\\t\\tthis.textBuffer.push(line);\\n\\t\\t\\n\\t\\t\\t// Trim the textbuffer if it's too long\\n\\t\\t\\tif (this.textBuffer.length > subdim[1]) {\\n\\t\\t\\t\\tthis.textBuffer.shift();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\n\\t\\t// If set to true, visually makes it print immediately, replicating\\n\\t\\t// normal print behavior. Resource intensive.\\n\\t\\tif (this.renderOnPrint) {\\n\\t\\t\\tsuper.renderParent();\\n\\t\\t}\\n\\t}\\n}\\n\\n// Simple progress bar widget\\nexport class curse_progress extends curse_window {\\n\\tconstructor (ns, border=false, height=1, width=51) {\\n\\t\\tif (border && height == 1) {\\n\\t\\t\\theight = 3;\\n\\t\\t}\\n\\t\\tsuper(ns, border, height, width);\\n\\t}\\n\\t\\n\\t// Only needs on function to generate the progress bar\\n\\tupdate (progress) {\\n\\t\\tlet width = this.getSubDimensions()[0];\\n\\t\\tlet increment = width / 100;\\n\\t\\t\\n\\t\\tprogress = progress * 100;\\n\\t\\t\\n\\t\\tthis.addText(0, 0, '#'.repeat(Math.ceil(increment * progress)).padEnd(width));\\n\\t}\\n}\\n\\n// Main function provides example code\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst win = new curse_stream(ns, true, 20);\\n\\tconst progwin = new curse_progress(ns, true, 3, 21);\\n\\tconst bouncetext = new curse_window(ns, false, 1, 4);\\n\\n\\tbouncetext.addText(0,0,\\\"BOO!\\\")\\n\\n\\twin.addChild(progwin, 5,6)\\n\\twin.addChild(bouncetext, 1, 10);\\n\\t\\n\\tlet y = 10;\\n\\tlet x = 1;\\n\\tlet z = 0;\\n\\tlet zdir = true\\n\\tlet drawarea = win.getSubDimensions()\\n\\twin.clearBuffer();\\n\\twhile (true) {\\n\\t\\tif (y > drawarea[1] - 1) {\\n\\t\\t\\ty = 0;\\n\\t\\t}\\n\\t\\tif (x > drawarea[0] - 2) {\\n\\t\\t\\tx = 0;\\n\\t\\t}\\n\\t\\t\\n\\t\\tbouncetext.setPosition(x, y)\\n\\t\\t\\n\\t\\tif (z > 99) {\\n\\t\\t\\tzdir = false\\n\\t\\t} else if ( z < 1 ) {\\n\\t\\t\\tzdir = true\\n\\t\\t}\\n\\t\\t\\n\\t\\tprogwin.update(z / 100)\\n\\n\\t\\twin.print(\\\"=\\\".repeat(z));\\n\\t\\tawait win.rendersleep(800);\\n\\t\\tx++;\\n\\t\\ty++;\\n\\t\\tif (zdir) {\\n\\t\\t\\tz++;\\n\\t\\t} else {\\n\\t\\t\\tz--;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"bcurses.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"bcurses.js\",\"url\":\"blob:https://danielyxie.github.io/02668ca8-200a-4345-ae30-6888acf92ad7\",\"moduleSequenceNumber\":680141}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":148242,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n    ['trips-per-cycle', 1000],\\n    ['money-threshold', 1_000_000_000_000]\\n];\\n\\nexport function autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\n\\n// TODO: Joining factions gives a small amount of int xp.\\n// With singularity functions, soft reset, and the 10 corp factions you can create a script that farms int xp rather quickly.\\n// This would be faster than the below travel-based method, which has been nerfed quite heavily\\n\\n/** @param {NS} ns \\n * Script contributed by https://github.com/ShawnPatton\\n * Concept: A small amount of intelligence is granted when you (successfully) travel to a new city. This script converts money into intelligence exp! **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"travelToCity\\\");\\n    ns.disableLog(\\\"sleep\\\");\\n    ns.tail();\\n    let options = ns.flags(argsSchema);\\n    let tripsPerCycle = options['trips-per-cycle'];\\n    let moneyThreshold = options['money-threshold'];\\n    ns.print(`trips-per-cycle: ` + tripsPerCycle);\\n    ns.print(`money-threshold: ` + ns.nFormat(moneyThreshold, '$0.0a'));\\n    let justStarted = true;\\n    let previousInt = ns.getPlayer().intelligence;\\n    let currentInt = previousInt;\\n    let previousLevelTime = Date.now();\\n    let levelupTime;\\n    let cycles = 0;\\n    let duration = 0;\\n    let tripsPerLevel = 0;\\n    let tripsPerMs = 0;\\n    ns.print(`Starting Script at Int ` + currentInt);\\n    while (true) {\\n        while (ns.getPlayer().money > moneyThreshold) {\\n            for (let i = 0; i < tripsPerCycle; i++) {\\n                ns.travelToCity(\\\"Aevum\\\");\\n                ns.travelToCity(\\\"Sector-12\\\");\\n            }\\n            await ns.sleep(1);\\n            cycles++;\\n            if (previousInt != ns.getPlayer().intelligence) {\\n                currentInt = ns.getPlayer().intelligence;\\n                levelupTime = Date.now();\\n                duration = levelupTime - previousLevelTime;\\n                tripsPerLevel = cycles * tripsPerCycle * 2;\\n                tripsPerMs = Math.floor(tripsPerLevel / duration);\\n                ns.print(`Level Up: Int ` + currentInt + (justStarted ? ` Partial` : ` Full`) + ` Level in `\\n                    + ns.tFormat(duration) + ` & ` + tripsPerLevel + ` Travels`);\\n                ns.print(`Approximately ` + tripsPerMs + ` Trips/Millisecond`);\\n                previousLevelTime = levelupTime;\\n                previousInt = currentInt;\\n                justStarted = false;\\n                cycles = 0;\\n            }\\n        }\\n        await ns.sleep(10000);\\n        ns.print(`Below money threshold, waiting 10 seconds`);\\n    }\\n}\",\"filename\":\"farm_int.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"farm_int.js\",\"url\":\"blob:https://danielyxie.github.io/ec433dd7-b226-4f17-b60c-2efcbf6e4da5\",\"moduleSequenceNumber\":522}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":148243,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//alainbryden Determined that BitRunners should be completed first, even if Fulcrum…\\n// Latest commit 5d19300 2 days ago\\n// noinspection JSValidateJSDoc\\n\\nimport { boxTailSingleton, tryGetBitNodeMultipliers } from 'utils.js';\\nimport {\\n    getAllAugmentRepReq,\\n    getAllAugmentStats,\\n    getAugmentsPerFaction,\\n    getOwnedAugmentationsStatic,\\n    hasBladesSimulacrum\\n} from \\\"augments.js\\\";\\nconst companySpecificConfigs = [\\n    { name: \\\"NWO\\\", statModifier: 25 },\\n    { name: \\\"MegaCorp\\\", statModifier: 25 },\\n    { name: \\\"Blade Industries\\\", statModifier: 25 },\\n    { name: \\\"Fulcrum Secret Technologies\\\", companyName: \\\"Fulcrum Technologies\\\", repRequiredForFaction: 250000 }, // Special snowflake\\n    { name: \\\"Silhouette\\\", companyName: \\\"TBD\\\", repRequiredForFaction: 999e9 /* Hack to force work until max promotion. */ }\\n]\\nconst jobs = [ // Job stat requirements for a company with a base stat modifier of +224 (modifier of all megacorps except the ones above which are 25 higher)\\n    { name: \\\"it\\\", reqRep: [0, 7E3, 35E3, 175E3], reqHack: [225, 250, 275, 375], reqCha: [0, 0, 275, 300], repMult: [0.9, 1.1, 1.3, 1.4] },\\n    { name: \\\"software\\\", reqRep: [0, 8E3, 40E3, 200E3, 400E3, 800E3, 1.6e6, 3.2e6], reqHack: [225, 275, 475, 625, 725, 725, 825, 975], reqCha: [0, 0, 275, 375, 475, 475, 625, 725], repMult: [0.9, 1.1, 1.3, 1.5, 1.6, 1.6, 1.75, 2] },\\n    { name: \\\"security\\\", reqRep: [0, 8E3, 36E3, 144E3], reqCombat: [275, 375, 475, 725], reqHack: [0, 225, 250, 275], reqCha: [0, 275, 325, 375], repMult: [0.9, 1.1, 1.3, 1.5] },\\n]\\nconst factions = [\\\"Illuminati\\\", \\\"Daedalus\\\", \\\"The Covenant\\\", \\\"ECorp\\\", \\\"MegaCorp\\\", \\\"Bachman & Associates\\\", \\\"Blade Industries\\\", \\\"NWO\\\", \\\"Clarke Incorporated\\\", \\\"OmniTek Incorporated\\\",\\n    \\\"Four Sigma\\\", \\\"KuaiGong International\\\", \\\"Fulcrum Secret Technologies\\\", \\\"BitRunners\\\", \\\"The Black Hand\\\", \\\"NiteSec\\\", \\\"Aevum\\\", \\\"Chongqing\\\", \\\"Ishima\\\", \\\"New Tokyo\\\", \\\"Sector-12\\\",\\n    \\\"Volhaven\\\", \\\"Speakers for the Dead\\\", \\\"The Dark Army\\\", \\\"The Syndicate\\\", \\\"Silhouette\\\", \\\"Tetrads\\\", \\\"Slum Snakes\\\", \\\"Netburners\\\", \\\"Tian Di Hui\\\", \\\"CyberSec\\\"]; //TODO: Add Bladeburner Automation at BN7.1\\nconst cannotWorkForFactions = [\\\"Church of the Machine God\\\", \\\"Bladeburners\\\"]\\n\\n// These factions should ideally be completed in this order (TODO: Check for augmentation dependencies)\\nconst preferredEarlyFactionOrder = [\\n    \\\"Netburners\\\", // Improve hash income, which is useful or critical for almost all BNs\\n    \\\"Tian Di Hui\\\", \\\"Aevum\\\", // These give all the company_rep and faction_rep bonuses early game\\n    \\\"Daedalus\\\", // Once we have all faction_rep boosting augs, there's no reason not to work towards Daedalus as soon as it's available/feasible so we can buy Red Pill\\n    \\\"CyberSec\\\", /* Quick, and NightSec aug depends on an aug from here */ \\\"NiteSec\\\", \\\"Tetrads\\\", // Cha augs to speed up earning company promotions\\n    \\\"Bachman & Associates\\\", // Boost company/faction rep for future augs\\n    \\\"BitRunners\\\", // Fast source of some unique hack augs\\n    \\\"Fulcrum Secret Technologies\\\", // Will be removed if hack level is too low to backdoor their server\\n    \\\"ECorp\\\", // More cmp_rep augs, and some strong hack ones as well\\n    \\\"The Black Hand\\\", // Fastest sources of hacking augs after the above companies\\n    \\\"The Dark Army\\\", // Unique cmp_rep aug TODO: Can it sensibly be gotten before corps? Requires 300 all combat stats.\\n    \\\"Clarke Incorporated\\\", \\\"OmniTek Incorporated\\\", \\\"NWO\\\", // More hack augs from companies\\n    \\\"Chongqing\\\", // Unique Source of big 1.4x hack exp boost (Can only join if not in e.g. Aevum as well)\\n];\\n// This is an approximate order of most useful augmentations left to offer, assuming all early-game factions have been cleaned out\\n// TODO make a combat version of this\\nconst preferredCompanyFactionOrder = [\\n    \\\"Bachman & Associates\\\", // Augs boost company_rep by 1.65, faction_rep by 1.50. Lower rep-requirements than ECorp augs, so should be a priority to speed up future resets\\n    \\\"ECorp\\\", // Offers 2.26 multi worth of company_rep and major hacking stat boosts (1.51 hack / 1.54 exp / 1.43 success / 3.0 grow / 2.8 money / 1.25 speed), but high rep reqs\\n    \\\"Clarke Incorporated\\\", // Biggest boost to hacking after above factions (1.38)\\n    \\\"OmniTek Incorporated\\\", // Next big boost to hacking after above factions (1.20) (NWO is bigger, but this has lower Cha reqs.)\\n    \\\"NWO\\\", // Biggest boost to hacking after above factions (1.26)\\n    \\\"Blade Industries\\\", // Mostly redundant after Ecorp - provides remaining hack-related augs (1.10 money, 1.03 speed)\\n    \\\"MegaCorp\\\", // Offers 1 unique aug boosting all physical traits by 1.35\\n    \\\"KuaiGong International\\\", // 1.40 to agility, defense, strength\\n    \\\"Fulcrum Secret Technologies\\\", // Big boosts to company_rep and hacking, but requires high hack level to backdoor their server, so might have to be left until later\\n    \\\"Four Sigma\\\", // No unique augs, but note that if accessible early on, Fulcrum + Four Sigma is a one-two punch to get all company rep boosting augs in just 2 factions\\n]\\n// Order in which to focus on crime factions. Start with the hardest-to-earn invites, assume we will skip to next best if not achievable.\\nconst preferredCrimeFactionOrder = [\\\"Slum Snakes\\\", \\\"Tetrads\\\", \\\"Speakers for the Dead\\\", \\\"The Syndicate\\\", \\\"The Dark Army\\\", \\\"The Covenant\\\", \\\"Daedalus\\\", \\\"Netburners\\\", \\\"NiteSec\\\", \\\"The Black Hand\\\"];\\n// Gang factions in order of ease-of-invite. If gangs are available, as we near 54K Karma to unlock gangs (as per --karma-threshold-for-gang-invites), we will attempt to get into any/all of these.\\nconst desiredGangFactions = [\\\"Slum Snakes\\\", \\\"The Syndicate\\\", \\\"The Dark Army\\\", \\\"Speakers for the Dead\\\"];\\n\\nconst loopSleepInterval = 5000; // 5 seconds\\nconst restartWorkInterval = 30 * 1000; // 30 seconds Collect e.g. rep earned by stopping and starting work;\\nconst statusUpdateInterval = 60 * 1000; // 1 minute (outside of this, minor updates in e.g. stats aren't logged)\\nconst checkForNewPrioritiesInterval = 10 * 60 * 1000; // 10 minutes. Interrupt whatever we're doing and check whether we could be doing something more useful.\\n\\nlet shouldFocusAtWork; // Whether we should focus on work or let it be backgrounded (based on whether \\\"Neuroreceptor Management Implant\\\" is owned, or \\\"--no-focus\\\" is specified)\\n// And a bunch of globals because managing state and encapsulation is hard.\\nlet hasFocusPenalty, hasSimulacrum, repToDonate, fulcrummHackReq, notifiedAboutDaedalus;\\nlet dictFactionFavors, playerGang, mainLoopStart, scope, numJoinedFactions, lastActionRestart, lastTravel, crimeCount;\\nlet firstFactions, skipFactions, completedFactions, softCompletedFactions, mostExpensiveAugByFaction, mostExpensiveDesiredAugByFaction;\\n\\nexport function autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    const lastFlag = args.length > 1 ? args[args.length - 2] : null;\\n    if (lastFlag === \\\"--first\\\" || lastFlag === \\\"--skip\\\")\\n        return factions.map(f => f.replaceAll(' ', '_')).sort();\\n    return [];\\n}\\n\\n// Bit of an ugly afterthought, but this is all over the place to break out of whatever we're doing and return to the main loop.\\nconst breakToMainLoop = () => Date.now() > mainLoopStart + checkForNewPrioritiesInterval;\\n\\nlet options;\\nconst argsSchema = [\\n    ['first', []], // Grind rep with these factions first. Also forces a join of this faction if we normally wouldn't (e.g. no desired augs or all augs owned)\\n    ['skip', []], // Don't work for these factions\\n    ['o', false], // Immediately grind company factions for rep after getting their invite, rather than first getting all company invites we can\\n    ['desired-stats', []], // Factions will be removed from our 'early-faction-order' once all augs with these stats have been bought out\\n    ['no-focus', false], // Disable doing work that requires focusing (crime), and forces study/faction/company work to be non-focused (even if it means incurring a penalty)\\n    ['no-studying', false], // Disable studying.\\n    ['pay-for-studies-threshold', 200000], // Only be willing to pay for our studies if we have this much money\\n    ['training-stat-per-multi-threshold', 100], // Heuristic: Estimate that we can train this many levels for every mult / exp_mult we have in a reasonable amount of time.\\n    ['no-coding-contracts', false], // Disable purchasing coding contracts for reputation\\n    ['no-crime', false], // Disable doing crimes at all. (Also disabled with --no-focus)\\n    ['crime-focus', false], // Useful in crime-focused BNs when you want to focus on crime related factions\\n    ['fast-crimes-only', false], // Assasination and Heist are so slow, I can see people wanting to disable them just so they can interrupt at will.\\n    ['invites-only', false], // Just work to get invites, don't work for augmentations / faction rep\\n    ['prioritize-invites', false], // Prioritize working for as many invites as is practical before starting to grind for faction reputation\\n    ['get-invited-to-every-faction', false], // You want to be in every faction? You got it!\\n    ['karma-threshold-for-gang-invites', -54000], // Prioritize working for gang invites once we have this much negative Karma\\n    ['no-bladeburner-check', false], // By default, will avoid working if bladeburner is active and \\\"The Blade's Simulacrum\\\" isn't installed\\n];\\n\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getServerRequiredHackingLevel');\\n    ns.disableLog('workForFaction');\\n    ns.disableLog('workForCompany');\\n    ns.disableLog('stopAction');\\n    ns.disableLog('applyToCompany');\\n    ns.disableLog('commitCrime');\\n    boxTailSingleton(ns, 'FactionWork', '♥', '300px');\\n    ns.clearLog();\\n    // Reset globals whose value can persist between script restarts in weird situations\\n    lastTravel = lastActionRestart = crimeCount = 0;\\n    notifiedAboutDaedalus = false;\\n    options = ns.flags(argsSchema);\\n    // Process configuration options\\n    firstFactions = (options['first'] || []).map(f => f.replaceAll('_', ' ')); // Factions that end up in this list will be prioritized and joined regardless of their augmentations available.\\n    options.skip = (options.skip || []).map(f => f.replaceAll('_', ' '));\\n    options['no-crime'] = options['no-crime'] || options['no-focus']; // Can't crime if we aren't allowed to steal focus\\n    if (options['crime-focus'] && options['no-focus'])\\n        return ns.print(\\\"ERROR: Cannot use --no-focus and --crime-focus at the same time. You need to focus to do crime!\\\");\\n    // Default desired-stats if none were specified\\n    if (options['desired-stats'].length === 0)\\n        options['desired-stats'] = options['crime-focus'] ? ['dex', 'agi', 'str', 'def', 'faction_rep', 'hacknet', 'crime'] :\\n            ['hacking', 'faction_rep', 'company_rep', 'charisma', 'hacknet', 'crime_money']\\n\\n    // Log some of the options in effect\\n    ns.print(`--desired-stats matching: ${options['desired-stats'].join(\\\", \\\")}`);\\n    if (firstFactions.length > 0) ns.print(`--first factions: ${firstFactions.join(\\\", \\\")}`);\\n    if (options.skip.length > 0) ns.print(`--skip factions: ${options.skip.join(\\\", \\\")}`);\\n    if (options['fast-crimes-only']) ns.print(`--fast-crimes-only`);\\n\\n    await loadStartupData(ns);\\n\\n    mainLoopStart = Date.now();\\n    scope = 0;\\n    while (true) { // After each loop, we will repeat all previous work \\\"strategies\\\" to see if anything new has been unlocked, and add one more \\\"strategy\\\" to the queue\\n        try {\\n            await mainLoop(ns);\\n        } catch (err) {\\n            ns.print('WARNING: work-for-factions.js caught an unhandled error in its main loop. Trying again in 5 seconds...\\\\n' +\\n                (typeof err === 'string' ? err : err.message || JSON.stringify(err)));\\n            await ns.sleep(5000);\\n            scope--; // Cancel out work scope increasing on the next iteration.\\n        }\\n        await ns.sleep(1); // Infinite loop protection in case somehow we loop without doing any meaningful work\\n    }\\n}\\nfunction getGangInfo(ns) {\\n    if (ns.fileExists('/tmp/ingang.txt')) {\\n        return {\\n            faction: 'Slum Snakes'\\n        }\\n    }\\n}\\n\\n/*\\nexport async function main_old(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('asleep');\\n    ns.disableLog('getServerRequiredHackingLevel');\\n    ns.disableLog('workForFaction');\\n    ns.disableLog('workForCompany');\\n    ns.disableLog('stopAction');\\n    ns.disableLog('applyToCompany');\\n    ns.disableLog('commitCrime');\\n    boxTailSingleton(ns, 'FactionWork', '♥', '200px');\\n    ns.clearLog();\\n    options = ns.flags(argsSchema);\\n    const desiredAugStats = (options['desired-stats'] || []);\\n    const firstFactions = options.first = (options.first || []).map(f => f.replaceAll('_', ' '));\\n    let skipFactionsConfig = options.skip = (options.skip || []).map(f => f.replaceAll('_', ' '));\\n    gangFocus = options['gang-focus'];\\n    noFocus = options['no-focus'];\\n    noStudying = options['no-studying'] || noFocus; // Can't study if we aren't allowed to steal focus\\n    noCrime = options['no-crime'] || noFocus; // Can't crime if we aren't allowed to steal focus\\n    crimeFocus = options['crime-focus'];\\n    if (crimeFocus && noFocus)\\n        return ns.tprint(\\\"ERROR: Cannot use --no-focus and --crime-focus at the same time. You need to focus to do crime!\\\");\\n    // AGI increases stamina, more stamina faster stam recovery\\n    // DEX decreases op time more dex faster ops, faster rank gain, require more stamina therefore need AGI first\\n    // STR and DEF just increase chances afaik not important the multipliers are huge for these stats anyways\\n    const bladeburnerDesiredStats = ['agi', 'dex', 'str', 'def', 'faction_rep', 'company_rep', 'hacknet'];\\n    const oldCombatDesiredStats = ['str', 'def', 'dex', 'agi', 'faction_rep', 'hacking', 'hacknet'];\\n    const hackingStats = ['hacking', 'faction_rep', 'company_rep', 'charisma', 'hacknet'];\\n    if (desiredAugStats.length === 0)\\n        desiredAugStats.push(...(crimeFocus || gangFocus ? bladeburnerDesiredStats : hackingStats))\\n    // Log command line args used\\n    if (firstFactions.length > 0) ns.print(`--first factions: ${firstFactions.join(\\\", \\\")}`);\\n    if (skipFactionsConfig.length > 0) ns.print(`--skip factions: ${skipFactionsConfig.join(\\\", \\\")}`);\\n    if (desiredAugStats.length > 0) ns.print(`--desired-stats matching: ${desiredAugStats.join(\\\", \\\")}`);\\n    let bitnodeMults = tryGetBitNodeMultipliers(ns);\\n    repToDonate = 150 * (bitnodeMults.RepToDonateToFaction || 1);\\n    // Get some factions augmentations to decide what remains to be purchased\\n    const dictFactionAugs = getAugmentsPerFaction(ns);\\n    const dictAugRepReqs = getAllAugmentRepReq(ns);\\n    const dictAugStats = getAllAugmentStats(ns);\\n    ownedAugmentations = getOwnedAugmentationsStatic(ns);\\n    shouldFocusAtWork = !noFocus; // Focus at work for the best rate of rep gain, unless focus activities are disabled via command line\\n    if (shouldFocusAtWork) { // Check if we have an augmentation that lets us not have to focus at work (always nicer if we can background it)\\n        let activeAugmentations = getOwnedAugmentationsStatic(ns);\\n        shouldFocusAtWork = !activeAugmentations.includes(\\\"Neuroreceptor Management Implant\\\");\\n    }\\n    const playerInfo = await ns.getPlayer();\\n    const allKnownFactions = factions.concat(playerInfo.factions.filter(f => !factions.includes(f)));\\n\\n    if (ns.fileExists('/tmp/ingang.txt')) {\\n        let configGangIndex = preferredEarlyFactionOrder.findIndex(f => f === \\\"Slum Snakes\\\");\\n        if (configGangIndex !== -1) // If we're in a gang, don't need to earn an invite to slum snakes anymore\\n            preferredEarlyFactionOrder.splice(configGangIndex, 1);\\n        const gangAugs = dictFactionAugs[playerGang];\\n        ns.print(`Your gang ${playerGang} provides easy access to ${gangAugs.length} augs. Ignoring these augs from the original factions that provide them.`);\\n        for (const faction of allKnownFactions.filter(f => f !== \\\"Slum Snakes\\\"))\\n            dictFactionAugs[faction] = dictFactionAugs[faction].filter(a => !gangAugs.includes(a));\\n    }\\n    mostExpensiveAugByFaction = Object.fromEntries(factionList.map(f => [f, dictFactionAugs[f]\\n        .filter(aug => !ownedAugmentations.includes(aug))\\n        .reduce((max, aug) => Math.max(max, dictAugRepReqs[aug]), -1)]));\\n    ns.print(\\\"Most expensive unowned aug by faction: \\\" + JSON.stringify(mostExpensiveAugByFaction, null, 2));\\n    // TODO: Detect when the most expensive aug from two factions is the same - only need it from the first one. (Update lists and remove 'afforded' augs?)\\n    // TODO this filter might not be working as intended\\n    mostExpensiveDesiredAugByFaction = Object.fromEntries(\\n        factionList.map(f => [f, dictFactionAugs[f].filter(aug => !ownedAugmentations.includes(aug) && (Object.keys(dictAugStats[aug]).length === 0 || !desiredAugStats ||\\n            Object.keys(dictAugStats[aug]).some(key => desiredAugStats.some(stat => key.includes(stat)))))\\n            .reduce((max, aug) => Math.max(max, dictAugRepReqs[aug]), -1)])\\n    );\\n    ns.print(\\\"Most expensive desired aug by faction: \\\" + JSON.stringify(mostExpensiveDesiredAugByFaction, null, 2));\\n    let completedFactions = Object.keys(mostExpensiveAugByFaction).filter(fac => mostExpensiveAugByFaction[fac] === -1 && !factionSpecificConfigs.find(c => c.name === fac)?.forceUnlock);\\n    let skipFactions = skipFactionsConfig.concat(completedFactions);\\n    let softCompletedFactions = Object.keys(mostExpensiveDesiredAugByFaction).filter(fac => mostExpensiveDesiredAugByFaction[fac] === -1 &&\\n        !completedFactions.includes(fac) && !factionSpecificConfigs.find(c => c.name === fac)?.forceUnlock);\\n    ns.print(`${completedFactions.length} factions are completed (all augs purchased): ${completedFactions.join(\\\", \\\")}`);\\n    ns.print(`${softCompletedFactions.length} factions will initially be skipped (all desired augs purchased): ${softCompletedFactions.join(\\\", \\\")}`);\\n\\n    let scope = -1; // Scope increases each time we complete a type of work and haven't progressed enough to unlock more factions\\n    let numJoinedFactions = ns.getPlayer().factions.length;\\n    while (true) { // After each loop, we will repeat all previous work \\\"strategies\\\" to see if anything new has been unlocked, and add one more \\\"strategy\\\" to the queue\\n        joinOpenInvitation(ns);\\n        scope++;\\n        ns.print(`Starting main work loop with scope: ${scope}...`);\\n\\n        const player = ns.getPlayer();\\n        if (player.factions.length > numJoinedFactions) { // If we've recently joined a new faction, reset our work scope\\n            scope = 0; // Back to basics until we've satisfied all highest-priority work\\n            numJoinedFactions = player.factions.length;\\n        }\\n\\n        if (gangFocus) {\\n            while (getKarma(ns)) {\\n                joinOpenInvitation(ns);\\n                if (player.isWorking && player.workType === 'Committing a crime') {\\n                    await ns.asleep(20);\\n                    continue;\\n                }\\n                let crimeStats = getBestCrime(ns, true);\\n                ns.commitCrime(crimeStats.name);\\n                ns.print(`Attempting to commit ${crimeStats.name}... @ ${crimeStats.rate.toPrecision(2)}karma/s`);\\n                await ns.sleep(crimeStats.time + 100);\\n            }\\n        }\\n        if (!hasBladesSimulacrum(ns) && ns.bladeburner.getCurrentAction().type !== 'idle') {\\n            ns.print(`Waiting on bladeburner ${ns.bladeburner.getCurrentAction().type} `);\\n            scope--;\\n            // Join some faction that are achieved passively\\n            let deficientStats = [{ name: \\\"str\\\", value: player.strength }, { name: \\\"str\\\", value: player.defense }, { name: \\\"str\\\", value: player.dexterity }, { name: \\\"str\\\", value: player.agility }];\\n            await earnFactionInvite(ns, \\\"Aevum\\\");\\n            await earnFactionInvite(ns, \\\"Sector-12\\\");\\n            if (player.hacking > requiredHackByFaction[\\\"Tian Di Hui\\\"]) await earnFactionInvite(ns, \\\"Tian Di Hui\\\");\\n            if (deficientStats.filter(stat => stat.value < requiredCombatByFaction[\\\"Tetrads\\\"]).length === 0) {\\n                await earnFactionInvite(ns, \\\"Tetrads\\\");\\n            }\\n            await ns.sleep(30000);\\n            continue;\\n        }\\n\\n        // Remove Fulcrum from our \\\"EarlyFactionOrder\\\" if hack level is insufficient to backdoor their server\\n        let priorityFactions = crimeFocus ? preferredCrimeFactionOrder.slice() : preferredEarlyFactionOrder.slice();\\n        let fulcrummHackReq = ns.getServerRequiredHackingLevel(\\\"fulcrumassets\\\");\\n        if (player.hacking < fulcrummHackReq - 10) { // Assume that if we're within 10, we'll get there by the time we've earned the invite\\n            priorityFactions.splice(priorityFactions.findIndex(c => c === \\\"Fulcrum Secret Technologies\\\"), 1);\\n            ns.print(`Fulcrum faction server requires ${fulcrummHackReq} hack, so removing from our initial priority list for now.`);\\n        } // TODO: Otherwise, if we get Fulcrum, we have no need for a couple other company factions\\n        // Strategy 1: Tackle a consolidated list of desired faction order, interleaving simple factions and megacorporations\\n        const factionWorkOrder = firstFactions.concat(priorityFactions.filter(f => !firstFactions.includes(f) && !skipFactions.includes(f)))\\n            .filter(f => !softCompletedFactions.includes(f)); // Remove factions from our initial \\\"work order\\\" if we've bought all desired augmentations.\\n        for (const faction of factionWorkOrder) {\\n            let earnedNewFactionInvite = false;\\n            if (preferredCompanyFactionOrder.includes(faction)) // If this is a company faction, we need to work for the company first\\n                earnedNewFactionInvite = await workForMegacorpFactionInvite(ns, faction, true);\\n            // If new work was done for a company or their faction, restart the main work loop to see if we've since unlocked a higher-priority faction in the list\\n            if (earnedNewFactionInvite || await workForSingleFaction(ns, faction)) {\\n                scope--; // De-increment scope so that effective scope doesn't increase on the next loop (i.e. it will be incremented back to what it is now)\\n                break;\\n            }\\n        }\\n        if (scope < 1) continue;\\n\\n        // Strategy 2: Grind XP with all priority factions that are joined or can be joined, until every single one has desired REP\\n        for (const faction of factionWorkOrder)\\n            await workForSingleFaction(ns, faction);\\n        if (scope < 2) continue;\\n\\n        // Strategy 3: Work for any megacorporations not yet completed to earn their faction invites. Once joined, we don't lose these factions on reset.\\n        let megacorpFactions = preferredCompanyFactionOrder.filter(f => !skipFactions.includes(f));\\n        await workForAllMegacorps(ns, megacorpFactions, false);\\n        if (scope < 3) continue;\\n\\n        // Strategy 4: Work for megacorps again, but this time also work for the company factions once the invite is earned\\n        await workForAllMegacorps(ns, megacorpFactions, true);\\n        if (scope < 4) continue;\\n\\n        // Strategies 5+ now work towards getting an invite to *all factions in the game* (sorted by least-expensive final aug (correlated to easiest faction-invite requirement))\\n        let joinedFactions = player.factions; // In case our hard-coded list of factions is missing anything, merge it with the list of all factions\\n        let allIncompleteFactions = factionList.concat(joinedFactions.filter(f => !factionList.includes(f))).filter(f => !skipFactions.includes(f) && !completedFactions.includes(f))\\n            .sort((a, b) => mostExpensiveAugByFaction[a] - mostExpensiveAugByFaction[b]);\\n        // Strategy 5: For *all factions in the game*, try to earn an invite and work for rep until we can afford the most-expensive *desired* aug (or unlock donations, whichever comes first)\\n        for (const faction of allIncompleteFactions.filter(f => !softCompletedFactions.includes(f)))\\n            await workForSingleFaction(ns, faction);\\n        if (scope < 5) continue;\\n\\n        // Strategy 6: Revisit all factions until each has enough rep to unlock donations - so if we can't afford all augs this reset, at least we don't need to grind for rep on the next reset\\n        // For this, we reverse the order (ones with augs costing the most-rep to least) since these will take the most time to re-grind rep for if we can't buy them this reset.\\n        for (const faction of allIncompleteFactions.reverse())\\n            await workForSingleFaction(ns, faction, true);\\n        if (scope < 6) continue;\\n\\n        // Strategy 7:  Next, revisit all factions and grind XP until we can afford the most expensive aug, even if we could just buy the required rep next reset\\n        for (const faction of allIncompleteFactions.reverse()) // Re-reverse the sort order so we start with the easiest (cheapest) faction augs to complete\\n            await workForSingleFaction(ns, faction, true, true);\\n        if (scope < 7) continue;\\n\\n        // Strategy 8: Commit crimes for a while longer, then loop to see if there anything more we can do for the above factions\\n        if (noCrime) {\\n            ns.print(`--no-crime (or --no-focus): Crimes are disabled, so sleeping for a while (30s) then checking back on whether there's any work to be done...`);\\n            await ns.sleep(30000);\\n        } else await crimeForKillsKarmaStats(ns, 0, -ns.heart.break() + 100, 0);\\n    }\\n}\\n*/\\n/** @param {NS} ns */\\nasync function loadStartupData(ns) {\\n    repToDonate = 150 * ((await tryGetBitNodeMultipliers(ns))?.RepToDonateToFaction || 1);\\n    const playerInfo = await ns.getPlayer();\\n    const allKnownFactions = factions.concat(playerInfo.factions.filter(f => !factions.includes(f)));\\n\\n    // Get some faction and augmentation information to decide what remains to be purchased\\n    // dictFactionFavors = await getNsDataThroughFile(ns, dictCommand('ns.getFactionFavor(o)'), '/Temp/getFactionFavors.txt', allKnownFactions);\\n    let dictFactionFavors = {};\\n    for (const favor of allKnownFactions)  {\\n        dictFactionFavors[favor] = ns.getFactionFavor(favor);\\n    }\\n    // const dictFactionAugs = await getNsDataThroughFile(ns, dictCommand('ns.getAugmentationsFromFaction(o)'), '/Temp/getAugmentationsFromFactions.txt', allKnownFactions);\\n    const dictFactionAugs = getAugmentsPerFaction(ns);\\n    // const augmentationNames = [...new Set(Object.values(dictFactionAugs).flat())];\\n    // const dictAugRepReqs = await getNsDataThroughFile(ns, dictCommand('ns.getAugmentationRepReq(o)'), '/Temp/getAugmentationRepReqs.txt', augmentationNames);\\n    // const dictAugStats = await getNsDataThroughFile(ns, dictCommand('ns.getAugmentationStats(o)'), '/Temp/getAugmentationStats.txt', augmentationNames);\\n    // const ownedAugmentations = await getNsDataThroughFile(ns, `ns.getOwnedAugmentations(true)`, '/Temp/player-augs-purchased.txt');\\n    const dictAugRepReqs = getAllAugmentRepReq(ns);\\n    const dictAugStats = getAllAugmentStats(ns);\\n    const ownedAugmentations = ns.getOwnedAugmentations(false);\\n    const installedAugmentations = ns.getOwnedAugmentations();\\n    // const installedAugmentations = await getNsDataThroughFile(ns, `ns.getOwnedAugmentations()`, '/Temp/player-augs-installed.txt');\\n    // Based on what augmentations we own, we can change our own behaviour (e.g. whether to allow work to steal focus)\\n    hasFocusPenalty = !installedAugmentations.includes(\\\"Neuroreceptor Management Implant\\\"); // Check if we have an augmentation that lets us not have to focus at work (always nicer if we can background it)\\n    shouldFocusAtWork = !options['no-focus'] && hasFocusPenalty; // Focus at work for the best rate of rep gain, unless focus activities are disabled via command line\\n    hasSimulacrum = installedAugmentations.includes(\\\"The Blade's Simulacrum\\\");\\n\\n    // Find out if we're in a gang\\n    const gangInfo = getGangInfo(ns);\\n    playerGang = gangInfo ? gangInfo.faction : null;\\n    if (playerGang) { // Whatever augmentations the gang provides are so easy to get form them, might as well ignore any other factions that have them.\\n        const gangAugs = dictFactionAugs[playerGang];\\n        ns.print(`Your gang ${playerGang} provides easy access to ${gangAugs.length} augs. Ignoring these augs from the original factions that provide them.`);\\n        for (const faction of allKnownFactions.filter(f => f !== playerGang))\\n            dictFactionAugs[faction] = dictFactionAugs[faction].filter(a => !gangAugs.includes(a));\\n    }\\n\\n    mostExpensiveAugByFaction = Object.fromEntries(allKnownFactions.map(f => [f,\\n        dictFactionAugs[f].filter(aug => !ownedAugmentations.includes(aug))\\n            .reduce((max, aug) => Math.max(max, dictAugRepReqs[aug]), -1)]));\\n    //ns.print(\\\"Most expensive unowned aug by faction: \\\" + JSON.stringify(mostExpensiveAugByFaction));\\n    // TODO: Detect when the most expensive aug from two factions is the same - only need it from the first one. (Update lists and remove 'afforded' augs?)\\n    mostExpensiveDesiredAugByFaction = Object.fromEntries(allKnownFactions.map(f => [f,\\n        dictFactionAugs[f].filter(aug => !ownedAugmentations.includes(aug) && (\\n            Object.keys(dictAugStats[aug]).length === 0 || options['desired-stats'].length === 0 ||\\n            Object.keys(dictAugStats[aug]).some(key => options['desired-stats'].some(stat => key.includes(stat)))\\n        )).reduce((max, aug) => Math.max(max, dictAugRepReqs[aug]), -1)]));\\n    //ns.print(\\\"Most expensive desired aug by faction: \\\" + JSON.stringify(mostExpensiveDesiredAugByFaction));\\n\\n    // Filter out factions who have no augs (or tentatively filter those with no desirable augs) unless otherwise configured. The exception is\\n    // we will always filter the most-precluding city factions, (but not [\\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\"], which can all be joined simultaneously)\\n    // TODO: Think this over more. need to filter e.g. chonquing if volhaven is incomplete...\\n    const filterableFactions = (options['get-invited-to-every-faction'] ? [\\\"Aevum\\\", \\\"Sector-12\\\", \\\"Volhaven\\\"] : allKnownFactions);\\n    // Unless otherwise configured, we will skip factions with no remaining augmentations\\n    completedFactions = filterableFactions.filter(fac => mostExpensiveAugByFaction[fac] === -1);\\n    softCompletedFactions = filterableFactions.filter(fac => mostExpensiveDesiredAugByFaction[fac] === -1 && !completedFactions.includes(fac));\\n    skipFactions = options.skip.concat(cannotWorkForFactions).concat(completedFactions).filter(fac => !firstFactions.includes(fac));\\n    if (completedFactions.length > 0)\\n        ns.print(`${completedFactions.length} factions will be skipped (for having all augs purchased): ${completedFactions.join(\\\", \\\")}`);\\n    if (softCompletedFactions.length > 0)\\n        ns.print(`${softCompletedFactions.length} factions will initially be skipped (all desired augs purchased): ${softCompletedFactions.join(\\\", \\\")}`);\\n\\n    // TODO: If --prioritize-invites is set, we should have a preferred faction order that puts easiest-invites-to-earn at the front (e.g. all city factions)\\n    numJoinedFactions = playerInfo.factions.length;\\n    fulcrummHackReq = ns.getServerRequiredHackingLevel(\\\"fulcrumassets\\\");\\n}\\n\\n/** @param {NS} ns */\\nasync function mainLoop(ns) {\\n    if (!breakToMainLoop()) scope++; // Increase the scope of work if the last iteration completed early (i.e. due to all work within that scope being complete)\\n    mainLoopStart = Date.now();\\n    ns.print(`INFO: Starting main work loop with scope: ${scope}...`);\\n\\n    // Update information that may have changed since our last loop\\n    const player = ns.getPlayer();\\n    if (player.factions.length > numJoinedFactions) { // If we've recently joined a new faction, reset our work scope\\n        scope = 1; // Back to basics until we've satisfied all highest-priority work\\n        numJoinedFactions = player.factions.length;\\n    }\\n    // Immediately accept any outstanding faction invitations for factions we want to earn rep with soon\\n    // TODO: If check if we would qualify for an invite to any factions just by travelling, and do so to start earning passive rep\\n    const invites = ns.checkFactionInvitations();\\n    const invitesToAccept = options['get-invited-to-every-faction'] || options['prioritize-invites'] ?\\n        invites.filter(f => !skipFactions.includes(f)) :\\n        invites.filter(f => !skipFactions.includes(f) && !softCompletedFactions.includes(f));\\n    for (const invite of invitesToAccept)\\n        await tryJoinFaction(ns, invite);\\n    // Get some information about gangs (if unlocked)\\n    if (!playerGang) { // Check if we've joined a gang since our last iteration\\n        const gangInfo = getGangInfo(ns);\\n        playerGang = gangInfo ? gangInfo.faction : null;\\n        // If we've only just now joined a gang, we have to reload startup data, because the augs offered by our gang faction has now changed.\\n        if (playerGang) await loadStartupData(ns);\\n    }\\n    if (ns.heart.break() <= options['karma-threshold-for-gang-invites']) { // Start trying to earn gang faction invites if we're close to unlocking gangs\\n        if (!playerGang) {\\n            ns.print(`INFO: We are nearing the Karma required to unlock gangs (${ns.heart.break()} / -54K). Prioritize earning gang faction invites.`);\\n            for (const factionName of desiredGangFactions)\\n                await earnFactionInvite(ns, factionName);\\n        }\\n    }\\n    // If bladeburner is currently active, but we do not yet have The Blade's Simulacrum decide, whether we pause working.\\n    if (!hasSimulacrum && !options['no-bladeburner-check'] && player.inBladeburner) {\\n        if (playerGang) { // Heuristic: If we're in a gang, its rep will give us access to most augs, we can take a break from working\\n            ns.print(`INFO: Gang will give us most augs, so pausing work to allow Bladeburner to operate.`);\\n            ns.stopAction(); // stop working so bladeburner can run\\n            await ns.sleep(checkForNewPrioritiesInterval);\\n            return;\\n        }\\n    }\\n\\n    // Remove Fulcrum from our \\\"EarlyFactionOrder\\\" if hack level is insufficient to backdoor their server\\n    let priorityFactions = options['crime-focus'] ? preferredCrimeFactionOrder.slice() : preferredEarlyFactionOrder.slice();\\n    if (player.hacking < fulcrummHackReq - 10) { // Assume that if we're within 10, we'll get there by the time we've earned the invite\\n        priorityFactions.splice(priorityFactions.findIndex(c => c === \\\"Fulcrum Secret Technologies\\\"), 1);\\n        ns.print(`Fulcrum faction server requires ${fulcrummHackReq} hack, so removing from our initial priority list for now.`);\\n    } // TODO: Otherwise, if we get Fulcrum, we have no need for a couple other company factions\\n\\n    // Strategy 1: Tackle a consolidated list of desired faction order, interleaving simple factions and megacorporations\\n    const factionWorkOrder = firstFactions.concat(priorityFactions.filter(f => // Remove factions from our initial \\\"work order\\\" if we've bought all desired augmentations.\\n        !firstFactions.includes(f) && !skipFactions.includes(f) && !softCompletedFactions.includes(f)));\\n    for (const faction of factionWorkOrder) {\\n        if (breakToMainLoop()) break; // Only continue on to the next faction if it isn't time for a high-level update.\\n        let earnedNewFactionInvite = false;\\n        if (preferredCompanyFactionOrder.includes(faction)) // If this is a company faction, we need to work for the company first\\n            earnedNewFactionInvite = await workForMegacorpFactionInvite(ns, faction, true);\\n        // If new work was done for a company or their faction, restart the main work loop to see if we've since unlocked a higher-priority faction in the list\\n        if (earnedNewFactionInvite || await workForSingleFaction(ns, faction)) {\\n            scope--; // De-increment scope so that effective scope doesn't increase on the next loop (i.e. it will be incremented back to what it is now)\\n            break;\\n        }\\n    }\\n    if (scope <= 1 || breakToMainLoop()) return;\\n\\n    // Strategy 2: Grind XP with all priority factions that are joined or can be joined, until every single one has desired REP\\n    for (const faction of factionWorkOrder)\\n        if (!breakToMainLoop()) await workForSingleFaction(ns, faction);\\n    if (scope <= 2 || breakToMainLoop()) return;\\n\\n    // Strategy 3: Work for any megacorporations not yet completed to earn their faction invites. Once joined, we don't lose these factions on reset.\\n    let megacorpFactions = preferredCompanyFactionOrder.filter(f => !skipFactions.includes(f));\\n    await workForAllMegacorps(ns, megacorpFactions, false);\\n    if (scope <= 3 || breakToMainLoop()) return;\\n\\n    // Strategy 4: Work for megacorps again, but this time also work for the company factions once the invite is earned\\n    await workForAllMegacorps(ns, megacorpFactions, true);\\n    if (scope <= 4 || breakToMainLoop()) return;\\n\\n    // Strategies 5+ now work towards getting an invite to *all factions in the game* (sorted by least-expensive final aug (correlated to easiest faction-invite requirement))\\n    let joinedFactions = player.factions; // In case our hard-coded list of factions is missing anything, merge it with the list of all factions\\n    let knownFactions = factions.concat(joinedFactions.filter(f => !factions.includes(f)));\\n    let allIncompleteFactions = knownFactions.filter(f => !skipFactions.includes(f) && !completedFactions.includes(f)).sort((a, b) => mostExpensiveAugByFaction[a] - mostExpensiveAugByFaction[b]);\\n    // Strategy 5: For *all factions in the game*, try to earn an invite and work for rep until we can afford the most-expensive *desired* aug (or unlock donations, whichever comes first)\\n    for (const faction of allIncompleteFactions.filter(f => !softCompletedFactions.includes(f)))\\n        if (!breakToMainLoop()) await workForSingleFaction(ns, faction);\\n    if (scope <= 5 || breakToMainLoop()) return;\\n\\n    // Strategy 6: Revisit all factions until each has enough rep to unlock donations - so if we can't afford all augs this reset, at least we don't need to grind for rep on the next reset\\n    // For this, we reverse the order (ones with augs costing the most-rep to least) since these will take the most time to re-grind rep for if we can't buy them this reset.\\n    for (const faction of allIncompleteFactions.reverse())\\n        if (breakToMainLoop()) // Only continue on to the next faction if it isn't time for a high-level update.\\n            await workForSingleFaction(ns, faction, true);\\n    if (scope <= 6 || breakToMainLoop()) return;\\n\\n    // Strategy 7:  Next, revisit all factions and grind XP until we can afford the most expensive aug, even if we could just buy the required rep next reset\\n    for (const faction of allIncompleteFactions.reverse()) // Re-reverse the sort order so we start with the easiest (cheapest) faction augs to complete\\n        if (breakToMainLoop()) // Only continue on to the next faction if it isn't time for a high-level update.\\n            await workForSingleFaction(ns, faction, true, true);\\n    if (scope <= 7 || breakToMainLoop()) return;\\n\\n    // Strategy 8: Busy ourselves for a while longer, then loop to see if there anything more we can do for the above factions\\n    let factionsWeCanWorkFor = joinedFactions.filter(f => !options.skip.includes(f) && !cannotWorkForFactions.includes(f) && f !== playerGang);\\n    let foundWork = false;\\n    if (factionsWeCanWorkFor.length > 0 && !options['crime-focus']) {\\n        // Do a little work for whatever faction has the most favor (e.g. to earn EXP and enable additional neuroflux purchases)\\n        let mostFavorFaction = factionsWeCanWorkFor.sort((a, b) => dictFactionFavors[b] - dictFactionFavors[a])[0];\\n        let targetRep = 1000 + (ns.getFactionRep(mostFavorFaction)) * 1.05; // Hack: Grow rep by ~5%, plus 1000 in case it's currently 0\\n        ns.print(`INFO: All useful work complete. Grinding an additional 5% rep (to ${targetRep}) with highest-favor faction: ${mostFavorFaction} (${dictFactionFavors[mostFavorFaction]?.toFixed(2)} favor)`);\\n        foundWork = await workForSingleFaction(ns, mostFavorFaction, false, false, targetRep);\\n    }\\n    if (!foundWork && !options['no-crime']) { // Otherwise, kill some time by doing crimes for a little while\\n        ns.print(`INFO: Nothing to do. Doing a little crime...`);\\n        await crimeForKillsKarmaStats(ns, 0, -ns.heart.break() + 1000 /* Hack: Decrease Karma by 1000 */, 0);\\n    } else if (!foundWork) { // If our hands our tied, twiddle our thumbs a bit\\n        ns.print(`INFO: Nothing to do. Sleeping for 30 seconds to see if magically we join a faction`);\\n        await ns.sleep(30000);\\n    }\\n    if (scope <= 8) scope--; // Cap the 'scope' value from increasing perpetually when we're on our last strategy\\n}\\n\\n/** @param {NS} ns */\\nfunction joinOpenInvitation(ns) {\\n    let invitations = ns.checkFactionInvitations();\\n    for (let factionName of invitations) {\\n        // if (!skipFactions.includes(factionName))\\n        ns.joinFaction(factionName);\\n    }\\n}\\n\\n\\n/** @param {NS} ns\\n * @param {string} log\\n * @param {string} toastVariant\\n * Prints a message, and also toasts it! */\\nfunction announce(ns, log, toastVariant = 'info') {\\n    if (!ns.print || !ns.toast) return; // If an error is caught/logged because the script is being killed, ns becomes undefined\\n    ns.print(`${toastVariant}: ${log}`);\\n    ns.toast(log, toastVariant);\\n}\\n\\nconst requiredMoneyByFaction = {\\n    \\\"Tian Di Hui\\\": 1E6, \\\"Sector-12\\\": 15E6, \\\"Chongqing\\\": 20E6, \\\"New Tokyo\\\": 20E6, \\\"Ishima\\\": 30E6, \\\"Aevum\\\": 40E6, \\\"Volhaven\\\": 50E6,\\n    \\\"Slum Snakes\\\": 1E6, \\\"Silhouette\\\": 15E6, \\\"The Syndicate\\\": 10E6, \\\"The Covenant\\\": 75E9, \\\"Daedalus\\\": 100E9, \\\"Illuminati\\\": 150E9\\n};\\nconst requiredBackdoorByFaction = { \\\"CyberSec\\\": \\\"CSEC\\\", \\\"NiteSec\\\": \\\"avmnite-02h\\\", \\\"The Black Hand\\\": \\\"I.I.I.I\\\", \\\"BitRunners\\\": \\\"run4theh111z\\\", \\\"Fulcrum Secret Technologies\\\": \\\"fulcrumassets\\\" };\\nconst requiredHackByFaction = { \\\"Tian Di Hui\\\": 50, \\\"Netburners\\\": 80, \\\"Speakers for the Dead\\\": 100, \\\"The Dark Army\\\": 300, \\\"The Syndicate\\\": 200, \\\"The Covenant\\\": 850, \\\"Daedalus\\\": 2500, \\\"Illuminati\\\": 1500 };\\nconst requiredCombatByFaction = { \\\"Slum Snakes\\\": 30, \\\"Tetrads\\\": 75, \\\"Speakers for the Dead\\\": 300, \\\"The Dark Army\\\": 300, \\\"The Syndicate\\\": 200, \\\"The Covenant\\\": 850, \\\"Daedalus\\\": 1500, \\\"Illuminati\\\": 1200 };\\nconst requiredKarmaByFaction = { \\\"Slum Snakes\\\": 9, \\\"Tetrads\\\": 18, \\\"Silhouette\\\": 22, \\\"Speakers for the Dead\\\": 45, \\\"The Dark Army\\\": 45, \\\"The Syndicate\\\": 90 };\\nconst requiredKillsByFaction = { \\\"Speakers for the Dead\\\": 30, \\\"The Dark Army\\\": 5 };\\nconst reqHackingOrCombat = [\\\"Daedalus\\\"]; // Special case factions that require only hacking or combat stats, not both\\n\\n/** @param {NS} ns\\n * @param focus\\n */\\nasync function studyForCharisma(ns, focus) {\\n    await goToCity(ns, 'Volhaven');\\n    return await study(ns, focus, 'Leadership', 'ZB Institute Of Technology');\\n}\\n\\nconst uniByCity = Object.fromEntries([[\\\"Aevum\\\", \\\"Summit University\\\"], [\\\"Sector-12\\\", \\\"Rothman University\\\"], [\\\"Volhaven\\\", \\\"ZB Institute of Technology\\\"]]);\\n\\n/** @param {NS} ns\\n * @param focus\\n * @param course\\n * @param university\\n */\\nasync function study(ns, focus, course, university = null) {\\n    if (options['no-studying'])\\n        return announce(ns, `WARNING: Could not study '${course}' because --no-studying is set.`, 'warning');\\n    const playerCity = (ns.getPlayer()).city;\\n    if (!university) { // Auto-detect the university in our city\\n        university = uniByCity[playerCity];\\n        if (!university)\\n            return announce(ns, `WARNING: Could not study '${course}' because we are in city '${playerCity}' without a university.`, 'warning');\\n    }\\n    if (ns.universityCourse(university, course, focus)) {\\n    // if (await getNsDataThroughFile(ns, `ns.universityCourse(ns.args[0], ns.args[1], ns.args[2])`, '/Temp/study.txt', [university, course, focus])) {\\n        lastActionRestart = Date.now();\\n        announce(ns, `Started studying '${course}' at '${university}`, 'success');\\n        return true;\\n    }\\n    announce(ns, `ERROR: For some reason, failed to study '${course}' at university '${university}' (Not in correct city? Player is in '${playerCity}')`, 'error');\\n    return false;\\n}\\n/** @param {NS} ns\\n * @param stat\\n * @param requirement\\n * Helper to wait for studies to be complete */\\nasync function monitorStudies(ns, stat, requirement) {\\n    let lastStatusUpdateTime = 0;\\n    while (!breakToMainLoop()) {\\n        const player = ns.getPlayer();\\n        if (!player.className)\\n            return announce(ns, 'WARNING: Somebody interrupted our studies.', 'warning');\\n        if (player[stat] >= requirement) {\\n            announce(ns, `SUCCESS: Achieved ${stat} level ${player[stat]} >= ${requirement} while studying`);\\n            return true;\\n        }\\n        if ((Date.now() - lastStatusUpdateTime) > statusUpdateInterval) {\\n            lastStatusUpdateTime = Date.now();\\n            announce(ns, `Studying until ${stat} reaches ${requirement}. Currently at ${player[stat]}...`)\\n        }\\n        await ns.sleep(loopSleepInterval);\\n    }\\n}\\n\\nasync function earnFactionInvite(ns, factionName) {\\n    let player = ns.getPlayer();\\n    const joinedFactions = player.factions;\\n    if (joinedFactions.includes(factionName)) return true;\\n    let invitations = ns.checkFactionInvitations();\\n    if (invitations.includes(factionName))\\n        return await tryJoinFaction(ns, factionName);\\n\\n    // Can't join certain factions for various reasons\\n    let reasonPrefix = `Cannot join faction \\\"${factionName}\\\" because`;\\n    let precludingFaction;\\n    if ([\\\"Aevum\\\", \\\"Sector-12\\\"].includes(factionName) && (precludingFaction = [\\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"].find(f => joinedFactions.includes(f))) ||\\n        [\\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\"].includes(factionName) && (precludingFaction = [\\\"Aevum\\\", \\\"Sector-12\\\", \\\"Volhaven\\\"].find(f => joinedFactions.includes(f))) ||\\n        [\\\"Volhaven\\\"].includes(factionName) && (precludingFaction = [\\\"Aevum\\\", \\\"Sector-12\\\", \\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\"].find(f => joinedFactions.includes(f))))\\n        return ns.print(`${reasonPrefix} precluding faction \\\"${precludingFaction}\\\"\\\" has been joined.`);\\n    let requirement;\\n    // See if we can take action to earn an invite for the next faction under consideration\\n    let workedForInvite = false;\\n    // If committing crimes can help us join a faction - we know how to do that\\n    let doCrime = false;\\n    if ((requirement = requiredKarmaByFaction[factionName]) && -ns.heart.break() < requirement) {\\n        ns.print(`${reasonPrefix} you have insufficient Karma. Need: ${-requirement}, Have: ${ns.heart.break()}`);\\n        doCrime = true;\\n    }\\n    if ((requirement = requiredKillsByFaction[factionName]) && player.numPeopleKilled < requirement) {\\n        ns.print(`${reasonPrefix} you have insufficient kills. Need: ${requirement}, Have: ${player.numPeopleKilled}`);\\n        doCrime = true;\\n    }\\n    // Check on physical stat requirements\\n    const physicalStats = [\\\"strength\\\", \\\"defense\\\", \\\"dexterity\\\", \\\"agility\\\"];\\n    requirement = requiredCombatByFaction[factionName];\\n    let deficientStats = !requirement ? [] : physicalStats.map(stat => ({ stat, value: player[stat] })).filter(stat => stat.value < requirement);\\n    // Hash for special-case factions (just 'Daedalus' for now) requiring *either* hacking *or* combat\\n    if (reqHackingOrCombat.includes(factionName) && (\\n        requiredHackByFaction[factionName] / Math.sqrt(player.hacking_exp * player.hacking_exp_mult) <\\n        requiredCombatByFaction[factionName] / Math.sqrt(player.agility_exp * player.agility_exp_mult)))\\n        ns.print(`Ignoring combat requirement for ${factionName} as we are more likely to unlock them via hacking stats.`);\\n    else if (deficientStats.length > 0) {\\n        ns.print(`${reasonPrefix} you have insufficient combat stats. Need: ${requirement} of each, Have ` +\\n            physicalStats.map(s => `${s.slice(0, 3)}: ${player[s]}`).join(\\\", \\\"));\\n        const em = requirement / options['training-stat-per-multi-threshold'];\\n        // Hack: Create a rough heuristic suggesting how much multi we need to train physical stats in a reasonable amount of time. TODO: Be smarter\\n        if (physicalStats.some(s => Math.sqrt(player[`${s}_mult`] * player[`${s}_exp_mult`]) < em))\\n            return ns.print(\\\"Some mults + exp_mults appear to be too low to increase stats in a reasonable amount of time. \\\" +\\n                `You can control this with --training-stat-per-multi-threshold. Current mult/exp avg should be ~${em}, have ` +\\n                physicalStats.map(s => `${s.slice(0, 3)}: ${player[`${s}_mult`]}/${player[`${s}_exp_mult`]}`).join(\\\", \\\"));\\n        doCrime = true; // TODO: There could be more efficient ways to gain combat stats than homicide, although at least this serves future crime factions\\n    }\\n    if (doCrime && options['no-crime'])\\n        return ns.print(`${reasonPrefix} Doing crime to meet faction requirements is disabled. (--no-crime or --no-focus)`);\\n    if (doCrime)\\n        workedForInvite = await crimeForKillsKarmaStats(ns, requiredKillsByFaction[factionName] || 0, requiredKarmaByFaction[factionName] || 0, requiredCombatByFaction[factionName] || 0);\\n\\n    // Study for hack levels if that's what's keeping us\\n    // Note: Check if we have insufficient hack to backdoor this faction server. If we have sufficient hack, we will \\\"waitForInvite\\\" below assuming an external script is backdooring ASAP\\n    let serverReqHackingLevel = 0;\\n    requirement = requiredBackdoorByFaction[factionName]\\n    if (requirement) {\\n        serverReqHackingLevel = ns.getServerRequiredHackingLevel(requirement);\\n        if (player.hacking < serverReqHackingLevel) {\\n            ns.print(`${reasonPrefix} you must first backdoor ${requirement}, which needs hack: ${serverReqHackingLevel}, Have: ${player.hacking}`);\\n        }\\n    }\\n    requirement = Math.max(serverReqHackingLevel, requiredHackByFaction[factionName] || 0)\\n    if (requirement && player.hacking < requirement &&\\n        // Special case (Daedalus): Don't grind for hack requirement if we previously did a grind for the physical requirements\\n        !(reqHackingOrCombat.includes(factionName) && workedForInvite)) {\\n        ns.print(`${reasonPrefix} you have insufficient hack level. Need: ${requirement}, Have: ${player.hacking}`);\\n        const em = requirement / options['training-stat-per-multi-threshold'];\\n        const heuristic = Math.sqrt(player.hacking_mult * player.hacking_exp_mult);\\n        if (options['no-studying'])\\n            return ns.print(`--no-studying is set, nothing we can do to improve hack level.`);\\n        else if (heuristic < em)\\n            return ns.print(`Hacking mult ${player.hacking_mult} and exp_mult ${player.hacking_exp_mult} ` +\\n                `are probably too low to increase hack from ${player.hacking} to ${requirement} in a reasonable amount of time ` +\\n                `(${heuristic} < ${em} - configure with --training-stat-per-multi-threshold)`);\\n        let studying = false;\\n        if (player.money > options['pay-for-studies-threshold']) { // If we have sufficient money, pay for the best studies\\n            if (player.city !== \\\"Volhaven\\\") await goToCity(ns, \\\"Volhaven\\\");\\n            studying = await study(ns, false, \\\"Algorithms\\\");\\n        } else if (uniByCity[player.city]) // Otherwise only go to free university if our city has a university\\n            studying = await study(ns, false, \\\"Study Computer Science\\\");\\n        else\\n            return ns.print(`You have insufficient money (${player.money} < --pay-for-studies-threshold ${options['pay-for-studies-threshold']})` +\\n                ` to travel or pay for studies, and your current city ${player.city} does not have a university from which to take free computer science.`);\\n        if (studying)\\n            workedForInvite = await monitorStudies(ns, 'hacking', requirement);\\n    }\\n    if (breakToMainLoop()) return false;\\n\\n    // Skip factions whose remaining requirement is money. There's not much we can do to earn money\\n    if ((requirement = requiredMoneyByFaction[factionName]) && player.money < requirement)\\n        return ns.print(`${reasonPrefix} you have insufficient money. Need: ${requirement}, Have: ${player.money}`);\\n\\n    // If travelling can help us join a faction - we can do that too\\n    player = ns.getPlayer();\\n    let travelledForInvite = false;\\n    let travelToCityOrDidRecently = async city => // Helper to consider us as having travelled for an invite if we did just now, or recently\\n        player.city !== city && await goToCity(ns, city) || player.city === city && (Date.now() - lastTravel < 60000)\\n    if (['Tian Di Hui', 'Tetrads', 'The Dark Army'].includes(factionName))\\n        travelledForInvite = await travelToCityOrDidRecently('Chongqing');\\n    else if (['The Syndicate'].includes(factionName))\\n        travelledForInvite = await travelToCityOrDidRecently('Sector-12');\\n    else if ([\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"].includes(factionName))\\n        travelledForInvite = await travelToCityOrDidRecently(factionName);\\n    if (travelledForInvite) {\\n        workedForInvite = true;\\n        player = ns.getPlayer();\\n    }\\n\\n    // Special case, earn a CEO position to gain an invite to Silhouette\\n    if (\\\"Silhouette\\\" === factionName) {\\n        ns.print(`You must be a CO (e.g. CEO/CTO) of a company to earn an invite to ${factionName}. This may take a while!`);\\n        let factionConfig = companySpecificConfigs.find(f => f.name === factionName); // We set up Silhouette with a \\\"company-specific-config\\\" so that we can work for an invite like any megacorporation faction.\\n        let companyNames = preferredCompanyFactionOrder.map(f => companySpecificConfigs.find(cf => cf.name === f)?.companyName || f);\\n        // let favorByCompany = await getNsDataThroughFile(ns, dictCommand('ns.getCompanyFavor(o)'), '/Temp/getCompanyFavors.txt', companyNames);\\n        let favorByCompany = {};\\n        for (const company of companyNames) {\\n            favorByCompany[company] = ns.getCompanyFavor(company);\\n        }\\n        // let repByCompany = await getNsDataThroughFile(ns, dictCommand('ns.getCompanyRep(o)'), '/Temp/getCompanyReps.txt', companyNames);\\n        let repByCompany = {};\\n        for (const company of companyNames) {\\n            repByCompany[company] = ns.getCompanyRep(company);\\n        }\\n        // Change the company to work for into whichever company we can get to CEO fastest with. Minimize needed_rep/rep_gain_rate. CEO job is at 3.2e6 rep, so (3.2e6-current_rep)/(100+favor).\\n        factionConfig.companyName = companyNames.sort((a, b) => (3.2e6 - repByCompany[a]) / (100 + favorByCompany[a]) - (3.2e6 - repByCompany[b]) / (100 + favorByCompany[b]))[0];\\n        // Hack: We will be working indefinitely, so we rely on an external script (daemon + faction-manager) to join this faction for us, or for checkForNewPrioritiesInterval to elapse.\\n        workedForInvite = await workForMegacorpFactionInvite(ns, factionName, false); // Work until CTO and the external script joins this faction, triggering an exit condition.\\n    }\\n\\n    if (breakToMainLoop()) return false;\\n    if (workedForInvite === true) // If we took some action to earn the faction invite, wait for it to come in\\n        return await waitForFactionInvite(ns, factionName);\\n    else\\n        return ns.print(`Nothing we can do at this time to earn an invitation to faction \\\"${factionName}\\\"...`);\\n}\\n\\n/** @param {NS} ns\\n * @param cityName\\n */\\nasync function goToCity(ns, cityName) {\\n    if (ns.getPlayer().city === cityName) {\\n        ns.print(`Already in city ${cityName}`);\\n        return true;\\n    }\\n    if (ns.travelToCity(cityName)) {\\n        lastActionRestart = Date.now();\\n        announce(ns, `Travelled to ${cityName}`, 'info');\\n        return true;\\n    }\\n    announce(ns, `Failed to travelled to ${cityName} for some reason...`, 'error');\\n    return false;\\n}\\n\\n/** @param {NS} ns\\n *  @param reqKills\\n *  @param reqKarma\\n *  @param reqStats\\n * @param doFastCrimesOnly\\n */\\nexport async function crimeForKillsKarmaStats(ns, reqKills, reqKarma, reqStats, doFastCrimesOnly = false) {\\n    const bestCrimesByDifficulty = [\\\"heist\\\", \\\"assassinate\\\", \\\"homicide\\\", \\\"mug\\\"]; // Will change crimes as our success rate improves\\n    const chanceThresholds = [0.75, 0.9, 0.5, 0]; // Will change crimes once we reach this probability of success for better all-round gains\\n    doFastCrimesOnly = doFastCrimesOnly || (options ? options['fast-crimes-only'] : false);\\n    let player = ns.getPlayer();\\n    let strRequirements = [];\\n    let forever = reqKills >= Number.MAX_SAFE_INTEGER || reqKarma >= Number.MAX_SAFE_INTEGER || reqStats >= Number.MAX_SAFE_INTEGER;\\n    if (reqKills) strRequirements.push(() => `${reqKills} kills (Have ${player.numPeopleKilled})`);\\n    if (reqKarma) strRequirements.push(() => `-${reqKarma} Karma (Have ${ns.heart.break()})`);\\n    if (reqStats) strRequirements.push(() => `${reqStats} of each combat stat (Have Str: ${player.strength}, Def: ${player.defense}, Dex: ${player.dexterity}, Agi: ${player.agility})`);\\n    let crime, lastCrime, lastStatusUpdateTime;\\n    while (forever || player.strength < reqStats || player.defense < reqStats || player.dexterity < reqStats || player.agility < reqStats || player.numPeopleKilled < reqKills || -ns.heart.break() < reqKarma) {\\n        if (!forever && breakToMainLoop()) return ns.print('INFO: Interrupting crime to check on high-level priorities.');\\n        // let crimeChances = await getNsDataThroughFile(ns, `Object.fromEntries(ns.args.map(c => [c, ns.getCrimeChance(c)]))`, '/Temp/crime-chances.txt', bestCrimesByDifficulty);\\n        let crimeChances = {};\\n        for (const c of bestCrimesByDifficulty) {\\n            crimeChances[c] = ns.getCrimeChance(c);\\n        }\\n        let needStats = player.strength < reqStats || player.defense < reqStats || player.dexterity < reqStats || player.agility < reqStats;\\n        let karma = -ns.heart.break();\\n        crime = crimeCount < 10 ? (crimeChances[\\\"homicide\\\"] > 0.75 ? \\\"homicide\\\" : \\\"mug\\\") : // Start with a few fast & easy crimes to boost stats if we're just starting\\n            (!needStats && (player.numPeopleKilled < reqKills || karma < reqKarma)) ? \\\"homicide\\\" : // If *all* we need now is kills or Karma, homicide is the fastest way to do that, even at low proababilities\\n                bestCrimesByDifficulty.find((c, index) => doFastCrimesOnly && index <= 1 ? 0 : crimeChances[c] >= chanceThresholds[index]); // Otherwise, crime based on success chance vs relative reward (precomputed)\\n        if (lastCrime !== crime || (Date.now() - lastStatusUpdateTime) > statusUpdateInterval) {\\n            ns.print(`Committing \\\"${crime}\\\" (${(100 * crimeChances[crime]).toPrecision(3)}% success) ` + (forever ? 'forever...' : `until we reach ${strRequirements.map(r => r()).join(', ')}`));\\n            lastCrime = crime;\\n            lastStatusUpdateTime = Date.now();\\n        }\\n        ns.tail(); // Force a tail window open when auto-criming, or else it's very difficult to stop if it was accidentally closed.\\n        // await ns.sleep(1 + (await getNsDataThroughFile(ns, 'ns.commitCrime(ns.args[0])', '/Temp/commitCrime.txt', [crime])));\\n        await ns.sleep(1 + ns.commitCrime(crime));\\n        while ((player = (ns.getPlayer())).crimeType === `commit ${crime}` || player.crimeType === crime) // If we woke up too early, wait a little longer for the crime to finish\\n            await ns.sleep(10);\\n        crimeCount++;\\n    }\\n    ns.print(`Done committing crimes. Reached ${strRequirements.map(r => r()).join(', ')}`);\\n    return true;\\n}\\n\\n/** @param {NS} ns\\n * @param factionName\\n * @param maxWaitTime\\n */\\nexport async function waitForFactionInvite(ns, factionName, maxWaitTime = 20000) {\\n    ns.print(`Waiting for invite from faction \\\"${factionName}\\\"...`);\\n    let waitTime = maxWaitTime;\\n    let invitations;\\n    let joinedFactions;\\n    do {\\n        invitations = ns.checkFactionInvitations();\\n        joinedFactions = ns.getPlayer().factions;\\n        if (invitations.includes(factionName) || joinedFactions.includes(factionName))\\n            break;\\n        await ns.sleep(loopSleepInterval);\\n    } while (!invitations.includes(factionName) && !joinedFactions.includes(factionName) && (waitTime -= 1000) > 0);\\n    if (joinedFactions.includes(factionName)) // Another script may have auto-joined this faction before we could\\n        ns.print(`An external script has joined faction \\\"${factionName}\\\" for us.`);\\n    else if (!invitations.includes(factionName))\\n        return announce(ns, `Waited ${ns.tFormat(maxWaitTime)}, but still have not received an invite for faction: \\\"${factionName}\\\" (Requirements not met?)`, 'error');\\n    else if (!(await tryJoinFaction(ns, factionName)))\\n        return announce(ns, `Something went wrong. Earned \\\"${factionName}\\\" faction invite, but failed to join it.`, 'error');\\n    return true;\\n}\\n\\n/** @param {NS} ns\\n * @param factionName\\n */\\nexport async function tryJoinFaction(ns, factionName) {\\n    const joinedFactions = ns.getPlayer().factions;\\n    if (joinedFactions.includes(factionName))\\n        return true;\\n    if (!(ns.joinFaction(factionName)))\\n        return false;\\n    announce(ns, `Joined faction \\\"${factionName}\\\"`, 'success');\\n    return true;\\n}\\n\\n/** @param {NS} ns\\n * @param factionName\\n */\\nasync function getCurrentFactionFavour(ns, factionName) {\\n    return ns.getFactionFavor(factionName);\\n}\\n\\nlet lastFactionWorkStatus = \\\"\\\";\\nexport async function workForSingleFaction(ns, factionName, forceUnlockDonations = false, forceBestAug = false, forceRep = undefined) {\\n    const repToFavour = (rep) => Math.ceil(25500 * 1.02 ** (rep - 1) - 25000);\\n    let highestRepAug = forceBestAug ? mostExpensiveAugByFaction[factionName] : mostExpensiveDesiredAugByFaction[factionName];\\n    let startingFavor = dictFactionFavors[factionName];\\n    let favorRepRequired = Math.max(0, repToFavour(repToDonate) - repToFavour(startingFavor));\\n    // When to stop grinding faction rep (usually ~467,000 to get 150 favour) Set this lower if there are no augs requiring that much REP\\n    let factionRepRequired = forceRep ? forceRep : forceUnlockDonations ? favorRepRequired : Math.min(highestRepAug, favorRepRequired);\\n    if (highestRepAug === -1 && !firstFactions.includes(factionName) && !forceRep && !options['get-invited-to-every-faction'])\\n        return ns.print(`All \\\"${factionName}\\\" augmentations are owned. Skipping unlocking faction...`);\\n    // Ensure we get an invite to location-based factions we might want / need\\n    if (!await earnFactionInvite(ns, factionName))\\n        return ns.print(`We are not yet part of faction \\\"${factionName}\\\". Skipping working for faction...`);\\n    if (startingFavor >= repToDonate && !forceRep) // If we have already unlocked donations via favour - no need to grind for rep\\n        return ns.print(`Donations already unlocked for \\\"${factionName}\\\". You should buy access to augs. Skipping working for faction...`);\\n    if (playerGang === factionName) // Cannot work for your own gang faction.\\n        return ns.print(`\\\"${factionName}\\\" is your gang faction. You can only earn rep in your gang via respect.`);\\n    if (forceUnlockDonations && mostExpensiveAugByFaction[factionName] < 0.2 * factionRepRequired) { // Special check to avoid pointless donation unlocking\\n        ns.print(`The last \\\"${factionName}\\\" aug is only ${mostExpensiveAugByFaction[factionName].toLocaleString()} rep, ` +\\n            `not worth grinding ${favorRepRequired.toLocaleString()} rep to unlock donations.`);\\n        forceUnlockDonations = false;\\n        factionRepRequired = highestRepAug = mostExpensiveAugByFaction[factionName];\\n    }\\n\\n    if ((ns.getPlayer()).workRepGained > 0) // If we're currently doing faction work, stop to collect reputation and find out how much is remaining\\n        ns.stopAction();\\n    let currentReputation = ns.getFactionRep(factionName);\\n    // If the best faction aug is within 10% of our current rep, grind all the way to it so we can get it immediately, regardless of our current rep target\\n    if (forceBestAug || highestRepAug <= 1.1 * Math.max(currentReputation, factionRepRequired)) {\\n        // forceBestAug = true; //TODO: I'm almost positive we don't want to set this flag.\\n        factionRepRequired = Math.max(highestRepAug, factionRepRequired);\\n    }\\n    if (factionName === \\\"Daedalus\\\") await daedalusSpecialCheck(ns, favorRepRequired, currentReputation);\\n    if (currentReputation >= factionRepRequired)\\n        return ns.print(`Faction \\\"${factionName}\\\" required rep of ${Math.round(factionRepRequired).toLocaleString()} has already been attained ` +\\n            `(Current rep: ${Math.round(currentReputation).toLocaleString()}). Skipping working for faction...`)\\n\\n    ns.print(`Faction \\\"${factionName}\\\" Highest Aug Req: ${highestRepAug?.toLocaleString()}, Current Favor (` +\\n        `${startingFavor?.toFixed(2)}/${repToDonate?.toFixed(2)}) Req: ${Math.round(favorRepRequired).toLocaleString()}`);\\n    if (options['invites-only'])\\n        return ns.print(`--invites-only Skipping working for faction...`);\\n    if (options['prioritize-invites'] && !forceUnlockDonations && !forceBestAug && !forceRep)\\n        return ns.print(`--prioritize-invites Skipping working for faction for now...`);\\n\\n    let lastStatusUpdateTime = 0, repGainRatePerMs = 0;\\n    let lastRepMeasurement = ns.getFactionRep(factionName)\\n    while ((currentReputation = (ns.getFactionRep(factionName))) < factionRepRequired) {\\n        if (breakToMainLoop()) return ns.print('INFO: Interrupting faction work to check on high-level priorities.');\\n        const factionWork = await detectBestFactionWork(ns, factionName); // Before each loop - determine what work gives the most rep/second for our current stats\\n        if (ns.workForFaction(factionName, factionWork, shouldFocusAtWork)) {\\n            if (shouldFocusAtWork) ns.tail(); // Force a tail window open to help the user kill this script if they accidentally closed the tail window and don't want to keep stealing focus\\n            currentReputation = ns.getFactionRep(factionName); // Update to capture the reputation earned when restarting work\\n            if (currentReputation > factionRepRequired) break;\\n            lastActionRestart = Date.now(); repGainRatePerMs = (ns.getPlayer()).workRepGainRate; // Note: In order to get an accurate rep gain rate, we must wait for the first game tick (200ms) after starting work\\n            while (repGainRatePerMs === (ns.getPlayer()).workRepGainRate && (Date.now() - lastActionRestart < 400)) await ns.sleep(10); // TODO: Remove this if/when the game bug is fixed\\n            repGainRatePerMs = (ns.getPlayer()).workRepGainRate / 200 * (hasFocusPenalty && !shouldFocusAtWork ? 0.8 : 1 /* penalty if we aren't focused but don't have the aug to compensate */);\\n        } else {\\n            announce(ns, `ERROR: Something went wrong, failed to start \\\"${factionWork}\\\" work for faction \\\"${factionName}\\\" (Is gang faction, or not joined?)`, 'error');\\n            break;\\n        }\\n        let status = `Doing '${factionWork}' work for \\\"${factionName}\\\" until ${Math.round(factionRepRequired).toLocaleString()} rep.`;\\n        if (lastFactionWorkStatus !== status || (Date.now() - lastStatusUpdateTime) > statusUpdateInterval) {\\n            // Actually measure how much reputation we've earned since our last update, to give a more accurate ETA including external sources of rep\\n            let measuredRepGainRatePerMs = ((ns.getFactionRep(factionName)) - lastRepMeasurement) / (Date.now() - lastStatusUpdateTime);\\n            if (currentReputation > lastRepMeasurement + statusUpdateInterval * repGainRatePerMs * 2) // Detect a sudden increase in rep, but don't use it to update the expected rate\\n                ns.print('SUCCESS: Reputation spike! (Perhaps a coding contract was just solved?) ETA reduced.');\\n            else if (lastStatusUpdateTime !== 0 && Math.abs(measuredRepGainRatePerMs - repGainRatePerMs) / repGainRatePerMs > 0.05) // Stick to the game-provided rate if we measured something within 5% of that number\\n                repGainRatePerMs = measuredRepGainRatePerMs; // If we measure a significantly different rep gain rate, this could be due to external sources of rep (e.g. sleeves) - account for it in the ETA\\n            lastStatusUpdateTime = Date.now(); lastRepMeasurement = currentReputation;\\n            const eta_milliseconds = (factionRepRequired - currentReputation) / repGainRatePerMs;\\n            ns.print((lastFactionWorkStatus = status) + ` Currently at ${Math.round(currentReputation).toLocaleString()}, earning ${repGainRatePerMs * 1000} rep/sec. ` +\\n                (hasFocusPenalty && !shouldFocusAtWork ? 'after 20% non-focus Penalty ' : '') + `(ETA: ${eta_milliseconds})`);\\n        }\\n        await ns.sleep(restartWorkInterval);\\n        if (!forceBestAug && !forceRep) { // Detect our rep requirement decreasing (e.g. if we exported for our daily +1 faction rep)\\n            let currentFavor = await getCurrentFactionFavour(ns, factionName);\\n            if (currentFavor > startingFavor) {\\n                startingFavor = dictFactionFavors[factionName] = currentFavor;\\n                favorRepRequired = Math.max(0, repToFavour(repToDonate) - repToFavour(startingFavor));\\n                factionRepRequired = forceUnlockDonations ? favorRepRequired : Math.min(highestRepAug, favorRepRequired);\\n            }\\n        }\\n        let workRepGained = (ns.getPlayer()).workRepGained; // Delay the next loop slightly until the next game tick so we aren't missing out on a few ms of rep\\n        while (workRepGained === (ns.getPlayer()).workRepGained && (Date.now() - lastActionRestart < 200)) await ns.sleep(10);\\n        // If we explicitly stop working, we immediately get our updated faction rep, otherwise it lags by 1 loop (until after next time we call workForFaction)\\n        if (currentReputation + (ns.getPlayer()).workRepGained >= factionRepRequired)\\n            ns.stopAction(); // We're close - stop working so our current rep is accurate when we check the while loop condition\\n    }\\n    if (currentReputation >= factionRepRequired)\\n        ns.print(`Attained ${Math.round(currentReputation).toLocaleString()} rep with \\\"${factionName}\\\" (needed ${factionRepRequired.toLocaleString()}).`);\\n    if (factionName === \\\"Daedalus\\\") await daedalusSpecialCheck(ns, favorRepRequired, currentReputation);\\n    return currentReputation >= factionRepRequired;\\n}\\n\\n\\n/** A special check for when we unlock donations with Daedalus, this is usually a good time to reset.\\n * @param favorRepRequired\\n * @param currentReputation\\n * @param {NS} ns */\\nasync function daedalusSpecialCheck(ns, favorRepRequired, currentReputation) {\\n    if (favorRepRequired === 0 || currentReputation < favorRepRequired) return false;\\n    // If we would be unlocking donations, but actually, we're pretty close to just being able to afford TRP, no impetus to reset.\\n    if (currentReputation >= 0.9 * 2.500e6) return false;\\n    ns.print(`INFO: You have enough reputation with Daedalus (have ${currentReputation}) that you will ` +\\n        `unlock donations (needed ${favorRepRequired}) with them on your next reset.`);\\n    await ns.write(\\\"/Temp/Daedalus-donation-rep-attained.txt\\\", true, \\\"w\\\"); // HACK: To notify autopilot that we can reset for rep now.\\n    notifiedAboutDaedalus = true;\\n}\\n\\n/** @param {NS} ns\\n * @param factionName\\n * Try all work types and see what gives the best rep gain with this faction! */\\nasync function detectBestFactionWork(ns, factionName) {\\n    let bestWork, bestRepRate = 0;\\n    for (const work of [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"]) {\\n        //if (!await getNsDataThroughFile(ns, `ns.workForFaction('${factionName}', '${work}') === true); ns.setFocus(${shouldFocusAtWork}`, '/Temp/work-for-faction.txt'))\\n        if (!ns.workForFaction(factionName, work, shouldFocusAtWork)) {\\n            // ns.print(`\\\"${factionName}\\\" work \\\"${work}\\\" not supported.`);\\n            continue; // This type of faction work must not be supported\\n        }\\n        const currentRepGainRate = ns.getPlayer().workRepGainRate;\\n        // ns.print(`\\\"${factionName}\\\" work ${work} provides ${currentRepGainRate} rep rate`);\\n        if (currentRepGainRate > bestRepRate) {\\n            bestRepRate = currentRepGainRate;\\n            bestWork = work;\\n        }\\n    }\\n    return bestWork || 'hacking'; // || hacking bug is fixed problem with gang and working nitesec\\n}\\n\\n/** @param {NS} ns\\n *  @param {Array<string>} megacorpFactionsInPreferredOrder - The list of all corporate factions to work for, sorted in the order they should be worked for\\n *  @param alsoWorkForCompanyFactions\\n *  @param oneCompanyFactionAtATime\\n * */\\nexport async function workForAllMegacorps(ns, megacorpFactionsInPreferredOrder, alsoWorkForCompanyFactions, oneCompanyFactionAtATime) {\\n    let player = ns.getPlayer();\\n    if (player.hacking < 225)\\n        return ns.print(`Hacking Skill ${player.hacking} is to low to work for any megacorps (min req. 225).`);\\n    let joinedCompanyFactions = player.factions.filter(f => megacorpFactionsInPreferredOrder.includes(f)); // Company factions we've already joined\\n    if (joinedCompanyFactions.length > 0)\\n        ns.print(`${joinedCompanyFactions.length} companies' factions have already been joined: ${joinedCompanyFactions.join(\\\", \\\")}`)\\n    let doFactionWork = alsoWorkForCompanyFactions && oneCompanyFactionAtATime;\\n    // Earn each obtainable megacorp faction invite, and optionally also grind faction rep\\n    for (const factionName of megacorpFactionsInPreferredOrder) {\\n        if ((await workForMegacorpFactionInvite(ns, factionName, doFactionWork)) && doFactionWork)\\n            await workForSingleFaction(ns, factionName);\\n    }\\n    if (alsoWorkForCompanyFactions && !oneCompanyFactionAtATime) { // If configured, start grinding rep with company factions we've joined\\n        ns.print(`Done working for companies, now working for all incomplete company factions...`);\\n        for (const factionName of megacorpFactionsInPreferredOrder)\\n            await workForSingleFaction(ns, factionName);\\n    }\\n}\\n\\n/** @param {NS} ns\\n * @param factionName\\n * @param waitForInvite\\n */\\nexport async function workForMegacorpFactionInvite(ns, factionName, waitForInvite) {\\n    const companyConfig = companySpecificConfigs.find(c => c.name === factionName); // For anything company-specific\\n    const companyName = companyConfig?.companyName || factionName; // Name of the company that gives the faction (same for all but Fulcrum)\\n    const statModifier = companyConfig?.statModifier || 0; // How much e.g. Hack / Cha is needed for a promotion above the base requirement for the job\\n    const repRequiredForFaction = companyConfig?.repRequiredForFaction || 200000; // Required to unlock the faction\\n\\n    let player = ns.getPlayer();\\n    if (player.factions.includes(factionName))\\n        return false; // Only return true if we did work to earn a new faction invite\\n    if ((ns.checkFactionInvitations()).includes(factionName))\\n        return waitForInvite ? await waitForFactionInvite(ns, factionName) : false;\\n    // TODO: In some scenarios, the best career path may require combat stats, this hard-codes the optimal path for hack stats\\n    const itJob = jobs.find(j => j.name === \\\"it\\\");\\n    const softwareJob = jobs.find(j => j.name === \\\"software\\\");\\n    if (itJob.reqHack[0] + statModifier > player.hacking) // We don't qualify to work for this company yet if we can't meet IT qualifications (lowest there are)\\n        return ns.print(`Cannot yet work for \\\"${companyName}\\\": Need Hack ${itJob.reqHack[0] + statModifier} to get hired (current Hack: ${player.hacking});`);\\n    ns.print(`Going to work for Company \\\"${companyName}\\\" next...`)\\n    let currentReputation, currentRole = \\\"\\\", currentJobTier = -1; // TODO: Derive our current position and promotion index based on player.jobs[companyName]\\n    let lastStatus = \\\"\\\";\\n    let studying = false, working = false;\\n    while (((currentReputation = ns.getCompanyRep(companyName)) < repRequiredForFaction) && !player.factions.includes(factionName)) {\\n        joinOpenInvitation(ns);\\n        player = ns.getPlayer();\\n        // Determine the next promotion we're striving for (the sooner we get promoted, the faster we can earn company rep)\\n        const getTier = job => Math.min(job.reqRep.filter(r => r <= currentReputation).length, job.reqHack.filter(h => h <= player.hacking).length, job.reqCha.filter(c => c <= player.charisma).length) - 1;\\n        // It's generally best to hop back-and-forth between it and software engineer career paths (rep gain is about the same, but better money from software)\\n        const qualifyingItTier = getTier(itJob), qualifyingSoftwareTier = getTier(softwareJob);\\n        const bestJobTier = Math.max(qualifyingItTier, qualifyingSoftwareTier); // Go with whatever job promotes us higher\\n        const bestRoleName = qualifyingItTier > qualifyingSoftwareTier ? \\\"it\\\" : \\\"software\\\"; // If tied for qualifying tier, go for software\\n        if (currentJobTier < bestJobTier || currentRole !== bestRoleName) { // We are ready for a promotion, ask for one!\\n            if (ns.applyToCompany(companyName, bestRoleName))\\n                announce(ns, `Successfully applied to \\\"${companyName}\\\" for a '${bestRoleName}' Job or Promotion`, 'success');\\n            else if (currentJobTier !== -1) // Unless we just restarted \\\"work-for-factions\\\" and lost track of our current job, this is an error\\n                announce(ns, `Application to \\\"${companyName}\\\" for a '${bestRoleName}' Job or Promotion failed.`, 'error');\\n            currentJobTier = bestJobTier; // API to apply for a job immediately gives us the highest tier we qualify for\\n            currentRole = bestRoleName;\\n            player = ns.getPlayer();\\n        }\\n        const currentJob = player.jobs[companyName];\\n        const nextJobTier = currentRole === \\\"it\\\" ? currentJobTier : currentJobTier + 1;\\n        const nextJobName = currentRole === \\\"it\\\" || nextJobTier >= itJob.reqRep.length ? \\\"software\\\" : \\\"it\\\";\\n        const nextJob = nextJobName === \\\"it\\\" ? itJob : softwareJob;\\n        const requiredHack = nextJob.reqHack[nextJobTier] === 0 ? 0 : nextJob.reqHack[nextJobTier] + statModifier; // Stat modifier only applies to non-zero reqs\\n        const requiredCha = nextJob.reqCha[nextJobTier] === 0 ? 0 : nextJob.reqCha[nextJobTier] + statModifier; // Stat modifier only applies to non-zero reqs\\n        const requiredRep = nextJob.reqRep[nextJobTier]; // No modifier on rep requirements\\n        let status = `Next promotion ('${nextJobName}' #${nextJobTier}) at Hack:${requiredHack} Cha:${requiredCha} Rep:${requiredRep?.toLocaleString()}` +\\n            (repRequiredForFaction > nextJob.reqRep[nextJobTier] ? '' : `, but we won't need it, because we'll sooner hit ${repRequiredForFaction.toLocaleString()} reputation to unlock company faction \\\"${factionName}\\\"!`);\\n        // We should only study at university if every other requirement is met but Charisma\\n        if (currentReputation >= requiredRep && player.hacking >= requiredHack && player.charisma < requiredCha && !noStudying) {\\n            status = `Studying at ZB university until Cha reaches ${requiredCha}...\\\\n` + status;\\n            if (studying && player.className !== 'taking a Leadership course' && player.className !== 'Leadership' /* In case className is made more intuitive in the future */) {\\n                announce(ns, `Leadership studies were interrupted. player.className=\\\"${player.className}\\\" Restarting in 5 seconds...`, 'warning');\\n                studying = false; // If something external has interrupted our studies, take note\\n                ns.tail(); // Force a tail window open to help the user kill this script if they accidentally closed the tail window and don't want to keep studying\\n            }\\n            if (!studying) { // Study at ZB university if CHA is the limiter.\\n                if (await studyForCharisma(ns))\\n                    working = !(studying = true);\\n            }\\n        } else if (studying) { // If we no longer need to study and we currently are, turn off study mode and get back to work!\\n            studying = false;\\n            continue; // Restart the loop so we refresh our promotion index and apply for a promotion before working more\\n        }\\n\\n        // Regardless of the earlier promotion logic, always try for a promotion to make sure we don't miss a promotion due to buggy logic\\n        if (ns.applyToCompany(companyName, currentRole))\\n            announce(ns, `Unexpected '${currentRole}' promotion from ${currentJob} to \\\"${ns.getPlayer().jobs[companyName]}. Promotion logic must be off...\\\"`, 'warning');\\n        // TODO: If we ever get rid of the below periodic restart-work, we will need to monitor for interruptions with player.workType == e.g. \\\"Work for Company\\\"\\n        if (!studying && (!working || (Date.now() - lastActionRestart >= restartWorkInterval) /* We must periodically restart work to collect Rep Gains */)) {\\n            // Work for the company (assume daemon is grinding hack XP as fast as it can, so no point in studying for that)\\n            //if (await getNsDataThroughFile(ns, `ns.workForCompany('${companyName}')); ns.setFocus(${shouldFocusAtWork}`, '/Temp/work-for-company.txt')) {\\n            if (ns.workForCompany(companyName, shouldFocusAtWork)) {\\n                lastActionRestart = Date.now();\\n                working = true;\\n            } else {\\n                announce(ns, `Something went wrong, failed to start working for company \\\"${companyName}\\\".`, 'error');\\n                break;\\n            }\\n        }\\n        status = `Currently a \\\"${player.jobs[companyName]}\\\" ('${currentRole}' #${currentJobTier}) for \\\"${companyName}\\\"`;\\n        if (lastStatus !== status) {\\n            player = ns.getPlayer();\\n            ns.print(status + ` earning ${(player.workRepGainRate * 5).toFixed(2)} rep/sec.\\\\n` +\\n                `${status}\\\\nCurrent player stats are Hack:${player.hacking} ${player.hacking >= (requiredHack || 0) ? '✓' : '✗'} ` +\\n                `Cha:${player.charisma} ${player.charisma >= (requiredCha || 0) ? '✓' : '✗'} ` +\\n                `Rep:${Math.round(currentReputation).toLocaleString()} ${currentReputation >= (requiredRep || repRequiredForFaction) ? '✓' : '✗'}`);\\n            lastStatus = status;\\n        }\\n        await ns.sleep(loopSleepInterval); // Sleep now and wake up periodically and stop working to check our stats / reputation progress\\n    }\\n    // Return true if we succeeded, false otherwise.\\n    if (currentReputation >= repRequiredForFaction) {\\n        ns.print(`Attained ${repRequiredForFaction.toLocaleString()} rep with \\\"${companyName}\\\".`);\\n        if (!player.factions.includes(factionName) && waitForInvite)\\n            return await waitForFactionInvite(ns, factionName);\\n        return true;\\n    }\\n    ns.print(`Stopped working for \\\"${companyName}\\\" repRequiredForFaction: ${repRequiredForFaction.toLocaleString()} ` +\\n        `currentReputation: ${Math.round(currentReputation).toLocaleString()} inFaction: ${player.factions.includes(factionName)}`);\\n    return false;\\n}\",\"filename\":\"workForFaction.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"augments.js\",\"url\":\"blob:https://danielyxie.github.io/327261ec-9bfe-4ec2-9c96-b4092addafb3\",\"moduleSequenceNumber\":148245},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/0c0f91ba-43cd-42c2-84b2-799dcaf15ea9\",\"moduleSequenceNumber\":148233},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/af25296d-641f-47b8-82b9-52321855bc6e\",\"moduleSequenceNumber\":148216},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/b6d48a45-1652-442f-a01d-075d0bc9833f\",\"moduleSequenceNumber\":148217},{\"filename\":\"workForFaction.js\",\"url\":\"blob:https://danielyxie.github.io/36f5cdd3-31cb-4ec4-be12-928dd3439851\",\"moduleSequenceNumber\":148350}],\"dependents\":[],\"ramUsage\":41.8,\"server\":\"zer0\",\"moduleSequenceNumber\":148350,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getFactionFavor\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.joinFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.universityCourse\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.getCompanyFavor\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.getCompanyRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.getCrimeChance\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.workForFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.applyToCompany\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.workForCompany\",\"cost\":3},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const factions = {\\n    Illuminati: \\\"Illuminati\\\", Daedalus: \\\"Daedalus\\\", TheCovenant: \\\"The Covenant\\\", ECorp: \\\"ECorp\\\", MegaCorp: \\\"MegaCorp\\\",\\n    BachmanAssociates: \\\"Bachman & Associates\\\", BladeIndustries: \\\"Blade Industries\\\", NWO: \\\"NWO\\\", Clarke: \\\"Clarke Incorporated\\\",\\n    OmniTek: \\\"OmniTek Incorporated\\\", FourSigma: \\\"Four Sigma\\\", KuaiGong: \\\"KuaiGong International\\\", Fulcrum: \\\"Fulcrum Secret Technologies\\\",\\n    BitRunners: \\\"BitRunners\\\", TheBlackHand: \\\"The Black Hand\\\", NiteSec: \\\"NiteSec\\\", Aevum: \\\"Aevum\\\", Chongqing: \\\"Chongqing\\\", Ishima: \\\"Ishima\\\",\\n    NewTokyo: \\\"New Tokyo\\\", Sector12: \\\"Sector-12\\\", Volhaven: \\\"Volhaven\\\", SpeakersfortheDead: \\\"Speakers for the Dead\\\", TheDarkArmy: \\\"The Dark Army\\\",\\n    TheSyndicate: \\\"The Syndicate\\\", Silhouette: \\\"Silhouette\\\", Tetrads: \\\"Tetrads\\\", SlumSnakes: \\\"Slum Snakes\\\", Netburners: \\\"Netburners\\\",\\n    TianDiHui: \\\"Tian Di Hui\\\", CyberSec: \\\"CyberSec\\\", Bladeburners: \\\"Bladeburners\\\"\\n};\\nexport const factionsWork = {\\n    \\\"Illuminati\\\": [\\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Daedalus\\\": [\\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"The Covenant\\\": [\\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"ECorp\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"MegaCorp\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Bachman & Associates\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Blade Industries\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"NWO\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Clarke Incorporated\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"OmniTek Incorporated\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Four Sigma\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"KuaiGong International\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Fulcrum Secret Technologies\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"BitRunners\\\": [\\\"hacking contracts\\\"],\\n    \\\"The Black Hand\\\": [\\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"NiteSec\\\": [\\\"hacking contracts\\\"],\\n    \\\"Aevum\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Chongqing\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Ishima\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"New Tokyo\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Sector-12\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Volhaven\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Speakers for the Dead\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"The Dark Army\\\": [\\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"The Syndicate\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Silhouette\\\": [\\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Tetrads\\\": [\\\"security\\\", \\\"field\\\"],\\n    \\\"Slum Snakes\\\": [\\\"security\\\", \\\"field\\\"],\\n    \\\"Netburners\\\": [\\\"hacking contracts\\\"],\\n    \\\"Tian Di Hui\\\": [\\\"security\\\", \\\"hacking contracts\\\"],\\n    \\\"CyberSec\\\": [\\\"hacking contracts\\\"],\\n    \\\"Bladeburners\\\": []\\n};\\nexport const allGangFactions = [\\\"Slum Snakes\\\", \\\"Tetrads\\\", \\\"The Black Hand\\\", \\\"The Syndicate\\\", \\\"The Dark Army\\\", \\\"Speakers for the Dead\\\", \\\"NiteSec\\\"];\\n\\nlet augmentationNames;\\n/** @param {NS} ns **/\\nexport async function initAugments(ns) {\\n    await writeAugmentsPerFaction(ns);\\n    await ns.write(`/tmp/getOwnedAugmentations.txt`, JSON.stringify(ns.getOwnedAugmentations(true), null, 2), 'w');\\n    await initAllAugmentRepReq(ns);\\n}\\n/** @param {NS} ns **/\\nasync function writeAugmentsPerFaction(ns) {\\n    const factionNames = Object.values(factions);\\n    const data = {};\\n    for (let factionName of factionNames) {\\n        data[factionName] = ns.getAugmentationsFromFaction(factionName);\\n    }\\n    augmentationNames = [...new Set(Object.values(data).flat())]\\n    await ns.write(`/tmp/factionAugs.txt`, JSON.stringify(data, null, 2), 'w');\\n}\\n/** @param {NS} ns **/\\nexport function getAugmentsPerFaction(ns) {\\n    return JSON.parse(ns.read(`/tmp/factionAugs.txt`));\\n}\\nexport function getAugmentationNames() {\\n    return augmentationNames;\\n}\\nconst augRepReq = {};\\nconst augStats = {};\\n/** @param {NS} ns **/\\nasync function initAllAugmentRepReq(ns) {\\n    for (let augmentationName of getAugmentationNames()) {\\n        augRepReq[augmentationName] = ns.getAugmentationRepReq(augmentationName);\\n        augStats[augmentationName] = ns.getAugmentationStats(augmentationName);\\n        augStats[augmentationName].price = ns.getAugmentationPrice(augmentationName);\\n    }\\n    await ns.write(`/tmp/augRepReq.txt`, JSON.stringify(augRepReq, null, 2), 'w');\\n    await ns.write(`/tmp/augStats.txt`, JSON.stringify(augStats, null, 2), 'w');\\n}\\nexport const getAllAugmentRepReq = (ns) => JSON.parse(ns.read(`/tmp/augRepReq.txt`));\\nexport const getAllAugmentStats = (ns) => JSON.parse(ns.read(`/tmp/augStats.txt`));\\n\\n/** @param {NS} ns **/\\nexport function getOwnedAugmentationsStatic(ns) {\\n    return JSON.parse(ns.read(`/tmp/getOwnedAugmentations.txt`));\\n}\\n\\nexport function getAugsRemainingAtFaction(ns) {\\n    const playerAugs = getOwnedAugmentationsStatic(ns);\\n    const factionAugs = getAugmentsPerFaction(ns);\\n    const factionAugsLeft = {};\\n    Object.entries(factionAugs)\\n        .forEach(([faction, augs]) => factionAugsLeft[faction] = augs.filter(aug => !playerAugs.includes(aug)));\\n    return factionAugsLeft;\\n}\\n\\n\\nexport function hasStat(playerStat, augStats) {\\n    switch (playerStat) {\\n        case 'hack':\\n        // return augStats.hacking_chance_mult\\n        //     || augStats.hacking_exp_mult\\n        //     || augStats.hacking_grow_mult\\n        //     || augStats.hacking_money_mult\\n        //     || augStats.hacking_mult\\n        //     || augStats.hacking_speed_mult;\\n        case 'str':\\n        // return augStats.strength_exp_mult || augStats.strength_mult;\\n        case 'def':\\n        // return augStats.defense_exp_mult || augStats.defense_mult;\\n        case 'dex':\\n        //return augStats.dexterity_exp_mult || augStats.dexterity_mult;\\n        case 'agi':\\n        // return augStats.agility_exp_mult || augStats.agility_mult;\\n        case 'cha':\\n        //return augStats.charisma_exp_mult || augStats.charisma_mult;\\n        case 'crime':\\n        case 'faction_rep':\\n        case 'company_rep':\\n        case 'bladeburner':\\n        case 'work':\\n        default:\\n            return Object.keys(augStats).find(o => o.startsWith(playerStat)) !== undefined;\\n    }\\n}\\nconst simulacrumAugName = \\\"The Blade's Simulacrum\\\"; // This augmentation lets you do bladeburner actions while busy\\nexport const hasBladesSimulacrum = (ns) => getOwnedAugmentationsStatic(ns).includes(simulacrumAugName);\",\"filename\":\"augments.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.6,\"server\":\"home\",\"moduleSequenceNumber\":148245,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrice\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { findBox, boxTailSingleton, sleevesPortNumber, tryGetBitNodeMultipliers } from \\\"./utils\\\";\\nimport { createSidebarItem, elemFromHTML, sidebar } from \\\"/box/box.js\\\"\\nimport { getAugsRemainingAtFaction, factionsWork, getAllAugmentStats, hasStat, hasBladesSimulacrum } from \\\"./augments\\\";\\n\\nconst interval = 5000; // Update (tick) this often\\nconst minTaskWorkTime = 29000; // Sleeves assigned a new task should stick to it for at least this many milliseconds\\nlet workByFaction; // Cache of crime statistics and which factions support which work\\nlet task, lastPurchaseTime, availableAugs, lastReassignTime; // State by sleeve\\n//todo convert the status to some nice html for the box.js\\nlet sleeveStatuses = [];\\nlet playerInfo, numSleeves, augmentStats;\\nlet options;\\n\\nconst argsSchema = [\\n    ['min-shock-recovery', 97], // Minimum shock recovery before attempting to train or do crime (Set to 100 to disable, 0 to recover fully)\\n    ['shock-recovery', 0.3], // Set to a number between 0 and 1 to devote that ratio of time to periodic shock recovery (until shock is at 0)\\n    ['crime', null], // If specified, sleeves will perform only this crime regardless of stats\\n    ['aug-budget', 10e9], // Spend up to this much of current cash on augs per tick (Default is high, because these are permanent for the rest of the BN)\\n    ['buy-cooldown', 60 * 1000], // Must wait this may milliseconds before buying more augs for a sleeve\\n    ['min-aug-batch', 20], // Must be able to afford at least this many augs before we pull the trigger (or fewer if buying all remaining augs)\\n];\\n\\nexport function autocomplete(data, _) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\nconst bladeburnerDesiredStats = ['agi', 'dex', 'str', 'def', 'faction_rep', 'company_rep', 'hacknet'];\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    options = ns.flags(argsSchema);\\n    ns.disableLog('getServerMoneyAvailable');\\n    ns.disableLog('asleep');\\n    // const title = 'sleeves';\\n    // let box = findBox(title);\\n    // if (!box) {\\n    //     box = createSidebarItem(title, '<div />', 'x8⛹')\\n    // }\\n    // elemFromHTML('');\\n    boxTailSingleton(ns, 'sleeves', '⛹x8', '150px');\\n    ns.clearLog();\\n    // Ensure the global state is reset (e.g. after entering a new bitnode)\\n    task = [];\\n    lastPurchaseTime = [];\\n    availableAugs = [];\\n    lastReassignTime = [];\\n    sleeveStatuses = [];\\n    workByFaction = {};\\n    augmentStats = getAllAugmentStats(ns);\\n    // Start the main loop\\n    while (true) {\\n        try { await mainLoop(ns); }\\n        catch (error) {\\n            ns.print(`WARNING: An error was caught (and suppressed) in the main loop: ${error.message}`, false, 'warning');\\n            ns.print(error.stack);\\n            ns.toast(`Sleeves.js Error: ${error.message}`, 'error', 5000);\\n        }\\n        await ns.asleep(interval);\\n    }\\n}\\n/** @param {NS} ns\\n * Main loop that gathers data, checks on all sleeves, and manages them. */\\nasync function mainLoop(ns) {\\n    try {\\n        const sleeveData = JSON.parse(ns.read('/tmp/sleeves_static.txt'));\\n        numSleeves = sleeveData.getNumSleeves;\\n    } catch { }\\n    // Update info\\n    let readMore = true;\\n    let portData = [];\\n    while (readMore) {\\n        let portRead = ns.readPort(sleevesPortNumber);\\n        if ('NULL PORT DATA' !== portRead) {\\n            portData.push(portRead);\\n        } else {\\n            readMore = false;\\n        }\\n    }\\n    // TODO assign sleeves to get reps from port data.\\n    numSleeves = numSleeves || 8;\\n    playerInfo = ns.getPlayer();\\n    let budget = playerInfo.money * options['aug-budget'];\\n\\n    // Update all sleeve stats and loop over all sleeves to do some individual checks and task assignments\\n    let sleeveStats = [];\\n    let sleeveInfo = [];\\n    for (let i = 0; i < numSleeves; i++) {\\n        sleeveStats.push(ns.sleeve.getSleeveStats(i));\\n        sleeveInfo.push(ns.sleeve.getInformation(i));\\n    }\\n    for (let i = 0; i < numSleeves; i++) {\\n        let sleeve = { ...sleeveStats[i], ...sleeveInfo[i] }; // For convenience, merge all sleeve stats/info into one object\\n        playerInfo = ns.getPlayer();\\n        // MANAGE SLEEVE AUGMENTATIONS\\n        if (sleeve.shock === 0) // No augs are available augs until shock is 0\\n            budget -= await manageSleeveAugs(ns, i, budget);\\n\\n        // ASSIGN SLEEVE TASK\\n        // These tasks should be immediately discontinued in certain conditions, even if it hasn't been 'minTaskWorkTime'\\n        if (task[i] === \\\"recover from shock\\\" && sleeve.shock === 0 ||\\n            task[i] === \\\"synchronize\\\" && sleeve.sync === 100)\\n            lastReassignTime[i] = 0;\\n        // Otherwise, don't change tasks if we've changed tasks recently (avoids e.g. disrupting long crimes too frequently)\\n        if (Date.now() - (lastReassignTime[i] || 0) < minTaskWorkTime) continue;\\n\\n        // Decide what we think the sleeve should be doing for the next little while\\n        let [designatedTask, command, args, statusUpdate] = await pickSleeveTask(ns, i, sleeve);\\n\\n        // Start the clock, this sleeve should stick to this task for minTaskWorkTime\\n        lastReassignTime[i] = Date.now();\\n        // Set the sleeve's new task if it's not the same as what they're already doing.\\n        if (task[i] !== designatedTask) {\\n            await setSleeveTask(ns, i, designatedTask, command, args);\\n            sleeveStatuses[i] = statusUpdate;\\n        }\\n    }\\n\\n    ns.clearLog();\\n    for (let i = 0; i < sleeveStatuses.length; i++) {\\n        ns.print(`${i % numSleeves}- ${sleeveStatuses[i]}`);\\n    }\\n}\\nconst excludedAugs = ['QLink', 'Hydroflame Left Arm'];\\n\\n/** @param {NS} ns\\n * @param i\\n * @param budget\\n * Purchases augmentations for sleeves after corp and blade simulcrum owned */\\nasync function manageSleeveAugs(ns, i, budget) {\\n    if (!hasBladesSimulacrum(ns) || !playerInfo.hasCorporation) {\\n        return 0;\\n    }\\n    availableAugs[i] = ns.sleeve.getSleevePurchasableAugs(i).filter(a => !excludedAugs.includes(a.name)).sort((a, b) => a.cost - b.cost);\\n    // filter augs base on desired stats;\\n    availableAugs[i] = availableAugs[i].filter(a => i === 0 ? true : bladeburnerDesiredStats.find((stat) => hasStat(stat, augmentStats[a.name])));\\n    const cooldownLeft = Math.max(0, options['buy-cooldown'] - (Date.now() - (lastPurchaseTime[i] || 0)));\\n    const [batchCount, batchCost] = availableAugs[i].reduce(([n, c], aug) => c + aug.cost <= budget ? [n + 1, c + aug.cost] : [n, c], [0, 0]);\\n    const purchaseUpdate = `${batchCount.toFixed(0).padStart(2)}/${availableAugs[i].length.toFixed(0).padEnd(2)} augs ` +\\n        `${ns.nFormat(batchCost, '$0.0a')} of ${ns.nFormat(availableAugs[i].reduce((t, aug) => t + aug.cost, 0), '$0.0a')} in ${ns.tFormat(cooldownLeft)}`;\\n    sleeveStatuses[numSleeves + i] = purchaseUpdate;\\n    if (availableAugs[i].length === 0) return 0;\\n    if (cooldownLeft === 0 && batchCount > 0 && ((batchCount >= availableAugs[i].length - 1) || batchCount >= options['min-aug-batch'])) { // Don't require the last aug it's so much more expensive\\n        let strAction = `Purchase ${batchCount} augmentations for sleeve ${i} at total cost of ${ns.nFormat(batchCost, '0.0.a')}`;\\n        let toPurchase = availableAugs[i].splice(0, batchCount);\\n        if ((batchCost + 5e9) > playerInfo.money) {\\n            return 0;\\n        }\\n        if (await [i, ...toPurchase.map(a => a.name)].slice(1).reduce((s, aug) => s && ns.sleeve.purchaseSleeveAug(i, aug), true)) {\\n            ns.toast(`SUCCESS: ${strAction}`, 'success', 30000);\\n        } else ns.toast(`ERROR: Failed to ${strAction}`, 'error', 30000);\\n        lastPurchaseTime[i] = Date.now();\\n        return batchCost; // Even if we think we failed, return the predicted cost so if the purchase did go through, we don't end up over-budget\\n    }\\n    return 0;\\n}\\nlet sleeveFactionWork = [];\\n/** @param {NS} ns\\n * @param i\\n * @param sleeve\\n * Picks the best task for a sleeve, and returns the information to assign and give status updates for that task. */\\nasync function pickSleeveTask(ns, i, sleeve) {\\n    // Must synchronize first iif you haven't maxed memory on every sleeve.\\n    if (sleeve.sync < 100) {\\n        sleeveFactionWork[i] = '';\\n        return [\\\"synchronize\\\", ns.sleeve.setToSynchronize, [i], `syncing... ${sleeve.sync.toFixed(2)}%`];\\n    }\\n    // must crime till gangs can be unlocked\\n    if (ns.heart.break() > -54000) {\\n        let crime = getBestCrime(ns, sleeve, true);\\n        sleeveFactionWork[i] = '';\\n        return [`commit ${crime.name} `, ns.sleeve.setToCommitCrime, [i, crime.name],\\n            /*   */ `committing ${crime.name} with rate ${(crime.rate).toFixed(2)}`];\\n    }\\n    // Opt to do shock recovery if above the --min-shock-recovery threshold, or if above 0 shock, with a probability of --shock-recovery\\n    if (sleeve.shock > options['min-shock-recovery'] || sleeve.shock > 0 && options['shock-recovery'] > 0 && Math.random() < options['shock-recovery']) {\\n        sleeveFactionWork[i] = '';\\n        return [\\\"recover from shock\\\", ns.sleeve.setToShockRecovery, [i], `recovering from shock... ${sleeve.shock.toFixed(2)}%`];\\n    }\\n    // If player is currently working for faction or company rep, sleeves 0 can help him out (Note: Only one sleeve can work for a faction)\\n    if (i === 0 && playerInfo.isWorking && playerInfo.workType === \\\"Working for Faction\\\") {\\n        // TODO: We should be able to borrow logic from work-for-factions.js to have more sleeves work for useful factions / companies\\n        // We'll cycle through work types until we find one that is supported. TODO: Auto-determine the most productive faction work to do.\\n        const faction = playerInfo.currentWorkFactionName;\\n        const work = factionsWork[faction][0];\\n        sleeveFactionWork[i] = faction;\\n        return [`work for faction '${faction}' (${work})`, ns.sleeve.setToFactionWork, [i, faction, work],\\n            /*   */ `helping earn rep with faction ${faction} by doing ${work}.`];\\n    }\\n    if (i === 0 && playerInfo.isWorking && playerInfo.workType === \\\"Working for Company\\\") { // If player is currently working for a company rep, sleeves 0 shall help him out (only one sleeve can work for a company)\\n        sleeveFactionWork[i] = '';\\n        return [`work for company '${playerInfo.companyName}'`, ns.sleeve.setToCompanyWork, [i, playerInfo.companyName],\\n            /*   */ `helping earn rep with company ${playerInfo.companyName}.`];\\n    }\\n    if (ns.fileExists('/tmp/ingang.txt')) {\\n        const factionAugs = getAugsRemainingAtFaction(ns);\\n        const factionsWithAugs = Object.entries(factionAugs)\\n            .filter(([faction, augList]) =>\\n                augList.filter(aug => aug !== 'NeuroFlux Governor').length > 0 // work for factions with augs other than NFG\\n                && playerInfo.factions.includes(faction) // player in faction\\n                && faction !== 'Bladeburners' // can't work for Bladeburners\\n                && faction !== 'Slum Snakes'\\n                && !sleeveFactionWork.includes(faction)); // can't work for Slumsnakes (in gang)\\n        //TODO check faction rep is <= max aug cost\\n        //TODO track factions and companies being worked for instead of using sleeve index\\n        let factionAndAugs = factionsWithAugs[0]; // just use sleeve index to pick a faction to work for\\n        if (factionAndAugs && factionAndAugs[0]) {\\n            let faction = factionAndAugs[0];\\n            const work = factionsWork[faction][0];\\n            sleeveFactionWork[i] = faction;\\n            return [`work for faction '${faction}' (${work})`, ns.sleeve.setToFactionWork, [i, faction, work],\\n                /*   */ `doing ${work} at ${faction}.`];\\n        }\\n    }\\n    // Finally, do crime for Karma. Homicide has the rate gain, if we can manage a decent success rate.\\n    let crime = getBestCrime(ns, sleeve, ns.heart.break() > -54000);\\n    return [`commit ${crime.name} `, ns.sleeve.setToCommitCrime, [i, crime.name],\\n        /*   */ `committing ${crime.name} with rate ${ns.nFormat(crime.rate, '0.0a')}`];\\n}\\n\\n/** @param {NS} ns\\n * @param i\\n * @param designatedTask\\n * @param command\\n * @param args\\n * Sets a sleeve to its designated task, with some extra error handling logic for working for factions. */\\nasync function setSleeveTask(ns, i, designatedTask, command, args) {\\n    let strAction = `Set sleeve ${i} to ${designatedTask} `;\\n    if (await command(...args)) {\\n        task[i] = designatedTask;\\n        //ns.print(`SUCCESS: ${strAction} `);\\n        return true;\\n    }\\n    // If assigning the task failed...\\n    lastReassignTime[i] = 0;\\n    // If working for a faction, it's possible he current work isn't supported, so try the next one.\\n    if (designatedTask.startsWith('work for faction')) {\\n        ns.toast(`WARN: Failed to ${strAction} - work type may not be supported.`, 'warning', 10000);\\n        workByFaction[playerInfo.currentWorkFactionName] = (workByFaction[playerInfo.currentWorkFactionName] || 0) + 1;\\n    } else\\n        ns.toast(`ERROR: Failed to ${strAction} `, 'error', 30000);\\n    return false;\\n}\\n\\n/** @param {NS} ns\\n * @param sleeve\\n * @param crimeStats\\n * Calculate the chance a sleeve has of committing crime successfully. */\\nfunction calculateSleeveCrimeChance(ns, sleeve, crimeStats) {\\n    let chance =\\n        (crimeStats.hacking_success_weight || 0) * sleeve.hacking +\\n        (crimeStats.strength_success_weight || 0) * sleeve.strength +\\n        (crimeStats.defense_success_weight || 0) * sleeve.defense +\\n        (crimeStats.dexterity_success_weight || 0) * sleeve.dexterity +\\n        (crimeStats.agility_success_weight || 0) * sleeve.agility +\\n        (crimeStats.charisma_success_weight || 0) * sleeve.charisma;\\n    chance /= 975;\\n    chance /= crimeStats.difficulty;\\n    return Math.min(chance, 1);\\n}\\n\\nconst recommendedCrimes = [\\\"shoplift\\\", \\\"rob store\\\", \\\"mug\\\", \\\"traffick arms\\\", \\\"homicide\\\", \\\"grand theft auto\\\", \\\"kidnap\\\", \\\"assassinate\\\", \\\"heist\\\"]\\nfunction getBestCrime(ns, sleeve, getKarma) {\\n    const crimeMoney = tryGetBitNodeMultipliers(ns).CrimeMoney;\\n    let bestCrimeStats;\\n    let crimeRate = -1;\\n    let crimeStats;\\n    for (const crime of recommendedCrimes) {\\n        crimeStats = ns.getCrimeStats(crime);\\n        crimeStats.name = crime;\\n        crimeStats.chance = calculateSleeveCrimeChance(ns, sleeve, crimeStats);\\n        crimeStats.rate = crimeStats.chance * (getKarma ? crimeStats.karma : crimeStats.money * crimeMoney) / crimeStats.time * 1000;\\n\\n        //ns.print(JSON.stringify(crimeStats));\\n        if (crimeStats.rate > crimeRate) {\\n            crimeRate = crimeStats.rate;\\n            bestCrimeStats = crimeStats;\\n            //  ns.print(`next crime ${bestCrimeStats.name} @ ${(getKarma ? bestCrimeStats.rate.toPrecision(2) : ns.nFormat(bestCrimeStats.rate, '0.0'))} ${(getKarma ? 'karma' : '$')}/s`);\\n        }\\n    }\\n    //ns.print(`next crime ${bestCrimeStats.name} @ ${(getKarma ? bestCrimeStats.rate.toPrecision(2) : ns.nFormat(bestCrimeStats.rate, '0.0'))} ${(getKarma ? 'karma' : '$')}/s`);\\n    return bestCrimeStats;\\n}\",\"filename\":\"sleeves.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"augments.js\",\"url\":\"blob:https://danielyxie.github.io/4a9ff53e-a7da-4fc5-ab1d-2b446914ce9b\",\"moduleSequenceNumber\":148245},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/659191de-1c2b-4c67-a49f-c7ae56279dde\",\"moduleSequenceNumber\":148233},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/d2065e61-6ed9-4b00-9d3a-2e3d40598735\",\"moduleSequenceNumber\":148233},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/fd974406-f437-40be-8520-dfbbbcd4ba5b\",\"moduleSequenceNumber\":148216},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/ef90ba67-bc79-49d1-8d2f-6d6e4e253b50\",\"moduleSequenceNumber\":148217},{\"filename\":\"sleeves.js\",\"url\":\"blob:https://danielyxie.github.io/9f96c7b8-e375-493d-a774-d9b2845d9902\",\"moduleSequenceNumber\":148347}],\"dependents\":[],\"ramUsage\":47.7,\"server\":\"home\",\"moduleSequenceNumber\":148347,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"sleeve.getSleeveStats\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.getInformation\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.getSleevePurchasableAugs\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.purchaseSleeveAug\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToSynchronize\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToCommitCrime\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToShockRecovery\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToFactionWork\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToCompanyWork\",\"cost\":4},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.getCrimeStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.gang.createGang('Slum Snakes');\\n    await ns.write('/tmp/ingang.txt', ns.gang.getGangInformation().faction, 'w');\\n\\tns.exec('gangum.js', 'home');\\n}\",\"filename\":\"startGang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"startGang.js\",\"url\":\"blob:https://danielyxie.github.io/0aaada9c-aa75-43ae-a7fe-8d0000838e9e\",\"moduleSequenceNumber\":228367}],\"dependents\":[],\"ramUsage\":5.9,\"server\":\"home\",\"moduleSequenceNumber\":148247,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.createGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { list_servers } from 'opened_servers.js';\\nimport { boxTailSingleton, ramUsage } from 'utils.js';\\nimport { calculateGrowThreads } from './growthFunctions.js';\\n\\nlet ns;\\nconst weaken_script = \\\"weaken.js\\\";\\nconst grow_script = \\\"grow.js\\\";\\nconst hack_script = \\\"hack.js\\\";\\nlet hack_scriptRam = 1.7;\\nlet grow_scriptRam, weaken_scriptRam = 1.75;\\nlet ServerGrowthRate = 1;\\nlet serversForExecution = [];\\nlet hackStatus = [];\\n/** @param {NS} pns **/\\nexport async function main(pns) {\\n\\tns = pns;\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('exec')\\n\\tns.clearLog();\\n\\tns.tail();\\n\\tboxTailSingleton(ns, 'mcp_batch', '🥾', '200px');\\n\\tweaken_scriptRam = ns.getScriptRam(weaken_script, \\\"home\\\");\\n\\tgrow_scriptRam = ns.getScriptRam(grow_script, \\\"home\\\");\\n\\thack_scriptRam = ns.getScriptRam(hack_script, \\\"home\\\");\\n\\t; ({ ServerGrowthRate } = JSON.parse(ns.read('/tmp/getBitNodeMultipliers.txt')))\\n\\tawait run();\\n}\\nlet hackPercent = .5;\\nlet bonusServers = 0;\\nfunction updateServerLists() {\\n\\tserversForExecution = ['home'].concat(list_servers(ns).filter(s => ns.hasRootAccess(s)));\\n\\tconst beforeHackStatusLength = hackStatus.length;\\n\\tconst serversToHack = list_servers(ns).filter(s => ns.hasRootAccess(s)\\n\\t\\t&& ns.getServerMaxMoney(s) > 0\\n\\t\\t&& ns.getServerRequiredHackingLevel(s) <= ns.getHackingLevel() / 2);\\n\\n\\thackStatus = [];\\n\\tconst skippedServer = []\\n\\tconst player = ns.getPlayer();\\n\\tfor (const server of serversToHack) {\\n\\t\\tconst s = ns.getServer(server);\\n\\t\\ts.hackDifficulty = s.minDifficulty;\\n\\t\\t// check that hacks will succeed. Could be redundant check\\n\\t\\tconst hackChance = ns.formulas.hacking.hackChance(s, player);\\n\\t\\tif (hackChance < .99) {\\n\\t\\t\\t//ns.print(`Hack chance to low ${s} ${(hackChance * 100).toFixed(2)}%`)\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (s.serverGrowth < 40) {\\n\\t\\t\\t//ns.print(`Growth is to low ${s} ${s.serverGrowth}%`)\\n\\t\\t\\tskippedServer.push({ server: server });\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\thackStatus.push({ server: server });\\n\\t}\\n\\tconst lowRamUse = ramUsage(ns) < .5;\\n\\tconst oldHackPercent = hackPercent;\\n\\tconst oldBonusServers = bonusServers;\\n\\tif (lowRamUse) {\\n\\t\\thackPercent = Math.min(hackPercent + .1, .95);\\n\\t\\tif (hackPercent === .95) {\\n\\t\\t\\tbonusServers = Math.min(bonusServers + 1, skippedServer.length);\\n\\t\\t\\thackStatus.push(...skippedServer.slice(0, bonusServers));\\n\\t\\t}\\n\\t} else {\\n\\t\\tbonusServers = Math.max(bonusServers - 1, 0);\\n\\t\\tif (bonusServers <= 0) hackPercent = Math.max(hackPercent - .1, .5);\\n\\t}\\n\\tif (oldHackPercent !== hackPercent || oldBonusServers !== bonusServers) ns.print(`BonusServers added ${bonusServers} Hack percent ${hackPercent}`);\\n\\t// after aug install just start hacking on n00dles fist\\n\\tif (hackStatus.length === 0) hackStatus.push({ server: 'n00dles' });\\n\\tif (beforeHackStatusLength < hackStatus.length) ns.print(`Servers to hack ${hackStatus.length} ${hackStatus.map(o => o.server).join(',')}`);\\n}\\nlet batches = [];\\nlet target = 'n00dles';\\nasync function run() {\\n\\tlet i = 0;\\n\\tupdateServerLists();\\n\\tlet updateAfter = Date.now().valueOf() + 30 * 1000;\\n\\twhile (true) {\\n\\n\\t\\t//todo prep logic\\n\\n\\t\\t// const currentSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\n\\t\\t// if (currentSec > 0) { // weaken prep\\n\\t\\t// \\tconst weaken = await runWeaken(target);\\n\\t\\t// \\treturn { server: target, promise: ns.asleep(weaken.time + 200), pid: { weaken: weaken.pid } };\\n\\t\\t// }\\n\\n\\t\\t// todo run this check the moment before the hack lands, kill the PID if check fails\\n\\t\\t// if (ns.getServerMoneyAvailable(target) / ns.getServerMaxMoney(target) < .9) {\\n\\t\\t// \\treturn 0; // don't hack if server is not max money\\n\\t\\t// }\\n\\n\\t\\tns.print('planBatchRam');\\n\\t\\tlet newBatchPlan = await planBatchRam(target);\\n\\t\\twhile (newBatchPlan && batches.length < 50) {\\n\\t\\t\\tbatches.push(newBatchPlan);\\n\\t\\t\\tnewBatchPlan = await planBatchRam(target);\\n\\t\\t\\t// await ns.sleep(1);\\n\\t\\t}\\n\\t\\tns.print('executeBatchParts');\\n\\t\\tfor (const batch of batches) {\\n\\t\\t\\tawait executeBatchParts(batch);\\n\\t\\t}\\n\\t\\t// remove completed batches\\n\\t\\tbatches = batches.filter(o => o.weakenHosts || o.hackHost || o.growHost);\\n\\n\\t\\t// if (!hackStatus[i].pid || (hackStatus[i].pid && !ns.isRunning(hackStatus[i].pid.weaken))) {\\n\\t\\t// \\tconst ret = await runHGW(hackStatus[i].server);\\n\\t\\t// \\thackStatus[i] = ret;\\n\\t\\t// }\\n\\t\\t// i = (i + 1) % hackStatus.length;\\n\\t\\tawait ns.sleep(50);\\n\\t\\tif (updateAfter < Date.now()) {\\n\\t\\t\\tupdateAfter = Date.now() + 30 * 1000;\\n\\t\\t\\tupdateServerLists();\\n\\t\\t\\ti = 0;\\n\\t\\t}\\n\\t\\treturn; //run once testing\\n\\t}\\n}\\nasync function executeBatchParts(batch) {\\n\\t/*\\n\\t.weakenHosts []\\n\\t.hackHost\\n\\t\\tthreads_available, host, threadsAvailMinusNeed, ramUsed\\n\\t.growHost\\n\\t */\\n\\n\\tconst server = ns.getServer(batch.target);\\n\\tserver.hackDifficulty = server.minDifficulty;\\n\\tserver.moneyAvailable = server.moneyMax;\\n\\n\\t// (hackStart - 200) < NO_START_BATCH < (weakenEnd + 200)\\n\\tconst canRun = (date) => {\\n\\t\\tconst hacksOnSameTarget = batches.filter(o => o.target === batch.target && o.weakenEnd > 0);\\n\\t\\tconst batchesDuringDate = hacksOnSameTarget.filter(o => (o.hackEnd - 200) < date && date < (o.weakenEnd + 200));\\n\\t\\treturn batchesDuringDate.length === 0;\\n\\t}\\n\\n\\tif (batch.growEnd && batch.growHost && canRun(Date.now())) {\\n\\t\\tconst growTime = ns.formulas.hacking.growTime(server, ns.getPlayer());\\n\\t\\tconst newGrowEnd = Date.now() + growTime;\\n\\t\\tif (Math.abs(batch.growEnd - newGrowEnd) <= 100) {\\n\\t\\t\\tconst pid = await runGrow(batch.target, batch.growHost);\\n\\t\\t\\tif (pid === 0) {\\n\\t\\t\\t\\tns.tprint('FAILED ' + 'to start grow');\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tbatch.growStart = Date.now();\\n\\t\\t\\t\\tbatch.growEnd = newGrowEnd;\\n\\t\\t\\t\\tdelete batch.growHost;\\n\\t\\t\\t}\\n\\t\\t} else if ((newGrowEnd - batch.growEnd) > 100) {\\n\\t\\t\\tns.tprint('GROW START WINDOW MISSED');\\n\\t\\t\\tremoveExclusion(batch.growHost.host, batch.growHost.ramUsed);\\n\\t\\t\\tdelete batch.growHost;\\n\\t\\t}\\n\\t}\\n\\tif (batch.hackEnd && batch.hackHost && canRun(Date.now())) {\\n\\t\\tconst hackTime = ns.formulas.hacking.hackTime(server, ns.getPlayer());\\n\\t\\tconst newHackEnd = Date.now() + hackTime;\\n\\t\\tif (Math.abs(batch.hackEnd - newHackEnd) <= 100) {\\n\\t\\t\\tconst pid = await runHack(batch.target, batch.hackHost);\\n\\t\\t\\tif (pid === 0) {\\n\\t\\t\\t\\tns.tprint('FAILED ' + 'to start hack');\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tbatch.hackStart = Date.now();\\n\\t\\t\\t\\tbatch.hackEnd = newHackEnd;\\n\\t\\t\\t\\tdelete batch.hackHost;\\n\\t\\t\\t}\\n\\t\\t} else if ((newHackEnd - batch.hackEnd) > 100) {\\n\\t\\t\\tns.tprint('HACK START WINDOW MISSED');\\n\\t\\t\\tremoveExclusion(batch.hackHost.host, batch.hackHost.ramUsed);\\n\\t\\t\\tdelete batch.hackHost;\\n\\t\\t}\\n\\t}\\n\\n\\tif (batch.weakenHosts && canRun(Date.now())) {\\n\\t\\tbatch.weakenStart = Date.now();\\n\\t\\tconst pids = await runWeaken(batch.target, batch.weakenHosts);\\n\\t\\tif (pids.filter(o => o === 0)) {\\n\\t\\t\\tns.tprint('FAILED ' + 'to start all weakens');\\n\\t\\t} else {\\n\\t\\t\\tbatch.weakenEnd = ns.formulas.hacking.weakenTime(server, ns.getPlayer());\\n\\t\\t\\tbatch.growEnd = batch.weakenEnd - 200;\\n\\t\\t\\tbatch.hackEnd = batch.growEnd - 200;\\n\\t\\t\\tdelete batch.weakenHosts;\\n\\t\\t}\\n\\t}\\n}\\n\\nasync function planBatchRam(target) {\\n\\tconst server = ns.getServer(target);\\n\\tserver.hackDifficulty = server.minDifficulty;\\n\\tserver.moneyAvailable = server.moneyMax;\\n\\tconst hackThreadsNeeded = () => {\\n\\t\\treturn Math.max(Math.floor(hackPercent / ns.formulas.hacking.hackPercent(server, ns.getPlayer())), 1);\\n\\t}\\n\\tconst growThreadsNeeded = (host, hackThreads) => {\\n\\t\\tconst hackAmount = ns.hackAnalyze(target) * hackThreads * ns.getServerMaxMoney(target);\\n\\t\\treturn Math.ceil(calculateGrowThreads(ns, target, hackAmount, getCores(host), { ServerGrowthRate }));\\n\\t}\\n\\tconst weakenThreadsNeeded = (host, hackThreads, growThreads) => {\\n\\t\\tlet security = ns.growthAnalyzeSecurity(growThreads);\\n\\t\\tsecurity += ns.hackAnalyzeSecurity(hackThreads);\\n\\t\\treturn Math.max(Math.ceil(security / ns.weakenAnalyze(1, getCores(host))), 1);\\n\\t}\\n\\n\\tconst batchPlan = getHostsAndThreads(hackThreadsNeeded, growThreadsNeeded, weakenThreadsNeeded);\\n\\tif (!batchPlan.weakenHosts || !batchPlan.hackHost || !batchPlan.growHost) {\\n\\t\\tns.print('No room to plan another batch');\\n\\t\\treturn;\\n\\t}\\n\\tbatchPlan.target = target;\\n\\treturn batchPlan;\\n}\\n\\nasync function runWeaken(target, hosts) {\\n\\tlet pids = [];\\n\\tfor (const host of hosts) {\\n\\t\\tpids.push(await ns.exec(weaken_script, host.host, host.threads_available, target, Math.random()));\\n\\t\\tremoveExclusion(host.host, host.ramUsed);\\n\\t}\\n\\treturn pids;\\n}\\n\\nasync function runGrow(target, host) {\\n\\tconst pid = await ns.exec(grow_script, host.host, host.threads_available, target, Math.random());\\n\\tremoveExclusion(host.host, host.ramUsed);\\n\\treturn pid;\\n}\\n\\nasync function runHack(target, host) {\\n\\tconst pid = await ns.exec(hack_script, host.host, host.threads_available, target, Math.random());\\n\\tremoveExclusion(host.host, host.ramUsed);\\n\\treturn pid;\\n}\\n\\nconst getCores = (host) => ns.getServer(host).cpuCores;\\n\\nfunction getHostsAndThreads(hackThreadFunction, growThreadFunction, weakThreadFunction) {\\n\\tlet hackHost;\\n\\tlet growHost;\\n\\tlet weakenHosts;\\n\\thackHost = getHostAndThreadsFunc(hack_scriptRam, hackThreadFunction);\\n\\tif (hackHost.host) addExclusion(hackHost.host, hackHost.ramUsed);\\n\\tgrowHost = getHostAndThreadsFunc(grow_scriptRam, (host) => growThreadFunction(host, hackHost.threads_available));\\n\\tif (growHost.host) addExclusion(growHost.host, growHost.ramUsed);\\n\\tweakenHosts = getHostAndThreadsFunc(weaken_scriptRam, (host) => weakThreadFunction(host, hackHost.threads_available, growHost.threads_available), true);\\n\\n\\tif (!hackHost.host || !growHost.host || weakenHosts.length <= 0) {\\n\\t\\tremoveExclusion(hackHost.host, hackHost.ramUsed);\\n\\t\\tremoveExclusion(growHost.host, growHost.ramUsed);\\n\\t} else {\\n\\t\\tfor (const weakenHost of weakenHosts) {\\n\\t\\t\\taddExclusion(weakenHost.host, weakenHost.ramUsed);\\n\\t\\t}\\n\\t}\\n\\treturn { hackHost, growHost, weakenHosts };\\n}\\n\\nfunction getHostAndThreadsFunc(scriptRam, threadFunction, hostSplit) {\\n\\tconst emptyRet = { threads_available: 0, host: null, threadsAvailMinusNeed: 0, ramUsed: 0 };\\n\\tconst hosts = serversForExecution.map((host) => {\\n\\t\\tlet maxRam = ns.getServerMaxRam(host);\\n\\t\\t// reserve some ram for other scripts\\n\\t\\tif (host === 'home') {\\n\\t\\t\\tmaxRam = Math.max(maxRam * .75, maxRam - 128);\\n\\t\\t}\\n\\t\\tconst threads_available = Math.floor((maxRam - ns.getServerUsedRam(host) - excludedHostRam(host)) / scriptRam);\\n\\t\\tlet threadsNeeded = threadFunction(host);\\n\\t\\tconst ramUsed = parseFloat((threadsNeeded * scriptRam).toFixed(3));\\n\\t\\tconst threadsAvailMinusNeed = threads_available - threadsNeeded;\\n\\t\\treturn { threads_available, host, threadsAvailMinusNeed, ramUsed };\\n\\t}).filter((hostO) => hostO.threads_available >= 1);\\n\\tif (hosts.length <= 0) return emptyRet;\\n\\thosts.sort((a, b) => a.threadsAvailMinusNeed - b.threadsAvailMinusNeed);\\n\\tif (hostSplit) {\\n\\t\\tconst threadsNeeded = threadFunction('n00dles');\\n\\t\\tconst serversWithRamFree = hosts.filter(o => o.threads_available > 0);\\n\\t\\tlet acc = 0;\\n\\t\\tlet hostsAcc = [];\\n\\t\\twhile (acc < threadsNeeded) {\\n\\t\\t\\tconst s = serversWithRamFree.shift();\\n\\t\\t\\tif (!s) {\\n\\t\\t\\t\\t// not enough servers with threads_available to fill need\\n\\t\\t\\t\\treturn [];\\n\\t\\t\\t}\\n\\t\\t\\tacc += s.threads_available;\\n\\t\\t\\thostsAcc.push(s);\\n\\t\\t}\\n\\t\\treturn hostsAcc;\\n\\t}\\n\\t// take the closet fit from front of the array or return empty\\n\\treturn hosts.filter(o => o.threadsAvailMinusNeed >= 0).shift() || emptyRet;\\n}\\n\\nconst exclusionMap = {};\\nfunction addExclusion(host, ram) {\\n\\texclusionMap[host] = exclusionMap[host] || 0;\\n\\texclusionMap[host] = Math.min(exclusionMap[host] + ram, ns.getServerMaxRam(host))\\n}\\nfunction removeExclusion(host, ram) {\\n\\texclusionMap[host] = exclusionMap[host] || 0;\\n\\texclusionMap[host] = Math.max(exclusionMap[host] - ram, 0);\\n}\\nfunction excludedHostRam(host) {\\n\\treturn exclusionMap[host] || 0;\\n}\",\"filename\":\"mcp_hgw_batch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"growthFunctions.js\",\"url\":\"blob:https://danielyxie.github.io/255fcb15-7586-4e1e-88ec-655c52e5634b\",\"moduleSequenceNumber\":376},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/b6dcb16e-52a4-4ca3-b088-2c93660fe00b\",\"moduleSequenceNumber\":368},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/a551c763-7f60-485d-ba83-4431efd2b4ff\",\"moduleSequenceNumber\":351},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/39567991-3497-4061-8487-27e5c7966afe\",\"moduleSequenceNumber\":352},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/111b106d-8613-4a15-a498-d7a2ac68d100\",\"moduleSequenceNumber\":351},{\"filename\":\"mcp_hgw_batch.js\",\"url\":\"blob:https://danielyxie.github.io/6ac6bcc4-644e-4947-be2a-9ccff2a9f914\",\"moduleSequenceNumber\":4946}],\"dependents\":[],\"ramUsage\":11.9,\"server\":\"home\",\"moduleSequenceNumber\":148248,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.bladeburner.joinBladeburnerDivision();\\n    ns.exec('bladeburner.js', 'home');\\n}\",\"filename\":\"joinBladeburners.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"joinBladeburners.js\",\"url\":\"blob:https://danielyxie.github.io/70299632-7035-474b-b9d7-216e9776a38e\",\"moduleSequenceNumber\":171769}],\"dependents\":[],\"ramUsage\":6.9,\"server\":\"home\",\"moduleSequenceNumber\":148249,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"bladeburner.joinBladeburnerDivision\",\"cost\":4},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { boxTailSingleton } from \\\"utils.js\\\"\\nimport { getOwnedAugmentationsStatic } from \\\"./augments\\\";\\nconst cityNames = [\\\"Sector-12\\\", \\\"Aevum\\\", \\\"Volhaven\\\", \\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\"];\\nconst antiChaosOperation = \\\"Stealth Retirement Operation\\\"; // Note: Faster and more effective than Diplomacy at reducing city chaos\\nconst simulacrumAugName = \\\"The Blade's Simulacrum\\\"; // This augmentation lets you do bladeburner actions while busy\\n\\n// In general, we will buy the skill upgrade with the next highest cost, but to tweak the priority of various skills,\\n// we use the following configuration to change their relative cost. Higher number means lower priority\\n// Note: Ideally we could emphasize Tracer \\\"early-game\\\" and Digital Observer \\\"late-game\\\", but this is too much of a pain to solve for\\nconst costAdjustments = {\\n    \\\"Reaper\\\": 1.2, // Combat boost. Early effect is paltry (because stats are so low), will get plenty of points late game\\n    \\\"Evasive Systems\\\": 1.2, // Dex/Agi boost. Mildly deprioritized for same reasoning as above.\\n    \\\"Overclock\\\": 0.8, // Faster ops faster skillups faster rank. Stamina becomes less of an issue as you get late into BB. Might run out of ops instead\\n    \\\"Cloak\\\": 1.5, // Cheap, and stealth ends up with plenty of boost, so we don't need to invest in Cloak as much.\\n    \\\"Hyperdrive\\\": 100, // Improves stats gained, but not Rank gained. Training limit is default 0\\n    \\\"Tracer\\\": 100, // Only boosts Contract success chance, which are relatively easy to begin with.\\n    \\\"Cyber's Edge\\\": 3, // Boosts stamina, more stam more regen, but contract counts can be more limiting than stamina\\n    \\\"Hands of Midas\\\": 100 // Improves money gain. It is assumed that Bladeburner will *not* be a main source of income\\n};\\n\\n// Some bladeburner info gathered at startup and cached\\nlet skillNames, generalActionNames, contractNames, operationNames, remainingBlackOpsNames, blackOpsRanks;\\nlet haveSimulacrum, lastBlackOpReady, lowStaminaTriggered, timesTrained, currentTaskEndTime, maxRankNeeded, lastAssignedTask;\\nlet player;\\nlet options;\\nconst argsSchema = [\\n    ['success-threshold', 0.90], // Attempt the best action whose minimum chance of success exceeds this threshold\\n    ['chaos-recovery-threshold', 50], // Prefer to do \\\"Stealth Retirement\\\" operations to reduce chaos when it reaches this number\\n    // lot of chaos seems to be a ok by the time we get out of control using stealth retirement manages it well\\n    ['max-chaos', 10000], // If chaos exceeds this amount in every city, we will reluctantly resort to diplomacy to reduce it.\\n    ['low-stamina-pct', 0.5], // Switch to no-stamina actions when we drop below this stamina percent\\n    ['high-stamina-pct', 0.6], // Switch back to stamina-consuming actions when we rise above this stamina percent\\n    ['training-limit', 0], // Don't bother training more than this many times, since Training is slow and earns no rank\\n    ['update-interval', 2000], // How often to refresh bladeburner status\\n    ['ignore-busy-status', false], // If set to true, we will attempt to do bladeburner tasks even if we are currently busy and don't have The Blade's Simulacrum\\n    ['allow-raiding-highest-pop-city', false], // Set to true, we will allow Raid to be used even in our highest-population city (disabled by default)\\n    ['reserved-action-count', 200], // Some operation types are \\\"reserved\\\" for chaos reduction / population estimate increase. Start by reserving this many, reduced automatically as we approach maxRankNeeded\\n    ['disable-spending-hashes', false], // Set to true to not spawn spend-hacknet-hashes.js to spend hashes on bladeburner\\n];\\nexport function autocomplete(data, _) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('asleep');\\n    options = ns.flags(argsSchema);\\n    player = ns.getPlayer();\\n    if (player.bitNodeN === 8)\\n        return ns.print(\\\"ERROR: Bladeburner is completely disabled in Bitnode 8 :`(\\\\nHappy stonking\\\", true, 'error');\\n    if (!player.inBladeburner) {\\n        return ns.print(\\\"ERROR: no in Bladeburner yet\\\");\\n    }\\n    boxTailSingleton(ns, 'Bladeburner', '🗡', '200px');\\n    ns.clearLog();\\n    // Gather one-time info such as contract and operation names\\n    await gatherBladeburnerInfo(ns);\\n    // Start the main loop which monitors stats and changes activities as needed\\n    while (true) {\\n        try { await mainLoop(ns); }\\n        catch (err) {\\n            ns.print(`WARNING: bladeburner.js Caught (and suppressed) an unexpected error in the main loop:\\\\n` +\\n                (typeof err === 'string' ? err : err.message || JSON.stringify(err)), false, 'warning');\\n        }\\n        const nextTaskComplete = currentTaskEndTime - Date.now();\\n        await ns.asleep(Math.min(options['update-interval'], nextTaskComplete > 0 ? nextTaskComplete : Number.MAX_VALUE));\\n    }\\n}\\n\\n/** @param {NS} ns\\n * Gather all one-time bladeburner info using ram-dodging scripts. */\\nasync function gatherBladeburnerInfo(ns) {\\n    skillNames = ns.bladeburner.getSkillNames();\\n    generalActionNames = ns.bladeburner.getGeneralActionNames();\\n    contractNames = ns.bladeburner.getContractNames().reverse(); // Reversed to put in order of highest rep to lowest\\n    operationNames = ns.bladeburner.getOperationNames().reverse(); // Reversed to put in order of highest rep to lowest\\n    // Blackops data is a bit special, each can be completed one time, they should be done in order\\n    const blackOpsNames = ns.bladeburner.getBlackOpNames();\\n    blackOpsRanks = {};\\n    const blackOpsToBeDone = {};\\n    for (let blackOpsName of blackOpsNames) {\\n        blackOpsRanks[blackOpsName] = ns.bladeburner.getBlackOpRank(blackOpsName);\\n        blackOpsToBeDone[blackOpsName] = ns.bladeburner.getActionCountRemaining(\\\"blackops\\\", blackOpsName);\\n    }\\n    remainingBlackOpsNames = blackOpsNames.filter(n => blackOpsToBeDone[n] === 1)\\n        .sort((b1, b2) => blackOpsRanks[b1] - blackOpsRanks[b2]);\\n    ns.print(`There are ${remainingBlackOpsNames.length} remaining BlackOps operations to complete in order:\\\\n` +\\n        remainingBlackOpsNames.map(n => `${n} (${blackOpsRanks[n]})`).join(\\\", \\\"));\\n    maxRankNeeded = blackOpsRanks[remainingBlackOpsNames[remainingBlackOpsNames.length - 1]];\\n    // Check if we have the aug that lets us do bladeburner while otherwise busy\\n    haveSimulacrum = getOwnedAugmentationsStatic(ns).includes(simulacrumAugName);\\n    // Initialize some flags that may change over time\\n    lastAssignedTask = null;\\n    lastBlackOpReady = false; // Flag will track whether we've notified the user that the last black-op is ready\\n    lowStaminaTriggered = false; // Flag will track whether we've previously switched to stamina recovery to reduce noise\\n    timesTrained = 0; // Count of how many times we've trained (capped at --training-limit)\\n    currentTaskEndTime = 0; // When set to a date, we will not assign new tasks until that date.\\n}\\n\\n// Helpers to determine the the dict keys with the lowest/highest value (returns an array [key, minValue] for destructuring)\\nconst getMinKeyValue = (dict, filteredKeys = null) => (filteredKeys || Object.keys(dict)).reduce(([k, min], key) =>\\n    dict[key] < min ? [key, dict[key]] : [k, min], [null, Number.MAX_VALUE]);\\nconst getMaxKeyValue = (dict, filteredKeys = null) => (filteredKeys || Object.keys(dict)).reduce(([k, max], key) =>\\n    dict[key] > max ? [key, dict[key]] : [k, max], [null, -Number.MAX_VALUE]);\\n\\n/** @param {NS} ns\\n * The main loop that decides what we should be doing in bladeburner. */\\nasync function mainLoop(ns) {\\n    // Get player's updated rank\\n    const rank = ns.bladeburner.getRank();\\n    // Spend any un-spent skill points\\n    await spendSkillPoints(ns);\\n    // See if we are able to do bladeburner work\\n    if (!(await canDoBladeburnerWork(ns))) return;\\n\\n    // NEXT STEP: Gather data needed to determine what and where to work\\n    // If any blackops have been completed, remove them from the list of remaining blackops\\n    const blackOpsToBeDone = {};\\n    const blackOpsNames = ns.bladeburner.getBlackOpNames();\\n    for (let blackOpsName of blackOpsNames) {\\n        blackOpsRanks[blackOpsName] = ns.bladeburner.getBlackOpRank(blackOpsName);\\n        blackOpsToBeDone[blackOpsName] = ns.bladeburner.getActionCountRemaining(\\\"blackops\\\", blackOpsName);\\n    }\\n    remainingBlackOpsNames = remainingBlackOpsNames.filter(n => blackOpsToBeDone[n] === 1);\\n\\n    // Gather the count of available contracts / operations\\n    const nextBlackOp = remainingBlackOpsNames[0];\\n    const contractCounts = {};\\n    for (let contractName of contractNames) {\\n        contractCounts[contractName] = ns.bladeburner.getActionCountRemaining(\\\"contract\\\", contractName);\\n    }\\n    const operationCounts = {};\\n    for (let operationName of operationNames) {\\n        operationCounts[operationName] = ns.bladeburner.getActionCountRemaining(\\\"operation\\\", operationName);\\n    }\\n    // Define a helper that gets the count for an action based only on the name (type is auto-determined)\\n    const getCount = actionName => contractNames.includes(actionName) ? contractCounts[actionName] :\\n        operationNames.includes(actionName) ? operationCounts[actionName] :\\n            generalActionNames.includes(actionName) ? Number.POSITIVE_INFINITY : remainingBlackOpsNames.includes(actionName) ? 1 : 0;\\n    // Create some quick-reference collections of action names that are limited in count and/or reserved for special purpose\\n    const limitedActions = [nextBlackOp].concat(operationNames).concat(contractNames);\\n    const populationActions = [\\\"Undercover Operation\\\", \\\"Investigation\\\", \\\"Tracking\\\"];\\n    const reservedActions = [\\\"Raid\\\", \\\"Stealth Retirement Operation\\\"].concat(populationActions\\n        // Only reserve these actions if their count is below the configured reserve amount, scaled down as we approach our final rank (stop reserving at 99% of max rank)\\n        .filter(a => getCount(a) <= (options['reserved-action-count'] * (1 - rank / (0.99 * maxRankNeeded)))));\\n    if (rank < blackOpsRanks[nextBlackOp]) reservedActions.push(nextBlackOp); // Remove blackop from \\\"available actions\\\" if we have insufficient rank.\\n    const unreservedActions = limitedActions.filter(o => !reservedActions.includes(o));\\n    //ns.print('Unreserved Action Counts: ' + unreservedActions.map(a => `${a}: ${getCount(a)}`).join(\\\", \\\")); // Debug log to see what unreserved actions remain\\n    //ns.print('Reserved Action Counts: ' + reservedActions.map(a => `${a}: ${getCount(a)}`).join(\\\", \\\")); // Debug log to see what unreserved actions remain\\n\\n    // NEXT STEP: Determine which city to work in\\n    // Get the population, communities, and chaos in each city\\n    const populationByCity = {};\\n    const communitiesByCity = {};\\n    const chaosByCity = {};\\n    for (let cityName of cityNames) {\\n        populationByCity[cityName] = ns.bladeburner.getCityEstimatedPopulation(cityName);\\n        communitiesByCity[cityName] = ns.bladeburner.getCityCommunities(cityName);\\n        chaosByCity[cityName] = ns.bladeburner.getCityChaos(cityName);\\n    }\\n    let goToCity, population, travelReason, goingRaiding = false;\\n\\n    // SPECIAL CASE: GO TO LOWEST-POPULATION CITY\\n    // If the only operations left to us are \\\"Raid\\\" (reduces population by a %, which, counter-intuitively, is bad for us),\\n    // thrash the city with the lowest population (but still having some communities to enable Raid).\\n    if (getCount(\\\"Raid\\\") > 0 && unreservedActions.every(c => getCount(c) === 0)) {\\n        const raidableCities = cityNames.filter(c => communitiesByCity[c] > 0); // Cities with at least one community\\n        // Only allow Raid if we would not be raiding our highest-population city (need to maintain at least one)\\n        const [highestPopCity, _] = getMaxKeyValue(populationByCity, cityNames);\\n        goingRaiding = raidableCities.length > 0 && (raidableCities[0] !== highestPopCity || options['allow-raiding-highest-pop-city']);\\n        if (goingRaiding) { // Select the raid-able city with the smallest population\\n            [goToCity, population] = getMinKeyValue(populationByCity, raidableCities);\\n            travelReason = `Lowest population (${population}) city with communities (${communitiesByCity[goToCity]}) to use up ${getCount(\\\"Raid\\\")} Raid operations`;\\n        }// else ns.print(`INFO: Cannot use up raid operations because there are ${raidableCities.length} cities with communities. ` +\\n        //    `(--allow-raiding-highest-pop-city is set to ${options['allow-raiding-highest-pop-city']})`);\\n    }\\n    // SPECIAL CASE: GO TO HIGHEST-CHAOS CITY\\n    if (!goToCity && unreservedActions.every(c => getCount(c) === 0)) {\\n        let [maxChaosCity, maxChaos] = getMaxKeyValue(chaosByCity, cityNames);\\n        // If all we have left is \\\"Stealth Retirement Operation\\\", switch to the city with the most chaos (if it's a decent amount), and use them up.\\n        if (getCount(\\\"Stealth Retirement Operation\\\") && maxChaos > options['chaos-recovery-threshold']) {\\n            goToCity = maxChaosCity;\\n            travelReason = `Highest-chaos (${maxChaos.toFixed(1)}) city to use up Stealth Retirement Operations`;\\n        } else if (maxChaos > options['max-chaos']) {\\n            goToCity = maxChaosCity;\\n            travelReason = `Nothing better to do, and city chaos ${maxChaos.toFixed(1)} is above --max-chaos threshold ${options['max-chaos']} - should use Diplomacy`;\\n        }\\n    } // Also, if we have nothing to do (even no Stealth Retirement), but chaos is above 'max-chaos' in some city, switch to it to do Diplomacy\\n\\n    // GENERAL CASE: GO TO HIGHEST-POPULATION CITY\\n    if (!goToCity) { // Otherwise, cities with higher populations give better operation chances\\n        // Try to narrow down the cities we wish to work in to the ones with no chaos penalties\\n        let acceptableCities = cityNames.filter(city => chaosByCity[city] <= options['chaos-recovery-threshold']);\\n        // Pick the city (within chaos thresholds) with the highest population to maximize success chance.\\n        // If no city is within thresholds, the largest population city will be picked regardless of chaos\\n        [goToCity, population] = getMaxKeyValue(populationByCity, acceptableCities.length > 0 ? acceptableCities : cityNames);\\n        travelReason = `Highest population (${population}) city, with chaos ${chaosByCity[goToCity].toFixed(1)}` +\\n            (acceptableCities.length === 0 ? ` (all cities above chaos threshold of ${options['chaos-recovery-threshold']})` : '');\\n    }\\n\\n    let currentCity = ns.bladeburner.getCity();\\n    // Change cities if we aren't blocked on our last task, and found a better city to work in\\n    if (currentCity !== goToCity && Date.now() > currentTaskEndTime && (await switchToCity(ns, goToCity, travelReason)))\\n        currentCity = goToCity;\\n\\n    // Gather the success chance of contracts (based on our current city)\\n    const blackOpsChance = rank < blackOpsRanks[nextBlackOp] ? [0, 0] : // Insufficient rank for blackops means chance is zero\\n        ns.bladeburner.getActionEstimatedSuccessChance(\\\"blackops\\\", nextBlackOp);\\n    const contractChances = {};\\n    for (let contractName of contractNames) {\\n        contractChances[contractName] = ns.bladeburner.getActionEstimatedSuccessChance(\\\"contract\\\", contractName);\\n    }\\n    const operationChances = {};\\n    for (let operationName of operationNames) {\\n        operationChances[operationName] = ns.bladeburner.getActionEstimatedSuccessChance(\\\"operation\\\", operationName);\\n    }\\n    // Define some helpers for determining min/max chance for each action\\n    const getChance = actionName => contractNames.includes(actionName) ? contractChances[actionName] :\\n        operationNames.includes(actionName) ? operationChances[actionName] :\\n            generalActionNames.includes(actionName) ? [1, 1] : nextBlackOp === actionName ? blackOpsChance : [0, 0];\\n    const minChance = actionName => getChance(actionName)[0];\\n    const maxChance = actionName => getChance(actionName)[1];\\n\\n    // NEXT STEP: Pick the action we should be working on.\\n    let bestActionName, reason;\\n    const actionSummaryString = (action) => `Success Chance: ${(100 * minChance(action)).toFixed(1)}%` +\\n        (maxChance(action) - minChance(action) < 0.001 ? '' : ` to ${(100 * maxChance(action)).toFixed(1)}%`) + `, Remaining: ${getCount(action)}`\\n\\n    // Trigger stamina recovery if we drop below our --low-stamina-pct configuration, and remain triggered until we've recovered to --high-stamina-pct\\n    const stamina = ns.bladeburner.getStamina(); // Returns [current, max];\\n    const staminaPct = stamina[0] / stamina[1];\\n    lowStaminaTriggered = staminaPct < options['low-stamina-pct'] || lowStaminaTriggered && staminaPct < options['high-stamina-pct'];\\n    // If we are suffering a stamina penalty, perform an action that consumes no stamina\\n    if (lowStaminaTriggered) {\\n        bestActionName = chaosByCity[currentCity] > options['max-chaos'] ? \\\"Diplomacy\\\" : \\\"Field Analysis\\\";\\n        reason = `Stamina is low: ${(100 * staminaPct).toFixed(1)}% < ${(100 * options['low-stamina-pct']).toFixed(1)}%`\\n    } // If current city chaos is greater than our threshold, keep it low with \\\"Stealth Retirement\\\" if odds are good\\n    else if (chaosByCity[currentCity] > options['chaos-recovery-threshold'] && getCount(antiChaosOperation) > 0 && minChance(antiChaosOperation) > 0.99) {\\n        bestActionName = antiChaosOperation;\\n        reason = `Chaos is high: ${chaosByCity[currentCity].toFixed(2)} > ${options['chaos-recovery-threshold']} (--chaos-recovery-threshold) ${actionSummaryString(bestActionName)}`;\\n    } // If current city chaos is very high, we should be very wary of the snowballing effects, and try to reduce it.\\n    else if (chaosByCity[currentCity] > options['max-chaos']) {\\n        bestActionName = getCount(antiChaosOperation) > 0 && minChance(antiChaosOperation) > 0.8 ? antiChaosOperation : \\\"Diplomacy\\\";\\n        reason = `Out of ${antiChaosOperation}s, and chaos ${chaosByCity[currentCity].toFixed(2)} is higher than --max-chaos ${options['max-chaos']}`;\\n    } // If we've previously determined we will be raiding the lowest-population city\\n    else if (goingRaiding && maxChance(\\\"Raid\\\") > options['success-threshold']) { // Special-case: Ignore min-chance. Population estimate turns bad as we decimate it, but doesn't seem to affect success.\\n        bestActionName = \\\"Raid\\\";\\n        reason = `Only remaining Operations. ${actionSummaryString(bestActionName)}`;\\n    } else { // Otherwise, pick the \\\"highest-tier\\\" action we can confidently perform, which should lead to the fastest rep-gain.\\n        // Note: Candidate actions will be maintained in order of highest-rep to lowest-rep earning, so we can pick the first after filtering.\\n        let candidateActions = limitedActions;\\n        // We should deal with population uncertainty if its causing some mission to be on the verge of our success threshold\\n        let populationUncertain = candidateActions.some(a => maxChance(a) > options['success-threshold'] && minChance(a) < options['success-threshold']);\\n        // If current population uncertainty is such that some actions have a maxChance of ~100%, but not a minChance of ~100%,\\n        //   focus on actions that improve the population estimate, otherwise, reserve these actions for later\\n        candidateActions = populationUncertain ? populationActions : unreservedActions;\\n        // Filter out candidates with no contract counts remaining\\n        candidateActions = candidateActions.filter(a => getCount(a) > 0);\\n        // SPECIAL CASE: If we can complete the last bladeburner operation, leave it to the user (they may not be ready to leave the BN).\\n        if (remainingBlackOpsNames.length === 1 && minChance(nextBlackOp) > options['success-threshold']) {\\n            if (!lastBlackOpReady) { // If this is our first time discovering this, alert the user\\n                const time = ns.getPlayer().playtimeSinceLastBitnode;\\n                ns.print(`SUCCESS: Bladeburner is ready to undertake the last BlackOp! (At ${ns.tFormat(time)})`, true, 'success');\\n                ns.alert(\\\"Bladeburner is ready to undertake the last BlackOp (ends the bitnode)\\\");\\n                lastBlackOpReady = true;\\n            }\\n            candidateActions = candidateActions.filter(a => a !== nextBlackOp);\\n        }\\n\\n        // ns.print('The following actions are available: ' + candidateActions); // Debug log to see what candidate actions are\\n        // Pick the first candidate action with a minimum chance of success that exceeds our --success-threshold\\n        bestActionName = candidateActions.filter(a => minChance(a) > options['success-threshold'])[0];\\n        if (!bestActionName) // If there were none, allow us to fall-back to an action with a minimum chance >50%, and maximum chance > threshold\\n            bestActionName = candidateActions.filter(a => minChance(a) > 0.5 && maxChance(a) > options['success-threshold'])[0];\\n        if (!bestActionName) // For actions that improve the population estimate, we're willing to risk the low min chance if it means avoiding Field Analysis\\n            bestActionName = candidateActions.filter(a => populationActions.includes(a) && maxChance(a) > options['success-threshold'])[0];\\n        if (bestActionName) // If we found something to do, log details about its success chance range\\n            reason = actionSummaryString(bestActionName);\\n\\n        // If there were no operations/contracts, resort to a \\\"general action\\\" which always have 100% chance, but take longer and gives less reward\\n        if (!bestActionName) {\\n            if (populationUncertain) { // Lower population uncertainty\\n                bestActionName = \\\"Field Analysis\\\";\\n                reason = `High population uncertainty in ${currentCity}`;\\n            } // If all (non-reserved) operation counts are 0, and chaos isn't too high, Incite Violence to get more work (logic above should subsequently reduce chaos)\\n            else if (unreservedActions.every(a => getCount(a) === 0) && cityNames.every(c => chaosByCity[c] < options['max-chaos'])) {\\n                bestActionName = \\\"Incite Violence\\\";\\n                let [maxChaosCity, maxChaos] = getMaxKeyValue(chaosByCity, cityNames);\\n                reason = `No work available, and max city chaos is ${maxChaos.toFixed(1)} in ${maxChaosCity}, ` +\\n                    `which is less than --max-chaos threshold ${options['max-chaos']}`;\\n            } // Otherwise, consider training\\n            else if (unreservedActions.some(a => maxChance(a) < options['success-threshold']) && // Only if we aren't at 100% chance for everything\\n                staminaPct > options['high-stamina-pct'] && timesTrained < options['training-limit']) { // Only if we have plenty of stamina and have barely trained\\n                timesTrained += options['update-interval'] / 30000; // Take into account the training time (30 seconds) vs how often this code is called\\n                bestActionName = \\\"Training\\\";\\n                reason = `Nothing better to do, times trained (${timesTrained.toFixed(0)}) < --training-limit (${options['training-limit']}), and ` +\\n                    `actions are below success threshold: ` + unreservedActions.filter(a => maxChance(a) < options['success-threshold'])\\n                        .map(a => `${a} (${(100 * maxChance(a)).toFixed(1)}%)`).join(\\\", \\\");\\n            } else { // Otherwise, Field Analysis\\n                bestActionName = \\\"Field Analysis\\\"; // Gives a little rank, and improves population estimate. Best we can do when there's nothing else.\\n                reason = `Nothing better to do`;\\n            }\\n        }\\n        // NOTE: We never \\\"Recruit\\\". Community consensus is that team mates die too readily, and have minimal impact on success.\\n        // NOTE: We don't use the \\\"Hyperbolic Regeneration Chamber\\\". We are cautious enough that we should never need healing.\\n    }\\n\\n    // Detect our current action (API returns an object like { \\\"type\\\":\\\"Operation\\\", \\\"name\\\":\\\"Investigation\\\" })\\n    const currentAction = ns.bladeburner.getCurrentAction();\\n    // Special case: If the user has manually kicked off the last BlackOps, don't interrupt it, let it be our last task\\n    if (currentAction?.name === remainingBlackOpsNames[remainingBlackOpsNames.length - 1]) {\\n        lastAssignedTask = currentAction;\\n        bestActionName = currentAction.name;\\n    }\\n    // Warn the user if it looks like a task was interrupted by something else (user activity or bladeburner automation). Ignore if our last assigned task has run out of actions.\\n    if (lastAssignedTask && lastAssignedTask !== currentAction?.name && getCount(lastAssignedTask) > 0) {\\n        ns.print(`WARNING: The last task this script assigned was \\\"${lastAssignedTask}\\\", but you're now doing \\\"${currentAction?.name || '(nothing)'}\\\". ` +\\n            `Have you been using Bladeburner Automation? If so, try typing \\\"automate dis\\\" in the Bladeburner Console.`, false, 'warning');\\n    } else if (currentAction?.name) {\\n        const currentDuration = ns.bladeburner.getActionTime(currentAction.type, currentAction.name);\\n        if (!lastAssignedTask) { // Leave a log acknowledging if we just started up and there was an activity already underway.\\n            ns.print(`INFO: At startup, Bladeburner was already doing \\\"${currentAction?.name}\\\", ` +\\n                (bestActionName !== currentAction.name ? `but we would prefer to do \\\"${bestActionName}\\\", so we will be switching.` :\\n                    `which is what we were planning to do, so we will leave the current task alone.`));\\n            lastAssignedTask = bestActionName;\\n        }\\n        // Normally, we don't switch tasks if our previously assigned task hasn't had time to complete once.\\n        // EXCEPTION: Early after a reset, this time is LONG, and in a few seconds it may be faster to just stop and restart it.\\n        if (currentDuration < currentTaskEndTime - Date.now()) {\\n            ns.print(`INFO: ${bestActionName === currentAction.name ? 'Restarting' : 'Cancelling'} action \\\"${currentAction.name}\\\" because its new duration ` +\\n                `is less than the time remaining (${ns.tFormat(currentDuration)} < ${ns.tFormat(currentTaskEndTime - Date.now())})`);\\n        } else if (Date.now() < currentTaskEndTime || bestActionName === currentAction.name) return;\\n    } // Otherwise prior action was stopped or ended and no count remain, so we should start a new one regardless of expected currentTaskEndTime\\n\\n    // Change actions if we're not currently doing the desired action\\n    const bestActionType = nextBlackOp === bestActionName ? \\\"Black Op\\\" : contractNames.includes(bestActionName) ? \\\"Contract\\\" :\\n        operationNames.includes(bestActionName) ? \\\"Operation\\\" : \\\"General Action\\\";\\n    const success = ns.bladeburner.startAction(bestActionType, bestActionName);\\n    const expectedDuration = ns.bladeburner.getActionTime(bestActionType, bestActionName);\\n    const successMsg = `INFO: Switched to Bladeburner ${bestActionType} \\\"${bestActionName}\\\" (${reason}). ETA: ${ns.tFormat(expectedDuration)}`;\\n    ns.print((success ? successMsg :\\n        `ERROR: Failed to switch to Bladeburner ${bestActionType} \\\"${bestActionName}\\\" (Count: ${getCount(bestActionName)}, ` +\\n        `ETA: ${ns.tFormat(expectedDuration)}, Details: ${reason})`),\\n        !success);\\n    if (success) ns.toast(successMsg, 'info', 10000);\\n    // Ensure we perform this new action at least once before interrupting it\\n    lastAssignedTask = bestActionName;\\n    currentTaskEndTime = !success ? 0 : Date.now() + expectedDuration + 10; // Pad this a little to ensure we don't interrupt it.\\n}\\n\\n/** @param {NS} ns\\n * @param city\\n * @param reason\\n * Helper to switch cities. */\\nasync function switchToCity(ns, city, reason) {\\n    const success = ns.bladeburner.switchCity(city);\\n    ns.print((success ? 'INFO: Switched' : 'ERROR: Failed to switch') + ` to Bladeburner city \\\"${city}\\\" (${reason})`,\\n        !success);\\n    return success;\\n}\\n\\n/** @param {NS} ns\\n * Decides how to spend skill points. */\\nasync function spendSkillPoints(ns) {\\n    while (true) { // Loop until we determine there's nothing left to spend skill points on\\n        const unspent = ns.bladeburner.getSkillPoints();\\n        if (unspent === 0) return;\\n        const skillLevels = {};\\n        const skillCosts = {};\\n        for (let skillName of skillNames) {\\n            skillLevels[skillName] = ns.bladeburner.getSkillLevel(skillName);\\n            skillCosts[skillName] = ns.bladeburner.getSkillUpgradeCost(skillName);\\n        }\\n        // Find the next lowest skill cost\\n        let skillToUpgrade = '';\\n        let minPerceivedCost = Number.MAX_SAFE_INTEGER;\\n        for (const skillName of skillNames) {\\n            let perceivedCost = skillCosts[skillName] * (costAdjustments[skillName] || 1);\\n            // Bitburner bug workaround: Overclock is capped at lvl 90, but the cost does not return e.g. Infinity\\n            if (skillName === \\\"Overclock\\\" && skillLevels[skillName] === 90) perceivedCost = Number.POSITIVE_INFINITY;\\n            if (perceivedCost < minPerceivedCost)\\n                [skillToUpgrade, minPerceivedCost] = [skillName, perceivedCost];\\n        }\\n        // If the perceived or actual cost of the next best upgrade is too high, save our remaining points for later\\n        if (minPerceivedCost > unspent || skillCosts[skillToUpgrade] > unspent) return;\\n        // Otherwise, purchase the upgrade\\n        if (skillToUpgrade && ns.bladeburner.upgradeSkill(skillToUpgrade)) {\\n            const msg = `SUCCESS: Spent ${skillCosts[skillToUpgrade]} to upgrade '${skillToUpgrade}' to ${skillLevels[skillToUpgrade] + 1}`;\\n            ns.print(msg);\\n            ns.toast(msg, 'success', 30000);\\n        } else\\n            ns.print(`WARNING: Something went wrong while trying to upgrade Bladeburner skill ${skillToUpgrade}. ` +\\n                `Currently have ${unspent} SP, upgrade should cost ${skillCosts[skillToUpgrade]} SP.`, false, 'warning');\\n        await ns.asleep(10);\\n    }\\n}\\n\\n\\n/** @param {NS} ns\\n * Helper to see if we are able to do bladeburner work */\\nasync function canDoBladeburnerWork(ns) {\\n    if (options['ignore-busy-status'] || haveSimulacrum) return true;\\n    if (ns.heart.break() > -54000) return false; //unlock gang first\\n    // Check if the player is busy doing something else\\n    if (!ns.isBusy()) return true;\\n    ns.print(`WARNING: Cannot perform Bladeburner actions because the player is busy ` +\\n        `and hasn't installed the augmentation \\\"${simulacrumAugName}\\\"...`, false, 'warning');\\n    return false;\\n}\",\"filename\":\"bladeburner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"augments.js\",\"url\":\"blob:https://danielyxie.github.io/389fdac4-f90e-4c4e-8a8e-314bc99ca124\",\"moduleSequenceNumber\":148245},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/218d1ebe-bf41-4950-9432-3a636bbc918b\",\"moduleSequenceNumber\":148233},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/ddc741fe-99f0-44bc-a37b-70d1e0c7a8a5\",\"moduleSequenceNumber\":148216},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/af520b58-c5d8-45a2-b526-9da5775f51c3\",\"moduleSequenceNumber\":148217},{\"filename\":\"bladeburner.js\",\"url\":\"blob:https://danielyxie.github.io/1fe4838e-be28-421c-a234-15b4f31983d9\",\"moduleSequenceNumber\":148348}],\"dependents\":[],\"ramUsage\":68.1,\"server\":\"home\",\"moduleSequenceNumber\":148348,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"bladeburner.getSkillNames\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"bladeburner.getGeneralActionNames\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"bladeburner.getContractNames\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"bladeburner.getOperationNames\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"bladeburner.getBlackOpNames\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"bladeburner.getBlackOpRank\",\"cost\":2},{\"type\":\"fn\",\"name\":\"bladeburner.getActionCountRemaining\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getRank\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getCityEstimatedPopulation\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getCityCommunities\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getCityChaos\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getCity\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getActionEstimatedSuccessChance\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getStamina\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getCurrentAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"bladeburner.getActionTime\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.startAction\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.switchCity\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getSkillPoints\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getSkillLevel\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getSkillUpgradeCost\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.upgradeSkill\",\"cost\":4},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { boxTailSingleton, copyHackingFiles, tryGetBitNodeMultipliers } from \\\"utils.js\\\"\\nlet haveHacknetServers = true; // Cached flag after detecting whether we do (or don't) have hacknet servers\\nconst argsSchema = [\\n    ['max-payoff-time-second', 3600], // Controls how far to upgrade hacknet. Can be a number of seconds, or an expression of minutes/hours (e.g. '123m', '4h')\\n    ['continuous', true], // Set to true to run continuously, otherwise, it runs once\\n    ['interval', 10000], // Rate at which the program purchases upgrades when running continuously\\n    ['max-spend', Number.MAX_VALUE], // The maximum amount of money to spend on upgrades\\n    ['toast', true], // Set to true to toast purchases\\n];\\n\\nexport function autocomplete(data, _) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const options = ns.flags(argsSchema);\\n    const continuous = options.continuous;\\n    const interval = options.interval;\\n    let maxSpend = options[\\\"max-spend\\\"];\\n    const hacknetMoney = tryGetBitNodeMultipliers(ns).HacknetNodeMoney\\n    let maxPayoffTime = options['max-payoff-time-second'] * hacknetMoney;\\n    ns.disableLog('sleep');\\n    ns.disableLog('getServerUsedRam');\\n    ns.disableLog('getServerMoneyAvailable');\\n    boxTailSingleton(ns, 'hacknet', '🖳', '100px');\\n    ns.clearLog();\\n    log(ns, `Starting hacknet-upgrade-manager with purchase payoff time limit of ${ns.tFormat(maxPayoffTime * 1000)} and ` +\\n        (maxSpend === Number.MAX_VALUE ? 'no spending limit' : `a spend limit of ${ns.nFormat(maxSpend, \\\"0.0a\\\")}`) +\\n        `. Current fleet: ${ns.hacknet.numNodes()} nodes...`);\\n    do {\\n        const moneySpent = await upgradeHacknet(ns, maxSpend, maxPayoffTime, options);\\n        // Using this method, we cannot know for sure that we don't have hacknet servers until we have purchased one\\n        if (haveHacknetServers && ns.hacknet.numNodes() > 0 && ns.hacknet.hashCapacity() === 0)\\n            haveHacknetServers = false;\\n        if (maxSpend && moneySpent === undefined) {\\n            log(ns, `Spending limit reached. Breaking...`);\\n            break; // Hack, but we return a non-number (false) when we've bought all we can for the current config\\n        }\\n        maxSpend -= moneySpent;\\n        if (continuous) await ns.sleep(interval);\\n    } while (continuous);\\n}\\n\\nlet lastUpgradeLog = \\\"\\\";\\nfunction log(ns, logMessage) { if (logMessage !== lastUpgradeLog) ns.print(lastUpgradeLog = logMessage); }\\n\\n// Will buy the most effective hacknet upgrade, so long as it will pay for itself in the next {payoffTimeSeconds} seconds.\\n/** @param {NS} ns *\\n * @param maxSpend\\n * @param maxPayoffTimeSeconds\\n * @param options\\n */\\nexport async function upgradeHacknet(ns, maxSpend, maxPayoffTimeSeconds = 3600 /* 3600 sec == 1 hour */, options) {\\n    const currentHacknetMult = ns.getPlayer().hacknet_node_money_mult;\\n    // Get the lowest cache level, we do not consider upgrading the cache level of servers above this until all have the same cache level\\n    const minCacheLevel = [...Array(ns.hacknet.numNodes()).keys()].reduce((min, i) => Math.min(min, ns.hacknet.getNodeStats(i).cache), Number.MAX_VALUE);\\n    const upgrades = [{ name: \\\"none\\\", cost: 0 }, {\\n        name: \\\"level\\\", upgrade: ns.hacknet.upgradeLevel, cost: (i, l = 1) => ns.hacknet.getLevelUpgradeCost(i, l), nextValue: (nodeStats, l = 1) => nodeStats.level + l,\\n        addedProduction: (nodeStats, l = 1) => ns.formulas.hacknetServers.hashGainRate(nodeStats.level + l, 0, nodeStats.ram, nodeStats.cores, currentHacknetMult)\\n    }, {\\n        name: \\\"ram\\\", upgrade: ns.hacknet.upgradeRam, cost: (i, l = 1) => ns.hacknet.getRamUpgradeCost(i, l), nextValue: (nodeStats, l = 1) => nodeStats.ram * 2 * l,\\n        addedProduction: (nodeStats, l = 1) => ns.formulas.hacknetServers.hashGainRate(nodeStats.level, 0, nodeStats.ram * 2 * l, nodeStats.cores, currentHacknetMult)\\n    }, {\\n        name: \\\"cores\\\", upgrade: ns.hacknet.upgradeCore, cost: (i, l = 1) => ns.hacknet.getCoreUpgradeCost(i, l), nextValue: (nodeStats, l = 1) => nodeStats.cores + l,\\n        addedProduction: (nodeStats, l = 1) => ns.formulas.hacknetServers.hashGainRate(nodeStats.level, 0, nodeStats.ram, nodeStats.cores + l, currentHacknetMult)\\n    }, {\\n        name: \\\"cache\\\", upgrade: ns.hacknet.upgradeCache, cost: (i, l = 1) => ns.hacknet.getCacheUpgradeCost(i, l), nextValue: (nodeStats, l = 1) => nodeStats.cache + l,\\n        addedProduction: (nodeStats, l = 1) => nodeStats.cache > minCacheLevel || !haveHacknetServers ? 0 : nodeStats.production * 0.01 / nodeStats.cache // Note: Does not actually give production, but it has \\\"worth\\\" to us so we can buy more things\\n    }];\\n    // Find the best upgrade we can make to an existing node\\n    let nodeToUpgrade = -1;\\n    let bestUpgrade;\\n    let bestUpgradePayoff = 0; // Hashes per second per dollar spent. Bigger is better.\\n    let cost = 0;\\n    let upgradedValue = 0;\\n    let worstNodeProduction = Number.MAX_VALUE; // Used to how productive a newly purchased node might be\\n    let worstNodeIndex;\\n    let worstNodeStats;\\n    for (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n        let nodeStats = ns.hacknet.getNodeStats(i);\\n        if (haveHacknetServers) { // When a hacknet server runs scripts, nodeStats.production lags behind what it should be for current ram usage. Get the \\\"raw\\\" rate\\n            nodeStats.production = ns.formulas.hacknetServers.hashGainRate(nodeStats.level, 0, nodeStats.ram, nodeStats.cores, currentHacknetMult);\\n        }\\n        worstNodeProduction = Math.min(worstNodeProduction, nodeStats.production);\\n        if (worstNodeProduction === nodeStats.production) {\\n            worstNodeIndex = i;\\n            worstNodeStats = nodeStats\\n        }\\n    }\\n    if (ns.hacknet.numNodes() !== 0) {\\n        // Upgrade the worst node because it'll be cheaper too\\n        for (let up = 1; up < upgrades.length; up++) {\\n            let currentUpgradeCost = upgrades[up].cost(worstNodeIndex);\\n            let payoff = upgrades[up].addedProduction(worstNodeStats) / currentUpgradeCost; // Production (Hashes per second) per dollar spent\\n            if (payoff > bestUpgradePayoff) {\\n                nodeToUpgrade = worstNodeIndex;\\n                bestUpgrade = upgrades[up];\\n                bestUpgradePayoff = payoff;\\n                cost = currentUpgradeCost;\\n                upgradedValue = upgrades[up].nextValue(worstNodeStats);\\n                // await upgradeLookAhead(ns, payoff, upgrades, up, worstNodeIndex, worstNodeStats);\\n            }\\n        }\\n    }\\n\\n    // Compare this to the cost of adding a new node. This is an imperfect science. We are paying to unlock the ability to buy all the same upgrades our\\n    // other nodes have - all of which have been deemed worthwhile. Not knowing the sum total that will have to be spent to reach that same production,\\n    // the \\\"most optimistic\\\" case is to treat \\\"price\\\" of all that production to be just the cost of this server, but this is **very** optimistic.\\n    // In practice, the cost of new hacknet nodes scales steeply enough that this should come close to being true (cost of server >> sum of cost of upgrades)\\n    let newNodeCost = ns.hacknet.getPurchaseNodeCost();\\n    let newNodePayoff = ns.hacknet.numNodes() === ns.hacknet.maxNumNodes() ? 0 : worstNodeProduction / newNodeCost;\\n    let shouldBuyNewNode = newNodePayoff > bestUpgradePayoff;\\n    if (newNodePayoff === 0 && bestUpgradePayoff === 0) {\\n        log(ns, `All upgrades have no value (is hashNet income disabled in this BN?)`);\\n        return 0; // As long as maxSpend doesn't change, we will never purchase another upgrade\\n    }\\n    // If specified, only buy upgrades that will pay for themselves in {payoffTimeSeconds}.\\n    const hashDollarValue = haveHacknetServers ? 2.5e5 : 1; // Dollar value of one hash-per-second (0.25m dollars per production).\\n    let payoffTimeSeconds = 1 / (hashDollarValue * (shouldBuyNewNode ? newNodePayoff : bestUpgradePayoff));\\n    if (shouldBuyNewNode) cost = newNodeCost;\\n\\n    // Prepare info about the next upgrade. Whether we end up purchasing or not, we will display this info.\\n    let strPurchase = (shouldBuyNewNode ? `a new node \\\"hacknet-node-${ns.hacknet.numNodes()}\\\"` :\\n        `hacknet-node-${nodeToUpgrade} ${bestUpgrade.name} ${upgradedValue}`) + ` for ${ns.nFormat(cost, '0.0a')}`;\\n    let strPayoff = `production ${((shouldBuyNewNode ? newNodePayoff : bestUpgradePayoff) * cost).toPrecision(3)} payoff time: ${ns.tFormat(1000 * payoffTimeSeconds)}`\\n    if (cost > maxSpend) {\\n        log(ns, `The next best purchase would be ${strPurchase}, but the cost exceeds the spending limit (${ns.nFormat(maxSpend, '0.0a')})`);\\n        return; // Shut-down. As long as maxSpend doesn't change, we will never purchase another upgrade\\n    }\\n    if (payoffTimeSeconds > maxPayoffTimeSeconds) {\\n        log(ns, `The next best purchase would be ${strPurchase}, but the ${strPayoff} is worse than the limit (${ns.tFormat(1000 * maxPayoffTimeSeconds)})`);\\n        return; // Shut-down. As long as maxPayoffTimeSeconds doesn't change, we will never purchase another upgrade\\n    }\\n    let success;\\n    if (shouldBuyNewNode) {\\n        const nodeIndex = ns.hacknet.purchaseNode();\\n        await copyHackingFiles(ns, { hostname: `hacknet-node-${nodeIndex}`, hasAdminRights: true });\\n        success = nodeIndex !== -1;\\n    } else success = bestUpgrade.upgrade(nodeToUpgrade, 1)\\n\\n    if (success && options.toast) ns.toast(`Purchased ${strPurchase}`, 'success');\\n    log(ns, success ? `Purchased ${strPurchase} with ${strPayoff}` : `Insufficient funds to purchase the next best upgrade: ${strPurchase}`);\\n    return success ? cost : 0;\\n}\\n\\n//todo figure out how to upgrade out of the local minumum\\nasync function upgradeLookAhead(ns, payoff, upgrades, up, worstNodeIndex, worstNodeStats) {\\n    let l = 1;\\n    let nextPayoff = 0;\\n    log(ns, `payoff ${(payoff).toPrecision(3)} payoff time: ${ns.tFormat(1000 * (1 / (2.5e5 * payoff)))}`);\\n    let previousPayoffs = payoff;\\n    while (payoff > nextPayoff) {\\n        l++;\\n        upgrades[up].cost(worstNodeIndex, l);\\n        // Iterate on the number of levels checking if increasing the levels actually lowers the payoff.\\n        // perhaps the payoff will be worth it with more levels especially true of new nodes.\\n        let totalpayoff = upgrades[up].addedProduction(worstNodeStats, l) / upgrades[up].cost(worstNodeIndex, l);\\n        nextPayoff = totalpayoff - previousPayoffs;\\n        previousPayoffs = totalpayoff;\\n        log(ns, `nextPayoff ${(nextPayoff).toPrecision(3)} payoff time: ${ns.tFormat(1000 * (1 / (2.5e5 * nextPayoff)))}`);\\n        await ns.sleep(20);\\n    }\\n}\",\"filename\":\"hacknet.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/f1f769a8-3ef9-4047-9d1e-a49396837cee\",\"moduleSequenceNumber\":148233},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/5afa908b-c83f-496e-9e67-ebfc90b6cf57\",\"moduleSequenceNumber\":148216},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/d94ff1bd-47bc-4123-87c7-807fa2ad3c2e\",\"moduleSequenceNumber\":148217},{\"filename\":\"hacknet.js\",\"url\":\"blob:https://danielyxie.github.io/dfe2c9bf-337d-4a30-82e2-bbb3907b35d7\",\"moduleSequenceNumber\":148342}],\"dependents\":[],\"ramUsage\":7.3,\"server\":\"home\",\"moduleSequenceNumber\":148342,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { boxTailSingleton } from \\\"utils.js\\\"\\n\\nconst sellForMoney = 'Sell for Money';\\n\\nconst argsSchema = [\\n\\t['liquidate', false], // Spend hashes as soon as we can afford any --spend-on purchase item. Otherwise, only spends when nearing capacity.\\n\\t['interval', 1000], // Rate at which the program runs and spends hashes\\n\\t['spend-on', [sellForMoney]],\\n\\t['spend-on-server', undefined],\\n\\t['no-capacity-upgrades', false], // By default, we will attempt to upgrade the hacknet node capacity if we cannot afford any purchases. Set to true to disable this.\\n\\t['reserve-buffer', 1], // To avoid wasting hashes, spend if would be within this many hashes of our max capacity on the next tick.\\n];\\n\\nconst basicSpendOptions = ['Sell for Money', 'Generate Coding Contract', 'Improve Studying', 'Improve Gym Training',\\n\\t'Sell for Corporation Funds', 'Exchange for Corporation Research', 'Exchange for Bladeburner Rank', 'Exchange for Bladeburner SP'];\\nconst parameterizedSpendOptions = ['Reduce Minimum Security', 'Increase Maximum Money'];\\nconst purchaseOptions = basicSpendOptions.concat(parameterizedSpendOptions);\\n\\nexport function autocomplete(data, args) {\\n\\tdata.flags(argsSchema);\\n\\tconst lastFlag = args.length > 1 ? args[args.length - 2] : null;\\n\\tif (lastFlag === \\\"--spend-on\\\") // Provide a couple auto-complete options to facilitate these arguments with spaces in them\\n\\t\\treturn purchaseOptions.map(f => f.replaceAll(\\\" \\\", \\\"_\\\"))\\n\\t\\t\\t.concat(purchaseOptions.map(f => `'${f}'`));\\n\\treturn [];\\n}\\n\\n/** @param {NS} ns\\n * Executes instructions to spend hacknet hashes continuously.\\n * NOTE: This script is written to support multiple concurrent instances running with different arguments. **/\\nexport async function main(ns) {\\n\\tconst options = ns.flags(argsSchema);\\n\\tconst liquidate = options.liquidate;\\n\\tconst interval = options.interval;\\n\\tconst toBuy = options['spend-on'].map(s => s.replaceAll(\\\"_\\\", \\\" \\\"));\\n\\tconst spendOnServer = options['spend-on-server']?.replaceAll(\\\"_\\\", \\\" \\\") ?? undefined;\\n\\t// Validate arguments\\n\\tif (toBuy.length === 0)\\n\\t\\treturn ns.print(\\\"ERROR: You must specify at least one thing to spend hashes on via the --spend-on argument.\\\");\\n\\tconst unrecognized = toBuy.filter(p => !purchaseOptions.includes(p));\\n\\tif (unrecognized.length > 0)\\n\\t\\treturn ns.print(`ERROR: One or more --spend-on arguments are not recognized: ${unrecognized.join(\\\", \\\")}`);\\n\\tns.disableLog('sleep');\\n\\tconst pinned = `Spending on '${toBuy}'. Will check in every ${ns.tFormat(interval)}. Reserving ${options['reserve-buffer']}`\\n\\tboxTailSingleton(ns, 'hacknet-spend', '🖳', '100px', `<div>${pinned}</div>`);\\n\\tns.clearLog();\\n\\tns.print(pinned);\\n\\tns.print(liquidate ? `--liquidate mode active! Will spend all hashes as soon as possible.` :\\n\\t\\t`Saving up hashes, only spending hashes when near capacity to avoid wasting them.`);\\n\\t// Function determines the current cheapest upgrade of all the upgrades we wish to keep purchasing\\n\\tconst getMinCost = spendActions => Math.min(...spendActions.map(p => ns.hacknet.hashCost(p)));\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(interval);\\n\\t\\ttry {\\n\\t\\t\\t// Compute the total income rate of all hacknet nodes. We have to spend faster than this when near capacity.\\n\\t\\t\\tconst nodes = ns.hacknet.numNodes();\\n\\t\\t\\tlet capacity = ns.hacknet.hashCapacity() || 0;\\n\\t\\t\\tif (nodes === 0) {\\n\\t\\t\\t\\tns.print('WARN: Hacknet is empty, no hashes to spend yet...');\\n\\t\\t\\t\\tcontinue; // Nothing to do until at least one node is purchased.\\n\\t\\t\\t} else if (capacity === 0)\\n\\t\\t\\t\\treturn ns.print('INFO: You have hacknet nodes, not hacknet servers, so spending hashes is not applicable.');\\n\\t\\t\\tlet globalProduction = Array.from({ length: nodes }, (_, i) => ns.hacknet.getNodeStats(i))\\n\\t\\t\\t\\t.reduce((total, node) => total + node.production, 0);\\n\\t\\t\\tconst reserve = globalProduction * interval / 1000 + options['reserve-buffer']; // If we are this far from our capacity, start spending\\n\\t\\t\\t// Define the spend hash loop as a local function, since we may need to call it twice.\\n\\t\\t\\tconst fnSpendHashes = async (purchases, spendAllHashes) => {\\n\\t\\t\\t\\tconst startingHashes = ns.hacknet.numHashes() || 0;\\n\\t\\t\\t\\tcapacity = ns.hacknet.hashCapacity() || 0;\\n\\t\\t\\t\\tlet success = true;\\n\\t\\t\\t\\twhile (success && ns.hacknet.numHashes() > (spendAllHashes ? getMinCost(purchases) : capacity - reserve)) {\\n\\t\\t\\t\\t\\tfor (const spendAction of purchases.filter(p => ns.hacknet.numHashes() >= ns.hacknet.hashCost(p))) {\\n\\t\\t\\t\\t\\t\\tconst cost = ns.hacknet.hashCost(spendAction);\\n\\t\\t\\t\\t\\t\\tif (cost > ns.hacknet.numHashes()) break;\\n\\t\\t\\t\\t\\t\\tsuccess = ns.hacknet.spendHashes(spendAction, parameterizedSpendOptions.includes(spendAction) ? spendOnServer : undefined);\\n\\t\\t\\t\\t\\t\\tif (!success) // Minor warning, possible if there are multiple versions of this script running, one beats the other two the punch.\\n\\t\\t\\t\\t\\t\\t\\tns.print(`WARN: Failed to spend hashes on '${spendAction}'. (Cost: ${cost} ` +\\n\\t\\t\\t\\t\\t\\t\\t\\t`Have: ${ns.hacknet.numHashes()} Capacity: ${capacity}`);\\n\\t\\t\\t\\t\\t\\telse if (spendAction !== sellForMoney) // This would be to noisy late-game, since cost never scales\\n\\t\\t\\t\\t\\t\\t\\tns.print(`SUCCESS: Spent ${cost} hashes on '${spendAction}'. ` +\\n\\t\\t\\t\\t\\t\\t\\t\\t`Next upgrade will cost ${ns.hacknet.hashCost(spendAction)}.`);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tawait ns.sleep(1); // Defend against infinite loop if there's a bug\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.hacknet.numHashes() < startingHashes)\\n\\t\\t\\t\\t\\tns.print(`SUCCESS: Spent ${(startingHashes - ns.hacknet.numHashes()).toFixed(0)} hashes ` +\\n\\t\\t\\t\\t\\t\\t(spendAllHashes ? '' : ` to avoid reaching capacity (${capacity})`) +\\n\\t\\t\\t\\t\\t\\t` while earning ${globalProduction.toPrecision(3)} hashes per second.`);\\n\\t\\t\\t};\\n\\t\\t\\t// Spend hashes normally on any/all user-specified purchases\\n\\t\\t\\tawait fnSpendHashes(toBuy, liquidate);\\n\\t\\t\\t// Determine if we should try to upgrade our hacknet capacity\\n\\t\\t\\tif (capacity - ns.hacknet.numHashes() < reserve)\\n\\t\\t\\t\\tns.print(`INFO: We're still at hash capacity (${capacity}) after spending hashes as instructed. ` +\\n\\t\\t\\t\\t\\t`We currently have ${ns.hacknet.numHashes()} hashes - which is ${capacity - ns.hacknet.numHashes()} away.`);\\n\\t\\t\\telse if (getMinCost(toBuy) > capacity - options['reserve-buffer'])\\n\\t\\t\\t\\tns.print(`INFO: Our hash capacity is ${capacity}, but the cheapest upgrade we wish to purchase ` +\\n\\t\\t\\t\\t\\t`costs ${getMinCost(toBuy)} hashes. A capacity upgrade is needed before anything else is purchase.`);\\n\\t\\t\\telse // Current hash capacity suffices\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\tif (options['no-capacity-upgrades']) // Not allowed to upgrade hacknet capacity\\n\\t\\t\\t\\tns.print(`WARNING: spend-hacknet-hashes.js cannot afford any of the desired upgrades (${toBuy.join(\\\", \\\")}) at the current hash capacity, ` +\\n\\t\\t\\t\\t\\t`and --no-capacity-upgrades is set, so we cannot increase our hash capacity.`);\\n\\t\\t\\telse {\\n\\t\\t\\t\\t// Try to upgrade hacknet capacity so we can save up for more upgrades\\n\\t\\t\\t\\tlet lowestLevel = Number.MAX_SAFE_INTEGER, lowestIndex = null;\\n\\t\\t\\t\\tfor (let i = 0; i < nodes; i++)\\n\\t\\t\\t\\t\\tif (ns.hacknet.getNodeStats(i).hashCapacity < lowestLevel) {\\n\\t\\t\\t\\t\\t\\tlowestIndex = i;\\n\\t\\t\\t\\t\\t\\tlowestLevel = ns.hacknet.getNodeStats(i).hashCapacity;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (lowestIndex !== null && ns.hacknet.upgradeCache(lowestIndex, 1)) {\\n\\t\\t\\t\\t\\tns.print(`SUCCESS: Upgraded hacknet node ${lowestIndex} hash capacity in order to afford further purchases. ` +\\n\\t\\t\\t\\t\\t\\t`(You can disable this with --no-capacity-upgrades)`);\\n\\t\\t\\t\\t\\tcapacity = ns.hacknet.hashCapacity()\\n\\t\\t\\t\\t} else if (nodes > 0)\\n\\t\\t\\t\\t\\tns.print(`WARNING: We cannot afford to buy any of the desired upgrades (${toBuy.join(\\\", \\\")}) at our current hash capacity, ` +\\n\\t\\t\\t\\t\\t\\t`and we failed to increase our hash capacity (cost: ${ns.nFormat(ns.hacknet.getCacheUpgradeCost(lowestIndex, 1), '0.0a')}).`);\\n\\t\\t\\t}\\n\\t\\t\\t// If for any of the above reasons, we weren't able to upgrade capacity, calling 'SpendHashes' once more\\n\\t\\t\\t// with these arguments will only convert enough hashes to money to ensure they aren't wasted before the next tick.\\n\\t\\t\\tawait fnSpendHashes([sellForMoney], false);\\n\\t\\t}\\n\\t\\tcatch (err) {\\n\\t\\t\\tns.print(`WARNING: spend-hacknet-hashes.js Caught (and suppressed) an unexpected error in the main loop:\\\\n` +\\n\\t\\t\\t\\t(typeof err === 'string' ? err : err.message || JSON.stringify(err)));\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"spend-hacknet-hash.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/0e5101a0-691f-4a90-a0b8-2b1c31e6b416\",\"moduleSequenceNumber\":148233},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/1e9e06a1-44ab-46c1-9b8d-6da3435ee826\",\"moduleSequenceNumber\":148216},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/c5ebbb20-15b5-425c-a746-ab726346f67e\",\"moduleSequenceNumber\":148217},{\"filename\":\"spend-hacknet-hash.js\",\"url\":\"blob:https://danielyxie.github.io/077a4e3f-647b-4c1b-9bfc-1d595bc44385\",\"moduleSequenceNumber\":148345}],\"dependents\":[],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":148345,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @arg {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    \\n    const scripts = [\\\"/bin/hack.js\\\", \\\"/bin/weak.js\\\", \\\"/bin/grow.js\\\", \\\"/bin/weak.js\\\"];\\n    const killAllScripts = function(ns, pids) {\\n        for (let index = 0; index < pids.length; ++index) {\\n            for (let i = 0; i < 4; ++i) { ns.kill(pids[index][i]); }\\n        }\\n    }\\n    \\n    // Get input from globalThis (or read a file, or read a port, or however else you get input into the script)\\n    let params = globalThis.batch_params[ns.args[0]];\\n\\n    // For storing the PIDs of the child hack/grow/weaken scripts\\n    const pids = Array.from(Array(params.depth), () => Array(4).fill(0));\\n\\n    // This gets which servers you want to run child scripts on - this could be done on-the-fly as you launch\\n    // each script, but I choose to allocate space for each script up front and pass it to the batch manager\\n    const hosts = Array.from(Array(params.depth), () => Array(4));\\n    for (let i = 0; i < 4; ++i) {\\n        const alloc = params.alloc[[\\\"hmain\\\", \\\"hweak\\\", \\\"gmain\\\", \\\"gweak\\\"][i]];\\n\\n        let index = 0;\\n        for (const hostname in alloc) {\\n            for (let _j = 0; _j < alloc[hostname]; ++_j) {\\n                hosts[index++][i] = hostname;\\n            }\\n        }\\n    }\\n\\n    const kH = Math.ceil(params.hack_time / params.period);\\n    const kG = Math.ceil(params.grow_time / params.period);\\n\\n    // Keep track of an overall error value and quit if it gets too high\\n    let error_value = 0;\\n    const error_max = 100;\\n\\n    const time_begin = performance.now();\\n    ns.print(`Script starting at ${new Date(Date.now()).toLocaleTimeString()}`);\\n    ns.print(`First batch due at ${new Date(Date.now() + params.depth * params.period - 4 * params.t0).toLocaleTimeString()}`);\\n\\n    let ending    = false;\\n    let max_batch = Infinity;\\n    for (let batch = 0; batch < max_batch; ++batch) {\\n        const index = batch % params.depth;\\n\\n        const batch_begin = time_begin + batch * params.period;\\n        await ns.asleep(batch_begin - performance.now());\\n        const batch_lag = performance.now() - batch_begin;\\n        \\n        // Make sure this loop starts on time\\n        let dispatch = true;\\n        if (batch_lag >= params.t0) {\\n            ns.print(ns.sprintf(\\\"WARN: %4d loop started %dms late\\\", batch, batch_lag));\\n            error_value += 3;\\n            dispatch = false;\\n        }\\n\\n        // Make sure scripts finished on time\\n        for (let i = 0; i < 4; ++i) {\\n            if (ns.isRunning(pids[index][i])) {\\n                ns.print(ns.sprintf(\\\"WARN: %4d %d finished late\\\", batch, i));\\n                ns.kill(pids[index][i]);\\n                error_value += 1;\\n            }\\n            pids[index][i] = 0;\\n        }\\n\\n        // Make sure we're up-to-date with global data\\n        params = globalThis.batch_params[ns.args[0]];\\n        const target = globalThis.network[params.target.name];\\n\\n        // Test if we're being told to quit remotely\\n        if (params.quit) {\\n            ns.print(ns.sprintf(\\\"ERROR: %4d Received quit message\\\", batch));\\n            killAllScripts(ns, pids);\\n            break;\\n        }\\n\\n        target.cur_money = ns.getServerMoneyAvailable(target.name);\\n        target.cur_level = ns.getServerSecurityLevel(target.name);\\n        const next_index = (index + 1) % params.depth;\\n\\n        if (target.cur_level > target.level) {\\n            ns.print(ns.sprintf(\\\"WARN: %4d Security level raised by %.3f\\\", batch, target.cur_level - target.level));\\n            error_value += 5;\\n\\n            // To recover, kill the hack and grow about to land\\n            ns.kill(pids[next_index][0]);\\n            ns.kill(pids[next_index][2]);\\n\\n            // Kill hacks/grows in batches that would be affected by the security raise\\n            ns.kill(pids[(index + kH) % params.depth][0]);\\n            ns.kill(pids[(index + kG) % params.depth][0]);\\n            ns.kill(pids[(index + kG) % params.depth][2]);\\n\\n            // Skip the upcoming dispatch since the weakens would be affected\\n            dispatch = false;\\n        } else if (target.cur_money < target.money) {\\n            ns.print(ns.sprintf(\\\"WARN: %4d Money too low, at %.1f%%\\\", batch, 100 * target.cur_money / target.money));\\n            error_value += 2;\\n            \\n            // To recover, kill the hack about to land\\n            ns.kill(pids[next_index][0]);\\n        } else {\\n            // We didn't need to recover, so if there's no hack coming up, kill the next batch about to land\\n            if (pids[next_index][0] == 0) {\\n                for (let i = 1; i < 4; ++i) {\\n                    ns.kill(pids[next_index][i]);\\n                    pids[next_index][i] = 0;\\n                }\\n            }\\n\\n            error_value = Math.max(error_value - 1, 0);\\n        }\\n\\n        // If our hacking skill increases, kill any batch with any script still sleeping and set us up to end\\n        if (ending) {\\n            params.scripts -= 4;\\n            dispatch = false;\\n        } else if (ns.getHackingLevel() != params.skill) {\\n            ns.print(ns.sprintf(\\\"ERROR: %4d Hacking skill increased to %d\\\", batch, ns.getHackingLevel()));\\n\\n            for (let offset = kH; offset < params.depth; ++offset) {\\n                for (let i = 0; i < 4; ++i) { ns.kill(pids[(index + offset) % params.depth][i]); }\\n            }\\n\\n            ending         = true;\\n            max_batch      = batch + kH;\\n            params.time    = time_begin + (max_batch - 1) * params.period + (Date.now() - performance.now());\\n            params.scripts = (kH - 1) * 4 + 1;\\n            dispatch       = false;\\n        }\\n\\n        // Send out our child scripts\\n        if (dispatch) {\\n            let dispatch_error = false;\\n\\n            for (let i = 0; i < 4; ++i) {\\n                const event_begin = batch_begin + params.delay[i];\\n                pids[index][i] = ns.exec(scripts[i], hosts[index][i], params.threads[i], params.target.name, event_begin);\\n\\n                if (pids[index][i] == 0) {\\n                    ns.print(ns.sprintf(\\\"WARN: %4d Could not run %d on %s\\\", batch, i, hosts[index][i]));\\n                    error_value += 20;\\n                    dispatch_error = true;\\n                    break;\\n                }\\n            }\\n\\n            if (dispatch_error) { for (let i = 0; i < 4; ++i) { ns.kill(pids[index][i]); } }\\n        }\\n\\n        if (error_value > error_max) {\\n            ns.print(ns.sprintf(\\\"ERROR: %4d Too many errors, giving up\\\", batch));\\n            killAllScripts(ns, pids);\\n            break;\\n        }\\n    }\\n\\n    params.quit = false;\\n}\",\"filename\":\"stalefish.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stalefish.js\",\"url\":\"blob:https://danielyxie.github.io/2936ec1a-4e9d-41dc-a296-05ea33434241\",\"moduleSequenceNumber\":253453}],\"dependents\":[],\"ramUsage\":3.75,\"server\":\"home\",\"moduleSequenceNumber\":148253,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { boxTailSingleton } from 'utils.js';\\nconst aug_want_list = [\\\"The Red Pill\\\", \\\"NeuroFlux Governor\\\", \\n\\\"Hacknet Node NIC Architecture Neural-Upload\\\",\\n\\\"Hacknet Node Cache Architecture Neural-Upload\\\",\\n\\\"Hacknet Node CPU Architecture Neural-Upload\\\",\\n\\\"Hacknet Node Kernel Direct-Neural Interface\\\",\\n\\\"Hacknet Node Core Direct-Neural Interface\\\",\\n\\\"Wired Reflexes\\\", \\\"NutriGen Implant\\\", \\\"Neurotrainer I\\\",\\n\\\"LuminCloaking-V1 Skin Implant\\\", \\\"Augmented Targeting I\\\", \\\"ADR-V1 Pheromone Gene\\\", \\\"Combat Rib I\\\", \\\"INFRARET Enhancement\\\",\\n\\\"LuminCloaking-V2 Skin Implant\\\", \\\"Social Negotiation Assistant (S.N.A)\\\", \\\"Augmented Targeting II\\\", \\\"Neurotrainer II\\\",\\n\\\"HemoRecirculator\\\", \\\"DermaForce Particle Barrier\\\", \\\"Combat Rib II\\\", \\\"SmartSonar Implant\\\", \\\"BrachiBlades\\\",\\n\\\"Augmented Targeting III\\\", \\\"Combat Rib III\\\", \\\"Nanofiber Weave\\\", \\\"Bionic Spine\\\", \\\"Neurotrainer III\\\", \\\"EsperTech Bladeburner Eyewear\\\",\\n\\\"Power Recirculation Core\\\", \\\"Bionic Arms\\\", \\\"Bionic Legs\\\", \\\"The Shadow's Simulacrum\\\", \\\"ADR-V2 Pheromone Gene\\\",\\n\\\"The Black Hand\\\", \\\"ORION-MKIV Shoulder\\\", \\\"FocusWire\\\", \\\"Synfibril Muscle\\\", \\\"BLADE-51b Tesla Armor\\\", \\\"nextSENS Gene Modification\\\",\\n\\\"PCMatrix\\\", \\\"Graphene BrachiBlades Upgrade\\\", \\\"SmartJaw\\\", \\\"HyperSight Corneal Implant\\\", \\\"Photosynthetic Cells\\\",\\n\\\"Vangelis Virus\\\", \\\"Synthetic Heart\\\", \\\"Neotra\\\", \\\"NEMEAN Subdermal Weave\\\", \\\"Graphene Bionic Arms Upgrade\\\",\\n\\\"Graphene Bone Lacings\\\", \\\"Xanipher\\\", \\\"Graphene Bionic Legs Upgrade\\\", \\\"SPTN-97 Gene Modification\\\", \\\"CordiARC Fusion Reactor\\\",\\n\\\"I.N.T.E.R.L.I.N.K.E.D\\\", \\\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\\\", \\\"Graphene Bionic Spine Upgrade\\\",\\n\\\"Blade's Runners\\\", \\\"GOLEM Serum\\\", \\\"Vangelis Virus 3.0\\\", \\\"The Blade's Simulacrum\\\", \\\"Hydroflame Left Arm\\\",\\n\\\"Neuroreceptor Management Implant\\\"\\n]\\n\\nimport { getOwnedAugmentationsStatic, getAugmentsPerFaction, getAllAugmentStats, hasStat } from 'augments.js';\\nfunction wantListGenerator() {\\n\\tconst augmentStats = getAllAugmentStats(ns);\\n\\t// const bladeburnerDesiredStats = ['agi', 'dex', 'str', 'def', 'faction_rep', 'company_rep', 'hacknet'];\\n\\tconst bladeburnerDesiredStats = ['agi', 'dex', 'str', 'def', 'faction_rep'];\\n\\tconst anauglist = Object.entries(augmentStats)\\n\\t\\t.filter(([name, augstats]) =>\\n\\t\\t\\tbladeburnerDesiredStats.filter((stat) => hasStat(stat, augstats)).length > 0)\\n\\t\\t.sort(([, augstatsa], [, augstatsb]) => augstatsa.price - augstatsb.price)\\n\\t\\t.map(([name, augstats]) => name);\\n\\tns.print(JSON.stringify(anauglist, null, 2));\\n}\\n\\nconst argsSchema = [\\n\\t['no-soft-reset', false], // if this should reset after attempting to buy\\n];\\nlet options;\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\toptions = ns.flags(argsSchema);\\n\\tns.disableLog('singularity.purchaseAugmentation');\\n\\tns.clearLog();\\n\\tboxTailSingleton(ns, 'Purchase Augs', 'A', '100px');\\n\\t// ns.tail();\\n\\tconst playerAugs = getOwnedAugmentationsStatic(ns);\\n\\tlet needed_augs = aug_want_list.filter(aug => !playerAugs.includes(aug))\\n\\t.reverse(); // highest to lowest price the want list is presorted low to high\\n\\tneeded_augs.push(\\\"NeuroFlux Governor\\\"); //always need NF\\n\\tconst factionAugs = Object.entries(getAugmentsPerFaction(ns));\\n\\tlet augsPurchased = parseInt(ns.read('/tmp/augsPurchased.txt') || '0');\\n\\tfor (const needed_aug of needed_augs) {\\n\\t\\tconst factions = factionAugs.filter(([, augs]) => augs.includes(needed_aug)).map(([faction]) => faction);\\n\\t\\tfor (const faction of factions) {\\n\\t\\t\\tlet isPurchased = ns.purchaseAugmentation(faction, needed_aug);\\n\\t\\t\\tif (isPurchased) {\\n\\t\\t\\t\\taugsPurchased++;\\n\\t\\t\\t\\tns.print(`bought ${needed_aug} from ${faction}`);\\n\\t\\t\\t}\\n\\t\\t\\twhile (needed_aug === 'NeuroFlux Governor' && isPurchased) {\\n\\t\\t\\t\\tisPurchased = ns.purchaseAugmentation(faction, needed_aug);\\n\\t\\t\\t\\tif (isPurchased) {\\n\\t\\t\\t\\t\\taugsPurchased++;\\n\\t\\t\\t\\t\\tns.print(`bought ${needed_aug} from ${faction}`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!isPurchased) {\\n\\t\\t\\t\\t//ns.print(`Failed to buy ${needed_aug} from ${faction}`);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tawait ns.write('/tmp/augsPurchased.txt', augsPurchased, 'w');\\n\\t// ns.print('Finished purchasing');\\n\\tif (options['no-soft-reset']) {\\n\\t\\tif (augsPurchased >= 3) {\\n\\t\\t\\tns.softReset('bootstrap32GB.js');\\n\\t\\t}\\n\\t} else {\\n\\t\\tns.softReset('bootstrap32GB.js');\\n\\t}\\n}\",\"filename\":\"aug_buyer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"augments.js\",\"url\":\"blob:https://danielyxie.github.io/14580e0d-9e22-4250-8517-962763969602\",\"moduleSequenceNumber\":85038},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/e3951c4b-4414-42bd-b36d-63a67f70f2c5\",\"moduleSequenceNumber\":85026},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/94d7e90e-0485-4d48-92e1-3277220936de\",\"moduleSequenceNumber\":85009},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/a613808b-f2bc-48b0-b57e-2fb15bc213be\",\"moduleSequenceNumber\":85010},{\"filename\":\"aug_buyer.js\",\"url\":\"blob:https://danielyxie.github.io/70a37852-68c8-4d76-bba6-ede9d283da41\",\"moduleSequenceNumber\":148212}],\"dependents\":[],\"ramUsage\":12.1,\"server\":\"home\",\"moduleSequenceNumber\":148254,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.purchaseAugmentation\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.softReset\",\"cost\":5},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"hacknet-node-0\",\"darkweb\",\"hacknet-node-1\",\"hacknet-node-2\",\"hacknet-node-3\",\"hacknet-node-4\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/ingang.txt\",\"text\":\"Slum Snakes\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/player.txt\",\"text\":\"{\\n  \\\"hacking\\\": 1,\\n  \\\"hp\\\": 15,\\n  \\\"max_hp\\\": 15,\\n  \\\"strength\\\": 26,\\n  \\\"defense\\\": 51,\\n  \\\"dexterity\\\": 11,\\n  \\\"agility\\\": 24,\\n  \\\"charisma\\\": 1,\\n  \\\"intelligence\\\": 178,\\n  \\\"hacking_chance_mult\\\": 1.8901243207766345,\\n  \\\"hacking_speed_mult\\\": 1.9857646114079328,\\n  \\\"hacking_money_mult\\\": 2.2870504281397284,\\n  \\\"hacking_grow_mult\\\": 1.8901243207766345,\\n  \\\"hacking_exp\\\": 0,\\n  \\\"strength_exp\\\": 0,\\n  \\\"defense_exp\\\": 0,\\n  \\\"dexterity_exp\\\": 0,\\n  \\\"agility_exp\\\": 0,\\n  \\\"charisma_exp\\\": 0,\\n  \\\"hacking_mult\\\": 2.6197123085964162,\\n  \\\"strength_mult\\\": 58.11425594905929,\\n  \\\"defense_mult\\\": 114.13976762632639,\\n  \\\"dexterity_mult\\\": 25.01250113455981,\\n  \\\"agility_mult\\\": 54.32068178464971,\\n  \\\"charisma_mult\\\": 3.3818104347335542,\\n  \\\"hacking_exp_mult\\\": 3.8110264809306367,\\n  \\\"strength_exp_mult\\\": 6.4825560440630134,\\n  \\\"defense_exp_mult\\\": 6.4825560440630134,\\n  \\\"dexterity_exp_mult\\\": 8.200433395739708,\\n  \\\"agility_exp_mult\\\": 6.4825560440630134,\\n  \\\"charisma_exp_mult\\\": 3.343005685026874,\\n  \\\"company_rep_mult\\\": 4.966751303468498,\\n  \\\"faction_rep_mult\\\": 2.8943772164734827,\\n  \\\"numPeopleKilled\\\": 0,\\n  \\\"money\\\": 24480216209.124096,\\n  \\\"city\\\": \\\"Aevum\\\",\\n  \\\"location\\\": \\\"Travel Agency\\\",\\n  \\\"companyName\\\": \\\"\\\",\\n  \\\"crime_money_mult\\\": 4.6535503253989425,\\n  \\\"crime_success_mult\\\": 2.5898019202220204,\\n  \\\"isWorking\\\": false,\\n  \\\"workType\\\": \\\"\\\",\\n  \\\"currentWorkFactionName\\\": \\\"\\\",\\n  \\\"currentWorkFactionDescription\\\": \\\"\\\",\\n  \\\"workHackExpGainRate\\\": 0,\\n  \\\"workStrExpGainRate\\\": 0,\\n  \\\"workDefExpGainRate\\\": 0,\\n  \\\"workDexExpGainRate\\\": 0,\\n  \\\"workAgiExpGainRate\\\": 0,\\n  \\\"workChaExpGainRate\\\": 0,\\n  \\\"workRepGainRate\\\": 0,\\n  \\\"workMoneyGainRate\\\": 0,\\n  \\\"workMoneyLossRate\\\": 0,\\n  \\\"workHackExpGained\\\": 0,\\n  \\\"workStrExpGained\\\": 0,\\n  \\\"workDefExpGained\\\": 0,\\n  \\\"workDexExpGained\\\": 0,\\n  \\\"workAgiExpGained\\\": 0,\\n  \\\"workChaExpGained\\\": 0,\\n  \\\"workRepGained\\\": 0,\\n  \\\"workMoneyGained\\\": 0,\\n  \\\"createProgramName\\\": \\\"\\\",\\n  \\\"createProgramReqLvl\\\": 100,\\n  \\\"className\\\": \\\"\\\",\\n  \\\"crimeType\\\": \\\"\\\",\\n  \\\"work_money_mult\\\": 3.8921440013432465,\\n  \\\"hacknet_node_money_mult\\\": 4.51617227635618,\\n  \\\"hacknet_node_purchase_cost_mult\\\": 0.39120272080184615,\\n  \\\"hacknet_node_ram_cost_mult\\\": 0.5113761056233282,\\n  \\\"hacknet_node_core_cost_mult\\\": 0.5113761056233282,\\n  \\\"hacknet_node_level_cost_mult\\\": 0.434669689779829,\\n  \\\"hasWseAccount\\\": false,\\n  \\\"hasTixApiAccess\\\": false,\\n  \\\"has4SData\\\": false,\\n  \\\"has4SDataTixApi\\\": false,\\n  \\\"bladeburner_max_stamina_mult\\\": 1.3167000000000004,\\n  \\\"bladeburner_stamina_gain_mult\\\": 1.2819870000000004,\\n  \\\"bladeburner_analysis_mult\\\": 1.2540000000000002,\\n  \\\"bladeburner_success_chance_mult\\\": 1.3081151616000002,\\n  \\\"bitNodeN\\\": 9,\\n  \\\"totalPlaytime\\\": 11318030000,\\n  \\\"playtimeSinceLastAug\\\": 70200,\\n  \\\"playtimeSinceLastBitnode\\\": 126148200,\\n  \\\"jobs\\\": {},\\n  \\\"factions\\\": [\\n    \\\"Slum Snakes\\\",\\n    \\\"Bladeburners\\\"\\n  ],\\n  \\\"tor\\\": false,\\n  \\\"inBladeburner\\\": true,\\n  \\\"hasCorporation\\\": true,\\n  \\\"entropy\\\": 0\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/getBitNodeMultipliers.txt\",\"text\":\"{\\n  \\\"HackingLevelMultiplier\\\": 0.5,\\n  \\\"StrengthLevelMultiplier\\\": 0.45,\\n  \\\"DefenseLevelMultiplier\\\": 0.45,\\n  \\\"DexterityLevelMultiplier\\\": 0.45,\\n  \\\"AgilityLevelMultiplier\\\": 0.45,\\n  \\\"CharismaLevelMultiplier\\\": 0.45,\\n  \\\"ServerGrowthRate\\\": 1,\\n  \\\"ServerMaxMoney\\\": 0.1,\\n  \\\"ServerStartingMoney\\\": 0.1,\\n  \\\"ServerStartingSecurity\\\": 2.5,\\n  \\\"ServerWeakenRate\\\": 1,\\n  \\\"HomeComputerRamCost\\\": 5,\\n  \\\"PurchasedServerCost\\\": 1,\\n  \\\"PurchasedServerSoftcap\\\": 1,\\n  \\\"PurchasedServerLimit\\\": 0,\\n  \\\"PurchasedServerMaxRam\\\": 1,\\n  \\\"CompanyWorkMoney\\\": 1,\\n  \\\"CrimeMoney\\\": 0.5,\\n  \\\"HacknetNodeMoney\\\": 1,\\n  \\\"ManualHackMoney\\\": 1,\\n  \\\"ScriptHackMoney\\\": 0.1,\\n  \\\"ScriptHackMoneyGain\\\": 1,\\n  \\\"CodingContractMoney\\\": 1,\\n  \\\"ClassGymExpGain\\\": 1,\\n  \\\"CompanyWorkExpGain\\\": 1,\\n  \\\"CrimeExpGain\\\": 1,\\n  \\\"FactionWorkExpGain\\\": 1,\\n  \\\"HackExpGain\\\": 0.05,\\n  \\\"FactionPassiveRepGain\\\": 1,\\n  \\\"FactionWorkRepGain\\\": 1,\\n  \\\"RepToDonateToFaction\\\": 1,\\n  \\\"AugmentationMoneyCost\\\": 1,\\n  \\\"AugmentationRepCost\\\": 1,\\n  \\\"InfiltrationMoney\\\": 1,\\n  \\\"InfiltrationRep\\\": 1,\\n  \\\"FourSigmaMarketDataCost\\\": 5,\\n  \\\"FourSigmaMarketDataApiCost\\\": 4,\\n  \\\"CorporationValuation\\\": 0.5,\\n  \\\"CorporationSoftCap\\\": 0.7,\\n  \\\"BladeburnerRank\\\": 0.9,\\n  \\\"BladeburnerSkillCost\\\": 1.2,\\n  \\\"GangSoftcap\\\": 0.8,\\n  \\\"GangUniqueAugs\\\": 0.25,\\n  \\\"DaedalusAugsRequirement\\\": 1,\\n  \\\"StaneksGiftPowerMultiplier\\\": 0.5,\\n  \\\"StaneksGiftExtraSize\\\": 2,\\n  \\\"WorldDaemonDifficulty\\\": 2\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/factionAugs.txt\",\"text\":\"{\\n  \\\"Illuminati\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Synthetic Heart\\\",\\n    \\\"Synfibril Muscle\\\",\\n    \\\"NEMEAN Subdermal Weave\\\",\\n    \\\"Embedded Netburner Module Core V3 Upgrade\\\",\\n    \\\"Embedded Netburner Module Analyze Engine\\\",\\n    \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\n    \\\"QLink\\\"\\n  ],\\n  \\\"Daedalus\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Synthetic Heart\\\",\\n    \\\"Synfibril Muscle\\\",\\n    \\\"NEMEAN Subdermal Weave\\\",\\n    \\\"Embedded Netburner Module Core V3 Upgrade\\\",\\n    \\\"Embedded Netburner Module Analyze Engine\\\",\\n    \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\n    \\\"The Red Pill\\\"\\n  ],\\n  \\\"The Covenant\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Augmented Targeting III\\\",\\n    \\\"Synthetic Heart\\\",\\n    \\\"Synfibril Muscle\\\",\\n    \\\"Combat Rib III\\\",\\n    \\\"NEMEAN Subdermal Weave\\\",\\n    \\\"Graphene Bone Lacings\\\",\\n    \\\"Embedded Netburner Module Core V3 Upgrade\\\",\\n    \\\"Embedded Netburner Module Analyze Engine\\\",\\n    \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\n    \\\"SPTN-97 Gene Modification\\\"\\n  ],\\n  \\\"ECorp\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Graphene Bionic Spine Upgrade\\\",\\n    \\\"Graphene Bionic Legs Upgrade\\\",\\n    \\\"Embedded Netburner Module\\\",\\n    \\\"Embedded Netburner Module Core Implant\\\",\\n    \\\"Embedded Netburner Module Core V2 Upgrade\\\",\\n    \\\"Embedded Netburner Module Core V3 Upgrade\\\",\\n    \\\"Embedded Netburner Module Analyze Engine\\\",\\n    \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\n    \\\"PC Direct-Neural Interface\\\",\\n    \\\"PC Direct-Neural Interface Optimization Submodule\\\",\\n    \\\"ECorp HVMind Implant\\\"\\n  ],\\n  \\\"MegaCorp\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Graphene Bionic Legs Upgrade\\\",\\n    \\\"Embedded Netburner Module\\\",\\n    \\\"Embedded Netburner Module Core Implant\\\",\\n    \\\"Embedded Netburner Module Core V2 Upgrade\\\",\\n    \\\"Embedded Netburner Module Core V3 Upgrade\\\",\\n    \\\"Embedded Netburner Module Analyze Engine\\\",\\n    \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\n    \\\"ADR-V1 Pheromone Gene\\\",\\n    \\\"CordiARC Fusion Reactor\\\"\\n  ],\\n  \\\"Bachman & Associates\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Enhanced Social Interaction Implant\\\",\\n    \\\"Neuralstimulator\\\",\\n    \\\"Nuoptimal Nootropic Injector Implant\\\",\\n    \\\"Speech Enhancement\\\",\\n    \\\"FocusWire\\\",\\n    \\\"ADR-V2 Pheromone Gene\\\",\\n    \\\"SmartJaw\\\"\\n  ],\\n  \\\"Blade Industries\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Augmented Targeting I\\\",\\n    \\\"Augmented Targeting II\\\",\\n    \\\"Augmented Targeting III\\\",\\n    \\\"Synfibril Muscle\\\",\\n    \\\"Combat Rib I\\\",\\n    \\\"Combat Rib II\\\",\\n    \\\"Combat Rib III\\\",\\n    \\\"Nanofiber Weave\\\",\\n    \\\"Bionic Spine\\\",\\n    \\\"Bionic Legs\\\",\\n    \\\"Embedded Netburner Module\\\",\\n    \\\"Embedded Netburner Module Core Implant\\\",\\n    \\\"Embedded Netburner Module Core V2 Upgrade\\\",\\n    \\\"PC Direct-Neural Interface\\\",\\n    \\\"PC Direct-Neural Interface Optimization Submodule\\\",\\n    \\\"HyperSight Corneal Implant\\\",\\n    \\\"Neotra\\\"\\n  ],\\n  \\\"NWO\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Synthetic Heart\\\",\\n    \\\"Synfibril Muscle\\\",\\n    \\\"Enhanced Social Interaction Implant\\\",\\n    \\\"Embedded Netburner Module\\\",\\n    \\\"Embedded Netburner Module Core Implant\\\",\\n    \\\"Embedded Netburner Module Core V2 Upgrade\\\",\\n    \\\"Embedded Netburner Module Core V3 Upgrade\\\",\\n    \\\"Embedded Netburner Module Analyze Engine\\\",\\n    \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\n    \\\"ADR-V1 Pheromone Gene\\\",\\n    \\\"Neurotrainer III\\\",\\n    \\\"Power Recirculation Core\\\",\\n    \\\"Xanipher\\\",\\n    \\\"Hydroflame Left Arm\\\"\\n  ],\\n  \\\"Clarke Incorporated\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Enhanced Social Interaction Implant\\\",\\n    \\\"Neuralstimulator\\\",\\n    \\\"Neuronal Densification\\\",\\n    \\\"Nuoptimal Nootropic Injector Implant\\\",\\n    \\\"Speech Enhancement\\\",\\n    \\\"FocusWire\\\",\\n    \\\"ADR-V2 Pheromone Gene\\\",\\n    \\\"nextSENS Gene Modification\\\"\\n  ],\\n  \\\"OmniTek Incorporated\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Augmented Targeting I\\\",\\n    \\\"Augmented Targeting II\\\",\\n    \\\"Augmented Targeting III\\\",\\n    \\\"Combat Rib I\\\",\\n    \\\"Combat Rib II\\\",\\n    \\\"Combat Rib III\\\",\\n    \\\"Nanofiber Weave\\\",\\n    \\\"Bionic Spine\\\",\\n    \\\"Bionic Legs\\\",\\n    \\\"Enhanced Social Interaction Implant\\\",\\n    \\\"Embedded Netburner Module Core V2 Upgrade\\\",\\n    \\\"PC Direct-Neural Interface\\\",\\n    \\\"OmniTek InfoLoad\\\"\\n  ],\\n  \\\"Four Sigma\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Enhanced Social Interaction Implant\\\",\\n    \\\"Neuralstimulator\\\",\\n    \\\"Nuoptimal Nootropic Injector Implant\\\",\\n    \\\"Speech Enhancement\\\",\\n    \\\"FocusWire\\\",\\n    \\\"PC Direct-Neural Interface\\\",\\n    \\\"ADR-V1 Pheromone Gene\\\",\\n    \\\"ADR-V2 Pheromone Gene\\\",\\n    \\\"Neurotrainer III\\\"\\n  ],\\n  \\\"KuaiGong International\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Augmented Targeting I\\\",\\n    \\\"Augmented Targeting II\\\",\\n    \\\"Augmented Targeting III\\\",\\n    \\\"Synthetic Heart\\\",\\n    \\\"Synfibril Muscle\\\",\\n    \\\"Combat Rib I\\\",\\n    \\\"Combat Rib II\\\",\\n    \\\"Combat Rib III\\\",\\n    \\\"Bionic Spine\\\",\\n    \\\"Bionic Legs\\\",\\n    \\\"Embedded Netburner Module Core V2 Upgrade\\\",\\n    \\\"Speech Enhancement\\\",\\n    \\\"FocusWire\\\",\\n    \\\"HyperSight Corneal Implant\\\",\\n    \\\"Photosynthetic Cells\\\"\\n  ],\\n  \\\"Fulcrum Secret Technologies\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Synthetic Heart\\\",\\n    \\\"Synfibril Muscle\\\",\\n    \\\"Nanofiber Weave\\\",\\n    \\\"NEMEAN Subdermal Weave\\\",\\n    \\\"Graphene Bone Lacings\\\",\\n    \\\"Graphene Bionic Spine Upgrade\\\",\\n    \\\"Graphene Bionic Legs Upgrade\\\",\\n    \\\"Artificial Bio-neural Network Implant\\\",\\n    \\\"Enhanced Myelin Sheathing\\\",\\n    \\\"Embedded Netburner Module\\\",\\n    \\\"Embedded Netburner Module Core Implant\\\",\\n    \\\"Embedded Netburner Module Core V2 Upgrade\\\",\\n    \\\"Embedded Netburner Module Core V3 Upgrade\\\",\\n    \\\"Embedded Netburner Module Analyze Engine\\\",\\n    \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\n    \\\"PC Direct-Neural Interface Optimization Submodule\\\",\\n    \\\"PC Direct-Neural Interface NeuroNet Injector\\\"\\n  ],\\n  \\\"BitRunners\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Artificial Bio-neural Network Implant\\\",\\n    \\\"Enhanced Myelin Sheathing\\\",\\n    \\\"DataJack\\\",\\n    \\\"Embedded Netburner Module\\\",\\n    \\\"Embedded Netburner Module Core Implant\\\",\\n    \\\"Embedded Netburner Module Core V2 Upgrade\\\",\\n    \\\"Neural Accelerator\\\",\\n    \\\"Cranial Signal Processors - Gen III\\\",\\n    \\\"Cranial Signal Processors - Gen IV\\\",\\n    \\\"Cranial Signal Processors - Gen V\\\",\\n    \\\"Neurotrainer II\\\",\\n    \\\"BitRunners Neurolink\\\"\\n  ],\\n  \\\"The Black Hand\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Artificial Synaptic Potentiation\\\",\\n    \\\"Enhanced Myelin Sheathing\\\",\\n    \\\"DataJack\\\",\\n    \\\"Embedded Netburner Module\\\",\\n    \\\"Embedded Netburner Module Core Implant\\\",\\n    \\\"Neuralstimulator\\\",\\n    \\\"Cranial Signal Processors - Gen III\\\",\\n    \\\"Cranial Signal Processors - Gen IV\\\",\\n    \\\"The Black Hand\\\"\\n  ],\\n  \\\"NiteSec\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"BitWire\\\",\\n    \\\"Artificial Synaptic Potentiation\\\",\\n    \\\"Neural-Retention Enhancement\\\",\\n    \\\"DataJack\\\",\\n    \\\"Embedded Netburner Module\\\",\\n    \\\"Cranial Signal Processors - Gen I\\\",\\n    \\\"Cranial Signal Processors - Gen II\\\",\\n    \\\"Cranial Signal Processors - Gen III\\\",\\n    \\\"Neurotrainer II\\\",\\n    \\\"CRTX42-AA Gene Modification\\\"\\n  ],\\n  \\\"Aevum\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Wired Reflexes\\\",\\n    \\\"Speech Processor Implant\\\",\\n    \\\"Synaptic Enhancement Implant\\\",\\n    \\\"Neuralstimulator\\\",\\n    \\\"Neurotrainer I\\\",\\n    \\\"PCMatrix\\\"\\n  ],\\n  \\\"Chongqing\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Speech Processor Implant\\\",\\n    \\\"DataJack\\\",\\n    \\\"Neuralstimulator\\\",\\n    \\\"Nuoptimal Nootropic Injector Implant\\\",\\n    \\\"Neuregen Gene Modification\\\"\\n  ],\\n  \\\"Ishima\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Augmented Targeting I\\\",\\n    \\\"Combat Rib I\\\",\\n    \\\"Wired Reflexes\\\",\\n    \\\"Speech Processor Implant\\\",\\n    \\\"Neuralstimulator\\\",\\n    \\\"INFRARET Enhancement\\\"\\n  ],\\n  \\\"New Tokyo\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Speech Processor Implant\\\",\\n    \\\"DataJack\\\",\\n    \\\"Neuralstimulator\\\",\\n    \\\"Nuoptimal Nootropic Injector Implant\\\",\\n    \\\"NutriGen Implant\\\"\\n  ],\\n  \\\"Sector-12\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Augmented Targeting I\\\",\\n    \\\"Augmented Targeting II\\\",\\n    \\\"Wired Reflexes\\\",\\n    \\\"Speech Processor Implant\\\",\\n    \\\"Neuralstimulator\\\",\\n    \\\"CashRoot Starter Kit\\\"\\n  ],\\n  \\\"Volhaven\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Combat Rib I\\\",\\n    \\\"Combat Rib II\\\",\\n    \\\"Wired Reflexes\\\",\\n    \\\"Speech Processor Implant\\\",\\n    \\\"Neuralstimulator\\\",\\n    \\\"Nuoptimal Nootropic Injector Implant\\\",\\n    \\\"DermaForce Particle Barrier\\\"\\n  ],\\n  \\\"Speakers for the Dead\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Unstable Circadian Modulator\\\",\\n    \\\"Synthetic Heart\\\",\\n    \\\"Synfibril Muscle\\\",\\n    \\\"Nanofiber Weave\\\",\\n    \\\"Wired Reflexes\\\",\\n    \\\"Bionic Spine\\\",\\n    \\\"Bionic Legs\\\",\\n    \\\"Speech Enhancement\\\",\\n    \\\"The Shadow's Simulacrum\\\",\\n    \\\"Graphene BrachiBlades Upgrade\\\"\\n  ],\\n  \\\"The Dark Army\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"HemoRecirculator\\\",\\n    \\\"Augmented Targeting I\\\",\\n    \\\"Augmented Targeting II\\\",\\n    \\\"Augmented Targeting III\\\",\\n    \\\"Combat Rib I\\\",\\n    \\\"Combat Rib II\\\",\\n    \\\"Combat Rib III\\\",\\n    \\\"Nanofiber Weave\\\",\\n    \\\"Wired Reflexes\\\",\\n    \\\"The Shadow's Simulacrum\\\",\\n    \\\"Power Recirculation Core\\\",\\n    \\\"Graphene Bionic Arms Upgrade\\\"\\n  ],\\n  \\\"The Syndicate\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"HemoRecirculator\\\",\\n    \\\"Augmented Targeting I\\\",\\n    \\\"Augmented Targeting II\\\",\\n    \\\"Augmented Targeting III\\\",\\n    \\\"Combat Rib I\\\",\\n    \\\"Combat Rib II\\\",\\n    \\\"Combat Rib III\\\",\\n    \\\"Nanofiber Weave\\\",\\n    \\\"NEMEAN Subdermal Weave\\\",\\n    \\\"Wired Reflexes\\\",\\n    \\\"Bionic Spine\\\",\\n    \\\"Bionic Legs\\\",\\n    \\\"ADR-V1 Pheromone Gene\\\",\\n    \\\"The Shadow's Simulacrum\\\",\\n    \\\"Power Recirculation Core\\\",\\n    \\\"BrachiBlades\\\"\\n  ],\\n  \\\"Silhouette\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Speech Processor Implant\\\",\\n    \\\"TITN-41 Gene-Modification Injection\\\",\\n    \\\"ADR-V2 Pheromone Gene\\\"\\n  ],\\n  \\\"Tetrads\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"HemoRecirculator\\\",\\n    \\\"LuminCloaking-V1 Skin Implant\\\",\\n    \\\"LuminCloaking-V2 Skin Implant\\\",\\n    \\\"Power Recirculation Core\\\",\\n    \\\"Bionic Arms\\\"\\n  ],\\n  \\\"Slum Snakes\\\": [\\n    \\\"Unstable Circadian Modulator\\\",\\n    \\\"HemoRecirculator\\\",\\n    \\\"Augmented Targeting I\\\",\\n    \\\"Augmented Targeting II\\\",\\n    \\\"Augmented Targeting III\\\",\\n    \\\"Synthetic Heart\\\",\\n    \\\"Synfibril Muscle\\\",\\n    \\\"Combat Rib I\\\",\\n    \\\"Combat Rib II\\\",\\n    \\\"Combat Rib III\\\",\\n    \\\"Nanofiber Weave\\\",\\n    \\\"NEMEAN Subdermal Weave\\\",\\n    \\\"Wired Reflexes\\\",\\n    \\\"Graphene Bone Lacings\\\",\\n    \\\"Bionic Spine\\\",\\n    \\\"Graphene Bionic Spine Upgrade\\\",\\n    \\\"Bionic Legs\\\",\\n    \\\"Graphene Bionic Legs Upgrade\\\",\\n    \\\"Speech Processor Implant\\\",\\n    \\\"Enhanced Social Interaction Implant\\\",\\n    \\\"BitWire\\\",\\n    \\\"Artificial Bio-neural Network Implant\\\",\\n    \\\"Artificial Synaptic Potentiation\\\",\\n    \\\"Enhanced Myelin Sheathing\\\",\\n    \\\"Synaptic Enhancement Implant\\\",\\n    \\\"Neural-Retention Enhancement\\\",\\n    \\\"DataJack\\\",\\n    \\\"Embedded Netburner Module\\\",\\n    \\\"Embedded Netburner Module Core Implant\\\",\\n    \\\"Embedded Netburner Module Core V2 Upgrade\\\",\\n    \\\"Embedded Netburner Module Core V3 Upgrade\\\",\\n    \\\"Embedded Netburner Module Analyze Engine\\\",\\n    \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\n    \\\"Neuralstimulator\\\",\\n    \\\"Cranial Signal Processors - Gen I\\\",\\n    \\\"Cranial Signal Processors - Gen II\\\",\\n    \\\"Cranial Signal Processors - Gen III\\\",\\n    \\\"Cranial Signal Processors - Gen IV\\\",\\n    \\\"Nuoptimal Nootropic Injector Implant\\\",\\n    \\\"Speech Enhancement\\\",\\n    \\\"FocusWire\\\",\\n    \\\"PC Direct-Neural Interface\\\",\\n    \\\"PC Direct-Neural Interface Optimization Submodule\\\",\\n    \\\"ADR-V1 Pheromone Gene\\\",\\n    \\\"ADR-V2 Pheromone Gene\\\",\\n    \\\"The Shadow's Simulacrum\\\",\\n    \\\"Hacknet Node NIC Architecture Neural-Upload\\\",\\n    \\\"Hacknet Node Kernel Direct-Neural Interface\\\",\\n    \\\"Neurotrainer I\\\",\\n    \\\"Neurotrainer II\\\",\\n    \\\"Neurotrainer III\\\",\\n    \\\"HyperSight Corneal Implant\\\",\\n    \\\"LuminCloaking-V1 Skin Implant\\\",\\n    \\\"LuminCloaking-V2 Skin Implant\\\",\\n    \\\"SmartSonar Implant\\\",\\n    \\\"Power Recirculation Core\\\",\\n    \\\"CordiARC Fusion Reactor\\\",\\n    \\\"Xanipher\\\",\\n    \\\"OmniTek InfoLoad\\\",\\n    \\\"The Black Hand\\\",\\n    \\\"CRTX42-AA Gene Modification\\\",\\n    \\\"Neuregen Gene Modification\\\",\\n    \\\"NutriGen Implant\\\",\\n    \\\"DermaForce Particle Barrier\\\",\\n    \\\"BrachiBlades\\\"\\n  ],\\n  \\\"Netburners\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Hacknet Node CPU Architecture Neural-Upload\\\",\\n    \\\"Hacknet Node Cache Architecture Neural-Upload\\\",\\n    \\\"Hacknet Node NIC Architecture Neural-Upload\\\",\\n    \\\"Hacknet Node Kernel Direct-Neural Interface\\\",\\n    \\\"Hacknet Node Core Direct-Neural Interface\\\"\\n  ],\\n  \\\"Tian Di Hui\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Nanofiber Weave\\\",\\n    \\\"Wired Reflexes\\\",\\n    \\\"Speech Processor Implant\\\",\\n    \\\"Nuoptimal Nootropic Injector Implant\\\",\\n    \\\"Speech Enhancement\\\",\\n    \\\"ADR-V1 Pheromone Gene\\\",\\n    \\\"Social Negotiation Assistant (S.N.A)\\\",\\n    \\\"Neuroreceptor Management Implant\\\"\\n  ],\\n  \\\"CyberSec\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"BitWire\\\",\\n    \\\"Synaptic Enhancement Implant\\\",\\n    \\\"Cranial Signal Processors - Gen I\\\",\\n    \\\"Cranial Signal Processors - Gen II\\\",\\n    \\\"Neurotrainer I\\\"\\n  ],\\n  \\\"Bladeburners\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"EsperTech Bladeburner Eyewear\\\",\\n    \\\"EMS-4 Recombination\\\",\\n    \\\"ORION-MKIV Shoulder\\\",\\n    \\\"Hyperion Plasma Cannon V1\\\",\\n    \\\"Hyperion Plasma Cannon V2\\\",\\n    \\\"GOLEM Serum\\\",\\n    \\\"Vangelis Virus\\\",\\n    \\\"Vangelis Virus 3.0\\\",\\n    \\\"I.N.T.E.R.L.I.N.K.E.D\\\",\\n    \\\"Blade's Runners\\\",\\n    \\\"BLADE-51b Tesla Armor\\\",\\n    \\\"BLADE-51b Tesla Armor: Power Cells Upgrade\\\",\\n    \\\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\\\",\\n    \\\"BLADE-51b Tesla Armor: Unibeam Upgrade\\\",\\n    \\\"BLADE-51b Tesla Armor: Omnibeam Upgrade\\\",\\n    \\\"BLADE-51b Tesla Armor: IPU Upgrade\\\",\\n    \\\"The Blade's Simulacrum\\\"\\n  ]\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/getOwnedAugmentations.txt\",\"text\":\"[\\n  \\\"Neurotrainer I\\\",\\n  \\\"Wired Reflexes\\\",\\n  \\\"NeuroFlux Governor\\\",\\n  \\\"LuminCloaking-V1 Skin Implant\\\",\\n  \\\"LuminCloaking-V2 Skin Implant\\\",\\n  \\\"Augmented Targeting I\\\",\\n  \\\"Social Negotiation Assistant (S.N.A)\\\",\\n  \\\"ADR-V1 Pheromone Gene\\\",\\n  \\\"Combat Rib I\\\",\\n  \\\"BrachiBlades\\\",\\n  \\\"SmartSonar Implant\\\",\\n  \\\"Combat Rib II\\\",\\n  \\\"DermaForce Particle Barrier\\\",\\n  \\\"HemoRecirculator\\\",\\n  \\\"Neurotrainer II\\\",\\n  \\\"Augmented Targeting II\\\",\\n  \\\"NutriGen Implant\\\",\\n  \\\"Synthetic Heart\\\",\\n  \\\"HyperSight Corneal Implant\\\",\\n  \\\"FocusWire\\\",\\n  \\\"Synfibril Muscle\\\",\\n  \\\"The Black Hand\\\",\\n  \\\"ADR-V2 Pheromone Gene\\\",\\n  \\\"The Shadow's Simulacrum\\\",\\n  \\\"Power Recirculation Core\\\",\\n  \\\"Bionic Legs\\\",\\n  \\\"Neurotrainer III\\\",\\n  \\\"Bionic Spine\\\",\\n  \\\"Nanofiber Weave\\\",\\n  \\\"Combat Rib III\\\",\\n  \\\"Augmented Targeting III\\\",\\n  \\\"Graphene Bionic Spine Upgrade\\\",\\n  \\\"CordiARC Fusion Reactor\\\",\\n  \\\"Graphene Bionic Legs Upgrade\\\",\\n  \\\"Xanipher\\\",\\n  \\\"EsperTech Bladeburner Eyewear\\\",\\n  \\\"Hacknet Node Kernel Direct-Neural Interface\\\",\\n  \\\"Hacknet Node CPU Architecture Neural-Upload\\\",\\n  \\\"Hacknet Node Cache Architecture Neural-Upload\\\",\\n  \\\"Hacknet Node NIC Architecture Neural-Upload\\\",\\n  \\\"The Blade's Simulacrum\\\",\\n  \\\"GOLEM Serum\\\",\\n  \\\"Blade's Runners\\\",\\n  \\\"I.N.T.E.R.L.I.N.K.E.D\\\",\\n  \\\"Graphene Bone Lacings\\\",\\n  \\\"NEMEAN Subdermal Weave\\\",\\n  \\\"Vangelis Virus\\\",\\n  \\\"BLADE-51b Tesla Armor\\\",\\n  \\\"ORION-MKIV Shoulder\\\",\\n  \\\"Hacknet Node Core Direct-Neural Interface\\\"\\n]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/augRepReq.txt\",\"text\":\"{\\n  \\\"NeuroFlux Governor\\\": 13230.957906168125,\\n  \\\"Synthetic Heart\\\": 750000,\\n  \\\"Synfibril Muscle\\\": 437500,\\n  \\\"NEMEAN Subdermal Weave\\\": 875000,\\n  \\\"Embedded Netburner Module Core V3 Upgrade\\\": 1750000,\\n  \\\"Embedded Netburner Module Analyze Engine\\\": 625000,\\n  \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\": 1000000,\\n  \\\"QLink\\\": 1875000,\\n  \\\"The Red Pill\\\": 2500000,\\n  \\\"Augmented Targeting III\\\": 27500,\\n  \\\"Combat Rib III\\\": 35000,\\n  \\\"Graphene Bone Lacings\\\": 1125000,\\n  \\\"SPTN-97 Gene Modification\\\": 1250000,\\n  \\\"Graphene Bionic Spine Upgrade\\\": 1625000,\\n  \\\"Graphene Bionic Legs Upgrade\\\": 750000,\\n  \\\"Embedded Netburner Module\\\": 15000,\\n  \\\"Embedded Netburner Module Core Implant\\\": 175000,\\n  \\\"Embedded Netburner Module Core V2 Upgrade\\\": 1000000,\\n  \\\"PC Direct-Neural Interface\\\": 375000,\\n  \\\"PC Direct-Neural Interface Optimization Submodule\\\": 500000,\\n  \\\"ECorp HVMind Implant\\\": 1500000,\\n  \\\"ADR-V1 Pheromone Gene\\\": 3750,\\n  \\\"CordiARC Fusion Reactor\\\": 1125000,\\n  \\\"Enhanced Social Interaction Implant\\\": 375000,\\n  \\\"Neuralstimulator\\\": 50000,\\n  \\\"Nuoptimal Nootropic Injector Implant\\\": 5000,\\n  \\\"Speech Enhancement\\\": 2500,\\n  \\\"FocusWire\\\": 75000,\\n  \\\"ADR-V2 Pheromone Gene\\\": 62500,\\n  \\\"SmartJaw\\\": 375000,\\n  \\\"Augmented Targeting I\\\": 5000,\\n  \\\"Augmented Targeting II\\\": 8750,\\n  \\\"Combat Rib I\\\": 7500,\\n  \\\"Combat Rib II\\\": 18750,\\n  \\\"Nanofiber Weave\\\": 37500,\\n  \\\"Bionic Spine\\\": 45000,\\n  \\\"Bionic Legs\\\": 150000,\\n  \\\"HyperSight Corneal Implant\\\": 150000,\\n  \\\"Neotra\\\": 562500,\\n  \\\"Neurotrainer III\\\": 25000,\\n  \\\"Power Recirculation Core\\\": 25000,\\n  \\\"Xanipher\\\": 875000,\\n  \\\"Hydroflame Left Arm\\\": 1250000,\\n  \\\"Neuronal Densification\\\": 187500,\\n  \\\"nextSENS Gene Modification\\\": 437500,\\n  \\\"OmniTek InfoLoad\\\": 625000,\\n  \\\"Photosynthetic Cells\\\": 562500,\\n  \\\"Artificial Bio-neural Network Implant\\\": 275000,\\n  \\\"Enhanced Myelin Sheathing\\\": 100000,\\n  \\\"PC Direct-Neural Interface NeuroNet Injector\\\": 1500000,\\n  \\\"DataJack\\\": 112500,\\n  \\\"Neural Accelerator\\\": 200000,\\n  \\\"Cranial Signal Processors - Gen III\\\": 50000,\\n  \\\"Cranial Signal Processors - Gen IV\\\": 125000,\\n  \\\"Cranial Signal Processors - Gen V\\\": 250000,\\n  \\\"Neurotrainer II\\\": 10000,\\n  \\\"BitRunners Neurolink\\\": 875000,\\n  \\\"Artificial Synaptic Potentiation\\\": 6250,\\n  \\\"The Black Hand\\\": 100000,\\n  \\\"BitWire\\\": 3750,\\n  \\\"Neural-Retention Enhancement\\\": 20000,\\n  \\\"Cranial Signal Processors - Gen I\\\": 10000,\\n  \\\"Cranial Signal Processors - Gen II\\\": 18750,\\n  \\\"CRTX42-AA Gene Modification\\\": 45000,\\n  \\\"Wired Reflexes\\\": 1250,\\n  \\\"Speech Processor Implant\\\": 7500,\\n  \\\"Synaptic Enhancement Implant\\\": 2000,\\n  \\\"Neurotrainer I\\\": 1000,\\n  \\\"PCMatrix\\\": 100000,\\n  \\\"Neuregen Gene Modification\\\": 37500,\\n  \\\"INFRARET Enhancement\\\": 7500,\\n  \\\"NutriGen Implant\\\": 6250,\\n  \\\"CashRoot Starter Kit\\\": 12500,\\n  \\\"DermaForce Particle Barrier\\\": 15000,\\n  \\\"Unstable Circadian Modulator\\\": 362500,\\n  \\\"The Shadow's Simulacrum\\\": 37500,\\n  \\\"Graphene BrachiBlades Upgrade\\\": 225000,\\n  \\\"HemoRecirculator\\\": 10000,\\n  \\\"Graphene Bionic Arms Upgrade\\\": 500000,\\n  \\\"BrachiBlades\\\": 12500,\\n  \\\"TITN-41 Gene-Modification Injection\\\": 25000,\\n  \\\"LuminCloaking-V1 Skin Implant\\\": 1500,\\n  \\\"LuminCloaking-V2 Skin Implant\\\": 5000,\\n  \\\"Bionic Arms\\\": 62500,\\n  \\\"Hacknet Node NIC Architecture Neural-Upload\\\": 1875,\\n  \\\"Hacknet Node Kernel Direct-Neural Interface\\\": 7500,\\n  \\\"SmartSonar Implant\\\": 22500,\\n  \\\"Hacknet Node CPU Architecture Neural-Upload\\\": 3750,\\n  \\\"Hacknet Node Cache Architecture Neural-Upload\\\": 2500,\\n  \\\"Hacknet Node Core Direct-Neural Interface\\\": 12500,\\n  \\\"Social Negotiation Assistant (S.N.A)\\\": 6250,\\n  \\\"Neuroreceptor Management Implant\\\": 75000,\\n  \\\"EsperTech Bladeburner Eyewear\\\": 1250,\\n  \\\"EMS-4 Recombination\\\": 2500,\\n  \\\"ORION-MKIV Shoulder\\\": 6250,\\n  \\\"Hyperion Plasma Cannon V1\\\": 12500,\\n  \\\"Hyperion Plasma Cannon V2\\\": 25000,\\n  \\\"GOLEM Serum\\\": 31250,\\n  \\\"Vangelis Virus\\\": 18750,\\n  \\\"Vangelis Virus 3.0\\\": 37500,\\n  \\\"I.N.T.E.R.L.I.N.K.E.D\\\": 25000,\\n  \\\"Blade's Runners\\\": 20000,\\n  \\\"BLADE-51b Tesla Armor\\\": 12500,\\n  \\\"BLADE-51b Tesla Armor: Power Cells Upgrade\\\": 18750,\\n  \\\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\\\": 21250,\\n  \\\"BLADE-51b Tesla Armor: Unibeam Upgrade\\\": 31250,\\n  \\\"BLADE-51b Tesla Armor: Omnibeam Upgrade\\\": 62500,\\n  \\\"BLADE-51b Tesla Armor: IPU Upgrade\\\": 15000,\\n  \\\"The Blade's Simulacrum\\\": 1250\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/augStats.txt\",\"text\":\"{\\n  \\\"NeuroFlux Governor\\\": {\\n    \\\"hacking_mult\\\": 1.01000004,\\n    \\\"strength_mult\\\": 1.01000004,\\n    \\\"defense_mult\\\": 1.01000004,\\n    \\\"dexterity_mult\\\": 1.01000004,\\n    \\\"agility_mult\\\": 1.01000004,\\n    \\\"charisma_mult\\\": 1.01000004,\\n    \\\"hacking_exp_mult\\\": 1.01000004,\\n    \\\"strength_exp_mult\\\": 1.01000004,\\n    \\\"defense_exp_mult\\\": 1.01000004,\\n    \\\"dexterity_exp_mult\\\": 1.01000004,\\n    \\\"agility_exp_mult\\\": 1.01000004,\\n    \\\"charisma_exp_mult\\\": 1.01000004,\\n    \\\"hacking_chance_mult\\\": 1.01000004,\\n    \\\"hacking_speed_mult\\\": 1.01000004,\\n    \\\"hacking_money_mult\\\": 1.01000004,\\n    \\\"hacking_grow_mult\\\": 1.01000004,\\n    \\\"company_rep_mult\\\": 1.01000004,\\n    \\\"faction_rep_mult\\\": 1.01000004,\\n    \\\"crime_money_mult\\\": 1.01000004,\\n    \\\"crime_success_mult\\\": 1.01000004,\\n    \\\"work_money_mult\\\": 1.01000004,\\n    \\\"hacknet_node_money_mult\\\": 1.01000004,\\n    \\\"hacknet_node_purchase_cost_mult\\\": 0.9900989706891496,\\n    \\\"hacknet_node_ram_cost_mult\\\": 0.9900989706891496,\\n    \\\"hacknet_node_core_cost_mult\\\": 0.9900989706891496,\\n    \\\"hacknet_node_level_cost_mult\\\": 0.9900989706891496,\\n    \\\"price\\\": 19846436.85925219\\n  },\\n  \\\"Synthetic Heart\\\": {\\n    \\\"strength_mult\\\": 1.5,\\n    \\\"agility_mult\\\": 1.5,\\n    \\\"price\\\": 2875000000\\n  },\\n  \\\"Synfibril Muscle\\\": {\\n    \\\"strength_mult\\\": 1.3,\\n    \\\"defense_mult\\\": 1.3,\\n    \\\"price\\\": 1125000000\\n  },\\n  \\\"NEMEAN Subdermal Weave\\\": {\\n    \\\"defense_mult\\\": 2.2,\\n    \\\"price\\\": 3250000000\\n  },\\n  \\\"Embedded Netburner Module Core V3 Upgrade\\\": {\\n    \\\"hacking_mult\\\": 1.1,\\n    \\\"hacking_exp_mult\\\": 1.25,\\n    \\\"hacking_chance_mult\\\": 1.1,\\n    \\\"hacking_speed_mult\\\": 1.05,\\n    \\\"hacking_money_mult\\\": 1.4,\\n    \\\"price\\\": 7500000000\\n  },\\n  \\\"Embedded Netburner Module Analyze Engine\\\": {\\n    \\\"hacking_speed_mult\\\": 1.1,\\n    \\\"price\\\": 6000000000\\n  },\\n  \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\": {\\n    \\\"hacking_chance_mult\\\": 1.2,\\n    \\\"hacking_money_mult\\\": 1.4,\\n    \\\"price\\\": 7000000000\\n  },\\n  \\\"QLink\\\": {\\n    \\\"hacking_mult\\\": 1.75,\\n    \\\"hacking_chance_mult\\\": 2.5,\\n    \\\"hacking_speed_mult\\\": 2,\\n    \\\"hacking_money_mult\\\": 4,\\n    \\\"price\\\": 25000000000000\\n  },\\n  \\\"The Red Pill\\\": {\\n    \\\"price\\\": 0\\n  },\\n  \\\"Augmented Targeting III\\\": {\\n    \\\"dexterity_mult\\\": 1.3,\\n    \\\"price\\\": 115000000\\n  },\\n  \\\"Combat Rib III\\\": {\\n    \\\"strength_mult\\\": 1.18,\\n    \\\"defense_mult\\\": 1.18,\\n    \\\"price\\\": 120000000\\n  },\\n  \\\"Graphene Bone Lacings\\\": {\\n    \\\"strength_mult\\\": 1.7,\\n    \\\"defense_mult\\\": 1.7,\\n    \\\"price\\\": 4250000000\\n  },\\n  \\\"SPTN-97 Gene Modification\\\": {\\n    \\\"hacking_mult\\\": 1.15,\\n    \\\"strength_mult\\\": 1.75,\\n    \\\"defense_mult\\\": 1.75,\\n    \\\"dexterity_mult\\\": 1.75,\\n    \\\"agility_mult\\\": 1.75,\\n    \\\"price\\\": 4875000000\\n  },\\n  \\\"Graphene Bionic Spine Upgrade\\\": {\\n    \\\"strength_mult\\\": 1.6,\\n    \\\"defense_mult\\\": 1.6,\\n    \\\"dexterity_mult\\\": 1.6,\\n    \\\"agility_mult\\\": 1.6,\\n    \\\"price\\\": 6000000000\\n  },\\n  \\\"Graphene Bionic Legs Upgrade\\\": {\\n    \\\"agility_mult\\\": 2.5,\\n    \\\"price\\\": 4500000000\\n  },\\n  \\\"Embedded Netburner Module\\\": {\\n    \\\"hacking_mult\\\": 1.08,\\n    \\\"price\\\": 250000000\\n  },\\n  \\\"Embedded Netburner Module Core Implant\\\": {\\n    \\\"hacking_mult\\\": 1.07,\\n    \\\"hacking_exp_mult\\\": 1.07,\\n    \\\"hacking_chance_mult\\\": 1.03,\\n    \\\"hacking_speed_mult\\\": 1.03,\\n    \\\"hacking_money_mult\\\": 1.1,\\n    \\\"price\\\": 2500000000\\n  },\\n  \\\"Embedded Netburner Module Core V2 Upgrade\\\": {\\n    \\\"hacking_mult\\\": 1.08,\\n    \\\"hacking_exp_mult\\\": 1.15,\\n    \\\"hacking_chance_mult\\\": 1.05,\\n    \\\"hacking_speed_mult\\\": 1.05,\\n    \\\"hacking_money_mult\\\": 1.3,\\n    \\\"price\\\": 4500000000\\n  },\\n  \\\"PC Direct-Neural Interface\\\": {\\n    \\\"hacking_mult\\\": 1.08,\\n    \\\"company_rep_mult\\\": 1.3,\\n    \\\"price\\\": 3750000000\\n  },\\n  \\\"PC Direct-Neural Interface Optimization Submodule\\\": {\\n    \\\"hacking_mult\\\": 1.1,\\n    \\\"company_rep_mult\\\": 1.75,\\n    \\\"price\\\": 4500000000\\n  },\\n  \\\"ECorp HVMind Implant\\\": {\\n    \\\"hacking_grow_mult\\\": 3,\\n    \\\"price\\\": 5500000000\\n  },\\n  \\\"ADR-V1 Pheromone Gene\\\": {\\n    \\\"company_rep_mult\\\": 1.1,\\n    \\\"faction_rep_mult\\\": 1.1,\\n    \\\"price\\\": 17500000\\n  },\\n  \\\"CordiARC Fusion Reactor\\\": {\\n    \\\"strength_mult\\\": 1.35,\\n    \\\"defense_mult\\\": 1.35,\\n    \\\"dexterity_mult\\\": 1.35,\\n    \\\"agility_mult\\\": 1.35,\\n    \\\"strength_exp_mult\\\": 1.35,\\n    \\\"defense_exp_mult\\\": 1.35,\\n    \\\"dexterity_exp_mult\\\": 1.35,\\n    \\\"agility_exp_mult\\\": 1.35,\\n    \\\"price\\\": 5000000000\\n  },\\n  \\\"Enhanced Social Interaction Implant\\\": {\\n    \\\"charisma_mult\\\": 1.6,\\n    \\\"charisma_exp_mult\\\": 1.6,\\n    \\\"price\\\": 1375000000\\n  },\\n  \\\"Neuralstimulator\\\": {\\n    \\\"hacking_exp_mult\\\": 1.12,\\n    \\\"hacking_chance_mult\\\": 1.1,\\n    \\\"hacking_speed_mult\\\": 1.02,\\n    \\\"price\\\": 3000000000\\n  },\\n  \\\"Nuoptimal Nootropic Injector Implant\\\": {\\n    \\\"company_rep_mult\\\": 1.2,\\n    \\\"price\\\": 20000000\\n  },\\n  \\\"Speech Enhancement\\\": {\\n    \\\"charisma_mult\\\": 1.1,\\n    \\\"company_rep_mult\\\": 1.1,\\n    \\\"price\\\": 12500000\\n  },\\n  \\\"FocusWire\\\": {\\n    \\\"hacking_exp_mult\\\": 1.05,\\n    \\\"strength_exp_mult\\\": 1.05,\\n    \\\"defense_exp_mult\\\": 1.05,\\n    \\\"dexterity_exp_mult\\\": 1.05,\\n    \\\"agility_exp_mult\\\": 1.05,\\n    \\\"charisma_exp_mult\\\": 1.05,\\n    \\\"company_rep_mult\\\": 1.1,\\n    \\\"work_money_mult\\\": 1.2,\\n    \\\"price\\\": 900000000\\n  },\\n  \\\"ADR-V2 Pheromone Gene\\\": {\\n    \\\"company_rep_mult\\\": 1.2,\\n    \\\"faction_rep_mult\\\": 1.2,\\n    \\\"price\\\": 550000000\\n  },\\n  \\\"SmartJaw\\\": {\\n    \\\"charisma_mult\\\": 1.5,\\n    \\\"charisma_exp_mult\\\": 1.5,\\n    \\\"company_rep_mult\\\": 1.25,\\n    \\\"faction_rep_mult\\\": 1.25,\\n    \\\"price\\\": 2750000000\\n  },\\n  \\\"Augmented Targeting I\\\": {\\n    \\\"dexterity_mult\\\": 1.1,\\n    \\\"price\\\": 15000000\\n  },\\n  \\\"Augmented Targeting II\\\": {\\n    \\\"dexterity_mult\\\": 1.2,\\n    \\\"price\\\": 42500000\\n  },\\n  \\\"Combat Rib I\\\": {\\n    \\\"strength_mult\\\": 1.1,\\n    \\\"defense_mult\\\": 1.1,\\n    \\\"price\\\": 23750000\\n  },\\n  \\\"Combat Rib II\\\": {\\n    \\\"strength_mult\\\": 1.14,\\n    \\\"defense_mult\\\": 1.14,\\n    \\\"price\\\": 65000000\\n  },\\n  \\\"Nanofiber Weave\\\": {\\n    \\\"strength_mult\\\": 1.2,\\n    \\\"defense_mult\\\": 1.2,\\n    \\\"price\\\": 125000000\\n  },\\n  \\\"Bionic Spine\\\": {\\n    \\\"strength_mult\\\": 1.15,\\n    \\\"defense_mult\\\": 1.15,\\n    \\\"dexterity_mult\\\": 1.15,\\n    \\\"agility_mult\\\": 1.15,\\n    \\\"price\\\": 125000000\\n  },\\n  \\\"Bionic Legs\\\": {\\n    \\\"agility_mult\\\": 1.6,\\n    \\\"price\\\": 375000000\\n  },\\n  \\\"HyperSight Corneal Implant\\\": {\\n    \\\"dexterity_mult\\\": 1.4,\\n    \\\"hacking_speed_mult\\\": 1.03,\\n    \\\"hacking_money_mult\\\": 1.1,\\n    \\\"price\\\": 2750000000\\n  },\\n  \\\"Neotra\\\": {\\n    \\\"strength_mult\\\": 1.55,\\n    \\\"defense_mult\\\": 1.55,\\n    \\\"price\\\": 2875000000\\n  },\\n  \\\"Neurotrainer III\\\": {\\n    \\\"hacking_exp_mult\\\": 1.2,\\n    \\\"strength_exp_mult\\\": 1.2,\\n    \\\"defense_exp_mult\\\": 1.2,\\n    \\\"dexterity_exp_mult\\\": 1.2,\\n    \\\"agility_exp_mult\\\": 1.2,\\n    \\\"charisma_exp_mult\\\": 1.2,\\n    \\\"price\\\": 130000000\\n  },\\n  \\\"Power Recirculation Core\\\": {\\n    \\\"hacking_mult\\\": 1.05,\\n    \\\"strength_mult\\\": 1.05,\\n    \\\"defense_mult\\\": 1.05,\\n    \\\"dexterity_mult\\\": 1.05,\\n    \\\"agility_mult\\\": 1.05,\\n    \\\"charisma_mult\\\": 1.05,\\n    \\\"hacking_exp_mult\\\": 1.1,\\n    \\\"strength_exp_mult\\\": 1.1,\\n    \\\"defense_exp_mult\\\": 1.1,\\n    \\\"dexterity_exp_mult\\\": 1.1,\\n    \\\"agility_exp_mult\\\": 1.1,\\n    \\\"charisma_exp_mult\\\": 1.1,\\n    \\\"price\\\": 180000000\\n  },\\n  \\\"Xanipher\\\": {\\n    \\\"hacking_mult\\\": 1.2,\\n    \\\"strength_mult\\\": 1.2,\\n    \\\"defense_mult\\\": 1.2,\\n    \\\"dexterity_mult\\\": 1.2,\\n    \\\"agility_mult\\\": 1.2,\\n    \\\"charisma_mult\\\": 1.2,\\n    \\\"hacking_exp_mult\\\": 1.15,\\n    \\\"strength_exp_mult\\\": 1.15,\\n    \\\"defense_exp_mult\\\": 1.15,\\n    \\\"dexterity_exp_mult\\\": 1.15,\\n    \\\"agility_exp_mult\\\": 1.15,\\n    \\\"charisma_exp_mult\\\": 1.15,\\n    \\\"price\\\": 4250000000\\n  },\\n  \\\"Hydroflame Left Arm\\\": {\\n    \\\"strength_mult\\\": 2.7,\\n    \\\"price\\\": 2500000000000\\n  },\\n  \\\"Neuronal Densification\\\": {\\n    \\\"hacking_mult\\\": 1.15,\\n    \\\"hacking_exp_mult\\\": 1.1,\\n    \\\"hacking_speed_mult\\\": 1.03,\\n    \\\"price\\\": 1375000000\\n  },\\n  \\\"nextSENS Gene Modification\\\": {\\n    \\\"hacking_mult\\\": 1.2,\\n    \\\"strength_mult\\\": 1.2,\\n    \\\"defense_mult\\\": 1.2,\\n    \\\"dexterity_mult\\\": 1.2,\\n    \\\"agility_mult\\\": 1.2,\\n    \\\"charisma_mult\\\": 1.2,\\n    \\\"price\\\": 1925000000\\n  },\\n  \\\"OmniTek InfoLoad\\\": {\\n    \\\"hacking_mult\\\": 1.2,\\n    \\\"hacking_exp_mult\\\": 1.25,\\n    \\\"price\\\": 2875000000\\n  },\\n  \\\"Photosynthetic Cells\\\": {\\n    \\\"strength_mult\\\": 1.4,\\n    \\\"defense_mult\\\": 1.4,\\n    \\\"agility_mult\\\": 1.4,\\n    \\\"price\\\": 2750000000\\n  },\\n  \\\"Artificial Bio-neural Network Implant\\\": {\\n    \\\"hacking_mult\\\": 1.12,\\n    \\\"hacking_speed_mult\\\": 1.03,\\n    \\\"hacking_money_mult\\\": 1.15,\\n    \\\"price\\\": 3000000000\\n  },\\n  \\\"Enhanced Myelin Sheathing\\\": {\\n    \\\"hacking_mult\\\": 1.08,\\n    \\\"hacking_exp_mult\\\": 1.1,\\n    \\\"hacking_speed_mult\\\": 1.03,\\n    \\\"price\\\": 1375000000\\n  },\\n  \\\"PC Direct-Neural Interface NeuroNet Injector\\\": {\\n    \\\"hacking_mult\\\": 1.1,\\n    \\\"hacking_speed_mult\\\": 1.05,\\n    \\\"company_rep_mult\\\": 2,\\n    \\\"price\\\": 7500000000\\n  },\\n  \\\"DataJack\\\": {\\n    \\\"hacking_money_mult\\\": 1.25,\\n    \\\"price\\\": 450000000\\n  },\\n  \\\"Neural Accelerator\\\": {\\n    \\\"hacking_mult\\\": 1.1,\\n    \\\"hacking_exp_mult\\\": 1.15,\\n    \\\"hacking_money_mult\\\": 1.2,\\n    \\\"price\\\": 1750000000\\n  },\\n  \\\"Cranial Signal Processors - Gen III\\\": {\\n    \\\"hacking_mult\\\": 1.09,\\n    \\\"hacking_speed_mult\\\": 1.02,\\n    \\\"hacking_money_mult\\\": 1.15,\\n    \\\"price\\\": 550000000\\n  },\\n  \\\"Cranial Signal Processors - Gen IV\\\": {\\n    \\\"hacking_speed_mult\\\": 1.02,\\n    \\\"hacking_money_mult\\\": 1.2,\\n    \\\"hacking_grow_mult\\\": 1.25,\\n    \\\"price\\\": 1100000000\\n  },\\n  \\\"Cranial Signal Processors - Gen V\\\": {\\n    \\\"hacking_mult\\\": 1.3,\\n    \\\"hacking_money_mult\\\": 1.25,\\n    \\\"hacking_grow_mult\\\": 1.75,\\n    \\\"price\\\": 2250000000\\n  },\\n  \\\"Neurotrainer II\\\": {\\n    \\\"hacking_exp_mult\\\": 1.15,\\n    \\\"strength_exp_mult\\\": 1.15,\\n    \\\"defense_exp_mult\\\": 1.15,\\n    \\\"dexterity_exp_mult\\\": 1.15,\\n    \\\"agility_exp_mult\\\": 1.15,\\n    \\\"charisma_exp_mult\\\": 1.15,\\n    \\\"price\\\": 45000000\\n  },\\n  \\\"BitRunners Neurolink\\\": {\\n    \\\"hacking_mult\\\": 1.15,\\n    \\\"hacking_exp_mult\\\": 1.2,\\n    \\\"hacking_chance_mult\\\": 1.1,\\n    \\\"hacking_speed_mult\\\": 1.05,\\n    \\\"price\\\": 4375000000\\n  },\\n  \\\"Artificial Synaptic Potentiation\\\": {\\n    \\\"hacking_exp_mult\\\": 1.05,\\n    \\\"hacking_chance_mult\\\": 1.05,\\n    \\\"hacking_speed_mult\\\": 1.02,\\n    \\\"price\\\": 80000000\\n  },\\n  \\\"The Black Hand\\\": {\\n    \\\"hacking_mult\\\": 1.1,\\n    \\\"strength_mult\\\": 1.15,\\n    \\\"dexterity_mult\\\": 1.15,\\n    \\\"hacking_speed_mult\\\": 1.02,\\n    \\\"hacking_money_mult\\\": 1.1,\\n    \\\"price\\\": 550000000\\n  },\\n  \\\"BitWire\\\": {\\n    \\\"hacking_mult\\\": 1.05,\\n    \\\"price\\\": 10000000\\n  },\\n  \\\"Neural-Retention Enhancement\\\": {\\n    \\\"hacking_exp_mult\\\": 1.25,\\n    \\\"price\\\": 250000000\\n  },\\n  \\\"Cranial Signal Processors - Gen I\\\": {\\n    \\\"hacking_mult\\\": 1.05,\\n    \\\"hacking_speed_mult\\\": 1.01,\\n    \\\"price\\\": 70000000\\n  },\\n  \\\"Cranial Signal Processors - Gen II\\\": {\\n    \\\"hacking_mult\\\": 1.07,\\n    \\\"hacking_chance_mult\\\": 1.05,\\n    \\\"hacking_speed_mult\\\": 1.02,\\n    \\\"price\\\": 125000000\\n  },\\n  \\\"CRTX42-AA Gene Modification\\\": {\\n    \\\"hacking_mult\\\": 1.08,\\n    \\\"hacking_exp_mult\\\": 1.15,\\n    \\\"price\\\": 225000000\\n  },\\n  \\\"Wired Reflexes\\\": {\\n    \\\"dexterity_mult\\\": 1.05,\\n    \\\"agility_mult\\\": 1.05,\\n    \\\"price\\\": 2500000\\n  },\\n  \\\"Speech Processor Implant\\\": {\\n    \\\"charisma_mult\\\": 1.2,\\n    \\\"price\\\": 50000000\\n  },\\n  \\\"Synaptic Enhancement Implant\\\": {\\n    \\\"hacking_speed_mult\\\": 1.03,\\n    \\\"price\\\": 7500000\\n  },\\n  \\\"Neurotrainer I\\\": {\\n    \\\"hacking_exp_mult\\\": 1.1,\\n    \\\"strength_exp_mult\\\": 1.1,\\n    \\\"defense_exp_mult\\\": 1.1,\\n    \\\"dexterity_exp_mult\\\": 1.1,\\n    \\\"agility_exp_mult\\\": 1.1,\\n    \\\"charisma_exp_mult\\\": 1.1,\\n    \\\"price\\\": 4000000\\n  },\\n  \\\"PCMatrix\\\": {\\n    \\\"charisma_mult\\\": 1.0777,\\n    \\\"charisma_exp_mult\\\": 1.0777,\\n    \\\"company_rep_mult\\\": 1.0777,\\n    \\\"faction_rep_mult\\\": 1.0777,\\n    \\\"crime_money_mult\\\": 1.0777,\\n    \\\"crime_success_mult\\\": 1.0777,\\n    \\\"work_money_mult\\\": 1.777,\\n    \\\"price\\\": 2000000000\\n  },\\n  \\\"Neuregen Gene Modification\\\": {\\n    \\\"hacking_exp_mult\\\": 1.4,\\n    \\\"price\\\": 375000000\\n  },\\n  \\\"INFRARET Enhancement\\\": {\\n    \\\"dexterity_mult\\\": 1.1,\\n    \\\"crime_money_mult\\\": 1.1,\\n    \\\"crime_success_mult\\\": 1.25,\\n    \\\"price\\\": 30000000\\n  },\\n  \\\"NutriGen Implant\\\": {\\n    \\\"strength_exp_mult\\\": 1.2,\\n    \\\"defense_exp_mult\\\": 1.2,\\n    \\\"dexterity_exp_mult\\\": 1.2,\\n    \\\"agility_exp_mult\\\": 1.2,\\n    \\\"price\\\": 2500000\\n  },\\n  \\\"CashRoot Starter Kit\\\": {\\n    \\\"price\\\": 125000000\\n  },\\n  \\\"DermaForce Particle Barrier\\\": {\\n    \\\"defense_mult\\\": 1.4,\\n    \\\"price\\\": 50000000\\n  },\\n  \\\"Unstable Circadian Modulator\\\": {\\n    \\\"charisma_mult\\\": 1.5,\\n    \\\"charisma_exp_mult\\\": 2,\\n    \\\"price\\\": 5000000000\\n  },\\n  \\\"The Shadow's Simulacrum\\\": {\\n    \\\"company_rep_mult\\\": 1.15,\\n    \\\"faction_rep_mult\\\": 1.15,\\n    \\\"price\\\": 400000000\\n  },\\n  \\\"Graphene BrachiBlades Upgrade\\\": {\\n    \\\"strength_mult\\\": 1.4,\\n    \\\"defense_mult\\\": 1.4,\\n    \\\"crime_money_mult\\\": 1.3,\\n    \\\"crime_success_mult\\\": 1.1,\\n    \\\"price\\\": 2500000000\\n  },\\n  \\\"HemoRecirculator\\\": {\\n    \\\"strength_mult\\\": 1.08,\\n    \\\"defense_mult\\\": 1.08,\\n    \\\"dexterity_mult\\\": 1.08,\\n    \\\"agility_mult\\\": 1.08,\\n    \\\"price\\\": 45000000\\n  },\\n  \\\"Graphene Bionic Arms Upgrade\\\": {\\n    \\\"strength_mult\\\": 1.85,\\n    \\\"dexterity_mult\\\": 1.85,\\n    \\\"price\\\": 3750000000\\n  },\\n  \\\"BrachiBlades\\\": {\\n    \\\"strength_mult\\\": 1.15,\\n    \\\"defense_mult\\\": 1.15,\\n    \\\"crime_money_mult\\\": 1.15,\\n    \\\"crime_success_mult\\\": 1.1,\\n    \\\"price\\\": 90000000\\n  },\\n  \\\"TITN-41 Gene-Modification Injection\\\": {\\n    \\\"charisma_mult\\\": 1.15,\\n    \\\"charisma_exp_mult\\\": 1.15,\\n    \\\"price\\\": 190000000\\n  },\\n  \\\"LuminCloaking-V1 Skin Implant\\\": {\\n    \\\"agility_mult\\\": 1.05,\\n    \\\"crime_money_mult\\\": 1.1,\\n    \\\"price\\\": 5000000\\n  },\\n  \\\"LuminCloaking-V2 Skin Implant\\\": {\\n    \\\"defense_mult\\\": 1.1,\\n    \\\"agility_mult\\\": 1.1,\\n    \\\"crime_money_mult\\\": 1.25,\\n    \\\"price\\\": 30000000\\n  },\\n  \\\"Bionic Arms\\\": {\\n    \\\"strength_mult\\\": 1.3,\\n    \\\"dexterity_mult\\\": 1.3,\\n    \\\"price\\\": 275000000\\n  },\\n  \\\"Hacknet Node NIC Architecture Neural-Upload\\\": {\\n    \\\"hacknet_node_money_mult\\\": 1.1,\\n    \\\"hacknet_node_purchase_cost_mult\\\": 0.9,\\n    \\\"price\\\": 4500000\\n  },\\n  \\\"Hacknet Node Kernel Direct-Neural Interface\\\": {\\n    \\\"hacknet_node_money_mult\\\": 1.25,\\n    \\\"price\\\": 40000000\\n  },\\n  \\\"SmartSonar Implant\\\": {\\n    \\\"dexterity_mult\\\": 1.1,\\n    \\\"dexterity_exp_mult\\\": 1.15,\\n    \\\"crime_money_mult\\\": 1.25,\\n    \\\"price\\\": 75000000\\n  },\\n  \\\"Hacknet Node CPU Architecture Neural-Upload\\\": {\\n    \\\"hacknet_node_money_mult\\\": 1.15,\\n    \\\"hacknet_node_purchase_cost_mult\\\": 0.85,\\n    \\\"price\\\": 11000000\\n  },\\n  \\\"Hacknet Node Cache Architecture Neural-Upload\\\": {\\n    \\\"hacknet_node_money_mult\\\": 1.1,\\n    \\\"hacknet_node_level_cost_mult\\\": 0.85,\\n    \\\"price\\\": 5500000\\n  },\\n  \\\"Hacknet Node Core Direct-Neural Interface\\\": {\\n    \\\"hacknet_node_money_mult\\\": 1.45,\\n    \\\"price\\\": 60000000\\n  },\\n  \\\"Social Negotiation Assistant (S.N.A)\\\": {\\n    \\\"company_rep_mult\\\": 1.15,\\n    \\\"faction_rep_mult\\\": 1.15,\\n    \\\"work_money_mult\\\": 1.1,\\n    \\\"price\\\": 30000000\\n  },\\n  \\\"Neuroreceptor Management Implant\\\": {\\n    \\\"price\\\": 550000000\\n  },\\n  \\\"EsperTech Bladeburner Eyewear\\\": {\\n    \\\"dexterity_mult\\\": 1.05,\\n    \\\"bladeburner_success_chance_mult\\\": 1.03,\\n    \\\"price\\\": 165000000\\n  },\\n  \\\"EMS-4 Recombination\\\": {\\n    \\\"bladeburner_stamina_gain_mult\\\": 1.02,\\n    \\\"bladeburner_analysis_mult\\\": 1.05,\\n    \\\"bladeburner_success_chance_mult\\\": 1.03,\\n    \\\"price\\\": 275000000\\n  },\\n  \\\"ORION-MKIV Shoulder\\\": {\\n    \\\"strength_mult\\\": 1.05,\\n    \\\"defense_mult\\\": 1.05,\\n    \\\"dexterity_mult\\\": 1.05,\\n    \\\"bladeburner_success_chance_mult\\\": 1.04,\\n    \\\"price\\\": 550000000\\n  },\\n  \\\"Hyperion Plasma Cannon V1\\\": {\\n    \\\"bladeburner_success_chance_mult\\\": 1.06,\\n    \\\"price\\\": 2750000000\\n  },\\n  \\\"Hyperion Plasma Cannon V2\\\": {\\n    \\\"bladeburner_success_chance_mult\\\": 1.08,\\n    \\\"price\\\": 5500000000\\n  },\\n  \\\"GOLEM Serum\\\": {\\n    \\\"strength_mult\\\": 1.07,\\n    \\\"defense_mult\\\": 1.07,\\n    \\\"dexterity_mult\\\": 1.07,\\n    \\\"agility_mult\\\": 1.07,\\n    \\\"bladeburner_stamina_gain_mult\\\": 1.05,\\n    \\\"price\\\": 11000000000\\n  },\\n  \\\"Vangelis Virus\\\": {\\n    \\\"dexterity_exp_mult\\\": 1.1,\\n    \\\"bladeburner_analysis_mult\\\": 1.1,\\n    \\\"bladeburner_success_chance_mult\\\": 1.04,\\n    \\\"price\\\": 2750000000\\n  },\\n  \\\"Vangelis Virus 3.0\\\": {\\n    \\\"defense_exp_mult\\\": 1.1,\\n    \\\"dexterity_exp_mult\\\": 1.1,\\n    \\\"bladeburner_analysis_mult\\\": 1.15,\\n    \\\"bladeburner_success_chance_mult\\\": 1.05,\\n    \\\"price\\\": 11000000000\\n  },\\n  \\\"I.N.T.E.R.L.I.N.K.E.D\\\": {\\n    \\\"strength_exp_mult\\\": 1.05,\\n    \\\"defense_exp_mult\\\": 1.05,\\n    \\\"dexterity_exp_mult\\\": 1.05,\\n    \\\"agility_exp_mult\\\": 1.05,\\n    \\\"bladeburner_max_stamina_mult\\\": 1.1,\\n    \\\"price\\\": 5500000000\\n  },\\n  \\\"Blade's Runners\\\": {\\n    \\\"agility_mult\\\": 1.05,\\n    \\\"bladeburner_max_stamina_mult\\\": 1.05,\\n    \\\"bladeburner_stamina_gain_mult\\\": 1.05,\\n    \\\"price\\\": 8250000000\\n  },\\n  \\\"BLADE-51b Tesla Armor\\\": {\\n    \\\"strength_mult\\\": 1.04,\\n    \\\"defense_mult\\\": 1.04,\\n    \\\"dexterity_mult\\\": 1.04,\\n    \\\"agility_mult\\\": 1.04,\\n    \\\"bladeburner_stamina_gain_mult\\\": 1.02,\\n    \\\"bladeburner_success_chance_mult\\\": 1.03,\\n    \\\"price\\\": 1375000000\\n  },\\n  \\\"BLADE-51b Tesla Armor: Power Cells Upgrade\\\": {\\n    \\\"bladeburner_max_stamina_mult\\\": 1.05,\\n    \\\"bladeburner_stamina_gain_mult\\\": 1.02,\\n    \\\"bladeburner_success_chance_mult\\\": 1.05,\\n    \\\"price\\\": 2750000000\\n  },\\n  \\\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\\\": {\\n    \\\"defense_mult\\\": 1.05,\\n    \\\"bladeburner_success_chance_mult\\\": 1.06,\\n    \\\"price\\\": 5500000000\\n  },\\n  \\\"BLADE-51b Tesla Armor: Unibeam Upgrade\\\": {\\n    \\\"bladeburner_success_chance_mult\\\": 1.08,\\n    \\\"price\\\": 16500000000\\n  },\\n  \\\"BLADE-51b Tesla Armor: Omnibeam Upgrade\\\": {\\n    \\\"bladeburner_success_chance_mult\\\": 1.1,\\n    \\\"price\\\": 27500000000\\n  },\\n  \\\"BLADE-51b Tesla Armor: IPU Upgrade\\\": {\\n    \\\"bladeburner_analysis_mult\\\": 1.15,\\n    \\\"bladeburner_success_chance_mult\\\": 1.02,\\n    \\\"price\\\": 1100000000\\n  },\\n  \\\"The Blade's Simulacrum\\\": {\\n    \\\"price\\\": 150000000000\\n  }\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/sleeves_static.txt\",\"text\":\"{\\\"getNumSleeves\\\":8}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/n00dles.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"n00dles\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"3.5.8.5\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 4,\\n  \\\"organizationName\\\": \\\"Noodle Bar\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 2.5,\\n  \\\"hackDifficulty\\\": 2.5,\\n  \\\"minDifficulty\\\": 1,\\n  \\\"moneyAvailable\\\": 7000,\\n  \\\"moneyMax\\\": 17500,\\n  \\\"numOpenPortsRequired\\\": 0,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1,\\n  \\\"serverGrowth\\\": 3000\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/foodnstuff.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"foodnstuff\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"91.3.8.0\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\"FoodNStuff\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 25,\\n  \\\"hackDifficulty\\\": 25,\\n  \\\"minDifficulty\\\": 8,\\n  \\\"moneyAvailable\\\": 200000,\\n  \\\"moneyMax\\\": 500000,\\n  \\\"numOpenPortsRequired\\\": 0,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1,\\n  \\\"serverGrowth\\\": 5\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/sigma-cosmetics.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"sigma-cosmetics\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"79.3.6.7\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\"Sigma Cosmetics\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 25,\\n  \\\"hackDifficulty\\\": 25,\\n  \\\"minDifficulty\\\": 8,\\n  \\\"moneyAvailable\\\": 230000,\\n  \\\"moneyMax\\\": 575000,\\n  \\\"numOpenPortsRequired\\\": 0,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 5,\\n  \\\"serverGrowth\\\": 10\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/zer0.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"zer0\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"26.8.6.9\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"ZER0 Nightclub\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 62.5,\\n  \\\"hackDifficulty\\\": 62.5,\\n  \\\"minDifficulty\\\": 21,\\n  \\\"moneyAvailable\\\": 750000,\\n  \\\"moneyMax\\\": 1875000,\\n  \\\"numOpenPortsRequired\\\": 1,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 75,\\n  \\\"serverGrowth\\\": 40\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/silver-helix.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"silver-helix\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"39.5.5.4\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 64,\\n  \\\"organizationName\\\": \\\"Silver Helix\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 75,\\n  \\\"hackDifficulty\\\": 75,\\n  \\\"minDifficulty\\\": 25,\\n  \\\"moneyAvailable\\\": 4500000,\\n  \\\"moneyMax\\\": 11250000,\\n  \\\"numOpenPortsRequired\\\": 2,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 150,\\n  \\\"serverGrowth\\\": 30\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/computek.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"computek\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"48.1.5.1\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"CompuTek\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 137.5,\\n  \\\"hackDifficulty\\\": 137.5,\\n  \\\"minDifficulty\\\": 46,\\n  \\\"moneyAvailable\\\": 23391848.400000002,\\n  \\\"moneyMax\\\": 58479621,\\n  \\\"numOpenPortsRequired\\\": 3,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 371,\\n  \\\"serverGrowth\\\": 61\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/CSEC.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"CSEC\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"8.3.8.2\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 8,\\n  \\\"organizationName\\\": \\\"CyberSec\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 0,\\n  \\\"hackDifficulty\\\": 0,\\n  \\\"minDifficulty\\\": 1,\\n  \\\"moneyAvailable\\\": 0,\\n  \\\"moneyMax\\\": 0,\\n  \\\"numOpenPortsRequired\\\": 1,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 57,\\n  \\\"serverGrowth\\\": 0\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/neo-net.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"neo-net\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"4.8.6.6\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"Neo Nightclub Network\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 62.5,\\n  \\\"hackDifficulty\\\": 62.5,\\n  \\\"minDifficulty\\\": 21,\\n  \\\"moneyAvailable\\\": 500000,\\n  \\\"moneyMax\\\": 1250000,\\n  \\\"numOpenPortsRequired\\\": 1,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 50,\\n  \\\"serverGrowth\\\": 25\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/the-hub.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"the-hub\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"46.8.0.6\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"The Hub\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 102.5,\\n  \\\"hackDifficulty\\\": 102.5,\\n  \\\"minDifficulty\\\": 34,\\n  \\\"moneyAvailable\\\": 16778660.7,\\n  \\\"moneyMax\\\": 41946651.75,\\n  \\\"numOpenPortsRequired\\\": 2,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 307,\\n  \\\"serverGrowth\\\": 54\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/rothman-uni.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"rothman-uni\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"78.1.6.1\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"Rothman University\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 125,\\n  \\\"hackDifficulty\\\": 125,\\n  \\\"minDifficulty\\\": 42,\\n  \\\"moneyAvailable\\\": 19350407.6,\\n  \\\"moneyMax\\\": 48376019.00000001,\\n  \\\"numOpenPortsRequired\\\": 3,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 409,\\n  \\\"serverGrowth\\\": 42\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/zb-institute.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"zb-institute\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"63.9.1.9\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"ZB Institute of Technology\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 165,\\n  \\\"hackDifficulty\\\": 165,\\n  \\\"minDifficulty\\\": 55,\\n  \\\"moneyAvailable\\\": 93681151.5,\\n  \\\"moneyMax\\\": 234202878.75,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 728,\\n  \\\"serverGrowth\\\": 84\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/aevum-police.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"aevum-police\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"98.8.0.4\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 64,\\n  \\\"organizationName\\\": \\\"Aevum Police Headquarters\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 192.5,\\n  \\\"hackDifficulty\\\": 192.5,\\n  \\\"minDifficulty\\\": 64,\\n  \\\"moneyAvailable\\\": 33218698.5,\\n  \\\"moneyMax\\\": 83046746.25,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 450,\\n  \\\"serverGrowth\\\": 34\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/galactic-cyber.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"galactic-cyber\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"4.6.3.8\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Galactic Cybersystems\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 137.5,\\n  \\\"hackDifficulty\\\": 137.5,\\n  \\\"minDifficulty\\\": 46,\\n  \\\"moneyAvailable\\\": 80104703,\\n  \\\"moneyMax\\\": 200261757.5,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 865,\\n  \\\"serverGrowth\\\": 82\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/deltaone.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"deltaone\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"52.9.8.4\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"DeltaOne\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 187.5,\\n  \\\"hackDifficulty\\\": 187.5,\\n  \\\"minDifficulty\\\": 63,\\n  \\\"moneyAvailable\\\": 164221223.10000002,\\n  \\\"moneyMax\\\": 410553057.75000006,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 802,\\n  \\\"serverGrowth\\\": 69\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/icarus.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"icarus\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"87.7.4.8\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Icarus Microsystems\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 217.5,\\n  \\\"hackDifficulty\\\": 217.5,\\n  \\\"minDifficulty\\\": 73,\\n  \\\"moneyAvailable\\\": 94011399.4,\\n  \\\"moneyMax\\\": 235028498.5,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 856,\\n  \\\"serverGrowth\\\": 94\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/nova-med.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"nova-med\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"19.4.1.8\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Nova Medical\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 165,\\n  \\\"hackDifficulty\\\": 165,\\n  \\\"minDifficulty\\\": 55,\\n  \\\"moneyAvailable\\\": 112929500.9,\\n  \\\"moneyMax\\\": 282323752.25,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 781,\\n  \\\"serverGrowth\\\": 79\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/solaris.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"solaris\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"3.6.5.6\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 64,\\n  \\\"organizationName\\\": \\\"Solaris Space Systems\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 200,\\n  \\\"hackDifficulty\\\": 200,\\n  \\\"minDifficulty\\\": 67,\\n  \\\"moneyAvailable\\\": 75448339.4,\\n  \\\"moneyMax\\\": 188620848.50000003,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 817,\\n  \\\"serverGrowth\\\": 79\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/taiyang-digital.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"taiyang-digital\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"39.6.8.1\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Taiyang Digital\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 182.5,\\n  \\\"hackDifficulty\\\": 182.5,\\n  \\\"minDifficulty\\\": 61,\\n  \\\"moneyAvailable\\\": 88231211.60000001,\\n  \\\"moneyMax\\\": 220578029,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 931,\\n  \\\"serverGrowth\\\": 71\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/run4theh111z.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"run4theh111z\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"86.8.6.1\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"The Runners\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 0,\\n  \\\"hackDifficulty\\\": 0,\\n  \\\"minDifficulty\\\": 1,\\n  \\\"moneyAvailable\\\": 0,\\n  \\\"moneyMax\\\": 0,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 548,\\n  \\\"serverGrowth\\\": 0\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/helios.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"helios\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"64.7.8.5\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 128,\\n  \\\"organizationName\\\": \\\"Helios Labs\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 232.5,\\n  \\\"hackDifficulty\\\": 232.5,\\n  \\\"minDifficulty\\\": 78,\\n  \\\"moneyAvailable\\\": 68855500.2,\\n  \\\"moneyMax\\\": 172138750.5,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 868,\\n  \\\"serverGrowth\\\": 71\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/4sigma.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"4sigma\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"35.6.6.5\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Four Sigma\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 137.5,\\n  \\\"hackDifficulty\\\": 137.5,\\n  \\\"minDifficulty\\\": 46,\\n  \\\"moneyAvailable\\\": 2094599261.5,\\n  \\\"moneyMax\\\": 5236498153.75,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1202,\\n  \\\"serverGrowth\\\": 77\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/kuai-gong.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"kuai-gong\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"19.5.9.0\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"KuaiGong International\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 247.5,\\n  \\\"hackDifficulty\\\": 247.5,\\n  \\\"minDifficulty\\\": 83,\\n  \\\"moneyAvailable\\\": 2008017179.7,\\n  \\\"moneyMax\\\": 5020042949.25,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1265,\\n  \\\"serverGrowth\\\": 96\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/b-and-a.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"b-and-a\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"72.1.7.4\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Bachman & Associates\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 217.5,\\n  \\\"hackDifficulty\\\": 217.5,\\n  \\\"minDifficulty\\\": 73,\\n  \\\"moneyAvailable\\\": 2067313472.4,\\n  \\\"moneyMax\\\": 5168283681,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1114,\\n  \\\"serverGrowth\\\": 79\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/ecorp.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"ecorp\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"81.5.6.3\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"ECorp\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 247.5,\\n  \\\"hackDifficulty\\\": 247.5,\\n  \\\"minDifficulty\\\": 83,\\n  \\\"moneyAvailable\\\": 6958783627.8,\\n  \\\"moneyMax\\\": 17396959069.5,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1329,\\n  \\\"serverGrowth\\\": 99\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/vitalife.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"vitalife\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"54.7.0.4\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"VitaLife\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 207.5,\\n  \\\"hackDifficulty\\\": 207.5,\\n  \\\"minDifficulty\\\": 69,\\n  \\\"moneyAvailable\\\": 79757723.60000001,\\n  \\\"moneyMax\\\": 199394309.00000003,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 820,\\n  \\\"serverGrowth\\\": 66\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/omnitek.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"omnitek\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"39.0.0.5\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 256,\\n  \\\"organizationName\\\": \\\"OmniTek Incorporated\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 237.5,\\n  \\\"hackDifficulty\\\": 237.5,\\n  \\\"minDifficulty\\\": 79,\\n  \\\"moneyAvailable\\\": 1852291332,\\n  \\\"moneyMax\\\": 4630728330,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1050,\\n  \\\"serverGrowth\\\": 95\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/blade.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"blade\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"96.3.4.1\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 64,\\n  \\\"organizationName\\\": \\\"Blade Industries\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 225,\\n  \\\"hackDifficulty\\\": 225,\\n  \\\"minDifficulty\\\": 75,\\n  \\\"moneyAvailable\\\": 3814468565.5,\\n  \\\"moneyMax\\\": 9536171413.75,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1024,\\n  \\\"serverGrowth\\\": 75\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/powerhouse-fitness.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"powerhouse-fitness\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"70.3.0.4\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"Powerhouse Fitness\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 155,\\n  \\\"hackDifficulty\\\": 155,\\n  \\\"minDifficulty\\\": 52,\\n  \\\"moneyAvailable\\\": 90000000,\\n  \\\"moneyMax\\\": 225000000,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1058,\\n  \\\"serverGrowth\\\": 56\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/megacorp.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"megacorp\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"86.4.4.8\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"MegaCorp\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 247.5,\\n  \\\"hackDifficulty\\\": 247.5,\\n  \\\"minDifficulty\\\": 83,\\n  \\\"moneyAvailable\\\": 4511808724.5,\\n  \\\"moneyMax\\\": 11279521811.25,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1246,\\n  \\\"serverGrowth\\\": 99\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/zeus-med.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"zeus-med\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"84.0.3.7\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Zeus Medical\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 185,\\n  \\\"hackDifficulty\\\": 185,\\n  \\\"minDifficulty\\\": 62,\\n  \\\"moneyAvailable\\\": 142483855.3,\\n  \\\"moneyMax\\\": 356209638.25000006,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 837,\\n  \\\"serverGrowth\\\": 78\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/global-pharm.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"global-pharm\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"23.8.6.0\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\"Global Pharmaceuticals\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 187.5,\\n  \\\"hackDifficulty\\\": 187.5,\\n  \\\"minDifficulty\\\": 63,\\n  \\\"moneyAvailable\\\": 172937105.9,\\n  \\\"moneyMax\\\": 432342764.75,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 780,\\n  \\\"serverGrowth\\\": 82\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/netlink.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"netlink\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"14.8.4.2\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 64,\\n  \\\"organizationName\\\": \\\"NetLink Technologies\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 152.5,\\n  \\\"hackDifficulty\\\": 152.5,\\n  \\\"minDifficulty\\\": 51,\\n  \\\"moneyAvailable\\\": 27500000,\\n  \\\"moneyMax\\\": 68750000,\\n  \\\"numOpenPortsRequired\\\": 3,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 422,\\n  \\\"serverGrowth\\\": 61\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/omega-net.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"omega-net\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"50.0.6.9\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"Omega Software\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 75,\\n  \\\"hackDifficulty\\\": 75,\\n  \\\"minDifficulty\\\": 25,\\n  \\\"moneyAvailable\\\": 6875964.5,\\n  \\\"moneyMax\\\": 17189911.25,\\n  \\\"numOpenPortsRequired\\\": 2,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 202,\\n  \\\"serverGrowth\\\": 30\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/crush-fitness.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"crush-fitness\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"30.8.1.1\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Crush Fitness\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 92.5,\\n  \\\"hackDifficulty\\\": 92.5,\\n  \\\"minDifficulty\\\": 31,\\n  \\\"moneyAvailable\\\": 4749728.3,\\n  \\\"moneyMax\\\": 11874320.75,\\n  \\\"numOpenPortsRequired\\\": 2,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 251,\\n  \\\"serverGrowth\\\": 31\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/joesguns.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"joesguns\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"38.9.9.3\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\"Joe's Guns\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 37.5,\\n  \\\"hackDifficulty\\\": 37.5,\\n  \\\"minDifficulty\\\": 13,\\n  \\\"moneyAvailable\\\": 250000,\\n  \\\"moneyMax\\\": 625000,\\n  \\\"numOpenPortsRequired\\\": 0,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 10,\\n  \\\"serverGrowth\\\": 20\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/max-hardware.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"max-hardware\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"93.6.4.8\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"Max Hardware Store\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 37.5,\\n  \\\"hackDifficulty\\\": 37.5,\\n  \\\"minDifficulty\\\": 13,\\n  \\\"moneyAvailable\\\": 1000000,\\n  \\\"moneyMax\\\": 2500000,\\n  \\\"numOpenPortsRequired\\\": 1,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 80,\\n  \\\"serverGrowth\\\": 30\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/hong-fang-tea.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"hong-fang-tea\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"40.8.0.6\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\"HongFang Teahouse\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 37.5,\\n  \\\"hackDifficulty\\\": 37.5,\\n  \\\"minDifficulty\\\": 13,\\n  \\\"moneyAvailable\\\": 300000,\\n  \\\"moneyMax\\\": 750000,\\n  \\\"numOpenPortsRequired\\\": 0,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 30,\\n  \\\"serverGrowth\\\": 20\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/nectar-net.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"nectar-net\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"28.1.9.3\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\"Nectar Nightclub Network\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 50,\\n  \\\"hackDifficulty\\\": 50,\\n  \\\"minDifficulty\\\": 17,\\n  \\\"moneyAvailable\\\": 275000,\\n  \\\"moneyMax\\\": 687500,\\n  \\\"numOpenPortsRequired\\\": 0,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 20,\\n  \\\"serverGrowth\\\": 25\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/phantasy.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"phantasy\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"89.2.8.2\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"Phantasy Club\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 50,\\n  \\\"hackDifficulty\\\": 50,\\n  \\\"minDifficulty\\\": 17,\\n  \\\"moneyAvailable\\\": 2400000,\\n  \\\"moneyMax\\\": 6000000,\\n  \\\"numOpenPortsRequired\\\": 2,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 100,\\n  \\\"serverGrowth\\\": 35\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/johnson-ortho.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"johnson-ortho\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"58.3.4.7\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Johnson Orthopedics\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 162.5,\\n  \\\"hackDifficulty\\\": 162.5,\\n  \\\"minDifficulty\\\": 54,\\n  \\\"moneyAvailable\\\": 8323853.600000001,\\n  \\\"moneyMax\\\": 20809634,\\n  \\\"numOpenPortsRequired\\\": 2,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 268,\\n  \\\"serverGrowth\\\": 42\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/summit-uni.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"summit-uni\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"0.5.1.9\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"Summit University\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 162.5,\\n  \\\"hackDifficulty\\\": 162.5,\\n  \\\"minDifficulty\\\": 54,\\n  \\\"moneyAvailable\\\": 25080987.5,\\n  \\\"moneyMax\\\": 62702468.75,\\n  \\\"numOpenPortsRequired\\\": 3,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 431,\\n  \\\"serverGrowth\\\": 46\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/lexo-corp.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"lexo-corp\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"24.1.0.9\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 64,\\n  \\\"organizationName\\\": \\\"LexoCorp\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 150,\\n  \\\"hackDifficulty\\\": 150,\\n  \\\"minDifficulty\\\": 50,\\n  \\\"moneyAvailable\\\": 76434101.2,\\n  \\\"moneyMax\\\": 191085253,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 666,\\n  \\\"serverGrowth\\\": 65\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/aerocorp.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"aerocorp\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"98.8.6.9\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"AeroCorp\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 222.5,\\n  \\\"hackDifficulty\\\": 222.5,\\n  \\\"minDifficulty\\\": 74,\\n  \\\"moneyAvailable\\\": 112615760.9,\\n  \\\"moneyMax\\\": 281539402.25,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 853,\\n  \\\"serverGrowth\\\": 59\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/unitalife.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"unitalife\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"65.9.7.4\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"UnitaLife Group\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 175,\\n  \\\"hackDifficulty\\\": 175,\\n  \\\"minDifficulty\\\": 58,\\n  \\\"moneyAvailable\\\": 106835039,\\n  \\\"moneyMax\\\": 267087597.5,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 800,\\n  \\\"serverGrowth\\\": 80\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/syscore.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"syscore\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"7.7.3.0\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"SysCore Securities\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 192.5,\\n  \\\"hackDifficulty\\\": 192.5,\\n  \\\"minDifficulty\\\": 64,\\n  \\\"moneyAvailable\\\": 51275871.5,\\n  \\\"moneyMax\\\": 128189678.75,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 597,\\n  \\\"serverGrowth\\\": 61\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/avmnite-02h.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"avmnite-02h\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"19.6.0.4\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"NiteSec\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 0,\\n  \\\"hackDifficulty\\\": 0,\\n  \\\"minDifficulty\\\": 1,\\n  \\\"moneyAvailable\\\": 0,\\n  \\\"moneyMax\\\": 0,\\n  \\\"numOpenPortsRequired\\\": 2,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 205,\\n  \\\"serverGrowth\\\": 0\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/catalyst.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"catalyst\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"37.9.2.3\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 64,\\n  \\\"organizationName\\\": \\\"Catalyst Ventures\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 167.5,\\n  \\\"hackDifficulty\\\": 167.5,\\n  \\\"minDifficulty\\\": 56,\\n  \\\"moneyAvailable\\\": 51711214.900000006,\\n  \\\"moneyMax\\\": 129278037.25000003,\\n  \\\"numOpenPortsRequired\\\": 3,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 433,\\n  \\\"serverGrowth\\\": 25\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/millenium-fitness.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"millenium-fitness\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"15.8.9.2\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 64,\\n  \\\"organizationName\\\": \\\"Millenium Fitness Network\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 130,\\n  \\\"hackDifficulty\\\": 130,\\n  \\\"minDifficulty\\\": 43,\\n  \\\"moneyAvailable\\\": 25000000,\\n  \\\"moneyMax\\\": 62500000,\\n  \\\"numOpenPortsRequired\\\": 3,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 500,\\n  \\\"serverGrowth\\\": 36\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/I_I_I_I.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"I.I.I.I\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"81.1.5.0\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\"I.I.I.I\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 0,\\n  \\\"hackDifficulty\\\": 0,\\n  \\\"minDifficulty\\\": 1,\\n  \\\"moneyAvailable\\\": 0,\\n  \\\"moneyMax\\\": 0,\\n  \\\"numOpenPortsRequired\\\": 3,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 353,\\n  \\\"serverGrowth\\\": 0\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/rho-construction.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"rho-construction\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"70.6.3.0\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 64,\\n  \\\"organizationName\\\": \\\"Rho Construction\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 137.5,\\n  \\\"hackDifficulty\\\": 137.5,\\n  \\\"minDifficulty\\\": 46,\\n  \\\"moneyAvailable\\\": 58534672.300000004,\\n  \\\"moneyMax\\\": 146336680.75,\\n  \\\"numOpenPortsRequired\\\": 3,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 510,\\n  \\\"serverGrowth\\\": 53\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/alpha-ent.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"alpha-ent\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"39.0.8.0\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\"Alpha Enterprises\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 162.5,\\n  \\\"hackDifficulty\\\": 162.5,\\n  \\\"minDifficulty\\\": 54,\\n  \\\"moneyAvailable\\\": 71842654.5,\\n  \\\"moneyMax\\\": 179606636.25,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 516,\\n  \\\"serverGrowth\\\": 51\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/snap-fitness.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"snap-fitness\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"80.1.9.0\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Snap Fitness\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 150,\\n  \\\"hackDifficulty\\\": 150,\\n  \\\"minDifficulty\\\": 50,\\n  \\\"moneyAvailable\\\": 45000000,\\n  \\\"moneyMax\\\": 112500000,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 737,\\n  \\\"serverGrowth\\\": 59\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/omnia.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"omnia\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"84.1.0.7\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\"Omnia Cybersystems\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 232.5,\\n  \\\"hackDifficulty\\\": 232.5,\\n  \\\"minDifficulty\\\": 78,\\n  \\\"moneyAvailable\\\": 99854155.9,\\n  \\\"moneyMax\\\": 249635389.75,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 949,\\n  \\\"serverGrowth\\\": 70\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/defcomm.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"defcomm\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"28.1.9.3\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"DefComm\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 230,\\n  \\\"hackDifficulty\\\": 230,\\n  \\\"minDifficulty\\\": 77,\\n  \\\"moneyAvailable\\\": 81550942.4,\\n  \\\"moneyMax\\\": 203877356.00000003,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 873,\\n  \\\"serverGrowth\\\": 61\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/zb-def.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"zb-def\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"83.1.4.4\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"ZB Defense Industries\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 162.5,\\n  \\\"hackDifficulty\\\": 162.5,\\n  \\\"minDifficulty\\\": 54,\\n  \\\"moneyAvailable\\\": 104190264.10000001,\\n  \\\"moneyMax\\\": 260475660.25,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 785,\\n  \\\"serverGrowth\\\": 66\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/microdyne.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"microdyne\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"84.7.3.1\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"Microdyne Technologies\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 172.5,\\n  \\\"hackDifficulty\\\": 172.5,\\n  \\\"minDifficulty\\\": 58,\\n  \\\"moneyAvailable\\\": 60031236.800000004,\\n  \\\"moneyMax\\\": 150078092,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 808,\\n  \\\"serverGrowth\\\": 83\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/fulcrumtech.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"fulcrumtech\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"36.7.9.6\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 256,\\n  \\\"organizationName\\\": \\\"Fulcrum Technologies\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 227.5,\\n  \\\"hackDifficulty\\\": 227.5,\\n  \\\"minDifficulty\\\": 76,\\n  \\\"moneyAvailable\\\": 178172508.3,\\n  \\\"moneyMax\\\": 445431270.75,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1053,\\n  \\\"serverGrowth\\\": 82\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/univ-energy.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"univ-energy\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"23.0.7.7\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 64,\\n  \\\"organizationName\\\": \\\"Universal Energy\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 215,\\n  \\\"hackDifficulty\\\": 215,\\n  \\\"minDifficulty\\\": 72,\\n  \\\"moneyAvailable\\\": 119260796.10000001,\\n  \\\"moneyMax\\\": 298151990.25,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 869,\\n  \\\"serverGrowth\\\": 84\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/infocomm.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"infocomm\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"70.2.4.2\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"InfoComm\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 182.5,\\n  \\\"hackDifficulty\\\": 182.5,\\n  \\\"minDifficulty\\\": 61,\\n  \\\"moneyAvailable\\\": 89626703,\\n  \\\"moneyMax\\\": 224066757.5,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 939,\\n  \\\"serverGrowth\\\": 68\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/titan-labs.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"titan-labs\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"85.0.0.0\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"Titan Laboratories\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 185,\\n  \\\"hackDifficulty\\\": 185,\\n  \\\"minDifficulty\\\": 62,\\n  \\\"moneyAvailable\\\": 86625548.30000001,\\n  \\\"moneyMax\\\": 216563870.75000006,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 841,\\n  \\\"serverGrowth\\\": 77\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/stormtech.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"stormtech\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"17.7.0.1\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Storm Technologies\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 217.5,\\n  \\\"hackDifficulty\\\": 217.5,\\n  \\\"minDifficulty\\\": 73,\\n  \\\"moneyAvailable\\\": 101703025.30000001,\\n  \\\"moneyMax\\\": 254257563.25000006,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1000,\\n  \\\"serverGrowth\\\": 90\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/_.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\".\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"81.3.3.5\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\".\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 0,\\n  \\\"hackDifficulty\\\": 0,\\n  \\\"minDifficulty\\\": 1,\\n  \\\"moneyAvailable\\\": 0,\\n  \\\"moneyMax\\\": 0,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 539,\\n  \\\"serverGrowth\\\": 0\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/nwo.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"nwo\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"45.9.8.7\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"NWO\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 247.5,\\n  \\\"hackDifficulty\\\": 247.5,\\n  \\\"minDifficulty\\\": 83,\\n  \\\"moneyAvailable\\\": 3795349116.4,\\n  \\\"moneyMax\\\": 9488372791,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1084,\\n  \\\"serverGrowth\\\": 68\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/The-Cave.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"The-Cave\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"69.8.9.9\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Helios\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 0,\\n  \\\"hackDifficulty\\\": 0,\\n  \\\"minDifficulty\\\": 1,\\n  \\\"moneyAvailable\\\": 0,\\n  \\\"moneyMax\\\": 0,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 925,\\n  \\\"serverGrowth\\\": 0\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/clarkinc.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"clarkinc\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"69.0.9.2\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Clarke Incorporated\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 160,\\n  \\\"hackDifficulty\\\": 160,\\n  \\\"minDifficulty\\\": 53,\\n  \\\"moneyAvailable\\\": 2109630616.5,\\n  \\\"moneyMax\\\": 5274076541.25,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1164,\\n  \\\"serverGrowth\\\": 71\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/fulcrumassets.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"fulcrumassets\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"86.6.1.4\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Fulcrum Technologies\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 247.5,\\n  \\\"hackDifficulty\\\": 247.5,\\n  \\\"minDifficulty\\\": 83,\\n  \\\"moneyAvailable\\\": 100000,\\n  \\\"moneyMax\\\": 250000,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1197,\\n  \\\"serverGrowth\\\": 1\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/applied-energetics.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"applied-energetics\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"12.7.8.1\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Applied Energetics\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 180,\\n  \\\"hackDifficulty\\\": 180,\\n  \\\"minDifficulty\\\": 60,\\n  \\\"moneyAvailable\\\": 91812796.60000001,\\n  \\\"moneyMax\\\": 229531991.5,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 793,\\n  \\\"serverGrowth\\\": 74\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/harakiri-sushi.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"harakiri-sushi\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"2.0.5.0\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\"HaraKiri Sushi Bar Network\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 37.5,\\n  \\\"hackDifficulty\\\": 37.5,\\n  \\\"minDifficulty\\\": 13,\\n  \\\"moneyAvailable\\\": 400000,\\n  \\\"moneyMax\\\": 1000000,\\n  \\\"numOpenPortsRequired\\\": 0,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 40,\\n  \\\"serverGrowth\\\": 40\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/iron-gym.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"iron-gym\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"46.0.7.1\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"Iron Gym Network\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 75,\\n  \\\"hackDifficulty\\\": 75,\\n  \\\"minDifficulty\\\": 25,\\n  \\\"moneyAvailable\\\": 2000000,\\n  \\\"moneyMax\\\": 5000000,\\n  \\\"numOpenPortsRequired\\\": 1,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 100,\\n  \\\"serverGrowth\\\": 20\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/incorp.txt\",\"text\":\"\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"81.5.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"ecorp\",\"moduleSequenceNumber\":148561,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":148563,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":148565,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":247.5,\"hackDifficulty\":247.5,\"minDifficulty\":83,\"moneyAvailable\":6958783627.8,\"moneyMax\":17396959069.5,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1329,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"86.4.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"megacorp\",\"moduleSequenceNumber\":148591,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":148593,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":148595,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":247.5,\"hackDifficulty\":247.5,\"minDifficulty\":83,\"moneyAvailable\":4511808724.5,\"moneyMax\":11279521811.25,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1246,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"72.1.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"b-and-a\",\"moduleSequenceNumber\":148555,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":148557,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":148559,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":217.5,\"hackDifficulty\":217.5,\"minDifficulty\":73,\"moneyAvailable\":2067313472.4,\"moneyMax\":5168283681,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1114,\"serverGrowth\":79}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"96.3.4.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/76ad65de-2dda-45eb-a562-6e3e009f8ec0\",\"moduleSequenceNumber\":153030}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":153030,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/61a52f41-95f9-46b9-a8dc-313fead4ab62\",\"moduleSequenceNumber\":157226}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":157226,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/d12bb4fd-5b15-4c3b-b4b5-e685aa1593a9\",\"moduleSequenceNumber\":150662}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":150662,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":225,\"hackDifficulty\":225,\"minDifficulty\":75,\"moneyAvailable\":3814468565.5,\"moneyMax\":9536171413.75,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1024,\"serverGrowth\":75}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"45.9.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nwo\",\"moduleSequenceNumber\":148795,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":148797,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":148799,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\".\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":247.5,\"hackDifficulty\":247.5,\"minDifficulty\":83,\"moneyAvailable\":3795349116.4,\"moneyMax\":9488372791,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1084,\"serverGrowth\":68}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"69.0.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"clarkinc\",\"moduleSequenceNumber\":148807,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":148809,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":148811,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\".\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":160,\"hackDifficulty\":160,\"minDifficulty\":53,\"moneyAvailable\":2109630616.5,\"moneyMax\":5274076541.25,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1164,\"serverGrowth\":71}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"39.0.0.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":255.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.4097147496179969],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.609999999999935,\"pid\":4559,\"ramUsage\":1.7,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/fdf729cf-9e59-4886-9591-f3e7eb974783\",\"moduleSequenceNumber\":150921}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.13748492796523304],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.609999999999935,\"pid\":4560,\"ramUsage\":1.75,\"server\":\"omnitek\",\"threads\":144,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/97c22003-4bcf-455b-8e00-8f2dc275c540\",\"moduleSequenceNumber\":150922}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",0.4507319563022505],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":4568,\"ramUsage\":1.75,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/51e04f9e-8988-456c-a550-6ccbf91e4238\",\"moduleSequenceNumber\":149876}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/fdf729cf-9e59-4886-9591-f3e7eb974783\",\"moduleSequenceNumber\":150921}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":150921,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/97c22003-4bcf-455b-8e00-8f2dc275c540\",\"moduleSequenceNumber\":150922}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":150922,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/51e04f9e-8988-456c-a550-6ccbf91e4238\",\"moduleSequenceNumber\":149876}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":149876,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"vitalife\",\"blade\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":237.5,\"hackDifficulty\":237.5,\"minDifficulty\":79,\"moneyAvailable\":1852291332,\"moneyMax\":4630728330,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1050,\"serverGrowth\":95}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"35.6.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"4sigma\",\"moduleSequenceNumber\":148543,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":148545,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":148547,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":137.5,\"hackDifficulty\":137.5,\"minDifficulty\":46,\"moneyAvailable\":2094599261.5,\"moneyMax\":5236498153.75,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1202,\"serverGrowth\":77}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"19.5.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":148549,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":148551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":148553,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"helios\",\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":247.5,\"hackDifficulty\":247.5,\"minDifficulty\":83,\"moneyAvailable\":2008017179.7,\"moneyMax\":5020042949.25,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1265,\"serverGrowth\":96}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"36.7.9.6\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":1.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",0.4340685189929714],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":4567,\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/4f9d742d-e807-4f7e-8f16-51ba896f2cc9\",\"moduleSequenceNumber\":150397}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/4f9d742d-e807-4f7e-8f16-51ba896f2cc9\",\"moduleSequenceNumber\":150397}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":150397,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/99730901-b60d-43a9-877a-788f1a7b7546\",\"moduleSequenceNumber\":151445}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":151445,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/b6a42b13-1205-4e30-aa6f-2deea9b16651\",\"moduleSequenceNumber\":149616}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":149616,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":227.5,\"hackDifficulty\":227.5,\"minDifficulty\":76,\"moneyAvailable\":178172508.3,\"moneyMax\":445431270.75,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1053,\"serverGrowth\":82}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"86.6.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":148813,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":148815,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":148817,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":247.5,\"hackDifficulty\":247.5,\"minDifficulty\":83,\"moneyAvailable\":100000,\"moneyMax\":250000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1197,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"17.7.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"stormtech\",\"moduleSequenceNumber\":148783,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":148785,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":148787,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"titan-labs\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":217.5,\"hackDifficulty\":217.5,\"minDifficulty\":73,\"moneyAvailable\":101703025.30000001,\"moneyMax\":254257563.25000006,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1000,\"serverGrowth\":90}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"28.1.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":148741,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":148743,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":148745,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":230,\"hackDifficulty\":230,\"minDifficulty\":77,\"moneyAvailable\":81550942.4,\"moneyMax\":203877356.00000003,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":873,\"serverGrowth\":61}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"70.2.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":148771,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":148773,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":148775,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"univ-energy\",\"titan-labs\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":182.5,\"hackDifficulty\":182.5,\"minDifficulty\":61,\"moneyAvailable\":89626703,\"moneyMax\":224066757.5,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":939,\"serverGrowth\":68}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"64.7.8.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":3.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0.24030046404966132],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":87.21000000000069,\"pid\":4490,\"ramUsage\":1.75,\"server\":\"helios\",\"threads\":2,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/7b537eba-a108-4131-bf8e-a607b0dc0d37\",\"moduleSequenceNumber\":150136}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/a7393fbc-39a4-4ca5-9d69-491900903c3d\",\"moduleSequenceNumber\":150135}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":150135,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/a9678a0a-c6c3-47cf-bbdf-969b16f46fdb\",\"moduleSequenceNumber\":151711}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":151711,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/7b537eba-a108-4131-bf8e-a607b0dc0d37\",\"moduleSequenceNumber\":150136}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":150136,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"run4theh111z\",\"4sigma\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":232.5,\"hackDifficulty\":232.5,\"minDifficulty\":78,\"moneyAvailable\":68855500.2,\"moneyMax\":172138750.5,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":868,\"serverGrowth\":71}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"54.7.0.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/1c4106b3-66f2-428a-b170-998999cc3a1e\",\"moduleSequenceNumber\":160913}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":160913,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/ee017eb3-6b9a-42d3-b639-9275a690b738\",\"moduleSequenceNumber\":155126}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":155126,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/3430a132-cab1-4e6f-b2fa-6f3f26da048a\",\"moduleSequenceNumber\":151978}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":151978,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":207.5,\"hackDifficulty\":207.5,\"minDifficulty\":69,\"moneyAvailable\":79757723.60000001,\"moneyMax\":199394309.00000003,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":820,\"serverGrowth\":66}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"87.7.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"icarus\",\"moduleSequenceNumber\":148507,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":148509,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":148511,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":217.5,\"hackDifficulty\":217.5,\"minDifficulty\":73,\"moneyAvailable\":94011399.4,\"moneyMax\":235028498.5,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":856,\"serverGrowth\":94}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"23.0.7.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/326a87c0-2c54-48c7-abf2-08c36bd0e16d\",\"moduleSequenceNumber\":151446}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":151446,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/66e8b611-ed0a-4650-b335-3472bd4fba88\",\"moduleSequenceNumber\":151447}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":151447,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/5ebc40ec-399c-4865-8c65-6db56d977d62\",\"moduleSequenceNumber\":150137}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":150137,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnia\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":215,\"hackDifficulty\":215,\"minDifficulty\":72,\"moneyAvailable\":119260796.10000001,\"moneyMax\":298151990.25,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":869,\"serverGrowth\":84}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"85.0.0.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0.8751539682296334],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":87.21000000000069,\"pid\":4489,\"ramUsage\":1.75,\"server\":\"titan-labs\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/29dd840a-d9d5-497e-9901-356ddaf5cc7d\",\"moduleSequenceNumber\":160912}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/3d43f538-25ce-414b-b056-92f57c830508\",\"moduleSequenceNumber\":156439}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":156439,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/29dd840a-d9d5-497e-9901-356ddaf5cc7d\",\"moduleSequenceNumber\":160912}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":160912,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/6fe13d87-093a-4c98-8f1e-47be752529c0\",\"moduleSequenceNumber\":151184}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":151184,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"infocomm\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":185,\"hackDifficulty\":185,\"minDifficulty\":62,\"moneyAvailable\":86625548.30000001,\"moneyMax\":216563870.75000006,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":841,\"serverGrowth\":77}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"84.7.3.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",0.719195766953646],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":87.01000000000069,\"pid\":4491,\"ramUsage\":1.75,\"server\":\"microdyne\",\"threads\":18,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/acee6cf5-db9f-45a8-b441-9c5ae0da1335\",\"moduleSequenceNumber\":151185}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/8a42ae75-3dae-4bee-ae0c-e489c18c470c\",\"moduleSequenceNumber\":155123}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":155123,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/e17be410-d388-43b9-ab1e-4d790f463dcc\",\"moduleSequenceNumber\":166994}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":166994,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/acee6cf5-db9f-45a8-b441-9c5ae0da1335\",\"moduleSequenceNumber\":151185}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":151185,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":172.5,\"hackDifficulty\":172.5,\"minDifficulty\":58,\"moneyAvailable\":60031236.800000004,\"moneyMax\":150078092,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":808,\"serverGrowth\":83}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"39.6.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":148525,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":148527,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":148529,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"solaris\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":182.5,\"hackDifficulty\":182.5,\"minDifficulty\":61,\"moneyAvailable\":88231211.60000001,\"moneyMax\":220578029,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":931,\"serverGrowth\":71}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"4.6.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":148495,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":148497,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":148499,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"aevum-police\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":137.5,\"hackDifficulty\":137.5,\"minDifficulty\":46,\"moneyAvailable\":80104703,\"moneyMax\":200261757.5,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":865,\"serverGrowth\":82}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"98.8.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":148675,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":148677,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":148679,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"lexo-corp\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":222.5,\"hackDifficulty\":222.5,\"minDifficulty\":74,\"moneyAvailable\":112615760.9,\"moneyMax\":281539402.25,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":853,\"serverGrowth\":59}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"84.1.0.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/70bc7f1f-3e6c-40bc-9440-2021b2669583\",\"moduleSequenceNumber\":188654}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":188654,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":148737,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/532392f5-61c9-48b9-810f-ca5fe9424eaf\",\"moduleSequenceNumber\":166997}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":166997,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":232.5,\"hackDifficulty\":232.5,\"minDifficulty\":78,\"moneyAvailable\":99854155.9,\"moneyMax\":249635389.75,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":949,\"serverGrowth\":70}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"83.1.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":148747,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":148749,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":148751,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"defcomm\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":162.5,\"hackDifficulty\":162.5,\"minDifficulty\":54,\"moneyAvailable\":104190264.10000001,\"moneyMax\":260475660.25,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":785,\"serverGrowth\":66}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"12.7.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":148819,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":148821,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":148823,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":180,\"hackDifficulty\":180,\"minDifficulty\":60,\"moneyAvailable\":91812796.60000001,\"moneyMax\":229531991.5,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":793,\"serverGrowth\":74}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"3.6.5.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/b30514a1-420a-4fcb-8711-aa8f0f99d0ab\",\"moduleSequenceNumber\":152762}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":152762,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/4d8cbe35-a9a0-4311-9136-d1738e047939\",\"moduleSequenceNumber\":155914}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":155914,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/966cf870-e687-4cc2-8125-c3c5d8dc9187\",\"moduleSequenceNumber\":149356}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":149356,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":200,\"hackDifficulty\":200,\"minDifficulty\":67,\"moneyAvailable\":75448339.4,\"moneyMax\":188620848.50000003,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":817,\"serverGrowth\":79}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"52.9.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":148501,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":148503,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":148505,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"icarus\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":187.5,\"hackDifficulty\":187.5,\"minDifficulty\":63,\"moneyAvailable\":164221223.10000002,\"moneyMax\":410553057.75000006,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":802,\"serverGrowth\":69}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"23.8.6.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",0.5247910232425981],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.609999999999935,\"pid\":4564,\"ramUsage\":1.75,\"server\":\"global-pharm\",\"threads\":9,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/aa78a53f-4568-4fd6-8dac-edcd0bf9ef5b\",\"moduleSequenceNumber\":151976}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":148603,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/63e9444a-8148-41e9-a8dd-329e541404da\",\"moduleSequenceNumber\":191827}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":191827,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/aa78a53f-4568-4fd6-8dac-edcd0bf9ef5b\",\"moduleSequenceNumber\":151976}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":151976,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":187.5,\"hackDifficulty\":187.5,\"minDifficulty\":63,\"moneyAvailable\":172937105.9,\"moneyMax\":432342764.75,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":780,\"serverGrowth\":82}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"19.4.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":148513,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":148515,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":148517,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":165,\"hackDifficulty\":165,\"minDifficulty\":55,\"moneyAvailable\":112929500.9,\"moneyMax\":282323752.25,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":781,\"serverGrowth\":79}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"84.0.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zeus-med\",\"moduleSequenceNumber\":148597,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":148599,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":148601,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":185,\"hackDifficulty\":185,\"minDifficulty\":62,\"moneyAvailable\":142483855.3,\"moneyMax\":356209638.25000006,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":837,\"serverGrowth\":78}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"65.9.7.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/9d846df1-d3f8-4327-aaf9-79bb5a73a69a\",\"moduleSequenceNumber\":161442}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":161442,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/1142530b-358f-4aa8-b5f0-7ec57df09cd1\",\"moduleSequenceNumber\":156440}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":156440,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c65fc3ae-46d3-4fab-8314-aeb76e8c33b9\",\"moduleSequenceNumber\":151449}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":151449,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":175,\"hackDifficulty\":175,\"minDifficulty\":58,\"moneyAvailable\":106835039,\"moneyMax\":267087597.5,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":800,\"serverGrowth\":80}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"24.1.0.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/a51c0aa3-52cb-45c3-a31b-a1426be5d341\",\"moduleSequenceNumber\":156176}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":156176,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/66fb89fd-f8de-4ed5-9e72-dc91d5725bc8\",\"moduleSequenceNumber\":156177}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":156177,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/f6adb1d7-3ae9-4cac-ba50-018bd95743ce\",\"moduleSequenceNumber\":150401}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":150401,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"summit-uni\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":150,\"hackDifficulty\":150,\"minDifficulty\":50,\"moneyAvailable\":76434101.2,\"moneyMax\":191085253,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":666,\"serverGrowth\":65}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"70.6.3.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/62254946-c29d-4777-9362-5026255b68ed\",\"moduleSequenceNumber\":151972}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":151972,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/c4592475-2b42-451f-83c2-b92c30725095\",\"moduleSequenceNumber\":151975}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":151975,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c3d3029e-58f3-4f91-b04e-1f1d19402090\",\"moduleSequenceNumber\":150138}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":150138,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":137.5,\"hackDifficulty\":137.5,\"minDifficulty\":46,\"moneyAvailable\":58534672.300000004,\"moneyMax\":146336680.75,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":510,\"serverGrowth\":53}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"39.0.8.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":148723,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/07934144-e4bd-4c10-abc7-552a9182ad7e\",\"moduleSequenceNumber\":188655}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":188655,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/e9de4d42-fae2-4e8e-8a5e-546549ba8212\",\"moduleSequenceNumber\":164087}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":164087,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"I.I.I.I\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":162.5,\"hackDifficulty\":162.5,\"minDifficulty\":54,\"moneyAvailable\":71842654.5,\"moneyMax\":179606636.25,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":516,\"serverGrowth\":51}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"98.8.0.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/9ffce8f6-c700-4475-b034-b7b5db1e1c8b\",\"moduleSequenceNumber\":155388}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":155388,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/463de60f-a412-4033-aa6e-4342aa4ca1b5\",\"moduleSequenceNumber\":158538}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":158538,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/7ff57207-2acd-4485-a6b2-8bfbcca4c5af\",\"moduleSequenceNumber\":149094}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":149094,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":192.5,\"hackDifficulty\":192.5,\"minDifficulty\":64,\"moneyAvailable\":33218698.5,\"moneyMax\":83046746.25,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":450,\"serverGrowth\":34}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"78.1.6.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":8.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",0.3268778386939979],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.21000000000025,\"pid\":4524,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":5,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/0005914d-e5f4-4f70-8ecf-79fe9ec57676\",\"moduleSequenceNumber\":152500}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":148477,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/1951274a-65ca-486f-901a-3da1de05d01c\",\"moduleSequenceNumber\":155652}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":155652,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/0005914d-e5f4-4f70-8ecf-79fe9ec57676\",\"moduleSequenceNumber\":152500}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":152500,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":125,\"hackDifficulty\":125,\"minDifficulty\":42,\"moneyAvailable\":19350407.6,\"moneyMax\":48376019.00000001,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":409,\"serverGrowth\":42}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"63.9.1.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":28,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.6447265321026037],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":87.6100000000007,\"pid\":4463,\"ramUsage\":1.75,\"server\":\"zb-institute\",\"threads\":16,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/ad72366c-b8e2-438c-ae83-947c87954ee8\",\"moduleSequenceNumber\":152499}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/05a897d3-044d-4ad3-b43a-add915914512\",\"moduleSequenceNumber\":179673}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":179673,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/1ce19e67-c046-42fe-bfcf-52c9e9aa3498\",\"moduleSequenceNumber\":179674}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":179674,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/ad72366c-b8e2-438c-ae83-947c87954ee8\",\"moduleSequenceNumber\":152499}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":152499,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"the-hub\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":165,\"hackDifficulty\":165,\"minDifficulty\":55,\"moneyAvailable\":93681151.5,\"moneyMax\":234202878.75,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":728,\"serverGrowth\":84}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"0.5.1.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/c17fadf4-4cbc-4601-9c2d-30f0692a78a5\",\"moduleSequenceNumber\":152497}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":152497,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/2e5ddce8-8902-4336-87e7-ec67d067f5c1\",\"moduleSequenceNumber\":155390}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":155390,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/16657f19-b181-4d92-b9eb-d5a6150b1467\",\"moduleSequenceNumber\":151450}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":151450,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"johnson-ortho\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":162.5,\"hackDifficulty\":162.5,\"minDifficulty\":54,\"moneyAvailable\":25080987.5,\"moneyMax\":62702468.75,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":431,\"serverGrowth\":46}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"7.7.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"moduleSequenceNumber\":148687,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":148689,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":148691,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":192.5,\"hackDifficulty\":192.5,\"minDifficulty\":64,\"moneyAvailable\":51275871.5,\"moneyMax\":128189678.75,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":597,\"serverGrowth\":61}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"37.9.2.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/2ea4898d-079a-47be-b53f-d62edf238523\",\"moduleSequenceNumber\":151974}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":151974,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/bbf55748-2044-4caf-b4fa-92bc2d629182\",\"moduleSequenceNumber\":151712}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":151712,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/ebc50967-3bf4-447f-866f-aef56dea14df\",\"moduleSequenceNumber\":150400}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":150400,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":167.5,\"hackDifficulty\":167.5,\"minDifficulty\":56,\"moneyAvailable\":51711214.900000006,\"moneyMax\":129278037.25000003,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":433,\"serverGrowth\":25}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"46.8.0.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",0.9222342917807629],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":237.20999999999518,\"pid\":4317,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":18,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/a9229cf8-3567-442e-a21f-19ba245a5fae\",\"moduleSequenceNumber\":152501}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/4b600a2c-27d7-4266-9c6b-47bd9074e91d\",\"moduleSequenceNumber\":178880}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":178880,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/5a989b64-5821-4f74-ae72-10d7484913cc\",\"moduleSequenceNumber\":157489}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":157489,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/a9229cf8-3567-442e-a21f-19ba245a5fae\",\"moduleSequenceNumber\":152501}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":152501,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":102.5,\"hackDifficulty\":102.5,\"minDifficulty\":34,\"moneyAvailable\":16778660.7,\"moneyMax\":41946651.75,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":307,\"serverGrowth\":54}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":true,\"ip\":\"48.1.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"computek\",\"moduleSequenceNumber\":148453,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"computek\",\"moduleSequenceNumber\":148455,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"computek\",\"moduleSequenceNumber\":148457,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":137.5,\"hackDifficulty\":137.5,\"minDifficulty\":46,\"moneyAvailable\":23391848.400000002,\"moneyMax\":58479621,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":371,\"serverGrowth\":61}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"14.8.4.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",0.5423094753088102],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.21000000000025,\"pid\":4523,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":36,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/dcc49ca2-5803-4c1e-88b8-2d8ec9aea442\",\"moduleSequenceNumber\":153031}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/9cc18746-9643-4a13-957c-9de1e7494e5e\",\"moduleSequenceNumber\":152761}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":152761,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/dcc49ca2-5803-4c1e-88b8-2d8ec9aea442\",\"moduleSequenceNumber\":153031}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":153031,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/b516ae21-bf6c-4de8-931e-3da3cb2fb2cc\",\"moduleSequenceNumber\":150402}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":150402,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":152.5,\"hackDifficulty\":152.5,\"minDifficulty\":51,\"moneyAvailable\":27500000,\"moneyMax\":68750000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":422,\"serverGrowth\":61}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"58.3.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":148657,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":148659,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":148661,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"phantasy\",\"summit-uni\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":162.5,\"hackDifficulty\":162.5,\"minDifficulty\":54,\"moneyAvailable\":8323853.600000001,\"moneyMax\":20809634,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":268,\"serverGrowth\":42}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":true,\"ip\":\"3.5.8.5\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":148363,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/bd7f39bd-c4b5-4ce2-8ef3-3e387c9cb2bd\",\"moduleSequenceNumber\":149875}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":149875,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/e2b6e1ed-50ab-4f3b-a950-754c4fd07137\",\"moduleSequenceNumber\":151183}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":151183,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":2.5,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":15016,\"moneyMax\":17500,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":true,\"ip\":\"91.3.8.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":5.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",0.5603513293057805],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.21000000000025,\"pid\":4530,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":3,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/f8b0704a-7190-4a4b-99d4-f5e6b8088602\",\"moduleSequenceNumber\":150398}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":148372,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/af6c6467-c49f-46b0-8928-af1467240bb5\",\"moduleSequenceNumber\":155389}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":155389,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/f8b0704a-7190-4a4b-99d4-f5e6b8088602\",\"moduleSequenceNumber\":150398}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":150398,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":459927.03274560795,\"moneyMax\":500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":true,\"ip\":\"79.3.6.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":148435,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/f5b4ab29-5ac5-4445-983c-a11a33de3386\",\"moduleSequenceNumber\":159853}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":159853,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/9cb81c7b-9c8f-4945-acea-6321c1d262ac\",\"moduleSequenceNumber\":150661}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":150661,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":565263.6379580862,\"moneyMax\":575000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":true,\"ip\":\"38.9.9.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":5.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0.3253407684363627],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.810000000000244,\"pid\":4539,\"ramUsage\":1.75,\"server\":\"joesguns\",\"threads\":3,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/7fc0f676-e16a-4899-9d32-c6c92ebfc2da\",\"moduleSequenceNumber\":162763}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":148627,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/efd5549e-2c43-4358-bd6a-bd2ef5c2de09\",\"moduleSequenceNumber\":197900}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":197900,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/7fc0f676-e16a-4899-9d32-c6c92ebfc2da\",\"moduleSequenceNumber\":162763}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":162763,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":37.5,\"hackDifficulty\":13,\"minDifficulty\":13,\"moneyAvailable\":568933.3283377626,\"moneyMax\":625000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"26.8.6.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":28,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",0.7908195101299038],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.21000000000025,\"pid\":4529,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":16,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/bdf208ac-cdeb-4627-a547-3ffc813ed053\",\"moduleSequenceNumber\":157227}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/4aba949e-328b-447a-8e0a-9d69a421f841\",\"moduleSequenceNumber\":185485}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":185485,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/bdf208ac-cdeb-4627-a547-3ffc813ed053\",\"moduleSequenceNumber\":157227}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":157227,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/108ae433-ce67-4d0f-89aa-2c185a6dcedb\",\"moduleSequenceNumber\":149615}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":149615,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":62.5,\"hackDifficulty\":21.002,\"minDifficulty\":21,\"moneyAvailable\":1585739.385952057,\"moneyMax\":1875000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":true,\"ip\":\"28.1.9.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":148645,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/86fc98fd-6aa3-48d9-bd41-a23807968510\",\"moduleSequenceNumber\":188657}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":188657,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/81849183-0bd8-400d-a6eb-f316ca3d2ef9\",\"moduleSequenceNumber\":163029}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":163029,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":50,\"hackDifficulty\":17,\"minDifficulty\":17,\"moneyAvailable\":607887.8803334172,\"moneyMax\":687500,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":true,\"ip\":\"4.8.6.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/691bdf94-34d3-4a9d-812d-08d6e65cd119\",\"moduleSequenceNumber\":181260}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":181260,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/774ade79-8fc7-4741-b799-9df7cf8fcb69\",\"moduleSequenceNumber\":160646}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":160646,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/d6dfd758-3818-4a6f-94f7-f2f16fe40157\",\"moduleSequenceNumber\":152502}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":152502,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"CSEC\",\"the-hub\",\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":62.5,\"hackDifficulty\":21,\"minDifficulty\":21,\"moneyAvailable\":1144166.781846982,\"moneyMax\":1250000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"39.5.5.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":36.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.0034662835281122906],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.609999999999935,\"pid\":4561,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":21,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/b682c5ca-c571-4a13-a989-d58f37778243\",\"moduleSequenceNumber\":148837}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/233bdbe4-cc64-4376-9212-90084c999e82\",\"moduleSequenceNumber\":152496}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":152496,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/54862c4d-93d8-4566-bbf4-18cef0d8eb27\",\"moduleSequenceNumber\":149093}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":149093,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/b682c5ca-c571-4a13-a989-d58f37778243\",\"moduleSequenceNumber\":148837}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":148837,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zer0\",\"computek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":4500000,\"moneyMax\":11250000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":true,\"ip\":\"40.8.0.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":148639,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/d7432f91-2519-4079-abfb-f6330b9f8028\",\"moduleSequenceNumber\":164880}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":164880,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/22ff5162-359d-4e5c-9bda-4b756986d759\",\"moduleSequenceNumber\":163028}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":163028,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":37.5,\"hackDifficulty\":13,\"minDifficulty\":13,\"moneyAvailable\":710928.0264747139,\"moneyMax\":750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":true,\"ip\":\"2.0.5.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/64e42421-71e4-48f1-bc4a-d70825f1fd9d\",\"moduleSequenceNumber\":166995}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":166995,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":148827,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/f9fc0ede-726b-4e5e-87c8-e051665e947f\",\"moduleSequenceNumber\":166201}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":166201,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":37.5,\"hackDifficulty\":13,\"minDifficulty\":13,\"moneyAvailable\":915324.6450847497,\"moneyMax\":1000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"89.2.8.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/90bf52ab-98bd-4ff5-9b6a-f5a500650d98\",\"moduleSequenceNumber\":160911}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":160911,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/2bca5559-1792-4873-8fe2-6ae306a507df\",\"moduleSequenceNumber\":155124}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":155124,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cd2e2667-2c22-46ce-b453-e9373252db30\",\"moduleSequenceNumber\":151451}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":151451,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nectar-net\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":50,\"hackDifficulty\":17,\"minDifficulty\":17,\"moneyAvailable\":3649961.5305634323,\"moneyMax\":6000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":true,\"ip\":\"93.6.4.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",0.7221050210973663],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":177.40999999999858,\"pid\":4379,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":18,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/159c8401-4109-460c-a91b-a1fb274e6150\",\"moduleSequenceNumber\":151452}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/b19a5bd8-aebd-4841-954a-f5edfa7187b3\",\"moduleSequenceNumber\":153815}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":153815,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/10203c90-d991-4a61-8d92-536ca3c8fe37\",\"moduleSequenceNumber\":156964}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":156964,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/159c8401-4109-460c-a91b-a1fb274e6150\",\"moduleSequenceNumber\":151452}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":151452,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"joesguns\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":37.5,\"hackDifficulty\":13,\"minDifficulty\":13,\"moneyAvailable\":2412870.0106832418,\"moneyMax\":2500000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"50.0.6.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",0.5449329974755912],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":297.40999999999167,\"pid\":4256,\"ramUsage\":1.75,\"server\":\"omega-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/0a89c5d4-d3d9-49fd-b788-ba6d39e7d6a9\",\"moduleSequenceNumber\":151713}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/373f052c-07b4-44ff-8cf9-1cc1f810d7d0\",\"moduleSequenceNumber\":155125}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":155125,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/331a707c-a76c-4324-8bb6-65f6a849b6e4\",\"moduleSequenceNumber\":153816}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":153816,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/0a89c5d4-d3d9-49fd-b788-ba6d39e7d6a9\",\"moduleSequenceNumber\":151713}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":151713,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"CSEC\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":6875964.5,\"moneyMax\":17189911.25,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":202,\"serverGrowth\":30}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"30.8.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":148621,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":148623,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":148625,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92.5,\"hackDifficulty\":92.5,\"minDifficulty\":31,\"moneyAvailable\":4749728.3,\"moneyMax\":11874320.75,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":251,\"serverGrowth\":31}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"46.0.7.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/70a54a9a-251e-4bde-a2e0-4e453f3c6fdb\",\"moduleSequenceNumber\":157490}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":157490,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/43e6d807-2551-430b-8b2d-94f4e9bc6fe2\",\"moduleSequenceNumber\":171223}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":171223,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/5708c254-37e3-4a48-bb47-738b42582ae7\",\"moduleSequenceNumber\":150923}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":150923,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":75,\"hackDifficulty\":41.74999999999998,\"minDifficulty\":25,\"moneyAvailable\":2000000,\"moneyMax\":5000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"15.8.9.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/b796510f-4eb8-40b6-88ce-b30b2fa9fa57\",\"moduleSequenceNumber\":152237}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":152237,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/4f3962b8-417e-4fd6-a2a4-bb9710f71560\",\"moduleSequenceNumber\":151973}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":151973,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/25eabd9b-1790-48b8-8b17-20b21f80fe47\",\"moduleSequenceNumber\":150399}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":150399,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":130,\"hackDifficulty\":130,\"minDifficulty\":43,\"moneyAvailable\":25000000,\"moneyMax\":62500000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":500,\"serverGrowth\":36}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":7,\"fn\":\"contract-350385.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\")))))))))())((aa(\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"70.3.0.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0.47146327037392166],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.810000000000244,\"pid\":4538,\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/4ee18d0d-9f94-4e8e-b2af-a72ab6c111d3\",\"moduleSequenceNumber\":157492}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/87714310-e53b-437c-b480-599979dcde65\",\"moduleSequenceNumber\":157754}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":157754,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/4ee18d0d-9f94-4e8e-b2af-a72ab6c111d3\",\"moduleSequenceNumber\":157492}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":157492,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/478c6f0e-fefc-4e8e-96d1-504b24d31f34\",\"moduleSequenceNumber\":151977}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":151977,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnitek\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":155,\"hackDifficulty\":155,\"minDifficulty\":52,\"moneyAvailable\":90000000,\"moneyMax\":225000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1058,\"serverGrowth\":56}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"80.1.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":148729,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":148731,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":148733,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"alpha-ent\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":150,\"hackDifficulty\":150,\"minDifficulty\":50,\"moneyAvailable\":45000000,\"moneyMax\":112500000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":737,\"serverGrowth\":59}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"86.8.6.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":28,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.5403978031693046],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":117.61000000000114,\"pid\":4450,\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"threads\":16,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/37ea62fd-6567-44da-a538-50ee6b72eaa6\",\"moduleSequenceNumber\":153817}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/7c2f9cc5-eea1-492b-b0dd-2a7cf4a2287f\",\"moduleSequenceNumber\":180203}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":180203,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/9707f5a5-2940-4925-af95-e6720f75dff5\",\"moduleSequenceNumber\":152498}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":152498,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/37ea62fd-6567-44da-a538-50ee6b72eaa6\",\"moduleSequenceNumber\":153817}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":153817,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"taiyang-digital\",\"helios\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":548,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"81.1.5.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",0.9913005768952883],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":147.01000000000028,\"pid\":4428,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"threads\":9,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/db9c54ae-d4d0-4188-ab75-7a0f90c1673a\",\"moduleSequenceNumber\":163294}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/8567c407-dac4-4605-9c79-33fbb0927b8a\",\"moduleSequenceNumber\":188656}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":188656,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/b0aba15e-3fc9-4350-953c-775308dce618\",\"moduleSequenceNumber\":191298}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":191298,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/db9c54ae-d4d0-4188-ab75-7a0f90c1673a\",\"moduleSequenceNumber\":163294}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":163294,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"rho-construction\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":353,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"19.6.0.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":29.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",0.2810677793099958],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.810000000000244,\"pid\":4540,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"threads\":17,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/9b9b7dea-50c4-4b2e-9f81-6c5e11684670\",\"moduleSequenceNumber\":151186}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/76441c1a-9533-459f-8237-8762113af845\",\"moduleSequenceNumber\":156963}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":156963,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/23572980-9844-437c-85b3-0b78667741ab\",\"moduleSequenceNumber\":157491}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":157491,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/9b9b7dea-50c4-4b2e-9f81-6c5e11684670\",\"moduleSequenceNumber\":151186}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":151186,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"phantasy\",\"catalyst\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":205,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"81.3.3.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":148789,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/48dded32-65ca-4441-8250-56140b87b5d7\",\"moduleSequenceNumber\":166996}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":166996,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/82725c3a-0f0d-4b70-a6e5-8a8d7c8aabf4\",\"moduleSequenceNumber\":169638}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":169638,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"stormtech\",\"nwo\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":539,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"8.3.8.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":148459,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/cba54965-ddea-43ac-9c01-8d1dcaabbd3e\",\"moduleSequenceNumber\":148836}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":148836,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/1967f774-b16d-4913-ab8b-14384f9ca2a8\",\"moduleSequenceNumber\":151448}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":151448,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"neo-net\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":57,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"69.8.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"The-Cave\",\"moduleSequenceNumber\":148801,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":148803,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":148805,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"11.7.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":6000,\"serverGrowth\":0}},\"hacknet-node-0\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":6,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-0\",\"httpPortOpen\":false,\"ip\":\"78.0.5.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hacknet-node-0\",\"moduleSequenceNumber\":148357,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hacknet-node-0\",\"moduleSequenceNumber\":148359,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hacknet-node-0\",\"moduleSequenceNumber\":148361,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":2,\"cores\":6,\"hashCapacity\":128,\"hashRate\":0.3196681524172961,\"level\":27,\"onlineTimeSeconds\":5910.999999996815,\"totalHashesGenerated\":1574.5200306673462}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"18.1.6.0\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"hacknet-node-1\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":6,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-1\",\"httpPortOpen\":false,\"ip\":\"76.6.9.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hacknet-node-1\",\"moduleSequenceNumber\":148429,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hacknet-node-1\",\"moduleSequenceNumber\":148431,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hacknet-node-1\",\"moduleSequenceNumber\":148433,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":2,\"cores\":6,\"hashCapacity\":128,\"hashRate\":0.33150771361793674,\"level\":28,\"onlineTimeSeconds\":5900.999999996824,\"totalHashesGenerated\":1625.925183222638}},\"hacknet-node-2\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":6,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-2\",\"httpPortOpen\":false,\"ip\":\"13.0.8.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hacknet-node-2\",\"moduleSequenceNumber\":149351,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hacknet-node-2\",\"moduleSequenceNumber\":149353,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hacknet-node-2\",\"moduleSequenceNumber\":149355,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":2,\"cores\":6,\"hashCapacity\":128,\"hashRate\":0.33150771361793674,\"level\":28,\"onlineTimeSeconds\":5830.999999996888,\"totalHashesGenerated\":1628.2195601228154}},\"hacknet-node-3\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":6,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-3\",\"httpPortOpen\":false,\"ip\":\"2.7.8.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hacknet-node-3\",\"moduleSequenceNumber\":152764,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hacknet-node-3\",\"moduleSequenceNumber\":152766,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hacknet-node-3\",\"moduleSequenceNumber\":152768,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":2,\"cores\":6,\"hashCapacity\":128,\"hashRate\":0.33150771361793674,\"level\":28,\"onlineTimeSeconds\":5430.599999997252,\"totalHashesGenerated\":1606.49535405627}},\"hacknet-node-4\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":6,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-4\",\"httpPortOpen\":false,\"ip\":\"91.2.3.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hacknet-node-4\",\"moduleSequenceNumber\":159584,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hacknet-node-4\",\"moduleSequenceNumber\":159586,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hacknet-node-4\",\"moduleSequenceNumber\":159588,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":2,\"cores\":6,\"hashCapacity\":128,\"hashRate\":0.33150771361793674,\"level\":28,\"onlineTimeSeconds\":4669.799999997944,\"totalHashesGenerated\":1461.9842952197055}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.178,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.178,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.178,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.178,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.178,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.178,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.178,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.178,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.178,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.178,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.178,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.178,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.178,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.178,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.178,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.178,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.178,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.178,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.178,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.178,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.178,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.178,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.178,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.178,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.178,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.178,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.178,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.178,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.178,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.178,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.178,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.178,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.178,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.178,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.178,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.178,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.178,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.178,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":115.386,\"isBanned\":false,\"isMember\":true,\"name\":\"Aevum\",\"playerReputation\":232068.71842462328}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":36.2491,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":20.6047,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":309.3869,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":9150545.617647666}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":73.5075,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":53.1065,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":57.8879,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":52.1123,\"isBanned\":false,\"isMember\":true,\"name\":\"Bladeburners\",\"playerReputation\":78355.44805519801}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":10,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":30,\"CodeInstructionRunTime\":20,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":true,\"EnableBashHotkeys\":true,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":180,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":200,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":true,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#FFF\",\"primary\":\"#F8F8F2\",\"primarydark\":\"#FAFAEB\",\"successlight\":\"#ADE146\",\"success\":\"#A6E22E\",\"successdark\":\"#98E104\",\"errorlight\":\"#FF69A0\",\"error\":\"#F92672\",\"errordark\":\"#D10F56\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#E1D992\",\"warning\":\"#E6DB74\",\"warningdark\":\"#EDDD54\",\"infolight\":\"#92E1F1\",\"info\":\"#66D9EF\",\"infodark\":\"#31CDED\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#F92672\",\"money\":\"#E6DB74\",\"hack\":\"#A6E22E\",\"combat\":\"#75715E\",\"cha\":\"#AE81FF\",\"int\":\"#66D9EF\",\"rep\":\"#E69F66\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#272822\",\"backgroundsecondary\":\"#1B1C18\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":\"1.25\",\"fontFamily\":\"monospace\"},\"overview\":{\"x\":-449,\"y\":53,\"opened\":false},\"EditorTheme\":{\"base\":\"vs-dark\",\"inherit\":true,\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}}}}","VersionSave":"15","AllGangsSave":"{\"Slum Snakes\":{\"power\":2223.979485696197,\"territory\":0.9263433711010319},\"Tetrads\":{\"power\":958.436493171012,\"territory\":0},\"The Syndicate\":{\"power\":1019.129321990326,\"territory\":0},\"The Dark Army\":{\"power\":932.2660006986409,\"territory\":0},\"Speakers for the Dead\":{\"power\":8.344418938745251,\"territory\":0.07365662889896817},\"NiteSec\":{\"power\":961.9947044088441,\"territory\":0},\"The Black Hand\":{\"power\":96.61808321073221,\"territory\":0}}","LastExportBonus":"1652613490128","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}