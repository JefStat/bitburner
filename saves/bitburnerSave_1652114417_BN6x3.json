{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":167,\"hp\":164,\"max_hp\":164,\"strength\":2102,\"defense\":1541,\"dexterity\":1340,\"agility\":4291,\"charisma\":634,\"intelligence\":175,\"hacking_chance_mult\":1.6773885669531117,\"hacking_speed_mult\":1.727710223961705,\"hacking_money_mult\":1.8451274236484227,\"hacking_grow_mult\":1.6773885669531117,\"hacking_exp\":2565326.9502697513,\"strength_exp\":166426.65396708017,\"defense_exp\":166426.65396708017,\"dexterity_exp\":236689.4849845958,\"agility_exp\":186783.36871411226,\"charisma_exp\":209148.40730145836,\"intelligence_exp\":125752.89289940934,\"hacking_mult\":1.761257995300767,\"strength_mult\":11.376372924289335,\"defense_mult\":8.342673477812177,\"dexterity_mult\":6.837494431525369,\"agility_mult\":22.768879225858704,\"charisma_mult\":3.301301986391758,\"hacking_exp_mult\":2.9409486005532215,\"strength_exp_mult\":2.8893530110698316,\"defense_exp_mult\":2.8893530110698316,\"dexterity_exp_mult\":3.322755962730306,\"agility_exp_mult\":2.8893530110698316,\"charisma_exp_mult\":2.5797794741694924,\"company_rep_mult\":5.818213502086944,\"faction_rep_mult\":2.5686115976579353,\"money\":1730014000.4252596,\"city\":\"Chongqing\",\"location\":\"Travel Agency\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[\"hacknet-node-0\"],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":64,\"hashes\":2.024329024108775,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Aevum\",\"Sector-12\",\"Tetrads\",\"Slum Snakes\",\"Tian Di Hui\",\"CyberSec\",\"Bladeburners\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"GOLEM Serum\"},{\"level\":1,\"name\":\"Vangelis Virus\"},{\"level\":1,\"name\":\"I.N.T.E.R.L.I.N.K.E.D\"},{\"level\":1,\"name\":\"PCMatrix\"},{\"level\":1,\"name\":\"Graphene Bionic Spine Upgrade\"}],\"augmentations\":[{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":13,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"ADR-V2 Pheromone Gene\"},{\"level\":1,\"name\":\"The Shadow's Simulacrum\"},{\"level\":1,\"name\":\"Power Recirculation Core\"},{\"level\":1,\"name\":\"Bionic Legs\"},{\"level\":1,\"name\":\"Neurotrainer III\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Bionic Spine\"},{\"level\":1,\"name\":\"SmartSonar Implant\"},{\"level\":1,\"name\":\"BLADE-51b Tesla Armor\"},{\"level\":1,\"name\":\"ORION-MKIV Shoulder\"},{\"level\":1,\"name\":\"EMS-4 Recombination\"},{\"level\":1,\"name\":\"EsperTech Bladeburner Eyewear\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Combat Rib II\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Augmented Targeting III\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"HemoRecirculator\"},{\"level\":1,\"name\":\"Graphene Bionic Legs Upgrade\"},{\"level\":1,\"name\":\"Synthetic Heart\"},{\"level\":1,\"name\":\"Photosynthetic Cells\"},{\"level\":1,\"name\":\"HyperSight Corneal Implant\"},{\"level\":1,\"name\":\"Synfibril Muscle\"},{\"level\":1,\"name\":\"FocusWire\"},{\"level\":1,\"name\":\"Combat Rib III\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"}],\"sourceFiles\":[{\"lvl\":3,\"n\":1},{\"lvl\":3,\"n\":5},{\"lvl\":3,\"n\":2},{\"lvl\":3,\"n\":3},{\"lvl\":3,\"n\":4},{\"lvl\":3,\"n\":10},{\"lvl\":1,\"n\":9},{\"lvl\":2,\"n\":6},{\"lvl\":1,\"n\":7},{\"lvl\":3,\"n\":11}],\"numPeopleKilled\":0,\"karma\":-323246.89999999315,\"crime_money_mult\":3.5911197115964355,\"crime_success_mult\":2.0893787412924723,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":5,\"workExpMult\":4,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":100,\"graftAugmentationName\":\"\",\"timeWorkedGraftAugmentation\":0,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":2000,\"work_money_mult\":3.4540785370698472,\"hacknet_node_money_mult\":1.5891049581661056,\"hacknet_node_purchase_cost_mult\":0.5762316694803805,\"hacknet_node_ram_cost_mult\":0.5762316694803805,\"hacknet_node_core_cost_mult\":0.5762316694803805,\"hacknet_node_level_cost_mult\":0.5762316694803805,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":{\"ctor\":\"Gang\",\"data\":{\"facName\":\"Slum Snakes\",\"members\":[{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":460944.5059115253,\"hack\":2810,\"str\":562204,\"def\":175882,\"dex\":12042,\"agi\":4,\"cha\":7643,\"hack_exp\":18520.699656646226,\"str_exp\":683292.0902273831,\"def_exp\":266211.8326377364,\"dex_exp\":49141.012899096095,\"agi_exp\":0,\"cha_exp\":50395.95279745213,\"hack_mult\":1,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":4.553535943756801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":1186851.1581306634,\"str_asc_points\":14016811.952094335,\"def_asc_points\":6437326.275214199,\"dex_asc_points\":2759679.9075589585,\"agi_asc_points\":39.12612661317841,\"cha_asc_points\":2545478.387596278,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Fawn\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":257054.06229807885,\"hack\":2443,\"str\":514539,\"def\":159682,\"dex\":10780,\"agi\":4,\"cha\":6846,\"hack_exp\":11189.46050241816,\"str_exp\":405385.78206716874,\"def_exp\":158436.27230686572,\"dex_exp\":29680.656342066744,\"agi_exp\":0,\"cha_exp\":30437.03024420367,\"hack_mult\":1,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":4.553535943756801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":1198603.6365841199,\"str_asc_points\":13650523.333200186,\"def_asc_points\":6308641.650684813,\"dex_asc_points\":2785436.873882319,\"agi_asc_points\":39.12612661317841,\"cha_asc_points\":2568966.6160399765,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"TFT\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":1634561.9655602996,\"hack\":3684,\"str\":567527,\"def\":186195,\"dex\":14911,\"agi\":4,\"cha\":9419,\"hack_exp\":62312.57513037213,\"str_exp\":2044562.0759163443,\"def_exp\":816388.150242028,\"dex_exp\":164553.7448345737,\"agi_exp\":0,\"cha_exp\":168227.5785583895,\"hack_mult\":1,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":4.553535943756801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":1151274.783690155,\"str_asc_points\":10754325.472581293,\"def_asc_points\":5187884.637990081,\"dex_asc_points\":2651747.4389141924,\"agi_asc_points\":37.74432233956791,\"cha_asc_points\":2430628.5489307605,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Turduck'n\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":383215.4400204618,\"hack\":2742,\"str\":504689,\"def\":160572,\"dex\":11792,\"agi\":4,\"cha\":7479,\"hack_exp\":16665.162893638797,\"str_exp\":564487.1999685841,\"def_exp\":223914.2073690931,\"dex_exp\":44135.429580244774,\"agi_exp\":0,\"cha_exp\":45229.44420754596,\"hack_mult\":1,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":4.553535943756801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":1197419.067668227,\"str_asc_points\":11920383.312958216,\"def_asc_points\":5674919.11682093,\"dex_asc_points\":2773899.8901405716,\"agi_asc_points\":37.74432233956791,\"cha_asc_points\":2554854.422253538,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Fender\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":793712.344927516,\"hack\":3274,\"str\":530033,\"def\":171943,\"dex\":13548,\"agi\":4,\"cha\":8569,\"hack_exp\":32896.38639520578,\"str_exp\":1068554.3096185522,\"def_exp\":426415.24929813045,\"dex_exp\":86711.52647425704,\"agi_exp\":0,\"cha_exp\":88702.93369967933,\"hack_mult\":1,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":4.553535943756801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":1206182.462150483,\"str_asc_points\":11042433.740238054,\"def_asc_points\":5320487.25964173,\"dex_asc_points\":2767956.8037082115,\"agi_asc_points\":33.25688209904128,\"cha_asc_points\":2540324.528418991,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Just Moe\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":1365159.948788417,\"hack\":3650,\"str\":535844,\"def\":176574,\"dex\":14741,\"agi\":4,\"cha\":9290,\"hack_exp\":55114.23394501869,\"str_exp\":1715649.0866095298,\"def_exp\":689326.8429680642,\"dex_exp\":144734.00800552193,\"agi_exp\":0,\"cha_exp\":147655.69036578425,\"hack_mult\":1,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":4.553535943756801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":1190121.9001708564,\"str_asc_points\":10006352.623527056,\"def_asc_points\":4887464.423207039,\"dex_asc_points\":2710778.9076721678,\"agi_asc_points\":38.267122170746305,\"cha_asc_points\":2474348.6055028224,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Mixer\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":1296926.6470186077,\"hack\":3642,\"str\":525180,\"def\":173437,\"dex\":14669,\"agi\":4,\"cha\":9232,\"hack_exp\":53349.55995642681,\"str_exp\":1630298.777277634,\"def_exp\":656745.0529978934,\"dex_exp\":139642.9080813217,\"agi_exp\":0,\"cha_exp\":142294.88522013006,\"hack_mult\":1,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":4.553535943756801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":1201355.5906781717,\"str_asc_points\":9734177.843845174,\"def_asc_points\":4779394.092206656,\"dex_asc_points\":2718545.9833773323,\"agi_asc_points\":36.92924297936842,\"cha_asc_points\":2475626.2731658733,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Hip\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":168356.13939475475,\"hack\":2041,\"str\":437813,\"def\":139011,\"dex\":9348,\"agi\":4,\"cha\":6060,\"hack_exp\":7757.343986112277,\"str_exp\":270801.82768573036,\"def_exp\":108844.74109437769,\"dex_exp\":20770.724553199205,\"agi_exp\":0,\"cha_exp\":21641.496425791836,\"hack_mult\":1,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":4.553535943756801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":1058799.1834347304,\"str_asc_points\":11195555.840678867,\"def_asc_points\":5472323.093024608,\"dex_asc_points\":2507147.093288221,\"agi_asc_points\":12.571189787803121,\"cha_asc_points\":2387034.4426088757,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Teal\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":709904.2754966447,\"hack\":2836,\"str\":498636,\"def\":164039,\"dex\":12106,\"agi\":4,\"cha\":7813,\"hack_exp\":27732.10967769189,\"str_exp\":953281.8276762161,\"def_exp\":385762.1829709635,\"dex_exp\":74559.03570367604,\"agi_exp\":0,\"cha_exp\":77557.46663419224,\"hack_mult\":1,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":4.553535943756801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":982371.1286797966,\"str_asc_points\":10071806.667984199,\"def_asc_points\":4990205.206320937,\"dex_asc_points\":2345305.1698716977,\"agi_asc_points\":0,\"cha_asc_points\":2225633.320215404,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Brownstone\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":1311007.5594442205,\"hack\":1970,\"str\":609627,\"def\":211683,\"dex\":10052,\"agi\":4,\"cha\":7203,\"hack_exp\":29980.731679781074,\"str_exp\":1714515.0023048678,\"def_exp\":721288.4096395493,\"dex_exp\":93864.81777019954,\"agi_exp\":0,\"cha_exp\":106661.00244932351,\"hack_mult\":1,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":4.553535943756801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":456504.7524816808,\"str_asc_points\":12953836.389218222,\"def_asc_points\":6936622.922326513,\"dex_asc_points\":1477935.7499052319,\"agi_asc_points\":0,\"cha_asc_points\":1673665.9597304557,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Sal\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":140390.50689953633,\"hack\":974,\"str\":470090,\"def\":154205,\"dex\":5960,\"agi\":4,\"cha\":4297,\"hack_exp\":3842.077724089877,\"str_exp\":237227.53769909145,\"def_exp\":98293.63365227947,\"dex_exp\":12258.531626511232,\"agi_exp\":0,\"cha_exp\":13851.243510686856,\"hack_mult\":1,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":4.553535943756801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":407191.21944589494,\"str_asc_points\":13469494.411542917,\"def_asc_points\":6996586.755746642,\"dex_asc_points\":1369090.1295043244,\"agi_asc_points\":0,\"cha_asc_points\":1532993.289779828,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Right Hand\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":1677625.5812098428,\"hack\":1831,\"str\":555029,\"def\":195636,\"dex\":9460,\"agi\":4,\"cha\":6770,\"hack_exp\":36210.08896098931,\"str_exp\":2072449.8716722548,\"def_exp\":881354.6126053794,\"dex_exp\":115456.98720705468,\"agi_exp\":0,\"cha_exp\":131154.4021167706,\"hack_mult\":1,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":4.553535943756801,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":360710.038798895,\"str_asc_points\":10252318.632692458,\"def_asc_points\":5610088.8659140915,\"dex_asc_points\":1211235.2757070893,\"agi_asc_points\":0,\"cha_asc_points\":1370759.9365010383,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Spine\",\"Nanofiber Weave\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Left Shark\"}}],\"wanted\":334.37797002058187,\"respect\":10198528.36462391,\"isHackingGang\":false,\"respectGainRate\":1776.4125906487127,\"wantedGainRate\":0.0002502644662082179,\"moneyGainRate\":20303250.88207311,\"storedCycles\":6,\"storedTerritoryAndPowerCycles\":39,\"territoryClashChance\":0,\"territoryWarfareEngaged\":false,\"notifyMemberDeath\":true}},\"corporation\":{\"ctor\":\"Corporation\",\"data\":{\"name\":\"corp\",\"divisions\":[{\"ctor\":\"Industry\",\"data\":{\"name\":\"Agriculture\",\"type\":\"Agriculture\",\"sciResearch\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Scientific Research\",\"qty\":0,\"qlt\":0,\"dmd\":0,\"dmdR\":[0,0],\"cmp\":0,\"cmpR\":[0,0],\"mv\":0,\"mku\":0,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":0,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"researched\":{},\"reqMats\":{\"Water\":0.5,\"Energy\":0.5},\"prodMats\":[\"Plants\",\"Food\"],\"products\":{},\"makesProducts\":false,\"awareness\":3.0300000000000002,\"popularity\":1.0199,\"startingCost\":40000000000,\"reFac\":0.72,\"sciFac\":0.5,\"hwFac\":0.2,\"robFac\":0.3,\"aiFac\":0.3,\"advFac\":0.04,\"prodMult\":6,\"upgrades\":[0,1],\"state\":\"PRODUCTION\",\"newInd\":true,\"offices\":{\"Aevum\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[],\"employeeProd\":{\"Operations\":0,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"total\":0},\"employeeJobs\":{\"Operations\":0,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0,\"total\":0},\"loc\":\"Aevum\",\"size\":6}},\"Chongqing\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[],\"employeeProd\":{\"Operations\":0,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"total\":0},\"employeeJobs\":{\"Operations\":0,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0,\"total\":0},\"loc\":\"Chongqing\",\"size\":6}},\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"y0SjSjq\",\"mor\":52,\"hap\":53.998927899776774,\"ene\":79.99892789977677,\"int\":76,\"cha\":96,\"exp\":67.003,\"cre\":81,\"eff\":56,\"sal\":1128,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"P9ReeQi\",\"mor\":63,\"hap\":75.99853005999621,\"ene\":82.99853005999621,\"int\":67,\"cha\":63,\"exp\":84.003,\"cre\":74,\"eff\":67,\"sal\":1065,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"GnoOouJ\",\"mor\":80,\"hap\":68.99837278622836,\"ene\":94.99837278622836,\"int\":63,\"cha\":79,\"exp\":65.003,\"cre\":91,\"eff\":82,\"sal\":1140,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"VQNsF6A\",\"mor\":53,\"hap\":77.99936084313205,\"ene\":58.99936084313206,\"int\":77,\"cha\":55,\"exp\":55.003,\"cre\":92,\"eff\":96,\"sal\":1125,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"CBQ9bqr\",\"mor\":92,\"hap\":87.99775723078785,\"ene\":84.99775723078785,\"int\":83,\"cha\":87,\"exp\":71.003,\"cre\":62,\"eff\":91,\"sal\":1182,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"PlI3bQj\",\"mor\":97,\"hap\":66.99919179943011,\"ene\":74.99919179943011,\"int\":84,\"cha\":58,\"exp\":59.003,\"cre\":81,\"eff\":97,\"sal\":1137,\"loc\":\"\",\"pos\":\"Business\"}}],\"employeeProd\":{\"Operations\":161.09355361597545,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"total\":161.09355361597545,\"Unassigned\":null},\"employeeJobs\":{\"Operations\":2,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"Training\":0,\"Unassigned\":4,\"total\":6},\"loc\":\"Sector-12\",\"size\":6}},\"New Tokyo\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[],\"employeeProd\":{\"Operations\":0,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"total\":0},\"employeeJobs\":{\"Operations\":0,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0,\"total\":0},\"loc\":\"New Tokyo\",\"size\":6}},\"Ishima\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[],\"employeeProd\":{\"Operations\":0,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"total\":0},\"employeeJobs\":{\"Operations\":0,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0,\"total\":0},\"loc\":\"Ishima\",\"size\":3}},\"Volhaven\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[],\"employeeProd\":{\"Operations\":0,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"total\":0},\"employeeJobs\":{\"Operations\":0,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0,\"total\":0},\"loc\":\"Volhaven\",\"size\":3}}},\"lastCycleRevenue\":0,\"lastCycleExpenses\":0,\"thisCycleRevenue\":0,\"thisCycleExpenses\":67770,\"warehouses\":{\"Aevum\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"sizeUsed\":0,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":0,\"loc\":\"Aevum\",\"size\":120,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":74.9732807068259,\"dmdR\":[65,85],\"cmp\":50.0636219757555,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1499.5007529474165,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":89.93044960398227,\"dmdR\":[80,99],\"cmp\":79.8591481305872,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":79.5693662465741,\"dmdR\":[70,90],\"cmp\":59.81316985409209,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70.31099549606142,\"dmdR\":[20,90],\"cmp\":50.045481457030974,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":84.69106911919148,\"dmdR\":[80,90],\"cmp\":79.64152816479805,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":90.0101636944684,\"dmdR\":[80,99],\"cmp\":90.42769690802878,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":75000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":89.2903128252238,\"dmdR\":[80,99],\"cmp\":89.80184682157123,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":15000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":49.581785505201005,\"dmdR\":[5,99],\"cmp\":50.5840283988915,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":79785.63273842452,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}},\"Chongqing\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"sizeUsed\":0,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":0,\"loc\":\"Chongqing\",\"size\":120,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":75.10466473089303,\"dmdR\":[65,85],\"cmp\":49.91724254937597,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1501.8994644568513,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":90.12914249039717,\"dmdR\":[80,99],\"cmp\":79.98398282512146,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2000.0802393950069,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":79.73432823253134,\"dmdR\":[70,90],\"cmp\":59.44231637544808,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":4999.999999999999,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":69.59142105500044,\"dmdR\":[20,90],\"cmp\":49.78151692954549,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":84.72853410195674,\"dmdR\":[80,90],\"cmp\":80.36961057352369,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7974.494365218537,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":90.08545515138478,\"dmdR\":[80,99],\"cmp\":89.56413655225238,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":75037.4373825035,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":89.36157010257031,\"dmdR\":[80,99],\"cmp\":89.58180911379422,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":15000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":49.344827591349436,\"dmdR\":[5,99],\"cmp\":49.964417716061874,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":80000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}},\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"sizeUsed\":0,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":2.428054243180504,\"loc\":\"Sector-12\",\"size\":120,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":75.08032003639967,\"dmdR\":[65,85],\"cmp\":50.00967052099462,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1499.9999999999998,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":90.00932662707555,\"dmdR\":[80,99],\"cmp\":80.07988713308806,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80.02028650224234,\"dmdR\":[70,90],\"cmp\":60.06117577133899,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70.33147669623871,\"dmdR\":[20,90],\"cmp\":50.199362709974984,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2999.9999999999995,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":85.25307864840303,\"dmdR\":[80,90],\"cmp\":80.23062855191802,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":89.78232743252264,\"dmdR\":[80,99],\"cmp\":90.11276702878882,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":74783.62011951303,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":89.65567557708074,\"dmdR\":[80,99],\"cmp\":90.12402227735787,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":14950.166512703136,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":49.38350573209459,\"dmdR\":[5,99],\"cmp\":50.6779063111475,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":79581.00684402436,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}},\"New Tokyo\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"sizeUsed\":0,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":0,\"loc\":\"New Tokyo\",\"size\":120,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":74.92228205631845,\"dmdR\":[65,85],\"cmp\":50.04369323334284,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1498.8486047570898,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":89.88287063893897,\"dmdR\":[80,99],\"cmp\":79.99615334931251,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1999.9999999999998,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80.156374559143,\"dmdR\":[70,90],\"cmp\":60.044020740458144,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":69.7546325166527,\"dmdR\":[20,90],\"cmp\":49.793080048704766,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2999.9999999999995,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":85.04511610703474,\"dmdR\":[80,90],\"cmp\":80.08623869737376,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":89.94232483389005,\"dmdR\":[80,99],\"cmp\":89.72342399347193,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":75000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":89.67852718690037,\"dmdR\":[80,99],\"cmp\":89.36461588866851,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":15000.000000000002,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":49.79708824573309,\"dmdR\":[5,99],\"cmp\":49.26624008135279,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":80000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}},\"Ishima\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"sizeUsed\":0,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":0,\"loc\":\"Ishima\",\"size\":120,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":74.99389714653609,\"dmdR\":[65,85],\"cmp\":49.90095619949039,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1500,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":89.94330343785482,\"dmdR\":[80,99],\"cmp\":80.09974372938375,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1999.8932310177952,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80.48108164335135,\"dmdR\":[70,90],\"cmp\":60.02063102531861,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70.1638731287033,\"dmdR\":[20,90],\"cmp\":50.26815557723484,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":85.15481592094581,\"dmdR\":[80,90],\"cmp\":79.65025180454236,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8000.154406791287,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":89.98368083999131,\"dmdR\":[80,99],\"cmp\":90.17191829884848,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":74995.84583646047,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":89.91434582705989,\"dmdR\":[80,99],\"cmp\":89.63331881215092,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":15000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":50.466957639837005,\"dmdR\":[5,99],\"cmp\":50.3628053993359,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":80000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}},\"Volhaven\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"sizeUsed\":0,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":0,\"loc\":\"Volhaven\",\"size\":120,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":75.14547845234436,\"dmdR\":[65,85],\"cmp\":50.04687573212324,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1500,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":90.12588495039293,\"dmdR\":[80,99],\"cmp\":80.02063394760413,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80.02915248695533,\"dmdR\":[70,90],\"cmp\":59.96526881956138,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5012.988189785772,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70.1265716289765,\"dmdR\":[20,90],\"cmp\":50.103920098124554,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000.0000000000005,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":84.6681308113074,\"dmdR\":[80,90],\"cmp\":79.71952238057882,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":90.00784816491415,\"dmdR\":[80,99],\"cmp\":90.02767217724852,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":75000,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":89.56903491748137,\"dmdR\":[80,99],\"cmp\":90.47849236351041,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":14931.510899686746,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":50.07530867389774,\"dmdR\":[5,99],\"cmp\":49.36454115510647,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":80664.22424818607,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}}}}}],\"funds\":3010000000,\"revenue\":0,\"expenses\":0,\"fundingRound\":0,\"public\":false,\"totalShares\":1000000000,\"numShares\":1000000000,\"shareSalesUntilPriceUpdate\":1000000,\"shareSaleCooldown\":0,\"issueNewSharesCooldown\":0,\"dividendPercentage\":0,\"dividendTaxPercentage\":50,\"issuedShares\":0,\"sharePrice\":0.01006611512449573,\"storedCycles\":0,\"avgProfit\":0,\"state\":{\"ctor\":\"CorporationState\",\"data\":{\"state\":3}},\"unlockUpgrades\":[0,1,0,0,0,0,0,1,1],\"upgrades\":[2,2,0,0,2,2,2,2,2,0],\"upgradeMultipliers\":[1.06,1.2,1,1,1.2,1.2,1.2,1.2,1.02,1]}},\"bladeburner\":{\"ctor\":\"Bladeburner\",\"data\":{\"numHosp\":5,\"moneyLost\":74100000,\"rank\":261449.90606257485,\"maxRank\":261449.90606257485,\"skillPoints\":145,\"totalSkillPoints\":87149,\"teamSize\":0,\"teamLost\":0,\"hpLost\":160,\"storedCycles\":7,\"randomEventCounter\":377,\"actionTimeToComplete\":2,\"actionTimeCurrent\":0,\"actionTimeOverflow\":0,\"action\":{\"ctor\":\"ActionIdentifier\",\"data\":{\"name\":\"Investigation\",\"type\":3}},\"cities\":{\"Aevum\":{\"ctor\":\"City\",\"data\":{\"name\":\"Aevum\",\"pop\":1005825387,\"popEst\":935806038,\"comms\":21,\"chaos\":14.256312698319936}},\"Chongqing\":{\"ctor\":\"City\",\"data\":{\"name\":\"Chongqing\",\"pop\":1475995513,\"popEst\":2820139237.356194,\"comms\":98,\"chaos\":95.03050297070058}},\"Sector-12\":{\"ctor\":\"City\",\"data\":{\"name\":\"Sector-12\",\"pop\":2031154587,\"popEst\":1094342805.7074993,\"comms\":69,\"chaos\":49.68141195560545}},\"New Tokyo\":{\"ctor\":\"City\",\"data\":{\"name\":\"New Tokyo\",\"pop\":1680464381,\"popEst\":1074634071.0242352,\"comms\":33,\"chaos\":1.5788124799995966}},\"Ishima\":{\"ctor\":\"City\",\"data\":{\"name\":\"Ishima\",\"pop\":1497388062,\"popEst\":1497388062,\"comms\":15,\"chaos\":24.07050889641957}},\"Volhaven\":{\"ctor\":\"City\",\"data\":{\"name\":\"Volhaven\",\"pop\":1109534879,\"popEst\":884200419.4328107,\"comms\":39,\"chaos\":2.4843728418771875}}},\"city\":\"Ishima\",\"skills\":{\"Short-Circuit\":100,\"Digital Observer\":100,\"Evasive System\":100,\"Reaper\":83,\"Overclock\":90,\"Blade's Intuition\":100,\"Cloak\":126,\"Datamancer\":207,\"Cyber's Edge\":23,\"Hyperdrive\":1,\"Tracer\":1,\"Hands of Midas\":1},\"skillMultipliers\":{\"successChanceAll\":4,\"successChanceStealth\":7.93,\"successChanceKill\":6.5,\"successChanceContract\":1.04,\"successChanceOperation\":5,\"successChanceEstimate\":11.35,\"actionTime\":0.09999999999999998,\"effHack\":1,\"effStr\":2.66,\"effDef\":2.66,\"effDex\":13.3,\"effAgi\":13.3,\"effCha\":1,\"effInt\":1,\"stamina\":1.46,\"money\":1.1,\"expGain\":1.1},\"staminaBonus\":0,\"maxStamina\":10067.108183606912,\"stamina\":10065.16818241756,\"contracts\":{\"Tracking\":{\"ctor\":\"Contract\",\"data\":{\"name\":\"Tracking\",\"level\":27,\"maxLevel\":27,\"autoLevel\":true,\"baseDifficulty\":122.926046942069,\"difficultyFac\":1.02,\"rewardFac\":1.041,\"successes\":409,\"failures\":3,\"rankGain\":0.3,\"rankLoss\":0,\"hpLoss\":0.5,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":770.4466666665893,\"weights\":{\"hack\":0,\"str\":0.05,\"def\":0.05,\"dex\":0.35,\"agi\":0.35,\"cha\":0.1,\"int\":0.05},\"decays\":{\"hack\":0,\"str\":0.91,\"def\":0.91,\"dex\":0.91,\"agi\":0.91,\"cha\":0.9,\"int\":1},\"teamCount\":0}},\"Bounty Hunter\":{\"ctor\":\"Contract\",\"data\":{\"name\":\"Bounty Hunter\",\"level\":13,\"maxLevel\":13,\"autoLevel\":true,\"baseDifficulty\":236.56556574749163,\"difficultyFac\":1.04,\"rewardFac\":1.085,\"successes\":105,\"failures\":3,\"rankGain\":0.9,\"rankLoss\":0,\"hpLoss\":1,\"hpLost\":0,\"isStealth\":false,\"isKill\":true,\"count\":1043.4718749999136,\"weights\":{\"hack\":0,\"str\":0.15,\"def\":0.15,\"dex\":0.25,\"agi\":0.25,\"cha\":0.1,\"int\":0.1},\"decays\":{\"hack\":0,\"str\":0.91,\"def\":0.91,\"dex\":0.91,\"agi\":0.91,\"cha\":0.8,\"int\":0.9},\"teamCount\":0}},\"Retirement\":{\"ctor\":\"Contract\",\"data\":{\"name\":\"Retirement\",\"level\":29,\"maxLevel\":29,\"autoLevel\":true,\"baseDifficulty\":192.3783528942694,\"difficultyFac\":1.03,\"rewardFac\":1.065,\"successes\":474,\"failures\":16,\"rankGain\":0.6,\"rankLoss\":0,\"hpLoss\":1,\"hpLost\":0,\"isStealth\":false,\"isKill\":true,\"count\":704.073749999934,\"weights\":{\"hack\":0,\"str\":0.2,\"def\":0.2,\"dex\":0.2,\"agi\":0.2,\"cha\":0.1,\"int\":0.1},\"decays\":{\"hack\":0,\"str\":0.91,\"def\":0.91,\"dex\":0.91,\"agi\":0.91,\"cha\":0.8,\"int\":0.9},\"teamCount\":0}}},\"operations\":{\"Investigation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Investigation\",\"level\":14,\"maxLevel\":14,\"autoLevel\":true,\"baseDifficulty\":391.10874607504013,\"difficultyFac\":1.03,\"rewardFac\":1.07,\"successes\":114,\"failures\":4,\"rankGain\":2.2,\"rankLoss\":0.2,\"hpLoss\":0,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":679.8087500002737,\"weights\":{\"hack\":0.25,\"str\":0.05,\"def\":0.05,\"dex\":0.2,\"agi\":0.1,\"cha\":0.25,\"int\":0.1},\"decays\":{\"hack\":0.85,\"str\":0.9,\"def\":0.9,\"dex\":0.9,\"agi\":0.9,\"cha\":0.7,\"int\":0.9},\"teamCount\":0,\"reqdRank\":25}},\"Undercover Operation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Undercover Operation\",\"level\":35,\"maxLevel\":35,\"autoLevel\":true,\"baseDifficulty\":488.1750235978893,\"difficultyFac\":1.04,\"rewardFac\":1.09,\"successes\":653,\"failures\":3,\"rankGain\":4.4,\"rankLoss\":0.4,\"hpLoss\":2,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":67.34229166693743,\"weights\":{\"hack\":0.2,\"str\":0.05,\"def\":0.05,\"dex\":0.2,\"agi\":0.2,\"cha\":0.2,\"int\":0.1},\"decays\":{\"hack\":0.8,\"str\":0.9,\"def\":0.9,\"dex\":0.9,\"agi\":0.9,\"cha\":0.7,\"int\":0.9},\"teamCount\":0,\"reqdRank\":100}},\"Sting Operation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Sting Operation\",\"level\":36,\"maxLevel\":36,\"autoLevel\":true,\"baseDifficulty\":699.0123673997006,\"difficultyFac\":1.04,\"rewardFac\":1.095,\"successes\":701,\"failures\":0,\"rankGain\":5.5,\"rankLoss\":0.5,\"hpLoss\":2.5,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":0.6158333336891484,\"weights\":{\"hack\":0.25,\"str\":0.05,\"def\":0.05,\"dex\":0.25,\"agi\":0.1,\"cha\":0.2,\"int\":0.1},\"decays\":{\"hack\":0.8,\"str\":0.85,\"def\":0.85,\"dex\":0.85,\"agi\":0.85,\"cha\":0.7,\"int\":0.9},\"teamCount\":0,\"reqdRank\":500}},\"Raid\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Raid\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":840.3229371196455,\"difficultyFac\":1.045,\"rewardFac\":1.1,\"successes\":0,\"failures\":0,\"rankGain\":55,\"rankLoss\":2.5,\"hpLoss\":50,\"hpLost\":0,\"isStealth\":false,\"isKill\":true,\"count\":607.3354166669812,\"weights\":{\"hack\":0.1,\"str\":0.2,\"def\":0.2,\"dex\":0.2,\"agi\":0.2,\"cha\":0,\"int\":0.1},\"decays\":{\"hack\":0.7,\"str\":0.8,\"def\":0.8,\"dex\":0.8,\"agi\":0.8,\"cha\":0,\"int\":0.9},\"teamCount\":0,\"reqdRank\":3000}},\"Stealth Retirement Operation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Stealth Retirement Operation\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":1034.6607482914546,\"difficultyFac\":1.05,\"rewardFac\":1.11,\"successes\":0,\"failures\":0,\"rankGain\":22,\"rankLoss\":2,\"hpLoss\":10,\"hpLost\":0,\"isStealth\":true,\"isKill\":true,\"count\":302.18333333365763,\"weights\":{\"hack\":0.1,\"str\":0.1,\"def\":0.1,\"dex\":0.3,\"agi\":0.3,\"cha\":0,\"int\":0.1},\"decays\":{\"hack\":0.7,\"str\":0.8,\"def\":0.8,\"dex\":0.8,\"agi\":0.8,\"cha\":0,\"int\":0.9},\"teamCount\":0,\"reqdRank\":20000}},\"Assassination\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Assassination\",\"level\":25,\"maxLevel\":25,\"autoLevel\":true,\"baseDifficulty\":1494.5966477618872,\"difficultyFac\":1.06,\"rewardFac\":1.14,\"successes\":358,\"failures\":0,\"rankGain\":44,\"rankLoss\":4,\"hpLoss\":5,\"hpLost\":0,\"isStealth\":true,\"isKill\":true,\"count\":0.984166667064816,\"weights\":{\"hack\":0.1,\"str\":0.1,\"def\":0.1,\"dex\":0.3,\"agi\":0.3,\"cha\":0,\"int\":0.1},\"decays\":{\"hack\":0.6,\"str\":0.8,\"def\":0.8,\"dex\":0.8,\"agi\":0.8,\"cha\":0,\"int\":0.8},\"teamCount\":0,\"reqdRank\":50000}}},\"blackops\":{\"Operation Typhoon\":true,\"Operation Zero\":true,\"Operation X\":true,\"Operation Titan\":true,\"Operation Ares\":true,\"Operation Archangel\":true,\"Operation Juggernaut\":true,\"Operation Red Dragon\":true,\"Operation K\":true,\"Operation Deckard\":true,\"Operation Tyrell\":true,\"Operation Wallace\":true,\"Operation Shoulder of Orion\":true,\"Operation Hyron\":true,\"Operation Morpheus\":true,\"Operation Ion Storm\":true,\"Operation Annihilus\":true,\"Operation Ultron\":true},\"logging\":{\"general\":true,\"contracts\":true,\"ops\":true,\"blackops\":true,\"events\":true},\"automateEnabled\":false,\"automateActionHigh\":{\"ctor\":\"ActionIdentifier\",\"data\":{\"name\":\"\",\"type\":1}},\"automateThreshHigh\":0,\"automateActionLow\":{\"ctor\":\"ActionIdentifier\",\"data\":{\"name\":\"\",\"type\":1}},\"automateThreshLow\":0,\"consoleHistory\":[],\"consoleLogs\":[\"[5/9 12:31:00] Undercover Operation successfully completed! Gained 65.463 rank\",\"[5/9 12:31:04] Undercover Operation successfully completed! Gained 76.122 rank\",\"[5/9 12:31:08] Undercover Operation successfully completed! Gained 62.621 rank\",\"[5/9 12:31:12] Undercover Operation successfully completed! Gained 76.091 rank\",\"[5/9 12:31:16] Undercover Operation successfully completed! Gained 62.875 rank\",\"[5/9 12:31:20] Undercover Operation successfully completed! Gained 63.625 rank\",\"[5/9 12:31:24] Undercover Operation successfully completed! Gained 68.075 rank\",\"[5/9 12:31:28] Undercover Operation successfully completed! Gained 65.035 rank\",\"[5/9 12:31:32] Undercover Operation successfully completed! Gained 76.210 rank\",\"[5/9 12:31:36] Undercover Operation successfully completed! Gained 71.842 rank\",\"[5/9 12:31:40] Undercover Operation successfully completed! Gained 75.887 rank\",\"[5/9 12:31:44] Undercover Operation successfully completed! Gained 75.654 rank\",\"[5/9 12:31:48] Undercover Operation successfully completed! Gained 75.814 rank\",\"[5/9 12:31:52] Undercover Operation successfully completed! Gained 70.362 rank\",\"[5/9 12:31:56] Undercover Operation successfully completed! Gained 62.581 rank\",\"[5/9 12:32:00] Undercover Operation successfully completed! Gained 66.834 rank\",\"[5/9 12:32:04] Undercover Operation successfully completed! Gained 73.360 rank\",\"[5/9 12:32:08] Undercover Operation successfully completed! Gained 65.366 rank\",\"[5/9 12:32:12] Undercover Operation successfully completed! Gained 66.942 rank\",\"[5/9 12:32:16] Undercover Operation successfully completed! Gained 69.639 rank\",\"[5/9 12:32:20] Undercover Operation successfully completed! Gained 62.689 rank\",\"[5/9 12:32:24] Undercover Operation successfully completed! Gained 64.157 rank\",\"[5/9 12:32:28] Undercover Operation successfully completed! Gained 66.312 rank\",\"[5/9 12:32:32] Undercover Operation successfully completed! Gained 74.467 rank\",\"[5/9 12:32:36] Undercover Operation successfully completed! Gained 72.335 rank\",\"[5/9 12:32:51] Assassination successfully completed! Gained 1,020.695 rank\",\"[5/9 12:32:55] Undercover Operation successfully completed! Gained 65.179 rank\",\"[5/9 12:32:59] Undercover Operation successfully completed! Gained 64.562 rank\",\"[5/9 12:33:03] Undercover Operation successfully completed! Gained 73.410 rank\",\"[5/9 12:33:07] Undercover Operation successfully completed! Gained 63.782 rank\",\"[5/9 12:33:11] Undercover Operation successfully completed! Gained 68.440 rank\",\"[5/9 12:33:15] Undercover Operation successfully completed! Gained 71.413 rank\",\"[5/9 12:33:19] Undercover Operation successfully completed! Gained 71.951 rank\",\"[5/9 12:33:23] Undercover Operation successfully completed! Gained 79.106 rank\",\"[5/9 12:33:27] Undercover Operation successfully completed! Gained 76.463 rank\",\"[5/9 12:33:31] Undercover Operation successfully completed! Gained 69.012 rank\",\"[5/9 12:33:35] Undercover Operation successfully completed! Gained 78.357 rank\",\"[5/9 12:33:39] Undercover Operation successfully completed! Gained 76.008 rank\",\"[5/9 12:33:43] Undercover Operation successfully completed! Gained 71.924 rank\",\"[5/9 12:33:47] Undercover Operation successfully completed! Gained 70.860 rank\",\"[5/9 12:33:51] Undercover Operation successfully completed! Gained 72.490 rank\",\"[5/9 12:33:55] Undercover Operation successfully completed! Gained 82.516 rank\",\"[5/9 12:33:59] Undercover Operation successfully completed! Gained 79.201 rank\",\"[5/9 12:34:03] Undercover Operation successfully completed! Gained 81.696 rank\",\"[5/9 12:34:07] Undercover Operation successfully completed! Gained 81.640 rank\",\"[5/9 12:34:11] Undercover Operation successfully completed! Gained 78.549 rank\",\"[5/9 12:34:15] Undercover Operation successfully completed! Gained 72.350 rank\",\"[5/9 12:34:19] Undercover Operation successfully completed! Gained 69.163 rank\",\"[5/9 12:34:23] Undercover Operation successfully completed! Gained 75.239 rank\",\"[5/9 12:34:29] Sting Operation successfully completed! Gained 141.427 rank\",\"[5/9 12:34:34] Undercover Operation successfully completed! Gained 73.709 rank\",\"[5/9 12:34:38] Undercover Operation successfully completed! Gained 71.839 rank\",\"[5/9 12:34:42] Undercover Operation successfully completed! Gained 69.581 rank\",\"[5/9 12:34:46] Undercover Operation successfully completed! Gained 79.211 rank\",\"[5/9 12:34:50] Undercover Operation successfully completed! Gained 73.220 rank\",\"[5/9 12:38:04] Operation Ultron successful! Gained 9,524.0 rank\",\"[5/9 12:38:10] Sting Operation successfully completed! Gained 126.911 rank\",\"[5/9 12:38:14] Undercover Operation successfully completed! Gained 82.091 rank\",\"[5/9 12:38:18] Undercover Operation successfully completed! Gained 71.194 rank\",\"[5/9 12:38:22] Undercover Operation successfully completed! Gained 69.020 rank\",\"[5/9 12:38:26] Undercover Operation successfully completed! Gained 70.878 rank\",\"[5/9 12:38:30] Undercover Operation successfully completed! Gained 75.947 rank\",\"[5/9 12:38:34] Undercover Operation successfully completed! Gained 81.797 rank\",\"[5/9 12:38:38] Tensions between Synthoids and humans lead to riots in Volhaven! Chaos increased\",\"[5/9 12:38:38] Undercover Operation successfully completed! Gained 75.245 rank\",\"[5/9 12:38:42] Undercover Operation successfully completed! Gained 68.849 rank\",\"[5/9 12:38:46] Undercover Operation successfully completed! Gained 79.441 rank\",\"[5/9 12:38:50] Undercover Operation successfully completed! Gained 79.994 rank\",\"[5/9 12:38:54] Undercover Operation successfully completed! Gained 77.553 rank\",\"[5/9 12:38:58] Undercover Operation successfully completed! Gained 82.400 rank\",\"[5/9 12:39:02] Undercover Operation successfully completed! Gained 79.741 rank\",\"[5/9 12:39:06] Undercover Operation successfully completed! Gained 71.747 rank\",\"[5/9 12:39:10] Undercover Operation successfully completed! Gained 76.425 rank\",\"[5/9 12:39:14] Undercover Operation successfully completed! Gained 86.105 rank\",\"[5/9 12:39:18] Undercover Operation successfully completed! Gained 79.974 rank\",\"[5/9 12:39:22] Undercover Operation successfully completed! Gained 82.421 rank\",\"[5/9 12:39:26] Undercover Operation successfully completed! Gained 87.407 rank\",\"[5/9 12:39:30] Undercover Operation successfully completed! Gained 82.070 rank\",\"[5/9 12:39:32] Investigation successfully completed! Gained 4.537 rank\",\"[5/9 12:39:34] Investigation successfully completed! Gained 4.796 rank\",\"[5/9 12:39:36] Investigation successfully completed! Gained 4.689 rank\",\"[5/9 12:39:38] Investigation successfully completed! Gained 5.225 rank\",\"[5/9 12:39:40] Investigation successfully completed! Gained 5.225 rank\",\"[5/9 12:39:42] Investigation successfully completed! Gained 5.047 rank\",\"[5/9 12:39:44] Investigation successfully completed! Gained 4.988 rank\",\"[5/9 12:39:46] Investigation successfully completed! Gained 5.333 rank\",\"[5/9 12:39:48] Investigation successfully completed! Gained 5.260 rank\",\"[5/9 12:39:50] Investigation successfully completed! Gained 4.769 rank\",\"[5/9 12:39:52] Investigation successfully completed! Gained 4.926 rank\",\"[5/9 12:39:54] Investigation successfully completed! Gained 4.535 rank\",\"[5/9 12:39:56] Investigation successfully completed! Gained 4.816 rank\",\"[5/9 12:39:58] Investigation successfully completed! Gained 4.798 rank\",\"[5/9 12:40:00] Investigation successfully completed! Gained 5.070 rank\",\"[5/9 12:40:02] Investigation successfully completed! Gained 4.893 rank\",\"[5/9 12:40:04] Investigation successfully completed! Gained 5.443 rank\",\"[5/9 12:40:06] Investigation successfully completed! Gained 4.937 rank\",\"[5/9 12:40:08] Investigation successfully completed! Gained 5.160 rank\",\"[5/9 12:40:12] Undercover Operation successfully completed! Gained 78.850 rank\",\"[5/9 12:40:14] Investigation successfully completed! Gained 5.137 rank\",\"[5/9 12:40:16] Investigation successfully completed! Gained 4.963 rank\"]}},\"bladeburner_max_stamina_mult\":1.08,\"bladeburner_stamina_gain_mult\":1.123632,\"bladeburner_analysis_mult\":1.1340000000000001,\"bladeburner_success_chance_mult\":1.2273509664000002,\"sleeves\":[{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":924,\"strength\":65697,\"defense\":53652,\"dexterity\":10017,\"agility\":11766,\"charisma\":1072,\"intelligence\":1,\"hp\":5375,\"max_hp\":5375,\"hacking_exp\":284522.4026145378,\"strength_exp\":83168.90480294985,\"defense_exp\":83168.90480294985,\"dexterity_exp\":95644.24052338592,\"agility_exp\":83168.90480294985,\"charisma_exp\":145852.66451745987,\"intelligence_exp\":0,\"hacking_mult\":13.081055489392524,\"strength_mult\":403.7458211949797,\"defense_mult\":329.72149620864525,\"dexterity_mult\":59.923627612024475,\"agility_mult\":72.312896269152,\"charisma_mult\":5.93653027968,\"hacking_exp_mult\":15.320075574544287,\"strength_exp_mult\":3.2663792700000003,\"defense_exp_mult\":3.2663792700000003,\"dexterity_exp_mult\":3.7563361604999996,\"agility_exp_mult\":3.2663792700000003,\"charisma_exp_mult\":5.997338489142,\"hacking_chance_mult\":3779.1003343124794,\"hacking_speed_mult\":1470.9710301850196,\"hacking_money_mult\":1402181332.9564214,\"hacking_grow_mult\":269.38938999176025,\"company_rep_mult\":15.536583404842508,\"faction_rep_mult\":2.3516761125,\"crime_money_mult\":3.0461022109375007,\"crime_success_mult\":1.6300212500000002,\"work_money_mult\":2.34564,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"NutriGen Implant\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"BitWire\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"INFRARET Enhancement\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"Speech Processor Implant\",\"level\":1},{\"name\":\"DermaForce Particle Barrier\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen I\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"Artificial Synaptic Potentiation\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"Augmented Targeting III\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen II\",\"level\":1},{\"name\":\"Neurotrainer III\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"TITN-41 Gene-Modification Injection\",\"level\":1},{\"name\":\"CRTX42-AA Gene Modification\",\"level\":1},{\"name\":\"Neural-Retention Enhancement\",\"level\":1},{\"name\":\"Embedded Netburner Module\",\"level\":1},{\"name\":\"Bionic Arms\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"Neuregen Gene Modification\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen III\",\"level\":1},{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"The Black Hand\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"Synfibril Muscle\",\"level\":1},{\"name\":\"Neuralstimulator\",\"level\":1},{\"name\":\"Enhanced Myelin Sheathing\",\"level\":1},{\"name\":\"PCMatrix\",\"level\":1},{\"name\":\"Embedded Netburner Module Core Implant\",\"level\":1},{\"name\":\"HyperSight Corneal Implant\",\"level\":1},{\"name\":\"Neuronal Densification\",\"level\":1},{\"name\":\"Neural Accelerator\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen V\",\"level\":1},{\"name\":\"Graphene BrachiBlades Upgrade\",\"level\":1},{\"name\":\"Artificial Bio-neural Network Implant\",\"level\":1},{\"name\":\"Enhanced Social Interaction Implant\",\"level\":1},{\"name\":\"SmartJaw\",\"level\":1},{\"name\":\"nextSENS Gene Modification\",\"level\":1},{\"name\":\"PC Direct-Neural Interface\",\"level\":1},{\"name\":\"Graphene Bionic Arms Upgrade\",\"level\":1},{\"name\":\"Photosynthetic Cells\",\"level\":1},{\"name\":\"Neotra\",\"level\":1},{\"name\":\"OmniTek InfoLoad\",\"level\":1},{\"name\":\"PC Direct-Neural Interface Optimization Submodule\",\"level\":1},{\"name\":\"Synthetic Heart\",\"level\":1},{\"name\":\"Graphene Bionic Legs Upgrade\",\"level\":1},{\"name\":\"NEMEAN Subdermal Weave\",\"level\":1},{\"name\":\"Xanipher\",\"level\":1},{\"name\":\"BitRunners Neurolink\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V2 Upgrade\",\"level\":1},{\"name\":\"Graphene Bone Lacings\",\"level\":1},{\"name\":\"CordiARC Fusion Reactor\",\"level\":1},{\"name\":\"SPTN-97 Gene Modification\",\"level\":1},{\"name\":\"PC Direct-Neural Interface NeuroNet Injector\",\"level\":1},{\"name\":\"Graphene Bionic Spine Upgrade\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V3 Upgrade\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"Heist\",\"currentTask\":3,\"currentTaskLocation\":\"274149198.98437506\",\"currentTaskMaxTime\":600000,\"currentTaskTime\":342000,\"earningsForSleeves\":{\"hack\":88813.24535744567,\"str\":68339.1238835436,\"def\":68339.1238835436,\"dex\":72490.84551076753,\"agi\":68578.97395554358,\"cha\":32635.2808382832,\"money\":0},\"earningsForPlayer\":{\"hack\":88813.24535744567,\"str\":68339.1238835436,\"def\":68339.1238835436,\"dex\":72490.84551076753,\"agi\":68578.97395554358,\"cha\":32635.2808382832,\"money\":2254636705.2634997},\"earningsForTask\":{\"hack\":27576.136034179715,\"str\":5879.482686,\"def\":5879.482686,\"dex\":6761.405088899999,\"agi\":5879.482686,\"cha\":10795.2092804556,\"money\":548298397.9687501},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":6894.034008544929,\"str\":1469.8706715,\"def\":1469.8706715,\"dex\":1690.3512722249998,\"agi\":1469.8706715,\"cha\":2698.8023201139,\"money\":274149198.98437506},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":2,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":890,\"strength\":62712,\"defense\":51214,\"dexterity\":9573,\"agility\":11232,\"charisma\":1015,\"intelligence\":1,\"hp\":5131,\"max_hp\":5131,\"hacking_exp\":225223.62435116997,\"strength_exp\":65896.85928914447,\"defense_exp\":65896.85928914447,\"dexterity_exp\":75781.38818251652,\"agility_exp\":65896.85928914447,\"charisma_exp\":108186.77126717458,\"intelligence_exp\":0,\"hacking_mult\":13.081055489392526,\"strength_mult\":403.7458211949797,\"defense_mult\":329.72149620864525,\"dexterity_mult\":59.923627612024475,\"agility_mult\":72.312896269152,\"charisma_mult\":5.93653027968,\"hacking_exp_mult\":15.320075574544287,\"strength_exp_mult\":3.2663792700000003,\"defense_exp_mult\":3.2663792700000003,\"dexterity_exp_mult\":3.7563361604999996,\"agility_exp_mult\":3.2663792700000003,\"charisma_exp_mult\":5.997338489142,\"hacking_chance_mult\":1000.1255805247804,\"hacking_speed_mult\":468.0675909836948,\"hacking_money_mult\":79025984.11183594,\"hacking_grow_mult\":153.93679428100586,\"company_rep_mult\":15.536583404842508,\"faction_rep_mult\":2.3516761125,\"crime_money_mult\":3.0461022109375007,\"crime_success_mult\":1.6300212500000002,\"work_money_mult\":2.34564,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"NutriGen Implant\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"BitWire\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"INFRARET Enhancement\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"Speech Processor Implant\",\"level\":1},{\"name\":\"DermaForce Particle Barrier\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen I\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"Artificial Synaptic Potentiation\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"Augmented Targeting III\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen II\",\"level\":1},{\"name\":\"Neurotrainer III\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"TITN-41 Gene-Modification Injection\",\"level\":1},{\"name\":\"CRTX42-AA Gene Modification\",\"level\":1},{\"name\":\"Neural-Retention Enhancement\",\"level\":1},{\"name\":\"Embedded Netburner Module\",\"level\":1},{\"name\":\"Bionic Arms\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"Neuregen Gene Modification\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen III\",\"level\":1},{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"The Black Hand\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"Synfibril Muscle\",\"level\":1},{\"name\":\"Enhanced Social Interaction Implant\",\"level\":1},{\"name\":\"Enhanced Myelin Sheathing\",\"level\":1},{\"name\":\"Neuronal Densification\",\"level\":1},{\"name\":\"Neural Accelerator\",\"level\":1},{\"name\":\"nextSENS Gene Modification\",\"level\":1},{\"name\":\"PCMatrix\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen V\",\"level\":1},{\"name\":\"Embedded Netburner Module Core Implant\",\"level\":1},{\"name\":\"Neuralstimulator\",\"level\":1},{\"name\":\"HyperSight Corneal Implant\",\"level\":1},{\"name\":\"Graphene BrachiBlades Upgrade\",\"level\":1},{\"name\":\"Artificial Bio-neural Network Implant\",\"level\":1},{\"name\":\"SmartJaw\",\"level\":1},{\"name\":\"PC Direct-Neural Interface\",\"level\":1},{\"name\":\"Graphene Bionic Arms Upgrade\",\"level\":1},{\"name\":\"PC Direct-Neural Interface Optimization Submodule\",\"level\":1},{\"name\":\"Photosynthetic Cells\",\"level\":1},{\"name\":\"Neotra\",\"level\":1},{\"name\":\"OmniTek InfoLoad\",\"level\":1},{\"name\":\"Synthetic Heart\",\"level\":1},{\"name\":\"NEMEAN Subdermal Weave\",\"level\":1},{\"name\":\"Graphene Bone Lacings\",\"level\":1},{\"name\":\"Xanipher\",\"level\":1},{\"name\":\"BitRunners Neurolink\",\"level\":1},{\"name\":\"Graphene Bionic Legs Upgrade\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V2 Upgrade\",\"level\":1},{\"name\":\"SPTN-97 Gene Modification\",\"level\":1},{\"name\":\"CordiARC Fusion Reactor\",\"level\":1},{\"name\":\"Graphene Bionic Spine Upgrade\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V3 Upgrade\",\"level\":1},{\"name\":\"PC Direct-Neural Interface NeuroNet Injector\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"Heist\",\"currentTask\":3,\"currentTaskLocation\":\"274149198.98437506\",\"currentTaskMaxTime\":600000,\"currentTaskTime\":342000,\"earningsForSleeves\":{\"hack\":108563.06816741318,\"str\":73501.76335086538,\"def\":73501.76335086538,\"dex\":78783.39682004,\"agi\":73876.26609486538,\"cha\":50612.3217714114,\"money\":0},\"earningsForPlayer\":{\"hack\":108563.06816741318,\"str\":73501.76335086538,\"def\":73501.76335086538,\"dex\":78783.39682004,\"agi\":73876.26609486538,\"cha\":50612.3217714114,\"money\":3108412793.200981},\"earningsForTask\":{\"hack\":27576.136034179715,\"str\":5879.482686,\"def\":5879.482686,\"dex\":6761.405088899999,\"agi\":5879.482686,\"cha\":10795.2092804556,\"money\":548298397.9687501},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":6894.034008544929,\"str\":1469.8706715,\"def\":1469.8706715,\"dex\":1690.3512722249998,\"agi\":1469.8706715,\"cha\":2698.8023201139,\"money\":274149198.98437506},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":2,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":855,\"strength\":59964,\"defense\":48970,\"dexterity\":9165,\"agility\":10739,\"charisma\":967,\"intelligence\":1,\"hp\":4907,\"max_hp\":4907,\"hacking_exp\":177158.60282763987,\"strength_exp\":53170.91941634515,\"defense_exp\":53170.91941634515,\"dexterity_exp\":61146.557328796494,\"agility_exp\":53170.91941634515,\"charisma_exp\":83897.5503861495,\"intelligence_exp\":0,\"hacking_mult\":13.081055489392526,\"strength_mult\":403.7458211949797,\"defense_mult\":329.72149620864525,\"dexterity_mult\":59.923627612024475,\"agility_mult\":72.312896269152,\"charisma_mult\":5.93653027968,\"hacking_exp_mult\":15.320075574544287,\"strength_exp_mult\":3.2663792700000003,\"defense_exp_mult\":3.2663792700000003,\"dexterity_exp_mult\":3.7563361604999996,\"agility_exp_mult\":3.2663792700000003,\"charisma_exp_mult\":5.997338489142,\"hacking_chance_mult\":909.2050732043456,\"hacking_speed_mult\":403.8726830883011,\"hacking_money_mult\":44622238.34660416,\"hacking_grow_mult\":153.93679428100586,\"company_rep_mult\":15.536583404842508,\"faction_rep_mult\":2.3516761125,\"crime_money_mult\":3.0461022109375007,\"crime_success_mult\":1.6300212500000002,\"work_money_mult\":2.34564,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"NutriGen Implant\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"BitWire\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"INFRARET Enhancement\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"Speech Processor Implant\",\"level\":1},{\"name\":\"DermaForce Particle Barrier\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen I\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"Artificial Synaptic Potentiation\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"Augmented Targeting III\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen II\",\"level\":1},{\"name\":\"Neurotrainer III\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"TITN-41 Gene-Modification Injection\",\"level\":1},{\"name\":\"CRTX42-AA Gene Modification\",\"level\":1},{\"name\":\"Neural-Retention Enhancement\",\"level\":1},{\"name\":\"Embedded Netburner Module\",\"level\":1},{\"name\":\"Bionic Arms\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"Neuregen Gene Modification\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen III\",\"level\":1},{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"The Black Hand\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"Synfibril Muscle\",\"level\":1},{\"name\":\"Enhanced Social Interaction Implant\",\"level\":1},{\"name\":\"Enhanced Myelin Sheathing\",\"level\":1},{\"name\":\"Neuronal Densification\",\"level\":1},{\"name\":\"Neural Accelerator\",\"level\":1},{\"name\":\"nextSENS Gene Modification\",\"level\":1},{\"name\":\"PCMatrix\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen V\",\"level\":1},{\"name\":\"Embedded Netburner Module Core Implant\",\"level\":1},{\"name\":\"Graphene BrachiBlades Upgrade\",\"level\":1},{\"name\":\"Neuralstimulator\",\"level\":1},{\"name\":\"HyperSight Corneal Implant\",\"level\":1},{\"name\":\"Artificial Bio-neural Network Implant\",\"level\":1},{\"name\":\"SmartJaw\",\"level\":1},{\"name\":\"PC Direct-Neural Interface\",\"level\":1},{\"name\":\"Graphene Bionic Arms Upgrade\",\"level\":1},{\"name\":\"Photosynthetic Cells\",\"level\":1},{\"name\":\"Neotra\",\"level\":1},{\"name\":\"OmniTek InfoLoad\",\"level\":1},{\"name\":\"PC Direct-Neural Interface Optimization Submodule\",\"level\":1},{\"name\":\"Synthetic Heart\",\"level\":1},{\"name\":\"NEMEAN Subdermal Weave\",\"level\":1},{\"name\":\"Graphene Bone Lacings\",\"level\":1},{\"name\":\"Xanipher\",\"level\":1},{\"name\":\"BitRunners Neurolink\",\"level\":1},{\"name\":\"Graphene Bionic Legs Upgrade\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V2 Upgrade\",\"level\":1},{\"name\":\"SPTN-97 Gene Modification\",\"level\":1},{\"name\":\"CordiARC Fusion Reactor\",\"level\":1},{\"name\":\"Graphene Bionic Spine Upgrade\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V3 Upgrade\",\"level\":1},{\"name\":\"PC Direct-Neural Interface NeuroNet Injector\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"Heist\",\"currentTask\":3,\"currentTaskLocation\":\"274149198.98437506\",\"currentTaskMaxTime\":600000,\"currentTaskTime\":342000,\"earningsForSleeves\":{\"hack\":106602.24498768442,\"str\":72929.14679730158,\"def\":72929.14679730158,\"dex\":78068.18899478823,\"agi\":73055.38367730158,\"cha\":53037.3325518036,\"money\":0},\"earningsForPlayer\":{\"hack\":106602.24498768442,\"str\":72929.14679730158,\"def\":72929.14679730158,\"dex\":78068.18899478823,\"agi\":73055.38367730158,\"cha\":53037.3325518036,\"money\":3216217384.559676},\"earningsForTask\":{\"hack\":27576.136034179715,\"str\":5879.482686,\"def\":5879.482686,\"dex\":6761.405088899999,\"agi\":5879.482686,\"cha\":10795.2092804556,\"money\":548298397.9687501},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":6894.034008544929,\"str\":1469.8706715,\"def\":1469.8706715,\"dex\":1690.3512722249998,\"agi\":1469.8706715,\"cha\":2698.8023201139,\"money\":274149198.98437506},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":2,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":497,\"strength\":55957,\"defense\":45698,\"dexterity\":8569,\"agility\":10022,\"charisma\":923,\"intelligence\":1,\"hp\":4579,\"max_hp\":4579,\"hacking_exp\":135499.0566293722,\"strength_exp\":38851.09376113352,\"defense_exp\":38851.09376113352,\"dexterity_exp\":44678.75782530352,\"agility_exp\":38851.09376113352,\"charisma_exp\":66296.6656897545,\"intelligence_exp\":0,\"hacking_mult\":7.978977876221468,\"strength_mult\":403.7458211949797,\"defense_mult\":329.72149620864525,\"dexterity_mult\":59.923627612024475,\"agility_mult\":72.312896269152,\"charisma_mult\":5.93653027968,\"hacking_exp_mult\":7.104962585295901,\"strength_exp_mult\":3.2663792700000003,\"defense_exp_mult\":3.2663792700000003,\"dexterity_exp_mult\":3.7563361604999996,\"agility_exp_mult\":3.2663792700000003,\"charisma_exp_mult\":5.997338489142,\"hacking_chance_mult\":787.1905395708619,\"hacking_speed_mult\":400.1801328429223,\"hacking_money_mult\":43420870.39111866,\"hacking_grow_mult\":153.93679428100586,\"company_rep_mult\":15.536583404842508,\"faction_rep_mult\":2.3516761125,\"crime_money_mult\":3.0461022109375007,\"crime_success_mult\":1.6300212500000002,\"work_money_mult\":2.34564,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"NutriGen Implant\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"BitWire\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"INFRARET Enhancement\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"Speech Processor Implant\",\"level\":1},{\"name\":\"DermaForce Particle Barrier\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen I\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"Artificial Synaptic Potentiation\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"Augmented Targeting III\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen II\",\"level\":1},{\"name\":\"Neurotrainer III\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"TITN-41 Gene-Modification Injection\",\"level\":1},{\"name\":\"CRTX42-AA Gene Modification\",\"level\":1},{\"name\":\"Neural-Retention Enhancement\",\"level\":1},{\"name\":\"Embedded Netburner Module\",\"level\":1},{\"name\":\"Bionic Arms\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"Neuregen Gene Modification\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen III\",\"level\":1},{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"The Black Hand\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"Synfibril Muscle\",\"level\":1},{\"name\":\"Enhanced Social Interaction Implant\",\"level\":1},{\"name\":\"Enhanced Myelin Sheathing\",\"level\":1},{\"name\":\"Neuronal Densification\",\"level\":1},{\"name\":\"Neural Accelerator\",\"level\":1},{\"name\":\"nextSENS Gene Modification\",\"level\":1},{\"name\":\"Neuralstimulator\",\"level\":1},{\"name\":\"PCMatrix\",\"level\":1},{\"name\":\"Embedded Netburner Module Core Implant\",\"level\":1},{\"name\":\"HyperSight Corneal Implant\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen V\",\"level\":1},{\"name\":\"Graphene BrachiBlades Upgrade\",\"level\":1},{\"name\":\"SmartJaw\",\"level\":1},{\"name\":\"Artificial Bio-neural Network Implant\",\"level\":1},{\"name\":\"PC Direct-Neural Interface\",\"level\":1},{\"name\":\"Photosynthetic Cells\",\"level\":1},{\"name\":\"Synthetic Heart\",\"level\":1},{\"name\":\"Neotra\",\"level\":1},{\"name\":\"NEMEAN Subdermal Weave\",\"level\":1},{\"name\":\"Graphene Bionic Arms Upgrade\",\"level\":1},{\"name\":\"Graphene Bone Lacings\",\"level\":1},{\"name\":\"Xanipher\",\"level\":1},{\"name\":\"Graphene Bionic Legs Upgrade\",\"level\":1},{\"name\":\"PC Direct-Neural Interface Optimization Submodule\",\"level\":1},{\"name\":\"SPTN-97 Gene Modification\",\"level\":1},{\"name\":\"CordiARC Fusion Reactor\",\"level\":1},{\"name\":\"Graphene Bionic Spine Upgrade\",\"level\":1},{\"name\":\"PC Direct-Neural Interface NeuroNet Injector\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"Heist\",\"currentTask\":3,\"currentTaskLocation\":\"274149198.98437506\",\"currentTaskMaxTime\":600000,\"currentTaskTime\":342000,\"earningsForSleeves\":{\"hack\":65520.985678860045,\"str\":66164.82373706494,\"def\":66164.82373706494,\"dex\":70164.31667888892,\"agi\":66286.85272106493,\"cha\":42635.003369943595,\"money\":0},\"earningsForPlayer\":{\"hack\":65520.985678860045,\"str\":66164.82373706494,\"def\":66164.82373706494,\"dex\":70164.31667888892,\"agi\":66286.85272106493,\"cha\":42635.003369943595,\"money\":1962321672.2433789},\"earningsForTask\":{\"hack\":12788.932653532622,\"str\":5879.482686,\"def\":5879.482686,\"dex\":6761.405088899999,\"agi\":5879.482686,\"cha\":10795.2092804556,\"money\":548298397.9687501},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":3197.2331633831554,\"str\":1469.8706715,\"def\":1469.8706715,\"dex\":1690.3512722249998,\"agi\":1469.8706715,\"cha\":2698.8023201139,\"money\":274149198.98437506},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":2,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":496,\"strength\":55830,\"defense\":45593,\"dexterity\":8550,\"agility\":9999,\"charisma\":923,\"intelligence\":1,\"hp\":4569,\"max_hp\":4569,\"hacking_exp\":133994.30567770524,\"strength_exp\":38463.23489223601,\"defense_exp\":38463.23489223601,\"dexterity_exp\":44232.72012607141,\"agility_exp\":38463.23489223601,\"charisma_exp\":66296.6656897545,\"intelligence_exp\":0,\"hacking_mult\":7.978977876221468,\"strength_mult\":403.7458211949797,\"defense_mult\":329.72149620864525,\"dexterity_mult\":59.923627612024475,\"agility_mult\":72.312896269152,\"charisma_mult\":5.93653027968,\"hacking_exp_mult\":7.104962585295901,\"strength_exp_mult\":3.2663792700000003,\"defense_exp_mult\":3.2663792700000003,\"dexterity_exp_mult\":3.7563361604999996,\"agility_exp_mult\":3.2663792700000003,\"charisma_exp_mult\":5.997338489142,\"hacking_chance_mult\":787.1905395708619,\"hacking_speed_mult\":400.1801328429223,\"hacking_money_mult\":43420870.39111866,\"hacking_grow_mult\":153.93679428100586,\"company_rep_mult\":15.536583404842508,\"faction_rep_mult\":2.3516761125,\"crime_money_mult\":3.0461022109375007,\"crime_success_mult\":1.6300212500000002,\"work_money_mult\":2.34564,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"NutriGen Implant\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"BitWire\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"INFRARET Enhancement\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"Speech Processor Implant\",\"level\":1},{\"name\":\"DermaForce Particle Barrier\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen I\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"Artificial Synaptic Potentiation\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"Augmented Targeting III\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen II\",\"level\":1},{\"name\":\"Neurotrainer III\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"TITN-41 Gene-Modification Injection\",\"level\":1},{\"name\":\"CRTX42-AA Gene Modification\",\"level\":1},{\"name\":\"Neural-Retention Enhancement\",\"level\":1},{\"name\":\"Embedded Netburner Module\",\"level\":1},{\"name\":\"Bionic Arms\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"Neuregen Gene Modification\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen III\",\"level\":1},{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"The Black Hand\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"Synfibril Muscle\",\"level\":1},{\"name\":\"Enhanced Social Interaction Implant\",\"level\":1},{\"name\":\"Enhanced Myelin Sheathing\",\"level\":1},{\"name\":\"Neuronal Densification\",\"level\":1},{\"name\":\"Neural Accelerator\",\"level\":1},{\"name\":\"nextSENS Gene Modification\",\"level\":1},{\"name\":\"PCMatrix\",\"level\":1},{\"name\":\"Neuralstimulator\",\"level\":1},{\"name\":\"Embedded Netburner Module Core Implant\",\"level\":1},{\"name\":\"HyperSight Corneal Implant\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen V\",\"level\":1},{\"name\":\"Graphene BrachiBlades Upgrade\",\"level\":1},{\"name\":\"Artificial Bio-neural Network Implant\",\"level\":1},{\"name\":\"SmartJaw\",\"level\":1},{\"name\":\"PC Direct-Neural Interface\",\"level\":1},{\"name\":\"Photosynthetic Cells\",\"level\":1},{\"name\":\"Synthetic Heart\",\"level\":1},{\"name\":\"Neotra\",\"level\":1},{\"name\":\"NEMEAN Subdermal Weave\",\"level\":1},{\"name\":\"Graphene Bionic Arms Upgrade\",\"level\":1},{\"name\":\"Graphene Bone Lacings\",\"level\":1},{\"name\":\"Xanipher\",\"level\":1},{\"name\":\"Graphene Bionic Legs Upgrade\",\"level\":1},{\"name\":\"PC Direct-Neural Interface Optimization Submodule\",\"level\":1},{\"name\":\"SPTN-97 Gene Modification\",\"level\":1},{\"name\":\"CordiARC Fusion Reactor\",\"level\":1},{\"name\":\"Graphene Bionic Spine Upgrade\",\"level\":1},{\"name\":\"PC Direct-Neural Interface NeuroNet Injector\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"Heist\",\"currentTask\":3,\"currentTaskLocation\":\"274149198.98437506\",\"currentTaskMaxTime\":600000,\"currentTaskTime\":342000,\"earningsForSleeves\":{\"hack\":71072.70081536271,\"str\":68354.56179344213,\"def\":68354.56179344213,\"dex\":72846.19476344298,\"agi\":68578.0356814421,\"cha\":45214.7171311836,\"money\":0},\"earningsForPlayer\":{\"hack\":71072.70081536271,\"str\":68354.56179344213,\"def\":68354.56179344213,\"dex\":72846.19476344298,\"agi\":68578.0356814421,\"cha\":45214.7171311836,\"money\":2136561759.6710134},\"earningsForTask\":{\"hack\":12788.932653532622,\"str\":5879.482686,\"def\":5879.482686,\"dex\":6761.405088899999,\"agi\":5879.482686,\"cha\":10795.2092804556,\"money\":548298397.9687501},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":3197.2331633831554,\"str\":1469.8706715,\"def\":1469.8706715,\"dex\":1690.3512722249998,\"agi\":1469.8706715,\"cha\":2698.8023201139,\"money\":274149198.98437506},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":2,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":267,\"strength\":1227,\"defense\":1264,\"dexterity\":1034,\"agility\":428,\"charisma\":513,\"intelligence\":1,\"hp\":136,\"max_hp\":136,\"hacking_exp\":333392.52451798815,\"strength_exp\":102614.01300854984,\"defense_exp\":102614.01300854984,\"dexterity_exp\":118006.11495983425,\"agility_exp\":102614.01300854984,\"charisma_exp\":177338.69158545532,\"intelligence_exp\":0,\"hacking_mult\":3.6870396045348945,\"strength_mult\":7.245729316209383,\"defense_mult\":7.463828191948125,\"dexterity_mult\":5.950755081671401,\"agility_mult\":2.5304756400000006,\"charisma_mult\":2.7483936480000004,\"hacking_exp_mult\":6.178228335039916,\"strength_exp_mult\":2.1039480000000004,\"defense_exp_mult\":2.1039480000000004,\"dexterity_exp_mult\":2.4195401999999997,\"agility_exp_mult\":2.1039480000000004,\"charisma_exp_mult\":3.4767179647199997,\"hacking_chance_mult\":619.5911370097298,\"hacking_speed_mult\":313.55160538325333,\"hacking_money_mult\":23857621.094021227,\"hacking_grow_mult\":153.93679428100586,\"company_rep_mult\":2.731706972280001,\"faction_rep_mult\":1.8813408899999997,\"crime_money_mult\":3.0461022109375007,\"crime_success_mult\":1.6300212500000002,\"work_money_mult\":2.34564,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"NutriGen Implant\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"BitWire\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"INFRARET Enhancement\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"Speech Processor Implant\",\"level\":1},{\"name\":\"DermaForce Particle Barrier\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen I\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"Artificial Synaptic Potentiation\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"Augmented Targeting III\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen II\",\"level\":1},{\"name\":\"Neurotrainer III\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"TITN-41 Gene-Modification Injection\",\"level\":1},{\"name\":\"CRTX42-AA Gene Modification\",\"level\":1},{\"name\":\"Neural-Retention Enhancement\",\"level\":1},{\"name\":\"Embedded Netburner Module\",\"level\":1},{\"name\":\"Bionic Arms\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"Neuregen Gene Modification\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen III\",\"level\":1},{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"The Black Hand\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"Neuralstimulator\",\"level\":1},{\"name\":\"Enhanced Myelin Sheathing\",\"level\":1},{\"name\":\"PCMatrix\",\"level\":1},{\"name\":\"Embedded Netburner Module Core Implant\",\"level\":1},{\"name\":\"Synfibril Muscle\",\"level\":1},{\"name\":\"Enhanced Social Interaction Implant\",\"level\":1},{\"name\":\"Neuronal Densification\",\"level\":1},{\"name\":\"Neural Accelerator\",\"level\":1},{\"name\":\"HyperSight Corneal Implant\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen V\",\"level\":1},{\"name\":\"Graphene BrachiBlades Upgrade\",\"level\":1},{\"name\":\"Artificial Bio-neural Network Implant\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"Heist\",\"currentTask\":3,\"currentTaskLocation\":\"274149198.98437506\",\"currentTaskMaxTime\":600000,\"currentTaskTime\":373000,\"earningsForSleeves\":{\"hack\":56590.21979373034,\"str\":64727.58619674457,\"def\":64727.58619674457,\"dex\":68629.46296014574,\"agi\":65089.46525274456,\"cha\":26690.093118612,\"money\":0},\"earningsForPlayer\":{\"hack\":56590.21979373034,\"str\":64727.58619674457,\"def\":64727.58619674457,\"dex\":68629.46296014574,\"agi\":65089.46525274456,\"cha\":26690.093118612,\"money\":1584024569.4608436},\"earningsForTask\":{\"hack\":8340.608252303886,\"str\":2840.3298000000004,\"def\":2840.3298000000004,\"dex\":3266.3792699999995,\"agi\":2840.3298000000004,\"cha\":4693.569252372,\"money\":274149198.98437506},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":2780.2027507679622,\"str\":946.7766000000001,\"def\":946.7766000000001,\"dex\":1088.79309,\"agi\":946.7766000000001,\"cha\":1564.523084124,\"money\":274149198.98437506},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":0,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":238,\"strength\":1230,\"defense\":1267,\"dexterity\":1036,\"agility\":429,\"charisma\":513,\"intelligence\":1,\"hp\":136,\"max_hp\":136,\"hacking_exp\":333392.52451798815,\"strength_exp\":103928.98050854974,\"defense_exp\":103928.98050854974,\"dexterity_exp\":119518.32758483522,\"agility_exp\":103928.98050854974,\"charisma_exp\":177338.69158545532,\"intelligence_exp\":0,\"hacking_mult\":3.2919996469061563,\"strength_mult\":7.245729316209383,\"defense_mult\":7.463828191948125,\"dexterity_mult\":5.950755081671401,\"agility_mult\":2.5304756400000006,\"charisma_mult\":2.748393648000001,\"hacking_exp_mult\":6.178228335039915,\"strength_exp_mult\":2.1039480000000004,\"defense_exp_mult\":2.1039480000000004,\"dexterity_exp_mult\":2.4195401999999997,\"agility_exp_mult\":2.1039480000000004,\"charisma_exp_mult\":3.47671796472,\"hacking_chance_mult\":681.550250710703,\"hacking_speed_mult\":339.1060612219888,\"hacking_money_mult\":31118636.209592927,\"hacking_grow_mult\":269.38938999176025,\"company_rep_mult\":2.731706972280001,\"faction_rep_mult\":1.8813408899999997,\"crime_money_mult\":3.0461022109375007,\"crime_success_mult\":1.6300212500000002,\"work_money_mult\":2.34564,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"NutriGen Implant\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"BitWire\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"INFRARET Enhancement\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"Speech Processor Implant\",\"level\":1},{\"name\":\"DermaForce Particle Barrier\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen I\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"Artificial Synaptic Potentiation\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"Augmented Targeting III\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen II\",\"level\":1},{\"name\":\"Neurotrainer III\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"TITN-41 Gene-Modification Injection\",\"level\":1},{\"name\":\"CRTX42-AA Gene Modification\",\"level\":1},{\"name\":\"Neural-Retention Enhancement\",\"level\":1},{\"name\":\"Embedded Netburner Module\",\"level\":1},{\"name\":\"Bionic Arms\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"Neuregen Gene Modification\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen III\",\"level\":1},{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"The Black Hand\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"Synfibril Muscle\",\"level\":1},{\"name\":\"Enhanced Social Interaction Implant\",\"level\":1},{\"name\":\"Enhanced Myelin Sheathing\",\"level\":1},{\"name\":\"Neuronal Densification\",\"level\":1},{\"name\":\"Neuralstimulator\",\"level\":1},{\"name\":\"PCMatrix\",\"level\":1},{\"name\":\"Embedded Netburner Module Core Implant\",\"level\":1},{\"name\":\"HyperSight Corneal Implant\",\"level\":1},{\"name\":\"Neural Accelerator\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen V\",\"level\":1},{\"name\":\"Graphene BrachiBlades Upgrade\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"Heist\",\"currentTask\":3,\"currentTaskLocation\":\"274149198.98437506\",\"currentTaskMaxTime\":600000,\"currentTaskTime\":373000,\"earningsForSleeves\":{\"hack\":59839.70575761143,\"str\":65391.460005445355,\"def\":65391.460005445355,\"dex\":69313.08625244573,\"agi\":65719.35407744536,\"cha\":31839.794089488005,\"money\":0},\"earningsForPlayer\":{\"hack\":59839.70575761143,\"str\":65391.460005445355,\"def\":65391.460005445355,\"dex\":69313.08625244573,\"agi\":65719.35407744536,\"cha\":31839.794089488005,\"money\":1701845908.6962984},\"earningsForTask\":{\"hack\":8340.608252303886,\"str\":2840.3298000000004,\"def\":2840.3298000000004,\"dex\":3266.3792699999995,\"agi\":2840.3298000000004,\"cha\":4693.569252372,\"money\":274149198.98437506},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":2780.202750767962,\"str\":946.7766000000001,\"def\":946.7766000000001,\"dex\":1088.79309,\"agi\":946.7766000000001,\"cha\":1564.523084124,\"money\":274149198.98437506},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":0,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":166,\"strength\":676,\"defense\":696,\"dexterity\":1037,\"agility\":429,\"charisma\":320,\"intelligence\":1,\"hp\":79,\"max_hp\":79,\"hacking_exp\":333392.52451798815,\"strength_exp\":103928.98050854974,\"defense_exp\":103928.98050854974,\"dexterity_exp\":119929.64941883628,\"agility_exp\":104286.65166854966,\"charisma_exp\":177338.69158545532,\"intelligence_exp\":0,\"hacking_mult\":2.30209765517913,\"strength_mult\":3.9811699539611998,\"defense_mult\":4.101004501070399,\"dexterity_mult\":5.950755081671401,\"agility_mult\":2.5304756400000006,\"charisma_mult\":1.7177460300000003,\"hacking_exp_mult\":5.372372465252101,\"strength_exp_mult\":2.1039480000000004,\"defense_exp_mult\":2.1039480000000004,\"dexterity_exp_mult\":2.4195401999999997,\"agility_exp_mult\":2.1039480000000004,\"charisma_exp_mult\":2.1729487279499997,\"hacking_chance_mult\":180.3698710933692,\"hacking_speed_mult\":102.64894981987115,\"hacking_money_mult\":739425.6123885337,\"hacking_grow_mult\":50.26507568359375,\"company_rep_mult\":2.731706972280001,\"faction_rep_mult\":1.8813408899999997,\"crime_money_mult\":2.3431555468750003,\"crime_success_mult\":1.4818375000000001,\"work_money_mult\":2.34564,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"NutriGen Implant\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"BitWire\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"INFRARET Enhancement\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"Speech Processor Implant\",\"level\":1},{\"name\":\"DermaForce Particle Barrier\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen I\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"Artificial Synaptic Potentiation\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"Augmented Targeting III\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen II\",\"level\":1},{\"name\":\"Neurotrainer III\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"TITN-41 Gene-Modification Injection\",\"level\":1},{\"name\":\"CRTX42-AA Gene Modification\",\"level\":1},{\"name\":\"Neural-Retention Enhancement\",\"level\":1},{\"name\":\"Embedded Netburner Module\",\"level\":1},{\"name\":\"Bionic Arms\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"Neuregen Gene Modification\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen III\",\"level\":1},{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"Neuralstimulator\",\"level\":1},{\"name\":\"The Black Hand\",\"level\":1},{\"name\":\"Enhanced Myelin Sheathing\",\"level\":1},{\"name\":\"PCMatrix\",\"level\":1},{\"name\":\"Neuronal Densification\",\"level\":1},{\"name\":\"Embedded Netburner Module Core Implant\",\"level\":1},{\"name\":\"HyperSight Corneal Implant\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"Heist\",\"currentTask\":3,\"currentTaskLocation\":\"210883999.21875006\",\"currentTaskMaxTime\":600000,\"currentTaskTime\":373000,\"earningsForSleeves\":{\"hack\":43011.88197625218,\"str\":63711.735083393425,\"def\":63711.735083393425,\"dex\":67773.06484379538,\"agi\":64390.487531393395,\"cha\":15713.4143481975,\"money\":0},\"earningsForPlayer\":{\"hack\":43011.88197625218,\"str\":63711.735083393425,\"def\":63711.735083393425,\"dex\":67773.06484379538,\"agi\":64390.487531393395,\"cha\":15713.4143481975,\"money\":1106595221.1642647},\"earningsForTask\":{\"hack\":7252.702828090337,\"str\":2840.3298000000004,\"def\":2840.3298000000004,\"dex\":3266.3792699999995,\"agi\":2840.3298000000004,\"cha\":2933.4807827324994,\"money\":210883999.21875006},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":2417.5676093634456,\"str\":946.7766000000001,\"def\":946.7766000000001,\"dex\":1088.79309,\"agi\":946.7766000000001,\"cha\":977.8269275774999,\"money\":210883999.21875006},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":0,\"sync\":100}}],\"sleevesFromCovenant\":5,\"bitNodeN\":6,\"entropy\":0,\"lastUpdate\":1652114417167,\"lastSave\":1652114415383,\"totalPlaytime\":10784871600,\"playtimeSinceLastAug\":6379600,\"playtimeSinceLastBitnode\":139629000,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":10070000000,\"class\":0,\"codingcontract\":450000000,\"corporation\":-150000000000,\"crime\":0,\"gang\":572933392650.1356,\"hacking\":1251363080,\"hacknet\":0,\"hacknet_expenses\":-28811.583474019026,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":-330130272495.0005,\"stock\":0,\"total\":1729014000.4252596,\"work\":0,\"servers\":0,\"other\":-287300000,\"augmentations\":-102558140423.126}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":648359823.945038,\"casino\":717327740168,\"class\":0,\"codingcontract\":10537500000,\"corporation\":-150000000000,\"crime\":364252339.722777,\"gang\":343805529556.57947,\"hacking\":19189540816.509205,\"hacknet\":0,\"hacknet_expenses\":-2485048.439219906,\"hospitalization\":-74100000,\"infiltration\":0,\"sleeves\":-602681383985.7406,\"stock\":0,\"total\":97832361926.29306,\"work\":0,\"servers\":-4643203741.804813,\"other\":-17431200000,\"augmentations\":-219208188002.48392}},\"scriptProdSinceLastAug\":1251363080,\"exploits\":[\"UndocumentedFunctionCall\",\"Bypass\",\"Unclickable\",\"RealityAlteration\",\"TimeCompression\",\"N00dles\",\"PrototypeTampering\",\"EditSaveFile\",\"YoureNotMeantToAccessThis\",\"INeedARainbow\"],\"achievements\":[{\"ID\":\"CYBERSEC\",\"unlockedOn\":1641831349068},{\"ID\":\"NITESEC\",\"unlockedOn\":1641831349080},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1641831349084},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1641831349088},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1641831349091},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1641831349095},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1641831349099},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1641831349103},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1641831349108},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1641831349113},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1641831349117},{\"ID\":\"NS2\",\"unlockedOn\":1641831349120},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1641831349122},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1641831349125},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1641831349128},{\"ID\":\"TOR\",\"unlockedOn\":1641831349131},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1641911770908},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1641911770911},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1641911890917},{\"ID\":\"DONATION\",\"unlockedOn\":1641919651447},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1641924992259},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1642040620386},{\"ID\":\"TRAVEL\",\"unlockedOn\":1642040800461},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1642088780181},{\"ID\":\"4S\",\"unlockedOn\":1642220579557},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1642295956244},{\"ID\":\"SF1.1\",\"unlockedOn\":1642393317233},{\"ID\":\"UNDOCUMENTEDFUNCTIONCALL\",\"unlockedOn\":1643121077987},{\"ID\":\"BYPASS\",\"unlockedOn\":1643121317987},{\"ID\":\"UNCLICKABLE\",\"unlockedOn\":1643122337977},{\"ID\":\"REALITYALTERATION\",\"unlockedOn\":1643122481910},{\"ID\":\"TIMECOMPRESSION\",\"unlockedOn\":1643122661782},{\"ID\":\"N00DLES\",\"unlockedOn\":1643122721781},{\"ID\":\"PROTOTYPETAMPERING\",\"unlockedOn\":1643123081783},{\"ID\":\"EDITSAVEFILE\",\"unlockedOn\":1643123929773},{\"ID\":\"DEVMENU\",\"unlockedOn\":1643123929787},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1643640264308},{\"ID\":\"SF5.1\",\"unlockedOn\":1643839768581},{\"ID\":\"GANG\",\"unlockedOn\":1644242713578},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1644317906781},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1644319506423},{\"ID\":\"SF2.1\",\"unlockedOn\":1644381062608},{\"ID\":\"FAST_BN\",\"unlockedOn\":1644550423832},{\"ID\":\"WORKOUT\",\"unlockedOn\":1644551683850},{\"ID\":\"GANG_TERRITORY\",\"unlockedOn\":1644764420851},{\"ID\":\"CORPORATION\",\"unlockedOn\":1645195464613},{\"ID\":\"CORPORATION_BRIBE\",\"unlockedOn\":1645593375384},{\"ID\":\"SF3.1\",\"unlockedOn\":1645739905350},{\"ID\":\"FROZE\",\"unlockedOn\":1646454615199},{\"ID\":\"SF4.1\",\"unlockedOn\":1649078749377},{\"ID\":\"RAINBOW\",\"unlockedOn\":1649863203492},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1649963517455},{\"ID\":\"CORPORATION_REAL_ESTATE\",\"unlockedOn\":1650074051205},{\"ID\":\"CORPORATION_PROD_1000\",\"unlockedOn\":1650120923422},{\"ID\":\"MONEY_1Q\",\"unlockedOn\":1650133518302},{\"ID\":\"MAX_RAM\",\"unlockedOn\":1650203744383},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1650215744382},{\"ID\":\"SF10.1\",\"unlockedOn\":1650238596854},{\"ID\":\"QUEUE_40\",\"unlockedOn\":1650363811385},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1650567008902},{\"ID\":\"SLEEVE_8\",\"unlockedOn\":1650587229287},{\"ID\":\"FIRST_HACKNET_SERVER\",\"unlockedOn\":1650587469464},{\"ID\":\"MAX_CACHE\",\"unlockedOn\":1650624669287},{\"ID\":\"ALL_HACKNET_SERVER\",\"unlockedOn\":1650880670062},{\"ID\":\"HACKNET_SERVER_1B\",\"unlockedOn\":1650907131627},{\"ID\":\"SF9.1\",\"unlockedOn\":1650936509084},{\"ID\":\"BLADEBURNER_DIVISION\",\"unlockedOn\":1650976064697},{\"ID\":\"BLADEBURNER_OVERCLOCK\",\"unlockedOn\":1651104026364},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1651136761161},{\"ID\":\"SF6.1\",\"unlockedOn\":1651153482894},{\"ID\":\"SF7.1\",\"unlockedOn\":1651367291296},{\"ID\":\"SF11.1\",\"unlockedOn\":1651671520642},{\"ID\":\"INSTALL_100\",\"unlockedOn\":1651797499985}],\"terminalCommandHistory\":[\"run init.js\",\"run bootstrap32GB.js\",\"nano megacorp.js\",\"run megacorp.js\",\"run bootstrap32GB.js\",\"nano bootstrap32GB.js\",\"nano casinoBreaker.js\",\"run bootstrap32GB.js\",\"nano mcp_hgw\",\"nano mcp_hgw.js\",\"nano bootstrap32GB.js\",\"nano utils.js\",\"run init.js\",\"nano init.js\",\"nano utils.js\",\"nano casinoBreaker.js\",\"nano megacorp.js\",\"run megacorp.js\",\"nano gangum.js\",\"nano init.js\",\"run workForFaction.js\",\"nano workForFaction.js\",\"run init.js\",\"nano slee\",\"nano sleeves.js\",\"run workForFaction.js --crime-focus\",\"run init.js\",\"run farm_int.js --money-threshold 10000000\",\"run init.js\",\"run farm_int.js\",\"run find_server.js w0r1d_d43m0n\",\"connect hong-fang-tea; connect CSEC; connect phantasy; connect johnson-ortho; connect summit-uni; connect millenium-fitness; connect global-pharm; connect unitalife; connect icarus; connect zb-def; connect titan-labs; connect vitalife; connect omnitek; connect powerhouse-fitness; connect The-Cave; connect w0r1d_d43m0n\",\"analyze\",\"home\",\"run max_hack.js\",\"run bootstrap32GB.js\",\"nano casinoBreaker.js\",\"nano bladeburner.js\",\"run bootstrap32GB.js\",\"nano sleeves.js\",\"run init.js\",\"run bootstrap32GB.js\",\"run init.js\",\"nano sleeves.js\",\"run init.js\",\"run casinoBreaker.js\",\"nano workForFaction.js\",\"nano augments.js\",\"nano test.js\",\"run test.js\"],\"identifier\":\"1137a2b24916d3\",\"factionWorkType\":\"Faction Field Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"70.4.9.8\",\"isConnectedTo\":true,\"maxRam\":2048,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"BruteSSH.exe\",\"Formulas.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"fl1ght.exe\"],\"ramUsed\":1916.8500000000001,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"spend-hacknet-hash.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6369.809999996599,\"pid\":4,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/3b1b1239-355b-4b1f-8a10-e0a1f9aa0446\",\"moduleSequenceNumber\":7335},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/f57ec870-c8c2-4bda-8543-cef4118e003c\",\"moduleSequenceNumber\":7318},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/d2c199e4-a108-4cc3-9172-bd4e2934e37f\",\"moduleSequenceNumber\":7319},{\"filename\":\"spend-hacknet-hash.js\",\"url\":\"blob:https://danielyxie.github.io/f13a0709-7912-4e27-9e8d-23f059cf00d4\",\"moduleSequenceNumber\":7441}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"player.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6369.809999996599,\"pid\":5,\"ramUsage\":3.65,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"player.js\",\"url\":\"blob:https://danielyxie.github.io/19ddf31c-a69b-4371-a7fd-e45462287d06\",\"moduleSequenceNumber\":7442}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"bladeburner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6369.809999996599,\"pid\":7,\"ramUsage\":68.1,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"augments.js\",\"url\":\"blob:https://danielyxie.github.io/ac8b7112-34ce-480e-a7a3-7dd234d4eebd\",\"moduleSequenceNumber\":7347},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/6dbca052-82c0-4408-bb01-afbf81a5ac5d\",\"moduleSequenceNumber\":7335},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/bda832ee-13ab-4aff-8d9f-2e3d96629fc4\",\"moduleSequenceNumber\":7318},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/b7a1d505-f5f8-42e6-9766-50a233be6466\",\"moduleSequenceNumber\":7319},{\"filename\":\"bladeburner.js\",\"url\":\"blob:https://danielyxie.github.io/ea5f76d6-fe21-437c-ad83-912c1e8f61a8\",\"moduleSequenceNumber\":7444}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--crime-focus\"],\"dataMap\":{},\"filename\":\"workForFaction.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6369.809999996599,\"pid\":9,\"ramUsage\":42.8,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"augments.js\",\"url\":\"blob:https://danielyxie.github.io/c1555602-549e-4baa-8804-c1caceae1905\",\"moduleSequenceNumber\":7347},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/3fc4062f-4aed-49cc-abd6-7cc6df5dd8a2\",\"moduleSequenceNumber\":7335},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/ae19f552-c04d-4137-b11b-de552f72b71a\",\"moduleSequenceNumber\":7318},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/cacff41e-94e7-40ac-99f5-267614d4e095\",\"moduleSequenceNumber\":7319},{\"filename\":\"workForFaction.js\",\"url\":\"blob:https://danielyxie.github.io/604fc773-cf69-494a-beab-c99d49800598\",\"moduleSequenceNumber\":7446}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"gangum.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6369.809999996599,\"pid\":10,\"ramUsage\":42.3,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/87c6909e-f5f2-49be-9dad-689c461bef90\",\"moduleSequenceNumber\":7335},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/0797bede-9e73-4861-8ae2-fd10538df6d6\",\"moduleSequenceNumber\":7318},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/b948bfa5-a058-4eab-bd37-473f8f6a6108\",\"moduleSequenceNumber\":7319},{\"filename\":\"gangum.js\",\"url\":\"blob:https://danielyxie.github.io/89988661-ce6a-4c54-b4d2-fe304b990148\",\"moduleSequenceNumber\":7447}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"mcp_hgw.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2178135.5355763133,\"onlineMoneyMade\":1251363080,\"onlineRunningTime\":6369.809999996599,\"pid\":13,\"ramUsage\":12.5,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"growthFunctions.js\",\"url\":\"blob:https://danielyxie.github.io/27a6eaed-c7e7-4d08-94cd-9afe4d117252\",\"moduleSequenceNumber\":7343},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/249f52d5-01d7-494e-8d1c-8cf748b2e222\",\"moduleSequenceNumber\":7335},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/9ca99515-f44e-4477-8c36-382cd50edf14\",\"moduleSequenceNumber\":7318},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/ee8a3481-9e59-4892-bccf-dadf268da045\",\"moduleSequenceNumber\":7319},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/0e75a6c5-36e3-4196-ada6-7460ca8a9b6a\",\"moduleSequenceNumber\":7318},{\"filename\":\"mcp_hgw.js\",\"url\":\"blob:https://danielyxie.github.io/770846aa-8cc0-4947-b14c-73ceb3f6bab6\",\"moduleSequenceNumber\":7450}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"custom-stats.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6369.809999996599,\"pid\":14,\"ramUsage\":3.25,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/ce09188c-b319-40eb-b479-6294a34f72c3\",\"moduleSequenceNumber\":7335},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/c6f660f7-7c31-41c1-8fa1-a8fea5e8cfa5\",\"moduleSequenceNumber\":7318},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/7f88a60b-d55e-45bf-a942-32b7ff0d737a\",\"moduleSequenceNumber\":7319},{\"filename\":\"custom-stats.js\",\"url\":\"blob:https://danielyxie.github.io/22b82bc3-b09d-4f24-8710-a3f9f209205f\",\"moduleSequenceNumber\":7451}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"sleeves.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6355.609999996611,\"pid\":3999,\"ramUsage\":47.7,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"augments.js\",\"url\":\"blob:https://danielyxie.github.io/f4308fca-8b53-4135-92c6-e0ea40bb6793\",\"moduleSequenceNumber\":7347},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/710d3113-0417-459d-b1a6-f08a106a7389\",\"moduleSequenceNumber\":7335},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/db673354-f1e5-46dc-8577-8eec8e62854a\",\"moduleSequenceNumber\":7335},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/2974ba5d-75fa-4321-8821-c1abbb77744d\",\"moduleSequenceNumber\":7318},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/81b6703f-c3e1-4936-9df1-c1e943690425\",\"moduleSequenceNumber\":7319},{\"filename\":\"sleeves.js\",\"url\":\"blob:https://danielyxie.github.io/7c4d2a49-c662-45ad-9410-3d54a133670f\",\"moduleSequenceNumber\":20381}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"megacorp.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.009999999999977,\"pid\":5833,\"ramUsage\":1025.5,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/2cf5f378-5b3f-4306-8871-bf4b3448dd95\",\"moduleSequenceNumber\":28949},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/b712075f-4e99-41f4-9416-0bc38dafb9e4\",\"moduleSequenceNumber\":28932},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/4e86b986-ca76-43bc-a4f5-1e962788b7c2\",\"moduleSequenceNumber\":28933},{\"filename\":\"megacorp.js\",\"url\":\"blob:https://danielyxie.github.io/a91f6a35-89da-48f3-9143-68078273fecf\",\"moduleSequenceNumber\":29018}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",0.6755419623194905],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.410000000000001,\"pid\":5840,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/8a4464d4-b6f2-4686-b680-96952aeb462f\",\"moduleSequenceNumber\":29031}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",0.08145896809281905],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.410000000000001,\"pid\":5841,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":379,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/6b636174-5075-4862-b357-6a68a0961c1d\",\"moduleSequenceNumber\":29032}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { boxTailSingleton, copyHackingFiles, tryGetBitNodeMultipliers } from \\\"utils.js\\\"\\nimport { getOwnedAugmentationsStatic } from 'augments.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getServerMoneyAvailable');\\n    ns.disableLog('fileExists');\\n    ns.disableLog('hacknet.upgradeLevel');\\n    ns.disableLog('hacknet.upgradeRam');\\n    ns.disableLog('hacknet.upgradeCore');\\n    ns.disableLog('hacknetNodes.coreUpgradeCost');\\n    ns.disableLog('hacknetNodes.ramUpgradeCost');\\n    ns.disableLog('hacknetNodes.levelUpgradeCost');\\n    ns.disableLog('getServer');\\n    ns.disableLog('getPurchasedServers');\\n    ns.disableLog('getPurchasedServerLimit');\\n    ns.disableLog('getPurchasedServerCost');\\n    //ns.tail();\\n    const multis = tryGetBitNodeMultipliers(ns);\\n    boxTailSingleton(ns, 'purchase pc', '🖳', '100px');\\n    ns.clearLog();\\n    let player = ns.getPlayer();\\n    const bitNodeN = player.bitNodeN;\\n    function purchasePortHacks(player) {\\n        if (!player.tor) return;\\n        // BruteSSH.exe - $500k - Opens up SSH Ports.\\n        // FTPCrack.exe - $1.500m - Opens up FTP Ports.\\n        // relaySMTP.exe - $5.000m - Opens up SMTP Ports.\\n        // HTTPWorm.exe - $30.000m - Opens up HTTP Ports.\\n        // SQLInject.exe - $250.000m - Opens up SQL Ports.\\n        if (!ns.fileExists(\\\"BruteSSH.exe\\\") && player.money > 500000) {\\n            if (ns.purchaseProgram(\\\"BruteSSH.exe\\\"))\\n                ns.print('purchased BruteSSH');\\n        }\\n        if (!ns.fileExists(\\\"FTPCrack.exe\\\") && player.money > 1500000) {\\n            if (ns.purchaseProgram(\\\"FTPCrack.exe\\\"))\\n                ns.print('purchased FTPCrack');\\n        }\\n        if (!ns.fileExists(\\\"relaySMTP.exe\\\") && player.money > 5000000) {\\n            if (ns.purchaseProgram(\\\"relaySMTP.exe\\\"))\\n                ns.print('purchased relaySMTP');\\n        }\\n        if (!ns.fileExists(\\\"HTTPWorm.exe\\\") && player.money > 30000000) {\\n            if (ns.purchaseProgram(\\\"HTTPWorm.exe\\\"))\\n                ns.print('purchased HTTPWorm');\\n        }\\n        if (!ns.fileExists(\\\"SQLInject.exe\\\") && player.money > 250000000) {\\n            if (ns.purchaseProgram(\\\"SQLInject.exe\\\"))\\n                ns.print('purchased SQLInject');\\n        }\\n    }\\n    function purchaseTor(player) {\\n        if (player.money > 200000 && !player.tor) {\\n            if (ns.purchaseTor()) {\\n                ns.print('purchased TOR');\\n                player.tor = true;\\n            }\\n        }\\n        purchasePortHacks(player);\\n    }\\n    purchaseTor(player);\\n    if ([2, 6, 7, 8, 11].includes(bitNodeN) && player.hacking < 200 || (ns.heart.break() > -54000)) {\\n        ns.print(`Not buying servers in bitnode ${bitNodeN}`);\\n    } else {\\n        // PurchasedServerMaxRam\\n        const ram = Math.min(ns.getServer('home').maxRam / 4, 1048576 * multis.PurchasedServerMaxRam);\\n        let i = ns.getPurchasedServers().length;\\n        while (i < ns.getPurchasedServerLimit()) {\\n            player = ns.getPlayer();\\n            purchaseTor(player);\\n            // Check if we have enough money to purchase a server\\n            const cost = ns.getPurchasedServerCost(ram);\\n            // ns.print(ns.nFormat(cost, '0.0a'));\\n            if (player.money > cost) {\\n                const name = \\\"pserv-\\\" + i;\\n                ns.purchaseServer(name, ram);\\n                await copyHackingFiles(ns, { hostname: name, hasAdminRights: true });\\n                ns.print(`purchased server ${name} ${ns.nFormat(cost, '$0.0a')} with ${ns.nFormat(ram, '0a')} ram`)\\n                ++i;\\n            }\\n            await ns.sleep(3000);\\n        }\\n    }\\n}\",\"filename\":\"purchase-servers.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"augments.js\",\"url\":\"blob:https://danielyxie.github.io/c055ed33-002e-4a0f-8318-01065c60d8cb\",\"moduleSequenceNumber\":28961},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/9276a7dd-931c-42be-a02e-384b0646d6f8\",\"moduleSequenceNumber\":28949},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/9a579648-f937-4046-94c3-3c8a26560ae3\",\"moduleSequenceNumber\":28932},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/c5a67beb-784d-4917-90ad-6dcc58bdf07a\",\"moduleSequenceNumber\":28933},{\"filename\":\"purchase-servers.js\",\"url\":\"blob:https://danielyxie.github.io/f3954add-f762-4448-b00c-f0b3828eb2c9\",\"moduleSequenceNumber\":29021}],\"dependents\":[],\"ramUsage\":14.1,\"server\":\"home\",\"moduleSequenceNumber\":29021,\"_hash\":\"b1af83699f444efce3e11ba6c7a23f6e52f1ba000b1153b271ee1e4fbe1dca12\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst args = ns.flags([[\\\"help\\\", false]]);\\n\\tconst server = ns.args[0];\\n\\tif (args.help || !server) {\\n\\t\\tns.tprint(\\\"This script does a more detailed analysis of a server.\\\");\\n\\t\\tns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\n\\t\\tns.tprint(\\\"Example:\\\");\\n\\t\\tns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n\\t\\treturn;\\n\\t}\\n\\tconst s = ns.getServer(server);\\n\\tconst player = ns.getPlayer();\\n\\tconst maxRam = ns.getServerMaxRam(server);\\n\\tconst usedRam = ns.getServerUsedRam(server);\\n\\tconst money = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst minSec = ns.getServerMinSecurityLevel(server);\\n\\tconst sec = ns.getServerSecurityLevel(server);\\n\\tns.tprint(`\\n${server}:\\n    RAM        : ${usedRam} / ${maxRam} (${usedRam / maxRam * 100}%)\\n    $          : ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${(money / maxMoney * 100).toFixed(2)}%)\\n    security   : ${minSec.toFixed(2)} / ${sec.toFixed(2)}\\n    growth     : ${ns.getServerGrowth(server)}\\n    hack time  : ${ns.tFormat(ns.getHackTime(server))}\\n    hack time  : ${ns.tFormat(ns.formulas.hacking.hackTime(s, player))}\\n    grow time  : ${ns.tFormat(ns.getGrowTime(server))}\\n    grow time  : ${ns.tFormat(ns.formulas.hacking.growTime(s, player))}\\n    weaken time: ${ns.tFormat(ns.getWeakenTime(server))}\\n    weaken time: ${ns.tFormat(ns.formulas.hacking.weakenTime(s, player))}\\n    grow x2    : ${(ns.growthAnalyze(server, 2)).toFixed(2)} threads\\n    grow x3    : ${(ns.growthAnalyze(server, 3)).toFixed(2)} threads\\n    grow x4    : ${(ns.growthAnalyze(server, 4)).toFixed(2)} threads\\n    hack 10%   : ${(.10 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 25%   : ${(.25 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 50%   : ${(.50 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hackChance : ${(ns.hackAnalyzeChance(server) * 100).toFixed(2)}%\\n`);\\n}\\n\\nexport function autocomplete(data, args) {\\n\\treturn data.servers;\\n}\",\"filename\":\"analyze_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"analyze_server.js\",\"url\":\"blob:https://danielyxie.github.io/ff0c4155-92eb-4804-a5b3-8169b86c3190\",\"moduleSequenceNumber\":56295}],\"dependents\":[],\"ramUsage\":7.85,\"server\":\"home\",\"moduleSequenceNumber\":28930,\"_hash\":\"91dcb01282737a1ba790ffe2b0a91ff70f2888e7c730f4a1a722ea4efa4c8075\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const flags = ns.flags([\\n        ['refreshrate', 200],\\n        ['help', false],\\n    ])\\n    if (flags.help) {\\n        ns.tprint(\\\"This script helps visualize the money and security of a server.\\\");\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\n        return;\\n    }\\n    ns.tail();\\n    ns.disableLog('ALL');\\n    const servers = flags._[0] ? [flags._[0]] : [];\\n    // ns.tprint(JSON.stringify(servers));\\n    while (true) {\\n        ns.clearLog();\\n        for (var i = 0; i < servers.length; i++) {\\n            const server = servers[i];\\n            const s = ns.getServer(server);\\n            const player = ns.getPlayer();\\n            let maxMoney = ns.getServerMaxMoney(server);\\n            const minSec = ns.getServerMinSecurityLevel(server);\\n            let money = ns.getServerMoneyAvailable(server);\\n            const percentOfMaxMoney = money / (maxMoney || 1);\\n            const sec = ns.getServerSecurityLevel(server);\\n            const currentSecurity = s.hackDifficulty - s.minDifficulty;\\n            const owk = ns.weakenAnalyze(1, 1);\\n            const hackT = ns.formulas.hacking.hackTime(s, player);\\n            const growT = ns.formulas.hacking.growTime(s, player);\\n            const weakT = ns.formulas.hacking.weakenTime(s, player);\\n            const hackChance = ns.formulas.hacking.hackChance(s, player);\\n            s.hackDifficulty = s.minDifficulty;\\n            const growPercent = ns.formulas.hacking.growPercent(s, 1, player, 1);\\n            const hackPercent = ns.formulas.hacking.hackPercent(s, player);\\n            const hackThreads = Math.floor(.5 / hackPercent);\\n            ns.print(`\\n${server}:\\n    $          : ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${(percentOfMaxMoney * 100).toFixed(2)}%)\\n    security   : ${minSec.toFixed(2)} / ${sec.toFixed(2)} +${(currentSecurity).toFixed(2)}\\n    growth     : ${ns.getServerGrowth(server)} (${(growPercent * 100).toFixed(2)}%)\\n    hack time  : ${ns.tFormat(hackT)} (t=${hackThreads}) (${(hackPercent * 100).toFixed(2)}%)\\n    grow time  : ${ns.tFormat(growT)} (t=${maxMoney === 0 ? 'NaN' : Math.ceil(ns.growthAnalyze(server, growthFactor))})(${(growthFactor * 100).toFixed(0)}%) \\n    weaken time: ${ns.tFormat(weakT)} (t=${Math.max(Math.ceil(currentSecurity / owk), 1)})\\n    hackChance : ${(hackChance * 100).toFixed(2)}%\\n`);\\n        }\\n        await ns.sleep(flags.refreshrate);\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return data.servers;\\n}\",\"filename\":\"monitor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"config.js\",\"url\":\"blob:https://danielyxie.github.io/bd3a0ada-a58d-4e27-8a18-869f7225b1cb\",\"moduleSequenceNumber\":189939},{\"filename\":\"monitor.js\",\"url\":\"blob:https://danielyxie.github.io/55872c20-974b-4910-837d-4bacd970cbf9\",\"moduleSequenceNumber\":190125}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":28931,\"_hash\":\"8397cd7b16d2fd5914391c970d442000b728a85d540b028212423f7d73ad8475\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function scan(ns, parent, server, list) {\\n    const children = ns.scan(server);\\n    for (let child of children) {\\n        if (parent == child) {\\n            continue;\\n        }\\n        if (child.indexOf('hacknet-node') < 0)\\n            list.push(child);\\n        scan(ns, server, child, list);\\n    }\\n}\\nexport function list_servers(ns) {\\n    const list = [];\\n    scan(ns, '', 'home', list);\\n    return list;\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.tprint(list_servers(ns));\\n}\\n\\nexport function autocomplete(data, args) {\\n    return data.servers;\\n}\",\"filename\":\"opened_servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/c1552d57-574a-4f5b-8b0a-ab6ca813e240\",\"moduleSequenceNumber\":22477}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":28932,\"_hash\":\"06ce4d2601ca3986016c5ec63d4754fff87fc878ed41b258d88ee6ba15694c79\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { list_servers } from 'opened_servers.js';\\nimport { createSidebarItem, sidebar } from \\\"/box/box.js\\\"\\n\\nexport const sleevesPortNumber = 15;\\n\\nexport const findBox = (title) => {\\n\\tlet res = [];\\n\\tsidebar.querySelectorAll('div.sbitem').forEach(sbitem => res.push({ sbitem, title: sbitem.querySelector('div.head > span').innerText }));\\n\\tlet box = res.find(o => o.title === title);\\n\\treturn box ? box.sbitem : box;\\n}\\n\\nexport const boxTailSingleton = (ns, title, icon, height, pinned = \\\"<div/>\\\") => {\\n\\tlet box = findBox(title);\\n\\tif (!box) {\\n\\t\\tbox = createSidebarItem(title, pinned, icon);\\n\\t}\\n\\tlet ci = box.contextItems['kill'];\\n\\tif (!ci) {\\n\\t\\tbox.addContextItem('kill', () => ns.kill());\\n\\t}\\n\\t// update the function with this current ns instance;\\n\\tbox.contextItems['kill'].fn = () => ns.kill();\\n\\n\\tif (height) box.style.height = height;\\n\\n\\t// ns.atExit(function () {\\n\\t// \\tbox.remove();\\n\\t// });\\n\\n\\tconst _clearLog = ns.clearLog;\\n\\tns.clearLog = () => {\\n\\t\\t_clearLog();\\n\\t\\tbox.logDiv = box.body.querySelector('div.log');\\n\\t\\tif (box.logDiv) box.logDiv.replaceChildren([]);\\n\\t}\\n\\tconst logEntryLimit = 500;\\n\\tconst _print = ns.print;\\n\\tns.print = (m) => {\\n\\t\\tbox.log(`<span>${m}</span>`);\\n\\t\\t_print(m);\\n\\t\\tbox.logDiv = box.body.querySelector('div.log');\\n\\t\\twhile (box.logDiv.children.length > logEntryLimit) box.logDiv.children[0].remove();\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nexport async function runHackScript(ns, script, host, threads, target) {\\n\\tif (!ns.fileExists(script, host)) {\\n\\t\\tawait ns.scp(script, host);\\n\\t}\\n\\treturn Promise.resolve(ns.exec(script, host, threads, target, Math.random()));\\n}\\n\\n/** @param {NS} ns **/\\nexport function getHosts(ns, scriptRam) {\\n\\tconst openedServers = list_servers(ns).filter(s => ns.hasRootAccess(s) && ns.getServerMaxRam(s) > 1);\\n\\tconst s = ns.getServer('home');\\n\\t// reserve some ram for other scripts\\n\\tif (s.maxRam >= 64) {\\n\\t\\ts.maxRam = s.maxRam - 32;\\n\\t} else if (host === 'home' && s.maxRam === 32) {\\n\\t\\ts.maxRam = s.maxRam - 16;\\n\\t}\\n\\tconst hostServers = [{\\n\\t\\tserver: s,\\n\\t\\tcpuCores: s.cpuCores,\\n\\t\\tthreadsAvailable: Math.max(Math.floor((s.maxRam - s.ramUsed) / scriptRam), 0)\\n\\t}];\\n\\tfor (const host of openedServers) {\\n\\t\\tconst s = ns.getServer(host);\\n\\t\\tconst threadsAvailable = Math.max(Math.floor((s.maxRam - s.ramUsed) / scriptRam), 0);\\n\\t\\thostServers.push({\\n\\t\\t\\tserver: s,\\n\\t\\t\\tcpuCores: s.cpuCores,\\n\\t\\t\\tthreadsAvailable\\n\\t\\t});\\n\\t}\\n\\treturn hostServers;\\n}\\n/** @param {NS} ns **/\\nexport function ramUsage(ns) {\\n\\tconst serversWithRam = ['home'].concat(list_servers(ns).filter(s => ns.hasRootAccess(s) && ns.getServerMaxRam(s) > 1));\\n\\treturn serversWithRam.map(o => ns.getServerUsedRam(o) / ns.getServerMaxRam(o)).reduce((a, b) => a + b, 0) / serversWithRam.length;\\n}\\n\\nconst weaken_script = \\\"weaken.js\\\";\\nconst grow_script = \\\"grow.js\\\";\\nconst hack_script = \\\"hack.js\\\";\\n/** @param {NS} ns **/\\nexport async function copyHackingFiles(ns, server) {\\n\\tif (server.hasAdminRights) {\\n\\t\\tif (!ns.fileExists(hack_script, server.hostname)) {\\n\\t\\t\\tawait ns.scp(hack_script, server.hostname);\\n\\t\\t}\\n\\t\\tif (!ns.fileExists(grow_script, server.hostname)) {\\n\\t\\t\\tawait ns.scp(grow_script, server.hostname);\\n\\t\\t}\\n\\t\\tif (!ns.fileExists(weaken_script, server.hostname)) {\\n\\t\\t\\tawait ns.scp(weaken_script, server.hostname);\\n\\t\\t}\\n\\t}\\n}\\nexport function tryGetBitNodeMultipliers(ns) {\\n\\treturn JSON.parse(ns.read(`/tmp/getBitNodeMultipliers.txt`));\\n}\\nexport function inGangStatic(ns) {\\n\\treturn ns.read(`/tmp/ingang.txt`);\\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.45,\"server\":\"home\",\"moduleSequenceNumber\":28933,\"_hash\":\"0894d46a0b308b241154ca127120e84f76b3a7b4399137accac07bf645071683\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function recursiveScan(ns, parent, server, target, route) {\\n\\tconst children = ns.scan(server);\\n\\tfor (let child of children) {\\n\\t\\tif (parent == child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child == target) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(server);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\tif (recursiveScan(ns, server, child, target, route)) {\\n\\t\\t\\troute.unshift(server);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst args = ns.flags([[\\\"help\\\", false]]);\\n\\tlet route = [];\\n\\tlet server = args._[0];\\n\\tif (!server || args.help) {\\n\\t\\tns.tprint(\\\"This script helps you find a server on the network and shows you the path to get to it.\\\");\\n\\t\\tns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\n\\t\\tns.tprint(\\\"Example:\\\");\\n\\t\\tns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n\\t\\treturn;\\n\\t}\\n\\n\\tlet connectString = '';\\n\\trecursiveScan(ns, '', 'home', server, route);\\n\\tfor (const i in route) {\\n\\t\\tawait ns.sleep(0);\\n\\t\\tconst extra = i > 0 ? \\\"└ \\\" : \\\"\\\";\\n\\t\\tns.tprint(`${\\\" \\\".repeat(i)}${extra}${route[i]}`);\\n\\t}\\n\\troute.shift();\\n\\tns.tprint(`connect ${route.join(`; connect `)}`);\\n}\\n\\nexport function autocomplete(data, args) {\\n\\treturn data.servers;\\n}\",\"filename\":\"find_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"find_server.js\",\"url\":\"blob:https://danielyxie.github.io/aa996dab-2b75-4ac7-82c3-a10106e54f89\",\"moduleSequenceNumber\":634665}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":28934,\"_hash\":\"3b9f505a588b13c309d36d04796340a4ebaa1ba23ac8bb2cf738a08417e8143c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/8a4464d4-b6f2-4686-b680-96952aeb462f\",\"moduleSequenceNumber\":29031}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":29031,\"_hash\":\"7c3005da5d66c68df85df0df50d2b0b0b00778857a07d88670bbf183a0a4ebec\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/896192fc-8e86-472b-9300-fc0acbb47653\",\"moduleSequenceNumber\":29033}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":29033,\"_hash\":\"d23919e9f2448a7ca545faeb9799d8136a808b1dd9c8d5c7ac741c458d2a3156\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/6b636174-5075-4862-b357-6a68a0961c1d\",\"moduleSequenceNumber\":29032}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":29032,\"_hash\":\"fbec4b055c178ac2b6828ed994c26bf05b233d7383518107ad159953759a8b89\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { list_servers } from 'opened_servers.js';\\nimport { boxTailSingleton, ramUsage } from 'utils.js';\\n\\nlet ns;\\nconst weaken_script = \\\"weaken.js\\\";\\nconst grow_script = \\\"grow.js\\\";\\nconst hack_script = \\\"hack.js\\\";\\nlet hack_scriptRam = 1.7;\\nlet grow_scriptRam, weaken_scriptRam = 1.75;\\nlet serversForExecution = [];\\nlet hackStatus = [];\\n/** @param {NS} pns **/\\nexport async function main(pns) {\\n\\tns = pns;\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('exec')\\n\\tns.clearLog();\\n\\tns.tail();\\n\\tboxTailSingleton(ns, 'mcp', '🥾', '200px');\\n\\tweaken_scriptRam = ns.getScriptRam(weaken_script, \\\"home\\\");\\n\\tgrow_scriptRam = ns.getScriptRam(grow_script, \\\"home\\\");\\n\\thack_scriptRam = ns.getScriptRam(hack_script, \\\"home\\\");\\n\\tawait run();\\n}\\nlet hackPercent = .5;\\nlet bonusServers = 0;\\nasync function updateServerLists() {\\n\\tserversForExecution = ['home'].concat(list_servers(ns).filter(s => ns.hasRootAccess(s)));\\n\\tconst beforeHackStatusLength = hackStatus.length;\\n\\tconst serversToHack = list_servers(ns).filter(s => ns.hasRootAccess(s)\\n\\t\\t&& ns.getServerMaxMoney(s) > 0\\n\\t\\t&& ns.getServerRequiredHackingLevel(s) <= ns.getHackingLevel() / 2);\\n\\n\\thackStatus = [];\\n\\tconst skippedServer = []\\n\\tconst player = ns.getPlayer();\\n\\tfor (const server of serversToHack) {\\n\\t\\tconst s = ns.getServer(server);\\n\\t\\ts.hackDifficulty = s.minDifficulty;\\n\\t\\t// check that hacks will succeed. Could be redundant check\\n\\t\\tconst hackChance = ns.formulas.hacking.hackChance(s, player);\\n\\t\\tif (hackChance < .99) {\\n\\t\\t\\t//ns.print(`Hack chance to low ${s} ${(hackChance * 100).toFixed(2)}%`)\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (s.serverGrowth < 40) {\\n\\t\\t\\t//ns.print(`Growth is to low ${s} ${s.serverGrowth}%`)\\n\\t\\t\\tskippedServer.push({ server: server });\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\thackStatus.push({ server: server });\\n\\t}\\n\\tconst lowRamUse = ramUsage(ns) < .5;\\n\\tconst oldHackPercent = hackPercent;\\n\\tconst oldBonusServers = bonusServers;\\n\\tif (lowRamUse) {\\n\\t\\thackPercent = Math.min(hackPercent + .1, .95);\\n\\t\\tif (hackPercent === .95) {\\n\\t\\t\\tbonusServers = Math.min(bonusServers + 1, skippedServer.length);\\n\\t\\t\\thackStatus.push(...skippedServer.slice(0, bonusServers));\\n\\t\\t}\\n\\t} else {\\n\\t\\tbonusServers = Math.max(bonusServers - 1, 0);\\n\\t\\tif (bonusServers <= 0) hackPercent = Math.max(hackPercent - .1, .5);\\n\\t}\\n\\tif (oldHackPercent !== hackPercent || oldBonusServers !== bonusServers) ns.tprint(`BonusServers added ${bonusServers} Hack percent ${hackPercent}`);\\n\\t// after aug install just start hacking on n00dles fist\\n\\tif (hackStatus.length === 0) hackStatus.push({ server: 'n00dles' });\\n\\tif (beforeHackStatusLength < hackStatus.length) ns.tprint(`Servers to hack ${hackStatus.length} ${hackStatus.map(o => o.server).join(',')}`);\\n}\\n\\nasync function run() {\\n\\tlet i = 0;\\n\\tlet res;\\n\\tawait updateServerLists();\\n\\tlet updateAfter = Date.now().valueOf() + 30 * 1000;\\n\\twhile (true) {\\n\\t\\tconst state = getNextState(hackStatus[i].server, hackStatus[i].nextStateUpdateRequiredAt);\\n\\t\\tif (state) {\\n\\t\\t\\thackStatus[i] = state;\\n\\n\\t\\t\\tswitch (state.nextState) {\\n\\t\\t\\t\\tcase 'weaken':\\n\\t\\t\\t\\t\\tres = await runWeaken(state.server, state.currentSecurity, state.threadsCommitted);\\n\\t\\t\\t\\t\\t// ns.print(`Weak time ${ns.tFormat(res.time)}`);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'grow':\\n\\t\\t\\t\\t\\tres = await runGrow(state.server, state.percentMoney, state.threadsCommitted);\\n\\t\\t\\t\\t\\t// ns.print(`Grow time ${ns.tFormat(res.time)}`);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'hack':\\n\\t\\t\\t\\t\\tres = await runHack(state.server, state.threadsCommitted);\\n\\t\\t\\t\\t\\t// ns.print(`Hack time ${ns.tFormat(res.time)}`);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\n\\t\\t\\tstate.nextStateUpdateRequiredAt = Date.now() + res.time;\\n\\t\\t\\t// ns.print(`Next update at: ${new Date(state.nextStateUpdateRequiredAt).toTimeString()}`);\\n\\t\\t\\tstate.threadsCommitted = res.threadsCommitted\\n\\t\\t}\\n\\t\\ti = (i + 1) % hackStatus.length;\\n\\t\\tawait ns.sleep(1000);\\n\\t\\tif (updateAfter < Date.now()) {\\n\\t\\t\\tupdateAfter = Date.now() + 30 * 1000;\\n\\t\\t\\tawait updateServerLists();\\n\\t\\t\\ti = 0;\\n\\t\\t}\\n\\t}\\n}\\nconst getCores = (host) => ns.getServer(host).cpuCores;\\n\\nasync function runWeaken(target, currentSecurity, threads) {\\n\\tlet time = 0;\\n\\tlet threadsCommitted = 0;\\n\\tconst { host, threads_available } = getHostAndThreads(weaken_scriptRam);\\n\\tif (!host) return { time, threadsCommitted };\\n\\tlet threadToUse = threads_available;\\n\\tconst owk = ns.weakenAnalyze(1, getCores(host));\\n\\tconst threadsNeeded = Math.max(Math.ceil(currentSecurity / owk) - threads, 1);\\n\\tthreadToUse = Math.min(threadToUse, threadsNeeded);\\n\\tif (!ns.fileExists(weaken_script, host)) {\\n\\t\\tawait ns.scp(weaken_script, host);\\n\\t}\\n\\tconst pid = await ns.exec(weaken_script, host, threadToUse, target, Math.random());\\n\\tif (pid > 0) {\\n\\t\\tif (hasFormulas() && threadsNeeded <= threadToUse) {\\n\\t\\t\\ttime = ns.formulas.hacking.weakenTime(ns.getServer(target), ns.getPlayer());\\n\\t\\t}\\n\\t\\t// ns.print(`Weaken ${host}[${threadToUse}] -> ${target}`);\\n\\t\\tthreadsCommitted = threadToUse;\\n\\t}\\n\\treturn { time, threadsCommitted };\\n}\\n\\nasync function runGrow(target, percentMoney, threads) {\\n\\tlet time = 0;\\n\\tlet threadsCommitted = 0;\\n\\tconst { host, threads_available } = getHostAndThreads(grow_scriptRam);\\n\\tif (!host) return { time, threadsCommitted };\\n\\tconst growthFactor = 1 / (percentMoney || 0.0000001);\\n\\tconst threadsNeeded = Math.max(Math.floor(ns.growthAnalyze(target, growthFactor, getCores(host))) - threads, 1);\\n\\tlet threadToUse = Math.min(threads_available, threadsNeeded);\\n\\tif (!ns.fileExists(grow_script, host)) {\\n\\t\\tawait ns.scp(grow_script, host);\\n\\t}\\n\\n\\tconst pid = await ns.exec(grow_script, host, threadToUse, target, Math.random());\\n\\tif (pid > 0) {\\n\\t\\tif (hasFormulas() && threadsNeeded <= threadToUse) {\\n\\t\\t\\ttime = ns.formulas.hacking.growTime(ns.getServer(target), ns.getPlayer());\\n\\t\\t}\\n\\t\\t// ns.print(`Grow ${host}[${threadToUse}] -> ${target}`);\\n\\t\\tthreadsCommitted = threadToUse;\\n\\t}\\n\\tconst w = await runWeaken(target,ns.growthAnalyzeSecurity(threadsCommitted),0);\\n\\treturn { time:w.time, threadsCommitted: w.threadsCommitted + threadsCommitted };\\n}\\n\\nasync function runHack(target, threads) {\\n\\tlet time = 0;\\n\\tlet threadsCommitted = 0;\\n\\tconst { host, threads_available } = getHostAndThreads(hack_scriptRam);\\n\\tif (!host) return { time, threadsCommitted };\\n\\tconst threadsNeeded = Math.max(parseInt((hackPercent / ns.hackAnalyze(target)).toFixed(0)) - threads, 1);\\n\\tlet threadToUse = Math.min(threads_available, threadsNeeded);\\n\\tif (!ns.fileExists(hack_script, host)) {\\n\\t\\tawait ns.scp(hack_script, host);\\n\\t}\\n\\n\\tconst cashingOut = ns.hackAnalyze(target) * threadToUse * ns.getServerMoneyAvailable(target);\\n\\tconst pid = await ns.exec(hack_script, host, threadToUse, target, Math.random());\\n\\n\\tif (pid > 0) {\\n\\t\\tif (hasFormulas() && threadsNeeded <= threadToUse) {\\n\\t\\t\\ttime = ns.formulas.hacking.hackTime(ns.getServer(target), ns.getPlayer());\\n\\t\\t}\\n\\t\\tns.print(`Hack ${host}[${threadToUse}] -> ${target}[${ns.nFormat(cashingOut, \\\"($ 0.00 a)\\\")}]`);\\n\\t\\tthreadsCommitted = threadToUse;\\n\\t}\\n\\n\\tconst w = await runWeaken(target,ns.hackAnalyzeSecurity(threadsCommitted),0);\\n\\treturn { time:w.time, threadsCommitted: w.threadsCommitted + threadsCommitted };\\n}\\n\\nfunction hasFormulas() {\\n\\treturn ns.fileExists('Formulas.exe');\\n}\\nfunction getHostAndThreads(scriptRam) {\\n\\tconst host = serversForExecution.find((host) => {\\n\\t\\tlet maxRam = ns.getServerMaxRam(host);\\n\\t\\t// reserve some ram for other scripts\\n\\t\\tif (host === 'home') {\\n\\t\\t\\tmaxRam = Math.max(maxRam * .75, maxRam - 128);\\n\\t\\t}\\n\\t\\tconst threads_available = Math.floor((maxRam - ns.getServerUsedRam(host)) / scriptRam);\\n\\t\\treturn threads_available >= 1;\\n\\t});\\n\\tif (!host) return { host: null, threads_available: 0 };\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\t// reserve some ram for other scripts\\n\\tif (host === 'home') {\\n\\t\\tmaxRam = Math.max(maxRam * .75, maxRam - 128);\\n\\t}\\n\\tconst threads_available = Math.floor((maxRam - ns.getServerUsedRam(host)) / scriptRam);\\n\\treturn { host, threads_available };\\n}\\nfunction getNextState(server, nextStateUpdateRequiredAt) {\\n\\tif (nextStateUpdateRequiredAt > Date.now()) return null;\\n\\tlet nextState;\\n\\tconst sec = parseFloat((ns.getServerSecurityLevel(server) - ns.getServerMinSecurityLevel(server)).toFixed(2));\\n\\tconst percentMoney = parseFloat((ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server)).toFixed(2));\\n\\tif (sec > 5) {\\n\\t\\tnextState = 'weaken';\\n\\t} else if (percentMoney < 0.95) {\\n\\t\\tnextState = 'grow';\\n\\t} else {\\n\\t\\tnextState = 'hack';\\n\\t}\\n\\t// \\tns.print(`Next state for ${server} ${nextState} \\n\\t//   $% : ${percentMoney * 100} \\n\\t//   sec: +${sec.toFixed(2)} \\n\\t//   at : ${new Date(nextStateUpdateRequiredAt ? nextStateUpdateRequiredAt : Date.now()).toTimeString()}`);\\n\\treturn {\\n\\t\\tserver: server,\\n\\t\\tnextState: nextState,\\n\\t\\tpercentMoney: percentMoney,\\n\\t\\tcurrentSecurity: sec,\\n\\t\\tnextStateUpdateRequiredAt: 0,\\n\\t\\tthreadsCommitted: 0\\n\\t};\\n}\",\"filename\":\"mcp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/51d7401f-f6da-4383-9e1c-02e92518e750\",\"moduleSequenceNumber\":66217},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/41c83801-606b-42bd-bcfc-dde73d406d0a\",\"moduleSequenceNumber\":66199},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/34b9c5a0-0024-42be-af83-52652d6a5370\",\"moduleSequenceNumber\":336608},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/2b1f73f4-ca97-457e-8df9-81ade5657196\",\"moduleSequenceNumber\":66199},{\"filename\":\"mcp.js\",\"url\":\"blob:https://danielyxie.github.io/de4d6c75-838a-4c4d-9eb8-fc9e0b2ce2d2\",\"moduleSequenceNumber\":337762}],\"dependents\":[],\"ramUsage\":13.6,\"server\":\"home\",\"moduleSequenceNumber\":28938,\"_hash\":\"40eafd0a62ace6a9ec46bb73cec73dc5213d36aa5cacc77b5a2d69dd95e433ba\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { copyHackingFiles } from 'utils.js';\\nimport { getAugsRemainingAtFaction, getAllAugmentStats, hasStat } from 'augments.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.clearLog();\\n\\tns.tail();\\n\\tconst augmentStats = getAllAugmentStats(ns);\\n\\t// const bladeburnerDesiredStats = ['agi', 'dex', 'str', 'def', 'faction_rep', 'company_rep', 'hacknet'];\\n\\tconst bladeburnerDesiredStats = ['dex'];\\n\\tconst anauglist = Object.entries(augmentStats)\\n\\t\\t.filter(([name, augstats]) =>\\n\\t\\t\\tbladeburnerDesiredStats.filter((stat) => hasStat(stat, augstats)).length > 0)\\n\\t\\t\\t.map(([name, augstats]) => name);\\n\\tns.print(JSON.stringify(anauglist, null, 2));\\n\\t// AGI\\n\\t[\\n  \\\"NeuroFlux Governor\\\",\\n  \\\"Synthetic Heart\\\",\\n  \\\"SPTN-97 Gene Modification\\\",\\n  \\\"Graphene Bionic Spine Upgrade\\\",\\n  \\\"Graphene Bionic Legs Upgrade\\\",\\n  \\\"CordiARC Fusion Reactor\\\",\\n  \\\"FocusWire\\\",\\n  \\\"Bionic Spine\\\",\\n  \\\"Bionic Legs\\\",\\n  \\\"Neurotrainer III\\\",\\n  \\\"Power Recirculation Core\\\",\\n  \\\"Xanipher\\\",\\n  \\\"nextSENS Gene Modification\\\",\\n  \\\"Photosynthetic Cells\\\",\\n  \\\"Neurotrainer II\\\",\\n  \\\"Wired Reflexes\\\",\\n  \\\"Neurotrainer I\\\",\\n  \\\"NutriGen Implant\\\",\\n  \\\"HemoRecirculator\\\",\\n  \\\"LuminCloaking-V1 Skin Implant\\\",\\n  \\\"LuminCloaking-V2 Skin Implant\\\",\\n  \\\"GOLEM Serum\\\",\\n  \\\"I.N.T.E.R.L.I.N.K.E.D\\\",\\n  \\\"Blade's Runners\\\",\\n  \\\"BLADE-51b Tesla Armor\\\"\\n]\\n\\n\\n\\t// const factionAugs = getAugsRemainingAtFaction(ns);\\n\\t// const factionsWithAugs = Object.entries(factionAugs)\\n\\t// \\t.filter(([faction, augList]) =>\\n\\t// \\t\\taugList.filter(aug => aug !== 'NeuroFlux Governor').length > 0 // work for factions with augs other than NFG\\n\\t// \\t\\t&& faction !==  ns.getPlayer().currentWorkFactionName // sleeve 0 is working for this faction\\n\\t// \\t\\t// && !allGangFactions.includes(faction) // can't work for competing gangs\\n\\t// \\t\\t&& ns.getPlayer().factions.includes(faction) // player in faction\\n\\t// \\t\\t&& faction !== 'Bladeburners'\\n\\t// \\t\\t&& faction !== 'Slum Snakes');\\n\\t// let faction = factionsWithAugs[i][0]\\n\\n\\t// const excludedAugs = ['QLink', 'Hydroflame Left Arm'];\\n\\t// const ag = ns.sleeve.getSleevePurchasableAugs(1).filter(a => !excludedAugs.includes(a.name)).sort((a, b) => a.cost - b.cost);\\n\\t//  const factionsWithAugs = Object.entries(factionAugs)\\n\\t//         .filter(([faction, augList]) =>\\n\\t//             augList.filter(aug => aug !== 'NeuroFlux Governor').length > 0 // work for factions with augs other than NFG\\n\\t//             && faction !== playerInfo.currentWorkFactionName // sleeve 0 is working for this faction\\n\\t//             // && !allGangFactions.includes(faction) // can't work for competing gangs\\n\\t//             && playerInfo.factions.includes(faction) // player in faction\\n\\t//             && faction !== 'Bladeburners'\\n\\t//             && faction !== 'Slum Snakes');\\n\\t// const blackOpsNames = ns.bladeburner.getBlackOpNames();\\n\\t// let blackOpsRanks = {};\\n\\t// const blackOpsToBeDone = {};\\n\\t// for (let blackOpsName of blackOpsNames) {\\n\\t// \\tblackOpsRanks[blackOpsName] = ns.bladeburner.getBlackOpRank(blackOpsName);\\n\\t// \\tblackOpsToBeDone[blackOpsName] = ns.bladeburner.getActionCountRemaining(\\\"blackops\\\", blackOpsName);\\n\\t// }\\n\\t// let remainingBlackOpsNames = blackOpsNames.filter(n => blackOpsToBeDone[n] === 1)\\n\\t// \\t.sort((b1, b2) => blackOpsRanks[b1] - blackOpsRanks[b2]);\\n\\t// const currentAction = ns.bladeburner.getCurrentAction();\\n\\t// // Special case: If the user has manually kicked off the last BlackOps, don't interrupt it, let it be our last task\\n\\t// ns.print(`${currentAction?.name} === ${remainingBlackOpsNames[remainingBlackOpsNames.length - 1]} ${currentAction?.name === remainingBlackOpsNames[remainingBlackOpsNames - 1]}`);\\n\\t// const currentDuration = ns.bladeburner.getActionTime(currentAction.type, currentAction.name);\\n\\t// ns.print(`currentDuration ${currentDuration}`);\\n\\t// lastAssignedTask = currentAction;\\n\\n\\n\\t// ns.print(JSON.stringify(getAugsRemainingAtFaction(ns), null, 2));\\n\\n\\t// const s = ns.getPurchasedServers();\\n\\t// for (let server of s) {\\n\\t// \\tawait copyHackingFiles(ns, { hostname: server, hasAdminRights: true });\\n\\t// }\\n\\t// for (let i =0; i<ns.hacknet.numNodes();i++) {\\n\\t// await copyHackingFiles(ns, { hostname: `hacknet-node-${i}`, hasAdminRights: true });\\n\\t// }\\n\\t// let activeAugmentations = getOwnedAugmentationsStatic(ns);\\n\\t//     ns.print(activeAugmentations.includes(\\\"Neuroreceptor Management Implant\\\"));\\n\\t// \\tns.workForFaction(\\\"NiteSec\\\", 'security', false);\\n\\t// ns.print(ns.corporation.hasUnlockUpgrade('Smart Supply'));\\n\\t// ns.print(JSON.stringify(ns.corporation.getWarehouse('Agriculture', 'Sector-12'),null, 2));\\n\\t// ns.print(JSON.stringify(ns.getPlayer(), null, 2));\\n\\t// const words = [\\n\\t// \\t'bitburner', 'hack', 'cpu', 'hacknet', 'augment','install','noodles','noodle','vitalife'\\n\\t// ]\\n\\t// for (let word of words)\\n\\t// \\tns.print(`${word} ${ns.rainbow(word)}`);\\n\\t// const gang = ns.gang.getGangInformation();\\n\\t// const chanceVsOtherGang = Object.entries(ns.gang.getOtherGangInformation())\\n\\t// \\t.filter(([k, s]) => k !== gang.faction && s.territory > 0)\\n\\t// \\t.map(([k, s]) => ns.gang.getChanceToWinClash(k));\\n\\n\\n\\t// let members = [];\\n\\t// let names = ns.gang.getMemberNames();\\n\\t// for (const name of names) {\\n\\t// \\tmembers.push(ns.gang.getMemberInformation(name));\\n\\t// }\\n\\t// let tasks = [];\\n\\t// names = ns.gang.getTaskNames();\\n\\t// for (const name of names) {\\n\\t// \\ttasks.push(ns.gang.getTaskStats(name));\\n\\t// }\\n\\t// let i = 0;\\n\\t// for (const member of members) {\\n\\t// \\ti++;\\n\\t// \\tlet prevTask = member.task;\\n\\t// \\tlet bestTask = '';\\n\\t// \\tlet mg = 0;\\n\\t// \\tfor (const task of tasks) {\\n\\t// \\t\\tlet nmg = ns.formulas.gang.respectGain(gang, member, task);\\n\\t// \\t\\t//if (nmg > 0) \\n\\t// \\t\\tns.print(`${member.name} ${task.name} ${nmg}`);\\n\\t// \\t\\tif (nmg > mg) {\\n\\t// \\t\\t\\tbestTask = task.name;\\n\\t// \\t\\t\\tmg = nmg;\\n\\t// \\t\\t}\\n\\t// \\t}\\n\\t// \\tns.print(`BEST TASK ${member.name} ${bestTask} ${mg}`);\\n\\t// }\\n\\t// const target = 'CSEC';\\n\\t// const server = ns.getServer(target);\\n\\t// const player = ns.getPlayer();\\n\\t// ns.print(ns.getBitNodeMultipliers())\\n\\t// ns.print(JSON.stringify(player, null, 2));\\n\\t// ns.print(ns.gang.getMemberNames())\\n\\t// ns.print(ns.gang.getTaskNames());\\n\\t// const hnc = ns.hacknet.getPurchaseNodeCost();\\n\\t// const mgr = 0; //ns.hacknet.getNodeStats(200, 64, 16, player.hacknet_node_money_mult)\\n\\t// const htime = ns.formulas.hacking.hackTime(ns.getServer(target), ns.getPlayer());\\n\\n\\t// const owk = ns.weakenAnalyze(1, 4);\\n\\t// const securityLevelToBeat = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\n\\t// const threadsNeeded = Math.ceil(securityLevelToBeat / owk);\\n\\t// const bingo = ns.weakenAnalyze(threads, 4)\\n\\t// ns.print(`${owk} * ${threads} >= ${securityLevelToBeat} `);\\n\\t// ns.tprint(`${ns.hackAnalyze(target)} ${mgr} ${''}`);\\n\\t// ns.print(`${hnc} ${mgr}`);\\n\\t// server.hackDifficulty = server.minDifficulty;\\n\\t// const ht1 = ns.formulas.hacking.growPercent(server, 1, player, 1);\\n\\t// const threads = 2.1 / ht1;\\n\\t// const ht2 = ns.formulas.hacking.growPercent(server, 10000, player, 1);\\n\\t// let percent = 0;\\n\\t// let growThreadsNeeded = 1;\\n\\t// while (percent < 2.1) {\\n\\t// \\tpercent = ns.formulas.hacking.growPercent(server, growThreadsNeeded++, player, 1);\\n\\t// \\tns.print(`${percent}`);\\n\\t// \\tawait ns.sleep(0);\\n\\t// }\\n\\t// server.hackDifficulty = server.minDifficulty;\\n\\t// const ht2 = ns.formulas.hacking.hackPercent(server, player);\\n\\t// ns.print(`${ht1} ${threads} ${ht2} ${growThreadsNeeded} ${percent}`);\\n\\t// let growO = ns.hackAnalyzeSecurity(1);\\n\\t// let growSecurityInc = ns.growthAnalyzeSecurity(1);\\n\\t// ns.print(`${growO} ${1} ${growSecurityInc}`);\\n\\t// \\tconst t = ns.formulas.hacking.weakenTime(server, player);\\n\\t// \\tconst wt1 = Date.now() + ns.formulas.hacking.weakenTime(server, player);\\n\\t// \\tawait ns.sleep(500);\\n\\t// \\tconst wt2 = Date.now() - (wt1 - ns.formulas.hacking.weakenTime(server, player));\\n\\t// \\tns.print(`${t} ${wt2}`);\\n\\n\\t// ns.print(`${ns.hackAnalyze('johnson-ortho')} `);\\n\\n\\n\\tNumber.prototype.toExponential = () => null;\\n\\t// eval('window').performance.now = () => 0;\\n\\n\\n\\t// ns.print(`${ns.alterReality()}`);\\n\\t// ns.print(`${ns.bypass(eval('document'))}`);\\n\\t// eval('document').querySelector(\\\"#unclickable\\\").click()\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"augments.js\",\"url\":\"blob:https://danielyxie.github.io/62c8c4d0-0543-4e5d-ab55-237605844e9a\",\"moduleSequenceNumber\":72037},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/3743832c-634a-4d9d-b06b-09f2d6b56b5b\",\"moduleSequenceNumber\":28949},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/52ef5c32-86b9-443a-9bca-339b2610e02d\",\"moduleSequenceNumber\":28932},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/fa51ba38-4af7-417e-88ec-9d283f6ebf6d\",\"moduleSequenceNumber\":28933},{\"filename\":\"test.js\",\"url\":\"blob:https://danielyxie.github.io/b032f185-a08f-4bf1-96f2-fd934caed991\",\"moduleSequenceNumber\":89655}],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"home\",\"moduleSequenceNumber\":89655,\"_hash\":\"af2f03b0ce88e6f0b83f35a162009ee18fa7c5b600da8dcfb01a53df06ce6280\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ramUsage } from 'utils.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst args = ns.flags([[\\\"help\\\", false]]);\\n\\tif (args.help) {\\n\\t\\tns.tprint(\\\"This script will enhance your HUD (Heads up Display) with custom statistics.\\\");\\n\\t\\tns.tprint(`Usage: run ${ns.getScriptName()}`);\\n\\t\\tns.tprint(\\\"Example:\\\");\\n\\t\\tns.tprint(`> run ${ns.getScriptName()}`);\\n\\t\\treturn;\\n\\t}\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('disableLog');\\n\\tns.disableLog('getServerMaxRam')\\n\\tns.disableLog('getServerUsedRam');\\n\\n\\tconst doc = eval('document');\\n\\tconst hook0 = doc.getElementById('overview-extra-hook-0');\\n\\tconst hook1 = doc.getElementById('overview-extra-hook-1');\\n\\tconst monies = [];\\n\\tlet moneyLastTick = ns.getPlayer().money;\\n\\twhile (true) {\\n\\t\\ttry {\\n\\t\\t\\tconst headers = []\\n\\t\\t\\tconst values = [];\\n\\t\\t\\tconst player = ns.getPlayer();\\n\\n\\t\\t\\theaders.push(\\\"Scripts\\\");\\n\\t\\t\\tvalues.push(ns.nFormat(ns.getScriptIncome()[0], \\\"($0.00a)\\\") + '/s');\\n\\n\\t\\t\\tmonies.push(player.money - moneyLastTick);\\n\\t\\t\\tif (monies.length > 600) monies.shift();\\n\\t\\t\\tmoneyLastTick = player.money;\\n\\t\\t\\theaders.push(\\\"Money\\\");\\n\\t\\t\\tvalues.push(ns.nFormat(monies.reduce((a, b) => a + b, 0) / monies.length, \\\"($0.00a)\\\") + '/s');\\n\\n\\t\\t\\theaders.push(\\\"Ram Use\\\");\\n\\t\\t\\tvalues.push((ramUsage(ns) * 100).toFixed(1) + '%');\\n\\n\\t\\t\\tif (ns.heart.break() > -54000) {\\n\\t\\t\\t\\theaders.push(\\\"Karma\\\");\\n\\t\\t\\t\\tvalues.push(ns.heart.break().toFixed(0));\\n\\t\\t\\t}\\n\\n\\t\\t\\t// if (ns.fileExists('/tmp/ingang.txt')) {\\n\\t\\t\\t// \\tconst gangInfo = ns.getGangInformation();\\n\\t\\t\\t// \\theaders.push(\\\"Respect\\\");\\n\\t\\t\\t// \\tvalues.push(ns.nFormat(gangInfo.respect, '0.00a'));\\n\\t\\t\\t// \\theaders.push(\\\"Penalty\\\");\\n\\t\\t\\t// \\tvalues.push(ns.nFormat(gangInfo.wantedPenalty, '0.00%'));\\n\\t\\t\\t// \\theaders.push(\\\"Territory\\\");\\n\\t\\t\\t// \\tvalues.push(ns.nFormat(gangInfo.territory, '0.00%'));\\n\\t\\t\\t// }\\n\\n\\t\\t\\tif (ns.getSharePower() > 1) {\\n\\t\\t\\t\\theaders.push(\\\"Share\\\");\\n\\t\\t\\t\\tvalues.push(((ns.getSharePower() - 1) * 100).toFixed(2) + '%');\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Now drop it into the placeholder elements\\n\\t\\t\\thook0.innerText = headers.join(\\\"\\\\n\\\");\\n\\t\\t\\thook1.innerText = values.join(\\\"\\\\n\\\");\\n\\t\\t} catch (err) { // This might come in handy later\\n\\t\\t\\tns.print(\\\"ERROR: Update Skipped: \\\" + String(err));\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"custom-stats.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/479f5c9d-a148-4790-b7f7-4ce7c042da35\",\"moduleSequenceNumber\":28949},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/76dc74e1-74dc-4ae9-a3c3-2f72200a3321\",\"moduleSequenceNumber\":28932},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/5ff791f4-e263-4f14-b859-03afc8a10dc4\",\"moduleSequenceNumber\":28933},{\"filename\":\"custom-stats.js\",\"url\":\"blob:https://danielyxie.github.io/4d085bbb-1011-4e8e-b4ff-45e114d28981\",\"moduleSequenceNumber\":29024}],\"dependents\":[],\"ramUsage\":3.25,\"server\":\"home\",\"moduleSequenceNumber\":29024,\"_hash\":\"4b9469a509c8cf93404e80bb1625b76b7717f843073b3d3bc8f890e2b5eccf59\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getSharePower\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { initAugments } from \\\"./augments\\\";\\nimport { boxTailSingleton } from \\\"utils.js\\\"\\nlet ns;\\n\\n/** @param {NS} pns **/\\nexport async function main(pns) {\\n\\tns = pns;\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('scan');\\n\\tboxTailSingleton(ns, 'init', '🖳', '100px');\\n\\tns.clearLog();\\n\\n\\tconst tmpFiles = ns.ls('home', 'tmp');\\n\\tfor (const tmpFp of tmpFiles) {\\n\\t\\tns.rm(tmpFp, 'home');\\n\\t}\\n\\n\\tif (ns.heart.break() < -54000) {\\n\\t\\tns.print('heart plenty broken tyvm');\\n\\t\\tns.gang.createGang('Slum Snakes');\\n\\t}\\n\\tif (ns.gang.inGang()) {\\n\\t\\tawait ns.write('/tmp/ingang.txt', ns.gang.getGangInformation().faction, 'w');\\n\\t}\\n\\tawait ns.write('/tmp/player.txt', JSON.stringify(ns.getPlayer(), null, 2), \\\"w\\\");\\n\\tconst multis = JSON.stringify(ns.getBitNodeMultipliers(), null, 2);\\n\\tconst fp = `/tmp/getBitNodeMultipliers.txt`;\\n\\tawait ns.write(fp, multis, 'w');\\n\\n\\tns.print('init augs details');\\n\\tawait initAugments(ns);\\n\\tns.print('init sleeves statics');\\n\\tawait writeSleeveData();\\n\\n\\tawait writeServers('', 'home');\\n\\tns.exec('hacknet.js', 'home');\\n\\tns.exec('spend-hacknet-hash.js', 'home');\\n\\tns.exec('player.js', 'home');\\n\\tns.exec('sleeves.js', 'home');\\n\\tns.exec('bladeburner.js', 'home');\\n\\tns.exec('megacorp.js', 'home');\\n\\tns.exec('workForFaction.js', 'home', 1, !ns.gang.inGang() ? `--gang-focus` : '--crime-focus');\\n\\tif (ns.gang.inGang()) ns.exec('gangum.js', 'home');\\n\\tns.exec('purchase-servers.js', 'home');\\n\\tns.exec('ensureRoot.js', 'home');\\n\\tns.exec('mcp_hgw.js', 'home');\\n\\tns.exec('custom-stats.js', 'home');\\n\\t// ns.exec('charts.js', 'home');\\n\\t// ns.exec('chart_ram.js', 'home');\\n}\\nimport { list_servers } from 'opened_servers.js';\\nasync function writeServers() {\\n\\tconst hosts = list_servers(ns);\\n\\tfor (let host of hosts) {\\n\\t\\tconst serverDetails = ns.getServer(host);\\n\\t\\tserverDetails.hasAdminRights = false;\\n\\t\\tserverDetails.backdoorInstalled = false;\\n\\t\\tconst fp = `/tmp/${host.replaceAll(/[\\\\.\\\\s]/g, '_')}.txt`;\\n\\t\\tawait ns.write(fp, JSON.stringify(serverDetails, null, 2), 'w');\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nasync function writeSleeveData() {\\n\\tconst getNumSleeves = ns.sleeve.getNumSleeves();\\n\\tconst data = {\\n\\t\\tgetNumSleeves\\n\\t};\\n\\tawait ns.write('/tmp/sleeves_static.txt', JSON.stringify(data), 'w')\\n}\",\"filename\":\"init.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/c3b83606-792c-46a0-9d5d-5218b606eb37\",\"moduleSequenceNumber\":28932},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/7a58df7f-015a-4f0a-a358-b7585c92b1b0\",\"moduleSequenceNumber\":28949},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/e4ed8433-ec5c-4458-94aa-e5b43816ec8e\",\"moduleSequenceNumber\":28932},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/53a4a920-ed61-4a72-b31b-fc2530ab8763\",\"moduleSequenceNumber\":28933},{\"filename\":\"augments.js\",\"url\":\"blob:https://danielyxie.github.io/4105497f-8975-4cc4-9eb0-6c24a27bdf6a\",\"moduleSequenceNumber\":28961},{\"filename\":\"init.js\",\"url\":\"blob:https://danielyxie.github.io/490f7b53-f109-4631-923c-b2648e501047\",\"moduleSequenceNumber\":28970}],\"dependents\":[],\"ramUsage\":36.8,\"server\":\"home\",\"moduleSequenceNumber\":28970,\"_hash\":\"7aa01bec4da1f4c16c3d9fb7bd13adf6cfcf9652aa23b26ca06e0fa7ef89f671\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.createGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:https://danielyxie.github.io/3b1b54ab-f25c-4150-8ab0-a3aba0cf2cff\",\"moduleSequenceNumber\":265319}],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":28942,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { list_servers } from 'opened_servers.js';\\nconst share_script = \\\"share.js\\\";\\nlet share_scriptRam = 4;\\nlet serversForExecution;\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst flags = ns.flags([['allram', false]]);\\n\\tns.disableLog('getServerMaxRam');\\n\\tns.disableLog('getServerUsedRam');\\n\\tns.disableLog('sleep');\\n\\tshare_scriptRam = ns.getScriptRam(share_script, \\\"home\\\");\\n\\tconst openedServers = (await list_servers(ns)).filter(s => ns.hasRootAccess(s))\\n\\tserversForExecution = ns.getPurchasedServers().concat(openedServers);\\n\\tlet updateAfter = Date.now().valueOf() + 30 * 1000;\\n\\twhile (true) {\\n\\t\\tif (updateAfter < Date.now()) {\\n\\t\\t\\tconst openedServers = (await list_servers(ns)).filter(s => ns.hasRootAccess(s))\\n\\t\\t\\tserversForExecution = ns.getPurchasedServers().concat(openedServers);\\n\\t\\t\\tupdateAfter = Date.now() + 30 * 1000;\\n\\t\\t}\\n\\t\\tfor (const host of serversForExecution) {\\n\\t\\t\\tconst threadsAvailable = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host)) / share_scriptRam);\\n\\t\\t\\tif (threadsAvailable <= 0) continue;\\n\\t\\t\\tif (!ns.fileExists(share_script, host)) {\\n\\t\\t\\t\\tawait ns.scp(share_script, host);\\n\\t\\t\\t}\\n\\t\\t\\tawait ns.exec(share_script, host, threadsAvailable);\\n\\t\\t\\tawait ns.sleep(0);\\n\\t\\t}\\n\\t\\t// only use max 75% of home for sharing \\n\\t\\tconst threadsAvailable = Math.floor(((ns.getServerMaxRam('home') * .75) - ns.getServerUsedRam('home')) / share_scriptRam);\\n\\t\\tif (threadsAvailable > 0) {\\n\\t\\t\\tawait ns.exec(share_script, 'home', threadsAvailable, Math.random());\\n\\t\\t}\\n\\t\\tawait ns.sleep(0);\\n\\t}\\n}\",\"filename\":\"sharing_is_caring.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/c9e7c2b2-b650-45c5-8aa9-0c7408df8c08\",\"moduleSequenceNumber\":139654},{\"filename\":\"sharing_is_caring.js\",\"url\":\"blob:https://danielyxie.github.io/0484b4cf-e8ce-469e-94a7-9390769aca10\",\"moduleSequenceNumber\":265219}],\"dependents\":[],\"ramUsage\":6.3,\"server\":\"home\",\"moduleSequenceNumber\":28943,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//https://github.com/kroitor/asciichart\\n\\n// control sequences for coloring\\n\\nexport const black = \\\"\\\\x1b[30m\\\"\\nexport const red = \\\"\\\\x1b[31m\\\"\\nexport const green = \\\"\\\\x1b[32m\\\"\\nexport const yellow = \\\"\\\\x1b[33m\\\"\\nexport const blue = \\\"\\\\x1b[34m\\\"\\nexport const magenta = \\\"\\\\x1b[35m\\\"\\nexport const cyan = \\\"\\\\x1b[36m\\\"\\nexport const lightgray = \\\"\\\\x1b[37m\\\"\\nexport const adefault = \\\"\\\\x1b[39m\\\"\\nexport const darkgray = \\\"\\\\x1b[90m\\\"\\nexport const lightred = \\\"\\\\x1b[91m\\\"\\nexport const lightgreen = \\\"\\\\x1b[92m\\\"\\nexport const lightyellow = \\\"\\\\x1b[93m\\\"\\nexport const lightblue = \\\"\\\\x1b[94m\\\"\\nexport const lightmagenta = \\\"\\\\x1b[95m\\\"\\nexport const lightcyan = \\\"\\\\x1b[96m\\\"\\nexport const white = \\\"\\\\x1b[97m\\\"\\nexport const reset = \\\"\\\\x1b[0m\\\"\\n\\nexport function colored(char, color) {\\n    // do not color it if color is not specified\\n    return (color === undefined) ? char : (color + char + reset)\\n}\\n\\nexport function plot(series, cfg = undefined) {\\n    // this function takes both one array and array of arrays\\n    // if an array of numbers is passed it is transformed to\\n    // an array of exactly one array with numbers\\n    if (typeof (series[0]) == \\\"number\\\") {\\n        series = [series]\\n    }\\n\\n    cfg = (typeof cfg !== 'undefined') ? cfg : {}\\n\\n    let min = (typeof cfg.min !== 'undefined') ? cfg.min : series[0][0]\\n    let max = (typeof cfg.max !== 'undefined') ? cfg.max : series[0][0]\\n\\n    for (let j = 0; j < series.length; j++) {\\n        for (let i = 0; i < series[j].length; i++) {\\n            min = Math.min(min, series[j][i])\\n            max = Math.max(max, series[j][i])\\n        }\\n    }\\n\\n    let defaultSymbols = ['┼', '┤', '╶', '╴', '─', '╰', '╭', '╮', '╯', '│']\\n    let range = Math.abs(max - min)\\n    let offset = (typeof cfg.offset !== 'undefined') ? cfg.offset : 3\\n    let padding = (typeof cfg.padding !== 'undefined') ? cfg.padding : '           '\\n    let height = (typeof cfg.height !== 'undefined') ? cfg.height : range\\n    let colors = (typeof cfg.colors !== 'undefined') ? cfg.colors : []\\n    let ratio = range !== 0 ? height / range : 1;\\n    let min2 = Math.round(min * ratio)\\n    let max2 = Math.round(max * ratio)\\n    let rows = Math.abs(max2 - min2)\\n    let width = 0\\n    for (let i = 0; i < series.length; i++) {\\n        width = Math.max(width, series[i].length)\\n    }\\n    width = width + offset\\n    let symbols = (typeof cfg.symbols !== 'undefined') ? cfg.symbols : defaultSymbols\\n    let format = (typeof cfg.format !== 'undefined') ? cfg.format : function (x) {\\n        return (padding + x.toFixed(2)).slice(-padding.length)\\n    }\\n\\n    let result = new Array(rows + 1) // empty space\\n    for (let i = 0; i <= rows; i++) {\\n        result[i] = new Array(width)\\n        for (let j = 0; j < width; j++) {\\n            result[i][j] = ' '\\n        }\\n    }\\n    for (let y = min2; y <= max2; ++y) { // axis + labels\\n        let label = format(rows > 0 ? max - (y - min2) * range / rows : y, y - min2)\\n        result[y - min2][Math.max(offset - label.length, 0)] = label\\n        result[y - min2][offset - 1] = (y == 0) ? symbols[0] : symbols[1]\\n    }\\n\\n    for (let j = 0; j < series.length; j++) {\\n        let currentColor = colors[j % colors.length]\\n        let y0 = Math.round(series[j][0] * ratio) - min2\\n        result[rows - y0][offset - 1] = colored(symbols[0], currentColor) // first value\\n\\n        for (let x = 0; x < series[j].length - 1; x++) { // plot the line\\n            let y0 = Math.round(series[j][x + 0] * ratio) - min2\\n            let y1 = Math.round(series[j][x + 1] * ratio) - min2\\n            if (y0 == y1) {\\n                result[rows - y0][x + offset] = colored(symbols[4], currentColor)\\n            } else {\\n                result[rows - y1][x + offset] = colored((y0 > y1) ? symbols[5] : symbols[6], currentColor)\\n                result[rows - y0][x + offset] = colored((y0 > y1) ? symbols[7] : symbols[8], currentColor)\\n                let from = Math.min(y0, y1)\\n                let to = Math.max(y0, y1)\\n                for (let y = from + 1; y < to; y++) {\\n                    result[rows - y][x + offset] = colored(symbols[9], currentColor)\\n                }\\n            }\\n        }\\n    }\\n    return result.map(function (x) { return x.join('') }).join('\\\\n')\\n}\",\"filename\":\"asciichart.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":28944,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as asciichart from 'asciichart.js';\\n//store here to be a bit more persisten to script restarts\\nconst series = { 'n00dles': new Array(50).fill(0) };\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const flags = ns.flags([\\n        ['port', 1],\\n        ['refreshrate', 10000],\\n        ['help', false],\\n    ])\\n    if (flags.help) {\\n        ns.tprint(\\\"This script plots a chart using data from a pipe\\\");\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} PIPE_NUMBER`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} 1`)\\n        return;\\n    }\\n    ns.tail();\\n    ns.disableLog('ALL');\\n    const padding = '       ';\\n    const config = {\\n        offset: 2,    // axis offset from the left (min 2)\\n        padding, // padding string for label formatting (can be overridden)\\n        height: 5,   // any height you want\\n        // the label format function applies default padding\\n        format: function (x, i) { return (padding + ns.nFormat(x, '0.00a')).slice(-padding.length) }\\n    };\\n\\n    const port = flags.port;\\n    ns.print(JSON.stringify(Object.values(series), null, 2));\\n    while (true) {\\n        ns.clearLog();\\n        const dollars = {};\\n        let d = ns.peek(port);\\n        while (d !== 'NULL PORT DATA') {\\n            d = ns.readPort(port)\\n            if (d === 'NULL PORT DATA') continue;\\n            const [target, v] = d.split(':');\\n            const dollar = Math.floor(parseFloat(v));\\n            if (!dollars[target]) dollars[target] = 0;\\n            dollars[target] += dollar;\\n            // ns.toast(`Hacked ${target} ${ns.nFormat(dollar, \\\"$0.000a\\\")}`, 'info', 3000);\\n            series[target] = series[target] || new Array(50).fill(0);\\n        }\\n        ns.print(`Interval ${ns.tFormat(flags.refreshrate)}`)\\n        for (const [target, datum] of Object.entries(series)) {\\n            series[target].push(dollars[target] || 0);\\n            series[target].shift();\\n            ns.print(target);\\n            ns.print(`${asciichart.plot(datum, config)}`);\\n        }\\n        await ns.sleep(flags.refreshrate);\\n    }\\n}\",\"filename\":\"charts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"asciichart.js\",\"url\":\"blob:https://danielyxie.github.io/fa10554f-3439-4c5e-b6fd-3700223e1df1\",\"moduleSequenceNumber\":3101},{\"filename\":\"charts.js\",\"url\":\"blob:https://danielyxie.github.io/c9208acd-fb4b-4bdd-b04a-0a533ee35e58\",\"moduleSequenceNumber\":3113}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":28945,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { list_servers } from \\\"opened_servers.js\\\";\\nimport { boxTailSingleton } from 'utils.js';\\n\\n/** @param {NS} ns **/\\nexport function main(ns) {\\n    boxTailSingleton(ns, 'autosolver', '🔎');\\n    const contracts = list_servers(ns).map((server) => {\\n        const onServer = ns.ls(server, \\\".cct\\\").map((contract) => {\\n            const type = ns.codingcontract.getContractType(contract, server);\\n            const data = ns.codingcontract.getData(contract, server);\\n            const didSolve = solve(type, data, server, contract, ns);\\n            return `${server} - ${contract} - ${type} - ${didSolve || \\\"FAILED!\\\"}`;\\n        });\\n        return onServer;\\n    }).filter(o => o.length);\\n    ns.print(`Found ${contracts.length} contracts`);\\n    contracts.forEach((contract) => ns.print(contract));\\n}\\n\\nfunction solve(type, data, server, contract, ns) {\\n    let solution;\\n    switch (type) {\\n        case \\\"Algorithmic Stock Trader I\\\":\\n            solution = maxProfit([1, data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader II\\\":\\n            solution = maxProfit([Math.ceil(data.length / 2), data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader III\\\":\\n            solution = maxProfit([2, data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader IV\\\":\\n            solution = maxProfit(data);\\n            break;\\n        case \\\"Minimum Path Sum in a Triangle\\\":\\n            solution = solveTriangleSum(data, ns);\\n            break;\\n        case \\\"Unique Paths in a Grid I\\\":\\n            solution = uniquePathsI(data);\\n            break;\\n        case \\\"Unique Paths in a Grid II\\\":\\n            solution = uniquePathsII(data);\\n            break;\\n        case \\\"Generate IP Addresses\\\":\\n            solution = generateIps(data);\\n            break;\\n        case \\\"Find Largest Prime Factor\\\":\\n            solution = factor(data);\\n            break;\\n        case \\\"Spiralize Matrix\\\":\\n            solution = spiral(data);\\n            break;\\n        case \\\"Merge Overlapping Intervals\\\":\\n            solution = mergeOverlap(data);\\n            break;\\n        case \\\"Subarray with Maximum Sum\\\":\\n            solution = subArrayMaxSum(data);\\n            break;\\n        case \\\"Array Jumping Game\\\":\\n            solution = arrayJump(data);\\n            break;\\n        case \\\"Find All Valid Math Expressions\\\":\\n            solution = allExpressions(data);\\n            break;\\n        case \\\"Sanitize Parentheses in Expression\\\":\\n            solution = sanitizeParentheses(data);\\n            break;\\n        case \\\"Total Ways to Sum\\\":\\n            solution = totalWayToSum(data);\\n            break;\\n        case \\\"Total Ways to Sum II\\\":\\n            solution = solveWaysToSumII(data);\\n            break;\\n        case \\\"HammingCodes: Encoded Binary to Integer\\\":\\n            solution = hammingDecode(data);\\n            break;\\n        case \\\"HammingCodes: Integer to encoded Binary\\\":\\n            solution = hammingEncode(data);\\n            break;\\n        case \\\"Array Jumping Game II\\\":\\n            solution = arrayJumpingGameII(data);\\n            break;\\n        case \\\"Shortest Path in a Grid\\\":\\n            solution = shortestPathInAGrid(data);\\n            break;\\n        default:\\n            solution = null;\\n            ns.print(type + ' No solution implemented');\\n            break;\\n    }\\n    return (solution !== null) ? ns.codingcontract.attempt(solution, contract, server, { returnReward: true }) : null;\\n}\\n\\n//ALGORITHMIC STOCK TRADER\\n\\nfunction maxProfit(arrayData) {\\n    let i, j, k;\\n\\n    let maxTrades = arrayData[0];\\n    let stockPrices = arrayData[1];\\n\\n    // WHY?\\n    let tempStr = \\\"[0\\\";\\n    for (i = 0; i < stockPrices.length; i++) {\\n        tempStr += \\\",0\\\";\\n    }\\n    tempStr += \\\"]\\\";\\n    let tempArr = \\\"[\\\" + tempStr;\\n    for (i = 0; i < maxTrades - 1; i++) {\\n        tempArr += \\\",\\\" + tempStr;\\n    }\\n    tempArr += \\\"]\\\";\\n\\n    let highestProfit = JSON.parse(tempArr);\\n\\n    for (i = 0; i < maxTrades; i++) {\\n        for (j = 0; j < stockPrices.length; j++) { // Buy / Start\\n            for (k = j; k < stockPrices.length; k++) { // Sell / End\\n                if (i > 0 && j > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n                } else if (i > 0 && j > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n                } else if (i > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n                } else if (j > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n                } else {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], stockPrices[k] - stockPrices[j]);\\n                }\\n            }\\n        }\\n    }\\n    return highestProfit[maxTrades - 1][stockPrices.length - 1];\\n}\\n\\n//SMALLEST TRIANGLE SUM\\n\\nfunction solveTriangleSum(arrayData, ns) {\\n    let triangle = arrayData;\\n    let nextArray;\\n    let previousArray = triangle[0];\\n\\n    for (let i = 1; i < triangle.length; i++) {\\n        nextArray = [];\\n        for (let j = 0; j < triangle[i].length; j++) {\\n            if (j == 0) {\\n                nextArray.push(previousArray[j] + triangle[i][j]);\\n            } else if (j == triangle[i].length - 1) {\\n                nextArray.push(previousArray[j - 1] + triangle[i][j]);\\n            } else {\\n                nextArray.push(Math.min(previousArray[j], previousArray[j - 1]) + triangle[i][j]);\\n            }\\n\\n        }\\n\\n        previousArray = nextArray;\\n    }\\n\\n    return Math.min.apply(null, nextArray);\\n}\\n\\n//UNIQUE PATHS IN A GRID\\n\\nfunction uniquePathsI(grid) {\\n    const rightMoves = grid[0] - 1;\\n    const downMoves = grid[1] - 1;\\n\\n    return Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / (factorial(downMoves)));\\n}\\n\\nfunction factorial(n) {\\n    return factorialDivision(n, 1);\\n}\\n\\nfunction factorialDivision(n, d) {\\n    if (n == 0 || n == 1 || n == d)\\n        return 1;\\n    return factorialDivision(n - 1, d) * n;\\n}\\n\\nfunction uniquePathsII(grid, ignoreFirst = false, ignoreLast = false) {\\n    const rightMoves = grid[0].length - 1;\\n    const downMoves = grid.length - 1;\\n\\n    let totalPossiblePaths = Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / (factorial(downMoves)));\\n\\n    for (let i = 0; i < grid.length; i++) {\\n        for (let j = 0; j < grid[i].length; j++) {\\n\\n            if (grid[i][j] == 1 && (!ignoreFirst || (i != 0 || j != 0)) && (!ignoreLast || (i != grid.length - 1 || j != grid[i].length - 1))) {\\n                const newArray = [];\\n                for (let k = i; k < grid.length; k++) {\\n                    newArray.push(grid[k].slice(j, grid[i].length));\\n                }\\n\\n                let removedPaths = uniquePathsII(newArray, true, ignoreLast);\\n                removedPaths *= uniquePathsI([i + 1, j + 1]);\\n\\n                totalPossiblePaths -= removedPaths;\\n            }\\n        }\\n\\n    }\\n\\n    return totalPossiblePaths;\\n}\\n\\n//GENERATE IP ADDRESSES\\n\\nfunction generateIps(num) {\\n    num = num.toString();\\n\\n    const length = num.length;\\n\\n    const ips = [];\\n\\n    for (let i = 1; i < length - 2; i++) {\\n        for (let j = i + 1; j < length - 1; j++) {\\n            for (let k = j + 1; k < length; k++) {\\n                const ip = [\\n                    num.slice(0, i),\\n                    num.slice(i, j),\\n                    num.slice(j, k),\\n                    num.slice(k, num.length)\\n                ];\\n                let isValid = true;\\n\\n                ip.forEach(seg => {\\n                    isValid = isValid && isValidIpSegment(seg);\\n                });\\n\\n                if (isValid) ips.push(ip.join(\\\".\\\"));\\n\\n            }\\n\\n        }\\n    }\\n\\n    return ips;\\n\\n}\\n\\nfunction isValidIpSegment(segment) {\\n    if (segment[0] == \\\"0\\\" && segment != \\\"0\\\") return false;\\n    segment = Number(segment);\\n    if (segment < 0 || segment > 255) return false;\\n    return true;\\n}\\n\\n//GREATEST FACTOR\\n\\nfunction factor(num) {\\n    for (let div = 2; div <= Math.sqrt(num); div++) {\\n        if (num % div != 0) {\\n            continue;\\n        }\\n        num = num / div;\\n        div = 1;\\n    }\\n    return num;\\n}\\n\\n//SPIRALIZE Matrix\\n\\nfunction spiral(arr, accum = []) {\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(arr.shift());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(column(arr, arr[0].length - 1));\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(arr.pop().reverse());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(column(arr, 0).reverse());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    return spiral(arr, accum);\\n}\\n\\nfunction column(arr, index) {\\n    const res = [];\\n    for (let i = 0; i < arr.length; i++) {\\n        const elm = arr[i].splice(index, 1)[0];\\n        if (elm) {\\n            res.push(elm);\\n        }\\n    }\\n    return res;\\n}\\n\\n// Merge Overlapping Intervals\\n\\nfunction mergeOverlap(intervals) {\\n    intervals.sort(([minA], [minB]) => minA - minB);\\n    for (let i = 0; i < intervals.length; i++) {\\n        for (let j = i + 1; j < intervals.length; j++) {\\n            const [min, max] = intervals[i];\\n            const [laterMin, laterMax] = intervals[j];\\n            if (laterMin <= max) {\\n                const newMax = laterMax > max ? laterMax : max;\\n                const newInterval = [min, newMax];\\n                intervals[i] = newInterval;\\n                intervals.splice(j, 1);\\n                j = i;\\n            }\\n        }\\n    }\\n    return intervals;\\n}\\n\\n// Subarray with Maximum Sum\\n\\nfunction subArrays(arr, start, end, acc) {\\n    // Stop if we have reached the end of the array    \\n    if (end === arr.length)\\n        return acc;\\n    // Increment the end point and start from 0\\n    else if (start > end)\\n        subArrays(arr, 0, end + 1, acc);\\n    // create the subarray\\n    else {\\n        let subArr = [];\\n        for (let i = start; i < end; i++) {\\n            subArr.push(arr[i]);\\n        }\\n        subArr.push(arr[end]);\\n        acc.push(subArr);\\n\\n        subArrays(arr, start + 1, end, acc);\\n    }\\n    return acc;\\n}\\n\\nfunction subArrayMaxSum(arr) {\\n    arr = arr || [-6, 4, 1, 8, 10, -6];\\n    const arrays = subArrays(arr, 0, 0, []);\\n    const sums = arrays.map(o => o.reduce((a, b) => a + b, 0));\\n    return Math.max(...sums);\\n}\\n\\nfunction arrayJump(arr) {\\n    let n = arr.length;\\n    let jumps = Array.from({ length: n }, (_, i) => 0);\\n    let min;\\n    jumps[n - 1] = 0;\\n    for (let i = n - 2; i >= 0; i--) {\\n        if (arr[i] == 0)\\n            jumps[i] = Number.MAX_VALUE;\\n        else if (arr[i] >= n - i - 1)\\n            jumps[i] = 1;\\n        else {\\n            min = Number.MAX_VALUE;\\n            for (let j = i + 1; j < n && j <= arr[i] + i; j++) {\\n                if (min > jumps[j])\\n                    min = jumps[j];\\n            }\\n            if (min != Number.MAX_VALUE)\\n                jumps[i] = min + 1;\\n            else\\n                jumps[i] = min;\\n        }\\n    }\\n    return jumps[0] < Number.MAX_VALUE ? 1 : 0;\\n}\\n\\n// works for simple answers locks up a browser for large ones\\nfunction allExpressions(data) {\\n    const digits = data[0].split('')\\n    const operators = ['+', '-', '*', '']\\n    let expressions = [digits[0], '-' + digits[0]]\\n        .flatMap(d => operators.map(op => d + op))\\n    for (let i = 1; i < digits.length - 1; i++) {\\n        expressions = expressions\\n            .flatMap(e => operators.map(op => e + digits[i] + op))\\n    }\\n    return expressions.map(e => e + digits[digits.length - 1])\\n        .filter(e => {\\n            try { return eval(e) === data[1] }\\n            catch (e) { return false }\\n        })\\n}\\n\\n// Sanitize Parentheses in Expression\\n\\nfunction sanitizeParentheses(data) {\\n    const solution = Sanitize(data);\\n    if (solution == null) { return ('[\\\"\\\"]') }\\n    else { return (\\\"[\\\" + solution.join(\\\",\\\") + \\\"]\\\") }\\n}\\n\\nfunction Sanitize_removeOneParth(item) {\\n    const possibleAnswers = [];\\n    for (let i = 0; i < item.length; i++) {\\n        if (item[i].toLowerCase().indexOf(\\\"(\\\") === -1 && item[i].toLowerCase().indexOf(\\\")\\\") === -1) {\\n            continue\\n        }\\n        let possible = item.substring(0, i) + item.substring(i + 1);\\n        possibleAnswers.push(possible)\\n    }\\n    return possibleAnswers\\n}\\n\\nfunction Sanitize_isValid(item) {\\n    let unclosed = 0;\\n    for (let i = 0; i < item.length; i++) {\\n        if (item[i] == \\\"(\\\") { unclosed++ }\\n        else if (item[i] == \\\")\\\") { unclosed-- }\\n        if (unclosed < 0) { return false }\\n    }\\n    return unclosed == 0\\n}\\n\\nfunction Sanitize(data) {\\n    let currentPossible = [data];\\n    for (let i = 0; i < currentPossible.length; i++) {\\n        let newPossible = new Set();\\n        for (var j = 0; j < currentPossible.length; j++) {\\n            let newRemovedPossible = Sanitize_removeOneParth(currentPossible[j])\\n\\n            for (let item of newRemovedPossible) {\\n                newPossible.add(item)\\n            }\\n        }\\n\\n        const validBoolList = [];\\n\\n        for (let item of newPossible) {\\n            validBoolList.push(Sanitize_isValid(item))\\n        }\\n        if (validBoolList.includes(true)) {\\n            let finalList = [];\\n            newPossible = [...newPossible]\\n\\n            for (var j = 0; j < validBoolList.length; j++) {\\n                if (validBoolList[j]) {\\n                    finalList.push(newPossible[j])\\n                }\\n            }\\n\\n            finalList = new Set(finalList)\\n\\n            return [...finalList]\\n        }\\n        currentPossible = [...newPossible]\\n    }\\n\\n    return null\\n}\\n\\nfunction totalWayToSum(data) {\\n    let cache = {};\\n    let n = data;\\n    return twts(n, n, cache) - 1;\\n}\\n\\nfunction twts(limit, n, cache) {\\n    if (n < 1) { return 1; }\\n    if (limit == 1) { return 1; }\\n    if (n < limit) { return twts(n, n, cache); }\\n\\n    if (n in cache) {\\n        let c = cache[n];\\n        if (limit in c) { return c[limit]; }\\n    }\\n\\n    let s = 0;\\n    for (let i = 1; i <= limit; i++) {\\n        s += twts(i, n - i, cache);\\n    }\\n\\n    if (!(n in cache)) { cache[n] = {}; }\\n    cache[n][limit] = s; return s;\\n}\\n\\n/**\\n *\\n * @param {number[][]} input [targetNumber,[available numbers]]\\n * @returns\\n */\\nasync function solveWaysToSumII(input) {\\n    /**\\n     *\\n     * @param {number} target\\n     * @param {number[]} nums\\n     * @returns\\n     */\\n    let n = input[0];\\n    let nums = input[1];\\n    let table = new Array(n + 1);\\n    for (let i = 0; i < n + 1; i++) {\\n        table[i] = 0;\\n    }\\n    table[0] = 1;\\n\\n    for (let i of nums) {\\n        if (i >= n) {\\n            continue;\\n        }\\n        for (let j = i; j <= n; j++) {\\n            table[j] += table[j - i];\\n        }\\n        // console.log(table);\\n    }\\n    return table[n];\\n}\\n\\nfunction hammingEncode(data) {\\n    let N = Math.floor(Math.log2(data));\\n    let vec = Array.from({ length: N + 1 }, (_, i) => Math.floor(data / 2 ** (N - i)) % 2);\\n\\n    let masks = [\\n        /*012345678901234567890123456789012345678901234567890123456*/\\n        \\\"111111111111111111111111111111111111111111111111111111111\\\",\\n        \\\"110110101011010101010101011010101010101010101010101010101\\\",\\n        \\\"101101100110110011001100110110011001100110011001100110011\\\",\\n        \\\"011100011110001111000011110001111000011110000111100001111\\\",\\n        \\\"000011111110000000111111110000000111111110000000011111111\\\",\\n        \\\"000000000001111111111111110000000000000001111111111111111\\\",\\n        \\\"000000000000000000000000001111111111111111111111111111111\\\"\\n    ].map(x => x.split(\\\"\\\").map(y => Number(y)));\\n\\n    function hadamard(x, y) {\\n        return Array.from({ length: Math.min(x.length, y.length) }, (_, i) => x[i] * y[i]);\\n    }\\n    let parities = masks.map(mask => hadamard(mask, vec).reduce((a, n) => a + n) % 2);\\n\\n    for (let i = 1; i < parities.length; ++i) { parities[0] += parities[i]; }\\n    parities[0] %= 2;\\n\\n    /*01234567890123456789012345678901234567890123456789012345678901234*/\\n    let p_bit = \\\"11101000100000001000000000000000100000000000000000000000000000001\\\";\\n\\n    let output = [];\\n    for (let i = 0, p = 0, d = 0; d < vec.length; ++i) {\\n        if (p_bit[i] === \\\"1\\\") {\\n            output.push(parities[p++]);\\n        } else {\\n            output.push(vec[d++]);\\n        }\\n    }\\n\\n    return output.join(\\\"\\\");\\n}\\n\\n\\nfunction arrayJumpingGameII(arrayData) {\\n    let n = arrayData.length;\\n    let reach = 0;\\n    let jumps = 0;\\n    let lastJump = -1;\\n    while (reach < n - 1) {\\n        let jumpedFrom = -1;\\n        for (let i = reach; i > lastJump; i--) {\\n            if (i + arrayData[i] > reach) {\\n                reach = i + arrayData[i];\\n                jumpedFrom = i;\\n            }\\n        }\\n        if (jumpedFrom === -1) {\\n            jumps = 0;\\n            break;\\n        }\\n        lastJump = jumpedFrom;\\n        jumps++;\\n    }\\n    return jumps\\n}\\n\\n\\nfunction shortestPathInAGrid(data) {\\n    let H = data.length, W = data[0].length;\\n    let dist = Array.from(Array(H), () => Array(W).fill(Number.POSITIVE_INFINITY));\\n    dist[0][0] = 0;\\n\\n    let queue = [[0, 0]];\\n    while (queue.length > 0) {\\n        let [i, j] = queue.shift();\\n        let d = dist[i][j];\\n\\n        if (i > 0     && d + 1 < dist[i - 1][j] && data[i - 1][j] !== 1)\\n        { dist[i - 1][j] = d + 1; queue.push([i - 1, j]); }\\n        if (i < H - 1 && d + 1 < dist[i + 1][j] && data[i + 1][j] !== 1)\\n        { dist[i + 1][j] = d + 1; queue.push([i + 1, j]); }\\n        if (j > 0     && d + 1 < dist[i][j - 1] && data[i][j - 1] !== 1)\\n        { dist[i][j - 1] = d + 1; queue.push([i, j - 1]); }\\n        if (j < W - 1 && d + 1 < dist[i][j + 1] && data[i][j + 1] !== 1)\\n        { dist[i][j + 1] = d + 1; queue.push([i, j + 1]); }\\n    }\\n\\n    let path = \\\"\\\";\\n    if (Number.isFinite(dist[H - 1][W - 1])) {\\n        let i = H - 1, j = W - 1;\\n        while (i !== 0 || j !== 0) {\\n            let d = dist[i][j];\\n\\n            let new_i = 0, new_j = 0, dir = \\\"\\\";\\n            if (i > 0     && dist[i - 1][j] < d)\\n            { d = dist[i - 1][j]; new_i = i - 1; new_j = j; dir = \\\"D\\\"; }\\n            if (i < H - 1 && dist[i + 1][j] < d)\\n            { d = dist[i + 1][j]; new_i = i + 1; new_j = j; dir = \\\"U\\\"; }\\n            if (j > 0     && dist[i][j - 1] < d)\\n            { d = dist[i][j - 1]; new_i = i; new_j = j - 1; dir = \\\"R\\\"; }\\n            if (j < W - 1 && dist[i][j + 1] < d)\\n            { d = dist[i][j + 1]; new_i = i; new_j = j + 1; dir = \\\"L\\\"; }\\n\\n            i = new_i; j = new_j;\\n            path = dir + path;\\n        }\\n    }\\n\\n    return path;\\n}\\n\\nfunction hammingDecode(_data) {\\n    let _build = _data.split(\\\"\\\"); // ye, an array again\\n    let _testArray = []; //for the \\\"tests\\\". if any is false, it is been altered data, will check and fix it later\\n    let _sum_parity = Math.ceil(Math.log2(_data.length)); // excluding first bit\\n    let count = (arr, val) => arr.reduce((a, v) => (v === val ? a + 1 : a), 0); // count.... again ;)\\n    let _overallParity = _build.splice(0, 1).join(\\\"\\\"); // remove first index, for checking and to use the _build properly later\\n    _testArray.push((_overallParity === (count(_build, \\\"1\\\") % 2).toString())); // checking the \\\"overall\\\" parity\\n    for (var i = 0; i < _sum_parity; i++) {\\n        let _tempIndex = Math.pow(2, i) - 1 // get the parityBits Index\\n        let _tempStep = _tempIndex + 1 // set the stepsize\\n        let _tempData = [..._build] // \\\"copy\\\" the build-data\\n        let _tempArray = [] // init empty array for \\\"testing\\\"\\n        while (_tempData[_tempIndex] !== undefined) { // extract from the copied data until the \\\"starting\\\" index is undefined\\n            var _temp = [..._tempData.splice(_tempIndex, _tempStep * 2)] // extract 2*stepsize\\n            _tempArray.push(..._temp.splice(0, _tempStep)) // and cut again for keeping first half\\n        }\\n        let _tempParity = _tempArray.shift() // and cut the first index for checking with the rest of the data\\n        _testArray.push(((_tempParity === (count(_tempArray, \\\"1\\\") % 2).toString()))) // is the _tempParity the calculated data?\\n    }\\n    let _fixIndex = 0; // init the \\\"fixing\\\" index amd start with -1, bc we already removed the first bit\\n    for (let i = 1; i < _sum_parity + 1; i++) {\\n        _fixIndex += (_testArray[i]) ? 0 : (Math.pow(2, i) / 2)\\n    }\\n    _build.unshift(_overallParity)\\n    // fix the actual hammingcode if there is an error\\n    if (_fixIndex > 0 && _testArray[0] === false) { // if the overall is false and the sum of calculated values is greater equal 0, fix the corresponding hamming-bit\\n        _build[_fixIndex] = (_build[_fixIndex] === \\\"0\\\") ? \\\"1\\\" : \\\"0\\\"\\n    }\\n    else if (_testArray[0] === false) { // otherwise, if the the overall_parity is only wrong, fix that one\\n        _overallParity = (_overallParity === \\\"0\\\") ? \\\"1\\\" : \\\"0\\\"\\n    }\\n    else if (_testArray[0] === true && _testArray.some((truth) => truth === false)) {\\n        return 0 // uhm, there's some strange going on... 2 bits are altered? How?\\n    }\\n    // oof.. halfway through... we fixed the altered bit, now \\\"extract\\\" the parity from the build and parse the binary data\\n    for (let i = _sum_parity; i >= 0; i--) { // start from the last parity down the starting one\\n        _build.splice(Math.pow(2, i), 1)\\n    }\\n    _build.splice(0, 1)\\n    return parseInt(_build.join(\\\"\\\"), 2)\\n}\",\"filename\":\"autosolver.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/2c202281-dab5-466c-a1b3-276124ab7cbd\",\"moduleSequenceNumber\":28949},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/68890948-de0c-4597-8842-55f07351eb1c\",\"moduleSequenceNumber\":28932},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/e71c7e85-787a-4102-a9c0-baefe36692d1\",\"moduleSequenceNumber\":28933},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/1b5d5a8e-810c-4866-87f4-6916e81d24e5\",\"moduleSequenceNumber\":28932},{\"filename\":\"autosolver.js\",\"url\":\"blob:https://danielyxie.github.io/c475074f-e53d-48a2-b048-1bba4501230d\",\"moduleSequenceNumber\":31987}],\"dependents\":[],\"ramUsage\":22.5,\"server\":\"home\",\"moduleSequenceNumber\":31987,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as asciichart from 'asciichart.js';\\nimport { ramUsage } from 'utils.js'\\n//store here to be a bit more persisten to script restarts\\nconst series = { 'ramUsage': new Array(53).fill(0) };\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const flags = ns.flags([\\n        ['refreshrate', 5000],\\n        ['help', false],\\n    ])\\n    if (flags.help) {\\n        ns.tprint(\\\"This script plots a chart of ram use\\\");\\n        ns.tprint(`USAGE: run ${ns.getScriptName()}`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\n        return;\\n    }\\n    ns.tail();\\n    ns.disableLog('ALL');\\n    const padding = '    ';\\n    const config = {\\n        offset: 2,    // axis offset from the left (min 2)\\n        padding, // padding string for label formatting (can be overridden)\\n        height: 10,   // any height you want\\n        max: 1.0,\\n        min: 0.0,\\n        // the label format function applies default padding\\n        format: function (x, i) { return (padding + ns.nFormat(x, '0%')).slice(-padding.length) }\\n    };\\n    ns.print(JSON.stringify(Object.values(series), null, 2));\\n    while (true) {\\n        ns.clearLog();\\n        ns.print(`Interval ${ns.tFormat(flags.refreshrate)}`);\\n        const target = 'ramUsage';\\n        series[target].push(ramUsage(ns));\\n        series[target].shift();\\n        ns.print(target);\\n        ns.print(`${asciichart.plot(series[target], config)}`);\\n        await ns.sleep(flags.refreshrate);\\n    }\\n}\",\"filename\":\"chart_ram.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/83fa09fe-32bd-4d59-8717-ac94540e4c08\",\"moduleSequenceNumber\":284738},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/826c67e6-7819-4ab8-8249-f79d6f3a27d5\",\"moduleSequenceNumber\":336741},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/f117f58d-43a7-46f3-9777-dab0feada846\",\"moduleSequenceNumber\":393316},{\"filename\":\"asciichart.js\",\"url\":\"blob:https://danielyxie.github.io/254076b6-d233-4a9c-9b8d-42cd2ae58775\",\"moduleSequenceNumber\":284731},{\"filename\":\"chart_ram.js\",\"url\":\"blob:https://danielyxie.github.io/92a5a2a2-a9c2-4f97-9d21-7b291d9d1707\",\"moduleSequenceNumber\":547735}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"home\",\"moduleSequenceNumber\":28947,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { boxTailSingleton } from \\\"utils.js\\\"\\nlet ns;\\n\\nlet gang = {};\\nlet members = [];\\nlet tasks = [];\\nlet maxOtherGangPower;\\nlet chanceVsOtherGang;\\nlet warTracker;\\nlet isEarlyGang = true;\\nlet needMoreMembers = true;\\nconst memberNames = [\\n  'Teal', 'Fawn', 'TFT',\\n  'Turduck\\\\'n', 'Fender', 'Just Moe',\\n  'Mixer', 'Hip', 'Brownstone',\\n  'Sal', 'Right Hand', 'Left Shark'\\n];\\nconst combatAugmentPriorityOrder = ['Bionic Arms', 'Nanofiber Weave', 'Bionic Spine', 'Synfibril Muscle', 'BrachiBlades', 'Synthetic Heart', 'Graphene Bone Lacings'];\\nconst gangumStatus = {};\\n/** @param {NS} pns **/\\nexport async function main(pns) {\\n  ns = pns;\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('gang.purchaseEquipment');\\n  ns.disableLog('gang.setMemberTask');\\n  ns.disableLog('sleep');\\n  ns.disableLog('gang.setTerritoryWarfare');\\n  ns.disableLog('gang.canRecruitMember');\\n  if (!ns.fileExists('/tmp/ingang.txt')) {\\n    ns.print('not in gang');\\n    return;\\n  }\\n  boxTailSingleton(ns, 'gangum', '\\\\u270A', '220px');\\n  ns.clearLog();\\n\\n  warTracker = {\\n    prevPower: -1,\\n    lastPowerChange: Date.now(),\\n    nextTick: -1\\n  };\\n  const moneyTask = (g, m, t) => isEarlyGang && m.str < 10000 ? ns.formulas.gang.moneyGain(g, m, t) : (t.name === 'Traffick Illegal Arms' ? 1 : 0);\\n  const respectTask = ns.formulas.gang.respectGain;\\n  const wantedTask = (g, m, t) => -1 * ns.formulas.gang.wantedLevelGain(g, m, t);\\n  const warTask = (g, m, t) => t.name === 'Territory Warfare' ? 100 : 0;\\n  isEarlyGang = true;\\n  while (true) {\\n    gang = ns.gang.getGangInformation();\\n    const og = ns.gang.getOtherGangInformation();\\n    // seem like there are rounding errors on territory percent so always consider max of all gangs power\\n    // maxOtherGangPower = Math.max(...Object.entries(og).map(([k, s]) => (k === gang.faction ? 0 : (s.territory <= 0 ? 0 : s.power))));\\n    maxOtherGangPower = Math.max(...Object.entries(og).map(([k, s]) => (k === gang.faction ? 0 : s.power)));\\n    const chanceVsOtherGangs = Object.entries(ns.gang.getOtherGangInformation())\\n      .filter(([k, s]) => k !== gang.faction && s.territory > 0)\\n      .map(([k, s]) => ns.gang.getChanceToWinClash(k));\\n    chanceVsOtherGang = chanceVsOtherGangs.reduce((a, b) => a + b, 0) / chanceVsOtherGangs.length\\n    isEarlyGang = gang.respect < 3.2e6\\n    needMoreMembers = gang.respect < 3125; // 15625;//1.6e6;\\n    const curMembers = ns.gang.getMemberNames();\\n    const newMemberNames = memberNames.filter(o => !curMembers.includes(o));\\n    if (ns.gang.canRecruitMember() && ns.gang.recruitMember(newMemberNames[0])) {\\n      ns.toast('Recruited', 'info', 10000);\\n    }\\n\\n    getMembersStats();\\n    getTasksStats();\\n    equip();\\n    ascend();\\n    war();\\n    let [makeWar, makeWarMsg] = isWartime();\\n    gangumStatus['isWartime'.padEnd(10)] = `${makeWar} ${(gang.territory * 100).toFixed(3)}%`\\n    gangumStatus.makeWarMsg = makeWarMsg || gangumStatus.makeWarMsg;\\n    if (makeWar) {\\n      setTasks(warTask);\\n    } else if (needMoreMembers) {\\n      setTasks(respectTask);\\n    } else {\\n      setTasks(moneyTask);\\n    }\\n\\n    ns.clearLog();\\n    for (let [k, v] of Object.entries(gangumStatus)) {\\n      ns.print(`${k}: ${v}`);\\n    }\\n    await ns.sleep(100);\\n  }\\n}\\n\\nfunction isWartime() {\\n  // no need for war any more\\n  if (gang.territory === 1) {\\n    warTracker.nextTick = Date.now();\\n    return [false, 'Territory maxed No more war'];\\n  }\\n  // too powerful don't get more power\\n  if (maxOtherGangPower * 1.5 < gang.power) {\\n    warTracker.nextTick = Date.now();\\n    return [false, 'Power higher enough no more warfare'];\\n  }\\n  if (warTracker.prevPower === -1) {\\n    warTracker.prevPower = gang.power;\\n  }\\n  let warningMsg = '';\\n  const isBonusTime = ns.gang.getBonusTime() >= 10;\\n  if (warTracker.prevPower !== gang.power) {\\n    warTracker.prevPower = gang.power;\\n    warTracker.lastPowerChange = Date.now();\\n    warTracker.nextTick = warTracker.lastPowerChange + (isBonusTime ? 1.6 : 20) * 1000;\\n    const hour = `${new Date().getHours()}`\\n    const min = `${new Date().getMinutes()}`;\\n    const sec = `${new Date().getSeconds()}`;\\n    warningMsg += `PowerTick ${hour}:${min.padStart(2, '0')}:${sec.padStart(2, '0')} clash ${(chanceVsOtherGang * 100).toPrecision(2)}%`;\\n  }\\n  if (warTracker.nextTick === -1) {\\n    return [false, `waiting for tick`];\\n  }\\n  if (warTracker.prevPower === gang.power) {\\n    if (warTracker.nextTick > Date.now()) {\\n      // waiting for next tick\\n    } else {\\n      // tick was early\\n      warningMsg += `war tick was early by ${Date.now() - warTracker.nextTick}`;\\n      warTracker.nextTick = -1;\\n    }\\n  }\\n  let timeTillTick = warTracker.nextTick - Date.now();\\n  // if before war tick and until just past the tick. Power tick will update nextTick to stop war time\\n  if (-2000 < timeTillTick && timeTillTick < 300) {\\n    //WarTime!\\n    warningMsg += `Wartime remaining ${timeTillTick}`;\\n    return [true, warningMsg];\\n  } else {\\n    return [false, warningMsg];\\n  }\\n}\\n\\nfunction war() {\\n  // if gang power is at max try to continue war for more territory\\n  const enableWar = (chanceVsOtherGang > .6) || (maxOtherGangPower * 1.5 <= gang.power);\\n  if (gang.territoryWarfareEngaged !== enableWar) {\\n    // ns.print(`Changing warfare to ${enableWar}`);\\n    ns.toast(`Changing warfare to ${enableWar}`, enableWar ? 'warning' : 'info', 30000);\\n  }\\n  // ns.print(`maxOtherGangPower ${maxOtherGangPower} strongerGangs ${strongerGangs} gang.power ${gang.power} gang.territoryWarfareEngaged ${gang.territoryWarfareEngaged}`)\\n  ns.gang.setTerritoryWarfare(enableWar);\\n}\\n\\nfunction equip() {\\n  const nameStatsMap = {};\\n  let equipmentNames = ns.gang.getEquipmentNames();\\n  for (const equipName of equipmentNames) {\\n    nameStatsMap[equipName] = ns.gang.getEquipmentStats(equipName);\\n  }\\n  const combatGear = Object.entries(nameStatsMap).filter(([e, stats]) => stats.str || stats.def || stats.cha);\\n  for (const [equipName] of combatGear) {\\n    for (const member of members) {\\n      const augsAndUpgrades = [];\\n      augsAndUpgrades.push(...member.augmentations);\\n      augsAndUpgrades.push(...member.upgrades);\\n      if (augsAndUpgrades.includes(equipName)) {\\n        continue;\\n      }\\n      if (ns.gang.purchaseEquipment(member.name, equipName)) {\\n        // ns.print(`Purchased ${equipName} for ${member.name}`);\\n        gangumStatus[member.name.padEnd(10)] += ' ' + equipName;\\n        if (combatAugmentPriorityOrder.includes(equipName)) {\\n          ns.toast(`Purchased ${equipName} for ${member.name}`, 'success', 10000);\\n        }\\n        // restrict soft reset loop to do so only for the augs\\n        // } else if (combatAugmentPriorityOrder.includes(equipName)) {\\n      } else if (!augsAndUpgrades.includes(equipName)) {\\n        if (ns.getServerMoneyAvailable('home') < ns.gang.getEquipmentCost(equipName) && ns.gang.getEquipmentCost(equipName) < 10e9) {\\n          ns.print(`Resetting to buy ${equipName} for ${member.name}`);\\n          ns.softReset('bootstrap32GB.js');\\n        }\\n\\n      }\\n    }\\n  }\\n}\\n\\nfunction ascend() {\\n  for (const member of members) {\\n    const res = ns.gang.getAscensionResult(member.name);\\n    if (!res) continue;\\n    let str_mult = 1.6;\\n    if (!isEarlyGang) {\\n      str_mult = 1.1;\\n    }\\n    if (res.str > str_mult) {\\n      ns.gang.ascendMember(member.name);\\n      const msg = `Ascended ${member.name} asc_multi ${member.str_asc_mult.toPrecision(4)}, res_multi ${res.str.toPrecision(4)}`\\n      ns.toast(msg, 'info', 30000);\\n    }\\n  }\\n}\\n\\nfunction getMembersStats() {\\n  members = [];\\n  const names = ns.gang.getMemberNames();\\n  for (const name of names) {\\n    members.push(ns.gang.getMemberInformation(name));\\n  }\\n}\\n\\nfunction getTasksStats() {\\n  tasks = [];\\n  const names = ns.gang.getTaskNames();\\n  for (const name of names) {\\n    tasks.push(ns.gang.getTaskStats(name));\\n  }\\n}\\n\\nlet vigilantesNeeded = 0;\\n\\nfunction setTasks(taskFunc) {\\n  let vigilante = 0;\\n  if (ns.formulas.gang.wantedPenalty(gang) < 0.99 && gang.wantedLevel > 2) {\\n    vigilantesNeeded = (vigilantesNeeded * 1.5) || .15;\\n    vigilante = Math.floor(members.length * vigilantesNeeded);\\n    vigilantesNeeded = vigilante >= members.length ? members.length : vigilantesNeeded;\\n  } else {\\n    vigilantesNeeded = 0;\\n  }\\n  let i = 0;\\n  for (const member of members) {\\n    i++;\\n    let prevTask = member.task;\\n    let bestTask = '';\\n    let mg = 0;\\n    for (const task of tasks) {\\n      let nmg = taskFunc(gang, member, task);\\n      if (nmg > mg) {\\n        bestTask = task.name;\\n        mg = nmg;\\n      }\\n    }\\n    // if nothing or unassigned train\\n    if (bestTask === '' || bestTask === 'Unassigned') {\\n      bestTask = gang.isHacking ? 'Train Hacking' : 'Train Combat';\\n    }\\n    if (bestTask !== 'Territory Warfare' && vigilantesNeeded !== 0 && members.length - i < vigilante) {\\n      bestTask = 'Vigilante Justice';\\n    }\\n    // if waiting for a power tick\\n    if (warTracker.nextTick === -1) {\\n      bestTask = 'Territory Warfare';\\n    }\\n    if (ns.gang.setMemberTask(member.name, bestTask) && prevTask !== bestTask) {\\n      gangumStatus[member.name.padEnd(10)] = bestTask;\\n    }\\n  }\\n}\",\"filename\":\"gangum.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/abb9475c-9c38-4038-8661-aa284bca4b82\",\"moduleSequenceNumber\":28949},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/951dc614-ded2-47ae-9222-7117e3e3505f\",\"moduleSequenceNumber\":28932},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/a9a16509-4e5a-45d2-af2f-27605a789250\",\"moduleSequenceNumber\":28933},{\"filename\":\"gangum.js\",\"url\":\"blob:https://danielyxie.github.io/303db713-b43b-4f4e-ba0d-9a9e3bb42924\",\"moduleSequenceNumber\":29020}],\"dependents\":[],\"ramUsage\":42.3,\"server\":\"home\",\"moduleSequenceNumber\":29020,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getOtherGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getChanceToWinClash\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.canRecruitMember\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.recruitMember\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.setTerritoryWarfare\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentStats\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.softReset\",\"cost\":5},{\"type\":\"fn\",\"name\":\"gang.getAscensionResult\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getTaskNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getTaskStats\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let css=`body{--prilt:#fd0;--pri:#fd0;--pridk:#fd0;--successlt:#ce5;--success:#ce5;--successdk:#ce5;--errlt:#c04;--err:#c04;--errdk:#c04;--seclt:#28c;--sec:#28c;--secdk:#28c;--warnlt:#f70;--warn:#f70;--warndk:#f70;--infolt:#3ef;--info:#3ef;--infodk:#3ef;--welllt:#146;--well:#222;--white:#fff;--black:#000;--hp:#c04;--money:#fc7;--hack:#ce5;--combat:#f70;--cha:#b8f;--int:#3ef;--rep:#b8f;--disabled:#888;--bgpri:#000;--bgsec:#111;--button:#146;--ff:\\\"Lucida Console\\\";overflow:hidden;display:flex}#root{flex:1 1 calc(100vw - 248px);overflow:scroll}.sb{font:12px var(--ff);color:var(--pri);background:var(--bgsec);overflow:hidden scroll;width:500px;min-height:100%;border-left:1px solid var(--welllt)}.sb *{vertical-align:middle;margin:0;font:inherit}.sb.c{width:45px}.sb.t, .sb.t>div{transition:height 200ms, width 200ms, color 200ms}.sbitem,.box{overflow:hidden;min-height:28px}.sbitem{border-top:1px solid var(--welllt);resize:vertical;width:unset !important}.sbitem.c{color:var(--sec)}.box{position:fixed;width:min-content;min-width:min-content;resize:both;background:var(--bgsec)}.box.c{height:unset !important;width:unset !important;background:none}.head{font-size:14px;display:flex;white-space:pre;font-weight:bold;user-select:none}:is(.sb,.sbitem)>.head{direction:rtl;cursor:pointer;padding:3px 0px}.box>.head{background:var(--pri);color:var(--bgpri);padding:3px;cursor:move}.body{font-size:12px;flex-direction:column;height:calc(100% - 30px)}.flex,:not(.noflex)>.body{display:flex}.flex>*,.body>*{flex:1 1 auto}.box>.body{border:1px solid var(--welllt)}.sb .title{margin:0 auto}.sbitem .close{display:none}.c:not(.sb),.c>.sbitem{height:28px !important;resize:none}.box.c>.body{display:none}.box.prompt{box-shadow:0 0 0 10000px #0007;min-width:400px}.box.prompt>.head>.icon{display:none}.sb .contextMenu{opacity:0.95;resize:none;background:var(--bgpri)}.sb .contextMenu .head{display:none}.sb .contextMenu .body{height:unset;border-radius:5px}.sb .icon{cursor:pointer;font:25px \\\"codicon\\\";line-height:0.9}:is(.sb,.sbitem)>.head>.icon{padding:0px 10px}.c>.head>.collapser{transform:rotate(180deg)}.sb :is(input,select,button,textarea){color:var(--pri);outline:none;border:none;white-space:pre}.sb :is(textarea,.log){white-space:pre-wrap;background:none;padding:0px;overflow-y:scroll}.sb :is(input,select){padding:3px;background:var(--well);border-bottom:1px solid var(--prilt);transition:border-bottom 250ms}.sb input:hover{border-bottom:1px solid var(--black)}.sb input:focus{border-bottom:1px solid var(--prilt)}.sb :is(button,input[type=checkbox]){background:var(--button);transition:background 250ms;border:1px solid var(--well)}.sb :is(button,input[type=checkbox]):hover{background:var(--bgsec)}.sb :is(button,input[type=checkbox]):focus, .sb select{border:1px solid var(--sec)}.sb button{padding:3px 6px;user-select:none}.sb .ts{color:var(--infolt)}.sb input[type=checkbox]{appearance:none;display:inline-flex;align-items:center;justify-content:center;width:22px;height:22px}.sb input[type=checkbox]:checked::after{font:22px codicon;content:\\\"\\\"}.g2{display:grid;grid:auto-flow auto / auto auto;gap:6px;margin:5px;place-items:center}.g2>.l{justify-self:start}.g2>.r{justify-self:end}.g2>.f{grid-column:1 / span 2;text-align:center}.hidden, .tooltip{display:none}*:hover>.tooltip{display:block;position:absolute;left:-5px;bottom:calc(100% + 5px);border:1px solid var(--welllt);background:var(--bgsec);color:var(--pri);font:14px var(--ff);padding:5px;white-space:pre}.nogrow{flex:0 1 auto !important}`;\\nexport let win=globalThis, doc=win[\\\"document\\\"], sidebar=doc.querySelector(\\\".sb\\\"),\\n  ts=()=>`[<span class=ts>${new Date().toLocaleTimeString(\\\"en-gb\\\")}</span>]`,\\n  slp=ms=>new Promise(r=>setTimeout(r,ms)),\\n  elemFromHTML=html=>new Range().createContextualFragment(html).firstElementChild;\\nif (!sidebar){\\n  sidebar=doc.body.appendChild(elemFromHTML(`<div class=\\\"sb\\\"><style>${css}</style><div class=\\\"head\\\"><a class=\\\"icon collapser\\\">\\\\ueab6</a><span class=title>box.sidebar v1.0</span></div>`));\\n  sidebar.addEventListener('keydown',e=>e.stopPropagation());\\n  sidebar.querySelector('.head').addEventListener('click',()=>{\\n    transition(()=>sidebar.classList.toggle('c'));\\n    setTimeout(()=>doc.querySelector(\\\".monaco-editor\\\")&&Object.assign(doc.querySelector(\\\".monaco-editor\\\").style,{width:\\\"0px\\\"}),255);\\n  });\\n  win._boxEdgeDetect=()=>doc.querySelectorAll('.sb .box').forEach(box=>Object.assign(box.style,{left:Math.max(Math.min(win.innerWidth-box.offsetWidth,box.offsetLeft),0)+\\\"px\\\",top:Math.max(Math.min(win.innerHeight-box.offsetHeight,box.offsetTop),0)+\\\"px\\\"}));\\n  win.addEventListener(\\\"resize\\\",win._boxEdgeDetect);\\n}\\nlet createItem=(title, content, icon, ...classes)=>{\\n  let item=sidebar.appendChild(elemFromHTML(`<div class=\\\"${classes.join(\\\" \\\")}\\\"><div class=\\\"head\\\"><a class=\\\"icon\\\">${icon}</a><span class=title>${title}</span><a class=\\\"icon collapser\\\">\\\\ueab7</a><a class=\\\"icon close\\\">\\\\ueab8</a></div><div class=\\\"body\\\">${content}</div></div>`));\\n  Object.assign(item,{\\n    head:item.querySelector(\\\".head\\\"),\\n    body:item.querySelector(\\\".body\\\"),\\n    toggleType:()=>[\\\"box\\\",\\\"sbitem\\\"].forEach(cl=>item.classList.toggle(cl)),\\n    logTarget:item.querySelector(\\\".log\\\"),\\n    log:(html, timestamp=true)=>{\\n      if (!item.logTarget) item.logTarget=item.body.appendChild(elemFromHTML(\\\"<div class=log></div>\\\"));\\n      let logEntry=item.logTarget.appendChild(elemFromHTML(`<p>${timestamp?ts():\\\"\\\"} ${html}</p>`));\\n      item.logTarget.scrollTop=item.logTarget.scrollHeight;\\n      return logEntry;\\n    },\\n    contextItems:{},\\n    addContextItem:(name,fn,cFn=()=>1)=>item.contextItems[name]={fn:fn,cFn:cFn},\\n  });\\n\\n  [[\\\"Remove Item\\\",()=>item[\\\"remove\\\"]()],\\n  [\\\"Cancel\\\",()=>0],\\n  [\\\"Float to Top\\\",()=>sidebar.querySelector(\\\".head\\\").insertAdjacentElement(\\\"afterEnd\\\",item),()=>item.classList.contains(\\\"sbitem\\\")],\\n  [\\\"Sink to Bottom\\\",()=>sidebar.appendChild(item),()=>item.classList.contains(\\\"sbitem\\\")],\\n  [\\\"Toggle Type\\\",()=>item.toggleType()]].forEach(args=>item.addContextItem(...args));\\n    \\n  item.addEventListener('mousedown',e=>item.classList.contains(\\\"box\\\")&&Object.assign(item.style,{zIndex:zIndex()}));\\n  item.head.addEventListener('mousedown',e=>{\\n    if(item.classList.contains(\\\"sbitem\\\")) return e.button||transition(()=>item.classList.toggle(\\\"c\\\"));\\n    if (e.target.tagName===\\\"A\\\") return;\\n    let x=e.clientX,y=e.clientY,l=item.offsetLeft,t=item.offsetTop;\\n    let boxDrag=e=>Object.assign(item.style,{left:Math.max(Math.min(win.innerWidth-item.offsetWidth,l+e.clientX-x),0)+\\\"px\\\",top:Math.max(Math.min(win.innerHeight-item.offsetHeight,t+e.clientY-y),0)+\\\"px\\\"});\\n    let boxDragEnd=e=>doc.removeEventListener('mouseup',boxDragEnd)||doc.removeEventListener('mousemove',boxDrag);\\n    doc.addEventListener('mouseup',boxDragEnd)||doc.addEventListener('mousemove',boxDrag);\\n  });\\n  item.head.querySelector(\\\".close\\\").addEventListener('click',e=>item[\\\"remove\\\"]());\\n  item.head.querySelector(\\\".collapser\\\").addEventListener('click',e=>item.classList.contains(\\\"box\\\")&&transition(()=>item.classList.toggle(\\\"c\\\")||win._boxEdgeDetect()));\\n  item.head.addEventListener(\\\"contextmenu\\\",e=>e.preventDefault()||contextMenu(item,e.clientX,e.clientY));\\n  Object.assign(item.style,{left:Math.floor(win.innerWidth/2-item.offsetWidth/2)+\\\"px\\\",top:Math.floor(win.innerHeight/2-item.offsetHeight/2)+\\\"px\\\",height:(item.offsetHeight||200)+\\\"px\\\",width:(item.offsetWidth||200)+\\\"px\\\",zIndex:zIndex()});\\n  return item;\\n};\\nexport let createBox=(title, content, icon=\\\"\\\\uea74\\\", ...classes)=>createItem(title, content, icon, ...classes, \\\"box\\\");\\nexport let createSidebarItem=(title, content, icon=\\\"\\\\uea74\\\", ...classes)=>createItem(title, content, icon, ...classes, \\\"sbitem\\\");\\nexport let confirm=text=>{\\n  let box=createBox(\\\"Confirmation Prompt\\\",`<div class=g2><div class=f>${text}</div><button class=r><u>Y</u>es</button><button class=l><u>N</u>o</button></div>`,\\\"\\\",\\\"prompt\\\");\\n  box.querySelector(\\\"button\\\").focus();\\n  box.addEventListener('keyup',e=>(e.key.toLowerCase()===\\\"y\\\"&&box.querySelector(\\\"button\\\").click())||(e.key.toLowerCase()===\\\"n\\\"&&box.querySelectorAll(\\\"button\\\")[1].click()));\\n  return new Promise(r=>box.querySelectorAll(\\\"button\\\").forEach((button,i)=>button.addEventListener('click',()=>box[\\\"remove\\\"](r(i==0)))));\\n};\\nexport let prompt=text=>{\\n  let box=createBox(\\\"Input Prompt\\\",`<div class=g2><div class=f>${text}</div><input class=r /><button class=l>Submit</button></div>`,\\\"\\\",\\\"prompt\\\");\\n  box.querySelector(\\\"input\\\").focus();\\n  box.querySelector(\\\"input\\\").addEventListener('keyup',e=>e.key=='Enter'&&box.querySelector(\\\"button\\\").click());\\n  return new Promise(r=>box.querySelector(\\\"button\\\").addEventListener('click',()=>box[\\\"remove\\\"](r(box.querySelector(\\\"input\\\").value))));\\n};\\nexport let select=(text,options)=>{\\n  let box=createBox(\\\"Selection Prompt\\\",`<div class=g2><div class=f>${text}</div><select class=r>${options.map(option=>`<option value=\\\"${option}\\\">${option}</option>`).join(\\\"\\\")}</select><button class=l>Submit</button></div>`,\\\"\\\",\\\"prompt\\\");\\n  box.querySelector(\\\"select\\\").focus();\\n  return new Promise(r=>box.querySelector(\\\"button\\\").addEventListener('click',()=>box[\\\"remove\\\"](r(box.querySelector(\\\"select\\\").value))));\\n};\\nexport let alert=text=>{\\n  let box=createBox(\\\"Alert Message\\\",`<div class=g2><div class=f>${text}</div><button class=f>Ok</button></div>`,\\\"\\\", \\\"prompt\\\");\\n  box.querySelector(\\\"button\\\").focus();\\n  return new Promise(r=>box.querySelector(\\\"button\\\").addEventListener('click',()=>r(box[\\\"remove\\\"]())));\\n};\\nlet contextMenu=(item,x,y)=>{\\n  if (item.classList.contains(\\\"prompt\\\")) return;\\n  let options = Object.entries(item.contextItems).filter(([name,entry])=>entry.cFn());\\n  let box=createBox(\\\"\\\",`<div class=g2><div class=f>${item.querySelector(\\\".title\\\").innerText}.context</div>${options.map(([name,entry])=>`<button class=n>${name}</button>`).join(\\\"\\\")}</div>`,\\\"\\\", \\\"contextMenu\\\");\\n  box.querySelector(\\\"button\\\").focus();\\n  Object.assign(box.style,{left:Math.max(Math.min(win.innerWidth-box.offsetWidth/2,x),box.offsetWidth/2)+\\\"px\\\",top:Math.max(Math.min(win.innerHeight-box.offsetHeight/2,y),box.offsetHeight/2)+\\\"px\\\",transform:\\\"translate(-50%, -50%)\\\"});\\n  box.querySelectorAll(\\\"button\\\").forEach(button=>button.addEventListener(\\\"click\\\",()=>box[\\\"remove\\\"](item.contextItems[button.innerText].fn())));\\n  box.addEventListener(\\\"mousedown\\\",e=>e.stopPropagation());\\n  let docFunction=()=>box[\\\"remove\\\"](doc.removeEventListener(\\\"mousedown\\\",docFunction));\\n  setTimeout(()=>doc.addEventListener(\\\"mousedown\\\",docFunction),10);\\n};\\nlet transition=fn=>{\\n  sidebar.classList.add(\\\"t\\\");\\n  fn();\\n  setTimeout(()=>sidebar.classList[\\\"remove\\\"](\\\"t\\\"),200);\\n}\\nlet zIndex=()=>Math.max(9000,...[...doc.querySelectorAll(\\\".sb .box\\\")].map(box=>box.style.zIndex))+1;\",\"filename\":\"/box/box.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":28949,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHosts, runHackScript } from 'utils.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = 'joesguns';\\n\\twhile (true) {\\n\\t\\tconst hosts = getHosts(ns, 1.75);\\n\\t\\tfor (const host of hosts) {\\n\\t\\t\\tif (host.server.hostname === 'home') continue;\\n\\t\\t\\tif (!host.threadsAvailable) continue;\\n\\t\\t\\tawait runHackScript(ns, 'weaken.js', host.server.hostname, host.threadsAvailable, target);\\n\\t\\t}\\n\\t\\tawait ns.sleep(ns.formulas.hacking.weakenTime(ns.getServer(target), ns.getPlayer()) + 100);\\n\\t}\\n}\",\"filename\":\"max_hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/75c0374f-c761-4bbe-b01d-dbd687c64cd7\",\"moduleSequenceNumber\":627167},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/c919f850-4a65-4ac1-a9b3-27f81e992335\",\"moduleSequenceNumber\":627150},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/2de713e6-9a77-40eb-9dd4-c7b973cc41d9\",\"moduleSequenceNumber\":627151},{\"filename\":\"max_hack.js\",\"url\":\"blob:https://danielyxie.github.io/861f3466-20ec-42f3-ba76-7dc51ee4fa47\",\"moduleSequenceNumber\":634666}],\"dependents\":[],\"ramUsage\":6.9,\"server\":\"home\",\"moduleSequenceNumber\":28950,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { boxTailSingleton } from 'utils.js';\\n\\nconst _ = globalThis._; // lodash\\n// Global constants\\nexport const argsSchema = [\\n\\t['no-expansion', false], // If this flag is set, do not expand to new industries. Just work on what we have.\\n\\t['reserve-amount', 1e9], // Don't spend the corporation's last $billion if we can help it.\\n\\t['verbose', false],  // Print extra log messages.\\n\\t['can-accept-funding', true], // When we run low on money, should we look for outside funding?\\n\\t['can-go-public', true], // If we can't get private funding, should we go public?\\n\\t['issue-shares', 0], // If we go public, how many shares should we issue?\\n\\t['can-spend-hashes', true], // Can we spend hacknet hashes (assuming we have them)?\\n\\t['o', false],\\n\\t['mock', false], // Run the task assignment queue, but don't actually spend any money.\\n\\t['price-discovery-only', false], // Don't do any auto-buying, just try to keep the sale price balanced as high as possible. (Emulating TA2 as best we can)\\n\\t['first', 'Agriculture'], // What should we use for our first division? Agriculture works well, but others should be fine too.\\n\\t['second', 'RealEstate'], // What should we prefer for our second division? If we can't afford it, we'll buy what we can afford instead.\\n];\\n\\nconst desiredDivisions = 2; // One Material division to kickstart things, then a product division to really make money.\\n\\nconst bonusMaterials = ['Hardware', 'Robots', 'AICores', 'RealEstate'];\\nconst materialSizes = { Water: 0.05, Energy: 0.01, Food: 0.03, Plants: 0.05, Metal: 0.1, Hardware: 0.06, Chemicals: 0.05, Drugs: 0.02, Robots: 0.5, AICores: 0.1, RealEstate: 0.005 };\\nconst allMaterials = ['Water', 'Energy', 'Food', 'Plants', 'Metal', 'Hardware', 'Chemicals', 'Drugs', 'Robots', 'AICores', 'RealEstate'];\\n// Map of material (by name) to their sizes (how much space it takes in warehouse)\\nconst unlocks = ['Export', 'Smart Supply', 'Market Research - Demand', 'Market Data - Competition', 'VeChain', 'Shady Accounting', 'Government Partnership', 'Warehouse API', 'Office API'];\\nconst upgrades = ['Smart Factories', 'Smart Storage', 'DreamSense', 'Wilson Analytics', 'Nuoptimal Nootropic Injector Implants', 'Speech Processor Implants', 'Neural Accelerators', 'FocusWires', 'ABC SalesBots', 'Project Insight'];\\nconst cities = ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\nconst hqCity = 'Aevum'; // Our production industries will need a headquarters. It doesn't matter which city we use.\\nconst jobs = ['Operations', 'Engineer', 'Research & Development', 'Management', 'Business']; // Also, 'Training', but that's not a real job.\\n\\n// Classes here, since we want to use Industry shortly.\\nclass Industry {\\n\\tconstructor(name = '', robFac = 0.0, aiFac = 0.0, advFac = 0.0, sciFac = 0.0, hwFac = 0.0, reFac = 0.0, reqMats = {}, prodMats = [], makesProducts = false, startupCost = 0) {\\n\\t\\tthis.name = name;\\n\\t\\tthis.factors = {\\n\\t\\t\\tHardware: hwFac,\\n\\t\\t\\tRobots: robFac,\\n\\t\\t\\tAICores: aiFac,\\n\\t\\t\\tRealEstate: reFac,\\n\\t\\t\\tScience: sciFac,\\n\\t\\t\\tAdvertising: advFac,\\n\\t\\t};\\n\\t\\tthis.reqMats = reqMats;\\n\\t\\tthis.prodMats = prodMats;\\n\\t\\tthis.makesProducts = makesProducts;\\n\\t\\tthis.startupCost = startupCost;\\n\\t\\tthis.materialBonusPerSqMeter = {};\\n\\t\\tfor (const material of bonusMaterials) {\\n\\t\\t\\tthis.materialBonusPerSqMeter[material] = this.factors[material] / materialSizes[material];\\n\\t\\t}\\n\\t\\tlet scaleFactor = Object.values(this.materialBonusPerSqMeter).reduce((sum, prod) => sum + prod, 0);\\n\\t\\tthis.scaledMaterialBonus = {};\\n\\t\\tfor (const material of bonusMaterials) {\\n\\t\\t\\tthis.scaledMaterialBonus[material] = this.materialBonusPerSqMeter[material] / scaleFactor;\\n\\t\\t}\\n\\t}\\n\\tstatic fromObject(obj) {\\n\\t\\treturn new Industry(obj.name, obj.robFac, obj.aiFac, obj.advFac, obj.sciFac, obj.hwFac, obj.reFac, obj.reqMats, obj.prodMats, obj.makesProducts, obj.startupCost);\\n\\t}\\n}\\nclass Task {\\n\\t/**\\n\\t * A Task that we will try to run later.\\n\\t * @param {string} name Human readable name of the task to be run.\\n\\t * @param {function} run callback to run the task.\\n\\t * @param {number} cost allocated budget for this task\\n\\t * @param {number} priority priority, higher number is a higher priority\\n\\t */\\n\\tconstructor(name, run, cost = 0, priority = 0) {\\n\\t\\tthis.name = name;\\n\\t\\tthis.run = run;\\n\\t\\tthis.cost = cost;\\n\\t\\tthis.priority = priority; // Higher will be done sooner.\\n\\t}\\n}\\n\\n// Industry and Material data copied from Bitburner's code on February 10, 2022. (https://github.com/danielyxie/bitburner/blob/dev/src/Corporation/Industry.ts) with startupCost added manually.\\n/** @type {Industry[]} */\\nconst industries = [\\n\\tIndustry.fromObject({ name: 'Agriculture', reFac: 0.72, sciFac: 0.5, hwFac: 0.2, robFac: 0.3, aiFac: 0.3, advFac: 0.04, reqMats: { Water: 0.5, Energy: 0.5 }, prodMats: ['Plants', 'Food'], startupCost: 40e9 }),\\n\\tIndustry.fromObject({ name: 'Chemical', reFac: 0.25, sciFac: 0.75, hwFac: 0.2, robFac: 0.25, aiFac: 0.2, advFac: 0.07, reqMats: { Plants: 1, Energy: 0.5, Water: 0.5 }, prodMats: ['Chemicals'], startupCost: 70e9 }),\\n\\tIndustry.fromObject({ name: 'Fishing', reFac: 0.15, sciFac: 0.35, hwFac: 0.35, robFac: 0.5, aiFac: 0.2, advFac: 0.08, reqMats: { Energy: 0.5 }, prodMats: ['Food'], startupCost: 80e9 }),\\n\\tIndustry.fromObject({ name: 'Utilities', reFac: 0.5, sciFac: 0.6, robFac: 0.4, aiFac: 0.4, advFac: 0.08, reqMats: { Hardware: 0.1, Metal: 0.1 }, prodMats: ['Water'], startupCost: 150e9 }),\\n\\tIndustry.fromObject({ name: 'Energy', reFac: 0.65, sciFac: 0.7, robFac: 0.05, aiFac: 0.3, advFac: 0.08, reqMats: { Hardware: 0.1, Metal: 0.2 }, prodMats: ['Energy'], startupCost: 225e9 }),\\n\\tIndustry.fromObject({ name: 'Mining', reFac: 0.3, sciFac: 0.26, hwFac: 0.4, robFac: 0.45, aiFac: 0.45, advFac: 0.06, reqMats: { Energy: 0.8 }, prodMats: ['Metal'], startupCost: 300e9 }),\\n\\t//reFac is unique for 'Food' bc it diminishes greatly per city. Handle this separately in code?\\n\\tIndustry.fromObject({ name: 'Food', sciFac: 0.12, hwFac: 0.15, robFac: 0.3, aiFac: 0.25, advFac: 0.25, reFac: 0.05, reqMats: { Food: 0.5, Water: 0.5, Energy: 0.2 }, makesProducts: true, startupCost: 10e9 }),\\n\\tIndustry.fromObject({ name: 'Tobacco', reFac: 0.15, sciFac: 0.75, hwFac: 0.15, robFac: 0.2, aiFac: 0.15, advFac: 0.2, reqMats: { Plants: 1, Water: 0.2 }, makesProducts: true, startupCost: 20e9 }),\\n\\tIndustry.fromObject({ name: 'Software', sciFac: 0.62, advFac: 0.16, hwFac: 0.25, reFac: 0.15, aiFac: 0.18, robFac: 0.05, reqMats: { Hardware: 0.5, Energy: 0.5 }, prodMats: ['AICores'], makesProducts: true, startupCost: 25e9 }),\\n\\tIndustry.fromObject({ name: 'Pharmaceutical', reFac: 0.05, sciFac: 0.8, hwFac: 0.15, robFac: 0.25, aiFac: 0.2, advFac: 0.16, reqMats: { Chemicals: 2, Energy: 1, Water: 0.5 }, prodMats: ['Drugs'], makesProducts: true, startupCost: 200e9 }),\\n\\tIndustry.fromObject({ name: 'Computer', reFac: 0.2, sciFac: 0.62, robFac: 0.36, aiFac: 0.19, advFac: 0.17, reqMats: { Metal: 2, Energy: 1 }, prodMats: ['Hardware'], makesProducts: true, startupCost: 500e9 }),\\n\\tIndustry.fromObject({ name: 'RealEstate', robFac: 0.6, aiFac: 0.6, advFac: 0.25, sciFac: 0.05, hwFac: 0.05, reqMats: { Metal: 5, Energy: 5, Water: 2, Hardware: 4 }, prodMats: ['RealEstate'], makesProducts: true, startupCost: 600e9 }),\\n\\tIndustry.fromObject({ name: 'Healthcare', reFac: 0.1, sciFac: 0.75, advFac: 0.11, hwFac: 0.1, robFac: 0.1, aiFac: 0.1, reqMats: { Robots: 10, AICores: 5, Energy: 5, Water: 5 }, makesProducts: true, startupCost: 750e9 }),\\n\\tIndustry.fromObject({ name: 'Robotics', reFac: 0.32, sciFac: 0.65, aiFac: 0.36, advFac: 0.18, hwFac: 0.19, reqMats: { Hardware: 5, Energy: 3 }, prodMats: ['Robots'], makesProducts: true, startupCost: 1e12 }),\\n];\\n\\n// Global state\\n/** @type {CorporationInfo} */\\nlet myCorporation;\\nlet options;\\nlet verbose;\\nlet raisingCapital = 0; // Used to flag that we are trying to raise private funding\\nlet extraReserve = 0; // Used when we're saving to fund a new product.\\nlet fillSpaceQueue = []; // Flag these offices as needing workers assigned to roles.\\n\\nexport function autocomplete(data, _) {\\n\\tdata.flags(argsSchema);\\n\\treturn [];\\n}\\nlet c;\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tc = ns.corporation;\\n\\t// Pull in any information we only need at startup.\\n\\toptions = ns.flags(argsSchema);\\n\\tverbose = options.verbose;\\n\\n\\tlet createCorp = false;\\n\\t// See if we've already created a corporation.\\n\\ttry {\\n\\t\\tmyCorporation = c.getCorporation();\\n\\t} catch {\\n\\t\\tcreateCorp = true;\\n\\t}\\n\\tif (createCorp) {\\n\\t\\ttry {\\n\\t\\t\\tc.createCorporation('corp', true);\\n\\t\\t\\tmyCorporation = c.getCorporation();\\n\\t\\t} catch {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t}\\n\\tawait ns.write('/tmp/incorp.txt', '', 'w');\\n\\tboxTailSingleton(ns, 'corp', '🏠', '400px');\\n\\tns.clearLog();\\n\\t// If we already have a corporation, make sure we didn't leave any workers waiting for assignment.\\n\\tfor (const division of myCorporation.divisions) {\\n\\t\\tfor (const city of division.cities) {\\n\\t\\t\\tfillSpaceQueue.push(`${division.name}/${city}`);\\n\\t\\t}\\n\\t}\\n\\n\\t// We've set up the initial corporation, now run it over time.\\n\\twhile (true) {\\n\\t\\t// Do all our spending and expanding.\\n\\t\\tawait doManageCorporation(ns);\\n\\n\\t\\t// Try to manage sale prices for products.\\n\\t\\tawait doPriceDiscovery(ns);\\n\\n\\t\\t// While we wait for the next tick, process any open office positions\\n\\t\\tawait fillOpenPositionsFromQueue(ns);\\n\\n\\t\\t// Sleep until the next time we go into the 'START' phase\\n\\t\\tawait sleepWhileNotInStartState(ns, true);\\n\\n\\t\\tif (verbose) log(ns, ``);\\n\\t}\\n}\\n\\n/**\\n * This function is called in our main loop. Assess the current state of the corporation, and improve it as best we can.\\n * @param {NS} ns\\n **/\\nasync function doManageCorporation(ns) {\\n\\t// Assess the current state of the corporation, and figure out our budget.\\n\\tmyCorporation = c.getCorporation();\\n\\tlet netIncome = myCorporation.revenue - myCorporation.expenses;\\n\\tlet now = new Date().toLocaleString('en-US', { hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: true });\\n\\n\\tif (verbose) log(ns, `----- [ ${myCorporation.name} Quarterly Report ${now} ] -----`);\\n\\tlog(ns, `Corporate cash on hand: ${ns.nFormat(myCorporation.funds, '0.0a')} (Gross: ${ns.nFormat(myCorporation.revenue, '0.0a')}/s, Net: ${ns.nFormat(netIncome, '0.0a')}/s)`);\\n\\n\\t// See if we can raise more money.\\n\\tawait tryRaiseCapital(ns);\\n\\n\\tmyCorporation = c.getCorporation();\\n\\tlet budget = myCorporation.funds - options['reserve-amount'] - extraReserve;\\n\\t// If we're making more than $1 sextillion / sec, we need to stop. The game gets slow if we start employing too many people.\\n\\tif (myCorporation.revenue > 1e21) budget = 0;\\n\\tbudget = Math.max(0, budget);\\n\\tif (verbose) log(ns, `Working with a corporate budget of ${ns.nFormat(budget, '0.0a')}`);\\n\\n\\t// Let's figure out all of the things we'd like to do, before we commit to anything.\\n\\tlet tasks = [];\\n\\t/**\\n\\t * What sort of corporation-wide stuff would we like to do?\\n\\t * Buy Unlocks? Buy upgrades?\\n\\t */\\n\\tlet availableUnlocks = [];\\n\\tconst purchasedUnlocks = [];\\n\\tfor (const unlockable of unlocks) {\\n\\t\\tif (c.hasUnlockUpgrade(unlockable)) purchasedUnlocks.push(unlockable);\\n\\t\\telse availableUnlocks.push(unlockable);\\n\\t}\\n\\tfor (const unlockable of availableUnlocks) {\\n\\t\\tlet cost = c.getUnlockUpgradeCost(unlockable);\\n\\t\\tif (cost > budget) continue;\\n\\t\\t// If we can afford it, and we don't have it yet, consider buying it.\\n\\t\\tlet shouldBuy = false;\\n\\t\\tif (unlockable === 'Smart Supply' && cost < budget * 0.8) {\\n\\t\\t\\t// Push this one to the top of the list. Doing it in code is annoying.\\n\\t\\t\\ttasks.push(new Task('Unlock ' + unlockable, () => c.unlockUpgrade(unlockable), cost, 110));\\n\\t\\t} else if (unlockable === 'Shady Accounting' && cost < budget * 0.5) shouldBuy = true;\\n\\t\\telse if (unlockable === 'Government Partnership' && cost < budget * 0.5) shouldBuy = true;\\n\\t\\t// else if (unlockable === 'Export' && cost < budget * 0.1) shouldBuy = true;\\n\\n\\t\\t// Put the task on our to-do list. Put all unlocks at priority 0 as \\\"nice-to-haves\\\".\\n\\t\\tif (shouldBuy) tasks.push(new Task('Unlock ' + unlockable, () => c.unlockUpgrade(unlockable), cost, 0));\\n\\t}\\n\\n\\tlet hasProductionDivision = false;\\n\\tfor (const division of myCorporation.divisions) {\\n\\t\\tlet industry = industries.find((i) => i.name === division.type);\\n\\t\\tif (industry.makesProducts) hasProductionDivision = true;\\n\\t}\\n\\t// Can we afford to level any upgrades?\\n\\tfor (const upgrade of upgrades) {\\n\\t\\tlet cost = c.getUpgradeLevelCost(upgrade);\\n\\t\\tlet nextLevel = c.getUpgradeLevel(upgrade) + 1;\\n\\t\\tif (cost > budget) continue;\\n\\t\\tif (upgrade === 'Wilson Analytics' && cost < budget * 0.9 && hasProductionDivision) {\\n\\t\\t\\t// Analytics fuels advertising, which drives up the price of products, which generates profits.\\n\\t\\t\\t// Scale the priority based on how cheap this is (cheaper is higher priority [0-100]).\\n\\t\\t\\tlet priority = Math.round((1 - cost / budget) * 100);\\n\\t\\t\\ttasks.push(new Task(`Upgrading '${upgrade}' to level ${nextLevel}`, () => c.levelUpgrade(upgrade), cost, priority));\\n\\t\\t} else if (['Smart Factories', 'Smart Storage'].includes(upgrade) && cost < budget * 0.1) {\\n\\t\\t\\t// More storage means more materials, which drives more production. More production means more sales.\\n\\t\\t\\ttasks.push(new Task(`Upgrading '${upgrade}' to level ${nextLevel}`, () => c.levelUpgrade(upgrade), cost, 10));\\n\\t\\t} else if (cost < budget * 0.01) {\\n\\t\\t\\t// Upgrade other stuff too, as long as it's cheap compared to our budget.\\n\\t\\t\\ttasks.push(new Task(`Upgrading '${upgrade}' to level ${nextLevel}`, () => c.levelUpgrade(upgrade), cost, 1));\\n\\t\\t}\\n\\t}\\n\\t/**\\n\\t * Let's take a look at our divisions for big problems. Do we need to expand to a new industry? Are any\\n\\t * of our existing industries showing a loss? What else might we need to consider here? We'll be looking\\n\\t * at every division at the end of the loop to do maintenance, so this is just high level stuff.\\n\\t */\\n\\tif (myCorporation.divisions.length === 0) {\\n\\t\\t// We definitely need a new division!\\n\\t\\t// Use up to 80% of our budget to start this first division.\\n\\t\\tlet newDivisionBudget = budget * 0.9;\\n\\t\\t// Just consider the basic materials-producing industries for our first division. Products take a long time to come online.\\n\\t\\tlet possibleIndustries = industries.filter((ind) => !ind.makesProducts);\\n\\t\\t// And only the ones where we'll be able to spend at least half our budget setting up shop.\\n\\t\\tpossibleIndustries = possibleIndustries.filter((ind) => ind.startupCost < newDivisionBudget * 0.5);\\n\\t\\t// TODO: Pick a starting industry using some sort of logic.\\n\\t\\t// For the moment, let's just try to go with Agriculture. It's cheap and works well.\\n\\t\\tlet newIndustry = possibleIndustries.find((ind) => ind.name === options['first']);\\n\\t\\tif (newIndustry) {\\n\\t\\t\\ttasks.push(new Task(`Add the first division, '${newIndustry.name}'`, () => doCreateNewDivision(ns, newIndustry, newDivisionBudget), newDivisionBudget, 100));\\n\\t\\t} else {\\n\\t\\t\\t// If we can't afford to create our first industry, something has gone very wrong. Quit now.\\n\\t\\t\\tlog(ns, `ERROR: Could not afford to create our first industry!`, 'error', true);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\t}\\n\\t// Figure out where we are in the fundraising progression. Don't buy a production industry until after accepting round 3.\\n\\tlet offer = c.getInvestmentOffer();\\n\\tif (myCorporation.divisions.length > 0 && myCorporation.divisions.length < desiredDivisions && offer.round > 3) {\\n\\t\\tlet newDivisionBudget = budget * 0.9;\\n\\t\\tlet possibleIndustries = industries.filter((ind) => ind.makesProducts);\\n\\t\\t// Only consider industries where we can still have a budget to actually get started.\\n\\t\\tpossibleIndustries = possibleIndustries.filter((ind) => ind.startupCost < budget * 0.5);\\n\\t\\tpossibleIndustries.sort((a, b) => a.startupCost - b.startupCost).reverse();\\n\\t\\tif (verbose && possibleIndustries.length) {\\n\\t\\t\\tlog(ns, `We would like to expand into a new industry. Possibilities:`);\\n\\t\\t\\tfor (const industry of possibleIndustries) {\\n\\t\\t\\t\\tlog(ns, `  ${ns.nFormat(industry.startupCost, '0.0a')} - ${industry.name}`);\\n\\t\\t\\t}\\n\\t\\t} else if (verbose) log(ns, `INFO: We would like to create a new division but we cannot afford one. Willing to spend ${ns.nFormat(budget, '0.0a')}.`);\\n\\n\\t\\t// Try to use the industry from the command line. If that doesn't work, fall back to picking from our list of possibilities.\\n\\t\\t//        let newIndustry = possibleIndustries.find((ind) => ind.name == 'Pharmaceutical');\\n\\t\\tlet newIndustry = possibleIndustries.find((ind) => ind.name === options['second']);\\n\\t\\tif (!newIndustry && possibleIndustries.length > 0) {\\n\\t\\t\\tnewIndustry = possibleIndustries[0];\\n\\t\\t}\\n\\t\\tif (newIndustry) {\\n\\t\\t\\ttasks.push(new Task(`Add a production division, '${newIndustry.name}'`, () => doCreateNewDivision(ns, newIndustry, newDivisionBudget), newDivisionBudget, 100));\\n\\t\\t} else {\\n\\t\\t\\tlog(ns, `ERROR: Buying industry failed. Aborting!`, 'error', true);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\t}\\n\\n\\t// If we have all of our divisions bought, it's worth spending hashes on research.\\n\\t// if (myCorporation.divisions.length >= desiredDivisions) {\\n\\t// \\tif (options['can-spend-hashes'])\\n\\t// \\t\\tawait doSpendHashes(ns, 'Exchange for Corporation Research');\\n\\t// }\\n\\n\\t/**\\n\\t * We've looked at the at the corporation, and come up with a list of tasks we'd like to do. Now, figure out\\n\\t * which ones we can actually accomplish on our budget.\\n\\t */\\n\\ttasks.sort((a, b) => a.cost - b.cost).reverse();\\n\\ttasks.sort((a, b) => a.priority - b.priority).reverse();\\n\\t/**\\n\\t * Finally, run each task in priority order. If we run out of money, should we buy lower priority stuff, or\\n\\t * wait? If we wait, the money might get spent expanding a division instead. This may all take some\\n\\t * adjustments over time.\\n\\t */\\n\\tlet spent = await runTasks(ns, tasks, budget);\\n\\tif (spent) budget -= spent;\\n\\tif (spent > 0 && verbose) log(ns, `Spent ${ns.nFormat(spent, '0.0a')} of our budget of ${ns.nFormat(budget, '0.0a')}.`);\\n\\n\\t/**\\n\\t * Even though we've done all of our desired high level tasks, we still need to tend to each division individually.\\n\\t * If we don't have all the automation bits, we may need to adjust pricing. If we have room in warehouses, we can buy\\n\\t * more materials. If we have products, we may be able to start on a new product. We may have research to spend.\\n\\t */\\n\\tfor (const division of myCorporation.divisions) {\\n\\t\\t// If we have multiple divisions, hold the lion's share of the budget for production industries.\\n\\t\\tlet industry = industries.find((ind) => ind.name === division.type);\\n\\t\\tlet divisionalBudget = budget;\\n\\t\\tif (myCorporation.divisions.length > 1 && !industry.makesProducts) {\\n\\t\\t\\tdivisionalBudget *= 0.05;\\n\\t\\t}\\n\\t\\tlet spent = await doManageDivision(ns, division, divisionalBudget);\\n\\t\\tif (spent) budget -= spent;\\n\\t}\\n}\\n\\n/**\\n * Try to raise money.\\n * Advances through the funding rounds, eventually going public. Potentially spends hacknet hashes for money.\\n * @param {NS} ns\\n */\\nasync function tryRaiseCapital(ns) {\\n\\t// First, spend hacknet hashes.\\n\\t// if (options['can-spend-hashes'] && myCorporation.funds < 10e9)\\n\\t// \\tawait doSpendHashes(ns, 'Sell for Corporation Funds');\\n\\t// If we're not public, then raise private funding.\\n\\tif (!myCorporation.public) {\\n\\t\\tlet offer = c.getInvestmentOffer();\\n\\t\\t// If we've finished round 4, clear our raising capital flag.\\n\\t\\tif (offer.round > 4) raisingCapital = 0;\\n\\t\\tlet willAccept = true;\\n\\t\\tif (offer && offer.round <= 4) {\\n\\t\\t\\tlog(ns, `Considering raising private capital round ${offer.round}. Offered ${ns.nFormat(offer.funds, '0.0a')} for ${offer.shares} shares.`);\\n\\n\\t\\t\\t// Make sure all employees are happy.\\n\\t\\t\\tlet satisfied = allEmployeesSatisfied(ns);\\n\\t\\t\\tif (!satisfied) {\\n\\t\\t\\t\\tlet prefix = '    *';\\n\\t\\t\\t\\tif (!willAccept) prefix = '     ';\\n\\t\\t\\t\\tlog(ns, `${prefix}  Round ${offer.round} financing waiting on employee stats to stabilize.`);\\n\\t\\t\\t\\twillAccept = false;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Make sure we have filled a reasonable amount of our warehouses with materials.\\n\\t\\t\\tfor (const division of myCorporation.divisions) {\\n\\t\\t\\t\\tlet industry = industries.find((i) => i.name === division.type);\\n\\t\\t\\t\\tfor (const city of division.cities) {\\n\\t\\t\\t\\t\\tif (!c.hasWarehouse(division.name, city)) continue;\\n\\t\\t\\t\\t\\tlet warehouse = c.getWarehouse(division.name, city);\\n\\t\\t\\t\\t\\tlet warehouseSpaceRequiredForCycle = getReservedWarehouseSpace(ns, industry, division, city);\\n\\t\\t\\t\\t\\tlet warehouseSpaceAvailable = warehouse.size - warehouseSpaceRequiredForCycle - warehouse.sizeUsed;\\n\\t\\t\\t\\t\\tif (warehouseSpaceAvailable > warehouseSpaceRequiredForCycle * 0.2) {\\n\\t\\t\\t\\t\\t\\tlet prefix = '    *';\\n\\t\\t\\t\\t\\t\\tif (!willAccept) prefix = '     ';\\n\\t\\t\\t\\t\\t\\tlog(ns, `${prefix}  Round ${offer.round} financing waiting on ${division.name} warehouses to gain materials.`);\\n\\t\\t\\t\\t\\t\\twillAccept = false;\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t// If we have a product division, make sure it has a maximum number of products before we accept the offer.\\n\\t\\t\\tfor (const division of myCorporation.divisions) {\\n\\t\\t\\t\\tconst maxProducts = getMaxProducts(ns, division.name);\\n\\t\\t\\t\\tlet industry = industries.find((i) => i.name === division.type);\\n\\t\\t\\t\\tif (industry.makesProducts && division.products.length < maxProducts) {\\n\\t\\t\\t\\t\\tlet prefix = '    *';\\n\\t\\t\\t\\t\\tif (!willAccept) prefix = '     ';\\n\\t\\t\\t\\t\\tlog(ns, `${prefix}  Round ${offer.round} financing waiting on ${division.name} division to create products (${division.products.length}/${maxProducts})`);\\n\\t\\t\\t\\t\\twillAccept = false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (offer.round >= 4 && industry.makesProducts) {\\n\\t\\t\\t\\t\\t// Wait for the last product to finish researching\\n\\t\\t\\t\\t\\tlet completeProducts = division.products.map((prodName) => c.getProduct(division.name, prodName)).filter((prod) => prod.developmentProgress >= 100);\\n\\t\\t\\t\\t\\tif (completeProducts.length < maxProducts) {\\n\\t\\t\\t\\t\\t\\tlet prefix = '    *';\\n\\t\\t\\t\\t\\t\\tif (!willAccept) prefix = '     ';\\n\\t\\t\\t\\t\\t\\tlog(ns, `${prefix}  Round ${offer.round} financing waiting on ${division.name} division to complete products (${completeProducts.length}/${maxProducts})`);\\n\\t\\t\\t\\t\\t\\twillAccept = false;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t// TODO: Funding is proportional to revenue. We can cook the books so that revenue looks higher than it should by stockpiling goods, then selling them all at once.\\n\\n\\t\\t\\t// Make sure we aren't spending money on materials when we get funding. Each time we come through the loop and would purchase, increment the counter. After 4 times, purchase.\\n\\t\\t\\tif (willAccept) raisingCapital++;\\n\\t\\t\\telse raisingCapital = 0;\\n\\n\\t\\t\\t// If we've passed all the checks, then accept the next round of funding.\\n\\t\\t\\tif (options['can-accept-funding'] && raisingCapital > 4 && !options.mock) {\\n\\t\\t\\t\\tlet success = c.acceptInvestmentOffer();\\n\\t\\t\\t\\traisingCapital = 0;\\n\\t\\t\\t\\tif (success) log(ns, `WARNING: Accepted round ${offer.round} funding. Took ${ns.nFormat(offer.funds, '0.0a')} for ${offer.shares} shares.`);\\n\\t\\t\\t\\telse log(ns, `ERROR: Tried to accept round ${offer.round} funding, but something went wrong.`);\\n\\t\\t\\t} else if (options['can-accept-funding'] && raisingCapital > 0) {\\n\\t\\t\\t\\tlog(ns, `SUCCESS: Raising capital in ${5 - raisingCapital} cycles.`);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\t// We're public, so we can't be raising capital.\\n\\t\\t\\traisingCapital = 0;\\n\\t\\t}\\n\\t\\t// Finally, if we're out of private funding, we may as well go public\\n\\t\\toffer = c.getInvestmentOffer();\\n\\t\\tif (options['can-go-public'] && !options.mock && offer.round > 4) {\\n\\t\\t\\t// Looks like we're out of private funding. Time to go public.\\n\\t\\t\\tlog(ns, `SUCCESS: Private funding complete. Time to IPO. Selling ${options['issue-shares']} shares.`);\\n\\t\\t\\tc.goPublic(options['issue-shares']);\\n\\t\\t\\t// and set our dividend to 10%\\n\\t\\t\\tc.issueDividends(0.1);\\n\\t\\t}\\n\\t} else {\\n\\t\\t// We're public, so we can't be raising capital.\\n\\t\\traisingCapital = 0;\\n\\t}\\n}\\n\\n/**\\n * Do all employees have enough happiness, energy, and morale?\\n * @param {NS} ns\\n * @param {number} lowerLimit - minimum for all stats [0,1]\\n * @returns {boolean}\\n */\\nfunction allEmployeesSatisfied(ns, lowerLimit = 0.9995) {\\n\\tlet allSatisfied = true;\\n\\tfor (const division of myCorporation.divisions) {\\n\\t\\tfor (const city of division.cities) {\\n\\t\\t\\tlet office = c.getOffice(division.name, city);\\n\\t\\t\\tlet employees = office.employees.map((e) => c.getEmployee(division.name, city, e));\\n\\t\\t\\tlet avgMorale = employees.map((e) => e.mor).reduce((sum, mor) => sum + mor, 0) / employees.length;\\n\\t\\t\\tlet avgEnergy = employees.map((e) => e.ene).reduce((sum, ene) => sum + ene, 0) / employees.length;\\n\\t\\t\\tlet avgHappiness = employees.map((e) => e.hap).reduce((sum, hap) => sum + hap, 0) / employees.length;\\n\\t\\t\\tif (avgEnergy < office.maxEne * lowerLimit || avgHappiness < office.maxHap * lowerLimit || avgMorale < office.maxMor * lowerLimit) {\\n\\t\\t\\t\\tallSatisfied = false;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn allSatisfied;\\n}\\n\\n/**\\n * Given a list of tasks, execute them in order.\\n * @param {NS} ns\\n * @param {Task[]} tasks\\n * @param {number} budget\\n * @param {boolean} keepSpending Should we keep spending money on items further down the list after hitting an item we can't afford?\\n * @returns {number} the amount spent.\\n */\\nasync function runTasks(ns, tasks, budget, keepSpending = true) {\\n\\tconst startingBudget = budget;\\n\\tfor (const task of tasks) {\\n\\t\\tlet success = false;\\n\\t\\tif (budget - task.cost > 0) {\\n\\t\\t\\tlog(ns, `  Spending ${ns.nFormat(task.cost, '0.0a')} on ${task.name}`);\\n\\t\\t\\t// Some of the ns.corporation calls we use are void functions, so treat a return value of undefined with no exception as a success.\\n\\t\\t\\tif (!options.mock)\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tsuccess = await task.run();\\n\\t\\t\\t\\t\\tif (success === undefined) success = true;\\n\\t\\t\\t\\t} catch (e) {\\n\\t\\t\\t\\t\\tlog(ns, `WARNING: Failed to execute ${task.name} - ${task.run}`);\\n\\t\\t\\t\\t\\tlog(ns, `WARNING: ${e}`);\\n\\t\\t\\t\\t}\\n\\t\\t\\tif (success) budget -= task.cost;\\n\\t\\t}\\n\\t\\tif (!success && !keepSpending) break;\\n\\t}\\n\\treturn startingBudget - budget;\\n}\\n\\n/**\\n * Create a bare bones new division, then use any remaining money to set it up.\\n * @param {NS} ns\\n * @param {*} newIndustry\\n * @param {number} newDivisionBudget\\n * @returns {boolean} true if we created the new division, false if not.\\n */\\nasync function doCreateNewDivision(ns, newIndustry, newDivisionBudget) {\\n\\tif (options['no-expansion'] || options['mock']) return false;\\n\\tmyCorporation = c.getCorporation();\\n\\tlet numDivisions = myCorporation.divisions.length;\\n\\n\\tc.expandIndustry(newIndustry.name, newIndustry.name);\\n\\n\\tmyCorporation = c.getCorporation();\\n\\tif (numDivisions === myCorporation.divisions.length) {\\n\\t\\tlog(ns, `ERROR: Failed to create new division! Expected to create '${newIndustry.name}'.`, 'error', true);\\n\\t\\tns.exit();\\n\\t}\\n\\tnewDivisionBudget -= newIndustry.startupCost;\\n\\tif (verbose) log(ns, `Spending ${ns.nFormat(newIndustry.startupCost, '0.0a')} setting up a new '${newIndustry.name}' division.`);\\n\\tlet newDivision = c.getDivision(newIndustry.name);\\n\\n\\t// Hire the first three employees in Sector-12\\n\\tfillSpaceQueue.push(`${newDivision.name}/Sector-12`);\\n\\n\\t// Do the first round of purchasing now.\\n\\tawait doManageDivision(ns, newDivision, newDivisionBudget);\\n\\tif (newDivision) return true;\\n\\telse return false;\\n}\\n\\n/**\\n * Given an existing division, try to allocate our budget to growing the business.\\n * @param {NS} ns\\n * @param {Division} division division from ns.corporation.getDivision()\\n * @param {number} budget amount we can spend\\n * @returns {number} the amount we spent while managing this division.\\n */\\nasync function doManageDivision(ns, division, budget) {\\n\\tmyCorporation = c.getCorporation();\\n\\tconst industry = industries.find((ind) => ind.name === division.type);\\n\\tbudget = Math.max(0, budget);\\n\\tconst totalBudget = budget;\\n\\n\\t/**\\n\\t * Take stock of the current state of this division. Just like at the corporate level,\\n\\t * collect some tasks that we'd like to do, then see what we can execute. Don't worry too\\n\\t * much about spending the whole budget. Anything we don't spend now will get passed on\\n\\t * to other divisions, or recycled in the next pass.\\n\\t */\\n\\tif (verbose) log(ns, `Managing ${division.name} division with a budget of ${ns.nFormat(budget, '0.0a')}.`);\\n\\tlet spent = 0;\\n\\tlet tasks = [];\\n\\n\\t// Can we expand to new cities?\\n\\tif (division.cities.length < cities.length) {\\n\\t\\t// We aren't in all cities yet, so we want to expand.\\n\\t\\tfor (const city of cities) {\\n\\t\\t\\tif (!division.cities.includes(city)) {\\n\\t\\t\\t\\tlet cost = c.getExpandCityCost();\\n\\t\\t\\t\\tif (cost < budget * 0.25) {\\n\\t\\t\\t\\t\\tif (verbose) log(ns, `Want to open new offices in ${city}.`);\\n\\t\\t\\t\\t\\ttasks.push(new Task(`Expand ${division.name} to ${city}`, () => doExpandCity(ns, division.name, city), cost, 80));\\n\\t\\t\\t\\t} else if (verbose) log(ns, `WARNING: We would like to expand to ${city}, but it would cost ${ns.nFormat(cost, '0.0a')} on our budget of ${ns.nFormat(budget, '0.0a')}.`);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// Go ahead and expand immediately, so we can buy other stuff for any new locations on this cycle.\\n\\tif (tasks.length > 0) {\\n\\t\\tspent = await runTasks(ns, tasks, budget);\\n\\t\\tbudget -= spent;\\n\\t\\ttasks = [];\\n\\t}\\n\\t// Update our status\\n\\tmyCorporation = c.getCorporation();\\n\\tdivision = c.getDivision(division.name);\\n\\tlet hasMarketTA2 = c.hasResearched(division.name, 'Market-TA.II');\\n\\n\\t// Division wide tasks\\n\\t// Can we buy advertising? This is how we go exponential in our production industry.\\n\\tlet adCount = c.getHireAdVertCount(division.name);\\n\\tlet adPrice = c.getHireAdVertCost(division.name);\\n\\tif (industry.makesProducts && adPrice < budget * 0.9) {\\n\\t\\ttasks.push(new Task(`Buy advertising campaign #${adCount + 1} for ${division.name}`, () => c.hireAdVert(division.name), adPrice, 60));\\n\\t\\tadCount++;\\n\\t}\\n\\t// Buy the first advertising campaign for non-product industries\\n\\tif (adCount === 0 && !industry.makesProducts && adPrice < budget * 0.9) {\\n\\t\\t// Buy one advertising campaign in material markets\\n\\t\\ttasks.push(new Task(`Buy advertising campaign #${adCount + 1} for ${division.name}`, () => c.hireAdVert(division.name), adPrice, 60));\\n\\t}\\n\\t// Consider buying more advertising. All industires with MarketTA2, or a second one for production industries.\\n\\tif ((industry.makesProducts || hasMarketTA2) && adPrice < budget * 0.5) {\\n\\t\\ttasks.push(new Task(`Buy advertising campaign #${adCount + 1} for ${division.name}`, () => c.hireAdVert(division.name), adPrice, 20));\\n\\t}\\n\\n\\t// Should we spend any research?\\n\\tlet researchToSpend = division.research;\\n\\tif (industry.makesProducts || hasMarketTA2) {\\n\\t\\t// Willing to spend in inverse proportion to how much stored science helps this product.\\n\\t\\tresearchToSpend = division.research * (1 - industry.factors.Science);\\n\\t}\\n\\tlet researchTypes = ['Hi-Tech R&D Laboratory', 'uPgrade: Fulcrum', 'uPgrade: Capacity.I', 'uPgrade: Capacity.II', 'Market-TA.I', 'Market-TA.II'];\\n\\tfor (const researchType of researchTypes) {\\n\\t\\tlet hasResearch = false;\\n\\t\\tlet cost = Infinity;\\n\\t\\ttry {\\n\\t\\t\\thasResearch = c.hasResearched(division.name, researchType);\\n\\t\\t\\tcost = c.getResearchCost(division.name, researchType);\\n\\t\\t} catch { }\\n\\t\\tif (!hasResearch && researchToSpend >= cost) {\\n\\t\\t\\tlog(ns, `INFO: Buying research project ${researchType} for ${cost} research points.`, 'info');\\n\\t\\t\\tc.research(division.name, researchType);\\n\\t\\t\\tresearchToSpend -= cost;\\n\\t\\t} else if (!hasResearch && cost !== Infinity) {\\n\\t\\t\\tif (verbose) log(ns, `Considered spending up to ${researchToSpend} of ${division.research} research on '${researchType}' but it would cost ${cost}.`);\\n\\t\\t\\t// If we don't have this research, and can't afford to buy it, don't buy the next item on the list\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\t// If this is a production industry, see if we should be researching a new product.\\n\\tif (industry.makesProducts) {\\n\\t\\tconst maxProducts = getMaxProducts(ns, division.name);\\n\\t\\tlet products = division.products.map((p) => c.getProduct(division.name, p));\\n\\t\\tlet progress = products.map((p) => p.developmentProgress).filter((cmp) => cmp < 100)[0];\\n\\t\\tif (progress === undefined) progress = 100;\\n\\t\\tif (verbose) log(ns, `Projects: ${products.length}/${maxProducts}. Current project: ${progress}% complete.`);\\n\\t\\tif (progress === 100) {\\n\\t\\t\\t// No product being researched. Consider creating a new one.\\n\\t\\t\\tif (products.length < maxProducts) {\\n\\t\\t\\t\\t// We're not full, so go ahead.\\n\\t\\t\\t\\tspent += createNewProduct(ns, division);\\n\\t\\t\\t\\tbudget -= spent;\\n\\t\\t\\t} // Discontinue an existing product for a new one if we're not raising capital.\\n\\t\\t\\telse {\\n\\t\\t\\t\\t// log(ns, `Considering creating a new product. rC: ${raisingCapital} eR: ${mf(extraReserve)}`);\\n\\t\\t\\t\\tif (raisingCapital === 0) {\\n\\t\\t\\t\\t\\tif (extraReserve > 0 && myCorporation.funds > extraReserve) {\\n\\t\\t\\t\\t\\t\\t// We have enough money saved up. Time to ditch the product with the lowest budget.\\n\\t\\t\\t\\t\\t\\tproducts.sort((a, b) => budgetFromProductName(a.name) - budgetFromProductName(b.name));\\n\\t\\t\\t\\t\\t\\tlet lowBudgetProduct = products[0];\\n\\t\\t\\t\\t\\t\\tc.discontinueProduct(division.name, lowBudgetProduct.name);\\n\\t\\t\\t\\t\\t\\tmyCorporation = c.getCorporation();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t// Try to create the Product. If it fails, it will set a reserve for us.\\n\\t\\t\\t\\t\\tspent += createNewProduct(ns, division);\\n\\t\\t\\t\\t\\tbudget -= spent;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t// Per city tasks.\\n\\tfor (const city of division.cities) {\\n\\t\\t// Can we expand any of our offices for more employees?\\n\\t\\tlet officeSize = c.getOffice(division.name, city).size;\\n\\t\\tlet seats = 15; // Grow by officeSize when small, then by 15\\n\\t\\tseats = Math.min(seats, officeSize);\\n\\t\\tlet cost = c.getOfficeSizeUpgradeCost(division.name, city, seats);\\n\\t\\tif (industry.makesProducts && city === hqCity && cost < budget * 0.9) {\\n\\t\\t\\ttasks.push(new Task(`Buy space for ${seats} more employees of ${division.name}/${city}`, () => upgradeOfficeSize(ns, division.name, city, seats), cost, 70));\\n\\t\\t} else if (industry.makesProducts && city !== hqCity && cost < budget * 0.1) {\\n\\t\\t\\ttasks.push(new Task(`Buy space for ${seats} more employees of ${division.name}/${city}`, () => upgradeOfficeSize(ns, division.name, city, seats), cost, 70));\\n\\t\\t} else if (!industry.makesProducts && cost < budget * 0.4) {\\n\\t\\t\\ttasks.push(new Task(`Buy space for ${seats} more employees of ${division.name}/${city}`, () => upgradeOfficeSize(ns, division.name, city, seats), cost, 70));\\n\\t\\t}\\n\\n\\t\\t// Can we expand our warehouse space?\\n\\t\\tif (!c.hasWarehouse(division.name, city)) {\\n\\t\\t\\t// We don't have a warehouse here. We should try to buy one in this city.\\n\\t\\t\\tcost = c.getPurchaseWarehouseCost();\\n\\t\\t\\tif (cost < budget * 0.5) {\\n\\t\\t\\t\\ttasks.push(new Task(`Buy warehouse ${division.name}/${city}`, () => c.purchaseWarehouse(division.name, city), cost, 80));\\n\\t\\t\\t}\\n\\t\\t\\t// Anything else we want to do with a city requires a warehouse, so just skip to the next city.\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t// We have a warehouse. Can we expand it?\\n\\t\\tlet warehouse = c.getWarehouse(division.name, city);\\n\\t\\t// TODO: How much do we care about expanding the warehouse? We should base it on how much of an impact more materials would have.\\n\\t\\tcost = c.getUpgradeWarehouseCost(division.name, city);\\n\\t\\tif (cost < budget * 0.25) {\\n\\t\\t\\ttasks.push(new Task(`Buy warehouse space for ${division.name}/${city}`, () => c.upgradeWarehouse(division.name, city), cost, 20));\\n\\t\\t}\\n\\n\\t\\t// Turn on Smart Supply if we have it\\n\\t\\tif (c.hasUnlockUpgrade('Smart Supply') && !warehouse.smartSupplyEnabled) {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tif (verbose) log(ns, `Turning on Smart Supply for ${division.name}/${city}.`);\\n\\t\\t\\t\\tc.setSmartSupply(division.name, city, true);\\n\\t\\t\\t} catch (e) {\\n\\t\\t\\t\\tlog(ns, `ERROR: ${e}`);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Can we buy more materials given the space we currently have?\\n\\t\\t// First, wait to cycle around to 'START' so we have a clean read on the warehouse levels.\\n\\t\\tawait sleepWhileNotInStartState(ns);\\n\\t\\t// Calculate the required free space for a production cycle's worth of Material and products.\\n\\t\\tlet warehouseSpaceRequiredForCycle = getReservedWarehouseSpace(ns, industry, division, city);\\n\\n\\t\\t// We don't want to drive the corp too deeply negative with material purchases too soon, or\\n\\t\\t// else nothing else will ever be bought, and employees will never get happy.\\n\\t\\tlet freeSpace = warehouse.size - warehouse.sizeUsed;\\n\\t\\tlet warehouseSpaceAvailable = freeSpace - warehouseSpaceRequiredForCycle;\\n\\t\\tlet tolerance = warehouseSpaceRequiredForCycle * 0.01;\\n\\t\\tlet enoughSpace = warehouseSpaceAvailable >= tolerance; // Tiny safety margin\\n\\t\\tconst satisfied = allEmployeesSatisfied(ns);\\n\\t\\tif ((budget > 0 || satisfied) && enoughSpace && raisingCapital === 0) {\\n\\t\\t\\t// We have a decent amount of space to fill.\\n\\t\\t\\tif (verbose) log(ns, `   ${division.name}/${city} warehouse: Wants +${warehouseSpaceAvailable} m² materials. ${warehouseSpaceRequiredForCycle} m² reserved.`);\\n\\t\\t\\tfor (const material of bonusMaterials) {\\n\\t\\t\\t\\t//if (industry.prodMats.includes(material)) continue; // Don't buy the materials we make.\\n\\t\\t\\t\\tlet amt = (industry.scaledMaterialBonus[material] * warehouseSpaceAvailable) / 4;\\n\\t\\t\\t\\t// somewhat scale the amount we buy with our budget\\n\\t\\t\\t\\tlet scaleFactor = Math.log10(budget) - 11; // Don't go full speed until our budget is $100b or more.\\n\\t\\t\\t\\tscaleFactor = Math.max(-2, scaleFactor);\\n\\t\\t\\t\\tscaleFactor = Math.min(0, scaleFactor);\\n\\t\\t\\t\\tlet scale = Math.pow(10, scaleFactor);\\n\\t\\t\\t\\t// Only scale if we're waiting on employees to get happy.\\n\\t\\t\\t\\tif (!satisfied) amt = scale * amt;\\n\\t\\t\\t\\tc.buyMaterial(division.name, city, material, amt);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\t// Make sure we're not buying anything -- we're either out of room or out of money.\\n\\t\\t\\tfor (const material of bonusMaterials) {\\n\\t\\t\\t\\tc.buyMaterial(division.name, city, material, 0);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// It's possible to get into a situation where we've grown production faster than warehouse space.\\n\\t\\tif (warehouseSpaceAvailable < -tolerance) {\\n\\t\\t\\t// Start clearing things out.\\n\\t\\t\\tif (verbose) log(ns, `   ${division.name}/${city} warehouse: Wants to reserve ${warehouseSpaceRequiredForCycle} of ${warehouse.size} m², but only ${freeSpace} m² free! Selling some materials.`);\\n\\t\\t\\tfor (const material of allMaterials) {\\n\\t\\t\\t\\tlet amt = c.getMaterial(division.name, city, material).qty;\\n\\t\\t\\t\\tlet sellAmt = amt * 0.025;\\n\\t\\t\\t\\tc.sellMaterial(division.name, city, material, sellAmt.toFixed(2), 'MP*0.80');\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\t// Make sure we reset. It should be safe to sell '0' here, because the things we want to sell will get reset in the price discovery loop.\\n\\t\\t\\tfor (const material of allMaterials) {\\n\\t\\t\\t\\tc.sellMaterial(division.name, city, material, '0', 'MP');\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// Figure out which tasks we can afford to run, and in which order.\\n\\ttasks.sort((a, b) => a.cost - b.cost).reverse();\\n\\ttasks.sort((a, b) => a.priority - b.priority).reverse();\\n\\t// Finally, run all the tasks we've collected.\\n\\tspent += await runTasks(ns, tasks, budget);\\n\\tif (spent > 0 && verbose) log(ns, `Spent ${ns.nFormat(spent, '0.0a')} of our budget of ${ns.nFormat(totalBudget, '0.0a')}.`);\\n\\n\\treturn spent;\\n}\\n\\n/**\\n * How much space do we need to leave fee in this warehouse for a full cycle of production?\\n * @param {NS} ns\\n * @param {Industry} industry\\n * @param {Division} division\\n * @param {string} city\\n * @returns {number}\\n */\\nfunction getReservedWarehouseSpace(ns, industry, division, city) {\\n\\tlet rawMaterialSize = 0;\\n\\tlet warehouseSpaceRequiredForCycle = 0;\\n\\tlet maxProd = 0;\\n\\n\\t// Products take the same space as what was used to create it.\\n\\tfor (const matName in industry.reqMats) {\\n\\t\\tlet matAmt = industry.reqMats[matName];\\n\\t\\trawMaterialSize += matAmt * materialSizes[matName];\\n\\t}\\n\\n\\t// Max production is based on a bunch of production multipliers.\\n\\tmaxProd = getMaximumProduction(ns, division, city);\\n\\n\\t// How many materials could we produce? Material sizes are predefined.\\n\\tfor (const matName of industry.prodMats) {\\n\\t\\twarehouseSpaceRequiredForCycle += materialSizes[matName] * maxProd;\\n\\t}\\n\\n\\tif (industry.makesProducts) {\\n\\t\\tconst maxProducts = getMaxProducts(ns, division.name);\\n\\t\\twarehouseSpaceRequiredForCycle += maxProducts * maxProd * rawMaterialSize;\\n\\t}\\n\\n\\t// We produce stuff 10 times per cycle\\n\\twarehouseSpaceRequiredForCycle *= 10;\\n\\n\\t// If we don't have automatic price discovery, we'll need some extra free space.\\n\\tlet hasMarketTA2 = c.hasResearched(division.name, 'Market-TA.II');\\n\\tif (!hasMarketTA2) warehouseSpaceRequiredForCycle *= 3;\\n\\telse warehouseSpaceRequiredForCycle *= 1.5;\\n\\n\\treturn warehouseSpaceRequiredForCycle;\\n}\\n\\nfunction getMaximumProduction(ns, division, city) {\\n\\tlet office = c.getOffice(division.name, city);\\n\\tlet officeMult = getOfficeProductivity(office); // Workers\\n\\tlet prodMult = division.prodMult; // Materials\\n\\tlet corpMult = 1 + 0.03 * c.getUpgradeLevel('Smart Factories'); // Corporate upgrades.\\n\\tlet resMult = 1;\\n\\tif (c.hasResearched(division.name, 'Drones - Assembly')) resMult *= 1.2;\\n\\tif (c.hasResearched(division.name, 'Self-Correcting Assemblers')) resMult *= 1.1;\\n\\treturn officeMult * prodMult * corpMult * resMult;\\n}\\n\\n/**\\n * Try to create a new product for this division, with a budget at least twice the size of the last\\n * one we bought. If we don't have enough money, or all our product slots are full,\\n * then set a reserve for the desired amount.\\n *\\n * @param {NS} ns\\n * @param {Division} division\\n * @returns amount of money spent, if any.\\n */\\nfunction createNewProduct(ns, division) {\\n\\tlet wantToSpend = 2e9; // $2b minimum.\\n\\tlet spent = 0;\\n\\tlet spentOnProducts = [];\\n\\ttry {\\n\\t\\tspentOnProducts = division.products\\n\\t\\t\\t.map((p) => budgetFromProductName(p))\\n\\t\\t\\t.sort((a, b) => a - b)\\n\\t\\t\\t.reverse();\\n\\t} catch (error) { }\\n\\tif (spentOnProducts.length > 0) {\\n\\t\\t// If our products weren't named correctly default to assuming they were 2b, 4b, 8b...\\n\\t\\twantToSpend = wantToSpend * Math.pow(2, spentOnProducts.length - 1);\\n\\t\\twantToSpend = Math.max(spentOnProducts[0] * 2, wantToSpend, myCorporation.revenue * 100);\\n\\t}\\n\\tlet productName = `${division.type}-${Math.log10(wantToSpend).toFixed(2)}`;\\n\\ttry {\\n\\t\\tc.makeProduct(division.name, hqCity, productName, wantToSpend / 2, wantToSpend / 2);\\n\\t\\tlog(ns, `Creating new product '${productName}' for ${ns.nFormat(wantToSpend, '0.0a')}.`, 'info', true);\\n\\t\\tspent += wantToSpend;\\n\\t\\textraReserve = 0;\\n\\t} catch (e) {\\n\\t\\t// If we fail to create the product, just reserve the money we want to spend.\\n\\t\\tlog(ns, `Reserving budget of ${ns.nFormat(wantToSpend, '0.0a')} for next product.`);\\n\\t\\textraReserve = wantToSpend;\\n\\t}\\n\\treturn spent;\\n}\\n\\nfunction getMaxProducts(ns, divisionName) {\\n\\tlet maxProducts = 3;\\n\\tif (c.hasResearched(divisionName, 'uPgrade: Capacity.I')) maxProducts++;\\n\\tif (c.hasResearched(divisionName, 'uPgrade: Capacity.II')) maxProducts++;\\n\\treturn maxProducts;\\n}\\n\\n/** @param {NS} ns\\n * @param waitForNext\\n */\\nasync function sleepWhileNotInStartState(ns, waitForNext = false) {\\n\\tmyCorporation = c.getCorporation();\\n\\tif (waitForNext) {\\n\\t\\twhile (myCorporation.state === 'START') {\\n\\t\\t\\tawait ns.sleep(50);\\n\\t\\t\\tmyCorporation = c.getCorporation();\\n\\t\\t}\\n\\t}\\n\\tlet lastState = 'Unknown';\\n\\twhile (myCorporation.state !== 'START') {\\n\\t\\tif (verbose && myCorporation.state !== lastState) {\\n\\t\\t\\tlog(ns, `Waiting for corporation to move into the 'START' status. Currently: '${myCorporation.state}'.`);\\n\\t\\t\\tlastState = myCorporation.state;\\n\\t\\t}\\n\\t\\tawait ns.sleep(50); // Better keep the sleep short, in case we're in catch-up mode.\\n\\t\\tmyCorporation = c.getCorporation();\\n\\t}\\n\\tmyCorporation = c.getCorporation();\\n}\\n\\n/**\\n * Buy the specified number of seats, and hire employees to fill them.\\n * @param {NS} ns\\n * @param {string} divisionName\\n * @param {string} city\\n * @param {number} seats\\n * @returns {boolean} returns true on success\\n */\\nasync function upgradeOfficeSize(ns, divisionName, city, seats) {\\n\\t// First buy the new seats.\\n\\tlet success = false;\\n\\ttry {\\n\\t\\tif (seats > 0) c.upgradeOfficeSize(divisionName, city, seats);\\n\\t\\tsuccess = true;\\n\\t} catch (e) {\\n\\t\\tlog(ns, `ERROR: Failed to upgrade office size by ${seats} seats in ${city}.`);\\n\\t\\tlog(ns, `ERROR: ${e}`);\\n\\t}\\n\\tif (!success) return false;\\n\\n\\t/**\\n\\t * Now that we have more office space, we need to hire and assign workers. Since\\n\\t * worker assignment takes a long time, add them to a queue and we'll handle it\\n\\t * later.\\n\\t */\\n\\tfillSpaceQueue.push(`${divisionName}/${city}`);\\n\\n\\treturn true;\\n}\\n\\nasync function fillOpenPositionsFromQueue(ns) {\\n\\tmyCorporation = c.getCorporation();\\n\\tfillSpaceQueue = [...new Set(fillSpaceQueue)]; // Unique\\n\\t// Try not to run past the end of a cycle..\\n\\twhile (['START'].includes(myCorporation.state) && fillSpaceQueue.length > 0) {\\n\\t\\tlet office = fillSpaceQueue.shift();\\n\\t\\tlet divisionName = office.split('/')[0];\\n\\t\\tlet cityName = office.split('/')[1];\\n\\t\\tawait fillOpenPositions(ns, divisionName, cityName);\\n\\t\\tmyCorporation = c.getCorporation();\\n\\t}\\n}\\n\\n/**\\n * Fill any open positions with employees.\\n * @param {NS} ns\\n * @param {string} divisionName\\n * @param {string} cityName\\n */\\nasync function fillOpenPositions(ns, divisionName, cityName) {\\n\\tif (options.mock) return;\\n\\tlet office = c.getOffice(divisionName, cityName);\\n\\tlet employees = office.employees.map((e) => c.getEmployee(divisionName, cityName, e));\\n\\tlet numUnassigned = employees.filter((e) => e.pos === 'Unassigned').length;\\n\\tlet openJobs = office.size - office.employees.length;\\n\\tfor (let i = 0; i < openJobs; i++) {\\n\\t\\tc.hireEmployee(divisionName, cityName);\\n\\t}\\n\\topenJobs += numUnassigned;\\n\\toffice = c.getOffice(divisionName, cityName);\\n\\tif (openJobs > 0) {\\n\\t\\tif (verbose) log(ns, `Assigning ${openJobs} new employees to work in ${divisionName}/${cityName}`);\\n\\t\\tlet employeesPerJob = Math.floor(office.employees.length / jobs.length);\\n\\t\\tlet employeesLeft = office.employees.length % jobs.length;\\n\\t\\tfor (let i = 0; i < jobs.length; i++) {\\n\\t\\t\\tconst job = jobs[i];\\n\\t\\t\\tlet num = employeesPerJob;\\n\\t\\t\\tif (i < employeesLeft) num++;\\n\\t\\t\\t// if (verbose) log(ns, `Assigning ${num} employees to work as ${job} in ${cityName}`);\\n\\t\\t\\tif (num) await c.setAutoJobAssignment(divisionName, cityName, job, num);\\n\\t\\t}\\n\\t}\\n}\\n\\n/**\\n * Attempt to find a reasonably stable price for each product. This will take several production cycles to stabilize.\\n * @param {NS} ns\\n */\\nasync function doPriceDiscovery(ns) {\\n\\tif (verbose) log(ns, `Doing price discovery for products.`);\\n\\tmyCorporation = c.getCorporation();\\n\\tfor (const division of myCorporation.divisions) {\\n\\t\\tconst industry = industries.find((i) => i.name === division.type);\\n\\t\\t// If we have Market-TA.II researched, just let that work.\\n\\t\\tlet hasMarketTA2 = c.hasResearched(division.name, 'Market-TA.II');\\n\\t\\tif (hasMarketTA2) {\\n\\t\\t\\tfor (const city of division.cities) {\\n\\t\\t\\t\\t// Default prices\\n\\t\\t\\t\\tindustry.prodMats.forEach((material) => c.sellMaterial(division.name, city, material, 'MAX', 'MP'));\\n\\t\\t\\t\\tdivision.products.forEach((product) => c.sellProduct(division.name, city, product, 'MAX', 'MP'));\\n\\t\\t\\t\\t// Turn on automation.\\n\\t\\t\\t\\tindustry.prodMats.forEach((material) => c.setMaterialMarketTA2(division.name, city, material, true));\\n\\t\\t\\t\\tdivision.products.forEach((product) => c.setProductMarketTA2(division.name, product, true));\\n\\t\\t\\t}\\n\\t\\t\\t// No need to do any other price discovery on this division.\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t// Materials are easy. Just sell them for Market price.\\n\\t\\tfor (const materialName of industry.prodMats) {\\n\\t\\t\\tfor (const city of division.cities) {\\n\\t\\t\\t\\t// sometimes in low valuation nodes might not have a warehouse yet\\n\\t\\t\\t\\tif(!c.hasWarehouse(division.name, city)){\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tc.sellMaterial(division.name, city, materialName, 'PROD', 'MP');\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Go through each product, and see if the price needs to be adjusted. We can only\\n\\t\\t// adjust the price on a per-product basis (despite the UI letting you do it\\n\\t\\t// manually, the API is busted.)\\n\\t\\tlet prevProductMultiplier = 1.0;\\n\\t\\tfor (const productName of division.products) {\\n\\t\\t\\tconst product = c.getProduct(division.name, productName);\\n\\t\\t\\tif (product.developmentProgress < 100) continue;\\n\\t\\t\\tlet sPrice = product.sCost;\\n\\t\\t\\t// sPrice ought to be of the form 'MP * 123.45'. If not, we should use the price of the last product we calculated.\\n\\t\\t\\tlet lastPriceMultiplier = prevProductMultiplier;\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tlet sMult = sPrice.split('*')[1];\\n\\t\\t\\t\\tlastPriceMultiplier = Number.parseFloat(sMult);\\n\\t\\t\\t} catch { }\\n\\t\\t\\tlet votes = [];\\n\\t\\t\\tfor (const city of division.cities) {\\n\\t\\t\\t\\t// sometimes in low valuation nodes might not have a warehouse yet\\n\\t\\t\\t\\tif(!c.hasWarehouse(division.name, city)){\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// Each city is going to \\\"vote\\\" for how they want the price to be manipulated.\\n\\t\\t\\t\\tlet qty = product.cityData[city][0];\\n\\t\\t\\t\\tlet produced = product.cityData[city][1];\\n\\t\\t\\t\\tlet sold = product.cityData[city][2];\\n\\t\\t\\t\\t// if (verbose) log(ns, `${division.name}/${city}:${product.name} (qty, prod, sold): ` + product.cityData[city].map((n) => nf(n)));\\n\\n\\t\\t\\t\\tif (produced === sold && qty === 0) {\\n\\t\\t\\t\\t\\t// We sold every item we produced. Vote to double the price.\\n\\t\\t\\t\\t\\tvotes.push(lastPriceMultiplier * 2);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// If we've accumulated a big stockpile, reduce our prices.\\n\\t\\t\\t\\telse if (qty > produced * 100) {\\n\\t\\t\\t\\t\\tvotes.push(lastPriceMultiplier * 0.9);\\n\\t\\t\\t\\t} else if (qty > produced * 40) {\\n\\t\\t\\t\\t\\tvotes.push(lastPriceMultiplier * 0.95);\\n\\t\\t\\t\\t} else if (qty > produced * 20) {\\n\\t\\t\\t\\t\\tvotes.push(lastPriceMultiplier * 0.98);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// Our stock levels must be good. If we sold less than production, then our price is probably high\\n\\t\\t\\t\\telse if (sold < produced) {\\n\\t\\t\\t\\t\\tlet newMultiplier = lastPriceMultiplier;\\n\\t\\t\\t\\t\\tif (sold <= produced * 0.5) {\\n\\t\\t\\t\\t\\t\\tnewMultiplier *= 0.75; // Our price is very high.\\n\\t\\t\\t\\t\\t} else if (sold <= produced * 0.9) {\\n\\t\\t\\t\\t\\t\\tnewMultiplier *= 0.95; // Our price is a bit high.\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tnewMultiplier *= 0.99; // Our price is just barely high\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tvotes.push(newMultiplier);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// If we sold more than production, then our price is probably low.\\n\\t\\t\\t\\telse if (produced < sold) {\\n\\t\\t\\t\\t\\tlet newMultiplier = lastPriceMultiplier;\\n\\t\\t\\t\\t\\tif (sold >= produced * 2) {\\n\\t\\t\\t\\t\\t\\tnewMultiplier *= 2; // We sold way too much. Double the price.\\n\\t\\t\\t\\t\\t} else if (sold >= produced * 1.33) {\\n\\t\\t\\t\\t\\t\\tnewMultiplier *= 1.05; // We sold a bit too much. Bring the price up a bit.\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tnewMultiplier *= 1.01;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tvotes.push(newMultiplier);\\n\\t\\t\\t\\t}\\n\\t\\t\\t} // end for-cities\\n\\t\\t\\t// All of the cities have voted. Use the lowest price that the cities have asked for.\\n\\t\\t\\tvotes.sort((a, b) => a - b);\\n\\t\\t\\tlet newMultiplier = votes[0];\\n\\t\\t\\tlet newPrice = `MP*${newMultiplier.toFixed(3)}`;\\n\\t\\t\\t// if (verbose) log(ns, `${prefix}Votes: ${votes.map((n) => nf(n)).join(', ')}.`);\\n\\t\\t\\tlet sChange = percentChange(lastPriceMultiplier, newMultiplier);\\n\\t\\t\\tif (verbose) log(ns, `    Adjusting '${product.name}' price from ${sPrice} to ${newPrice} (${sChange}).`);\\n\\t\\t\\tc.sellProduct(division.name, hqCity, product.name, 'MAX', newPrice, true);\\n\\t\\t\\tprevProductMultiplier = newMultiplier;\\n\\t\\t} // end for-products\\n\\t} // end for-divisions\\n}\\n\\n/**\\n * Expand to a new city and fill the newly-opened office positions.\\n * @param {NS} ns\\n * @param {string} divisionName\\n * @param {string} cityName\\n */\\nfunction doExpandCity(ns, divisionName, cityName) {\\n\\tc.expandCity(divisionName, cityName);\\n\\tfillSpaceQueue.push(`${divisionName}/${cityName}`);\\n}\\n\\n/**\\n * Spend hashes on something, as long as we have hacknet servers unlocked and a bit of money in the bank.\\n * @param {NS} ns\\n * @param {string} spendOn 'Sell for Corporation Funds' | 'Exchange for Corporation Research'\\n */\\n// async function doSpendHashes(ns, spendOn) {\\n// \\t// Make sure we have a decent amount of money ($100m) before spending hashes this way.\\n// \\tif (ns.getPlayer().money > 100e6 && 9 in dictSourceFiles) {\\n// \\t\\tlet spentHashes = 0;\\n// \\t\\tlet shortName = spendOn;\\n// \\t\\tif (spendOn === 'Sell for Corporation Funds') shortName = '$1B of corporate funding';\\n// \\t\\telse if (spendOn === 'Exchange for Corporation Research') shortName = '1000 research for each corporate division';\\n// \\t\\tdo {\\n// \\t\\t\\tlet numHashes = ns.hacknet.numHashes();\\n// \\t\\t\\tns.hacknet.spendHashes(spendOn);\\n// \\t\\t\\tspentHashes = numHashes - ns.hacknet.numHashes();\\n// \\t\\t\\tif (spentHashes > 0) log(ns, `  Spent ${nf(Math.round(spentHashes / 100) * 100)} hashes on ${shortName}`, 'success');\\n// \\t\\t} while (spentHashes > 0);\\n// \\t}\\n// }\\n\\n/**\\n * Log a message. Optionally, pop up a toast. Optionally, print to the terminal.\\n * @param {NS} ns\\n * @param {string} log message to log\\n * @param {string} toastStyle\\n * @param {boolean} printToTerminal\\n */\\nfunction log(ns, log, toastStyle = '', printToTerminal = false) {\\n\\tns.print(log);\\n\\tif (toastStyle) ns.toast(log, toastStyle);\\n\\tif (printToTerminal) ns.tprint(log);\\n}\\n\\n/**\\n * Assuming a product is named Industry-XX.XX, where XX.XX is the log10() of the budget.\\n * @param {string} projectName\\n * @returns {number} - the budget\\n */\\nfunction budgetFromProductName(projectName) {\\n\\tlet sExp = projectName.split('-')[1];\\n\\tlet exp = Number.parseFloat(sExp);\\n\\treturn Math.pow(10, exp);\\n}\\n\\nfunction getOfficeProductivity(office, forProduct = false) {\\n\\tconst opProd = office.employeeProd.Operations;\\n\\tconst engrProd = office.employeeProd.Engineer;\\n\\tconst mgmtProd = office.employeeProd.Management;\\n\\tconst total = opProd + engrProd + mgmtProd;\\n\\tif (total <= 0) return 0;\\n\\n\\tconst mgmtFactor = 1 + mgmtProd / (1.2 * total);\\n\\tconst prod = (Math.pow(opProd, 0.4) + Math.pow(engrProd, 0.3)) * mgmtFactor;\\n\\tconst balancingMult = 0.05;\\n\\n\\tif (forProduct) return 0.5 * balancingMult * prod;\\n\\telse return balancingMult * prod;\\n}\\n\\n/**\\n * Return the percentage change from from oldVal to NewVal.\\n * @param {number} oldVal\\n * @param {number} newVal\\n * @returns {string} formatted as \\\"+99.9%\\\"\\n */\\nfunction percentChange(oldVal, newVal) {\\n\\tlet percentChange = (newVal / oldVal) * 100 - 100;\\n\\tlet sChange = percentChange + '%';\\n\\tif (percentChange >= 0) sChange = '+' + sChange;\\n\\treturn sChange;\\n}\",\"filename\":\"megacorp.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/2cf5f378-5b3f-4306-8871-bf4b3448dd95\",\"moduleSequenceNumber\":28949},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/b712075f-4e99-41f4-9416-0bc38dafb9e4\",\"moduleSequenceNumber\":28932},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/4e86b986-ca76-43bc-a4f5-1e962788b7c2\",\"moduleSequenceNumber\":28933},{\"filename\":\"megacorp.js\",\"url\":\"blob:https://danielyxie.github.io/a91f6a35-89da-48f3-9143-68078273fecf\",\"moduleSequenceNumber\":29018}],\"dependents\":[],\"ramUsage\":1025.5,\"server\":\"home\",\"moduleSequenceNumber\":29018,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"ns\",\"name\":\"corporation\",\"cost\":1022.4},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { boxTailSingleton } from 'utils.js';\\nlet ns;\\n\\n/** @param {NS} pns **/\\nexport async function main(pns) {\\n    ns = pns\\n    // ns.disableLog('ALL');\\n    // ns.clearLog();\\n    // boxTailSingleton(ns, 'player', '⛹', '200px');\\n    let lastSolverRun = Date.now();\\n    while (true) {\\n        await ns.sleep(100);\\n\\n        if (ns.getServerMaxRam('home') >= 128 && (Date.now() - lastSolverRun > 5 * 60 * 1000)) {\\n            if (ns.exec('autosolver.js', 'home') > 0)\\n                lastSolverRun = Date.now();\\n        }\\n\\n        if (ns.heart.break() < -54000 && !ns.fileExists('/tmp/ingang.txt')) {\\n            ns.exec('startGang.js', 'home');\\n        }\\n        if (!ns.fileExists('/tmp/incorp.txt') && ns.getServerMoneyAvailable('home') > 150_000_000_000) {\\n            ns.exec('megacorp.js', 'home');\\n        }\\n        const player = ns.getPlayer();\\n        if (!player.factions.includes(\\\"Bladeburners\\\")\\n            && (player.strength > 100 && player.defense > 100 && player.dexterity > 100 || player.agility > 100)) {\\n            ns.exec('joinBladeburners.js', 'home');\\n        }\\n    }\\n}\",\"filename\":\"player.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"player.js\",\"url\":\"blob:https://danielyxie.github.io/cb271be2-0fdd-473f-8ad2-268574ca9a02\",\"moduleSequenceNumber\":29015}],\"dependents\":[],\"ramUsage\":3.65,\"server\":\"home\",\"moduleSequenceNumber\":29015,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { list_servers } from 'opened_servers.js';\\nimport { recursiveScan } from 'find_server.js';\\nimport { boxTailSingleton, copyHackingFiles } from 'utils.js';\\n\\nfunction maxHackLevel(hackingMultiples) {\\n    if (hackingMultiples < 2)\\n        return 150;\\n    else if (hackingMultiples < 3)\\n        return 250\\n    else if (hackingMultiples < 4)\\n        return 350\\n    else if (hackingMultiples < 5)\\n        return 450\\n    else if (hackingMultiples < 6)\\n        return 600;\\n    else if (hackingMultiples < 8)\\n        return 800;\\n    return 25000;\\n}\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog('scan');\\n    ns.disableLog('getHackingLevel');\\n    ns.disableLog('installBackdoor');\\n    ns.disableLog('hasRootAccess');\\n    ns.disableLog('getServerNumPortsRequired');\\n    ns.disableLog('fileExists');\\n    ns.disableLog('sleep');\\n    const player = JSON.parse(ns.read('/tmp/player.txt'));\\n    const bitNode = JSON.parse(ns.read(`/tmp/getBitNodeMultipliers.txt`));\\n    const mult = bitNode.HackingLevelMultiplier * player.hacking_mult + bitNode.HackExpGain * player.hacking_exp_mult;\\n    const maxHack = maxHackLevel(mult);\\n    boxTailSingleton(ns, 'ensureroot', '🗝', '200px');\\n    ns.clearLog();\\n    ns.print(`mul ${mult}, max hack ${maxHack}`);\\n    let hosts = list_servers(ns).filter(o => o.indexOf('pserv') === -1 && o !== 'darkweb');\\n    let oldhostLength = hosts.length;\\n    do {\\n        let servers = [];\\n        for (const host of hosts) {\\n            const fp = `/tmp/${host.replaceAll(/[\\\\.\\\\s]/g, '_')}.txt`;\\n            const data = ns.read(fp);\\n            let server;\\n            try {\\n                server = JSON.parse(data);\\n            } catch (e) {\\n                ns.print(`${fp} BAD JSON ${e.message} ${data}`);\\n                continue;\\n            }\\n            server.hasAdminRights = server.hasAdminRights || ensureRootAccess(ns, server);\\n            await copyHackingFiles(ns, server);\\n            if (server.hasAdminRights) {\\n                server.backdoorInstalled = server.backdoorInstalled || (await ensureBackdoor(ns, server));\\n            }\\n            //ns.print(`${server.hostname} ${server.hasAdminRights} && ${server.backdoorInstalled}`);\\n            await ns.write(fp, JSON.stringify(server, null, 2), \\\"w\\\");\\n            servers.push(server);\\n        }\\n        hosts = servers\\n            .filter((s) => !(s.hasAdminRights && s.backdoorInstalled) && s.requiredHackingSkill <= maxHack)\\n            .map(o => o.hostname);\\n\\n        if (oldhostLength !== hosts.length)\\n            ns.print('Hosts to backdoor ' + JSON.stringify(hosts));\\n        oldhostLength = hosts.length;\\n        await ns.sleep(5000);\\n    } while (hosts.length > 0);\\n}\\n\\nasync function ensureBackdoor(ns, server) {\\n    if (server.requiredHackingSkill <= ns.getHackingLevel()) {\\n        if (!server.backdoorInstalled) {\\n            ns.connect('home');\\n            let route = [];\\n            recursiveScan(ns, '', 'home', server.hostname, route);\\n            for (const r of route) {\\n                if (!ns.connect(r)) {\\n                    ns.print(`Failed to connect to ${r}`);\\n                    return false;\\n                }\\n            }\\n            ns.print(\\\"backdooring \\\" + server.hostname);\\n            await ns.installBackdoor();\\n            ns.print(\\\"backdoor installed \\\" + server.hostname);\\n            ns.connect('home');\\n        }\\n        return true;\\n    }\\n    return false;\\n}\\n\\nfunction ensureRootAccess(ns, server) {\\n    if (server.hostname === \\\"home\\\" || server.purchasedByPlayer || server.hasAdminRights) return true;\\n    let portsReq = server.numOpenPortsRequired;\\n    let maxPorts = countPorts(ns);\\n    if (portsReq <= maxPorts) {\\n        if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            ns.brutessh(server.hostname);\\n        }\\n        if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            ns.httpworm(server.hostname);\\n        }\\n        if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ns.ftpcrack(server.hostname);\\n        }\\n        if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            ns.relaysmtp(server.hostname);\\n        }\\n        if (ns.fileExists(\\\"sqlInject.exe\\\", \\\"home\\\")) {\\n            ns.sqlinject(server.hostname);\\n        }\\n        ns.nuke(server.hostname);\\n        ns.print(\\\"nuked \\\" + server.hostname);\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction countPorts(ns) {\\n    let ports = 0\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ports++;\\n    }\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n        ports++;\\n    }\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n        ports++;\\n    }\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n        ports++;\\n    }\\n    if (ns.fileExists(\\\"sqlInject.exe\\\", \\\"home\\\")) {\\n        ports++;\\n    }\\n    return ports\\n}\\n\\nexport function autocomplete(data, args) {\\n    return data.servers;\\n}\",\"filename\":\"ensureRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/100a69cb-d0eb-4b04-82ce-ec59bd29a307\",\"moduleSequenceNumber\":28949},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/601419dd-b9f2-4e61-81bf-a927c181b8d4\",\"moduleSequenceNumber\":28932},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/fefb2be1-09e8-4ab3-b347-60a6c72addfb\",\"moduleSequenceNumber\":28933},{\"filename\":\"find_server.js\",\"url\":\"blob:https://danielyxie.github.io/328298b0-45c2-471d-804e-97923c78d8b1\",\"moduleSequenceNumber\":28934},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/1527e7c1-1119-4fec-a647-515141c120ae\",\"moduleSequenceNumber\":28932},{\"filename\":\"ensureRoot.js\",\"url\":\"blob:https://danielyxie.github.io/91a017e5-ee6e-4ec2-a130-70af6a8e677e\",\"moduleSequenceNumber\":29022}],\"dependents\":[],\"ramUsage\":7.35,\"server\":\"home\",\"moduleSequenceNumber\":29022,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let doc = eval(\\\"document\\\");\\n\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.tail();\\n    ns.travelToCity(\\\"Aevum\\\");\\n    ns.goToLocation(\\\"Iker Molina Casino\\\");\\n\\n    await playRoulette(ns);\\n    const alertSpan = find(`//span[text() = \\\"${kickedOutAlert}\\\"]`);\\n    if (alertSpan) {\\n        find('/html/body/div[4]/div[1]')?.click();\\n    }\\n}\\n\\nfunction arraysPercentEqual(a, b) {\\n    if (a === b) return 1;\\n    if (a == null || b == null) return 0;\\n    if (a.length !== b.length) return 0;\\n\\n    // If you don't care about the order of the elements inside\\n    // the array, you should sort both arrays here.\\n    // Please note that calling sort on an array will modify that array.\\n    // you might want to clone your array first.\\n    let equalness = 0;\\n    for (let i = 0; i < a.length; ++i) {\\n        if (a[i] === b[i]) equalness++;\\n    }\\n    return equalness / a.length;\\n}\\n\\nasync function playRoulette(ns) {\\n    const btnRoulette = find(\\\"//button[contains(text(), 'roulette')]\\\");\\n    if (!btnRoulette) return ns.tprint(\\\"ERROR: Attempt to automatically navigate to the Casino appears to have failed.\\\");\\n    const startSeed = new Date().getTime();\\n    await click(btnRoulette);\\n    const after = new Date().getTime();\\n    const seedRange = after - startSeed;\\n    ns.print(`whrngSeedRange ${seedRange}`);\\n    await ns.sleep(1);\\n    const minPlay = 0;\\n    const maxPlay = 1e7;\\n    const inputWager = find(\\\"//input\\\");\\n    // inputWager.value = minPlay;\\n    await setText2(inputWager, `${minPlay}`);\\n    const sampleSize = 10;\\n    const button1 = find(\\\"//button[text() = '1']\\\");\\n    const results = [];\\n    for (let i = 0; i < sampleSize; i++) {\\n        await click(button1);\\n        const r = await getSpinResult(ns);\\n\\n        if (r === -1) {\\n            ns.print('Results not found quiting leave casino try again');\\n            return;\\n        }\\n        results.push(r);\\n    }\\n    ns.print(`Results ${results.map(o => ns.nFormat(o, '00')).join(',')}`);\\n    let goodSeeds = [];\\n    for (let j = 0; j < seedRange; j++) {\\n        const seedTest = []\\n        let whrng = new WHRNG(startSeed + j);\\n        for (let i = 0; i < sampleSize; i++) {\\n            seedTest.push(whrng.randomRouletteNumber());\\n        }\\n        const percentEqual = arraysPercentEqual(results, seedTest);\\n        if (percentEqual >= .9) {\\n            goodSeeds.push(whrng);\\n            ns.print(`Seed is ${startSeed + j} with equality of ${percentEqual.toPrecision(2)} took ${j} attempts`);\\n        }\\n        ns.print(`Seed ${ns.nFormat(j, '00')} ${seedTest.map(o => ns.nFormat(o, '00')).join(',')} ${percentEqual.toPrecision(2)} ${whrng.v}`);\\n    }\\n    if (goodSeeds.length === 1) {\\n        await playToWinRoulette(ns, goodSeeds[0], inputWager, maxPlay);\\n    } else if (goodSeeds.length > 1) {\\n        ns.print('Too many match, increase sample size');\\n        ns.goToLocation('Slums');\\n        await playRoulette(ns);\\n    } else {\\n        ns.print('No seeds match, probably a win translated to a loss and incremented seed');\\n        ns.goToLocation('Slums');\\n        await playRoulette(ns);\\n    }\\n}\\n\\nconst kickedOutAlert = 'Alright cheater get out of here. You\\\\'re not allowed here anymore.';\\nasync function playToWinRoulette(ns, whrng, inputWager, maxPlay) {\\n    // maxPlay = 0; //testing value\\n    let losses = 0;\\n    let plays = 0;\\n    // while (true) {\\n    while (!find(`//span[text() = \\\"${kickedOutAlert}\\\"]`)) {\\n        // inputWager.value = Math.floor(Math.min(maxPlay, ns.getPlayer().money));\\n        await setText2(inputWager, `${Math.floor(Math.min(maxPlay, ns.getServerMoneyAvailable('home')))}`);\\n        const luckynumber = whrng.randomRouletteNumber();\\n        const button = find(`//button[text() = '${luckynumber}']`);\\n        // ns.print(`Clicking ${button.innerHTML}`);\\n        await click(button);\\n        plays++;\\n        const result = await getSpinResult(ns);\\n        ns.print(`number lucky ${luckynumber} actual ${result}`);\\n        if (luckynumber !== result) {\\n            losses++;\\n            // uncomment this for ver > 1.6.4\\n            // whrng.randomRouletteNumber();\\n        }\\n        if (losses / plays > .91) {\\n            ns.print('Somethings broken loses are greater than expected');\\n            return;\\n        }\\n    }\\n}\\n\\nasync function getSpinResult(ns) {\\n    while (true) {\\n        let result1 = find(\\\"//h4[contains(text(), 'lost')]\\\") || find(\\\"//h4[contains(text(), 'Lost')]\\\");\\n        let result2 = find(\\\"//h4[contains(text(), 'won')]\\\") || find(\\\"//h4[contains(text(), 'Won')]\\\");\\n        if (result1 == null && result2 == null) {\\n            await ns.sleep(100);\\n        }\\n        else {\\n            break;\\n        }\\n    }\\n\\n    await ns.sleep(20);\\n    let resultAnswer = find(\\\"(//h4)[2]\\\");\\n    if (resultAnswer != null) {\\n        let answer = resultAnswer.textContent;\\n        return parseInt(answer.replaceAll(/B|R/g, ''));\\n    }\\n\\n    return -1;\\n}\\n\\nconst WHRNG = function (totalPlaytime) {\\n    // This one is seeded by the players total play time.\\n    const v = (totalPlaytime / 1000) % 30000;\\n    this.s1 = v;\\n    this.s2 = v;\\n    this.s3 = v;\\n    this.v = v;\\n    this.step = function () {\\n        this.s1 = (171 * this.s1) % 30269;\\n        this.s2 = (172 * this.s2) % 30307;\\n        this.s3 = (170 * this.s3) % 30323;\\n    }\\n    this.random = function () {\\n        this.step();\\n        return (this.s1 / 30269.0 + this.s2 / 30307.0 + this.s3 / 30323.0) % 1.0;\\n    }\\n    this.randomRouletteNumber = () => {\\n        return Math.floor(this.random() * 37);\\n    }\\n}\\n\\n// Some DOM helpers (partial credit to ShamesBond)\\nasync function click(elem) { await elem[Object.keys(elem)[1]].onClick({ isTrusted: true }); }\\nasync function setText2(input, text) { await input[Object.keys(input)[1]].onChange({ isTrusted: true, currentTarget: { value: text } }); }\\nfunction find(xpath) { return doc.evaluate(xpath, doc, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue; }\",\"filename\":\"casinoBreaker.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"casinoBreaker.js\",\"url\":\"blob:https://danielyxie.github.io/267a7e73-c0fa-4e1d-84c4-82733f83bb0f\",\"moduleSequenceNumber\":28971}],\"dependents\":[],\"ramUsage\":8.7,\"server\":\"home\",\"moduleSequenceNumber\":28971,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.goToLocation\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nNew node init script must stay below 32GB\\n- make > $200k\\n- Hack Casino for $10b\\n- Upgrade home ram to 1TB\\n- Run init.js\\n */\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getServerMaxRam');\\n\\tns.disableLog('getUpgradeHomeRamCost');\\n\\tns.disableLog('getPlayer');\\n\\tns.clearLog();\\n\\tns.tail();\\n\\tlet casinoBreakerPid = 0;\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(100);\\n\\t\\tconst player = ns.getPlayer();\\n\\n\\t\\t//need a min of 1030 for corporation apis\\n\\t\\tif (ns.getServerMaxRam('home') <= 1024 && player.money > ns.getUpgradeHomeRamCost()) {\\n\\t\\t\\tns.upgradeHomeRam();\\n\\t\\t}\\n\\n\\t\\tif (casinoBreakerPid === -1 && ns.getServerMaxRam('home') > 1024) {\\n\\t\\t\\t//All done time to init\\n\\t\\t\\tns.exec('init.js', 'home');\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tif (casinoBreakerPid !== 0) {\\n\\t\\t\\tcasinoBreakerPid = ns.isRunning(casinoBreakerPid) ? casinoBreakerPid : -1;\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (player.money > 200000 && casinoBreakerPid === 0) {\\n\\t\\t\\twhile (ns.isBusy()) {\\n\\t\\t\\t\\t// need to finish crime before hitting the casino\\n\\t\\t\\t\\tawait ns.sleep(20);\\n\\t\\t\\t}\\n\\t\\t\\tcasinoBreakerPid = ns.exec('casinoBreaker.js', 'home');\\n\\t\\t\\tif (casinoBreakerPid === 0) {\\n\\t\\t\\t\\tcasinoBreakerPid = ns.getRunningScript('casinoBreaker.js', 'home').pid;\\n\\t\\t\\t\\tns.print(`casinoBreakerPid ${casinoBreakerPid}`);\\n\\t\\t\\t}\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (ns.isBusy() || casinoBreakerPid !== 0) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.commitCrime('shoplift');\\n\\t}\\n}\",\"filename\":\"bootstrap32GB.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"bootstrap32GB.js\",\"url\":\"blob:https://danielyxie.github.io/b2d1bbec-194d-4052-83d7-13107e2adae3\",\"moduleSequenceNumber\":7162}],\"dependents\":[],\"ramUsage\":13.85,\"server\":\"home\",\"moduleSequenceNumber\":28955,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"singularity.commitCrime\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { list_servers } from 'opened_servers.js';\\nimport { boxTailSingleton, ramUsage } from 'utils.js';\\nimport { calculateGrowThreads } from './growthFunctions.js';\\n\\nlet ns;\\nconst weaken_script = \\\"weaken.js\\\";\\nconst grow_script = \\\"grow.js\\\";\\nconst hack_script = \\\"hack.js\\\";\\nlet hack_scriptRam = 1.7;\\nlet grow_scriptRam, weaken_scriptRam = 1.75;\\nlet ServerGrowthRate = 1;\\nlet serversForExecution = [];\\nlet hackStatus = [];\\n/** @param {NS} pns **/\\nexport async function main(pns) {\\n\\tns = pns;\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('exec')\\n\\tboxTailSingleton(ns, 'mcp', '🥾', '200px');\\n\\tns.clearLog();\\n\\tweaken_scriptRam = ns.getScriptRam(weaken_script, \\\"home\\\");\\n\\tgrow_scriptRam = ns.getScriptRam(grow_script, \\\"home\\\");\\n\\thack_scriptRam = ns.getScriptRam(hack_script, \\\"home\\\");\\n\\t; ({ ServerGrowthRate } = JSON.parse(ns.read('/tmp/getBitNodeMultipliers.txt')))\\n\\tawait run();\\n}\\nlet hackPercent = .5;\\nlet bonusServers = 0;\\nasync function updateServerLists() {\\n\\tserversForExecution = ['home'].concat(list_servers(ns).filter(s => ns.hasRootAccess(s)));\\n\\tconst beforeHackStatusLength = hackStatus.length;\\n\\tconst serversToHack = list_servers(ns).filter(s => ns.hasRootAccess(s)\\n\\t\\t&& ns.getServerMaxMoney(s) > 0\\n\\t\\t&& ns.getServerRequiredHackingLevel(s) <= ns.getHackingLevel() / 2);\\n\\n\\thackStatus = [];\\n\\tconst skippedServer = []\\n\\tconst player = ns.getPlayer();\\n\\tfor (const server of serversToHack) {\\n\\t\\tconst s = ns.getServer(server);\\n\\t\\ts.hackDifficulty = s.minDifficulty;\\n\\t\\t// check that hacks will succeed. Could be redundant check\\n\\t\\tconst hackChance = ns.formulas.hacking.hackChance(s, player);\\n\\t\\tif (hackChance < .99) {\\n\\t\\t\\t//ns.print(`Hack chance to low ${s} ${(hackChance * 100).toFixed(2)}%`)\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (s.serverGrowth < 40) {\\n\\t\\t\\t//ns.print(`Growth is to low ${s} ${s.serverGrowth}%`)\\n\\t\\t\\tskippedServer.push({ server: server });\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\thackStatus.push({ server: server });\\n\\t}\\n\\tconst lowRamUse = ramUsage(ns) < .5;\\n\\tconst oldHackPercent = hackPercent;\\n\\tconst oldBonusServers = bonusServers;\\n\\tif (lowRamUse) {\\n\\t\\thackPercent = Math.min(hackPercent + .1, .95);\\n\\t\\tif (hackPercent === .95) {\\n\\t\\t\\tbonusServers = Math.min(bonusServers + 1, skippedServer.length);\\n\\t\\t\\thackStatus.push(...skippedServer.slice(0, bonusServers));\\n\\t\\t}\\n\\t} else {\\n\\t\\tbonusServers = Math.max(bonusServers - 1, 0);\\n\\t\\tif (bonusServers <= 0) hackPercent = Math.max(hackPercent - .1, .5);\\n\\t}\\n\\tif (oldHackPercent !== hackPercent || oldBonusServers !== bonusServers) ns.tprint(`BonusServers added ${bonusServers} Hack percent ${hackPercent}`);\\n\\t// after aug install just start hacking on n00dles fist\\n\\tif (hackStatus.length === 0) hackStatus.push({ server: 'n00dles' });\\n\\tif (beforeHackStatusLength < hackStatus.length) ns.tprint(`Servers to hack ${hackStatus.length} ${hackStatus.map(o => o.server).join(',')}`);\\n}\\n\\nasync function run() {\\n\\tlet i = 0;\\n\\tawait updateServerLists();\\n\\tlet updateAfter = Date.now().valueOf() + 30 * 1000;\\n\\twhile (true) {\\n\\t\\tif (!hackStatus[i].pid || (hackStatus[i].pid && !ns.isRunning(hackStatus[i].pid.weaken))) {\\n\\t\\t\\tconst ret = await runHGW(hackStatus[i].server);\\n\\t\\t\\thackStatus[i] = ret;\\n\\t\\t}\\n\\t\\ti = (i + 1) % hackStatus.length;\\n\\t\\tawait ns.sleep(20);\\n\\t\\tif (updateAfter < Date.now()) {\\n\\t\\t\\tupdateAfter = Date.now() + 30 * 1000;\\n\\t\\t\\tawait updateServerLists();\\n\\t\\t\\ti = 0;\\n\\t\\t}\\n\\t}\\n}\\n\\nasync function runHGW(target) {\\n\\tconst currentSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\n\\tif (currentSec > 2) {\\n\\t\\tconst weaken = await runWeaken(target, 1, 1);\\n\\t\\treturn { server: target, promise: ns.asleep(weaken.time + 200), pid: { weaken: weaken.pid } };\\n\\t}\\n\\tconst hack = await runHack(target);\\n\\tconst grow = await runGrow(target, hack.amount);\\n\\tconst weaken = await runWeaken(target, hack.threadsCommitted, grow.threadsCommitted);\\n\\treturn { server: target, promise: ns.asleep(weaken.time + 200), pid: { weaken: weaken.pid, hack: hack.pid, grow: grow.pid } };\\n}\\n\\n//TODO move thread planning for HGW all together before exec\\nasync function runWeaken(target, hackThreads, growThreads) {\\n\\tconst ret = { time: 0, threadsCommitted: 0, pid: 0 };\\n\\tlet security = ns.growthAnalyzeSecurity(growThreads);\\n\\tsecurity += ns.hackAnalyzeSecurity(hackThreads);\\n\\t// slash the security if not at min to prep it\\n\\tconst currentSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\n\\tif (currentSec > 0) {\\n\\t\\tsecurity += currentSec\\n\\t}\\n\\tconst threadsNeeded = Math.max(Math.ceil(security / ns.weakenAnalyze(1, 1)), 1);\\n\\tconst homeThreadsNeeded = Math.max(Math.ceil(security / ns.weakenAnalyze(1, getCores('home'))), 1);\\n\\tconst { host, threads_available } = getHostAndThreads(weaken_scriptRam, threadsNeeded, homeThreadsNeeded);\\n\\tif (!host) return ret;\\n\\tlet threadToUse = Math.min(threads_available, threadsNeeded);\\n\\tif (host === 'home') { //hurray home for grow\\n\\t\\tthreadToUse = Math.min(threads_available, homeThreadsNeeded);\\n\\t}\\n\\tret.pid = await ns.exec(weaken_script, host, threadToUse, target, Math.random());\\n\\tret.time = ns.formulas.hacking.weakenTime(ns.getServer(target), ns.getPlayer());\\n\\tconst message = `Weak ${host}[${threadToUse}] -> ${target} in ${ns.tFormat(ret.time)}]`;\\n\\tif (ret.pid === 0) {\\n\\t\\tns.tprint('FAILED ' + message);\\n\\t\\tns.print('FAILED ' + message);\\n\\t\\treturn ret;\\n\\t}\\n\\tret.threadsCommitted = threadToUse;\\n\\treturn ret;\\n}\\n\\nasync function runGrow(target, hackAmount) {\\n\\tconst ret = { time: 0, threadsCommitted: 0, pid: 0 };\\n\\t// grow to counter the hack or just to fill up the server with money\\n\\tconst moneyToGrow = Math.max(hackAmount, ns.getServerMaxMoney(target) - ns.getServerMoneyAvailable(target));\\n\\tconst homeThreadsNeeded = Math.floor(calculateGrowThreads(ns, target, moneyToGrow, getCores('home'), { ServerGrowthRate }));\\n\\tconst threadsNeeded = Math.floor(calculateGrowThreads(ns, target, moneyToGrow, 1, { ServerGrowthRate }));\\n\\tconst { host, threads_available } = getHostAndThreads(grow_scriptRam, threadsNeeded, homeThreadsNeeded);\\n\\tif (!host) return ret;\\n\\tlet threadToUse = Math.min(threads_available, threadsNeeded);\\n\\tif (host === 'home') { //hurray home for grow\\n\\t\\tthreadToUse = Math.min(threads_available, homeThreadsNeeded);\\n\\t}\\n\\tif (threadToUse < 1) {\\n\\t\\treturn ret;\\n\\t}\\n\\tret.pid = await ns.exec(grow_script, host, threadToUse, target, Math.random());\\n\\tret.time = ns.formulas.hacking.growTime(ns.getServer(target), ns.getPlayer());\\n\\tconst message = `Grow ${host}[${threadToUse}] -> ${target} in ${ns.tFormat(ret.time)}]`;\\n\\tif (ret.pid === 0) {\\n\\t\\tns.tprint('FAILED ' + message);\\n\\t\\tns.print('FAILED ' + message);\\n\\t\\treturn ret;\\n\\t}\\n\\tret.threadsCommitted = threadToUse;\\n\\treturn ret;\\n}\\n\\nasync function runHack(target) {\\n\\tconst ret = { time: 0, threadsCommitted: 0, pid: 0, amount: 0 };\\n\\tconst threadsNeeded = Math.max(Math.floor(hackPercent / ns.formulas.hacking.hackPercent(ns.getServer(target), ns.getPlayer())), 1);\\n\\tconst { host, threads_available } = getHostAndThreads(hack_scriptRam, threadsNeeded, threadsNeeded * 1.1 /*try to dissuade hacks on home*/);\\n\\tif (!host) return ret;\\n\\tlet threadToUse = Math.min(threads_available, threadsNeeded);\\n\\tif (ns.getServerMoneyAvailable(target) / ns.getServerMaxMoney(target) < .9) {\\n\\t\\tthreadToUse = 1; // 0 or 1 just don't hack if server is not prepped\\n\\t}\\n\\n\\tconst cashingOut = ns.hackAnalyze(target) * threadToUse * ns.getServerMoneyAvailable(target);\\n\\tret.pid = await ns.exec(hack_script, host, threadToUse, target, Math.random());\\n\\tret.time = ns.formulas.hacking.hackTime(ns.getServer(target), ns.getPlayer());\\n\\tconst message = `Hack ${host}[${threadToUse}] -> ${target}[${ns.nFormat(cashingOut, \\\"($ 0.00 a)\\\")} in ${ns.tFormat(ret.time)}]`;\\n\\tif (ret.pid === 0) {\\n\\t\\tns.tprint('FAILED ' + message);\\n\\t\\tns.print('FAILED ' + message);\\n\\t\\treturn ret;\\n\\t}\\n\\tret.amount = cashingOut;\\n\\tns.print(message);\\n\\tret.threadsCommitted = threadToUse;\\n\\treturn ret;\\n}\\n\\nconst getCores = (host) => ns.getServer(host).cpuCores;\\nfunction getHostAndThreads(scriptRam, threadsNeeded, threadsNeededOnHome) {\\n\\tthreadsNeededOnHome = threadsNeededOnHome || threadsNeeded;\\n\\tconst hosts = serversForExecution.map((host) => {\\n\\t\\tlet maxRam = ns.getServerMaxRam(host);\\n\\t\\t// reserve some ram for other scripts\\n\\t\\tif (host === 'home') {\\n\\t\\t\\tmaxRam = Math.max(maxRam * .75, maxRam - 128);\\n\\t\\t}\\n\\t\\tconst threads_available = Math.floor((maxRam - ns.getServerUsedRam(host)) / scriptRam);\\n\\t\\tconst threadsAvailMinusNeed = host === 'home' ? threads_available - threadsNeededOnHome : threads_available - threadsNeeded;\\n\\t\\treturn { threads_available, host, threadsAvailMinusNeed };\\n\\t}).filter((hostO) => hostO.threads_available >= 1);\\n\\tif (hosts.length <= 0) return { host: null, threads_available: 0 };\\n\\thosts.sort((a, b) => a.threadsAvailMinusNeed - b.threadsAvailMinusNeed);\\n\\t// take the closet fit from front of the array or just the biggest threads available from the end\\n\\treturn hosts.filter(o => o.threadsAvailMinusNeed >= 0).shift() || hosts.pop();\\n}\",\"filename\":\"mcp_hgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"growthFunctions.js\",\"url\":\"blob:https://danielyxie.github.io/84068b19-e8b5-41c3-b724-5493f404b194\",\"moduleSequenceNumber\":28957},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/439dbf46-4f5e-48e6-b242-2f161c1c4d8f\",\"moduleSequenceNumber\":28949},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/15c8a054-ebd7-4a71-9e02-6893c22e6db7\",\"moduleSequenceNumber\":28932},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/14e8100e-e96f-4568-aefd-9f119f7967af\",\"moduleSequenceNumber\":28933},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/1381f475-e65c-4125-a186-eecb64e32906\",\"moduleSequenceNumber\":28932},{\"filename\":\"mcp_hgw.js\",\"url\":\"blob:https://danielyxie.github.io/96c999d0-bc7c-4a3e-acf3-a33824814c37\",\"moduleSequenceNumber\":29023}],\"dependents\":[],\"ramUsage\":12.5,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":29023,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @author modar <gist.github.com/xmodar>\\n * {@link https://www.reddit.com/r/Bitburner/comments/tgtkr1/here_you_go_i_fixed_growthanalyze_and_growpercent/}\\n *\\n * @typedef {Partial<{\\n *   moneyAvailable: number;\\n *   hackDifficulty: number;\\n *   ServerGrowthRate: number // ns.getBitNodeMultipliers().ServerGrowthRate\\n *   ; // https://github.com/danielyxie/bitburner/blob/dev/src/BitNode/BitNode.tsx\\n * }>} GrowOptions\\n */\\n\\nexport function calculateGrowGain(ns, host, threads = 1, cores = 1, opts = {}) {\\n    threads = Math.max(Math.floor(threads), 0);\\n    const moneyMax = ns.getServerMaxMoney(host);\\n    const { moneyAvailable = ns.getServerMoneyAvailable(host) } = opts;\\n    const rate = growPercent(ns, host, threads, cores, opts);\\n    return Math.min(moneyMax, rate * (moneyAvailable + threads)) - moneyAvailable;\\n}\\n\\n/** @param {number} gain money to be added to the server after grow */\\nexport function calculateGrowThreads(ns, host, gain, cores = 1, opts = {}) {\\n    const moneyMax = ns.getServerMaxMoney(host);\\n    const { moneyAvailable = ns.getServerMoneyAvailable(host) } = opts;\\n    const money = Math.min(Math.max(moneyAvailable + gain, 0), moneyMax);\\n    const rate = Math.log(growPercent(ns, host, 1, cores, opts));\\n    const logX = Math.log(money * rate) + moneyAvailable * rate;\\n    return Math.max(lambertWLog(logX) / rate - moneyAvailable, 0);\\n}\\n\\nfunction growPercent(ns, host, threads = 1, cores = 1, opts = {}) {\\n    const { ServerGrowthRate = 1, hackDifficulty = ns.getServerSecurityLevel(host), } = opts;\\n    const growth = ns.getServerGrowth(host) / 100;\\n    const multiplier = ns.getPlayer().hacking_grow_mult;\\n    const base = Math.min(1 + 0.03 / hackDifficulty, 1.0035);\\n    const power = growth * ServerGrowthRate * multiplier * ((cores + 15) / 16);\\n    return base ** (power * threads);\\n}\\n\\n/**\\n * Lambert W-function for log(x) when k = 0\\n * {@link https://gist.github.com/xmodar/baa392fc2bec447d10c2c20bbdcaf687}\\n */\\nfunction lambertWLog(logX) {\\n    if (isNaN(logX)) return NaN;\\n    const logXE = logX + 1;\\n    const logY = 0.5 * log1Exp(logXE);\\n    const logZ = Math.log(log1Exp(logY));\\n    const logN = log1Exp(0.13938040121300527 + logY);\\n    const logD = log1Exp(-0.7875514895451805 + logZ);\\n    let w = -1 + 2.036 * (logN - logD);\\n    w *= (logXE - Math.log(w)) / (1 + w);\\n    w *= (logXE - Math.log(w)) / (1 + w);\\n    w *= (logXE - Math.log(w)) / (1 + w);\\n    return isNaN(w) ? (logXE < 0 ? 0 : Infinity) : w;\\n}\\nconst log1Exp = (x) => x <= 0 ? Math.log(1 + Math.exp(x)) : x + log1Exp(-x);\",\"filename\":\"growthFunctions.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"home\",\"moduleSequenceNumber\":28957,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Basic window class that other widgets are built on\\nexport class curse_window {\\n\\tconstructor (ns, border=false, height=27, width=51) {\\n\\t\\tthis.ns = ns;\\n\\t\\t\\n\\t\\t// Disable log to prevent it from interfering with display\\n\\t\\tthis.ns.disableLog(\\\"ALL\\\");\\n\\t\\t\\n\\t\\t// Relationship to other windows\\n\\t\\t// isChild = false means this is the object running the display\\n\\t\\tthis.ischild = false;\\n\\t\\tthis.childwin = [];\\n\\t\\t\\n\\t\\t// Size of the buffer being output to the log\\n\\t\\tthis.height = height;\\n\\t\\tthis.width = width;\\n\\t\\t\\n\\t\\t// Location coordinates if set as child\\n\\t\\t// Relative to parent window\\n\\t\\tthis.x = 0;\\n\\t\\tthis.y = 0;\\n\\t\\t\\n\\t\\t// TODO: Unused, planned to sort windows by priority\\n\\t\\tthis.layer = 0;\\n\\t\\t\\n\\t\\t// Window can have a border, default false\\n\\t\\tthis.border = border;\\n\\t\\tthis.border_top = true;\\n\\t\\tthis.border_bottom = true;\\n\\t\\tthis.border_left = true;\\n\\t\\tthis.border_right = true;\\n\\t\\t\\n\\t\\t// Run once to build the buffer\\n\\t\\tthis.clearBuffer();\\n\\t}\\n\\t\\n\\t// Convenience handler to attach child window\\n\\taddChild(handle, x, y) {\\n\\t\\thandle.setPosition(x, y);\\n\\t\\thandle.ischild = true;\\n\\t\\thandle.parenthandle = this;\\n\\t\\tthis.childwin.push(handle);\\n\\t}\\n\\t\\n\\t// Get dimensions of the drawing area\\n\\tgetSubDimensions () {\\n\\t\\tlet bordervbuff = 0;\\n\\t\\tlet borderwbuff = 0;\\n\\t\\tif (this.border) {\\n\\t\\t\\tif (this.border_top) {\\n\\t\\t\\t\\tbordervbuff++\\n\\t\\t\\t}\\n\\t\\t\\tif (this.border_bottom) {\\n\\t\\t\\t\\tbordervbuff++\\n\\t\\t\\t}\\n\\t\\t\\tif (this.border_left) {\\n\\t\\t\\t\\tborderwbuff++\\n\\t\\t\\t}\\n\\t\\t\\tif (this.border_right) {\\n\\t\\t\\t\\tborderwbuff++\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn [this.width - borderwbuff, this.height - bordervbuff];\\n\\t}\\n\\t\\n\\t// Resize the window\\n\\tsetDimensions (height, width) {\\n\\t\\tthis.height = height;\\n\\t\\tthis.width = width;\\n\\t\\tthis.clearBuffer();\\n\\t}\\n\\t\\n\\t// Change position relative to parent window\\n\\tsetPosition (x, y) {\\n\\t\\tthis.x = x;\\n\\t\\tthis.y = y;\\n\\t}\\n\\t\\n\\t// Internal function used to print over existing text\\n\\tsubstringReplace (index, source, text) {\\n\\t\\tlet leftString = source.substring(0, index);\\n\\t\\tlet rightString = source.substring(index + text.length);\\n\\t\\treturn [leftString, text, rightString].join('');\\n\\t}\\n\\t\\n\\t// Basic function to arbitrarily place text in buffer\\n\\taddText(x, y, text) {\\n\\t\\t\\n\\t\\t// Use adjusted coordinates to adjust for border\\n\\t\\tlet ay = y;\\n\\t\\tlet ax = x;\\n\\t\\tif (this.border) {\\n\\t\\t\\tif (this.border_left) {\\n\\t\\t\\t\\tax++;\\n\\t\\t\\t}\\n\\t\\t\\tif (this.border_bottom) {\\n\\t\\t\\t\\tay++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\n\\t\\tay = this.height - ay - 1;\\n\\t\\t\\n\\t\\tlet drawArea = this.getSubDimensions();\\n\\t\\t\\n\\t\\tif (y < drawArea[1] && x < drawArea[0]) {\\n\\t\\t\\t\\n\\t\\t\\t// If final line is longer than window, truncate it\\n\\t\\t\\tif (text.length + ax > this.width) {\\n\\t\\t\\t\\ttext = text.substring(0, this.width - ax);\\n\\t\\t\\t}\\n\\t\\t\\n\\t\\t\\t// Use substringReplace to overwrite existing buffer line\\n\\t\\t\\tthis.buffer[ay] = this.substringReplace(ax, this.buffer[ay], text);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Function to create an empty buffer\\n\\t// Bulk of work is to create borders\\n\\tclearBuffer() {\\n\\t\\tif (this.border) {\\n\\t\\t\\tthis.buffer = [];\\n\\t\\t\\tif (this.border_top) {\\n\\t\\t\\t\\tlet line = '─'.repeat(this.width);\\n\\t\\t\\t\\tif (this.border_left) {\\n\\t\\t\\t\\t\\tline = this.substringReplace(0, line, '┌');\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (this.border_right) {\\n\\t\\t\\t\\t\\tline = this.substringReplace(line.length - 1, line, '┐');\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tthis.buffer.push(line);\\n\\t\\t\\t}\\n\\t\\t\\tlet line = ' '.repeat(this.width);\\n\\t\\t\\tif (this.border_left) {\\n\\t\\t\\t\\tline = this.substringReplace(0, line, '│');\\n\\t\\t\\t}\\n\\t\\t\\tif (this.border_right) {\\n\\t\\t\\t\\tline = this.substringReplace(line.length - 1, line, '│');\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\twhile (this.buffer.length < this.height) {\\n\\t\\t\\t\\tthis.buffer.push(line);\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\tif (this.border_bottom) {\\n\\t\\t\\t\\tthis.buffer.pop();\\n\\t\\t\\t\\tlet line = '─'.repeat(this.width);\\n\\t\\t\\t\\tif (this.border_left) {\\n\\t\\t\\t\\t\\tline = this.substringReplace(0, line, '└');\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (this.border_right) {\\n\\t\\t\\t\\t\\tline = this.substringReplace(line.length - 1, line, '┘');\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tthis.buffer.push(line);\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t} else {\\n\\t\\t\\t// Really simple whitespace buffer if there's no borders\\n\\t\\t\\tthis.buffer = [];\\n\\t\\t\\tlet line = ' '.repeat(this.width);\\n\\t\\t\\twhile (this.buffer.length < this.height) {\\n\\t\\t\\t\\tthis.buffer.push(line);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Print in a single action for experiency\\n\\tdrawToLog () {\\n\\t\\tthis.ns.print(this.buffer.join('\\\\n'));\\n\\t}\\n\\t\\n\\t// Function to composite together the output of this window and all it's\\n\\t// children.\\n\\trefreshBuffer(print=true) {\\n\\t\\t// Proactively clear the log if we're about to print\\n\\t\\tif (!this.ischild && print) {\\n\\t\\t\\tthis.ns.clearLog();\\n\\t\\t}\\n\\t\\t\\n\\t\\t// Go through children\\n\\t\\t// TODO: Add layer support\\n\\t\\tfor (let i = 0; i < this.childwin.length; i++) {\\n\\t\\t\\tconst child = this.childwin[i];\\n\\t\\t\\tchild.render(false);\\n\\t\\t\\tlet cbuffer = this.childwin[i].buffer;\\n\\t\\t\\t\\n\\t\\t\\t// Composite the buffers with the existing buffer\\n\\t\\t\\tfor (let y = 0; y < cbuffer.length; y++) {\\n\\t\\t\\t\\tlet index = (this.buffer.length - this.childwin[i].y - this.childwin[i].height) + y;\\n\\t\\t\\t\\tthis.buffer[index] = this.substringReplace(this.childwin[i].x, this.buffer[index], cbuffer[y]);\\n\\t\\t\\t\\tif (this.buffer[index].length > this.width) {\\n\\t\\t\\t\\t\\tthis.buffer[index] = this.buffer[index].slice(0,this.width);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t\\n\\trenderParent() {\\n\\t\\tif (this.ischild) {\\n\\t\\t\\tthis.parenthandle.renderParent()\\n\\t\\t} else {\\n\\t\\t\\tthis.render()\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Function for getting the buffer as a string rather than printing\\n\\t// Because ns is not used anywhere in this, is good for asynchronous rendering\\n\\tasync renderToString(clear=false, refresh=true) {\\n\\t\\tif (refresh) {\\n\\t\\t\\tthis.refreshBuffer(false)\\n\\t\\t}\\n\\t\\tlet output = this.buffer.join('\\\\n');\\n\\t\\tif (clear) {\\n\\t\\t\\tthis.clearBuffer();\\n\\t\\t}\\n\\t\\treturn output;\\n\\t}\\n\\t\\n\\t// Function compiling together multiple operations\\n\\t// Will print the buffer, but also supports simple paging to keep underlying\\n\\t// content unchanged.\\n\\trender (clear=false, refresh=true ) {\\n\\t\\tlet tempbuffer = []\\n\\t\\tif (!clear) {\\n\\t\\t\\ttempbuffer = [...this.buffer];\\n\\t\\t}\\n\\t\\t\\n\\t\\tif (refresh) {\\n\\t\\t\\tthis.refreshBuffer();\\n\\t\\t}\\n\\t\\t\\n\\t\\tif (!this.ischild) {\\n\\t\\t\\tthis.drawToLog();\\n\\t\\t}\\n\\t\\tif (clear) {\\n\\t\\t\\tthis.clearBuffer();\\n\\t\\t} else {\\n\\t\\t\\tthis.buffer = tempbuffer\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Render wrapper with included async, meant to be a drop i replacement\\n\\t// for ns.sleeps in code\\n\\tasync rendersleep(time, clear=false) {\\n\\t\\tlet sleephandle = this.ns.asleep(time);\\n\\t\\tthis.render(clear);\\n\\t\\tawait sleephandle;\\n\\t}\\n}\\n\\n// Specialty window, provides scrolling text output. Used to replicated existing\\n// log window.\\nexport class curse_stream extends curse_window {\\n\\tconstructor (ns, border=false, height=100, width=51) {\\n\\t\\tsuper(ns, border, height, width);\\n\\t\\tthis.textBuffer = [];\\n\\t\\tthis.renderOnPrint = false;\\n\\t}\\n\\t\\n\\t// extend clearbuffer to make sure it has a clean blankline saved\\n\\tclearBuffer() {\\n\\t\\tsuper.clearBuffer();\\n\\t\\t\\n\\t\\tthis.textBuffer = [];\\n\\t\\t\\n\\t\\tif (this.buffer.length > 1) {\\n\\t\\t\\tthis.blankLine = this.buffer[1]\\n\\t\\t} else {\\n\\t\\t\\tthis.blankLine = this.buffer[0]\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Mostly a drop in replacement for ns.print\\n\\t// TODO: Add support for multiple inputs\\n\\tprint (input) {\\n\\t\\tinput = String(input)\\n\\t\\t\\n\\t\\tlet subdim = super.getSubDimensions();\\n\\t\\t\\n\\t\\t// Check width and perform wordwrap if input exceeds linewidth\\n\\t\\tlet inputWrap = [];\\n\\t\\tlet inputTail = input.slice(subdim[0]-1);\\n\\t\\t\\n\\t\\twhile (inputTail != \\\"\\\") {\\n\\t\\t\\tinputWrap.push(input.slice(0, subdim[0]-1));\\n\\t\\t\\tinput = inputTail;\\n\\t\\t\\tinputTail = input.slice(subdim[0]-1);\\n\\t\\t}\\n\\t\\tinputWrap.push(input)\\n\\t\\t\\n\\t\\t// Add the lines individually so scrolling can be managed smoothly\\n\\t\\twhile (inputWrap.length > 0) {\\n\\t\\t\\tlet line = inputWrap.shift();\\n\\t\\t\\t\\n\\t\\t\\t// By removing top index all the bufferlines move up by one inherently\\n\\t\\t\\tif (this.border && this.border_top && this.buffer.length > 1) {\\n\\t\\t\\t\\tthis.buffer.splice(1, 1);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.buffer.splice(0, 1);\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\t// Insert a new blankline at the bottom to restore buffer size\\n\\t\\t\\tif (this.border && this.border_bottom) {\\n\\t\\t\\t\\tthis.buffer.splice(-1, 0, this.blankLine)\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.buffer.splice(this.buffer.length, 0, this.blankLine)\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Use addText to write on the new blankline\\n\\t\\t\\tthis.addText(0,0,line);\\n\\t\\t\\t\\n\\t\\t\\t// Keep the textbuffer for later\\n\\t\\t\\tthis.textBuffer.push(line);\\n\\t\\t\\n\\t\\t\\t// Trim the textbuffer if it's too long\\n\\t\\t\\tif (this.textBuffer.length > subdim[1]) {\\n\\t\\t\\t\\tthis.textBuffer.shift();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\n\\t\\t// If set to true, visually makes it print immediately, replicating\\n\\t\\t// normal print behavior. Resource intensive.\\n\\t\\tif (this.renderOnPrint) {\\n\\t\\t\\tsuper.renderParent();\\n\\t\\t}\\n\\t}\\n}\\n\\n// Simple progress bar widget\\nexport class curse_progress extends curse_window {\\n\\tconstructor (ns, border=false, height=1, width=51) {\\n\\t\\tif (border && height == 1) {\\n\\t\\t\\theight = 3;\\n\\t\\t}\\n\\t\\tsuper(ns, border, height, width);\\n\\t}\\n\\t\\n\\t// Only needs on function to generate the progress bar\\n\\tupdate (progress) {\\n\\t\\tlet width = this.getSubDimensions()[0];\\n\\t\\tlet increment = width / 100;\\n\\t\\t\\n\\t\\tprogress = progress * 100;\\n\\t\\t\\n\\t\\tthis.addText(0, 0, '#'.repeat(Math.ceil(increment * progress)).padEnd(width));\\n\\t}\\n}\\n\\n// Main function provides example code\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst win = new curse_stream(ns, true, 20);\\n\\tconst progwin = new curse_progress(ns, true, 3, 21);\\n\\tconst bouncetext = new curse_window(ns, false, 1, 4);\\n\\n\\tbouncetext.addText(0,0,\\\"BOO!\\\")\\n\\n\\twin.addChild(progwin, 5,6)\\n\\twin.addChild(bouncetext, 1, 10);\\n\\t\\n\\tlet y = 10;\\n\\tlet x = 1;\\n\\tlet z = 0;\\n\\tlet zdir = true\\n\\tlet drawarea = win.getSubDimensions()\\n\\twin.clearBuffer();\\n\\twhile (true) {\\n\\t\\tif (y > drawarea[1] - 1) {\\n\\t\\t\\ty = 0;\\n\\t\\t}\\n\\t\\tif (x > drawarea[0] - 2) {\\n\\t\\t\\tx = 0;\\n\\t\\t}\\n\\t\\t\\n\\t\\tbouncetext.setPosition(x, y)\\n\\t\\t\\n\\t\\tif (z > 99) {\\n\\t\\t\\tzdir = false\\n\\t\\t} else if ( z < 1 ) {\\n\\t\\t\\tzdir = true\\n\\t\\t}\\n\\t\\t\\n\\t\\tprogwin.update(z / 100)\\n\\n\\t\\twin.print(\\\"=\\\".repeat(z));\\n\\t\\tawait win.rendersleep(800);\\n\\t\\tx++;\\n\\t\\ty++;\\n\\t\\tif (zdir) {\\n\\t\\t\\tz++;\\n\\t\\t} else {\\n\\t\\t\\tz--;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"bcurses.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"bcurses.js\",\"url\":\"blob:https://danielyxie.github.io/02668ca8-200a-4345-ae30-6888acf92ad7\",\"moduleSequenceNumber\":680141}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":28958,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n    ['trips-per-cycle', 1000],\\n    ['money-threshold', 1_000_000_000_000]\\n];\\n\\nexport function autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\n\\n// TODO: Joining factions gives a small amount of int xp.\\n// With singularity functions, soft reset, and the 10 corp factions you can create a script that farms int xp rather quickly.\\n// This would be faster than the below travel-based method, which has been nerfed quite heavily\\n\\n/** @param {NS} ns \\n * Script contributed by https://github.com/ShawnPatton\\n * Concept: A small amount of intelligence is granted when you (successfully) travel to a new city. This script converts money into intelligence exp! **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"travelToCity\\\");\\n    ns.disableLog(\\\"sleep\\\");\\n    ns.tail();\\n    let options = ns.flags(argsSchema);\\n    let tripsPerCycle = options['trips-per-cycle'];\\n    let moneyThreshold = options['money-threshold'];\\n    ns.print(`trips-per-cycle: ` + tripsPerCycle);\\n    ns.print(`money-threshold: ` + ns.nFormat(moneyThreshold, '$0.0a'));\\n    let justStarted = true;\\n    let previousInt = ns.getPlayer().intelligence;\\n    let currentInt = previousInt;\\n    let previousLevelTime = Date.now();\\n    let levelupTime;\\n    let cycles = 0;\\n    let duration = 0;\\n    let tripsPerLevel = 0;\\n    let tripsPerMs = 0;\\n    ns.print(`Starting Script at Int ` + currentInt);\\n    while (true) {\\n        while (ns.getPlayer().money > moneyThreshold) {\\n            for (let i = 0; i < tripsPerCycle; i++) {\\n                ns.travelToCity(\\\"Aevum\\\");\\n                ns.travelToCity(\\\"Sector-12\\\");\\n            }\\n            await ns.sleep(1);\\n            cycles++;\\n            if (previousInt != ns.getPlayer().intelligence) {\\n                currentInt = ns.getPlayer().intelligence;\\n                levelupTime = Date.now();\\n                duration = levelupTime - previousLevelTime;\\n                tripsPerLevel = cycles * tripsPerCycle * 2;\\n                tripsPerMs = Math.floor(tripsPerLevel / duration);\\n                ns.print(`Level Up: Int ` + currentInt + (justStarted ? ` Partial` : ` Full`) + ` Level in `\\n                    + ns.tFormat(duration) + ` & ` + tripsPerLevel + ` Travels`);\\n                ns.print(`Approximately ` + tripsPerMs + ` Trips/Millisecond`);\\n                previousLevelTime = levelupTime;\\n                previousInt = currentInt;\\n                justStarted = false;\\n                cycles = 0;\\n            }\\n        }\\n        await ns.sleep(10000);\\n        ns.print(`Below money threshold, waiting 10 seconds`);\\n    }\\n}\",\"filename\":\"farm_int.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"farm_int.js\",\"url\":\"blob:https://danielyxie.github.io/4b8f938e-8692-41ee-92a8-6e9363781be9\",\"moduleSequenceNumber\":634664}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":28959,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { boxTailSingleton, tryGetBitNodeMultipliers } from 'utils.js';\\nimport {\\n    factions,\\n    getAllAugmentRepReq,\\n    getAllAugmentStats,\\n    getAugmentsPerFaction,\\n    getOwnedAugmentationsStatic,\\n    hasBladesSimulacrum\\n} from \\\"augments.js\\\";\\nconst companySpecificConfigs = [\\n    { name: \\\"NWO\\\", statModifier: 25 },\\n    { name: \\\"MegaCorp\\\", statModifier: 25 },\\n    { name: \\\"Blade Industries\\\", statModifier: 25 },\\n    { name: \\\"Fulcrum Secret Technologies\\\", companyName: \\\"Fulcrum Technologies\\\", repRequiredForFaction: 250000 }, // Special snowflake\\n    { name: \\\"Silhouette\\\", companyName: \\\"TBD\\\", repRequiredForFaction: 999e9 /* Hack to force work until max promotion. */ }\\n]\\nconst jobs = [ // Job stat requirements for a company with a base stat modifier of +224 (modifier of all megacorps except the ones above which are 25 higher)\\n    { name: \\\"it\\\", reqRep: [0, 7E3, 35E3, 175E3], reqHack: [225, 250, 275, 375], reqCha: [0, 0, 275, 300], repMult: [0.9, 1.1, 1.3, 1.4] },\\n    { name: \\\"software\\\", reqRep: [0, 8E3, 40E3, 200E3, 400E3, 800E3, 1.6e6, 3.2e6], reqHack: [225, 275, 475, 625, 725, 725, 825, 975], reqCha: [0, 0, 275, 375, 475, 475, 625, 725], repMult: [0.9, 1.1, 1.3, 1.5, 1.6, 1.6, 1.75, 2] },\\n]\\nconst factionSpecificConfigs = [\\n    { name: \\\"Slum Snakes\\\", forceUnlock: true },\\n]\\n\\n// These factions should ideally be completed in this order (TODO: Check for augmentation dependencies)\\nconst preferredEarlyFactionOrder = [\\n    \\\"Slum Snakes\\\", // Unlock Gangs\\n    \\\"Netburners\\\", // Required to set up hash income\\n    \\\"Tian Di Hui\\\", \\\"Aevum\\\", // These give all the company_rep and faction_rep bonuses early game\\n    \\\"CyberSec\\\", /* Quick, and NightSec aug depends on an aug from here */ \\\"NiteSec\\\", \\\"Tetrads\\\", // Cha augs to speed up earning company promotions\\n    \\\"Bachman & Associates\\\", // Boost company/faction rep for future augs\\n    \\\"Daedalus\\\", // Once we have all faction_rep boosting augs, there's no reason not to work towards Daedalus as soon as it's available/feasible so we can buy Red Pill\\n    \\\"Fulcrum Secret Technologies\\\", // Will be removed if hack level is too low to backdoor their server\\n    \\\"ECorp\\\", // More cmp_rep augs, and some strong hack ones as well\\n    \\\"BitRunners\\\", \\\"The Black Hand\\\", // Fastest sources of hacking augs after the above companies\\n    \\\"The Dark Army\\\", // Unique cmp_rep aug TODO: Can it sensibly be gotten before corps? Requires 300 all combat stats.\\n    \\\"Clarke Incorporated\\\", \\\"OmniTek Incorporated\\\", \\\"NWO\\\", // More hack augs from companies\\n    \\\"Chongqing\\\", // Unique Source of big 1.4x hack exp boost (Can only join if not in e.g. Aevum as well)\\n];\\n// This is an approximate order of most useful augmentations left to offer, assuming all early-game factions have been cleaned out\\nconst preferredCompanyFactionOrder = [\\n    \\\"Bachman & Associates\\\", // Augs boost company_rep by 1.65, faction_rep by 1.50. Lower rep-requirements than ECorp augs, so should be a priority to speed up future resets\\n    \\\"ECorp\\\", // Offers 2.26 multi worth of company_rep and major hacking stat boosts (1.51 hack / 1.54 exp / 1.43 success / 3.0 grow / 2.8 money / 1.25 speed), but high rep reqs\\n    \\\"Clarke Incorporated\\\", // Biggest boost to hacking after above factions (1.38)\\n    \\\"OmniTek Incorporated\\\", // Next big boost to hacking after above factions (1.20) (NWO is bigger, but this has lower Cha reqs.)\\n    \\\"NWO\\\", // Biggest boost to hacking after above factions (1.26)\\n    \\\"Blade Industries\\\", // Mostly redundant after Ecorp - provides remaining hack-related augs (1.10 money, 1.03 speed)\\n    \\\"MegaCorp\\\", // Offers 1 unique aug boosting all physical traits by 1.35\\n    \\\"KuaiGong International\\\", // 1.40 to agility, defense, strength\\n    \\\"Fulcrum Secret Technologies\\\", // Big boosts to company_rep and hacking, but requires high hack level to backdoor their server, so might have to be left until later\\n    \\\"Four Sigma\\\", // No unique augs, but note that if accessible early on, Fulcrum + Four Sigma is a one-two punch to get all company rep boosting augs in just 2 factions\\n]\\n// Order in which to focus on crime factions\\nconst preferredCrimeFactionOrder = [\\\"Netburners\\\", \\\"Slum Snakes\\\", \\\"NiteSec\\\", \\\"Tetrads\\\", \\\"The Black Hand\\\", \\\"The Syndicate\\\", \\\"The Dark Army\\\", \\\"Speakers for the Dead\\\", \\\"Daedalus\\\"]\\nconst loopSleepInterval = 2000; // 2 seconds\\nconst statusUpdateInterval = 120000; // 2 minutes (outside of this, minor updates in e.g. stats aren't logged)\\nconst restartWorkInterval = 30000; // Collect e.g. rep earned by stopping and starting work;\\nlet noFocus = false; // Can be set via command line to disable doing work that requires focusing (crime, studying, or focused faction/company work)\\nlet noStudying = false; // Disable studying for Charisma. Useful in longer resets when Cha augs are insufficient to meet promotion requirements (Also disabled with --no-focus)\\nlet noCrime = false; // Disable doing crimes at all. (Also disabled with --no-focus)\\nlet crimeFocus = false; // Useful in crime-focused BNs when you want to focus on crime related factions\\nlet gangFocus = false; // Use to focus on unlock gang\\nlet shouldFocusAtWork = false; // Whether we should focus on work or let it be backgrounded (based on whether \\\"Neuroreceptor Management Implant\\\" is owned, or \\\"--no-focus\\\" is specified)\\nlet repToDonate = 150; // Updated after looking at bitnode mults\\nlet lastActionRestart = 0;\\nlet ownedAugmentations = [];\\nlet mostExpensiveAugByFaction = [];\\nlet mostExpensiveDesiredAugByFaction = [];\\nlet playerGang = null;\\nlet allGangFactions = [];\\n\\nlet options;\\nconst argsSchema = [\\n    ['first', []], // Grind rep with these factions first. Also forces a join of this faction if we normally wouldn't (e.g. no desired augs or all augs owned)\\n    ['skip', []], // Don't work for these factions\\n    ['o', false], // Immediately grind company factions for rep after getting their invite, rather than first getting all company invites we can\\n    ['desired-stats', []], // Factions will be removed from our 'early-faction-order' once all augs with these stats have been bought out\\n    ['no-focus', false], // Disable doing work that requires focusing (crime, studying, or focused faction/company work)\\n    ['no-studying', false], // Disable studying for Charisma. Useful in longer resets when Cha augs are insufficient to meet promotion requirements (Also disabled with --no-focus)\\n    ['no-crime', false], // Disable doing crimes at all. (Also disabled with --no-focus)\\n    ['crime-focus', false], // Useful in crime-focused BNs when you want to focus on crime related factions\\n    ['gang-focus', false], // Use to focus on unlock gang\\n    ['invites-only', false], // Just work to get invites, don't work for augmentations / faction rep\\n    ['prioritize-invites', false], // Prioritize working for as many invites as is practical before starting to grind for faction reputation\\n];\\n\\nexport function autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    const lastFlag = args.length > 1 ? args[args.length - 2] : null;\\n    if (lastFlag === \\\"--first\\\" || lastFlag === \\\"--skip\\\")\\n        return factionList.map(f => f.replaceAll(' ', '_')).sort();\\n    return [];\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('asleep');\\n    ns.disableLog('getServerRequiredHackingLevel');\\n    ns.disableLog('workForFaction');\\n    ns.disableLog('workForCompany');\\n    ns.disableLog('stopAction');\\n    ns.disableLog('applyToCompany');\\n    ns.disableLog('commitCrime');\\n    boxTailSingleton(ns, 'FactionWork', '♥', '200px');\\n    ns.clearLog();\\n    options = ns.flags(argsSchema);\\n    const desiredAugStats = (options['desired-stats'] || []);\\n    const firstFactions = options.first = (options.first || []).map(f => f.replaceAll('_', ' '));\\n    let skipFactionsConfig = options.skip = (options.skip || []).map(f => f.replaceAll('_', ' '));\\n    gangFocus = options['gang-focus'];\\n    noFocus = options['no-focus'];\\n    noStudying = options['no-studying'] || noFocus; // Can't study if we aren't allowed to steal focus\\n    noCrime = options['no-crime'] || noFocus; // Can't crime if we aren't allowed to steal focus\\n    crimeFocus = options['crime-focus'];\\n    if (crimeFocus && noFocus)\\n        return ns.tprint(\\\"ERROR: Cannot use --no-focus and --crime-focus at the same time. You need to focus to do crime!\\\");\\n    // AGI increases stamina, more stamina faster stam recovery\\n    // DEX decreases op time more dex faster ops, faster rank gain, require more stamina therefore need AGI first\\n    // STR and DEF just increase chances afaik not important the multipliers are huge for these stats anyways   \\n    const bladeburnerDesiredStats = ['agi', 'dex', 'str', 'def', 'faction_rep', 'company_rep', 'hacknet'];\\n    const oldCombatDesiredStats = ['str', 'def', 'dex', 'agi', 'faction_rep', 'hacking', 'hacknet'];\\n    const hackingStats = ['hacking', 'faction_rep', 'company_rep', 'charisma', 'hacknet'];\\n    if (desiredAugStats.length === 0)\\n        desiredAugStats.push(...(crimeFocus || gangFocus ? bladeburnerDesiredStats : hackingStats))\\n    // Log command line args used\\n    if (firstFactions.length > 0) ns.print(`--first factions: ${firstFactions.join(\\\", \\\")}`);\\n    if (skipFactionsConfig.length > 0) ns.print(`--skip factions: ${skipFactionsConfig.join(\\\", \\\")}`);\\n    if (desiredAugStats.length > 0) ns.print(`--desired-stats matching: ${desiredAugStats.join(\\\", \\\")}`);\\n    let bitnodeMults = tryGetBitNodeMultipliers(ns);\\n    repToDonate = 150 * (bitnodeMults.RepToDonateToFaction || 1);\\n    // Get some factions augmentations to decide what remains to be purchased\\n    const dictFactionAugs = getAugmentsPerFaction(ns);\\n    const dictAugRepReqs = getAllAugmentRepReq(ns);\\n    const dictAugStats = getAllAugmentStats(ns);\\n    ownedAugmentations = getOwnedAugmentationsStatic(ns);\\n    shouldFocusAtWork = !noFocus; // Focus at work for the best rate of rep gain, unless focus activities are disabled via command line\\n    if (shouldFocusAtWork) { // Check if we have an augmentation that lets us not have to focus at work (always nicer if we can background it)\\n        let activeAugmentations = getOwnedAugmentationsStatic(ns);\\n        shouldFocusAtWork = !activeAugmentations.includes(\\\"Neuroreceptor Management Implant\\\");\\n    }\\n\\n    if (ns.fileExists('/tmp/ingang.txt')) {\\n        let configGangIndex = preferredEarlyFactionOrder.findIndex(f => f === \\\"Slum Snakes\\\");\\n        if (configGangIndex !== -1) // If we're in a gang, don't need to earn an invite to slum snakes anymore\\n            preferredEarlyFactionOrder.splice(configGangIndex, 1);\\n        allGangFactions = [\\\"Slum Snakes\\\", \\\"Tetrads\\\", \\\"The Black Hand\\\", \\\"The Syndicate\\\", \\\"The Dark Army\\\", \\\"Speakers for the Dead\\\", \\\"NiteSec\\\"];\\n    }\\n    mostExpensiveAugByFaction = Object.fromEntries(factionList.map(f => [f, dictFactionAugs[f]\\n        .filter(aug => !ownedAugmentations.includes(aug))\\n        .reduce((max, aug) => Math.max(max, dictAugRepReqs[aug]), -1)]));\\n    ns.print(\\\"Most expensive unowned aug by faction: \\\" + JSON.stringify(mostExpensiveAugByFaction, null, 2));\\n    // TODO: Detect when the most expensive aug from two factions is the same - only need it from the first one. (Update lists and remove 'afforded' augs?)\\n    // TODO this filter might not be working as intended\\n    mostExpensiveDesiredAugByFaction = Object.fromEntries(\\n        factionList.map(f => [f, dictFactionAugs[f].filter(aug => !ownedAugmentations.includes(aug) && (Object.keys(dictAugStats[aug]).length === 0 || !desiredAugStats ||\\n            Object.keys(dictAugStats[aug]).some(key => desiredAugStats.some(stat => key.includes(stat)))))\\n            .reduce((max, aug) => Math.max(max, dictAugRepReqs[aug]), -1)])\\n    );\\n    ns.print(\\\"Most expensive desired aug by faction: \\\" + JSON.stringify(mostExpensiveDesiredAugByFaction, null, 2));\\n    let completedFactions = Object.keys(mostExpensiveAugByFaction).filter(fac => mostExpensiveAugByFaction[fac] === -1 && !factionSpecificConfigs.find(c => c.name === fac)?.forceUnlock);\\n    let skipFactions = skipFactionsConfig.concat(completedFactions);\\n    let softCompletedFactions = Object.keys(mostExpensiveDesiredAugByFaction).filter(fac => mostExpensiveDesiredAugByFaction[fac] === -1 &&\\n        !completedFactions.includes(fac) && !factionSpecificConfigs.find(c => c.name === fac)?.forceUnlock);\\n    ns.print(`${completedFactions.length} factions are completed (all augs purchased): ${completedFactions.join(\\\", \\\")}`);\\n    ns.print(`${softCompletedFactions.length} factions will initially be skipped (all desired augs purchased): ${softCompletedFactions.join(\\\", \\\")}`);\\n\\n    let scope = -1; // Scope increases each time we complete a type of work and haven't progressed enough to unlock more factions\\n    let numJoinedFactions = ns.getPlayer().factions.length;\\n    while (true) { // After each loop, we will repeat all previous work \\\"strategies\\\" to see if anything new has been unlocked, and add one more \\\"strategy\\\" to the queue\\n        joinOpenInvitation(ns);\\n        scope++;\\n        ns.print(`Starting main work loop with scope: ${scope}...`);\\n\\n        const player = ns.getPlayer();\\n        if (player.factions.length > numJoinedFactions) { // If we've recently joined a new faction, reset our work scope\\n            scope = 0; // Back to basics until we've satisfied all highest-priority work\\n            numJoinedFactions = player.factions.length;\\n        }\\n\\n        if (gangFocus) {\\n            while (getKarma(ns)) {\\n                joinOpenInvitation(ns);\\n                if (player.isWorking && player.workType === 'Committing a crime') {\\n                    await ns.asleep(20);\\n                    continue;\\n                }\\n                let crimeStats = getBestCrime(ns, true);\\n                ns.commitCrime(crimeStats.name);\\n                ns.print(`Attempting to commit ${crimeStats.name}... @ ${crimeStats.rate.toPrecision(2)}karma/s`);\\n                await ns.sleep(crimeStats.time + 100);\\n            }\\n        }\\n        if (!hasBladesSimulacrum(ns) && ns.bladeburner.getCurrentAction().type !== 'idle') {\\n            ns.print(`Waiting on bladeburner ${ns.bladeburner.getCurrentAction().type} `);\\n            scope--;\\n            await earnFactionInvite(ns, \\\"Aevum\\\");\\n            await earnFactionInvite(ns, \\\"Sector-12\\\");\\n            await earnFactionInvite(ns, \\\"Tian Di Hui\\\");\\n            await earnFactionInvite(ns, \\\"Tetrads\\\");\\n            await ns.sleep(30000);\\n            continue;\\n        }\\n\\n        // Remove Fulcrum from our \\\"EarlyFactionOrder\\\" if hack level is insufficient to backdoor their server\\n        let priorityFactions = crimeFocus ? preferredCrimeFactionOrder.slice() : preferredEarlyFactionOrder.slice();\\n        let fulcrummHackReq = ns.getServerRequiredHackingLevel(\\\"fulcrumassets\\\");\\n        if (player.hacking < fulcrummHackReq - 10) { // Assume that if we're within 10, we'll get there by the time we've earned the invite\\n            priorityFactions.splice(priorityFactions.findIndex(c => c === \\\"Fulcrum Secret Technologies\\\"), 1);\\n            ns.print(`Fulcrum faction server requires ${fulcrummHackReq} hack, so removing from our initial priority list for now.`);\\n        } // TODO: Otherwise, if we get Fulcrum, we have no need for a couple other company factions\\n        // Strategy 1: Tackle a consolidated list of desired faction order, interleaving simple factions and megacorporations\\n        const factionWorkOrder = firstFactions.concat(priorityFactions.filter(f => !firstFactions.includes(f) && !skipFactions.includes(f)))\\n            .filter(f => !softCompletedFactions.includes(f)); // Remove factions from our initial \\\"work order\\\" if we've bought all desired augmentations.\\n        for (const faction of factionWorkOrder) {\\n            let earnedNewFactionInvite = false;\\n            if (preferredCompanyFactionOrder.includes(faction)) // If this is a company faction, we need to work for the company first\\n                earnedNewFactionInvite = await workForMegacorpFactionInvite(ns, faction, true);\\n            // If new work was done for a company or their faction, restart the main work loop to see if we've since unlocked a higher-priority faction in the list\\n            if (earnedNewFactionInvite || await workForSingleFaction(ns, faction)) {\\n                scope--; // De-increment scope so that effective scope doesn't increase on the next loop (i.e. it will be incremented back to what it is now)\\n                break;\\n            }\\n        }\\n        if (scope < 1) continue;\\n\\n        // Strategy 2: Grind XP with all priority factions that are joined or can be joined, until every single one has desired REP\\n        for (const faction of factionWorkOrder)\\n            await workForSingleFaction(ns, faction);\\n        if (scope < 2) continue;\\n\\n        // Strategy 3: Work for any megacorporations not yet completed to earn their faction invites. Once joined, we don't lose these factions on reset.\\n        let megacorpFactions = preferredCompanyFactionOrder.filter(f => !skipFactions.includes(f));\\n        await workForAllMegacorps(ns, megacorpFactions, false);\\n        if (scope < 3) continue;\\n\\n        // Strategy 4: Work for megacorps again, but this time also work for the company factions once the invite is earned\\n        await workForAllMegacorps(ns, megacorpFactions, true);\\n        if (scope < 4) continue;\\n\\n        // Strategies 5+ now work towards getting an invite to *all factions in the game* (sorted by least-expensive final aug (correlated to easiest faction-invite requirement))\\n        let joinedFactions = player.factions; // In case our hard-coded list of factions is missing anything, merge it with the list of all factions\\n        let allIncompleteFactions = factionList.concat(joinedFactions.filter(f => !factionList.includes(f))).filter(f => !skipFactions.includes(f) && !completedFactions.includes(f))\\n            .sort((a, b) => mostExpensiveAugByFaction[a] - mostExpensiveAugByFaction[b]);\\n        // Strategy 5: For *all factions in the game*, try to earn an invite and work for rep until we can afford the most-expensive *desired* aug (or unlock donations, whichever comes first)\\n        for (const faction of allIncompleteFactions.filter(f => !softCompletedFactions.includes(f)))\\n            await workForSingleFaction(ns, faction);\\n        if (scope < 5) continue;\\n\\n        // Strategy 6: Revisit all factions until each has enough rep to unlock donations - so if we can't afford all augs this reset, at least we don't need to grind for rep on the next reset\\n        // For this, we reverse the order (ones with augs costing the most-rep to least) since these will take the most time to re-grind rep for if we can't buy them this reset.\\n        for (const faction of allIncompleteFactions.reverse())\\n            await workForSingleFaction(ns, faction, true);\\n        if (scope < 6) continue;\\n\\n        // Strategy 7:  Next, revisit all factions and grind XP until we can afford the most expensive aug, even if we could just buy the required rep next reset\\n        for (const faction of allIncompleteFactions.reverse()) // Re-reverse the sort order so we start with the easiest (cheapest) faction augs to complete\\n            await workForSingleFaction(ns, faction, true, true);\\n        if (scope < 7) continue;\\n\\n        // Strategy 8: Commit crimes for a while longer, then loop to see if there anything more we can do for the above factions\\n        if (noCrime) {\\n            ns.print(`--no-crime (or --no-focus): Crimes are disabled, so sleeping for a while (30s) then checking back on whether there's any work to be done...`);\\n            await ns.sleep(30000);\\n        } else await crimeForKillsKarmaStats(ns, 0, -ns.heart.break() + 100, 0);\\n    }\\n}\\n\\n/** @param {NS} ns */\\nfunction joinOpenInvitation(ns) {\\n    let invitations = ns.checkFactionInvitations();\\n    for (let factionName of invitations) {\\n        // if (!skipFactions.includes(factionName))\\n        ns.joinFaction(factionName);\\n    }\\n}\\n\\n/** @param {NS} ns\\n * @returns {boolean}\\n */\\n//TODO merge with best killcrimesforstats\\nlet getKarma = (ns) => ns.heart.break() > -54000;\\nconst crimes = [\\\"shoplift\\\", \\\"rob store\\\", \\\"mug\\\", \\\"larceny\\\", \\\"deal drugs\\\", \\\"bond forgery\\\", \\\"traffick arms\\\", \\\"homicide\\\", \\\"grand theft auto\\\", \\\"kidnap\\\", \\\"assassinate\\\", \\\"heist\\\"]\\nexport function getBestCrime(ns, getKarma) {\\n    let doThisCrime = crimes[0];\\n    let bestCrimeStats = {};\\n    let crimeRate = -1;\\n    let crimeStats;\\n    for (const crime of crimes) {\\n        crimeStats = ns.getCrimeStats(crime);\\n        crimeStats.chance = ns.getCrimeChance(crime);\\n        crimeStats.rate = crimeStats.chance * (getKarma ? crimeStats.karma : crimeStats.money) / crimeStats.time * 1000;\\n\\n        // ns.print(nextRate.toPrecision(2));\\n        if (crimeStats.chance > .5 && crimeStats.rate > crimeRate) {\\n            crimeRate = crimeStats.rate;\\n            doThisCrime = crime;\\n            bestCrimeStats = crimeStats;\\n            //ns.print(`next crime ${doThisCrime} @ ${(getKarma ? doThisCrimeRate.toPrecision(2) : ns.nFormat(doThisCrimeRate, '0.0'))} ${(getKarma ? 'karma' : '$')}/s`);\\n        }\\n    }\\n    return { doThisCrime, ...bestCrimeStats };\\n}\\n\\n\\nconst factionList = Object.values(factions);\\n\\n/** @param {NS} ns\\n * @param {string} log\\n * @param {string} toastVariant\\n * Prints a message, and also toasts it! */\\nfunction announce(ns, log, toastVariant = 'info') {\\n    if (!ns.print || !ns.toast) return; // If an error is caught/logged because the script is being killed, ns becomes undefined\\n    ns.print(`${toastVariant}: ${log}`);\\n    ns.toast(log, toastVariant);\\n}\\n\\nconst requiredMoneyByFaction = {\\n    \\\"Tian Di Hui\\\": 1E6, \\\"Sector-12\\\": 15E6, \\\"Chongqing\\\": 20E6, \\\"New Tokyo\\\": 20E6, \\\"Ishima\\\": 30E6, \\\"Aevum\\\": 40E6, \\\"Volhaven\\\": 50E6,\\n    \\\"Slum Snakes\\\": 1E6, \\\"Silhouette\\\": 15E6, \\\"The Syndicate\\\": 10E6, \\\"The Covenant\\\": 75E9, \\\"Daedalus\\\": 100E9, \\\"Illuminati\\\": 150E9\\n};\\nconst requiredBackdoorByFaction = { \\\"CyberSec\\\": \\\"CSEC\\\", \\\"NiteSec\\\": \\\"avmnite-02h\\\", \\\"The Black Hand\\\": \\\"I.I.I.I\\\", \\\"BitRunners\\\": \\\"run4theh111z\\\", \\\"Fulcrum Secret Technologies\\\": \\\"fulcrumassets\\\" };\\nconst requiredHackByFaction = { \\\"Tian Di Hui\\\": 50, \\\"Netburners\\\": 80, \\\"Speakers for the Dead\\\": 100, \\\"The Dark Army\\\": 300, \\\"The Syndicate\\\": 200, \\\"The Covenant\\\": 850, \\\"Daedalus\\\": 2500, \\\"Illuminati\\\": 1500 };\\nconst requiredCombatByFaction = { \\\"Slum Snakes\\\": 30, \\\"Tetrads\\\": 75, \\\"Speakers for the Dead\\\": 300, \\\"The Dark Army\\\": 300, \\\"The Syndicate\\\": 200, \\\"The Covenant\\\": 850, \\\"Daedalus\\\": 1500, \\\"Illuminati\\\": 1200 };\\nconst requiredKarmaByFaction = { \\\"Slum Snakes\\\": 9, \\\"Tetrads\\\": 18, \\\"Silhouette\\\": 22, \\\"Speakers for the Dead\\\": 45, \\\"The Dark Army\\\": 45, \\\"The Syndicate\\\": 90 };\\nconst requiredKillsByFaction = { \\\"Speakers for the Dead\\\": 30, \\\"The Dark Army\\\": 5 };\\nconst reqHackingOrCombat = [\\\"Daedalus\\\"]; // Special case factions that require only hacking or combat stats, not both\\n\\n/** @param {NS} ns\\n * @param {string} factionName\\n */\\nasync function earnFactionInvite(ns, factionName) {\\n    const player = ns.getPlayer();\\n    const joinedFactions = player.factions;\\n    if (joinedFactions.includes(factionName)) return true;\\n    let invitations = ns.checkFactionInvitations();\\n    if (invitations.includes(factionName))\\n        return await tryJoinFaction(ns, factionName);\\n\\n    // Can't join certain factions for various reasons\\n    let reasonPrefix = `Cannot join faction \\\"${factionName}\\\" because`;\\n    let precludingFaction;\\n    if ([\\\"Aevum\\\", \\\"Sector-12\\\"].includes(factionName) && (precludingFaction = [\\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"].find(f => joinedFactions.includes(f))) ||\\n        [\\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\"].includes(factionName) && (precludingFaction = [\\\"Aevum\\\", \\\"Sector-12\\\", \\\"Volhaven\\\"].find(f => joinedFactions.includes(f))) ||\\n        [\\\"Volhaven\\\"].includes(factionName) && (precludingFaction = [\\\"Aevum\\\", \\\"Sector-12\\\", \\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\"].find(f => joinedFactions.includes(f))))\\n        return ns.print(`${reasonPrefix} precluding faction \\\"${precludingFaction}\\\"\\\" has been joined.`);\\n    // Skip factions for which money/hack level requirements aren't met. We do not attempt to \\\"train up\\\" for these things (happens automatically outside this script)\\n    let requirement;\\n    if ((requirement = requiredMoneyByFaction[factionName]) && player.money < requirement)\\n        return ns.print(`${reasonPrefix} you have insufficient money. Need: ${ns.nFormat(requirement, '0.0a')}, Have: ${ns.nFormat(player.money, '0.0a')}`);\\n    if ((requirement = requiredHackByFaction[factionName]) && player.hacking < requirement && !reqHackingOrCombat.includes(factionName))\\n        return ns.print(`${reasonPrefix} you have insufficient hack level. Need: ${requirement}, Have: ${player.hacking}`);\\n    // Note: This only complains if we have insufficient hack to backdoor this faction server. If we have sufficient hack, we will \\\"waitForInvite\\\" below assuming an external script is backdooring ASAP\\n    if ((requirement = requiredBackdoorByFaction[factionName]) && player.hacking < ns.getServerRequiredHackingLevel(requirement))\\n        return ns.print(`${reasonPrefix} you must fist backdoor ${requirement}, which needs hack: ${ns.getServerRequiredHackingLevel(requirement)}, Have: ${player.hacking}`);\\n    //await getNsDataThroughFile(ns, `ns.connect('fulcrumassets'); await ns.installBackdoor(); ns.connect(home)`, '/Temp/backdoor-fulcrum.txt') // TODO: Do backdoor if we can but haven't yet?\\n\\n    // See if we can take action to earn an invite for the next faction under consideration\\n    let workedForInvite = false;\\n    // If committing crimes can help us join a faction - we know how to do that\\n    let doCrime = false;\\n    if ((requirement = requiredKarmaByFaction[factionName]) && -ns.heart.break() < requirement) {\\n        ns.print(`${reasonPrefix} you have insufficient Karma. Need: ${-requirement}, Have: ${ns.heart.break()}`);\\n        doCrime = true;\\n    }\\n    if ((requirement = requiredKillsByFaction[factionName]) && player.numPeopleKilled < requirement) {\\n        ns.print(`${reasonPrefix} you have insufficient kills. Need: ${requirement}, Have: ${player.numPeopleKilled}`);\\n        doCrime = true;\\n    }\\n    let deficientStats = [{ name: \\\"str\\\", value: player.strength }, { name: \\\"str\\\", value: player.defense }, { name: \\\"str\\\", value: player.dexterity }, { name: \\\"str\\\", value: player.agility }];\\n    if ((requirement = requiredCombatByFaction[factionName]) &&\\n        (deficientStats.filter(stat => stat.value < requirement)).length > 0\\n        && !(reqHackingOrCombat.includes(factionName) && player.hacking >= requiredHackByFaction[factionName])) { // Some special-case factions (just 'Daedalus' for now) require *either* hacking *or* combat\\n        ns.print(`${reasonPrefix} you have insufficient combat stats. Need: ${requirement} of each, ` +\\n            `Have Str: ${player.strength}, Def: ${player.defense}, Dex: ${player.dexterity}, Agi: ${player.agility}`);\\n        const em = requirement / 30; // Hack: A rough heuristic suggesting we need an additional x1 multi for every ~50 physical stat points we wish to grind out in a reasonable amount of time. TODO: Be smarter\\n        if (!crimeFocus && (player.strength_exp_mult * player.strength_mult < em || player.defense_exp_mult * player.defense_mult < em ||\\n            player.dexterity_exp_mult * player.dexterity_mult < em || player.agility_exp_mult * player.agility_mult < em))\\n            return ns.print(\\\"Physical mults / exp_mults are too low to increase stats in a reasonable amount of time\\\");\\n        doCrime = true; // TODO: There could be more efficient ways to gain combat stats than homicide, although at least this serves future crime factions\\n    }\\n    if (doCrime && noCrime)\\n        return ns.print(`--no-crime (or --no-focus): Doing crime to meet faction requirements is disabled.`);\\n    if (doCrime)\\n        workedForInvite = await crimeForKillsKarmaStats(ns, requiredKillsByFaction[factionName] || 0, requiredKarmaByFaction[factionName] || 0, requiredCombatByFaction[factionName] || 0);\\n\\n    // If travelling can help us join a faction - we can do that too\\n    if (['Tian Di Hui', 'Tetrads', 'The Dark Army'].includes(factionName))\\n        workedForInvite = await goToCity(ns, 'Chongqing');\\n    else if (['The Syndicate'].includes(factionName))\\n        workedForInvite = await goToCity(ns, 'Sector-12');\\n    else if ([\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"].includes(factionName))\\n        workedForInvite = await goToCity(ns, factionName);\\n    if (\\\"Silhouette\\\" === factionName) {\\n        ns.print(`You must be a CO (e.g. CEO/CTO) of a company to earn an invite to ${factionName}. This may take a while!`);\\n        let factionConfig = companySpecificConfigs.find(f => f.name === factionName); // We set up Silhouette with a \\\"company-specific-config\\\" so that we can work for an invite like any megacorporation faction.\\n        let companyNames = preferredCompanyFactionOrder.map(f => companySpecificConfigs.find(cf => cf.name === f)?.companyName || f);\\n        let favorByCompany = {};\\n        for (let companyName of companyNames) {\\n            favorByCompany[companyName] = ns.getCompanyFavor(companyName);\\n        }\\n        // Change the company to work for into whichever company we can get to CEO fastest with. Minimize needed_rep/rep_gain_rate. CEO job is at 3.2e6 rep, so (3.2e6-current_rep)/(100+favor).\\n        factionConfig.companyName = companyNames.sort((a, b) => (3.2e6 - ns.getCompanyRep(a)) / (100 + favorByCompany[a]) - (3.2e6 - ns.getCompanyRep(b)) / (100 + favorByCompany[b]))[0];\\n        while (!ns.joinFaction('${factionName}')) { await ns.asleep(1000); }\\n        workedForInvite = await workForMegacorpFactionInvite(ns, factionName, false); // Work until CTO and the external script joins this faction, triggering an exit condition.\\n    }\\n\\n    if (workedForInvite) // If we took some action to earn the faction invite, wait for it to come in\\n        return await waitForFactionInvite(ns, factionName);\\n    else\\n        return await tryJoinFaction(ns, factionName);\\n\\n}\\n\\n/** @param {NS} ns\\n * @param cityName\\n */\\nasync function goToCity(ns, cityName) {\\n    if (ns.getPlayer().city === cityName) {\\n        ns.print(`Already in city ${cityName}`);\\n        return true;\\n    }\\n    if (ns.travelToCity(cityName)) {\\n        lastActionRestart = Date.now();\\n        announce(ns, `Travelled to ${cityName}`, 'info');\\n        return true;\\n    }\\n    announce(ns, `Failed to travelled to ${cityName} for some reason...`, 'error');\\n    return false;\\n}\\n\\n/** @param {NS} ns\\n *  @param reqKills\\n *  @param reqKarma\\n *  @param reqStats\\n */\\nexport async function crimeForKillsKarmaStats(ns, reqKills, reqKarma, reqStats) {\\n    const bestCrimesByDifficulty = [\\\"heist\\\", \\\"assassinate\\\", \\\"homicide\\\", \\\"mug\\\"]; // Will change crimes as our success rate improves\\n    const chanceThresholds = [0.75, 0.9, 0.5, 0]; // Will change crimes once we reach this probability of success for better all-round gains\\n    let player = ns.getPlayer();\\n    let strRequirements = [];\\n    let forever = reqKills >= Number.MAX_SAFE_INTEGER || reqKarma >= Number.MAX_SAFE_INTEGER || reqStats >= Number.MAX_SAFE_INTEGER;\\n    if (reqKills) strRequirements.push(() => `${reqKills} kills (Have ${player.numPeopleKilled})`);\\n    if (reqKarma) strRequirements.push(() => `-${reqKarma} Karma (Have ${ns.heart.break()})`);\\n    if (reqStats) strRequirements.push(() => `${reqStats} of each combat stat (Have Str: ${player.strength}, Def: ${player.defense}, Dex: ${player.dexterity}, Agi: ${player.agility})`);\\n    let crime = '', lastCrime = '', lastStatusUpdateTime = 0, crimeCount = 0;\\n    while (forever || player.strength < reqStats || player.defense < reqStats || player.dexterity < reqStats || player.agility < reqStats || player.numPeopleKilled < reqKills || -ns.heart.break() < reqKarma) {\\n        joinOpenInvitation(ns);\\n        let crimeChances = {};\\n        for (let crime of bestCrimesByDifficulty) {\\n            crimeChances[crime] = ns.getCrimeChance(crime);\\n        }\\n        let needStats = player.strength < reqStats || player.defense < reqStats || player.dexterity < reqStats || player.agility < reqStats;\\n        let karma = -ns.heart.break();\\n        crime = (karma < 1 || player.strength < 10) && crimeCount < 10 ? \\\"mug\\\" : karma < 5 && player.strength > 20 && crimeCount < 20 && crimeChances[2] > 0.5 ? \\\"homicide\\\" : // Start with a few fast crimes to boost stats / crime chances if we haven't done much crime before\\n            (!needStats && (player.numPeopleKilled < reqKills || karma < reqKarma)) ? \\\"homicide\\\" : // If *all* we need now is kills or Karma, homicide is the fastest way to do that\\n                bestCrimesByDifficulty.find((c, index) => crimeChances[c] >= chanceThresholds[index]); // Otherwise, crime based on success chance vs relative reward (precomputed)\\n        if (lastCrime !== crime || (Date.now() - lastStatusUpdateTime) > statusUpdateInterval) {\\n            ns.print(`Committing \\\"${crime}\\\" (${(100 * crimeChances[crime]).toPrecision(3)}% success) ` + (forever ? 'forever...' : `until we reach ${strRequirements.map(r => r()).join(', ')}`));\\n            lastCrime = crime;\\n            lastStatusUpdateTime = Date.now();\\n        }\\n        ns.tail(); // Force a tail window open when auto-criming, or else it's very difficult to stop if it was accidentally closed.\\n        ns.commitCrime(crime);\\n        player = ns.getPlayer();\\n        while (player.isWorking) {\\n            await ns.sleep(20);\\n            player = ns.getPlayer();\\n        }\\n        crimeCount++;\\n    }\\n    ns.print(`Done committing crimes. Reached ${strRequirements.map(r => r()).join(', ')}`);\\n    return true;\\n}\\n\\n/** @param {NS} ns */\\nasync function studyForCharisma(ns) {\\n    await goToCity(ns, 'Volhaven');\\n    if (ns.universityCourse('ZB Institute Of Technology', 'Leadership')) {\\n        lastActionRestart = Date.now();\\n        announce(ns, `Started studying 'Leadership' at 'ZB Institute Of Technology`, 'success');\\n        return true;\\n    }\\n    announce(ns, `For some reason, failed to study at university (not in correct city?)`, 'error');\\n    return false;\\n}\\n\\n/** @param {NS} ns\\n * @param factionName\\n * @param maxWaitTime\\n */\\nexport async function waitForFactionInvite(ns, factionName, maxWaitTime = 20000) {\\n    ns.print(`Waiting for invite from faction \\\"${factionName}\\\"...`);\\n    let waitTime = maxWaitTime;\\n    let invitations;\\n    let joinedFactions;\\n    do {\\n        invitations = ns.checkFactionInvitations();\\n        joinedFactions = ns.getPlayer().factions;\\n        if (invitations.includes(factionName) || joinedFactions.includes(factionName))\\n            break;\\n        await ns.sleep(loopSleepInterval);\\n    } while (!invitations.includes(factionName) && !joinedFactions.includes(factionName) && (waitTime -= 1000) > 0);\\n    if (joinedFactions.includes(factionName)) // Another script may have auto-joined this faction before we could\\n        ns.print(`An external script has joined faction \\\"${factionName}\\\" for us.`);\\n    else if (!invitations.includes(factionName))\\n        return announce(ns, `Waited ${ns.tFormat(maxWaitTime)}, but still have not received an invite for faction: \\\"${factionName}\\\" (Requirements not met?)`, 'error');\\n    else if (!(await tryJoinFaction(ns, factionName)))\\n        return announce(ns, `Something went wrong. Earned \\\"${factionName}\\\" faction invite, but failed to join it.`, 'error');\\n    return true;\\n}\\n\\n/** @param {NS} ns\\n * @param factionName\\n */\\nexport async function tryJoinFaction(ns, factionName) {\\n    const joinedFactions = ns.getPlayer().factions;\\n    if (joinedFactions.includes(factionName))\\n        return true;\\n    if (!(ns.joinFaction(factionName)))\\n        return false;\\n    announce(ns, `Joined faction \\\"${factionName}\\\"`, 'success');\\n    return true;\\n}\\n\\n/** @param {NS} ns\\n * @param factionName\\n */\\nasync function getCurrentFactionFavour(ns, factionName) {\\n    return ns.getFactionFavor(factionName);\\n}\\n\\nlet lastFactionWorkStatus = \\\"\\\";\\n/** @param {NS} ns\\n * Checks how much reputation we need with this faction to either buy all augmentations or get 150 favour, then works to that amount.\\n * @param factionName\\n * @param forceUnlockDonations\\n * @param forceBestAug\\n * */\\nexport async function workForSingleFaction(ns, factionName, forceUnlockDonations = false, forceBestAug = false) {\\n    const repToFavour = (rep) => Math.ceil(25500 * 1.02 ** (rep - 1) - 25000);\\n    const factionConfig = factionSpecificConfigs.find(c => c.name === factionName);\\n    const forceUnlock = factionConfig?.forceUnlock || options.first.includes(factionName);\\n    let highestRepAug = forceBestAug ? mostExpensiveAugByFaction[factionName] : mostExpensiveDesiredAugByFaction[factionName];\\n    let startingFavor = await getCurrentFactionFavour(ns, factionName);\\n    let favorRepRequired = Math.max(0, repToFavour(repToDonate) - repToFavour(startingFavor));\\n    // When to stop grinding faction rep (usually ~467,000 to get 150 favour) Set this lower if there are no augs requiring that much REP\\n    let factionRepRequired = forceUnlockDonations ? favorRepRequired : Math.min(highestRepAug, favorRepRequired);\\n    if (highestRepAug === -1 && !forceUnlock)\\n        return ns.print(`All \\\"${factionName}\\\" augmentations are owned. Skipping unlocking faction...`);\\n    // Ensure we get an invite to location-based factions we might want / need\\n    if (!await earnFactionInvite(ns, factionName))\\n        return ns.print(`We are not yet part of faction \\\"${factionName}\\\". Skipping working for faction...`);\\n    if (startingFavor >= repToDonate) // If we have already got 150+ favor, we've unlocked donations - no need to grind for rep\\n        return ns.print(`Donations already unlocked for \\\"${factionName}\\\". You should buy access to augs. Skipping working for faction...`);\\n    // Cannot work for gang factions. Detect if this is our gang faction!\\n    if (factionName === playerGang || factionName === 'Bladeburners')\\n        return ns.print(`\\\"${factionName}\\\" is an active gang faction. Cannot work for gang factions...`);\\n    if (forceUnlockDonations && mostExpensiveAugByFaction[factionName] < 0.2 * factionRepRequired) {// Special check to avoid pointless donation unlocking\\n        ns.print(`The last \\\"${factionName}\\\" aug is only ${mostExpensiveAugByFaction[factionName].toLocaleString()} rep, ` +\\n            `not worth grinding ${favorRepRequired.toLocaleString()} rep to unlock donations.`);\\n        forceUnlockDonations = false;\\n        factionRepRequired = highestRepAug = mostExpensiveAugByFaction[factionName];\\n    }\\n\\n    if (ns.getPlayer().workRepGained > 0) // If we're currently working faction work, stop to collect reputation and find out how much is remaining\\n        ns.stopAction();\\n    let currentReputation = ns.getFactionRep(factionName);\\n    // If the best faction aug is within 10% of our current rep, grind all the way to it so we can get it immediately, regardless of our current rep target\\n    if (forceBestAug || highestRepAug <= 1.1 * Math.max(currentReputation, factionRepRequired)) {\\n        forceBestAug = true;\\n        factionRepRequired = Math.max(highestRepAug, factionRepRequired);\\n    }\\n\\n    if (currentReputation >= factionRepRequired)\\n        return ns.print(`Faction \\\"${factionName}\\\" required rep of ${factionRepRequired.toLocaleString()} has already been attained ` +\\n            `(Current rep: ${Math.round(currentReputation).toLocaleString()}). Skipping working for faction...`)\\n\\n    ns.print(`Faction \\\"${factionName}\\\" Highest Aug Req: ${highestRepAug.toLocaleString()}, Current Favor (${startingFavor}/${repToDonate}) Req: ${favorRepRequired.toLocaleString()}`);\\n    if (options['invites-only'])\\n        return ns.print(`--invites-only Skipping working for faction...`);\\n\\n    let lastStatusUpdateTime = 0;\\n    while ((currentReputation = ns.getFactionRep(factionName)) < factionRepRequired) {\\n        joinOpenInvitation(ns);\\n        const factionWork = await detectBestFactionWork(ns, factionName); // Before each loop - determine what work gives the most rep/second for our current stats\\n        if (ns.workForFaction(factionName, factionWork, shouldFocusAtWork)) {\\n            lastActionRestart = Date.now();\\n            ns.tail(); // Force a tail window open to help the user kill this script if they accidentally closed the tail window and don't want to keep studying\\n        } else {\\n            announce(ns, `Something went wrong, failed to start \\\"${factionWork}\\\" work for faction \\\"${factionName}\\\" (Is gang faction, or not joined?)`, 'error');\\n            break;\\n        }\\n        let status = `Doing '${factionWork}' work for \\\"${factionName}\\\" until ${factionRepRequired.toLocaleString()} rep.`;\\n        if (lastFactionWorkStatus !== status) {\\n            // if (lastFactionWorkStatus !== status || (Date.now() - lastStatusUpdateTime) > statusUpdateInterval) {\\n            // ns.print((lastFactionWorkStatus = status) + ` Currently at ${Math.round(currentReputation).toLocaleString()}, earning ${(ns.getPlayer().workRepGainRate * 5).toFixed(2)} rep/sec.`);\\n            ns.print(lastFactionWorkStatus = status);\\n            lastStatusUpdateTime = Date.now();\\n        }\\n        await ns.sleep(restartWorkInterval);\\n        // Detect our rep requirement decreasing (e.g. if we exported for our daily +1 faction rep)\\n        let currentFavor = await getCurrentFactionFavour(ns, factionName);\\n        if (currentFavor > startingFavor && !forceBestAug) {\\n            favorRepRequired = Math.max(0, repToFavour(repToDonate) - repToFavour(startingFavor));\\n            factionRepRequired = forceUnlockDonations ? favorRepRequired : Math.min(highestRepAug, favorRepRequired);\\n        }\\n        // If we explicitly stop working, we immediately get our updated faction rep, otherwise it lags by 1 loop (until after next time we call workForFaction)\\n        if (currentReputation + ns.getPlayer().workRepGained >= factionRepRequired) // Note: Actual work rep gained will be subject to early cancellation policy\\n            ns.stopAction(); // We're close - stop working so our current rep is accurate when we check the while loop condition\\n    }\\n    if (currentReputation >= factionRepRequired)\\n        ns.print(`Attained ${Math.round(currentReputation).toLocaleString()} rep with \\\"${factionName}\\\" (needed ${factionRepRequired.toLocaleString()}).`);\\n    return currentReputation >= factionRepRequired;\\n}\\n\\n/** @param {NS} ns\\n * @param factionName\\n * Try all work types and see what gives the best rep gain with this faction! */\\nasync function detectBestFactionWork(ns, factionName) {\\n    let bestWork, bestRepRate = 0;\\n    for (const work of [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"]) {\\n        //if (!await getNsDataThroughFile(ns, `ns.workForFaction('${factionName}', '${work}') === true); ns.setFocus(${shouldFocusAtWork}`, '/Temp/work-for-faction.txt'))\\n        if (!ns.workForFaction(factionName, work, shouldFocusAtWork)) {\\n            // ns.print(`\\\"${factionName}\\\" work \\\"${work}\\\" not supported.`);\\n            continue; // This type of faction work must not be supported\\n        }\\n        const currentRepGainRate = ns.getPlayer().workRepGainRate;\\n        // ns.print(`\\\"${factionName}\\\" work ${work} provides ${currentRepGainRate} rep rate`);\\n        if (currentRepGainRate > bestRepRate) {\\n            bestRepRate = currentRepGainRate;\\n            bestWork = work;\\n        }\\n    }\\n    return bestWork || 'hacking'; // || hacking bug is fixed problem with gang and working nitesec\\n}\\n\\n/** @param {NS} ns\\n *  @param {Array<string>} megacorpFactionsInPreferredOrder - The list of all corporate factions to work for, sorted in the order they should be worked for\\n *  @param alsoWorkForCompanyFactions\\n *  @param oneCompanyFactionAtATime\\n * */\\nexport async function workForAllMegacorps(ns, megacorpFactionsInPreferredOrder, alsoWorkForCompanyFactions, oneCompanyFactionAtATime) {\\n    let player = ns.getPlayer();\\n    if (player.hacking < 225)\\n        return ns.print(`Hacking Skill ${player.hacking} is to low to work for any megacorps (min req. 225).`);\\n    let joinedCompanyFactions = player.factions.filter(f => megacorpFactionsInPreferredOrder.includes(f)); // Company factions we've already joined\\n    if (joinedCompanyFactions.length > 0)\\n        ns.print(`${joinedCompanyFactions.length} companies' factions have already been joined: ${joinedCompanyFactions.join(\\\", \\\")}`)\\n    let doFactionWork = alsoWorkForCompanyFactions && oneCompanyFactionAtATime;\\n    // Earn each obtainable megacorp faction invite, and optionally also grind faction rep\\n    for (const factionName of megacorpFactionsInPreferredOrder) {\\n        if ((await workForMegacorpFactionInvite(ns, factionName, doFactionWork)) && doFactionWork)\\n            await workForSingleFaction(ns, factionName);\\n    }\\n    if (alsoWorkForCompanyFactions && !oneCompanyFactionAtATime) { // If configured, start grinding rep with company factions we've joined\\n        ns.print(`Done working for companies, now working for all incomplete company factions...`);\\n        for (const factionName of megacorpFactionsInPreferredOrder)\\n            await workForSingleFaction(ns, factionName);\\n    }\\n}\\n\\n/** @param {NS} ns\\n * @param factionName\\n * @param waitForInvite\\n */\\nexport async function workForMegacorpFactionInvite(ns, factionName, waitForInvite) {\\n    const companyConfig = companySpecificConfigs.find(c => c.name === factionName); // For anything company-specific\\n    const companyName = companyConfig?.companyName || factionName; // Name of the company that gives the faction (same for all but Fulcrum)\\n    const statModifier = companyConfig?.statModifier || 0; // How much e.g. Hack / Cha is needed for a promotion above the base requirement for the job\\n    const repRequiredForFaction = companyConfig?.repRequiredForFaction || 200000; // Required to unlock the faction\\n\\n    let player = ns.getPlayer();\\n    if (player.factions.includes(factionName))\\n        return false; // Only return true if we did work to earn a new faction invite\\n    if ((ns.checkFactionInvitations()).includes(factionName))\\n        return waitForInvite ? await waitForFactionInvite(ns, factionName) : false;\\n    // TODO: In some scenarios, the best career path may require combat stats, this hard-codes the optimal path for hack stats\\n    const itJob = jobs.find(j => j.name === \\\"it\\\");\\n    const softwareJob = jobs.find(j => j.name === \\\"software\\\");\\n    if (itJob.reqHack[0] + statModifier > player.hacking) // We don't qualify to work for this company yet if we can't meet IT qualifications (lowest there are)\\n        return ns.print(`Cannot yet work for \\\"${companyName}\\\": Need Hack ${itJob.reqHack[0] + statModifier} to get hired (current Hack: ${player.hacking});`);\\n    ns.print(`Going to work for Company \\\"${companyName}\\\" next...`)\\n    let currentReputation, currentRole = \\\"\\\", currentJobTier = -1; // TODO: Derive our current position and promotion index based on player.jobs[companyName]\\n    let lastStatusUpdateTime = 0, lastStatus = \\\"\\\";\\n    let studying = false, working = false;\\n    while (((currentReputation = ns.getCompanyRep(companyName)) < repRequiredForFaction) && !player.factions.includes(factionName)) {\\n        joinOpenInvitation(ns);\\n        player = ns.getPlayer();\\n        // Determine the next promotion we're striving for (the sooner we get promoted, the faster we can earn company rep)\\n        const getTier = job => Math.min(job.reqRep.filter(r => r <= currentReputation).length, job.reqHack.filter(h => h <= player.hacking).length, job.reqCha.filter(c => c <= player.charisma).length) - 1;\\n        // It's generally best to hop back-and-forth between it and software engineer career paths (rep gain is about the same, but better money from software)\\n        const qualifyingItTier = getTier(itJob), qualifyingSoftwareTier = getTier(softwareJob);\\n        const bestJobTier = Math.max(qualifyingItTier, qualifyingSoftwareTier); // Go with whatever job promotes us higher\\n        const bestRoleName = qualifyingItTier > qualifyingSoftwareTier ? \\\"it\\\" : \\\"software\\\"; // If tied for qualifying tier, go for software\\n        if (currentJobTier < bestJobTier || currentRole !== bestRoleName) { // We are ready for a promotion, ask for one!\\n            if (ns.applyToCompany(companyName, bestRoleName))\\n                announce(ns, `Successfully applied to \\\"${companyName}\\\" for a '${bestRoleName}' Job or Promotion`, 'success');\\n            else if (currentJobTier !== -1) // Unless we just restarted \\\"work-for-factions\\\" and lost track of our current job, this is an error\\n                announce(ns, `Application to \\\"${companyName}\\\" for a '${bestRoleName}' Job or Promotion failed.`, 'error');\\n            currentJobTier = bestJobTier; // API to apply for a job immediately gives us the highest tier we qualify for\\n            currentRole = bestRoleName;\\n            player = ns.getPlayer();\\n        }\\n        const currentJob = player.jobs[companyName];\\n        const nextJobTier = currentRole === \\\"it\\\" ? currentJobTier : currentJobTier + 1;\\n        const nextJobName = currentRole === \\\"it\\\" || nextJobTier >= itJob.reqRep.length ? \\\"software\\\" : \\\"it\\\";\\n        const nextJob = nextJobName === \\\"it\\\" ? itJob : softwareJob;\\n        const requiredHack = nextJob.reqHack[nextJobTier] === 0 ? 0 : nextJob.reqHack[nextJobTier] + statModifier; // Stat modifier only applies to non-zero reqs\\n        const requiredCha = nextJob.reqCha[nextJobTier] === 0 ? 0 : nextJob.reqCha[nextJobTier] + statModifier; // Stat modifier only applies to non-zero reqs\\n        const requiredRep = nextJob.reqRep[nextJobTier]; // No modifier on rep requirements\\n        let status = `Next promotion ('${nextJobName}' #${nextJobTier}) at Hack:${requiredHack} Cha:${requiredCha} Rep:${requiredRep?.toLocaleString()}` +\\n            (repRequiredForFaction > nextJob.reqRep[nextJobTier] ? '' : `, but we won't need it, because we'll sooner hit ${repRequiredForFaction.toLocaleString()} reputation to unlock company faction \\\"${factionName}\\\"!`);\\n        // We should only study at university if every other requirement is met but Charisma\\n        if (currentReputation >= requiredRep && player.hacking >= requiredHack && player.charisma < requiredCha && !noStudying) {\\n            status = `Studying at ZB university until Cha reaches ${requiredCha}...\\\\n` + status;\\n            if (studying && player.className !== 'taking a Leadership course' && player.className !== 'Leadership' /* In case className is made more intuitive in the future */) {\\n                announce(ns, `Leadership studies were interrupted. player.className=\\\"${player.className}\\\" Restarting in 5 seconds...`, 'warning');\\n                studying = false; // If something external has interrupted our studies, take note\\n                ns.tail(); // Force a tail window open to help the user kill this script if they accidentally closed the tail window and don't want to keep studying\\n            }\\n            if (!studying) { // Study at ZB university if CHA is the limiter.\\n                if (await studyForCharisma(ns))\\n                    working = !(studying = true);\\n            }\\n        } else if (studying) { // If we no longer need to study and we currently are, turn off study mode and get back to work!\\n            studying = false;\\n            continue; // Restart the loop so we refresh our promotion index and apply for a promotion before working more\\n        }\\n\\n        // Regardless of the earlier promotion logic, always try for a promotion to make sure we don't miss a promotion due to buggy logic\\n        if (ns.applyToCompany(companyName, currentRole))\\n            announce(ns, `Unexpected '${currentRole}' promotion from ${currentJob} to \\\"${ns.getPlayer().jobs[companyName]}. Promotion logic must be off...\\\"`, 'warning');\\n        // TODO: If we ever get rid of the below periodic restart-work, we will need to monitor for interruptions with player.workType == e.g. \\\"Work for Company\\\"\\n        if (!studying && (!working || (Date.now() - lastActionRestart >= restartWorkInterval) /* We must periodically restart work to collect Rep Gains */)) {\\n            // Work for the company (assume daemon is grinding hack XP as fast as it can, so no point in studying for that)\\n            //if (await getNsDataThroughFile(ns, `ns.workForCompany('${companyName}')); ns.setFocus(${shouldFocusAtWork}`, '/Temp/work-for-company.txt')) {\\n            if (ns.workForCompany(companyName, shouldFocusAtWork)) {\\n                lastActionRestart = Date.now();\\n                working = true;\\n            } else {\\n                announce(ns, `Something went wrong, failed to start working for company \\\"${companyName}\\\".`, 'error');\\n                break;\\n            }\\n        }\\n        status = `Currently a \\\"${player.jobs[companyName]}\\\" ('${currentRole}' #${currentJobTier}) for \\\"${companyName}\\\"`;\\n        if (lastStatus !== status) {\\n            player = ns.getPlayer();\\n            ns.print(status + ` earning ${(player.workRepGainRate * 5).toFixed(2)} rep/sec.\\\\n` +\\n                `${status}\\\\nCurrent player stats are Hack:${player.hacking} ${player.hacking >= (requiredHack || 0) ? '✓' : '✗'} ` +\\n                `Cha:${player.charisma} ${player.charisma >= (requiredCha || 0) ? '✓' : '✗'} ` +\\n                `Rep:${Math.round(currentReputation).toLocaleString()} ${currentReputation >= (requiredRep || repRequiredForFaction) ? '✓' : '✗'}`);\\n            lastStatus = status;\\n        }\\n        await ns.sleep(loopSleepInterval); // Sleep now and wake up periodically and stop working to check our stats / reputation progress\\n    }\\n    // Return true if we succeeded, false otherwise.\\n    if (currentReputation >= repRequiredForFaction) {\\n        ns.print(`Attained ${repRequiredForFaction.toLocaleString()} rep with \\\"${companyName}\\\".`);\\n        if (!player.factions.includes(factionName) && waitForInvite)\\n            return await waitForFactionInvite(ns, factionName);\\n        return true;\\n    }\\n    ns.print(`Stopped working for \\\"${companyName}\\\" repRequiredForFaction: ${repRequiredForFaction.toLocaleString()} ` +\\n        `currentReputation: ${Math.round(currentReputation).toLocaleString()} inFaction: ${player.factions.includes(factionName)}`);\\n    return false;\\n}\",\"filename\":\"workForFaction.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"augments.js\",\"url\":\"blob:https://danielyxie.github.io/48a2397b-5c19-457f-adc9-dea074a1f1b1\",\"moduleSequenceNumber\":28961},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/82993712-a470-477b-baa5-059b28f23020\",\"moduleSequenceNumber\":28949},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/fea563ac-9653-4a5c-a3c1-368b9d8f585c\",\"moduleSequenceNumber\":28932},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/bed52b47-3bcb-4ad1-bf98-fa64d03e75ec\",\"moduleSequenceNumber\":28933},{\"filename\":\"workForFaction.js\",\"url\":\"blob:https://danielyxie.github.io/be901fe4-ed78-4709-a3c7-3b332c64d658\",\"moduleSequenceNumber\":29019}],\"dependents\":[],\"ramUsage\":42.8,\"server\":\"home\",\"moduleSequenceNumber\":76071,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"bladeburner.getCurrentAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.joinFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.getCrimeStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getCrimeChance\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getCompanyFavor\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.getCompanyRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.universityCourse\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.getFactionFavor\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.workForFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.applyToCompany\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.workForCompany\",\"cost\":3},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const factions = {\\n    Illuminati: \\\"Illuminati\\\", Daedalus: \\\"Daedalus\\\", TheCovenant: \\\"The Covenant\\\", ECorp: \\\"ECorp\\\", MegaCorp: \\\"MegaCorp\\\",\\n    BachmanAssociates: \\\"Bachman & Associates\\\", BladeIndustries: \\\"Blade Industries\\\", NWO: \\\"NWO\\\", Clarke: \\\"Clarke Incorporated\\\",\\n    OmniTek: \\\"OmniTek Incorporated\\\", FourSigma: \\\"Four Sigma\\\", KuaiGong: \\\"KuaiGong International\\\", Fulcrum: \\\"Fulcrum Secret Technologies\\\",\\n    BitRunners: \\\"BitRunners\\\", TheBlackHand: \\\"The Black Hand\\\", NiteSec: \\\"NiteSec\\\", Aevum: \\\"Aevum\\\", Chongqing: \\\"Chongqing\\\", Ishima: \\\"Ishima\\\",\\n    NewTokyo: \\\"New Tokyo\\\", Sector12: \\\"Sector-12\\\", Volhaven: \\\"Volhaven\\\", SpeakersfortheDead: \\\"Speakers for the Dead\\\", TheDarkArmy: \\\"The Dark Army\\\",\\n    TheSyndicate: \\\"The Syndicate\\\", Silhouette: \\\"Silhouette\\\", Tetrads: \\\"Tetrads\\\", SlumSnakes: \\\"Slum Snakes\\\", Netburners: \\\"Netburners\\\",\\n    TianDiHui: \\\"Tian Di Hui\\\", CyberSec: \\\"CyberSec\\\", Bladeburners: \\\"Bladeburners\\\"\\n};\\nexport const factionsWork = {\\n    \\\"Illuminati\\\": [\\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Daedalus\\\": [\\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"The Covenant\\\": [\\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"ECorp\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"MegaCorp\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Bachman & Associates\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Blade Industries\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"NWO\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Clarke Incorporated\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"OmniTek Incorporated\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Four Sigma\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"KuaiGong International\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Fulcrum Secret Technologies\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"BitRunners\\\": [\\\"hacking contracts\\\"],\\n    \\\"The Black Hand\\\": [\\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"NiteSec\\\": [\\\"hacking contracts\\\"],\\n    \\\"Aevum\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Chongqing\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Ishima\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"New Tokyo\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Sector-12\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Volhaven\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Speakers for the Dead\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"The Dark Army\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"The Syndicate\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Silhouette\\\": [\\\"security\\\", \\\"field\\\", \\\"hacking contracts\\\"],\\n    \\\"Tetrads\\\": [\\\"security\\\", \\\"field\\\"],\\n    \\\"Slum Snakes\\\": [\\\"security\\\", \\\"field\\\"],\\n    \\\"Netburners\\\": [\\\"hacking contracts\\\"],\\n    \\\"Tian Di Hui\\\": [\\\"security\\\", \\\"hacking contracts\\\"],\\n    \\\"CyberSec\\\": [\\\"hacking contracts\\\"],\\n    \\\"Bladeburners\\\": []\\n};\\nexport const allGangFactions = [\\\"Slum Snakes\\\", \\\"Tetrads\\\", \\\"The Black Hand\\\", \\\"The Syndicate\\\", \\\"The Dark Army\\\", \\\"Speakers for the Dead\\\", \\\"NiteSec\\\"];\\n\\nlet augmentationNames;\\n/** @param {NS} ns **/\\nexport async function initAugments(ns) {\\n    await writeAugmentsPerFaction(ns);\\n    await ns.write(`/tmp/getOwnedAugmentations.txt`, JSON.stringify(ns.getOwnedAugmentations(true), null, 2), 'w');\\n    await initAllAugmentRepReq(ns);\\n}\\n/** @param {NS} ns **/\\nasync function writeAugmentsPerFaction(ns) {\\n    const factionNames = Object.values(factions);\\n    const data = {};\\n    for (let factionName of factionNames) {\\n        data[factionName] = ns.getAugmentationsFromFaction(factionName);\\n    }\\n    augmentationNames = [...new Set(Object.values(data).flat())]\\n    await ns.write(`/tmp/factionAugs.txt`, JSON.stringify(data, null, 2), 'w');\\n}\\n/** @param {NS} ns **/\\nexport function getAugmentsPerFaction(ns) {\\n    return JSON.parse(ns.read(`/tmp/factionAugs.txt`));\\n}\\nexport function getAugmentationNames() {\\n    return augmentationNames;\\n}\\nconst augRepReq = {};\\nconst augStats = {};\\n/** @param {NS} ns **/\\nasync function initAllAugmentRepReq(ns) {\\n    for (let augmentationName of getAugmentationNames()) {\\n        augRepReq[augmentationName] = ns.getAugmentationRepReq(augmentationName);\\n        augStats[augmentationName] = ns.getAugmentationStats(augmentationName);\\n        augStats[augmentationName].price = ns.getAugmentationPrice(augmentationName);\\n    }\\n    await ns.write(`/tmp/augRepReq.txt`, JSON.stringify(augRepReq, null, 2), 'w');\\n    await ns.write(`/tmp/augStats.txt`, JSON.stringify(augStats, null, 2), 'w');\\n}\\nexport const getAllAugmentRepReq = (ns) => JSON.parse(ns.read(`/tmp/augRepReq.txt`));\\nexport const getAllAugmentStats = (ns) => JSON.parse(ns.read(`/tmp/augStats.txt`));\\n\\n/** @param {NS} ns **/\\nexport function getOwnedAugmentationsStatic(ns) {\\n    return JSON.parse(ns.read(`/tmp/getOwnedAugmentations.txt`));\\n}\\n\\nexport function getAugsRemainingAtFaction(ns) {\\n    const playerAugs = getOwnedAugmentationsStatic(ns);\\n    const factionAugs = getAugmentsPerFaction(ns);\\n    const factionAugsLeft = {};\\n    Object.entries(factionAugs)\\n        .forEach(([faction, augs]) => factionAugsLeft[faction] = augs.filter(aug => !playerAugs.includes(aug)));\\n    return factionAugsLeft;\\n}\\n\\n\\nexport function hasStat(playerStat, augStats) {\\n    switch (playerStat) {\\n        case 'hack':\\n        // return augStats.hacking_chance_mult\\n        //     || augStats.hacking_exp_mult\\n        //     || augStats.hacking_grow_mult\\n        //     || augStats.hacking_money_mult\\n        //     || augStats.hacking_mult\\n        //     || augStats.hacking_speed_mult;\\n        case 'str':\\n        // return augStats.strength_exp_mult || augStats.strength_mult;\\n        case 'def':\\n        // return augStats.defense_exp_mult || augStats.defense_mult;\\n        case 'dex':\\n        //return augStats.dexterity_exp_mult || augStats.dexterity_mult;\\n        case 'agi':\\n        // return augStats.agility_exp_mult || augStats.agility_mult;\\n        case 'cha':\\n        //return augStats.charisma_exp_mult || augStats.charisma_mult;\\n        case 'crime':\\n        case 'faction_rep':\\n        case 'company_rep':\\n        case 'bladeburner':\\n        case 'work':\\n        default:\\n            return Object.keys(augStats).find(o => o.startsWith(playerStat)) !== undefined;\\n    }\\n}\\nconst simulacrumAugName = \\\"The Blade's Simulacrum\\\"; // This augmentation lets you do bladeburner actions while busy\\nexport const hasBladesSimulacrum = (ns) => getOwnedAugmentationsStatic(ns).includes(simulacrumAugName);\",\"filename\":\"augments.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.6,\"server\":\"home\",\"moduleSequenceNumber\":91416,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrice\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { findBox, boxTailSingleton, sleevesPortNumber, tryGetBitNodeMultipliers } from \\\"./utils\\\";\\nimport { createSidebarItem, elemFromHTML, sidebar } from \\\"/box/box.js\\\"\\nimport { getAugsRemainingAtFaction, factionsWork, getAllAugmentStats, hasStat, hasBladesSimulacrum } from \\\"./augments\\\";\\n\\nconst interval = 5000; // Update (tick) this often\\nconst minTaskWorkTime = 29000; // Sleeves assigned a new task should stick to it for at least this many milliseconds\\nlet workByFaction; // Cache of crime statistics and which factions support which work\\nlet task, lastPurchaseTime, availableAugs, lastReassignTime; // State by sleeve\\n//todo convert the status to some nice html for the box.js\\nlet sleeveStatuses = [];\\nlet playerInfo, numSleeves, augmentStats;\\nlet options;\\n\\nconst argsSchema = [\\n    ['min-shock-recovery', 97], // Minimum shock recovery before attempting to train or do crime (Set to 100 to disable, 0 to recover fully)\\n    ['shock-recovery', 0.3], // Set to a number between 0 and 1 to devote that ratio of time to periodic shock recovery (until shock is at 0)\\n    ['crime', null], // If specified, sleeves will perform only this crime regardless of stats\\n    ['aug-budget', 10e9], // Spend up to this much of current cash on augs per tick (Default is high, because these are permanent for the rest of the BN)\\n    ['buy-cooldown', 60 * 1000], // Must wait this may milliseconds before buying more augs for a sleeve\\n    ['min-aug-batch', 20], // Must be able to afford at least this many augs before we pull the trigger (or fewer if buying all remaining augs)\\n];\\n\\nexport function autocomplete(data, _) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\nconst bladeburnerDesiredStats = ['agi', 'dex', 'str', 'def', 'faction_rep', 'company_rep', 'hacknet'];\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    options = ns.flags(argsSchema);\\n    ns.disableLog('getServerMoneyAvailable');\\n    ns.disableLog('asleep');\\n    // const title = 'sleeves';\\n    // let box = findBox(title);\\n    // if (!box) {\\n    //     box = createSidebarItem(title, '<div />', 'x8⛹')\\n    // }\\n    // elemFromHTML('');\\n    boxTailSingleton(ns, 'sleeves', '⛹x8', '150px');\\n    ns.clearLog();\\n    // Ensure the global state is reset (e.g. after entering a new bitnode)\\n    task = [];\\n    lastPurchaseTime = [];\\n    availableAugs = [];\\n    lastReassignTime = [];\\n    sleeveStatuses = [];\\n    workByFaction = {};\\n    augmentStats = getAllAugmentStats(ns);\\n    // Start the main loop\\n    while (true) {\\n        try { await mainLoop(ns); }\\n        catch (error) {\\n            ns.print(`WARNING: An error was caught (and suppressed) in the main loop: ${error.message}`, false, 'warning');\\n            ns.print(error.stack);\\n            ns.toast(`Sleeves.js Error: ${error.message}`, 'error', 5000);\\n        }\\n        await ns.asleep(interval);\\n    }\\n}\\n/** @param {NS} ns\\n * Main loop that gathers data, checks on all sleeves, and manages them. */\\nasync function mainLoop(ns) {\\n    try {\\n        const sleeveData = JSON.parse(ns.read('/tmp/sleeves_static.txt'));\\n        numSleeves = sleeveData.getNumSleeves;\\n    } catch { }\\n    // Update info\\n    let readMore = true;\\n    let portData = [];\\n    while (readMore) {\\n        let portRead = ns.readPort(sleevesPortNumber);\\n        if ('NULL PORT DATA' !== portRead) {\\n            portData.push(portRead);\\n        } else {\\n            readMore = false;\\n        }\\n    }\\n    // TODO assign sleeves to get reps from port data.\\n    numSleeves = numSleeves || 8;\\n    playerInfo = ns.getPlayer();\\n    let budget = playerInfo.money * options['aug-budget'];\\n\\n    // Update all sleeve stats and loop over all sleeves to do some individual checks and task assignments\\n    let sleeveStats = [];\\n    let sleeveInfo = [];\\n    for (let i = 0; i < numSleeves; i++) {\\n        sleeveStats.push(ns.sleeve.getSleeveStats(i));\\n        sleeveInfo.push(ns.sleeve.getInformation(i));\\n    }\\n    for (let i = 0; i < numSleeves; i++) {\\n        let sleeve = { ...sleeveStats[i], ...sleeveInfo[i] }; // For convenience, merge all sleeve stats/info into one object\\n        // MANAGE SLEEVE AUGMENTATIONS\\n        if (sleeve.shock === 0) // No augs are available augs until shock is 0\\n            budget -= await manageSleeveAugs(ns, i, budget);\\n\\n        // ASSIGN SLEEVE TASK\\n        // These tasks should be immediately discontinued in certain conditions, even if it hasn't been 'minTaskWorkTime'\\n        if (task[i] === \\\"recover from shock\\\" && sleeve.shock === 0 ||\\n            task[i] === \\\"synchronize\\\" && sleeve.sync === 100)\\n            lastReassignTime[i] = 0;\\n        // Otherwise, don't change tasks if we've changed tasks recently (avoids e.g. disrupting long crimes too frequently)\\n        if (Date.now() - (lastReassignTime[i] || 0) < minTaskWorkTime) continue;\\n\\n        // Decide what we think the sleeve should be doing for the next little while\\n        let [designatedTask, command, args, statusUpdate] = await pickSleeveTask(ns, i, sleeve);\\n\\n        // Start the clock, this sleeve should stick to this task for minTaskWorkTime\\n        lastReassignTime[i] = Date.now();\\n        // Set the sleeve's new task if it's not the same as what they're already doing.\\n        if (task[i] !== designatedTask) {\\n            await setSleeveTask(ns, i, designatedTask, command, args);\\n            sleeveStatuses[i] = statusUpdate;\\n        }\\n    }\\n\\n    ns.clearLog();\\n    for (let i = 0; i < sleeveStatuses.length; i++) {\\n        ns.print(`[${i % numSleeves}] ${sleeveStatuses[i]}`);\\n    }\\n}\\nconst excludedAugs = ['QLink', 'Hydroflame Left Arm'];\\n\\n/** @param {NS} ns\\n * @param i\\n * @param budget\\n * Purchases augmentations for sleeves after corp and blade simulcrum owned */\\nasync function manageSleeveAugs(ns, i, budget) {\\n    if (!hasBladesSimulacrum(ns) || !playerInfo.hasCorporation) {\\n        return 0;\\n    }\\n    availableAugs[i] = ns.sleeve.getSleevePurchasableAugs(i).filter(a => !excludedAugs.includes(a.name)).sort((a, b) => a.cost - b.cost);\\n    // filter augs base on desired stats;\\n    availableAugs[i] = availableAugs[i].filter(a => bladeburnerDesiredStats.find((stat) => hasStat(stat, augmentStats[a.name])));\\n    const cooldownLeft = Math.max(0, options['buy-cooldown'] - (Date.now() - (lastPurchaseTime[i] || 0)));\\n    const [batchCount, batchCost] = availableAugs[i].reduce(([n, c], aug) => c + aug.cost <= budget ? [n + 1, c + aug.cost] : [n, c], [0, 0]);\\n    const purchaseUpdate = `P Plan ${batchCount.toFixed(0).padStart(2)}/${availableAugs[i].length.toFixed(0).padEnd(2)} augs ` +\\n        `${ns.nFormat(batchCost, '$0.0a')} of ${ns.nFormat(availableAugs[i].reduce((t, aug) => t + aug.cost, 0), '$0.0a')} in ${ns.tFormat(cooldownLeft)}`;\\n    sleeveStatuses[numSleeves + i] = purchaseUpdate;\\n    if (availableAugs[i].length === 0) return 0;\\n    if (cooldownLeft === 0 && batchCount > 0 && ((batchCount >= availableAugs[i].length - 1) || batchCount >= options['min-aug-batch'])) { // Don't require the last aug it's so much more expensive\\n        let strAction = `Purchase ${batchCount} augmentations for sleeve ${i} at total cost of ${ns.nFormat(batchCost, '0.0.a')}`;\\n        let toPurchase = availableAugs[i].splice(0, batchCount);\\n        if ((batchCost + 5e9) > playerInfo.money) {\\n            return 0;\\n        }\\n        if (await [i, ...toPurchase.map(a => a.name)].slice(1).reduce((s, aug) => s && ns.sleeve.purchaseSleeveAug(i, aug), true)) {\\n            ns.toast(`SUCCESS: ${strAction}`, 'success', 30000);\\n        } else ns.toast(`ERROR: Failed to ${strAction}`, 'error', 30000);\\n        lastPurchaseTime[i] = Date.now();\\n        return batchCost; // Even if we think we failed, return the predicted cost so if the purchase did go through, we don't end up over-budget\\n    }\\n    return 0;\\n}\\nlet sleeveFactionWork = [];\\n/** @param {NS} ns\\n * @param i\\n * @param sleeve\\n * Picks the best task for a sleeve, and returns the information to assign and give status updates for that task. */\\nasync function pickSleeveTask(ns, i, sleeve) {\\n    // Must synchronize first iif you haven't maxed memory on every sleeve.\\n    if (sleeve.sync < 100) {\\n        sleeveFactionWork[i] = '';\\n        return [\\\"synchronize\\\", ns.sleeve.setToSynchronize, [i], `syncing... ${sleeve.sync.toFixed(2)}%`];\\n    }\\n    // must crime till gangs can be unlocked\\n    if (ns.heart.break() > -54000) {\\n        let crime = getBestCrime(ns, sleeve, true);\\n        sleeveFactionWork[i] = '';\\n        return [`commit ${crime.name} `, ns.sleeve.setToCommitCrime, [i, crime.name],\\n            /*   */ `committing ${crime.name} with rate ${(crime.rate).toFixed(2)}`];\\n    }\\n    // Opt to do shock recovery if above the --min-shock-recovery threshold, or if above 0 shock, with a probability of --shock-recovery\\n    if (sleeve.shock > options['min-shock-recovery'] || sleeve.shock > 0 && options['shock-recovery'] > 0 && Math.random() < options['shock-recovery']) {\\n        sleeveFactionWork[i] = '';\\n        return [\\\"recover from shock\\\", ns.sleeve.setToShockRecovery, [i], `recovering from shock... ${sleeve.shock.toFixed(2)}%`];\\n    }\\n    // If player is currently working for faction or company rep, sleeves 0 can help him out (Note: Only one sleeve can work for a faction)\\n    if (i === 0 && playerInfo.isWorking && playerInfo.workType === \\\"Working for Faction\\\") {\\n        // TODO: We should be able to borrow logic from work-for-factions.js to have more sleeves work for useful factions / companies\\n        // We'll cycle through work types until we find one that is supported. TODO: Auto-determine the most productive faction work to do.\\n        const faction = playerInfo.currentWorkFactionName;\\n        const work = factionsWork[faction][0];\\n        sleeveFactionWork[i] = faction;\\n        return [`work for faction '${faction}' (${work})`, ns.sleeve.setToFactionWork, [i, faction, work],\\n            /*   */ `helping earn rep with faction ${faction} by doing ${work}.`];\\n    }\\n    if (i === 0 && playerInfo.isWorking && playerInfo.workType === \\\"Working for Company\\\") { // If player is currently working for a company rep, sleeves 0 shall help him out (only one sleeve can work for a company)\\n        sleeveFactionWork[i] = '';\\n        return [`work for company '${playerInfo.companyName}'`, ns.sleeve.setToCompanyWork, [i, playerInfo.companyName],\\n            /*   */ `helping earn rep with company ${playerInfo.companyName}.`];\\n    }\\n    if (ns.fileExists('/tmp/ingang.txt')) {\\n        const factionAugs = getAugsRemainingAtFaction(ns);\\n        const factionsWithAugs = Object.entries(factionAugs)\\n            .filter(([faction, augList]) =>\\n                augList.filter(aug => aug !== 'NeuroFlux Governor').length > 0 // work for factions with augs other than NFG\\n                && playerInfo.factions.includes(faction) // player in faction\\n                && faction !== 'Bladeburners' // can't work for Bladeburners\\n                && faction !== 'Slum Snakes'\\n                && !sleeveFactionWork.includes(faction)); // can't work for Slumsnakes (in gang)\\n        //TODO check faction rep is <= max aug cost\\n        //TODO track factions and companies being worked for instead of using sleeve index\\n        let factionAndAugs = factionsWithAugs[0]; // just use sleeve index to pick a faction to work for\\n        if (factionAndAugs && factionAndAugs[0]) {\\n            let faction = factionAndAugs[0];\\n            const work = factionsWork[faction][0];\\n            sleeveFactionWork[i] = faction;\\n            return [`work for faction '${faction}' (${work})`, ns.sleeve.setToFactionWork, [i, faction, work],\\n                /*   */ `doing ${work} at ${faction}.`];\\n        }\\n    }\\n    // Finally, do crime for Karma. Homicide has the rate gain, if we can manage a decent success rate.\\n    let crime = getBestCrime(ns, sleeve, ns.heart.break() > -54000);\\n    return [`commit ${crime.name} `, ns.sleeve.setToCommitCrime, [i, crime.name],\\n        /*   */ `committing ${crime.name} with rate ${ns.nFormat(crime.rate, '0.0a')}`];\\n}\\n\\n/** @param {NS} ns\\n * @param i\\n * @param designatedTask\\n * @param command\\n * @param args\\n * Sets a sleeve to its designated task, with some extra error handling logic for working for factions. */\\nasync function setSleeveTask(ns, i, designatedTask, command, args) {\\n    let strAction = `Set sleeve ${i} to ${designatedTask} `;\\n    if (await command(...args)) {\\n        task[i] = designatedTask;\\n        //ns.print(`SUCCESS: ${strAction} `);\\n        return true;\\n    }\\n    // If assigning the task failed...\\n    lastReassignTime[i] = 0;\\n    // If working for a faction, it's possible he current work isn't supported, so try the next one.\\n    if (designatedTask.startsWith('work for faction')) {\\n        ns.toast(`WARN: Failed to ${strAction} - work type may not be supported.`, 'warning', 10000);\\n        workByFaction[playerInfo.currentWorkFactionName] = (workByFaction[playerInfo.currentWorkFactionName] || 0) + 1;\\n    } else\\n        ns.toast(`ERROR: Failed to ${strAction} `, 'error', 30000);\\n    return false;\\n}\\n\\n/** @param {NS} ns\\n * @param sleeve\\n * @param crimeStats\\n * Calculate the chance a sleeve has of committing crime successfully. */\\nfunction calculateSleeveCrimeChance(ns, sleeve, crimeStats) {\\n    let chance =\\n        (crimeStats.hacking_success_weight || 0) * sleeve.hacking +\\n        (crimeStats.strength_success_weight || 0) * sleeve.strength +\\n        (crimeStats.defense_success_weight || 0) * sleeve.defense +\\n        (crimeStats.dexterity_success_weight || 0) * sleeve.dexterity +\\n        (crimeStats.agility_success_weight || 0) * sleeve.agility +\\n        (crimeStats.charisma_success_weight || 0) * sleeve.charisma;\\n    chance /= 975;\\n    chance /= crimeStats.difficulty;\\n    return Math.min(chance, 1);\\n}\\n\\nconst recommendedCrimes = [\\\"shoplift\\\", \\\"rob store\\\", \\\"mug\\\", \\\"traffick arms\\\", \\\"homicide\\\", \\\"grand theft auto\\\", \\\"kidnap\\\", \\\"assassinate\\\", \\\"heist\\\"]\\nfunction getBestCrime(ns, sleeve, getKarma) {\\n    const crimeMoney = tryGetBitNodeMultipliers(ns).CrimeMoney;\\n    let bestCrimeStats;\\n    let crimeRate = -1;\\n    let crimeStats;\\n    for (const crime of recommendedCrimes) {\\n        crimeStats = ns.getCrimeStats(crime);\\n        crimeStats.name = crime;\\n        crimeStats.chance = calculateSleeveCrimeChance(ns, sleeve, crimeStats);\\n        crimeStats.rate = crimeStats.chance * (getKarma ? crimeStats.karma : crimeStats.money * crimeMoney) / crimeStats.time * 1000;\\n\\n        //ns.print(JSON.stringify(crimeStats));\\n        if (crimeStats.rate > crimeRate) {\\n            crimeRate = crimeStats.rate;\\n            bestCrimeStats = crimeStats;\\n            //  ns.print(`next crime ${bestCrimeStats.name} @ ${(getKarma ? bestCrimeStats.rate.toPrecision(2) : ns.nFormat(bestCrimeStats.rate, '0.0'))} ${(getKarma ? 'karma' : '$')}/s`);\\n        }\\n    }\\n    //ns.print(`next crime ${bestCrimeStats.name} @ ${(getKarma ? bestCrimeStats.rate.toPrecision(2) : ns.nFormat(bestCrimeStats.rate, '0.0'))} ${(getKarma ? 'karma' : '$')}/s`);\\n    return bestCrimeStats;\\n}\",\"filename\":\"sleeves.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"augments.js\",\"url\":\"blob:https://danielyxie.github.io/38bacc32-750e-47ce-b190-d0bdc73de73b\",\"moduleSequenceNumber\":72037},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/f0ed8992-00c6-433b-8fb2-873f0db696ee\",\"moduleSequenceNumber\":28949},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/b83e0abf-4317-4949-b4d9-bb7d1adba492\",\"moduleSequenceNumber\":28949},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/244af17f-a0db-4cbc-bad5-74a1a07530e2\",\"moduleSequenceNumber\":28932},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/c671b22f-0f12-4930-81a5-54bb0b2af33b\",\"moduleSequenceNumber\":28933},{\"filename\":\"sleeves.js\",\"url\":\"blob:https://danielyxie.github.io/523e2ee2-ab23-4b85-b559-565464022bd0\",\"moduleSequenceNumber\":75567}],\"dependents\":[],\"ramUsage\":47.7,\"server\":\"home\",\"moduleSequenceNumber\":91414,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"sleeve.getSleeveStats\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.getInformation\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.getSleevePurchasableAugs\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.purchaseSleeveAug\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToSynchronize\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToCommitCrime\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToShockRecovery\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToFactionWork\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToCompanyWork\",\"cost\":4},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.getCrimeStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.gang.createGang('Slum Snakes');\\n    await ns.write('/tmp/ingang.txt', ns.gang.getGangInformation().faction, 'w');\\n\\tns.exec('gangum.js', 'home');\\n}\",\"filename\":\"startGang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"startGang.js\",\"url\":\"blob:https://danielyxie.github.io/2d1dc6a5-7559-4446-ba23-80aba888612e\",\"moduleSequenceNumber\":2072398}],\"dependents\":[],\"ramUsage\":5.9,\"server\":\"home\",\"moduleSequenceNumber\":28963,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.createGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { list_servers } from 'opened_servers.js';\\nimport { boxTailSingleton, ramUsage } from 'utils.js';\\nimport { calculateGrowThreads } from './growthFunctions.js';\\n\\nlet ns;\\nconst weaken_script = \\\"weaken.js\\\";\\nconst grow_script = \\\"grow.js\\\";\\nconst hack_script = \\\"hack.js\\\";\\nlet hack_scriptRam = 1.7;\\nlet grow_scriptRam, weaken_scriptRam = 1.75;\\nlet ServerGrowthRate = 1;\\nlet serversForExecution = [];\\nlet hackStatus = [];\\n/** @param {NS} pns **/\\nexport async function main(pns) {\\n\\tns = pns;\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('exec')\\n\\tns.clearLog();\\n\\tns.tail();\\n\\tboxTailSingleton(ns, 'mcp_batch', '🥾', '200px');\\n\\tweaken_scriptRam = ns.getScriptRam(weaken_script, \\\"home\\\");\\n\\tgrow_scriptRam = ns.getScriptRam(grow_script, \\\"home\\\");\\n\\thack_scriptRam = ns.getScriptRam(hack_script, \\\"home\\\");\\n\\t; ({ ServerGrowthRate } = JSON.parse(ns.read('/tmp/getBitNodeMultipliers.txt')))\\n\\tawait run();\\n}\\nlet hackPercent = .5;\\nlet bonusServers = 0;\\nfunction updateServerLists() {\\n\\tserversForExecution = ['home'].concat(list_servers(ns).filter(s => ns.hasRootAccess(s)));\\n\\tconst beforeHackStatusLength = hackStatus.length;\\n\\tconst serversToHack = list_servers(ns).filter(s => ns.hasRootAccess(s)\\n\\t\\t&& ns.getServerMaxMoney(s) > 0\\n\\t\\t&& ns.getServerRequiredHackingLevel(s) <= ns.getHackingLevel() / 2);\\n\\n\\thackStatus = [];\\n\\tconst skippedServer = []\\n\\tconst player = ns.getPlayer();\\n\\tfor (const server of serversToHack) {\\n\\t\\tconst s = ns.getServer(server);\\n\\t\\ts.hackDifficulty = s.minDifficulty;\\n\\t\\t// check that hacks will succeed. Could be redundant check\\n\\t\\tconst hackChance = ns.formulas.hacking.hackChance(s, player);\\n\\t\\tif (hackChance < .99) {\\n\\t\\t\\t//ns.print(`Hack chance to low ${s} ${(hackChance * 100).toFixed(2)}%`)\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (s.serverGrowth < 40) {\\n\\t\\t\\t//ns.print(`Growth is to low ${s} ${s.serverGrowth}%`)\\n\\t\\t\\tskippedServer.push({ server: server });\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\thackStatus.push({ server: server });\\n\\t}\\n\\tconst lowRamUse = ramUsage(ns) < .5;\\n\\tconst oldHackPercent = hackPercent;\\n\\tconst oldBonusServers = bonusServers;\\n\\tif (lowRamUse) {\\n\\t\\thackPercent = Math.min(hackPercent + .1, .95);\\n\\t\\tif (hackPercent === .95) {\\n\\t\\t\\tbonusServers = Math.min(bonusServers + 1, skippedServer.length);\\n\\t\\t\\thackStatus.push(...skippedServer.slice(0, bonusServers));\\n\\t\\t}\\n\\t} else {\\n\\t\\tbonusServers = Math.max(bonusServers - 1, 0);\\n\\t\\tif (bonusServers <= 0) hackPercent = Math.max(hackPercent - .1, .5);\\n\\t}\\n\\tif (oldHackPercent !== hackPercent || oldBonusServers !== bonusServers) ns.print(`BonusServers added ${bonusServers} Hack percent ${hackPercent}`);\\n\\t// after aug install just start hacking on n00dles fist\\n\\tif (hackStatus.length === 0) hackStatus.push({ server: 'n00dles' });\\n\\tif (beforeHackStatusLength < hackStatus.length) ns.print(`Servers to hack ${hackStatus.length} ${hackStatus.map(o => o.server).join(',')}`);\\n}\\nlet batches = [];\\nlet target = 'n00dles';\\nasync function run() {\\n\\tlet i = 0;\\n\\tupdateServerLists();\\n\\tlet updateAfter = Date.now().valueOf() + 30 * 1000;\\n\\twhile (true) {\\n\\n\\t\\t//todo prep logic\\n\\n\\t\\t// const currentSec = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\n\\t\\t// if (currentSec > 0) { // weaken prep\\n\\t\\t// \\tconst weaken = await runWeaken(target);\\n\\t\\t// \\treturn { server: target, promise: ns.asleep(weaken.time + 200), pid: { weaken: weaken.pid } };\\n\\t\\t// }\\n\\n\\t\\t// todo run this check the moment before the hack lands, kill the PID if check fails\\n\\t\\t// if (ns.getServerMoneyAvailable(target) / ns.getServerMaxMoney(target) < .9) {\\n\\t\\t// \\treturn 0; // don't hack if server is not max money\\n\\t\\t// }\\n\\n\\t\\tns.print('planBatchRam');\\n\\t\\tlet newBatchPlan = await planBatchRam(target);\\n\\t\\twhile (newBatchPlan && batches.length < 50) {\\n\\t\\t\\tbatches.push(newBatchPlan);\\n\\t\\t\\tnewBatchPlan = await planBatchRam(target);\\n\\t\\t\\t// await ns.sleep(1);\\n\\t\\t}\\n\\t\\tns.print('executeBatchParts');\\n\\t\\tfor (const batch of batches) {\\n\\t\\t\\tawait executeBatchParts(batch);\\n\\t\\t}\\n\\t\\t// remove completed batches\\n\\t\\tbatches = batches.filter(o => o.weakenHosts || o.hackHost || o.growHost);\\n\\n\\t\\t// if (!hackStatus[i].pid || (hackStatus[i].pid && !ns.isRunning(hackStatus[i].pid.weaken))) {\\n\\t\\t// \\tconst ret = await runHGW(hackStatus[i].server);\\n\\t\\t// \\thackStatus[i] = ret;\\n\\t\\t// }\\n\\t\\t// i = (i + 1) % hackStatus.length;\\n\\t\\tawait ns.sleep(50);\\n\\t\\tif (updateAfter < Date.now()) {\\n\\t\\t\\tupdateAfter = Date.now() + 30 * 1000;\\n\\t\\t\\tupdateServerLists();\\n\\t\\t\\ti = 0;\\n\\t\\t}\\n\\t\\treturn; //run once testing\\n\\t}\\n}\\nasync function executeBatchParts(batch) {\\n\\t/*\\n\\t.weakenHosts []\\n\\t.hackHost\\n\\t\\tthreads_available, host, threadsAvailMinusNeed, ramUsed\\n\\t.growHost\\n\\t */\\n\\n\\tconst server = ns.getServer(batch.target);\\n\\tserver.hackDifficulty = server.minDifficulty;\\n\\tserver.moneyAvailable = server.moneyMax;\\n\\n\\t// (hackStart - 200) < NO_START_BATCH < (weakenEnd + 200)\\n\\tconst canRun = (date) => {\\n\\t\\tconst hacksOnSameTarget = batches.filter(o => o.target === batch.target && o.weakenEnd > 0);\\n\\t\\tconst batchesDuringDate = hacksOnSameTarget.filter(o => (o.hackEnd - 200) < date && date < (o.weakenEnd + 200));\\n\\t\\treturn batchesDuringDate.length === 0;\\n\\t}\\n\\n\\tif (batch.growEnd && batch.growHost && canRun(Date.now())) {\\n\\t\\tconst growTime = ns.formulas.hacking.growTime(server, ns.getPlayer());\\n\\t\\tconst newGrowEnd = Date.now() + growTime;\\n\\t\\tif (Math.abs(batch.growEnd - newGrowEnd) <= 100) {\\n\\t\\t\\tconst pid = await runGrow(batch.target, batch.growHost);\\n\\t\\t\\tif (pid === 0) {\\n\\t\\t\\t\\tns.tprint('FAILED ' + 'to start grow');\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tbatch.growStart = Date.now();\\n\\t\\t\\t\\tbatch.growEnd = newGrowEnd;\\n\\t\\t\\t\\tdelete batch.growHost;\\n\\t\\t\\t}\\n\\t\\t} else if ((newGrowEnd - batch.growEnd) > 100) {\\n\\t\\t\\tns.tprint('GROW START WINDOW MISSED');\\n\\t\\t\\tremoveExclusion(batch.growHost.host, batch.growHost.ramUsed);\\n\\t\\t\\tdelete batch.growHost;\\n\\t\\t}\\n\\t}\\n\\tif (batch.hackEnd && batch.hackHost && canRun(Date.now())) {\\n\\t\\tconst hackTime = ns.formulas.hacking.hackTime(server, ns.getPlayer());\\n\\t\\tconst newHackEnd = Date.now() + hackTime;\\n\\t\\tif (Math.abs(batch.hackEnd - newHackEnd) <= 100) {\\n\\t\\t\\tconst pid = await runHack(batch.target, batch.hackHost);\\n\\t\\t\\tif (pid === 0) {\\n\\t\\t\\t\\tns.tprint('FAILED ' + 'to start hack');\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tbatch.hackStart = Date.now();\\n\\t\\t\\t\\tbatch.hackEnd = newHackEnd;\\n\\t\\t\\t\\tdelete batch.hackHost;\\n\\t\\t\\t}\\n\\t\\t} else if ((newHackEnd - batch.hackEnd) > 100) {\\n\\t\\t\\tns.tprint('HACK START WINDOW MISSED');\\n\\t\\t\\tremoveExclusion(batch.hackHost.host, batch.hackHost.ramUsed);\\n\\t\\t\\tdelete batch.hackHost;\\n\\t\\t}\\n\\t}\\n\\n\\tif (batch.weakenHosts && canRun(Date.now())) {\\n\\t\\tbatch.weakenStart = Date.now();\\n\\t\\tconst pids = await runWeaken(batch.target, batch.weakenHosts);\\n\\t\\tif (pids.filter(o => o === 0)) {\\n\\t\\t\\tns.tprint('FAILED ' + 'to start all weakens');\\n\\t\\t} else {\\n\\t\\t\\tbatch.weakenEnd = ns.formulas.hacking.weakenTime(server, ns.getPlayer());\\n\\t\\t\\tbatch.growEnd = batch.weakenEnd - 200;\\n\\t\\t\\tbatch.hackEnd = batch.growEnd - 200;\\n\\t\\t\\tdelete batch.weakenHosts;\\n\\t\\t}\\n\\t}\\n}\\n\\nasync function planBatchRam(target) {\\n\\tconst server = ns.getServer(target);\\n\\tserver.hackDifficulty = server.minDifficulty;\\n\\tserver.moneyAvailable = server.moneyMax;\\n\\tconst hackThreadsNeeded = () => {\\n\\t\\treturn Math.max(Math.floor(hackPercent / ns.formulas.hacking.hackPercent(server, ns.getPlayer())), 1);\\n\\t}\\n\\tconst growThreadsNeeded = (host, hackThreads) => {\\n\\t\\tconst hackAmount = ns.hackAnalyze(target) * hackThreads * ns.getServerMaxMoney(target);\\n\\t\\treturn Math.ceil(calculateGrowThreads(ns, target, hackAmount, getCores(host), { ServerGrowthRate }));\\n\\t}\\n\\tconst weakenThreadsNeeded = (host, hackThreads, growThreads) => {\\n\\t\\tlet security = ns.growthAnalyzeSecurity(growThreads);\\n\\t\\tsecurity += ns.hackAnalyzeSecurity(hackThreads);\\n\\t\\treturn Math.max(Math.ceil(security / ns.weakenAnalyze(1, getCores(host))), 1);\\n\\t}\\n\\n\\tconst batchPlan = getHostsAndThreads(hackThreadsNeeded, growThreadsNeeded, weakenThreadsNeeded);\\n\\tif (!batchPlan.weakenHosts || !batchPlan.hackHost || !batchPlan.growHost) {\\n\\t\\tns.print('No room to plan another batch');\\n\\t\\treturn;\\n\\t}\\n\\tbatchPlan.target = target;\\n\\treturn batchPlan;\\n}\\n\\nasync function runWeaken(target, hosts) {\\n\\tlet pids = [];\\n\\tfor (const host of hosts) {\\n\\t\\tpids.push(await ns.exec(weaken_script, host.host, host.threads_available, target, Math.random()));\\n\\t\\tremoveExclusion(host.host, host.ramUsed);\\n\\t}\\n\\treturn pids;\\n}\\n\\nasync function runGrow(target, host) {\\n\\tconst pid = await ns.exec(grow_script, host.host, host.threads_available, target, Math.random());\\n\\tremoveExclusion(host.host, host.ramUsed);\\n\\treturn pid;\\n}\\n\\nasync function runHack(target, host) {\\n\\tconst pid = await ns.exec(hack_script, host.host, host.threads_available, target, Math.random());\\n\\tremoveExclusion(host.host, host.ramUsed);\\n\\treturn pid;\\n}\\n\\nconst getCores = (host) => ns.getServer(host).cpuCores;\\n\\nfunction getHostsAndThreads(hackThreadFunction, growThreadFunction, weakThreadFunction) {\\n\\tlet hackHost;\\n\\tlet growHost;\\n\\tlet weakenHosts;\\n\\thackHost = getHostAndThreadsFunc(hack_scriptRam, hackThreadFunction);\\n\\tif (hackHost.host) addExclusion(hackHost.host, hackHost.ramUsed);\\n\\tgrowHost = getHostAndThreadsFunc(grow_scriptRam, (host) => growThreadFunction(host, hackHost.threads_available));\\n\\tif (growHost.host) addExclusion(growHost.host, growHost.ramUsed);\\n\\tweakenHosts = getHostAndThreadsFunc(weaken_scriptRam, (host) => weakThreadFunction(host, hackHost.threads_available, growHost.threads_available), true);\\n\\n\\tif (!hackHost.host || !growHost.host || weakenHosts.length <= 0) {\\n\\t\\tremoveExclusion(hackHost.host, hackHost.ramUsed);\\n\\t\\tremoveExclusion(growHost.host, growHost.ramUsed);\\n\\t} else {\\n\\t\\tfor (const weakenHost of weakenHosts) {\\n\\t\\t\\taddExclusion(weakenHost.host, weakenHost.ramUsed);\\n\\t\\t}\\n\\t}\\n\\treturn { hackHost, growHost, weakenHosts };\\n}\\n\\nfunction getHostAndThreadsFunc(scriptRam, threadFunction, hostSplit) {\\n\\tconst emptyRet = { threads_available: 0, host: null, threadsAvailMinusNeed: 0, ramUsed: 0 };\\n\\tconst hosts = serversForExecution.map((host) => {\\n\\t\\tlet maxRam = ns.getServerMaxRam(host);\\n\\t\\t// reserve some ram for other scripts\\n\\t\\tif (host === 'home') {\\n\\t\\t\\tmaxRam = Math.max(maxRam * .75, maxRam - 128);\\n\\t\\t}\\n\\t\\tconst threads_available = Math.floor((maxRam - ns.getServerUsedRam(host) - excludedHostRam(host)) / scriptRam);\\n\\t\\tlet threadsNeeded = threadFunction(host);\\n\\t\\tconst ramUsed = parseFloat((threadsNeeded * scriptRam).toFixed(3));\\n\\t\\tconst threadsAvailMinusNeed = threads_available - threadsNeeded;\\n\\t\\treturn { threads_available, host, threadsAvailMinusNeed, ramUsed };\\n\\t}).filter((hostO) => hostO.threads_available >= 1);\\n\\tif (hosts.length <= 0) return emptyRet;\\n\\thosts.sort((a, b) => a.threadsAvailMinusNeed - b.threadsAvailMinusNeed);\\n\\tif (hostSplit) {\\n\\t\\tconst threadsNeeded = threadFunction('n00dles');\\n\\t\\tconst serversWithRamFree = hosts.filter(o => o.threads_available > 0);\\n\\t\\tlet acc = 0;\\n\\t\\tlet hostsAcc = [];\\n\\t\\twhile (acc < threadsNeeded) {\\n\\t\\t\\tconst s = serversWithRamFree.shift();\\n\\t\\t\\tif (!s) {\\n\\t\\t\\t\\t// not enough servers with threads_available to fill need\\n\\t\\t\\t\\treturn [];\\n\\t\\t\\t}\\n\\t\\t\\tacc += s.threads_available;\\n\\t\\t\\thostsAcc.push(s);\\n\\t\\t}\\n\\t\\treturn hostsAcc;\\n\\t}\\n\\t// take the closet fit from front of the array or return empty\\n\\treturn hosts.filter(o => o.threadsAvailMinusNeed >= 0).shift() || emptyRet;\\n}\\n\\nconst exclusionMap = {};\\nfunction addExclusion(host, ram) {\\n\\texclusionMap[host] = exclusionMap[host] || 0;\\n\\texclusionMap[host] = Math.min(exclusionMap[host] + ram, ns.getServerMaxRam(host))\\n}\\nfunction removeExclusion(host, ram) {\\n\\texclusionMap[host] = exclusionMap[host] || 0;\\n\\texclusionMap[host] = Math.max(exclusionMap[host] - ram, 0);\\n}\\nfunction excludedHostRam(host) {\\n\\treturn exclusionMap[host] || 0;\\n}\",\"filename\":\"mcp_hgw_batch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"growthFunctions.js\",\"url\":\"blob:https://danielyxie.github.io/255fcb15-7586-4e1e-88ec-655c52e5634b\",\"moduleSequenceNumber\":376},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/b6dcb16e-52a4-4ca3-b088-2c93660fe00b\",\"moduleSequenceNumber\":368},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/a551c763-7f60-485d-ba83-4431efd2b4ff\",\"moduleSequenceNumber\":351},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/39567991-3497-4061-8487-27e5c7966afe\",\"moduleSequenceNumber\":352},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/111b106d-8613-4a15-a498-d7a2ac68d100\",\"moduleSequenceNumber\":351},{\"filename\":\"mcp_hgw_batch.js\",\"url\":\"blob:https://danielyxie.github.io/6ac6bcc4-644e-4947-be2a-9ccff2a9f914\",\"moduleSequenceNumber\":4946}],\"dependents\":[],\"ramUsage\":11.9,\"server\":\"home\",\"moduleSequenceNumber\":28964,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.bladeburner.joinBladeburnerDivision();\\n    ns.exec('bladeburner.js', 'home');\\n}\",\"filename\":\"joinBladeburners.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"joinBladeburners.js\",\"url\":\"blob:https://danielyxie.github.io/cbec9418-34d3-4ec6-bc3a-c616734d7286\",\"moduleSequenceNumber\":2119051}],\"dependents\":[],\"ramUsage\":6.9,\"server\":\"home\",\"moduleSequenceNumber\":28965,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"bladeburner.joinBladeburnerDivision\",\"cost\":4},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { boxTailSingleton } from \\\"utils.js\\\"\\nimport { getOwnedAugmentationsStatic } from \\\"./augments\\\";\\nconst cityNames = [\\\"Sector-12\\\", \\\"Aevum\\\", \\\"Volhaven\\\", \\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\"];\\nconst antiChaosOperation = \\\"Stealth Retirement Operation\\\"; // Note: Faster and more effective than Diplomacy at reducing city chaos\\nconst simulacrumAugName = \\\"The Blade's Simulacrum\\\"; // This augmentation lets you do bladeburner actions while busy\\n\\n// In general, we will buy the skill upgrade with the next highest cost, but to tweak the priority of various skills,\\n// we use the following configuration to change their relative cost. Higher number means lower priority\\n// Note: Ideally we could emphasize Tracer \\\"early-game\\\" and Digital Observer \\\"late-game\\\", but this is too much of a pain to solve for\\nconst costAdjustments = {\\n    \\\"Reaper\\\": 1.2, // Combat boost. Early effect is paltry (because stats are so low), will get plenty of points late game\\n    \\\"Evasive Systems\\\": 1.2, // Dex/Agi boost. Mildly deprioritized for same reasoning as above.\\n    \\\"Overclock\\\": 0.8, // Faster ops faster skillups faster rank. Stamina becomes less of an issue as you get late into BB. Might run out of ops instead\\n    \\\"Cloak\\\": 1.5, // Cheap, and stealth ends up with plenty of boost, so we don't need to invest in Cloak as much.\\n    \\\"Hyperdrive\\\": 100, // Improves stats gained, but not Rank gained. Training limit is default 0\\n    \\\"Tracer\\\": 100, // Only boosts Contract success chance, which are relatively easy to begin with.\\n    \\\"Cyber's Edge\\\": 3, // Boosts stamina, more stam more regen, but contract counts can be more limiting than stamina\\n    \\\"Hands of Midas\\\": 100 // Improves money gain. It is assumed that Bladeburner will *not* be a main source of income\\n};\\n\\n// Some bladeburner info gathered at startup and cached\\nlet skillNames, generalActionNames, contractNames, operationNames, remainingBlackOpsNames, blackOpsRanks;\\nlet haveSimulacrum, lastBlackOpReady, lowStaminaTriggered, timesTrained, currentTaskEndTime, maxRankNeeded, lastAssignedTask;\\nlet player;\\nlet options;\\nconst argsSchema = [\\n    ['success-threshold', 0.90], // Attempt the best action whose minimum chance of success exceeds this threshold\\n    ['chaos-recovery-threshold', 50], // Prefer to do \\\"Stealth Retirement\\\" operations to reduce chaos when it reaches this number\\n    // lot of chaos seems to be a ok by the time we get out of control using stealth retirement manages it well\\n    ['max-chaos', 10000], // If chaos exceeds this amount in every city, we will reluctantly resort to diplomacy to reduce it.\\n    ['low-stamina-pct', 0.5], // Switch to no-stamina actions when we drop below this stamina percent\\n    ['high-stamina-pct', 0.6], // Switch back to stamina-consuming actions when we rise above this stamina percent\\n    ['training-limit', 0], // Don't bother training more than this many times, since Training is slow and earns no rank\\n    ['update-interval', 2000], // How often to refresh bladeburner status\\n    ['ignore-busy-status', false], // If set to true, we will attempt to do bladeburner tasks even if we are currently busy and don't have The Blade's Simulacrum\\n    ['allow-raiding-highest-pop-city', false], // Set to true, we will allow Raid to be used even in our highest-population city (disabled by default)\\n    ['reserved-action-count', 200], // Some operation types are \\\"reserved\\\" for chaos reduction / population estimate increase. Start by reserving this many, reduced automatically as we approach maxRankNeeded\\n    ['disable-spending-hashes', false], // Set to true to not spawn spend-hacknet-hashes.js to spend hashes on bladeburner\\n];\\nexport function autocomplete(data, _) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('asleep');\\n    options = ns.flags(argsSchema);\\n    player = ns.getPlayer();\\n    if (player.bitNodeN === 8)\\n        return ns.print(\\\"ERROR: Bladeburner is completely disabled in Bitnode 8 :`(\\\\nHappy stonking\\\", true, 'error');\\n    if (!player.inBladeburner) {\\n        return ns.print(\\\"ERROR: no in Bladeburner yet\\\");\\n    }\\n    boxTailSingleton(ns, 'Bladeburner', '🗡', '200px');\\n    ns.clearLog();\\n    // Gather one-time info such as contract and operation names\\n    await gatherBladeburnerInfo(ns);\\n    // Start the main loop which monitors stats and changes activities as needed\\n    while (true) {\\n        try { await mainLoop(ns); }\\n        catch (err) {\\n            ns.print(`WARNING: bladeburner.js Caught (and suppressed) an unexpected error in the main loop:\\\\n` +\\n                (typeof err === 'string' ? err : err.message || JSON.stringify(err)), false, 'warning');\\n        }\\n        const nextTaskComplete = currentTaskEndTime - Date.now();\\n        await ns.asleep(Math.min(options['update-interval'], nextTaskComplete > 0 ? nextTaskComplete : Number.MAX_VALUE));\\n    }\\n}\\n\\n/** @param {NS} ns\\n * Gather all one-time bladeburner info using ram-dodging scripts. */\\nasync function gatherBladeburnerInfo(ns) {\\n    skillNames = ns.bladeburner.getSkillNames();\\n    generalActionNames = ns.bladeburner.getGeneralActionNames();\\n    contractNames = ns.bladeburner.getContractNames().reverse(); // Reversed to put in order of highest rep to lowest\\n    operationNames = ns.bladeburner.getOperationNames().reverse(); // Reversed to put in order of highest rep to lowest\\n    // Blackops data is a bit special, each can be completed one time, they should be done in order\\n    const blackOpsNames = ns.bladeburner.getBlackOpNames();\\n    blackOpsRanks = {};\\n    const blackOpsToBeDone = {};\\n    for (let blackOpsName of blackOpsNames) {\\n        blackOpsRanks[blackOpsName] = ns.bladeburner.getBlackOpRank(blackOpsName);\\n        blackOpsToBeDone[blackOpsName] = ns.bladeburner.getActionCountRemaining(\\\"blackops\\\", blackOpsName);\\n    }\\n    remainingBlackOpsNames = blackOpsNames.filter(n => blackOpsToBeDone[n] === 1)\\n        .sort((b1, b2) => blackOpsRanks[b1] - blackOpsRanks[b2]);\\n    ns.print(`There are ${remainingBlackOpsNames.length} remaining BlackOps operations to complete in order:\\\\n` +\\n        remainingBlackOpsNames.map(n => `${n} (${blackOpsRanks[n]})`).join(\\\", \\\"));\\n    maxRankNeeded = blackOpsRanks[remainingBlackOpsNames[remainingBlackOpsNames.length - 1]];\\n    // Check if we have the aug that lets us do bladeburner while otherwise busy\\n    haveSimulacrum = getOwnedAugmentationsStatic(ns).includes(simulacrumAugName);\\n    // Initialize some flags that may change over time\\n    lastAssignedTask = null;\\n    lastBlackOpReady = false; // Flag will track whether we've notified the user that the last black-op is ready\\n    lowStaminaTriggered = false; // Flag will track whether we've previously switched to stamina recovery to reduce noise\\n    timesTrained = 0; // Count of how many times we've trained (capped at --training-limit)\\n    currentTaskEndTime = 0; // When set to a date, we will not assign new tasks until that date.\\n}\\n\\n// Helpers to determine the the dict keys with the lowest/highest value (returns an array [key, minValue] for destructuring)\\nconst getMinKeyValue = (dict, filteredKeys = null) => (filteredKeys || Object.keys(dict)).reduce(([k, min], key) =>\\n    dict[key] < min ? [key, dict[key]] : [k, min], [null, Number.MAX_VALUE]);\\nconst getMaxKeyValue = (dict, filteredKeys = null) => (filteredKeys || Object.keys(dict)).reduce(([k, max], key) =>\\n    dict[key] > max ? [key, dict[key]] : [k, max], [null, -Number.MAX_VALUE]);\\n\\n/** @param {NS} ns\\n * The main loop that decides what we should be doing in bladeburner. */\\nasync function mainLoop(ns) {\\n    // Get player's updated rank\\n    const rank = ns.bladeburner.getRank();\\n    // Spend any un-spent skill points\\n    await spendSkillPoints(ns);\\n    // See if we are able to do bladeburner work\\n    if (!(await canDoBladeburnerWork(ns))) return;\\n\\n    // NEXT STEP: Gather data needed to determine what and where to work\\n    // If any blackops have been completed, remove them from the list of remaining blackops\\n    const blackOpsToBeDone = {};\\n    const blackOpsNames = ns.bladeburner.getBlackOpNames();\\n    for (let blackOpsName of blackOpsNames) {\\n        blackOpsRanks[blackOpsName] = ns.bladeburner.getBlackOpRank(blackOpsName);\\n        blackOpsToBeDone[blackOpsName] = ns.bladeburner.getActionCountRemaining(\\\"blackops\\\", blackOpsName);\\n    }\\n    remainingBlackOpsNames = remainingBlackOpsNames.filter(n => blackOpsToBeDone[n] === 1);\\n\\n    // Gather the count of available contracts / operations\\n    const nextBlackOp = remainingBlackOpsNames[0];\\n    const contractCounts = {};\\n    for (let contractName of contractNames) {\\n        contractCounts[contractName] = ns.bladeburner.getActionCountRemaining(\\\"contract\\\", contractName);\\n    }\\n    const operationCounts = {};\\n    for (let operationName of operationNames) {\\n        operationCounts[operationName] = ns.bladeburner.getActionCountRemaining(\\\"operation\\\", operationName);\\n    }\\n    // Define a helper that gets the count for an action based only on the name (type is auto-determined)\\n    const getCount = actionName => contractNames.includes(actionName) ? contractCounts[actionName] :\\n        operationNames.includes(actionName) ? operationCounts[actionName] :\\n            generalActionNames.includes(actionName) ? Number.POSITIVE_INFINITY : remainingBlackOpsNames.includes(actionName) ? 1 : 0;\\n    // Create some quick-reference collections of action names that are limited in count and/or reserved for special purpose\\n    const limitedActions = [nextBlackOp].concat(operationNames).concat(contractNames);\\n    const populationActions = [\\\"Undercover Operation\\\", \\\"Investigation\\\", \\\"Tracking\\\"];\\n    const reservedActions = [\\\"Raid\\\", \\\"Stealth Retirement Operation\\\"].concat(populationActions\\n        // Only reserve these actions if their count is below the configured reserve amount, scaled down as we approach our final rank (stop reserving at 99% of max rank)\\n        .filter(a => getCount(a) <= (options['reserved-action-count'] * (1 - rank / (0.99 * maxRankNeeded)))));\\n    if (rank < blackOpsRanks[nextBlackOp]) reservedActions.push(nextBlackOp); // Remove blackop from \\\"available actions\\\" if we have insufficient rank.\\n    const unreservedActions = limitedActions.filter(o => !reservedActions.includes(o));\\n    //ns.print('Unreserved Action Counts: ' + unreservedActions.map(a => `${a}: ${getCount(a)}`).join(\\\", \\\")); // Debug log to see what unreserved actions remain\\n    //ns.print('Reserved Action Counts: ' + reservedActions.map(a => `${a}: ${getCount(a)}`).join(\\\", \\\")); // Debug log to see what unreserved actions remain\\n\\n    // NEXT STEP: Determine which city to work in\\n    // Get the population, communities, and chaos in each city\\n    const populationByCity = {};\\n    const communitiesByCity = {};\\n    const chaosByCity = {};\\n    for (let cityName of cityNames) {\\n        populationByCity[cityName] = ns.bladeburner.getCityEstimatedPopulation(cityName);\\n        communitiesByCity[cityName] = ns.bladeburner.getCityCommunities(cityName);\\n        chaosByCity[cityName] = ns.bladeburner.getCityChaos(cityName);\\n    }\\n    let goToCity, population, travelReason, goingRaiding = false;\\n\\n    // SPECIAL CASE: GO TO LOWEST-POPULATION CITY\\n    // If the only operations left to us are \\\"Raid\\\" (reduces population by a %, which, counter-intuitively, is bad for us),\\n    // thrash the city with the lowest population (but still having some communities to enable Raid).\\n    if (getCount(\\\"Raid\\\") > 0 && unreservedActions.every(c => getCount(c) === 0)) {\\n        const raidableCities = cityNames.filter(c => communitiesByCity[c] > 0); // Cities with at least one community\\n        // Only allow Raid if we would not be raiding our highest-population city (need to maintain at least one)\\n        const [highestPopCity, _] = getMaxKeyValue(populationByCity, cityNames);\\n        goingRaiding = raidableCities.length > 0 && (raidableCities[0] !== highestPopCity || options['allow-raiding-highest-pop-city']);\\n        if (goingRaiding) { // Select the raid-able city with the smallest population\\n            [goToCity, population] = getMinKeyValue(populationByCity, raidableCities);\\n            travelReason = `Lowest population (${population}) city with communities (${communitiesByCity[goToCity]}) to use up ${getCount(\\\"Raid\\\")} Raid operations`;\\n        }// else ns.print(`INFO: Cannot use up raid operations because there are ${raidableCities.length} cities with communities. ` +\\n        //    `(--allow-raiding-highest-pop-city is set to ${options['allow-raiding-highest-pop-city']})`);\\n    }\\n    // SPECIAL CASE: GO TO HIGHEST-CHAOS CITY\\n    if (!goToCity && unreservedActions.every(c => getCount(c) === 0)) {\\n        let [maxChaosCity, maxChaos] = getMaxKeyValue(chaosByCity, cityNames);\\n        // If all we have left is \\\"Stealth Retirement Operation\\\", switch to the city with the most chaos (if it's a decent amount), and use them up.\\n        if (getCount(\\\"Stealth Retirement Operation\\\") && maxChaos > options['chaos-recovery-threshold']) {\\n            goToCity = maxChaosCity;\\n            travelReason = `Highest-chaos (${maxChaos.toFixed(1)}) city to use up Stealth Retirement Operations`;\\n        } else if (maxChaos > options['max-chaos']) {\\n            goToCity = maxChaosCity;\\n            travelReason = `Nothing better to do, and city chaos ${maxChaos.toFixed(1)} is above --max-chaos threshold ${options['max-chaos']} - should use Diplomacy`;\\n        }\\n    } // Also, if we have nothing to do (even no Stealth Retirement), but chaos is above 'max-chaos' in some city, switch to it to do Diplomacy\\n\\n    // GENERAL CASE: GO TO HIGHEST-POPULATION CITY\\n    if (!goToCity) { // Otherwise, cities with higher populations give better operation chances\\n        // Try to narrow down the cities we wish to work in to the ones with no chaos penalties\\n        let acceptableCities = cityNames.filter(city => chaosByCity[city] <= options['chaos-recovery-threshold']);\\n        // Pick the city (within chaos thresholds) with the highest population to maximize success chance.\\n        // If no city is within thresholds, the largest population city will be picked regardless of chaos\\n        [goToCity, population] = getMaxKeyValue(populationByCity, acceptableCities.length > 0 ? acceptableCities : cityNames);\\n        travelReason = `Highest population (${population}) city, with chaos ${chaosByCity[goToCity].toFixed(1)}` +\\n            (acceptableCities.length === 0 ? ` (all cities above chaos threshold of ${options['chaos-recovery-threshold']})` : '');\\n    }\\n\\n    let currentCity = ns.bladeburner.getCity();\\n    // Change cities if we aren't blocked on our last task, and found a better city to work in\\n    if (currentCity !== goToCity && Date.now() > currentTaskEndTime && (await switchToCity(ns, goToCity, travelReason)))\\n        currentCity = goToCity;\\n\\n    // Gather the success chance of contracts (based on our current city)\\n    const blackOpsChance = rank < blackOpsRanks[nextBlackOp] ? [0, 0] : // Insufficient rank for blackops means chance is zero\\n        ns.bladeburner.getActionEstimatedSuccessChance(\\\"blackops\\\", nextBlackOp);\\n    const contractChances = {};\\n    for (let contractName of contractNames) {\\n        contractChances[contractName] = ns.bladeburner.getActionEstimatedSuccessChance(\\\"contract\\\", contractName);\\n    }\\n    const operationChances = {};\\n    for (let operationName of operationNames) {\\n        operationChances[operationName] = ns.bladeburner.getActionEstimatedSuccessChance(\\\"operation\\\", operationName);\\n    }\\n    // Define some helpers for determining min/max chance for each action\\n    const getChance = actionName => contractNames.includes(actionName) ? contractChances[actionName] :\\n        operationNames.includes(actionName) ? operationChances[actionName] :\\n            generalActionNames.includes(actionName) ? [1, 1] : nextBlackOp === actionName ? blackOpsChance : [0, 0];\\n    const minChance = actionName => getChance(actionName)[0];\\n    const maxChance = actionName => getChance(actionName)[1];\\n\\n    // NEXT STEP: Pick the action we should be working on.\\n    let bestActionName, reason;\\n    const actionSummaryString = (action) => `Success Chance: ${(100 * minChance(action)).toFixed(1)}%` +\\n        (maxChance(action) - minChance(action) < 0.001 ? '' : ` to ${(100 * maxChance(action)).toFixed(1)}%`) + `, Remaining: ${getCount(action)}`\\n\\n    // Trigger stamina recovery if we drop below our --low-stamina-pct configuration, and remain triggered until we've recovered to --high-stamina-pct\\n    const stamina = ns.bladeburner.getStamina(); // Returns [current, max];\\n    const staminaPct = stamina[0] / stamina[1];\\n    lowStaminaTriggered = staminaPct < options['low-stamina-pct'] || lowStaminaTriggered && staminaPct < options['high-stamina-pct'];\\n    // If we are suffering a stamina penalty, perform an action that consumes no stamina\\n    if (lowStaminaTriggered) {\\n        bestActionName = chaosByCity[currentCity] > options['max-chaos'] ? \\\"Diplomacy\\\" : \\\"Field Analysis\\\";\\n        reason = `Stamina is low: ${(100 * staminaPct).toFixed(1)}% < ${(100 * options['low-stamina-pct']).toFixed(1)}%`\\n    } // If current city chaos is greater than our threshold, keep it low with \\\"Stealth Retirement\\\" if odds are good\\n    else if (chaosByCity[currentCity] > options['chaos-recovery-threshold'] && getCount(antiChaosOperation) > 0 && minChance(antiChaosOperation) > 0.99) {\\n        bestActionName = antiChaosOperation;\\n        reason = `Chaos is high: ${chaosByCity[currentCity].toFixed(2)} > ${options['chaos-recovery-threshold']} (--chaos-recovery-threshold) ${actionSummaryString(bestActionName)}`;\\n    } // If current city chaos is very high, we should be very wary of the snowballing effects, and try to reduce it.\\n    else if (chaosByCity[currentCity] > options['max-chaos']) {\\n        bestActionName = getCount(antiChaosOperation) > 0 && minChance(antiChaosOperation) > 0.8 ? antiChaosOperation : \\\"Diplomacy\\\";\\n        reason = `Out of ${antiChaosOperation}s, and chaos ${chaosByCity[currentCity].toFixed(2)} is higher than --max-chaos ${options['max-chaos']}`;\\n    } // If we've previously determined we will be raiding the lowest-population city\\n    else if (goingRaiding && maxChance(\\\"Raid\\\") > options['success-threshold']) { // Special-case: Ignore min-chance. Population estimate turns bad as we decimate it, but doesn't seem to affect success.\\n        bestActionName = \\\"Raid\\\";\\n        reason = `Only remaining Operations. ${actionSummaryString(bestActionName)}`;\\n    } else { // Otherwise, pick the \\\"highest-tier\\\" action we can confidently perform, which should lead to the fastest rep-gain.\\n        // Note: Candidate actions will be maintained in order of highest-rep to lowest-rep earning, so we can pick the first after filtering.\\n        let candidateActions = limitedActions;\\n        // We should deal with population uncertainty if its causing some mission to be on the verge of our success threshold\\n        let populationUncertain = candidateActions.some(a => maxChance(a) > options['success-threshold'] && minChance(a) < options['success-threshold']);\\n        // If current population uncertainty is such that some actions have a maxChance of ~100%, but not a minChance of ~100%,\\n        //   focus on actions that improve the population estimate, otherwise, reserve these actions for later\\n        candidateActions = populationUncertain ? populationActions : unreservedActions;\\n        // Filter out candidates with no contract counts remaining\\n        candidateActions = candidateActions.filter(a => getCount(a) > 0);\\n        // SPECIAL CASE: If we can complete the last bladeburner operation, leave it to the user (they may not be ready to leave the BN).\\n        if (remainingBlackOpsNames.length === 1 && minChance(nextBlackOp) > options['success-threshold']) {\\n            if (!lastBlackOpReady) { // If this is our first time discovering this, alert the user\\n                const time = ns.getPlayer().playtimeSinceLastBitnode;\\n                ns.print(`SUCCESS: Bladeburner is ready to undertake the last BlackOp! (At ${ns.tFormat(time)})`, true, 'success');\\n                ns.alert(\\\"Bladeburner is ready to undertake the last BlackOp (ends the bitnode)\\\");\\n                lastBlackOpReady = true;\\n            }\\n            candidateActions = candidateActions.filter(a => a !== nextBlackOp);\\n        }\\n\\n        // ns.print('The following actions are available: ' + candidateActions); // Debug log to see what candidate actions are\\n        // Pick the first candidate action with a minimum chance of success that exceeds our --success-threshold\\n        bestActionName = candidateActions.filter(a => minChance(a) > options['success-threshold'])[0];\\n        if (!bestActionName) // If there were none, allow us to fall-back to an action with a minimum chance >50%, and maximum chance > threshold\\n            bestActionName = candidateActions.filter(a => minChance(a) > 0.5 && maxChance(a) > options['success-threshold'])[0];\\n        if (!bestActionName) // For actions that improve the population estimate, we're willing to risk the low min chance if it means avoiding Field Analysis\\n            bestActionName = candidateActions.filter(a => populationActions.includes(a) && maxChance(a) > options['success-threshold'])[0];\\n        if (bestActionName) // If we found something to do, log details about its success chance range\\n            reason = actionSummaryString(bestActionName);\\n\\n        // If there were no operations/contracts, resort to a \\\"general action\\\" which always have 100% chance, but take longer and gives less reward\\n        if (!bestActionName) {\\n            if (populationUncertain) { // Lower population uncertainty\\n                bestActionName = \\\"Field Analysis\\\";\\n                reason = `High population uncertainty in ${currentCity}`;\\n            } // If all (non-reserved) operation counts are 0, and chaos isn't too high, Incite Violence to get more work (logic above should subsequently reduce chaos)\\n            else if (unreservedActions.every(a => getCount(a) === 0) && cityNames.every(c => chaosByCity[c] < options['max-chaos'])) {\\n                bestActionName = \\\"Incite Violence\\\";\\n                let [maxChaosCity, maxChaos] = getMaxKeyValue(chaosByCity, cityNames);\\n                reason = `No work available, and max city chaos is ${maxChaos.toFixed(1)} in ${maxChaosCity}, ` +\\n                    `which is less than --max-chaos threshold ${options['max-chaos']}`;\\n            } // Otherwise, consider training\\n            else if (unreservedActions.some(a => maxChance(a) < options['success-threshold']) && // Only if we aren't at 100% chance for everything\\n                staminaPct > options['high-stamina-pct'] && timesTrained < options['training-limit']) { // Only if we have plenty of stamina and have barely trained\\n                timesTrained += options['update-interval'] / 30000; // Take into account the training time (30 seconds) vs how often this code is called\\n                bestActionName = \\\"Training\\\";\\n                reason = `Nothing better to do, times trained (${timesTrained.toFixed(0)}) < --training-limit (${options['training-limit']}), and ` +\\n                    `actions are below success threshold: ` + unreservedActions.filter(a => maxChance(a) < options['success-threshold'])\\n                        .map(a => `${a} (${(100 * maxChance(a)).toFixed(1)}%)`).join(\\\", \\\");\\n            } else { // Otherwise, Field Analysis\\n                bestActionName = \\\"Field Analysis\\\"; // Gives a little rank, and improves population estimate. Best we can do when there's nothing else.\\n                reason = `Nothing better to do`;\\n            }\\n        }\\n        // NOTE: We never \\\"Recruit\\\". Community consensus is that team mates die too readily, and have minimal impact on success.\\n        // NOTE: We don't use the \\\"Hyperbolic Regeneration Chamber\\\". We are cautious enough that we should never need healing.\\n    }\\n\\n    // Detect our current action (API returns an object like { \\\"type\\\":\\\"Operation\\\", \\\"name\\\":\\\"Investigation\\\" })\\n    const currentAction = ns.bladeburner.getCurrentAction();\\n    // Special case: If the user has manually kicked off the last BlackOps, don't interrupt it, let it be our last task\\n    if (currentAction?.name === remainingBlackOpsNames[remainingBlackOpsNames.length - 1]) {\\n        lastAssignedTask = currentAction;\\n        bestActionName = currentAction.name;\\n    }\\n    // Warn the user if it looks like a task was interrupted by something else (user activity or bladeburner automation). Ignore if our last assigned task has run out of actions.\\n    if (lastAssignedTask && lastAssignedTask !== currentAction?.name && getCount(lastAssignedTask) > 0) {\\n        ns.print(`WARNING: The last task this script assigned was \\\"${lastAssignedTask}\\\", but you're now doing \\\"${currentAction?.name || '(nothing)'}\\\". ` +\\n            `Have you been using Bladeburner Automation? If so, try typing \\\"automate dis\\\" in the Bladeburner Console.`, false, 'warning');\\n    } else if (currentAction?.name) {\\n        const currentDuration = ns.bladeburner.getActionTime(currentAction.type, currentAction.name);\\n        if (!lastAssignedTask) { // Leave a log acknowledging if we just started up and there was an activity already underway.\\n            ns.print(`INFO: At startup, Bladeburner was already doing \\\"${currentAction?.name}\\\", ` +\\n                (bestActionName !== currentAction.name ? `but we would prefer to do \\\"${bestActionName}\\\", so we will be switching.` :\\n                    `which is what we were planning to do, so we will leave the current task alone.`));\\n            lastAssignedTask = bestActionName;\\n        }\\n        // Normally, we don't switch tasks if our previously assigned task hasn't had time to complete once.\\n        // EXCEPTION: Early after a reset, this time is LONG, and in a few seconds it may be faster to just stop and restart it.\\n        if (currentDuration < currentTaskEndTime - Date.now()) {\\n            ns.print(`INFO: ${bestActionName === currentAction.name ? 'Restarting' : 'Cancelling'} action \\\"${currentAction.name}\\\" because its new duration ` +\\n                `is less than the time remaining (${ns.tFormat(currentDuration)} < ${ns.tFormat(currentTaskEndTime - Date.now())})`);\\n        } else if (Date.now() < currentTaskEndTime || bestActionName === currentAction.name) return;\\n    } // Otherwise prior action was stopped or ended and no count remain, so we should start a new one regardless of expected currentTaskEndTime\\n\\n    // Change actions if we're not currently doing the desired action\\n    const bestActionType = nextBlackOp === bestActionName ? \\\"Black Op\\\" : contractNames.includes(bestActionName) ? \\\"Contract\\\" :\\n        operationNames.includes(bestActionName) ? \\\"Operation\\\" : \\\"General Action\\\";\\n    const success = ns.bladeburner.startAction(bestActionType, bestActionName);\\n    const expectedDuration = ns.bladeburner.getActionTime(bestActionType, bestActionName);\\n    const successMsg = `INFO: Switched to Bladeburner ${bestActionType} \\\"${bestActionName}\\\" (${reason}). ETA: ${ns.tFormat(expectedDuration)}`;\\n    ns.print((success ? successMsg :\\n        `ERROR: Failed to switch to Bladeburner ${bestActionType} \\\"${bestActionName}\\\" (Count: ${getCount(bestActionName)}, ` +\\n        `ETA: ${ns.tFormat(expectedDuration)}, Details: ${reason})`),\\n        !success);\\n    if (success) ns.toast(successMsg, 'info', 10000);\\n    // Ensure we perform this new action at least once before interrupting it\\n    lastAssignedTask = bestActionName;\\n    currentTaskEndTime = !success ? 0 : Date.now() + expectedDuration + 10; // Pad this a little to ensure we don't interrupt it.\\n}\\n\\n/** @param {NS} ns\\n * @param city\\n * @param reason\\n * Helper to switch cities. */\\nasync function switchToCity(ns, city, reason) {\\n    const success = ns.bladeburner.switchCity(city);\\n    ns.print((success ? 'INFO: Switched' : 'ERROR: Failed to switch') + ` to Bladeburner city \\\"${city}\\\" (${reason})`,\\n        !success);\\n    return success;\\n}\\n\\n/** @param {NS} ns\\n * Decides how to spend skill points. */\\nasync function spendSkillPoints(ns) {\\n    while (true) { // Loop until we determine there's nothing left to spend skill points on\\n        const unspent = ns.bladeburner.getSkillPoints();\\n        if (unspent === 0) return;\\n        const skillLevels = {};\\n        const skillCosts = {};\\n        for (let skillName of skillNames) {\\n            skillLevels[skillName] = ns.bladeburner.getSkillLevel(skillName);\\n            skillCosts[skillName] = ns.bladeburner.getSkillUpgradeCost(skillName);\\n        }\\n        // Find the next lowest skill cost\\n        let skillToUpgrade = '';\\n        let minPerceivedCost = Number.MAX_SAFE_INTEGER;\\n        for (const skillName of skillNames) {\\n            let perceivedCost = skillCosts[skillName] * (costAdjustments[skillName] || 1);\\n            // Bitburner bug workaround: Overclock is capped at lvl 90, but the cost does not return e.g. Infinity\\n            if (skillName === \\\"Overclock\\\" && skillLevels[skillName] === 90) perceivedCost = Number.POSITIVE_INFINITY;\\n            if (perceivedCost < minPerceivedCost)\\n                [skillToUpgrade, minPerceivedCost] = [skillName, perceivedCost];\\n        }\\n        // If the perceived or actual cost of the next best upgrade is too high, save our remaining points for later\\n        if (minPerceivedCost > unspent || skillCosts[skillToUpgrade] > unspent) return;\\n        // Otherwise, purchase the upgrade\\n        if (skillToUpgrade && ns.bladeburner.upgradeSkill(skillToUpgrade)) {\\n            const msg = `SUCCESS: Spent ${skillCosts[skillToUpgrade]} to upgrade '${skillToUpgrade}' to ${skillLevels[skillToUpgrade] + 1}`;\\n            ns.print(msg);\\n            ns.toast(msg, 'success', 30000);\\n        } else\\n            ns.print(`WARNING: Something went wrong while trying to upgrade Bladeburner skill ${skillToUpgrade}. ` +\\n                `Currently have ${unspent} SP, upgrade should cost ${skillCosts[skillToUpgrade]} SP.`, false, 'warning');\\n        await ns.asleep(10);\\n    }\\n}\\n\\n\\n/** @param {NS} ns\\n * Helper to see if we are able to do bladeburner work */\\nasync function canDoBladeburnerWork(ns) {\\n    if (options['ignore-busy-status'] || haveSimulacrum) return true;\\n    if (ns.heart.break() > -54000) return false; //unlock gang first\\n    // Check if the player is busy doing something else\\n    if (!ns.isBusy()) return true;\\n    ns.print(`WARNING: Cannot perform Bladeburner actions because the player is busy ` +\\n        `and hasn't installed the augmentation \\\"${simulacrumAugName}\\\"...`, false, 'warning');\\n    return false;\\n}\",\"filename\":\"bladeburner.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"augments.js\",\"url\":\"blob:https://danielyxie.github.io/605e67ab-af17-4c4b-bdfa-64ebfd4a3665\",\"moduleSequenceNumber\":28961},{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/90dab2d0-f15e-4673-8bfe-98ddc83e26cc\",\"moduleSequenceNumber\":28949},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/7fdd18b1-21a8-4421-8c9e-f5b208860f5c\",\"moduleSequenceNumber\":28932},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/a0ec379b-1aba-4504-9956-71c62d64198b\",\"moduleSequenceNumber\":28933},{\"filename\":\"bladeburner.js\",\"url\":\"blob:https://danielyxie.github.io/e370af42-cd44-40d6-a5ca-3ca97371d831\",\"moduleSequenceNumber\":29017}],\"dependents\":[],\"ramUsage\":68.1,\"server\":\"home\",\"moduleSequenceNumber\":91415,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"bladeburner.getSkillNames\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"bladeburner.getGeneralActionNames\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"bladeburner.getContractNames\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"bladeburner.getOperationNames\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"bladeburner.getBlackOpNames\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"bladeburner.getBlackOpRank\",\"cost\":2},{\"type\":\"fn\",\"name\":\"bladeburner.getActionCountRemaining\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getRank\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getCityEstimatedPopulation\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getCityCommunities\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getCityChaos\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getCity\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getActionEstimatedSuccessChance\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getStamina\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getCurrentAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"bladeburner.getActionTime\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.startAction\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.switchCity\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getSkillPoints\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getSkillLevel\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getSkillUpgradeCost\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.upgradeSkill\",\"cost\":4},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { boxTailSingleton, copyHackingFiles, tryGetBitNodeMultipliers } from \\\"utils.js\\\"\\nlet haveHacknetServers = true; // Cached flag after detecting whether we do (or don't) have hacknet servers\\nconst argsSchema = [\\n    ['max-payoff-time-second', 3600], // Controls how far to upgrade hacknet. Can be a number of seconds, or an expression of minutes/hours (e.g. '123m', '4h')\\n    ['continuous', true], // Set to true to run continuously, otherwise, it runs once\\n    ['interval', 10000], // Rate at which the program purchases upgrades when running continuously\\n    ['max-spend', Number.MAX_VALUE], // The maximum amount of money to spend on upgrades\\n    ['toast', true], // Set to true to toast purchases\\n];\\n\\nexport function autocomplete(data, _) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const options = ns.flags(argsSchema);\\n    const continuous = options.continuous;\\n    const interval = options.interval;\\n    let maxSpend = options[\\\"max-spend\\\"];\\n    const hacknetMoney = tryGetBitNodeMultipliers(ns).HacknetNodeMoney\\n    let maxPayoffTime = options['max-payoff-time-second'] * hacknetMoney;\\n    ns.disableLog('sleep');\\n    ns.disableLog('getServerUsedRam');\\n    ns.disableLog('getServerMoneyAvailable');\\n    boxTailSingleton(ns, 'hacknet', '🖳', '100px');\\n    ns.clearLog();\\n    log(ns, `Starting hacknet-upgrade-manager with purchase payoff time limit of ${ns.tFormat(maxPayoffTime * 1000)} and ` +\\n        (maxSpend === Number.MAX_VALUE ? 'no spending limit' : `a spend limit of ${ns.nFormat(maxSpend, \\\"0.0a\\\")}`) +\\n        `. Current fleet: ${ns.hacknet.numNodes()} nodes...`);\\n    do {\\n        const moneySpent = await upgradeHacknet(ns, maxSpend, maxPayoffTime, options);\\n        // Using this method, we cannot know for sure that we don't have hacknet servers until we have purchased one\\n        if (haveHacknetServers && ns.hacknet.numNodes() > 0 && ns.hacknet.hashCapacity() === 0)\\n            haveHacknetServers = false;\\n        if (maxSpend && moneySpent === undefined) {\\n            log(ns, `Spending limit reached. Breaking...`);\\n            break; // Hack, but we return a non-number (false) when we've bought all we can for the current config\\n        }\\n        maxSpend -= moneySpent;\\n        if (continuous) await ns.sleep(interval);\\n    } while (continuous);\\n}\\n\\nlet lastUpgradeLog = \\\"\\\";\\nfunction log(ns, logMessage) { if (logMessage !== lastUpgradeLog) ns.print(lastUpgradeLog = logMessage); }\\n\\n// Will buy the most effective hacknet upgrade, so long as it will pay for itself in the next {payoffTimeSeconds} seconds.\\n/** @param {NS} ns *\\n * @param maxSpend\\n * @param maxPayoffTimeSeconds\\n * @param options\\n */\\nexport async function upgradeHacknet(ns, maxSpend, maxPayoffTimeSeconds = 3600 /* 3600 sec == 1 hour */, options) {\\n    const currentHacknetMult = ns.getPlayer().hacknet_node_money_mult;\\n    // Get the lowest cache level, we do not consider upgrading the cache level of servers above this until all have the same cache level\\n    const minCacheLevel = [...Array(ns.hacknet.numNodes()).keys()].reduce((min, i) => Math.min(min, ns.hacknet.getNodeStats(i).cache), Number.MAX_VALUE);\\n    const upgrades = [{ name: \\\"none\\\", cost: 0 }, {\\n        name: \\\"level\\\", upgrade: ns.hacknet.upgradeLevel, cost: (i, l = 1) => ns.hacknet.getLevelUpgradeCost(i, l), nextValue: (nodeStats, l = 1) => nodeStats.level + l,\\n        addedProduction: (nodeStats, l = 1) => ns.formulas.hacknetServers.hashGainRate(nodeStats.level + l, 0, nodeStats.ram, nodeStats.cores, currentHacknetMult)\\n    }, {\\n        name: \\\"ram\\\", upgrade: ns.hacknet.upgradeRam, cost: (i, l = 1) => ns.hacknet.getRamUpgradeCost(i, l), nextValue: (nodeStats, l = 1) => nodeStats.ram * 2 * l,\\n        addedProduction: (nodeStats, l = 1) => ns.formulas.hacknetServers.hashGainRate(nodeStats.level, 0, nodeStats.ram * 2 * l, nodeStats.cores, currentHacknetMult)\\n    }, {\\n        name: \\\"cores\\\", upgrade: ns.hacknet.upgradeCore, cost: (i, l = 1) => ns.hacknet.getCoreUpgradeCost(i, l), nextValue: (nodeStats, l = 1) => nodeStats.cores + l,\\n        addedProduction: (nodeStats, l = 1) => ns.formulas.hacknetServers.hashGainRate(nodeStats.level, 0, nodeStats.ram, nodeStats.cores + l, currentHacknetMult)\\n    }, {\\n        name: \\\"cache\\\", upgrade: ns.hacknet.upgradeCache, cost: (i, l = 1) => ns.hacknet.getCacheUpgradeCost(i, l), nextValue: (nodeStats, l = 1) => nodeStats.cache + l,\\n        addedProduction: (nodeStats, l = 1) => nodeStats.cache > minCacheLevel || !haveHacknetServers ? 0 : nodeStats.production * 0.01 / nodeStats.cache // Note: Does not actually give production, but it has \\\"worth\\\" to us so we can buy more things\\n    }];\\n    // Find the best upgrade we can make to an existing node\\n    let nodeToUpgrade = -1;\\n    let bestUpgrade;\\n    let bestUpgradePayoff = 0; // Hashes per second per dollar spent. Bigger is better.\\n    let cost = 0;\\n    let upgradedValue = 0;\\n    let worstNodeProduction = Number.MAX_VALUE; // Used to how productive a newly purchased node might be\\n    let worstNodeIndex;\\n    let worstNodeStats;\\n    for (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n        let nodeStats = ns.hacknet.getNodeStats(i);\\n        if (haveHacknetServers) { // When a hacknet server runs scripts, nodeStats.production lags behind what it should be for current ram usage. Get the \\\"raw\\\" rate\\n            nodeStats.production = ns.formulas.hacknetServers.hashGainRate(nodeStats.level, 0, nodeStats.ram, nodeStats.cores, currentHacknetMult);\\n        }\\n        worstNodeProduction = Math.min(worstNodeProduction, nodeStats.production);\\n        if (worstNodeProduction === nodeStats.production) {\\n            worstNodeIndex = i;\\n            worstNodeStats = nodeStats\\n        }\\n    }\\n    if (ns.hacknet.numNodes() !== 0) {\\n        // Upgrade the worst node because it'll be cheaper too\\n        for (let up = 1; up < upgrades.length; up++) {\\n            let currentUpgradeCost = upgrades[up].cost(worstNodeIndex);\\n            let payoff = upgrades[up].addedProduction(worstNodeStats) / currentUpgradeCost; // Production (Hashes per second) per dollar spent\\n            if (payoff > bestUpgradePayoff) {\\n                nodeToUpgrade = worstNodeIndex;\\n                bestUpgrade = upgrades[up];\\n                bestUpgradePayoff = payoff;\\n                cost = currentUpgradeCost;\\n                upgradedValue = upgrades[up].nextValue(worstNodeStats);\\n                // await upgradeLookAhead(ns, payoff, upgrades, up, worstNodeIndex, worstNodeStats);\\n            }\\n        }\\n    }\\n\\n    // Compare this to the cost of adding a new node. This is an imperfect science. We are paying to unlock the ability to buy all the same upgrades our\\n    // other nodes have - all of which have been deemed worthwhile. Not knowing the sum total that will have to be spent to reach that same production,\\n    // the \\\"most optimistic\\\" case is to treat \\\"price\\\" of all that production to be just the cost of this server, but this is **very** optimistic.\\n    // In practice, the cost of new hacknet nodes scales steeply enough that this should come close to being true (cost of server >> sum of cost of upgrades)\\n    let newNodeCost = ns.hacknet.getPurchaseNodeCost();\\n    let newNodePayoff = ns.hacknet.numNodes() === ns.hacknet.maxNumNodes() ? 0 : worstNodeProduction / newNodeCost;\\n    let shouldBuyNewNode = newNodePayoff > bestUpgradePayoff;\\n    if (newNodePayoff === 0 && bestUpgradePayoff === 0) {\\n        log(ns, `All upgrades have no value (is hashNet income disabled in this BN?)`);\\n        return 0; // As long as maxSpend doesn't change, we will never purchase another upgrade\\n    }\\n    // If specified, only buy upgrades that will pay for themselves in {payoffTimeSeconds}.\\n    const hashDollarValue = haveHacknetServers ? 2.5e5 : 1; // Dollar value of one hash-per-second (0.25m dollars per production).\\n    let payoffTimeSeconds = 1 / (hashDollarValue * (shouldBuyNewNode ? newNodePayoff : bestUpgradePayoff));\\n    if (shouldBuyNewNode) cost = newNodeCost;\\n\\n    // Prepare info about the next upgrade. Whether we end up purchasing or not, we will display this info.\\n    let strPurchase = (shouldBuyNewNode ? `a new node \\\"hacknet-node-${ns.hacknet.numNodes()}\\\"` :\\n        `hacknet-node-${nodeToUpgrade} ${bestUpgrade.name} ${upgradedValue}`) + ` for ${ns.nFormat(cost, '0.0a')}`;\\n    let strPayoff = `production ${((shouldBuyNewNode ? newNodePayoff : bestUpgradePayoff) * cost).toPrecision(3)} payoff time: ${ns.tFormat(1000 * payoffTimeSeconds)}`\\n    if (cost > maxSpend) {\\n        log(ns, `The next best purchase would be ${strPurchase}, but the cost exceeds the spending limit (${ns.nFormat(maxSpend, '0.0a')})`);\\n        return; // Shut-down. As long as maxSpend doesn't change, we will never purchase another upgrade\\n    }\\n    if (payoffTimeSeconds > maxPayoffTimeSeconds) {\\n        log(ns, `The next best purchase would be ${strPurchase}, but the ${strPayoff} is worse than the limit (${ns.tFormat(1000 * maxPayoffTimeSeconds)})`);\\n        return; // Shut-down. As long as maxPayoffTimeSeconds doesn't change, we will never purchase another upgrade\\n    }\\n    let success;\\n    if (shouldBuyNewNode) {\\n        const nodeIndex = ns.hacknet.purchaseNode();\\n        await copyHackingFiles(ns, { hostname: `hacknet-node-${nodeIndex}`, hasAdminRights: true });\\n        success = nodeIndex !== -1;\\n    } else success = bestUpgrade.upgrade(nodeToUpgrade, 1)\\n\\n    if (success && options.toast) ns.toast(`Purchased ${strPurchase}`, 'success');\\n    log(ns, success ? `Purchased ${strPurchase} with ${strPayoff}` : `Insufficient funds to purchase the next best upgrade: ${strPurchase}`);\\n    return success ? cost : 0;\\n}\\n\\n//todo figure out how to upgrade out of the local minumum\\nasync function upgradeLookAhead(ns, payoff, upgrades, up, worstNodeIndex, worstNodeStats) {\\n    let l = 1;\\n    let nextPayoff = 0;\\n    log(ns, `payoff ${(payoff).toPrecision(3)} payoff time: ${ns.tFormat(1000 * (1 / (2.5e5 * payoff)))}`);\\n    let previousPayoffs = payoff;\\n    while (payoff > nextPayoff) {\\n        l++;\\n        upgrades[up].cost(worstNodeIndex, l);\\n        // Iterate on the number of levels checking if increasing the levels actually lowers the payoff.\\n        // perhaps the payoff will be worth it with more levels especially true of new nodes.\\n        let totalpayoff = upgrades[up].addedProduction(worstNodeStats, l) / upgrades[up].cost(worstNodeIndex, l);\\n        nextPayoff = totalpayoff - previousPayoffs;\\n        previousPayoffs = totalpayoff;\\n        log(ns, `nextPayoff ${(nextPayoff).toPrecision(3)} payoff time: ${ns.tFormat(1000 * (1 / (2.5e5 * nextPayoff)))}`);\\n        await ns.sleep(20);\\n    }\\n}\",\"filename\":\"hacknet.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/5a77e671-4c48-4df4-a993-7580143bca88\",\"moduleSequenceNumber\":28949},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/071df498-ffd9-475b-b216-8254813ef8f1\",\"moduleSequenceNumber\":28932},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/6a6de736-d33f-47e3-94ca-0e392274b74e\",\"moduleSequenceNumber\":28933},{\"filename\":\"hacknet.js\",\"url\":\"blob:https://danielyxie.github.io/6e21a32b-3959-485f-a9b6-0d74bce382b4\",\"moduleSequenceNumber\":29013}],\"dependents\":[],\"ramUsage\":7.3,\"server\":\"home\",\"moduleSequenceNumber\":29013,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { boxTailSingleton} from \\\"utils.js\\\"\\n\\nconst sellForMoney = 'Sell for Money';\\n\\nconst argsSchema = [\\n\\t['liquidate', false], // Spend hashes as soon as we can afford any --spend-on purchase item. Otherwise, only spends when nearing capacity.\\n\\t['interval', 1000], // Rate at which the program runs and spends hashes\\n\\t['spend-on', [sellForMoney]],\\n\\t['spend-on-server', undefined],\\n\\t['reserve-buffer', 1], // To avoid wasting hashes, spend if would be within this many hashes of our max capacity on the next tick.\\n];\\n\\nconst basicSpendOptions = ['Sell for Money', 'Generate Coding Contract', 'Improve Studying', 'Improve Gym Training',\\n\\t'Sell for Corporation Funds', 'Exchange for Corporation Research', 'Exchange for Bladeburner Rank', 'Exchange for Bladeburner SP'];\\nconst parameterizedSpendOptions = ['Reduce Minimum Security', 'Increase Maximum Money'];\\nconst purchaseOptions = basicSpendOptions.concat(parameterizedSpendOptions);\\n\\nexport function autocomplete(data, args) {\\n\\tdata.flags(argsSchema);\\n\\tconst lastFlag = args.length > 1 ? args[args.length - 2] : null;\\n\\tif (lastFlag === \\\"--spend-on\\\") // Provide a couple auto-complete options to facilitate these arguments with spaces in them\\n\\t\\treturn purchaseOptions.map(f => f.replaceAll(\\\" \\\", \\\"_\\\"))\\n\\t\\t\\t.concat(purchaseOptions.map(f => `'${f}'`));\\n\\treturn [];\\n}\\n\\n/** @param {NS} ns\\n * Executes instructions to spend hacknet hashes continuously.\\n * NOTE: This script is written to support multiple concurrent instances running with different arguments. **/\\nexport async function main(ns) {\\n\\tconst options = ns.flags(argsSchema);\\n\\tconst liquidate = options.liquidate;\\n\\tconst interval = options.interval;\\n\\tconst toBuy = options['spend-on'].map(s => s.replaceAll(\\\"_\\\", \\\" \\\"));\\n\\tconst spendOnServer = options['spend-on-server']?.replaceAll(\\\"_\\\", \\\" \\\") ?? undefined;\\n\\t// Validate arguments\\n\\tif (toBuy.length === 0)\\n\\t\\treturn ns.print(\\\"ERROR: You must specify at least one thing to spend hashes on via the --spend-on argument.\\\", true, 'error');\\n\\tconst unrecognized = toBuy.filter(p => !purchaseOptions.includes(p));\\n\\tif (unrecognized.length > 0)\\n\\t\\treturn ns.print(`ERROR: One or more --spend-on arguments are not recognized: ${unrecognized.join(\\\", \\\")}`, true, 'error');\\n\\tns.disableLog('sleep');\\n\\tconst pinned = `Spending on '${toBuy}'. Will check in every ${ns.tFormat(interval)}. Reserving ${options['reserve-buffer']}`\\n\\tboxTailSingleton(ns, 'hacknet-spend', '🖳', '100px', `<div>${pinned}</div>`);\\n\\tns.clearLog();\\n\\tns.print(pinned);\\n\\tns.print(liquidate ? `--liquidate mode active! Will spend all hashes as soon as possible.` :\\n\\t\\t`Saving up hashes, only spending hashes when near capacity to avoid wasting them.`);\\n\\t// Function determines the current cheapest upgrade of all the upgrades we wish to keep purchasing\\n\\tconst getMinCost = spendActions => Math.min(...spendActions.map(p => ns.hacknet.hashCost(p)));\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(interval);\\n\\t\\ttry {\\n\\t\\t\\t// Compute the total income rate of all hacknet nodes. We have to spend faster than this when near capacity.\\n\\t\\t\\tconst nodes = ns.hacknet.numNodes();\\n\\t\\t\\tlet capacity = ns.hacknet.hashCapacity() || 0;\\n\\t\\t\\tif (nodes === 0) {\\n\\t\\t\\t\\tns.print('WARN: Hacknet is empty, no hashes to spend yet...');\\n\\t\\t\\t\\tcontinue; // Nothing to do until at least one node is purchased.\\n\\t\\t\\t} else if (capacity === 0)\\n\\t\\t\\t\\treturn ns.print('INFO: You have hacknet nodes, not hacknet servers, so spending hashes is not applicable.');\\n\\t\\t\\tlet globalProduction = Array.from({ length: nodes }, (_, i) => ns.hacknet.getNodeStats(i))\\n\\t\\t\\t\\t.reduce((total, node) => total + node.production, 0);\\n\\t\\t\\tconst reserve = globalProduction * interval / 1000 + options['reserve-buffer']; // If we are this far from our capacity, start spending\\n\\t\\t\\t// Define the spend hash loop as a local function, since we may need to call it twice.\\n\\t\\t\\tconst fnSpendHashes = async (purchases, spendAllHashes) => {\\n\\t\\t\\t\\tconst startingHashes = ns.hacknet.numHashes() || 0;\\n\\t\\t\\t\\tcapacity = ns.hacknet.hashCapacity() || 0;\\n\\t\\t\\t\\tlet success = true;\\n\\t\\t\\t\\twhile (success && ns.hacknet.numHashes() > (spendAllHashes ? getMinCost(purchases) : capacity - reserve)) {\\n\\t\\t\\t\\t\\tfor (const spendAction of purchases.filter(p => ns.hacknet.numHashes() >= ns.hacknet.hashCost(p))) {\\n\\t\\t\\t\\t\\t\\tconst cost = ns.hacknet.hashCost(spendAction);\\n\\t\\t\\t\\t\\t\\tif (cost > ns.hacknet.numHashes()) break;\\n\\t\\t\\t\\t\\t\\tsuccess = ns.hacknet.spendHashes(spendAction, parameterizedSpendOptions.includes(spendAction) ? spendOnServer : undefined);\\n\\t\\t\\t\\t\\t\\tif (!success) // Minor warning, possible if there are multiple versions of this script running, one beats the other two the punch.\\n\\t\\t\\t\\t\\t\\t\\tns.print(`WARN: Failed to spend hashes on '${spendAction}'. (Cost: ${cost} ` +\\n\\t\\t\\t\\t\\t\\t\\t\\t`Have: ${ns.hacknet.numHashes()} Capacity: ${capacity}`);\\n\\t\\t\\t\\t\\t\\telse if (spendAction !== sellForMoney) // This would be to noisy late-game, since cost never scales\\n\\t\\t\\t\\t\\t\\t\\tns.print(`SUCCESS: Spent ${cost} hashes on '${spendAction}'. ` +\\n\\t\\t\\t\\t\\t\\t\\t\\t`Next upgrade will cost ${ns.hacknet.hashCost(spendAction)}.`, false, 'success');\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tawait ns.sleep(1); // Defend against infinite loop if there's a bug\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.hacknet.numHashes() < startingHashes)\\n\\t\\t\\t\\t\\tns.print(`SUCCESS: Spent ${(startingHashes - ns.hacknet.numHashes()).toFixed(0)} hashes ` +\\n\\t\\t\\t\\t\\t\\t(spendAllHashes ? '' : ` to avoid reaching capacity (${capacity})`) +\\n\\t\\t\\t\\t\\t\\t` while earning ${globalProduction.toPrecision(3)} hashes per second.`);\\n\\t\\t\\t};\\n\\t\\t\\t// Spend hashes normally on any/all user-specified purchases\\n\\t\\t\\tawait fnSpendHashes(toBuy, liquidate);\\n\\t\\t\\t// Determine if we should try to upgrade our hacknet capacity\\n\\t\\t\\tif (capacity - ns.hacknet.numHashes() < reserve)\\n\\t\\t\\t\\tns.print(`INFO: We're still at hash capacity (${capacity}) after spending hashes as instructed. ` +\\n\\t\\t\\t\\t\\t`We currently have ${ns.hacknet.numHashes()} hashes - which is ${capacity - ns.hacknet.numHashes()} away.`);\\n\\t\\t\\telse if (getMinCost(toBuy) > capacity - options['reserve-buffer'])\\n\\t\\t\\t\\tns.print(`INFO: Our hash capacity is ${capacity}, but the cheapest upgrade we wish to purchase ` +\\n\\t\\t\\t\\t\\t`costs ${getMinCost(toBuy)} hashes. A capacity upgrade is needed before anything else is purchase.`);\\n\\t\\t\\telse // Current hash capacity suffices\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t// Try to upgrade hacknet capacity so we can save up for more upgrades\\n\\t\\t\\tlet lowestLevel = Number.MAX_SAFE_INTEGER, lowestIndex = null;\\n\\t\\t\\tfor (let i = 0; i < nodes; i++)\\n\\t\\t\\t\\tif (ns.hacknet.getNodeStats(i).hashCapacity < lowestLevel) {\\n\\t\\t\\t\\t\\tlowestIndex = i;\\n\\t\\t\\t\\t\\tlowestLevel = ns.hacknet.getNodeStats(i).hashCapacity;\\n\\t\\t\\t\\t}\\n\\t\\t\\tif (lowestIndex !== null && ns.hacknet.upgradeCache(lowestIndex, 1)) {\\n\\t\\t\\t\\tns.print(`SUCCESS: Upgraded hacknet node ${lowestIndex} hash capacity in order to afford further purchases. ` +\\n\\t\\t\\t\\t\\t`(You can disable this with --no-capacity-upgrades)`, false, 'success');\\n\\t\\t\\t\\tcapacity = ns.hacknet.hashCapacity()\\n\\t\\t\\t} else if (nodes > 0)\\n\\t\\t\\t\\tns.print(`WARNING: We cannot afford to buy any of the desired upgrades (${toBuy.join(\\\", \\\")}) at our current hash capacity, ` +\\n\\t\\t\\t\\t\\t`and we failed to increase our hash capacity (cost: ${ns.nFormat(ns.hacknet.getCacheUpgradeCost(lowestIndex, 1), '0.0a')}).`, false, 'warning');\\n\\n\\t\\t\\t// If for any of the above reasons, we weren't able to upgrade capacity, calling 'SpendHashes' once more\\n\\t\\t\\t// with these arguments will only convert enough hashes to money to ensure they aren't wasted before the next tick.\\n\\t\\t\\tawait fnSpendHashes([sellForMoney], false);\\n\\t\\t}\\n\\t\\tcatch (err) {\\n\\t\\t\\tns.print(`WARNING: spend-hacknet-hashes.js Caught (and suppressed) an unexpected error in the main loop:\\\\n` +\\n\\t\\t\\t\\t(typeof err === 'string' ? err : err.message || JSON.stringify(err)), false, 'warning');\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"spend-hacknet-hash.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:https://danielyxie.github.io/74a6b3aa-478d-4150-bfc5-26ce63c19d2d\",\"moduleSequenceNumber\":28949},{\"filename\":\"opened_servers.js\",\"url\":\"blob:https://danielyxie.github.io/d6bbdcd7-b123-4ea4-b36c-4f029160014e\",\"moduleSequenceNumber\":28932},{\"filename\":\"utils.js\",\"url\":\"blob:https://danielyxie.github.io/44648ad4-0ae9-4705-a818-ea4f05b6edcb\",\"moduleSequenceNumber\":28933},{\"filename\":\"spend-hacknet-hash.js\",\"url\":\"blob:https://danielyxie.github.io/e8da6ca4-7a36-460e-b2a0-c6f886a485c6\",\"moduleSequenceNumber\":29014}],\"dependents\":[],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":29014,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @arg {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    \\n    const scripts = [\\\"/bin/hack.js\\\", \\\"/bin/weak.js\\\", \\\"/bin/grow.js\\\", \\\"/bin/weak.js\\\"];\\n    const killAllScripts = function(ns, pids) {\\n        for (let index = 0; index < pids.length; ++index) {\\n            for (let i = 0; i < 4; ++i) { ns.kill(pids[index][i]); }\\n        }\\n    }\\n    \\n    // Get input from globalThis (or read a file, or read a port, or however else you get input into the script)\\n    let params = globalThis.batch_params[ns.args[0]];\\n\\n    // For storing the PIDs of the child hack/grow/weaken scripts\\n    const pids = Array.from(Array(params.depth), () => Array(4).fill(0));\\n\\n    // This gets which servers you want to run child scripts on - this could be done on-the-fly as you launch\\n    // each script, but I choose to allocate space for each script up front and pass it to the batch manager\\n    const hosts = Array.from(Array(params.depth), () => Array(4));\\n    for (let i = 0; i < 4; ++i) {\\n        const alloc = params.alloc[[\\\"hmain\\\", \\\"hweak\\\", \\\"gmain\\\", \\\"gweak\\\"][i]];\\n\\n        let index = 0;\\n        for (const hostname in alloc) {\\n            for (let _j = 0; _j < alloc[hostname]; ++_j) {\\n                hosts[index++][i] = hostname;\\n            }\\n        }\\n    }\\n\\n    const kH = Math.ceil(params.hack_time / params.period);\\n    const kG = Math.ceil(params.grow_time / params.period);\\n\\n    // Keep track of an overall error value and quit if it gets too high\\n    let error_value = 0;\\n    const error_max = 100;\\n\\n    const time_begin = performance.now();\\n    ns.print(`Script starting at ${new Date(Date.now()).toLocaleTimeString()}`);\\n    ns.print(`First batch due at ${new Date(Date.now() + params.depth * params.period - 4 * params.t0).toLocaleTimeString()}`);\\n\\n    let ending    = false;\\n    let max_batch = Infinity;\\n    for (let batch = 0; batch < max_batch; ++batch) {\\n        const index = batch % params.depth;\\n\\n        const batch_begin = time_begin + batch * params.period;\\n        await ns.asleep(batch_begin - performance.now());\\n        const batch_lag = performance.now() - batch_begin;\\n        \\n        // Make sure this loop starts on time\\n        let dispatch = true;\\n        if (batch_lag >= params.t0) {\\n            ns.print(ns.sprintf(\\\"WARN: %4d loop started %dms late\\\", batch, batch_lag));\\n            error_value += 3;\\n            dispatch = false;\\n        }\\n\\n        // Make sure scripts finished on time\\n        for (let i = 0; i < 4; ++i) {\\n            if (ns.isRunning(pids[index][i])) {\\n                ns.print(ns.sprintf(\\\"WARN: %4d %d finished late\\\", batch, i));\\n                ns.kill(pids[index][i]);\\n                error_value += 1;\\n            }\\n            pids[index][i] = 0;\\n        }\\n\\n        // Make sure we're up-to-date with global data\\n        params = globalThis.batch_params[ns.args[0]];\\n        const target = globalThis.network[params.target.name];\\n\\n        // Test if we're being told to quit remotely\\n        if (params.quit) {\\n            ns.print(ns.sprintf(\\\"ERROR: %4d Received quit message\\\", batch));\\n            killAllScripts(ns, pids);\\n            break;\\n        }\\n\\n        target.cur_money = ns.getServerMoneyAvailable(target.name);\\n        target.cur_level = ns.getServerSecurityLevel(target.name);\\n        const next_index = (index + 1) % params.depth;\\n\\n        if (target.cur_level > target.level) {\\n            ns.print(ns.sprintf(\\\"WARN: %4d Security level raised by %.3f\\\", batch, target.cur_level - target.level));\\n            error_value += 5;\\n\\n            // To recover, kill the hack and grow about to land\\n            ns.kill(pids[next_index][0]);\\n            ns.kill(pids[next_index][2]);\\n\\n            // Kill hacks/grows in batches that would be affected by the security raise\\n            ns.kill(pids[(index + kH) % params.depth][0]);\\n            ns.kill(pids[(index + kG) % params.depth][0]);\\n            ns.kill(pids[(index + kG) % params.depth][2]);\\n\\n            // Skip the upcoming dispatch since the weakens would be affected\\n            dispatch = false;\\n        } else if (target.cur_money < target.money) {\\n            ns.print(ns.sprintf(\\\"WARN: %4d Money too low, at %.1f%%\\\", batch, 100 * target.cur_money / target.money));\\n            error_value += 2;\\n            \\n            // To recover, kill the hack about to land\\n            ns.kill(pids[next_index][0]);\\n        } else {\\n            // We didn't need to recover, so if there's no hack coming up, kill the next batch about to land\\n            if (pids[next_index][0] == 0) {\\n                for (let i = 1; i < 4; ++i) {\\n                    ns.kill(pids[next_index][i]);\\n                    pids[next_index][i] = 0;\\n                }\\n            }\\n\\n            error_value = Math.max(error_value - 1, 0);\\n        }\\n\\n        // If our hacking skill increases, kill any batch with any script still sleeping and set us up to end\\n        if (ending) {\\n            params.scripts -= 4;\\n            dispatch = false;\\n        } else if (ns.getHackingLevel() != params.skill) {\\n            ns.print(ns.sprintf(\\\"ERROR: %4d Hacking skill increased to %d\\\", batch, ns.getHackingLevel()));\\n\\n            for (let offset = kH; offset < params.depth; ++offset) {\\n                for (let i = 0; i < 4; ++i) { ns.kill(pids[(index + offset) % params.depth][i]); }\\n            }\\n\\n            ending         = true;\\n            max_batch      = batch + kH;\\n            params.time    = time_begin + (max_batch - 1) * params.period + (Date.now() - performance.now());\\n            params.scripts = (kH - 1) * 4 + 1;\\n            dispatch       = false;\\n        }\\n\\n        // Send out our child scripts\\n        if (dispatch) {\\n            let dispatch_error = false;\\n\\n            for (let i = 0; i < 4; ++i) {\\n                const event_begin = batch_begin + params.delay[i];\\n                pids[index][i] = ns.exec(scripts[i], hosts[index][i], params.threads[i], params.target.name, event_begin);\\n\\n                if (pids[index][i] == 0) {\\n                    ns.print(ns.sprintf(\\\"WARN: %4d Could not run %d on %s\\\", batch, i, hosts[index][i]));\\n                    error_value += 20;\\n                    dispatch_error = true;\\n                    break;\\n                }\\n            }\\n\\n            if (dispatch_error) { for (let i = 0; i < 4; ++i) { ns.kill(pids[index][i]); } }\\n        }\\n\\n        if (error_value > error_max) {\\n            ns.print(ns.sprintf(\\\"ERROR: %4d Too many errors, giving up\\\", batch));\\n            killAllScripts(ns, pids);\\n            break;\\n        }\\n    }\\n\\n    params.quit = false;\\n}\",\"filename\":\"stalefish.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stalefish.js\",\"url\":\"blob:https://danielyxie.github.io/2936ec1a-4e9d-41dc-a296-05ea33434241\",\"moduleSequenceNumber\":253453}],\"dependents\":[],\"ramUsage\":3.75,\"server\":\"home\",\"moduleSequenceNumber\":28969,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"hacknet-node-0\",\"darkweb\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/ingang.txt\",\"text\":\"Slum Snakes\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/player.txt\",\"text\":\"{\\n  \\\"hacking\\\": 1,\\n  \\\"hp\\\": 10,\\n  \\\"max_hp\\\": 10,\\n  \\\"strength\\\": 11,\\n  \\\"defense\\\": 8,\\n  \\\"dexterity\\\": 6,\\n  \\\"agility\\\": 22,\\n  \\\"charisma\\\": 3,\\n  \\\"intelligence\\\": 175,\\n  \\\"hacking_chance_mult\\\": 1.6773885669531117,\\n  \\\"hacking_speed_mult\\\": 1.727710223961705,\\n  \\\"hacking_money_mult\\\": 1.8451274236484227,\\n  \\\"hacking_grow_mult\\\": 1.6773885669531117,\\n  \\\"hacking_exp\\\": 0,\\n  \\\"strength_exp\\\": 0,\\n  \\\"defense_exp\\\": 0,\\n  \\\"dexterity_exp\\\": 0,\\n  \\\"agility_exp\\\": 0,\\n  \\\"charisma_exp\\\": 0,\\n  \\\"hacking_mult\\\": 1.761257995300767,\\n  \\\"strength_mult\\\": 11.376372924289335,\\n  \\\"defense_mult\\\": 8.342673477812177,\\n  \\\"dexterity_mult\\\": 6.837494431525369,\\n  \\\"agility_mult\\\": 22.768879225858704,\\n  \\\"charisma_mult\\\": 3.301301986391758,\\n  \\\"hacking_exp_mult\\\": 2.9409486005532215,\\n  \\\"strength_exp_mult\\\": 2.8893530110698316,\\n  \\\"defense_exp_mult\\\": 2.8893530110698316,\\n  \\\"dexterity_exp_mult\\\": 3.322755962730306,\\n  \\\"agility_exp_mult\\\": 2.8893530110698316,\\n  \\\"charisma_exp_mult\\\": 2.5797794741694924,\\n  \\\"company_rep_mult\\\": 5.818213502086944,\\n  \\\"faction_rep_mult\\\": 2.5686115976579353,\\n  \\\"numPeopleKilled\\\": 0,\\n  \\\"money\\\": 329682572.03963614,\\n  \\\"city\\\": \\\"Sector-12\\\",\\n  \\\"location\\\": \\\"Travel Agency\\\",\\n  \\\"companyName\\\": \\\"\\\",\\n  \\\"crime_money_mult\\\": 3.5911197115964355,\\n  \\\"crime_success_mult\\\": 2.0893787412924723,\\n  \\\"isWorking\\\": false,\\n  \\\"workType\\\": \\\"\\\",\\n  \\\"currentWorkFactionName\\\": \\\"\\\",\\n  \\\"currentWorkFactionDescription\\\": \\\"\\\",\\n  \\\"workHackExpGainRate\\\": 0,\\n  \\\"workStrExpGainRate\\\": 0,\\n  \\\"workDefExpGainRate\\\": 0,\\n  \\\"workDexExpGainRate\\\": 0,\\n  \\\"workAgiExpGainRate\\\": 0,\\n  \\\"workChaExpGainRate\\\": 0,\\n  \\\"workRepGainRate\\\": 0,\\n  \\\"workMoneyGainRate\\\": 0,\\n  \\\"workMoneyLossRate\\\": 0,\\n  \\\"workHackExpGained\\\": 0,\\n  \\\"workStrExpGained\\\": 0,\\n  \\\"workDefExpGained\\\": 0,\\n  \\\"workDexExpGained\\\": 0,\\n  \\\"workAgiExpGained\\\": 0,\\n  \\\"workChaExpGained\\\": 0,\\n  \\\"workRepGained\\\": 0,\\n  \\\"workMoneyGained\\\": 0,\\n  \\\"createProgramName\\\": \\\"\\\",\\n  \\\"createProgramReqLvl\\\": 100,\\n  \\\"className\\\": \\\"\\\",\\n  \\\"crimeType\\\": \\\"\\\",\\n  \\\"work_money_mult\\\": 3.4540785370698472,\\n  \\\"hacknet_node_money_mult\\\": 1.5891049581661056,\\n  \\\"hacknet_node_purchase_cost_mult\\\": 0.5762316694803805,\\n  \\\"hacknet_node_ram_cost_mult\\\": 0.5762316694803805,\\n  \\\"hacknet_node_core_cost_mult\\\": 0.5762316694803805,\\n  \\\"hacknet_node_level_cost_mult\\\": 0.5762316694803805,\\n  \\\"hasWseAccount\\\": false,\\n  \\\"hasTixApiAccess\\\": false,\\n  \\\"has4SData\\\": false,\\n  \\\"has4SDataTixApi\\\": false,\\n  \\\"bladeburner_max_stamina_mult\\\": 1.08,\\n  \\\"bladeburner_stamina_gain_mult\\\": 1.123632,\\n  \\\"bladeburner_analysis_mult\\\": 1.1340000000000001,\\n  \\\"bladeburner_success_chance_mult\\\": 1.2273509664000002,\\n  \\\"bitNodeN\\\": 6,\\n  \\\"totalPlaytime\\\": 10778494600,\\n  \\\"playtimeSinceLastAug\\\": 2600,\\n  \\\"playtimeSinceLastBitnode\\\": 133252000,\\n  \\\"jobs\\\": {},\\n  \\\"factions\\\": [\\n    \\\"Slum Snakes\\\",\\n    \\\"Bladeburners\\\"\\n  ],\\n  \\\"tor\\\": false,\\n  \\\"inBladeburner\\\": true,\\n  \\\"hasCorporation\\\": false,\\n  \\\"entropy\\\": 0\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/getBitNodeMultipliers.txt\",\"text\":\"{\\n  \\\"HackingLevelMultiplier\\\": 0.35,\\n  \\\"StrengthLevelMultiplier\\\": 1,\\n  \\\"DefenseLevelMultiplier\\\": 1,\\n  \\\"DexterityLevelMultiplier\\\": 1,\\n  \\\"AgilityLevelMultiplier\\\": 1,\\n  \\\"CharismaLevelMultiplier\\\": 1,\\n  \\\"ServerGrowthRate\\\": 1,\\n  \\\"ServerMaxMoney\\\": 0.4,\\n  \\\"ServerStartingMoney\\\": 0.5,\\n  \\\"ServerStartingSecurity\\\": 1.5,\\n  \\\"ServerWeakenRate\\\": 1,\\n  \\\"HomeComputerRamCost\\\": 1,\\n  \\\"PurchasedServerCost\\\": 1,\\n  \\\"PurchasedServerSoftcap\\\": 2,\\n  \\\"PurchasedServerLimit\\\": 1,\\n  \\\"PurchasedServerMaxRam\\\": 1,\\n  \\\"CompanyWorkMoney\\\": 0.5,\\n  \\\"CrimeMoney\\\": 0.75,\\n  \\\"HacknetNodeMoney\\\": 0.2,\\n  \\\"ManualHackMoney\\\": 1,\\n  \\\"ScriptHackMoney\\\": 0.75,\\n  \\\"ScriptHackMoneyGain\\\": 1,\\n  \\\"CodingContractMoney\\\": 1,\\n  \\\"ClassGymExpGain\\\": 1,\\n  \\\"CompanyWorkExpGain\\\": 1,\\n  \\\"CrimeExpGain\\\": 1,\\n  \\\"FactionWorkExpGain\\\": 1,\\n  \\\"HackExpGain\\\": 0.25,\\n  \\\"FactionPassiveRepGain\\\": 1,\\n  \\\"FactionWorkRepGain\\\": 1,\\n  \\\"RepToDonateToFaction\\\": 1,\\n  \\\"AugmentationMoneyCost\\\": 1,\\n  \\\"AugmentationRepCost\\\": 1,\\n  \\\"InfiltrationMoney\\\": 0.75,\\n  \\\"InfiltrationRep\\\": 1,\\n  \\\"FourSigmaMarketDataCost\\\": 1,\\n  \\\"FourSigmaMarketDataApiCost\\\": 1,\\n  \\\"CorporationValuation\\\": 0.2,\\n  \\\"CorporationSoftCap\\\": 0.9,\\n  \\\"BladeburnerRank\\\": 1,\\n  \\\"BladeburnerSkillCost\\\": 1,\\n  \\\"GangSoftcap\\\": 0.7,\\n  \\\"GangUniqueAugs\\\": 0.2,\\n  \\\"DaedalusAugsRequirement\\\": 1.166,\\n  \\\"StaneksGiftPowerMultiplier\\\": 0.5,\\n  \\\"StaneksGiftExtraSize\\\": 2,\\n  \\\"WorldDaemonDifficulty\\\": 2\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/factionAugs.txt\",\"text\":\"{\\n  \\\"Illuminati\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Synthetic Heart\\\",\\n    \\\"Synfibril Muscle\\\",\\n    \\\"NEMEAN Subdermal Weave\\\",\\n    \\\"Embedded Netburner Module Core V3 Upgrade\\\",\\n    \\\"Embedded Netburner Module Analyze Engine\\\",\\n    \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\n    \\\"QLink\\\"\\n  ],\\n  \\\"Daedalus\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Synthetic Heart\\\",\\n    \\\"Synfibril Muscle\\\",\\n    \\\"NEMEAN Subdermal Weave\\\",\\n    \\\"Embedded Netburner Module Core V3 Upgrade\\\",\\n    \\\"Embedded Netburner Module Analyze Engine\\\",\\n    \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\n    \\\"The Red Pill\\\"\\n  ],\\n  \\\"The Covenant\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Augmented Targeting III\\\",\\n    \\\"Synthetic Heart\\\",\\n    \\\"Synfibril Muscle\\\",\\n    \\\"Combat Rib III\\\",\\n    \\\"NEMEAN Subdermal Weave\\\",\\n    \\\"Graphene Bone Lacings\\\",\\n    \\\"Embedded Netburner Module Core V3 Upgrade\\\",\\n    \\\"Embedded Netburner Module Analyze Engine\\\",\\n    \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\n    \\\"SPTN-97 Gene Modification\\\"\\n  ],\\n  \\\"ECorp\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Graphene Bionic Spine Upgrade\\\",\\n    \\\"Graphene Bionic Legs Upgrade\\\",\\n    \\\"Embedded Netburner Module\\\",\\n    \\\"Embedded Netburner Module Core Implant\\\",\\n    \\\"Embedded Netburner Module Core V2 Upgrade\\\",\\n    \\\"Embedded Netburner Module Core V3 Upgrade\\\",\\n    \\\"Embedded Netburner Module Analyze Engine\\\",\\n    \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\n    \\\"PC Direct-Neural Interface\\\",\\n    \\\"PC Direct-Neural Interface Optimization Submodule\\\",\\n    \\\"ECorp HVMind Implant\\\"\\n  ],\\n  \\\"MegaCorp\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Graphene Bionic Legs Upgrade\\\",\\n    \\\"Embedded Netburner Module\\\",\\n    \\\"Embedded Netburner Module Core Implant\\\",\\n    \\\"Embedded Netburner Module Core V2 Upgrade\\\",\\n    \\\"Embedded Netburner Module Core V3 Upgrade\\\",\\n    \\\"Embedded Netburner Module Analyze Engine\\\",\\n    \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\n    \\\"ADR-V1 Pheromone Gene\\\",\\n    \\\"CordiARC Fusion Reactor\\\"\\n  ],\\n  \\\"Bachman & Associates\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Enhanced Social Interaction Implant\\\",\\n    \\\"Neuralstimulator\\\",\\n    \\\"Nuoptimal Nootropic Injector Implant\\\",\\n    \\\"Speech Enhancement\\\",\\n    \\\"FocusWire\\\",\\n    \\\"ADR-V2 Pheromone Gene\\\",\\n    \\\"SmartJaw\\\"\\n  ],\\n  \\\"Blade Industries\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Augmented Targeting I\\\",\\n    \\\"Augmented Targeting II\\\",\\n    \\\"Augmented Targeting III\\\",\\n    \\\"Synfibril Muscle\\\",\\n    \\\"Combat Rib I\\\",\\n    \\\"Combat Rib II\\\",\\n    \\\"Combat Rib III\\\",\\n    \\\"Nanofiber Weave\\\",\\n    \\\"Bionic Spine\\\",\\n    \\\"Bionic Legs\\\",\\n    \\\"Embedded Netburner Module\\\",\\n    \\\"Embedded Netburner Module Core Implant\\\",\\n    \\\"Embedded Netburner Module Core V2 Upgrade\\\",\\n    \\\"PC Direct-Neural Interface\\\",\\n    \\\"PC Direct-Neural Interface Optimization Submodule\\\",\\n    \\\"HyperSight Corneal Implant\\\",\\n    \\\"Neotra\\\"\\n  ],\\n  \\\"NWO\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Synthetic Heart\\\",\\n    \\\"Synfibril Muscle\\\",\\n    \\\"Enhanced Social Interaction Implant\\\",\\n    \\\"Embedded Netburner Module\\\",\\n    \\\"Embedded Netburner Module Core Implant\\\",\\n    \\\"Embedded Netburner Module Core V2 Upgrade\\\",\\n    \\\"Embedded Netburner Module Core V3 Upgrade\\\",\\n    \\\"Embedded Netburner Module Analyze Engine\\\",\\n    \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\n    \\\"ADR-V1 Pheromone Gene\\\",\\n    \\\"Neurotrainer III\\\",\\n    \\\"Power Recirculation Core\\\",\\n    \\\"Xanipher\\\",\\n    \\\"Hydroflame Left Arm\\\"\\n  ],\\n  \\\"Clarke Incorporated\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Enhanced Social Interaction Implant\\\",\\n    \\\"Neuralstimulator\\\",\\n    \\\"Neuronal Densification\\\",\\n    \\\"Nuoptimal Nootropic Injector Implant\\\",\\n    \\\"Speech Enhancement\\\",\\n    \\\"FocusWire\\\",\\n    \\\"ADR-V2 Pheromone Gene\\\",\\n    \\\"nextSENS Gene Modification\\\"\\n  ],\\n  \\\"OmniTek Incorporated\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Augmented Targeting I\\\",\\n    \\\"Augmented Targeting II\\\",\\n    \\\"Augmented Targeting III\\\",\\n    \\\"Combat Rib I\\\",\\n    \\\"Combat Rib II\\\",\\n    \\\"Combat Rib III\\\",\\n    \\\"Nanofiber Weave\\\",\\n    \\\"Bionic Spine\\\",\\n    \\\"Bionic Legs\\\",\\n    \\\"Enhanced Social Interaction Implant\\\",\\n    \\\"Embedded Netburner Module Core V2 Upgrade\\\",\\n    \\\"PC Direct-Neural Interface\\\",\\n    \\\"OmniTek InfoLoad\\\"\\n  ],\\n  \\\"Four Sigma\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Enhanced Social Interaction Implant\\\",\\n    \\\"Neuralstimulator\\\",\\n    \\\"Nuoptimal Nootropic Injector Implant\\\",\\n    \\\"Speech Enhancement\\\",\\n    \\\"FocusWire\\\",\\n    \\\"PC Direct-Neural Interface\\\",\\n    \\\"ADR-V1 Pheromone Gene\\\",\\n    \\\"ADR-V2 Pheromone Gene\\\",\\n    \\\"Neurotrainer III\\\"\\n  ],\\n  \\\"KuaiGong International\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Augmented Targeting I\\\",\\n    \\\"Augmented Targeting II\\\",\\n    \\\"Augmented Targeting III\\\",\\n    \\\"Synthetic Heart\\\",\\n    \\\"Synfibril Muscle\\\",\\n    \\\"Combat Rib I\\\",\\n    \\\"Combat Rib II\\\",\\n    \\\"Combat Rib III\\\",\\n    \\\"Bionic Spine\\\",\\n    \\\"Bionic Legs\\\",\\n    \\\"Embedded Netburner Module Core V2 Upgrade\\\",\\n    \\\"Speech Enhancement\\\",\\n    \\\"FocusWire\\\",\\n    \\\"HyperSight Corneal Implant\\\",\\n    \\\"Photosynthetic Cells\\\"\\n  ],\\n  \\\"Fulcrum Secret Technologies\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Synthetic Heart\\\",\\n    \\\"Synfibril Muscle\\\",\\n    \\\"Nanofiber Weave\\\",\\n    \\\"NEMEAN Subdermal Weave\\\",\\n    \\\"Graphene Bone Lacings\\\",\\n    \\\"Graphene Bionic Spine Upgrade\\\",\\n    \\\"Graphene Bionic Legs Upgrade\\\",\\n    \\\"Artificial Bio-neural Network Implant\\\",\\n    \\\"Enhanced Myelin Sheathing\\\",\\n    \\\"Embedded Netburner Module\\\",\\n    \\\"Embedded Netburner Module Core Implant\\\",\\n    \\\"Embedded Netburner Module Core V2 Upgrade\\\",\\n    \\\"Embedded Netburner Module Core V3 Upgrade\\\",\\n    \\\"Embedded Netburner Module Analyze Engine\\\",\\n    \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\n    \\\"PC Direct-Neural Interface Optimization Submodule\\\",\\n    \\\"PC Direct-Neural Interface NeuroNet Injector\\\"\\n  ],\\n  \\\"BitRunners\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Artificial Bio-neural Network Implant\\\",\\n    \\\"Enhanced Myelin Sheathing\\\",\\n    \\\"DataJack\\\",\\n    \\\"Embedded Netburner Module\\\",\\n    \\\"Embedded Netburner Module Core Implant\\\",\\n    \\\"Embedded Netburner Module Core V2 Upgrade\\\",\\n    \\\"Neural Accelerator\\\",\\n    \\\"Cranial Signal Processors - Gen III\\\",\\n    \\\"Cranial Signal Processors - Gen IV\\\",\\n    \\\"Cranial Signal Processors - Gen V\\\",\\n    \\\"Neurotrainer II\\\",\\n    \\\"BitRunners Neurolink\\\"\\n  ],\\n  \\\"The Black Hand\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Artificial Synaptic Potentiation\\\",\\n    \\\"Enhanced Myelin Sheathing\\\",\\n    \\\"DataJack\\\",\\n    \\\"Embedded Netburner Module\\\",\\n    \\\"Embedded Netburner Module Core Implant\\\",\\n    \\\"Neuralstimulator\\\",\\n    \\\"Cranial Signal Processors - Gen III\\\",\\n    \\\"Cranial Signal Processors - Gen IV\\\",\\n    \\\"The Black Hand\\\"\\n  ],\\n  \\\"NiteSec\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"BitWire\\\",\\n    \\\"Artificial Synaptic Potentiation\\\",\\n    \\\"Neural-Retention Enhancement\\\",\\n    \\\"DataJack\\\",\\n    \\\"Embedded Netburner Module\\\",\\n    \\\"Cranial Signal Processors - Gen I\\\",\\n    \\\"Cranial Signal Processors - Gen II\\\",\\n    \\\"Cranial Signal Processors - Gen III\\\",\\n    \\\"Neurotrainer II\\\",\\n    \\\"CRTX42-AA Gene Modification\\\"\\n  ],\\n  \\\"Aevum\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Wired Reflexes\\\",\\n    \\\"Speech Processor Implant\\\",\\n    \\\"Synaptic Enhancement Implant\\\",\\n    \\\"Neuralstimulator\\\",\\n    \\\"Neurotrainer I\\\",\\n    \\\"PCMatrix\\\"\\n  ],\\n  \\\"Chongqing\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Speech Processor Implant\\\",\\n    \\\"DataJack\\\",\\n    \\\"Neuralstimulator\\\",\\n    \\\"Nuoptimal Nootropic Injector Implant\\\",\\n    \\\"Neuregen Gene Modification\\\"\\n  ],\\n  \\\"Ishima\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Augmented Targeting I\\\",\\n    \\\"Combat Rib I\\\",\\n    \\\"Wired Reflexes\\\",\\n    \\\"Speech Processor Implant\\\",\\n    \\\"Neuralstimulator\\\",\\n    \\\"INFRARET Enhancement\\\"\\n  ],\\n  \\\"New Tokyo\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Speech Processor Implant\\\",\\n    \\\"DataJack\\\",\\n    \\\"Neuralstimulator\\\",\\n    \\\"Nuoptimal Nootropic Injector Implant\\\",\\n    \\\"NutriGen Implant\\\"\\n  ],\\n  \\\"Sector-12\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Augmented Targeting I\\\",\\n    \\\"Augmented Targeting II\\\",\\n    \\\"Wired Reflexes\\\",\\n    \\\"Speech Processor Implant\\\",\\n    \\\"Neuralstimulator\\\",\\n    \\\"CashRoot Starter Kit\\\"\\n  ],\\n  \\\"Volhaven\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Combat Rib I\\\",\\n    \\\"Combat Rib II\\\",\\n    \\\"Wired Reflexes\\\",\\n    \\\"Speech Processor Implant\\\",\\n    \\\"Neuralstimulator\\\",\\n    \\\"Nuoptimal Nootropic Injector Implant\\\",\\n    \\\"DermaForce Particle Barrier\\\"\\n  ],\\n  \\\"Speakers for the Dead\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Unstable Circadian Modulator\\\",\\n    \\\"Synthetic Heart\\\",\\n    \\\"Synfibril Muscle\\\",\\n    \\\"Nanofiber Weave\\\",\\n    \\\"Wired Reflexes\\\",\\n    \\\"Bionic Spine\\\",\\n    \\\"Bionic Legs\\\",\\n    \\\"Speech Enhancement\\\",\\n    \\\"The Shadow's Simulacrum\\\",\\n    \\\"Graphene BrachiBlades Upgrade\\\"\\n  ],\\n  \\\"The Dark Army\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"HemoRecirculator\\\",\\n    \\\"Augmented Targeting I\\\",\\n    \\\"Augmented Targeting II\\\",\\n    \\\"Augmented Targeting III\\\",\\n    \\\"Combat Rib I\\\",\\n    \\\"Combat Rib II\\\",\\n    \\\"Combat Rib III\\\",\\n    \\\"Nanofiber Weave\\\",\\n    \\\"Wired Reflexes\\\",\\n    \\\"The Shadow's Simulacrum\\\",\\n    \\\"Power Recirculation Core\\\",\\n    \\\"Graphene Bionic Arms Upgrade\\\"\\n  ],\\n  \\\"The Syndicate\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"HemoRecirculator\\\",\\n    \\\"Augmented Targeting I\\\",\\n    \\\"Augmented Targeting II\\\",\\n    \\\"Augmented Targeting III\\\",\\n    \\\"Combat Rib I\\\",\\n    \\\"Combat Rib II\\\",\\n    \\\"Combat Rib III\\\",\\n    \\\"Nanofiber Weave\\\",\\n    \\\"NEMEAN Subdermal Weave\\\",\\n    \\\"Wired Reflexes\\\",\\n    \\\"Bionic Spine\\\",\\n    \\\"Bionic Legs\\\",\\n    \\\"ADR-V1 Pheromone Gene\\\",\\n    \\\"The Shadow's Simulacrum\\\",\\n    \\\"Power Recirculation Core\\\",\\n    \\\"BrachiBlades\\\"\\n  ],\\n  \\\"Silhouette\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Speech Processor Implant\\\",\\n    \\\"TITN-41 Gene-Modification Injection\\\",\\n    \\\"ADR-V2 Pheromone Gene\\\"\\n  ],\\n  \\\"Tetrads\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"HemoRecirculator\\\",\\n    \\\"LuminCloaking-V1 Skin Implant\\\",\\n    \\\"LuminCloaking-V2 Skin Implant\\\",\\n    \\\"Power Recirculation Core\\\",\\n    \\\"Bionic Arms\\\"\\n  ],\\n  \\\"Slum Snakes\\\": [\\n    \\\"HemoRecirculator\\\",\\n    \\\"Augmented Targeting I\\\",\\n    \\\"Augmented Targeting II\\\",\\n    \\\"Augmented Targeting III\\\",\\n    \\\"Synthetic Heart\\\",\\n    \\\"Synfibril Muscle\\\",\\n    \\\"Combat Rib I\\\",\\n    \\\"Combat Rib II\\\",\\n    \\\"Combat Rib III\\\",\\n    \\\"Nanofiber Weave\\\",\\n    \\\"NEMEAN Subdermal Weave\\\",\\n    \\\"Wired Reflexes\\\",\\n    \\\"Graphene Bone Lacings\\\",\\n    \\\"Bionic Spine\\\",\\n    \\\"Graphene Bionic Spine Upgrade\\\",\\n    \\\"Bionic Legs\\\",\\n    \\\"Graphene Bionic Legs Upgrade\\\",\\n    \\\"Speech Processor Implant\\\",\\n    \\\"Enhanced Social Interaction Implant\\\",\\n    \\\"BitWire\\\",\\n    \\\"Artificial Bio-neural Network Implant\\\",\\n    \\\"Artificial Synaptic Potentiation\\\",\\n    \\\"Enhanced Myelin Sheathing\\\",\\n    \\\"Synaptic Enhancement Implant\\\",\\n    \\\"DataJack\\\",\\n    \\\"Embedded Netburner Module\\\",\\n    \\\"Embedded Netburner Module Core Implant\\\",\\n    \\\"Embedded Netburner Module Core V2 Upgrade\\\",\\n    \\\"Embedded Netburner Module Core V3 Upgrade\\\",\\n    \\\"Embedded Netburner Module Analyze Engine\\\",\\n    \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\n    \\\"Neuralstimulator\\\",\\n    \\\"Cranial Signal Processors - Gen I\\\",\\n    \\\"Cranial Signal Processors - Gen II\\\",\\n    \\\"Cranial Signal Processors - Gen III\\\",\\n    \\\"Cranial Signal Processors - Gen IV\\\",\\n    \\\"Nuoptimal Nootropic Injector Implant\\\",\\n    \\\"Speech Enhancement\\\",\\n    \\\"FocusWire\\\",\\n    \\\"PC Direct-Neural Interface\\\",\\n    \\\"PC Direct-Neural Interface Optimization Submodule\\\",\\n    \\\"ADR-V1 Pheromone Gene\\\",\\n    \\\"ADR-V2 Pheromone Gene\\\",\\n    \\\"The Shadow's Simulacrum\\\",\\n    \\\"Hacknet Node CPU Architecture Neural-Upload\\\",\\n    \\\"Neurotrainer I\\\",\\n    \\\"Neurotrainer II\\\",\\n    \\\"Neurotrainer III\\\",\\n    \\\"HyperSight Corneal Implant\\\",\\n    \\\"LuminCloaking-V1 Skin Implant\\\",\\n    \\\"LuminCloaking-V2 Skin Implant\\\",\\n    \\\"SmartSonar Implant\\\",\\n    \\\"Power Recirculation Core\\\",\\n    \\\"QLink\\\",\\n    \\\"Neotra\\\",\\n    \\\"OmniTek InfoLoad\\\",\\n    \\\"Photosynthetic Cells\\\",\\n    \\\"Neuregen Gene Modification\\\",\\n    \\\"CashRoot Starter Kit\\\",\\n    \\\"PCMatrix\\\"\\n  ],\\n  \\\"Netburners\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Hacknet Node CPU Architecture Neural-Upload\\\",\\n    \\\"Hacknet Node Cache Architecture Neural-Upload\\\",\\n    \\\"Hacknet Node NIC Architecture Neural-Upload\\\",\\n    \\\"Hacknet Node Kernel Direct-Neural Interface\\\",\\n    \\\"Hacknet Node Core Direct-Neural Interface\\\"\\n  ],\\n  \\\"Tian Di Hui\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"Nanofiber Weave\\\",\\n    \\\"Wired Reflexes\\\",\\n    \\\"Speech Processor Implant\\\",\\n    \\\"Nuoptimal Nootropic Injector Implant\\\",\\n    \\\"Speech Enhancement\\\",\\n    \\\"ADR-V1 Pheromone Gene\\\",\\n    \\\"Social Negotiation Assistant (S.N.A)\\\",\\n    \\\"Neuroreceptor Management Implant\\\"\\n  ],\\n  \\\"CyberSec\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"BitWire\\\",\\n    \\\"Synaptic Enhancement Implant\\\",\\n    \\\"Cranial Signal Processors - Gen I\\\",\\n    \\\"Cranial Signal Processors - Gen II\\\",\\n    \\\"Neurotrainer I\\\"\\n  ],\\n  \\\"Bladeburners\\\": [\\n    \\\"NeuroFlux Governor\\\",\\n    \\\"EsperTech Bladeburner Eyewear\\\",\\n    \\\"EMS-4 Recombination\\\",\\n    \\\"ORION-MKIV Shoulder\\\",\\n    \\\"Hyperion Plasma Cannon V1\\\",\\n    \\\"Hyperion Plasma Cannon V2\\\",\\n    \\\"GOLEM Serum\\\",\\n    \\\"Vangelis Virus\\\",\\n    \\\"Vangelis Virus 3.0\\\",\\n    \\\"I.N.T.E.R.L.I.N.K.E.D\\\",\\n    \\\"Blade's Runners\\\",\\n    \\\"BLADE-51b Tesla Armor\\\",\\n    \\\"BLADE-51b Tesla Armor: Power Cells Upgrade\\\",\\n    \\\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\\\",\\n    \\\"BLADE-51b Tesla Armor: Unibeam Upgrade\\\",\\n    \\\"BLADE-51b Tesla Armor: Omnibeam Upgrade\\\",\\n    \\\"BLADE-51b Tesla Armor: IPU Upgrade\\\",\\n    \\\"The Blade's Simulacrum\\\"\\n  ]\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/getOwnedAugmentations.txt\",\"text\":\"[\\n  \\\"Wired Reflexes\\\",\\n  \\\"Neurotrainer I\\\",\\n  \\\"ADR-V1 Pheromone Gene\\\",\\n  \\\"Augmented Targeting I\\\",\\n  \\\"Speech Enhancement\\\",\\n  \\\"LuminCloaking-V1 Skin Implant\\\",\\n  \\\"LuminCloaking-V2 Skin Implant\\\",\\n  \\\"Combat Rib I\\\",\\n  \\\"NeuroFlux Governor\\\",\\n  \\\"ADR-V2 Pheromone Gene\\\",\\n  \\\"The Shadow's Simulacrum\\\",\\n  \\\"Power Recirculation Core\\\",\\n  \\\"Bionic Legs\\\",\\n  \\\"Neurotrainer III\\\",\\n  \\\"CashRoot Starter Kit\\\",\\n  \\\"Bionic Spine\\\",\\n  \\\"SmartSonar Implant\\\",\\n  \\\"BLADE-51b Tesla Armor\\\",\\n  \\\"ORION-MKIV Shoulder\\\",\\n  \\\"EMS-4 Recombination\\\",\\n  \\\"EsperTech Bladeburner Eyewear\\\",\\n  \\\"Nanofiber Weave\\\",\\n  \\\"Combat Rib II\\\",\\n  \\\"Augmented Targeting II\\\",\\n  \\\"Augmented Targeting III\\\",\\n  \\\"Neurotrainer II\\\",\\n  \\\"HemoRecirculator\\\",\\n  \\\"Graphene Bionic Legs Upgrade\\\",\\n  \\\"Synthetic Heart\\\",\\n  \\\"Photosynthetic Cells\\\",\\n  \\\"HyperSight Corneal Implant\\\",\\n  \\\"Synfibril Muscle\\\",\\n  \\\"FocusWire\\\",\\n  \\\"Combat Rib III\\\",\\n  \\\"Speech Processor Implant\\\",\\n  \\\"Nuoptimal Nootropic Injector Implant\\\",\\n  \\\"Social Negotiation Assistant (S.N.A)\\\"\\n]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/augRepReq.txt\",\"text\":\"{\\n  \\\"NeuroFlux Governor\\\": 2746.2057473022355,\\n  \\\"Synthetic Heart\\\": 750000,\\n  \\\"Synfibril Muscle\\\": 437500,\\n  \\\"NEMEAN Subdermal Weave\\\": 875000,\\n  \\\"Embedded Netburner Module Core V3 Upgrade\\\": 1750000,\\n  \\\"Embedded Netburner Module Analyze Engine\\\": 625000,\\n  \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\": 1000000,\\n  \\\"QLink\\\": 1875000,\\n  \\\"The Red Pill\\\": 2500000,\\n  \\\"Augmented Targeting III\\\": 27500,\\n  \\\"Combat Rib III\\\": 35000,\\n  \\\"Graphene Bone Lacings\\\": 1125000,\\n  \\\"SPTN-97 Gene Modification\\\": 1250000,\\n  \\\"Graphene Bionic Spine Upgrade\\\": 1625000,\\n  \\\"Graphene Bionic Legs Upgrade\\\": 750000,\\n  \\\"Embedded Netburner Module\\\": 15000,\\n  \\\"Embedded Netburner Module Core Implant\\\": 175000,\\n  \\\"Embedded Netburner Module Core V2 Upgrade\\\": 1000000,\\n  \\\"PC Direct-Neural Interface\\\": 375000,\\n  \\\"PC Direct-Neural Interface Optimization Submodule\\\": 500000,\\n  \\\"ECorp HVMind Implant\\\": 1500000,\\n  \\\"ADR-V1 Pheromone Gene\\\": 3750,\\n  \\\"CordiARC Fusion Reactor\\\": 1125000,\\n  \\\"Enhanced Social Interaction Implant\\\": 375000,\\n  \\\"Neuralstimulator\\\": 50000,\\n  \\\"Nuoptimal Nootropic Injector Implant\\\": 5000,\\n  \\\"Speech Enhancement\\\": 2500,\\n  \\\"FocusWire\\\": 75000,\\n  \\\"ADR-V2 Pheromone Gene\\\": 62500,\\n  \\\"SmartJaw\\\": 375000,\\n  \\\"Augmented Targeting I\\\": 5000,\\n  \\\"Augmented Targeting II\\\": 8750,\\n  \\\"Combat Rib I\\\": 7500,\\n  \\\"Combat Rib II\\\": 18750,\\n  \\\"Nanofiber Weave\\\": 37500,\\n  \\\"Bionic Spine\\\": 45000,\\n  \\\"Bionic Legs\\\": 150000,\\n  \\\"HyperSight Corneal Implant\\\": 150000,\\n  \\\"Neotra\\\": 562500,\\n  \\\"Neurotrainer III\\\": 25000,\\n  \\\"Power Recirculation Core\\\": 25000,\\n  \\\"Xanipher\\\": 875000,\\n  \\\"Hydroflame Left Arm\\\": 1250000,\\n  \\\"Neuronal Densification\\\": 187500,\\n  \\\"nextSENS Gene Modification\\\": 437500,\\n  \\\"OmniTek InfoLoad\\\": 625000,\\n  \\\"Photosynthetic Cells\\\": 562500,\\n  \\\"Artificial Bio-neural Network Implant\\\": 275000,\\n  \\\"Enhanced Myelin Sheathing\\\": 100000,\\n  \\\"PC Direct-Neural Interface NeuroNet Injector\\\": 1500000,\\n  \\\"DataJack\\\": 112500,\\n  \\\"Neural Accelerator\\\": 200000,\\n  \\\"Cranial Signal Processors - Gen III\\\": 50000,\\n  \\\"Cranial Signal Processors - Gen IV\\\": 125000,\\n  \\\"Cranial Signal Processors - Gen V\\\": 250000,\\n  \\\"Neurotrainer II\\\": 10000,\\n  \\\"BitRunners Neurolink\\\": 875000,\\n  \\\"Artificial Synaptic Potentiation\\\": 6250,\\n  \\\"The Black Hand\\\": 100000,\\n  \\\"BitWire\\\": 3750,\\n  \\\"Neural-Retention Enhancement\\\": 20000,\\n  \\\"Cranial Signal Processors - Gen I\\\": 10000,\\n  \\\"Cranial Signal Processors - Gen II\\\": 18750,\\n  \\\"CRTX42-AA Gene Modification\\\": 45000,\\n  \\\"Wired Reflexes\\\": 1250,\\n  \\\"Speech Processor Implant\\\": 7500,\\n  \\\"Synaptic Enhancement Implant\\\": 2000,\\n  \\\"Neurotrainer I\\\": 1000,\\n  \\\"PCMatrix\\\": 100000,\\n  \\\"Neuregen Gene Modification\\\": 37500,\\n  \\\"INFRARET Enhancement\\\": 7500,\\n  \\\"NutriGen Implant\\\": 6250,\\n  \\\"CashRoot Starter Kit\\\": 12500,\\n  \\\"DermaForce Particle Barrier\\\": 15000,\\n  \\\"Unstable Circadian Modulator\\\": 362500,\\n  \\\"The Shadow's Simulacrum\\\": 37500,\\n  \\\"Graphene BrachiBlades Upgrade\\\": 225000,\\n  \\\"HemoRecirculator\\\": 10000,\\n  \\\"Graphene Bionic Arms Upgrade\\\": 500000,\\n  \\\"BrachiBlades\\\": 12500,\\n  \\\"TITN-41 Gene-Modification Injection\\\": 25000,\\n  \\\"LuminCloaking-V1 Skin Implant\\\": 1500,\\n  \\\"LuminCloaking-V2 Skin Implant\\\": 5000,\\n  \\\"Bionic Arms\\\": 62500,\\n  \\\"Hacknet Node CPU Architecture Neural-Upload\\\": 3750,\\n  \\\"SmartSonar Implant\\\": 22500,\\n  \\\"Hacknet Node Cache Architecture Neural-Upload\\\": 2500,\\n  \\\"Hacknet Node NIC Architecture Neural-Upload\\\": 1875,\\n  \\\"Hacknet Node Kernel Direct-Neural Interface\\\": 7500,\\n  \\\"Hacknet Node Core Direct-Neural Interface\\\": 12500,\\n  \\\"Social Negotiation Assistant (S.N.A)\\\": 6250,\\n  \\\"Neuroreceptor Management Implant\\\": 75000,\\n  \\\"EsperTech Bladeburner Eyewear\\\": 1250,\\n  \\\"EMS-4 Recombination\\\": 2500,\\n  \\\"ORION-MKIV Shoulder\\\": 6250,\\n  \\\"Hyperion Plasma Cannon V1\\\": 12500,\\n  \\\"Hyperion Plasma Cannon V2\\\": 25000,\\n  \\\"GOLEM Serum\\\": 31250,\\n  \\\"Vangelis Virus\\\": 18750,\\n  \\\"Vangelis Virus 3.0\\\": 37500,\\n  \\\"I.N.T.E.R.L.I.N.K.E.D\\\": 25000,\\n  \\\"Blade's Runners\\\": 20000,\\n  \\\"BLADE-51b Tesla Armor\\\": 12500,\\n  \\\"BLADE-51b Tesla Armor: Power Cells Upgrade\\\": 18750,\\n  \\\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\\\": 21250,\\n  \\\"BLADE-51b Tesla Armor: Unibeam Upgrade\\\": 31250,\\n  \\\"BLADE-51b Tesla Armor: Omnibeam Upgrade\\\": 62500,\\n  \\\"BLADE-51b Tesla Armor: IPU Upgrade\\\": 15000,\\n  \\\"The Blade's Simulacrum\\\": 1250\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/augStats.txt\",\"text\":\"{\\n  \\\"NeuroFlux Governor\\\": {\\n    \\\"hacking_mult\\\": 1.01000004,\\n    \\\"strength_mult\\\": 1.01000004,\\n    \\\"defense_mult\\\": 1.01000004,\\n    \\\"dexterity_mult\\\": 1.01000004,\\n    \\\"agility_mult\\\": 1.01000004,\\n    \\\"charisma_mult\\\": 1.01000004,\\n    \\\"hacking_exp_mult\\\": 1.01000004,\\n    \\\"strength_exp_mult\\\": 1.01000004,\\n    \\\"defense_exp_mult\\\": 1.01000004,\\n    \\\"dexterity_exp_mult\\\": 1.01000004,\\n    \\\"agility_exp_mult\\\": 1.01000004,\\n    \\\"charisma_exp_mult\\\": 1.01000004,\\n    \\\"hacking_chance_mult\\\": 1.01000004,\\n    \\\"hacking_speed_mult\\\": 1.01000004,\\n    \\\"hacking_money_mult\\\": 1.01000004,\\n    \\\"hacking_grow_mult\\\": 1.01000004,\\n    \\\"company_rep_mult\\\": 1.01000004,\\n    \\\"faction_rep_mult\\\": 1.01000004,\\n    \\\"crime_money_mult\\\": 1.01000004,\\n    \\\"crime_success_mult\\\": 1.01000004,\\n    \\\"work_money_mult\\\": 1.01000004,\\n    \\\"hacknet_node_money_mult\\\": 1.01000004,\\n    \\\"hacknet_node_purchase_cost_mult\\\": 0.9900989706891496,\\n    \\\"hacknet_node_ram_cost_mult\\\": 0.9900989706891496,\\n    \\\"hacknet_node_core_cost_mult\\\": 0.9900989706891496,\\n    \\\"hacknet_node_level_cost_mult\\\": 0.9900989706891496\\n  },\\n  \\\"Synthetic Heart\\\": {\\n    \\\"strength_mult\\\": 1.5,\\n    \\\"agility_mult\\\": 1.5\\n  },\\n  \\\"Synfibril Muscle\\\": {\\n    \\\"strength_mult\\\": 1.3,\\n    \\\"defense_mult\\\": 1.3\\n  },\\n  \\\"NEMEAN Subdermal Weave\\\": {\\n    \\\"defense_mult\\\": 2.2\\n  },\\n  \\\"Embedded Netburner Module Core V3 Upgrade\\\": {\\n    \\\"hacking_mult\\\": 1.1,\\n    \\\"hacking_exp_mult\\\": 1.25,\\n    \\\"hacking_chance_mult\\\": 1.1,\\n    \\\"hacking_speed_mult\\\": 1.05,\\n    \\\"hacking_money_mult\\\": 1.4\\n  },\\n  \\\"Embedded Netburner Module Analyze Engine\\\": {\\n    \\\"hacking_speed_mult\\\": 1.1\\n  },\\n  \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\": {\\n    \\\"hacking_chance_mult\\\": 1.2,\\n    \\\"hacking_money_mult\\\": 1.4\\n  },\\n  \\\"QLink\\\": {\\n    \\\"hacking_mult\\\": 1.75,\\n    \\\"hacking_chance_mult\\\": 2.5,\\n    \\\"hacking_speed_mult\\\": 2,\\n    \\\"hacking_money_mult\\\": 4\\n  },\\n  \\\"The Red Pill\\\": {},\\n  \\\"Augmented Targeting III\\\": {\\n    \\\"dexterity_mult\\\": 1.3\\n  },\\n  \\\"Combat Rib III\\\": {\\n    \\\"strength_mult\\\": 1.18,\\n    \\\"defense_mult\\\": 1.18\\n  },\\n  \\\"Graphene Bone Lacings\\\": {\\n    \\\"strength_mult\\\": 1.7,\\n    \\\"defense_mult\\\": 1.7\\n  },\\n  \\\"SPTN-97 Gene Modification\\\": {\\n    \\\"hacking_mult\\\": 1.15,\\n    \\\"strength_mult\\\": 1.75,\\n    \\\"defense_mult\\\": 1.75,\\n    \\\"dexterity_mult\\\": 1.75,\\n    \\\"agility_mult\\\": 1.75\\n  },\\n  \\\"Graphene Bionic Spine Upgrade\\\": {\\n    \\\"strength_mult\\\": 1.6,\\n    \\\"defense_mult\\\": 1.6,\\n    \\\"dexterity_mult\\\": 1.6,\\n    \\\"agility_mult\\\": 1.6\\n  },\\n  \\\"Graphene Bionic Legs Upgrade\\\": {\\n    \\\"agility_mult\\\": 2.5\\n  },\\n  \\\"Embedded Netburner Module\\\": {\\n    \\\"hacking_mult\\\": 1.08\\n  },\\n  \\\"Embedded Netburner Module Core Implant\\\": {\\n    \\\"hacking_mult\\\": 1.07,\\n    \\\"hacking_exp_mult\\\": 1.07,\\n    \\\"hacking_chance_mult\\\": 1.03,\\n    \\\"hacking_speed_mult\\\": 1.03,\\n    \\\"hacking_money_mult\\\": 1.1\\n  },\\n  \\\"Embedded Netburner Module Core V2 Upgrade\\\": {\\n    \\\"hacking_mult\\\": 1.08,\\n    \\\"hacking_exp_mult\\\": 1.15,\\n    \\\"hacking_chance_mult\\\": 1.05,\\n    \\\"hacking_speed_mult\\\": 1.05,\\n    \\\"hacking_money_mult\\\": 1.3\\n  },\\n  \\\"PC Direct-Neural Interface\\\": {\\n    \\\"hacking_mult\\\": 1.08,\\n    \\\"company_rep_mult\\\": 1.3\\n  },\\n  \\\"PC Direct-Neural Interface Optimization Submodule\\\": {\\n    \\\"hacking_mult\\\": 1.1,\\n    \\\"company_rep_mult\\\": 1.75\\n  },\\n  \\\"ECorp HVMind Implant\\\": {\\n    \\\"hacking_grow_mult\\\": 3\\n  },\\n  \\\"ADR-V1 Pheromone Gene\\\": {\\n    \\\"company_rep_mult\\\": 1.1,\\n    \\\"faction_rep_mult\\\": 1.1\\n  },\\n  \\\"CordiARC Fusion Reactor\\\": {\\n    \\\"strength_mult\\\": 1.35,\\n    \\\"defense_mult\\\": 1.35,\\n    \\\"dexterity_mult\\\": 1.35,\\n    \\\"agility_mult\\\": 1.35,\\n    \\\"strength_exp_mult\\\": 1.35,\\n    \\\"defense_exp_mult\\\": 1.35,\\n    \\\"dexterity_exp_mult\\\": 1.35,\\n    \\\"agility_exp_mult\\\": 1.35\\n  },\\n  \\\"Enhanced Social Interaction Implant\\\": {\\n    \\\"charisma_mult\\\": 1.6,\\n    \\\"charisma_exp_mult\\\": 1.6\\n  },\\n  \\\"Neuralstimulator\\\": {\\n    \\\"hacking_exp_mult\\\": 1.12,\\n    \\\"hacking_chance_mult\\\": 1.1,\\n    \\\"hacking_speed_mult\\\": 1.02\\n  },\\n  \\\"Nuoptimal Nootropic Injector Implant\\\": {\\n    \\\"company_rep_mult\\\": 1.2\\n  },\\n  \\\"Speech Enhancement\\\": {\\n    \\\"charisma_mult\\\": 1.1,\\n    \\\"company_rep_mult\\\": 1.1\\n  },\\n  \\\"FocusWire\\\": {\\n    \\\"hacking_exp_mult\\\": 1.05,\\n    \\\"strength_exp_mult\\\": 1.05,\\n    \\\"defense_exp_mult\\\": 1.05,\\n    \\\"dexterity_exp_mult\\\": 1.05,\\n    \\\"agility_exp_mult\\\": 1.05,\\n    \\\"charisma_exp_mult\\\": 1.05,\\n    \\\"company_rep_mult\\\": 1.1,\\n    \\\"work_money_mult\\\": 1.2\\n  },\\n  \\\"ADR-V2 Pheromone Gene\\\": {\\n    \\\"company_rep_mult\\\": 1.2,\\n    \\\"faction_rep_mult\\\": 1.2\\n  },\\n  \\\"SmartJaw\\\": {\\n    \\\"charisma_mult\\\": 1.5,\\n    \\\"charisma_exp_mult\\\": 1.5,\\n    \\\"company_rep_mult\\\": 1.25,\\n    \\\"faction_rep_mult\\\": 1.25\\n  },\\n  \\\"Augmented Targeting I\\\": {\\n    \\\"dexterity_mult\\\": 1.1\\n  },\\n  \\\"Augmented Targeting II\\\": {\\n    \\\"dexterity_mult\\\": 1.2\\n  },\\n  \\\"Combat Rib I\\\": {\\n    \\\"strength_mult\\\": 1.1,\\n    \\\"defense_mult\\\": 1.1\\n  },\\n  \\\"Combat Rib II\\\": {\\n    \\\"strength_mult\\\": 1.14,\\n    \\\"defense_mult\\\": 1.14\\n  },\\n  \\\"Nanofiber Weave\\\": {\\n    \\\"strength_mult\\\": 1.2,\\n    \\\"defense_mult\\\": 1.2\\n  },\\n  \\\"Bionic Spine\\\": {\\n    \\\"strength_mult\\\": 1.15,\\n    \\\"defense_mult\\\": 1.15,\\n    \\\"dexterity_mult\\\": 1.15,\\n    \\\"agility_mult\\\": 1.15\\n  },\\n  \\\"Bionic Legs\\\": {\\n    \\\"agility_mult\\\": 1.6\\n  },\\n  \\\"HyperSight Corneal Implant\\\": {\\n    \\\"dexterity_mult\\\": 1.4,\\n    \\\"hacking_speed_mult\\\": 1.03,\\n    \\\"hacking_money_mult\\\": 1.1\\n  },\\n  \\\"Neotra\\\": {\\n    \\\"strength_mult\\\": 1.55,\\n    \\\"defense_mult\\\": 1.55\\n  },\\n  \\\"Neurotrainer III\\\": {\\n    \\\"hacking_exp_mult\\\": 1.2,\\n    \\\"strength_exp_mult\\\": 1.2,\\n    \\\"defense_exp_mult\\\": 1.2,\\n    \\\"dexterity_exp_mult\\\": 1.2,\\n    \\\"agility_exp_mult\\\": 1.2,\\n    \\\"charisma_exp_mult\\\": 1.2\\n  },\\n  \\\"Power Recirculation Core\\\": {\\n    \\\"hacking_mult\\\": 1.05,\\n    \\\"strength_mult\\\": 1.05,\\n    \\\"defense_mult\\\": 1.05,\\n    \\\"dexterity_mult\\\": 1.05,\\n    \\\"agility_mult\\\": 1.05,\\n    \\\"charisma_mult\\\": 1.05,\\n    \\\"hacking_exp_mult\\\": 1.1,\\n    \\\"strength_exp_mult\\\": 1.1,\\n    \\\"defense_exp_mult\\\": 1.1,\\n    \\\"dexterity_exp_mult\\\": 1.1,\\n    \\\"agility_exp_mult\\\": 1.1,\\n    \\\"charisma_exp_mult\\\": 1.1\\n  },\\n  \\\"Xanipher\\\": {\\n    \\\"hacking_mult\\\": 1.2,\\n    \\\"strength_mult\\\": 1.2,\\n    \\\"defense_mult\\\": 1.2,\\n    \\\"dexterity_mult\\\": 1.2,\\n    \\\"agility_mult\\\": 1.2,\\n    \\\"charisma_mult\\\": 1.2,\\n    \\\"hacking_exp_mult\\\": 1.15,\\n    \\\"strength_exp_mult\\\": 1.15,\\n    \\\"defense_exp_mult\\\": 1.15,\\n    \\\"dexterity_exp_mult\\\": 1.15,\\n    \\\"agility_exp_mult\\\": 1.15,\\n    \\\"charisma_exp_mult\\\": 1.15\\n  },\\n  \\\"Hydroflame Left Arm\\\": {\\n    \\\"strength_mult\\\": 2.7\\n  },\\n  \\\"Neuronal Densification\\\": {\\n    \\\"hacking_mult\\\": 1.15,\\n    \\\"hacking_exp_mult\\\": 1.1,\\n    \\\"hacking_speed_mult\\\": 1.03\\n  },\\n  \\\"nextSENS Gene Modification\\\": {\\n    \\\"hacking_mult\\\": 1.2,\\n    \\\"strength_mult\\\": 1.2,\\n    \\\"defense_mult\\\": 1.2,\\n    \\\"dexterity_mult\\\": 1.2,\\n    \\\"agility_mult\\\": 1.2,\\n    \\\"charisma_mult\\\": 1.2\\n  },\\n  \\\"OmniTek InfoLoad\\\": {\\n    \\\"hacking_mult\\\": 1.2,\\n    \\\"hacking_exp_mult\\\": 1.25\\n  },\\n  \\\"Photosynthetic Cells\\\": {\\n    \\\"strength_mult\\\": 1.4,\\n    \\\"defense_mult\\\": 1.4,\\n    \\\"agility_mult\\\": 1.4\\n  },\\n  \\\"Artificial Bio-neural Network Implant\\\": {\\n    \\\"hacking_mult\\\": 1.12,\\n    \\\"hacking_speed_mult\\\": 1.03,\\n    \\\"hacking_money_mult\\\": 1.15\\n  },\\n  \\\"Enhanced Myelin Sheathing\\\": {\\n    \\\"hacking_mult\\\": 1.08,\\n    \\\"hacking_exp_mult\\\": 1.1,\\n    \\\"hacking_speed_mult\\\": 1.03\\n  },\\n  \\\"PC Direct-Neural Interface NeuroNet Injector\\\": {\\n    \\\"hacking_mult\\\": 1.1,\\n    \\\"hacking_speed_mult\\\": 1.05,\\n    \\\"company_rep_mult\\\": 2\\n  },\\n  \\\"DataJack\\\": {\\n    \\\"hacking_money_mult\\\": 1.25\\n  },\\n  \\\"Neural Accelerator\\\": {\\n    \\\"hacking_mult\\\": 1.1,\\n    \\\"hacking_exp_mult\\\": 1.15,\\n    \\\"hacking_money_mult\\\": 1.2\\n  },\\n  \\\"Cranial Signal Processors - Gen III\\\": {\\n    \\\"hacking_mult\\\": 1.09,\\n    \\\"hacking_speed_mult\\\": 1.02,\\n    \\\"hacking_money_mult\\\": 1.15\\n  },\\n  \\\"Cranial Signal Processors - Gen IV\\\": {\\n    \\\"hacking_speed_mult\\\": 1.02,\\n    \\\"hacking_money_mult\\\": 1.2,\\n    \\\"hacking_grow_mult\\\": 1.25\\n  },\\n  \\\"Cranial Signal Processors - Gen V\\\": {\\n    \\\"hacking_mult\\\": 1.3,\\n    \\\"hacking_money_mult\\\": 1.25,\\n    \\\"hacking_grow_mult\\\": 1.75\\n  },\\n  \\\"Neurotrainer II\\\": {\\n    \\\"hacking_exp_mult\\\": 1.15,\\n    \\\"strength_exp_mult\\\": 1.15,\\n    \\\"defense_exp_mult\\\": 1.15,\\n    \\\"dexterity_exp_mult\\\": 1.15,\\n    \\\"agility_exp_mult\\\": 1.15,\\n    \\\"charisma_exp_mult\\\": 1.15\\n  },\\n  \\\"BitRunners Neurolink\\\": {\\n    \\\"hacking_mult\\\": 1.15,\\n    \\\"hacking_exp_mult\\\": 1.2,\\n    \\\"hacking_chance_mult\\\": 1.1,\\n    \\\"hacking_speed_mult\\\": 1.05\\n  },\\n  \\\"Artificial Synaptic Potentiation\\\": {\\n    \\\"hacking_exp_mult\\\": 1.05,\\n    \\\"hacking_chance_mult\\\": 1.05,\\n    \\\"hacking_speed_mult\\\": 1.02\\n  },\\n  \\\"The Black Hand\\\": {\\n    \\\"hacking_mult\\\": 1.1,\\n    \\\"strength_mult\\\": 1.15,\\n    \\\"dexterity_mult\\\": 1.15,\\n    \\\"hacking_speed_mult\\\": 1.02,\\n    \\\"hacking_money_mult\\\": 1.1\\n  },\\n  \\\"BitWire\\\": {\\n    \\\"hacking_mult\\\": 1.05\\n  },\\n  \\\"Neural-Retention Enhancement\\\": {\\n    \\\"hacking_exp_mult\\\": 1.25\\n  },\\n  \\\"Cranial Signal Processors - Gen I\\\": {\\n    \\\"hacking_mult\\\": 1.05,\\n    \\\"hacking_speed_mult\\\": 1.01\\n  },\\n  \\\"Cranial Signal Processors - Gen II\\\": {\\n    \\\"hacking_mult\\\": 1.07,\\n    \\\"hacking_chance_mult\\\": 1.05,\\n    \\\"hacking_speed_mult\\\": 1.02\\n  },\\n  \\\"CRTX42-AA Gene Modification\\\": {\\n    \\\"hacking_mult\\\": 1.08,\\n    \\\"hacking_exp_mult\\\": 1.15\\n  },\\n  \\\"Wired Reflexes\\\": {\\n    \\\"dexterity_mult\\\": 1.05,\\n    \\\"agility_mult\\\": 1.05\\n  },\\n  \\\"Speech Processor Implant\\\": {\\n    \\\"charisma_mult\\\": 1.2\\n  },\\n  \\\"Synaptic Enhancement Implant\\\": {\\n    \\\"hacking_speed_mult\\\": 1.03\\n  },\\n  \\\"Neurotrainer I\\\": {\\n    \\\"hacking_exp_mult\\\": 1.1,\\n    \\\"strength_exp_mult\\\": 1.1,\\n    \\\"defense_exp_mult\\\": 1.1,\\n    \\\"dexterity_exp_mult\\\": 1.1,\\n    \\\"agility_exp_mult\\\": 1.1,\\n    \\\"charisma_exp_mult\\\": 1.1\\n  },\\n  \\\"PCMatrix\\\": {\\n    \\\"charisma_mult\\\": 1.0777,\\n    \\\"charisma_exp_mult\\\": 1.0777,\\n    \\\"company_rep_mult\\\": 1.0777,\\n    \\\"faction_rep_mult\\\": 1.0777,\\n    \\\"crime_money_mult\\\": 1.0777,\\n    \\\"crime_success_mult\\\": 1.0777,\\n    \\\"work_money_mult\\\": 1.777\\n  },\\n  \\\"Neuregen Gene Modification\\\": {\\n    \\\"hacking_exp_mult\\\": 1.4\\n  },\\n  \\\"INFRARET Enhancement\\\": {\\n    \\\"dexterity_mult\\\": 1.1,\\n    \\\"crime_money_mult\\\": 1.1,\\n    \\\"crime_success_mult\\\": 1.25\\n  },\\n  \\\"NutriGen Implant\\\": {\\n    \\\"strength_exp_mult\\\": 1.2,\\n    \\\"defense_exp_mult\\\": 1.2,\\n    \\\"dexterity_exp_mult\\\": 1.2,\\n    \\\"agility_exp_mult\\\": 1.2\\n  },\\n  \\\"CashRoot Starter Kit\\\": {},\\n  \\\"DermaForce Particle Barrier\\\": {\\n    \\\"defense_mult\\\": 1.4\\n  },\\n  \\\"Unstable Circadian Modulator\\\": {\\n    \\\"hacknet_node_money_mult\\\": 1.2,\\n    \\\"hacknet_node_purchase_cost_mult\\\": 0.85,\\n    \\\"hacknet_node_ram_cost_mult\\\": 0.85,\\n    \\\"hacknet_node_core_cost_mult\\\": 0.85,\\n    \\\"hacknet_node_level_cost_mult\\\": 0.85\\n  },\\n  \\\"The Shadow's Simulacrum\\\": {\\n    \\\"company_rep_mult\\\": 1.15,\\n    \\\"faction_rep_mult\\\": 1.15\\n  },\\n  \\\"Graphene BrachiBlades Upgrade\\\": {\\n    \\\"strength_mult\\\": 1.4,\\n    \\\"defense_mult\\\": 1.4,\\n    \\\"crime_money_mult\\\": 1.3,\\n    \\\"crime_success_mult\\\": 1.1\\n  },\\n  \\\"HemoRecirculator\\\": {\\n    \\\"strength_mult\\\": 1.08,\\n    \\\"defense_mult\\\": 1.08,\\n    \\\"dexterity_mult\\\": 1.08,\\n    \\\"agility_mult\\\": 1.08\\n  },\\n  \\\"Graphene Bionic Arms Upgrade\\\": {\\n    \\\"strength_mult\\\": 1.85,\\n    \\\"dexterity_mult\\\": 1.85\\n  },\\n  \\\"BrachiBlades\\\": {\\n    \\\"strength_mult\\\": 1.15,\\n    \\\"defense_mult\\\": 1.15,\\n    \\\"crime_money_mult\\\": 1.15,\\n    \\\"crime_success_mult\\\": 1.1\\n  },\\n  \\\"TITN-41 Gene-Modification Injection\\\": {\\n    \\\"charisma_mult\\\": 1.15,\\n    \\\"charisma_exp_mult\\\": 1.15\\n  },\\n  \\\"LuminCloaking-V1 Skin Implant\\\": {\\n    \\\"agility_mult\\\": 1.05,\\n    \\\"crime_money_mult\\\": 1.1\\n  },\\n  \\\"LuminCloaking-V2 Skin Implant\\\": {\\n    \\\"defense_mult\\\": 1.1,\\n    \\\"agility_mult\\\": 1.1,\\n    \\\"crime_money_mult\\\": 1.25\\n  },\\n  \\\"Bionic Arms\\\": {\\n    \\\"strength_mult\\\": 1.3,\\n    \\\"dexterity_mult\\\": 1.3\\n  },\\n  \\\"Hacknet Node CPU Architecture Neural-Upload\\\": {\\n    \\\"hacknet_node_money_mult\\\": 1.15,\\n    \\\"hacknet_node_purchase_cost_mult\\\": 0.85\\n  },\\n  \\\"SmartSonar Implant\\\": {\\n    \\\"dexterity_mult\\\": 1.1,\\n    \\\"dexterity_exp_mult\\\": 1.15,\\n    \\\"crime_money_mult\\\": 1.25\\n  },\\n  \\\"Hacknet Node Cache Architecture Neural-Upload\\\": {\\n    \\\"hacknet_node_money_mult\\\": 1.1,\\n    \\\"hacknet_node_level_cost_mult\\\": 0.85\\n  },\\n  \\\"Hacknet Node NIC Architecture Neural-Upload\\\": {\\n    \\\"hacknet_node_money_mult\\\": 1.1,\\n    \\\"hacknet_node_purchase_cost_mult\\\": 0.9\\n  },\\n  \\\"Hacknet Node Kernel Direct-Neural Interface\\\": {\\n    \\\"hacknet_node_money_mult\\\": 1.25\\n  },\\n  \\\"Hacknet Node Core Direct-Neural Interface\\\": {\\n    \\\"hacknet_node_money_mult\\\": 1.45\\n  },\\n  \\\"Social Negotiation Assistant (S.N.A)\\\": {\\n    \\\"company_rep_mult\\\": 1.15,\\n    \\\"faction_rep_mult\\\": 1.15,\\n    \\\"work_money_mult\\\": 1.1\\n  },\\n  \\\"Neuroreceptor Management Implant\\\": {},\\n  \\\"EsperTech Bladeburner Eyewear\\\": {\\n    \\\"dexterity_mult\\\": 1.05,\\n    \\\"bladeburner_success_chance_mult\\\": 1.03\\n  },\\n  \\\"EMS-4 Recombination\\\": {\\n    \\\"bladeburner_stamina_gain_mult\\\": 1.02,\\n    \\\"bladeburner_analysis_mult\\\": 1.05,\\n    \\\"bladeburner_success_chance_mult\\\": 1.03\\n  },\\n  \\\"ORION-MKIV Shoulder\\\": {\\n    \\\"strength_mult\\\": 1.05,\\n    \\\"defense_mult\\\": 1.05,\\n    \\\"dexterity_mult\\\": 1.05,\\n    \\\"bladeburner_success_chance_mult\\\": 1.04\\n  },\\n  \\\"Hyperion Plasma Cannon V1\\\": {\\n    \\\"bladeburner_success_chance_mult\\\": 1.06\\n  },\\n  \\\"Hyperion Plasma Cannon V2\\\": {\\n    \\\"bladeburner_success_chance_mult\\\": 1.08\\n  },\\n  \\\"GOLEM Serum\\\": {\\n    \\\"strength_mult\\\": 1.07,\\n    \\\"defense_mult\\\": 1.07,\\n    \\\"dexterity_mult\\\": 1.07,\\n    \\\"agility_mult\\\": 1.07,\\n    \\\"bladeburner_stamina_gain_mult\\\": 1.05\\n  },\\n  \\\"Vangelis Virus\\\": {\\n    \\\"dexterity_exp_mult\\\": 1.1,\\n    \\\"bladeburner_analysis_mult\\\": 1.1,\\n    \\\"bladeburner_success_chance_mult\\\": 1.04\\n  },\\n  \\\"Vangelis Virus 3.0\\\": {\\n    \\\"defense_exp_mult\\\": 1.1,\\n    \\\"dexterity_exp_mult\\\": 1.1,\\n    \\\"bladeburner_analysis_mult\\\": 1.15,\\n    \\\"bladeburner_success_chance_mult\\\": 1.05\\n  },\\n  \\\"I.N.T.E.R.L.I.N.K.E.D\\\": {\\n    \\\"strength_exp_mult\\\": 1.05,\\n    \\\"defense_exp_mult\\\": 1.05,\\n    \\\"dexterity_exp_mult\\\": 1.05,\\n    \\\"agility_exp_mult\\\": 1.05,\\n    \\\"bladeburner_max_stamina_mult\\\": 1.1\\n  },\\n  \\\"Blade's Runners\\\": {\\n    \\\"agility_mult\\\": 1.05,\\n    \\\"bladeburner_max_stamina_mult\\\": 1.05,\\n    \\\"bladeburner_stamina_gain_mult\\\": 1.05\\n  },\\n  \\\"BLADE-51b Tesla Armor\\\": {\\n    \\\"strength_mult\\\": 1.04,\\n    \\\"defense_mult\\\": 1.04,\\n    \\\"dexterity_mult\\\": 1.04,\\n    \\\"agility_mult\\\": 1.04,\\n    \\\"bladeburner_stamina_gain_mult\\\": 1.02,\\n    \\\"bladeburner_success_chance_mult\\\": 1.03\\n  },\\n  \\\"BLADE-51b Tesla Armor: Power Cells Upgrade\\\": {\\n    \\\"bladeburner_max_stamina_mult\\\": 1.05,\\n    \\\"bladeburner_stamina_gain_mult\\\": 1.02,\\n    \\\"bladeburner_success_chance_mult\\\": 1.05\\n  },\\n  \\\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\\\": {\\n    \\\"defense_mult\\\": 1.05,\\n    \\\"bladeburner_success_chance_mult\\\": 1.06\\n  },\\n  \\\"BLADE-51b Tesla Armor: Unibeam Upgrade\\\": {\\n    \\\"bladeburner_success_chance_mult\\\": 1.08\\n  },\\n  \\\"BLADE-51b Tesla Armor: Omnibeam Upgrade\\\": {\\n    \\\"bladeburner_success_chance_mult\\\": 1.1\\n  },\\n  \\\"BLADE-51b Tesla Armor: IPU Upgrade\\\": {\\n    \\\"bladeburner_analysis_mult\\\": 1.15,\\n    \\\"bladeburner_success_chance_mult\\\": 1.02\\n  },\\n  \\\"The Blade's Simulacrum\\\": {}\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/sleeves_static.txt\",\"text\":\"{\\\"getNumSleeves\\\":8}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/n00dles.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"n00dles\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"18.0.0.4\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 4,\\n  \\\"organizationName\\\": \\\"Noodle Bar\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 1.5,\\n  \\\"hackDifficulty\\\": 1.5,\\n  \\\"minDifficulty\\\": 1,\\n  \\\"moneyAvailable\\\": 35000,\\n  \\\"moneyMax\\\": 350000,\\n  \\\"numOpenPortsRequired\\\": 0,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1,\\n  \\\"serverGrowth\\\": 3000\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/foodnstuff.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"foodnstuff\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"76.1.7.5\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\"FoodNStuff\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 15,\\n  \\\"hackDifficulty\\\": 15,\\n  \\\"minDifficulty\\\": 5,\\n  \\\"moneyAvailable\\\": 1000000,\\n  \\\"moneyMax\\\": 10000000,\\n  \\\"numOpenPortsRequired\\\": 0,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1,\\n  \\\"serverGrowth\\\": 5\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/nectar-net.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"nectar-net\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"93.9.8.1\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\"Nectar Nightclub Network\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 30,\\n  \\\"hackDifficulty\\\": 30,\\n  \\\"minDifficulty\\\": 10,\\n  \\\"moneyAvailable\\\": 1375000,\\n  \\\"moneyMax\\\": 13750000,\\n  \\\"numOpenPortsRequired\\\": 0,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 20,\\n  \\\"serverGrowth\\\": 25\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/phantasy.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"phantasy\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"40.5.1.6\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"Phantasy Club\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 30,\\n  \\\"hackDifficulty\\\": 30,\\n  \\\"minDifficulty\\\": 10,\\n  \\\"moneyAvailable\\\": 12000000,\\n  \\\"moneyMax\\\": 120000000,\\n  \\\"numOpenPortsRequired\\\": 2,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 100,\\n  \\\"serverGrowth\\\": 35\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/max-hardware.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"max-hardware\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"97.9.3.8\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"Max Hardware Store\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 22.5,\\n  \\\"hackDifficulty\\\": 22.5,\\n  \\\"minDifficulty\\\": 8,\\n  \\\"moneyAvailable\\\": 5000000,\\n  \\\"moneyMax\\\": 50000000,\\n  \\\"numOpenPortsRequired\\\": 1,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 80,\\n  \\\"serverGrowth\\\": 30\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/omega-net.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"omega-net\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"61.8.2.9\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"Omega Software\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 48,\\n  \\\"hackDifficulty\\\": 48,\\n  \\\"minDifficulty\\\": 16,\\n  \\\"moneyAvailable\\\": 33429753,\\n  \\\"moneyMax\\\": 334297530,\\n  \\\"numOpenPortsRequired\\\": 2,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 204,\\n  \\\"serverGrowth\\\": 38\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/the-hub.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"the-hub\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"61.3.8.9\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 64,\\n  \\\"organizationName\\\": \\\"The Hub\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 54,\\n  \\\"hackDifficulty\\\": 54,\\n  \\\"minDifficulty\\\": 18,\\n  \\\"moneyAvailable\\\": 93052746,\\n  \\\"moneyMax\\\": 930527460,\\n  \\\"numOpenPortsRequired\\\": 2,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 316,\\n  \\\"serverGrowth\\\": 50\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/summit-uni.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"summit-uni\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"1.8.2.3\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"Summit University\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 93,\\n  \\\"hackDifficulty\\\": 93,\\n  \\\"minDifficulty\\\": 31,\\n  \\\"moneyAvailable\\\": 131644655.5,\\n  \\\"moneyMax\\\": 1316446555,\\n  \\\"numOpenPortsRequired\\\": 3,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 449,\\n  \\\"serverGrowth\\\": 56\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/catalyst.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"catalyst\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"42.2.6.2\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 128,\\n  \\\"organizationName\\\": \\\"Catalyst Ventures\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 102,\\n  \\\"hackDifficulty\\\": 102,\\n  \\\"minDifficulty\\\": 34,\\n  \\\"moneyAvailable\\\": 204605103,\\n  \\\"moneyMax\\\": 2046051030,\\n  \\\"numOpenPortsRequired\\\": 3,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 425,\\n  \\\"serverGrowth\\\": 46\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/lexo-corp.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"lexo-corp\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"68.9.5.4\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"LexoCorp\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 93,\\n  \\\"hackDifficulty\\\": 93,\\n  \\\"minDifficulty\\\": 31,\\n  \\\"moneyAvailable\\\": 391254834.5,\\n  \\\"moneyMax\\\": 3912548345,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 721,\\n  \\\"serverGrowth\\\": 58\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/global-pharm.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"global-pharm\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"18.6.6.7\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\"Global Pharmaceuticals\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 126,\\n  \\\"hackDifficulty\\\": 126,\\n  \\\"minDifficulty\\\": 42,\\n  \\\"moneyAvailable\\\": 792476728.5,\\n  \\\"moneyMax\\\": 7924767285,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 790,\\n  \\\"serverGrowth\\\": 82\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/omnia.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"omnia\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"39.3.9.6\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"Omnia Cybersystems\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 138,\\n  \\\"hackDifficulty\\\": 138,\\n  \\\"minDifficulty\\\": 46,\\n  \\\"moneyAvailable\\\": 498516752,\\n  \\\"moneyMax\\\": 4985167520,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 931,\\n  \\\"serverGrowth\\\": 69\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/defcomm.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"defcomm\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"82.8.2.5\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"DefComm\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 139.5,\\n  \\\"hackDifficulty\\\": 139.5,\\n  \\\"minDifficulty\\\": 47,\\n  \\\"moneyAvailable\\\": 433583531,\\n  \\\"moneyMax\\\": 4335835310,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 998,\\n  \\\"serverGrowth\\\": 49\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/taiyang-digital.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"taiyang-digital\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"83.1.9.5\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Taiyang Digital\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 115.5,\\n  \\\"hackDifficulty\\\": 115.5,\\n  \\\"minDifficulty\\\": 39,\\n  \\\"moneyAvailable\\\": 446608805,\\n  \\\"moneyMax\\\": 4466088050,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 882,\\n  \\\"serverGrowth\\\": 74\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/microdyne.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"microdyne\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"22.5.8.4\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\"Microdyne Technologies\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 108,\\n  \\\"hackDifficulty\\\": 108,\\n  \\\"minDifficulty\\\": 36,\\n  \\\"moneyAvailable\\\": 311798670.5,\\n  \\\"moneyMax\\\": 3117986705,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 869,\\n  \\\"serverGrowth\\\": 88\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/stormtech.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"stormtech\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"77.2.4.8\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Storm Technologies\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 126,\\n  \\\"hackDifficulty\\\": 126,\\n  \\\"minDifficulty\\\": 42,\\n  \\\"moneyAvailable\\\": 516323394,\\n  \\\"moneyMax\\\": 5163233940,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1020,\\n  \\\"serverGrowth\\\": 71\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/omnitek.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"omnitek\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"83.3.0.9\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 128,\\n  \\\"organizationName\\\": \\\"OmniTek Incorporated\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 138,\\n  \\\"hackDifficulty\\\": 138,\\n  \\\"minDifficulty\\\": 46,\\n  \\\"moneyAvailable\\\": 7582365802,\\n  \\\"moneyMax\\\": 75823658020,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1082,\\n  \\\"serverGrowth\\\": 95\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/kuai-gong.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"kuai-gong\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"30.1.9.8\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"KuaiGong International\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 144,\\n  \\\"hackDifficulty\\\": 144,\\n  \\\"minDifficulty\\\": 48,\\n  \\\"moneyAvailable\\\": 14761118584,\\n  \\\"moneyMax\\\": 147611185840,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1098,\\n  \\\"serverGrowth\\\": 95\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/b-and-a.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"b-and-a\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"76.9.3.7\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Bachman & Associates\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 111,\\n  \\\"hackDifficulty\\\": 111,\\n  \\\"minDifficulty\\\": 37,\\n  \\\"moneyAvailable\\\": 9289519699.5,\\n  \\\"moneyMax\\\": 92895196995,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1067,\\n  \\\"serverGrowth\\\": 77\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/fulcrumassets.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"fulcrumassets\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"0.4.2.1\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Fulcrum Technologies\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 148.5,\\n  \\\"hackDifficulty\\\": 148.5,\\n  \\\"minDifficulty\\\": 50,\\n  \\\"moneyAvailable\\\": 500000,\\n  \\\"moneyMax\\\": 5000000,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1209,\\n  \\\"serverGrowth\\\": 1\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/The-Cave.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"The-Cave\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"51.5.6.8\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Helios\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 0,\\n  \\\"hackDifficulty\\\": 0,\\n  \\\"minDifficulty\\\": 1,\\n  \\\"moneyAvailable\\\": 0,\\n  \\\"moneyMax\\\": 0,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 925,\\n  \\\"serverGrowth\\\": 0\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/powerhouse-fitness.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"powerhouse-fitness\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"9.6.2.7\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 64,\\n  \\\"organizationName\\\": \\\"Powerhouse Fitness\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 90,\\n  \\\"hackDifficulty\\\": 90,\\n  \\\"minDifficulty\\\": 30,\\n  \\\"moneyAvailable\\\": 450000000,\\n  \\\"moneyMax\\\": 4500000000,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1037,\\n  \\\"serverGrowth\\\": 58\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/snap-fitness.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"snap-fitness\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"26.0.8.8\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Snap Fitness\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 75,\\n  \\\"hackDifficulty\\\": 75,\\n  \\\"minDifficulty\\\": 25,\\n  \\\"moneyAvailable\\\": 225000000,\\n  \\\"moneyMax\\\": 2250000000,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 722,\\n  \\\"serverGrowth\\\": 45\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/rho-construction.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"rho-construction\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"74.1.5.0\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\"Rho Construction\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 67.5,\\n  \\\"hackDifficulty\\\": 67.5,\\n  \\\"minDifficulty\\\": 23,\\n  \\\"moneyAvailable\\\": 335318587.5,\\n  \\\"moneyMax\\\": 3353185875,\\n  \\\"numOpenPortsRequired\\\": 3,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 504,\\n  \\\"serverGrowth\\\": 48\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/I_I_I_I.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"I.I.I.I\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"72.2.6.2\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 64,\\n  \\\"organizationName\\\": \\\"I.I.I.I\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 0,\\n  \\\"hackDifficulty\\\": 0,\\n  \\\"minDifficulty\\\": 1,\\n  \\\"moneyAvailable\\\": 0,\\n  \\\"moneyMax\\\": 0,\\n  \\\"numOpenPortsRequired\\\": 3,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 348,\\n  \\\"serverGrowth\\\": 0\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/alpha-ent.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"alpha-ent\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"53.2.2.1\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 128,\\n  \\\"organizationName\\\": \\\"Alpha Enterprises\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 96,\\n  \\\"hackDifficulty\\\": 96,\\n  \\\"minDifficulty\\\": 32,\\n  \\\"moneyAvailable\\\": 312994332,\\n  \\\"moneyMax\\\": 3129943320,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 531,\\n  \\\"serverGrowth\\\": 50\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/galactic-cyber.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"galactic-cyber\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"75.4.9.9\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Galactic Cybersystems\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 94.5,\\n  \\\"hackDifficulty\\\": 94.5,\\n  \\\"minDifficulty\\\": 32,\\n  \\\"moneyAvailable\\\": 415742957.5,\\n  \\\"moneyMax\\\": 4157429575,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 859,\\n  \\\"serverGrowth\\\": 79\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/deltaone.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"deltaone\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"39.3.6.0\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"DeltaOne\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 121.5,\\n  \\\"hackDifficulty\\\": 121.5,\\n  \\\"minDifficulty\\\": 41,\\n  \\\"moneyAvailable\\\": 790423207,\\n  \\\"moneyMax\\\": 7904232070,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 834,\\n  \\\"serverGrowth\\\": 53\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/zeus-med.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"zeus-med\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"24.2.8.3\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Zeus Medical\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 115.5,\\n  \\\"hackDifficulty\\\": 115.5,\\n  \\\"minDifficulty\\\": 39,\\n  \\\"moneyAvailable\\\": 746153521,\\n  \\\"moneyMax\\\": 7461535210,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 831,\\n  \\\"serverGrowth\\\": 74\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/infocomm.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"infocomm\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"29.2.2.0\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"InfoComm\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 117,\\n  \\\"hackDifficulty\\\": 117,\\n  \\\"minDifficulty\\\": 39,\\n  \\\"moneyAvailable\\\": 301099265.5,\\n  \\\"moneyMax\\\": 3010992655,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 935,\\n  \\\"serverGrowth\\\": 59\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/titan-labs.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"titan-labs\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"88.1.0.4\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 128,\\n  \\\"organizationName\\\": \\\"Titan Laboratories\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 105,\\n  \\\"hackDifficulty\\\": 105,\\n  \\\"minDifficulty\\\": 35,\\n  \\\"moneyAvailable\\\": 379470659.5,\\n  \\\"moneyMax\\\": 3794706595,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 842,\\n  \\\"serverGrowth\\\": 74\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/fulcrumtech.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"fulcrumtech\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"21.7.5.0\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 1024,\\n  \\\"organizationName\\\": \\\"Fulcrum Technologies\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 126,\\n  \\\"hackDifficulty\\\": 126,\\n  \\\"minDifficulty\\\": 42,\\n  \\\"moneyAvailable\\\": 740941538.5,\\n  \\\"moneyMax\\\": 7409415385,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1247,\\n  \\\"serverGrowth\\\": 99\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/4sigma.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"4sigma\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"90.8.9.4\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Four Sigma\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 93,\\n  \\\"hackDifficulty\\\": 93,\\n  \\\"minDifficulty\\\": 31,\\n  \\\"moneyAvailable\\\": 7929003959.5,\\n  \\\"moneyMax\\\": 79290039595,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1211,\\n  \\\"serverGrowth\\\": 93\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/blade.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"blade\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"45.4.7.7\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 128,\\n  \\\"organizationName\\\": \\\"Blade Industries\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 145.5,\\n  \\\"hackDifficulty\\\": 145.5,\\n  \\\"minDifficulty\\\": 49,\\n  \\\"moneyAvailable\\\": 7346121658.5,\\n  \\\"moneyMax\\\": 73461216585,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 960,\\n  \\\"serverGrowth\\\": 69\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/nwo.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"nwo\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"30.1.2.0\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"NWO\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 148.5,\\n  \\\"hackDifficulty\\\": 148.5,\\n  \\\"minDifficulty\\\": 50,\\n  \\\"moneyAvailable\\\": 13054820439.5,\\n  \\\"moneyMax\\\": 130548204395,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1220,\\n  \\\"serverGrowth\\\": 92\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/ecorp.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"ecorp\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"63.1.9.2\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"ECorp\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 148.5,\\n  \\\"hackDifficulty\\\": 148.5,\\n  \\\"minDifficulty\\\": 50,\\n  \\\"moneyAvailable\\\": 17794418300,\\n  \\\"moneyMax\\\": 177944183000,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1182,\\n  \\\"serverGrowth\\\": 99\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/clarkinc.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"clarkinc\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"50.9.1.9\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Clarke Incorporated\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 84,\\n  \\\"hackDifficulty\\\": 84,\\n  \\\"minDifficulty\\\": 28,\\n  \\\"moneyAvailable\\\": 11712202836.5,\\n  \\\"moneyMax\\\": 117122028365,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1075,\\n  \\\"serverGrowth\\\": 67\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/megacorp.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"megacorp\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"15.3.6.7\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"MegaCorp\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 148.5,\\n  \\\"hackDifficulty\\\": 148.5,\\n  \\\"minDifficulty\\\": 50,\\n  \\\"moneyAvailable\\\": 29865706653.5,\\n  \\\"moneyMax\\\": 298657066535,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 1208,\\n  \\\"serverGrowth\\\": 99\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/vitalife.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"vitalife\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"47.8.0.2\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\"VitaLife\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 124.5,\\n  \\\"hackDifficulty\\\": 124.5,\\n  \\\"minDifficulty\\\": 42,\\n  \\\"moneyAvailable\\\": 372328837,\\n  \\\"moneyMax\\\": 3723288370,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 782,\\n  \\\"serverGrowth\\\": 75\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/_.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\".\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"87.2.8.6\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\".\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 0,\\n  \\\"hackDifficulty\\\": 0,\\n  \\\"minDifficulty\\\": 1,\\n  \\\"moneyAvailable\\\": 0,\\n  \\\"moneyMax\\\": 0,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 538,\\n  \\\"serverGrowth\\\": 0\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/run4theh111z.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"run4theh111z\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"54.0.1.5\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 512,\\n  \\\"organizationName\\\": \\\"The Runners\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 0,\\n  \\\"hackDifficulty\\\": 0,\\n  \\\"minDifficulty\\\": 1,\\n  \\\"moneyAvailable\\\": 0,\\n  \\\"moneyMax\\\": 0,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 543,\\n  \\\"serverGrowth\\\": 0\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/helios.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"helios\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"6.5.4.7\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 256,\\n  \\\"organizationName\\\": \\\"Helios Labs\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 132,\\n  \\\"hackDifficulty\\\": 132,\\n  \\\"minDifficulty\\\": 44,\\n  \\\"moneyAvailable\\\": 281788412,\\n  \\\"moneyMax\\\": 2817884120,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 850,\\n  \\\"serverGrowth\\\": 77\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/zb-def.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"zb-def\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"87.9.9.1\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"ZB Defense Industries\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 90,\\n  \\\"hackDifficulty\\\": 90,\\n  \\\"minDifficulty\\\": 30,\\n  \\\"moneyAvailable\\\": 533841819,\\n  \\\"moneyMax\\\": 5338418190,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 800,\\n  \\\"serverGrowth\\\": 67\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/applied-energetics.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"applied-energetics\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"42.4.3.0\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Applied Energetics\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 93,\\n  \\\"hackDifficulty\\\": 93,\\n  \\\"minDifficulty\\\": 31,\\n  \\\"moneyAvailable\\\": 488930361.5,\\n  \\\"moneyMax\\\": 4889303615,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 833,\\n  \\\"serverGrowth\\\": 72\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/netlink.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"netlink\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"98.3.9.0\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 128,\\n  \\\"organizationName\\\": \\\"NetLink Technologies\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 106.5,\\n  \\\"hackDifficulty\\\": 106.5,\\n  \\\"minDifficulty\\\": 36,\\n  \\\"moneyAvailable\\\": 137500000,\\n  \\\"moneyMax\\\": 1375000000,\\n  \\\"numOpenPortsRequired\\\": 3,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 404,\\n  \\\"serverGrowth\\\": 46\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/avmnite-02h.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"avmnite-02h\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"68.4.0.9\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 64,\\n  \\\"organizationName\\\": \\\"NiteSec\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 0,\\n  \\\"hackDifficulty\\\": 0,\\n  \\\"minDifficulty\\\": 1,\\n  \\\"moneyAvailable\\\": 0,\\n  \\\"moneyMax\\\": 0,\\n  \\\"numOpenPortsRequired\\\": 2,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 209,\\n  \\\"serverGrowth\\\": 0\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/sigma-cosmetics.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"sigma-cosmetics\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"95.7.0.0\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\"Sigma Cosmetics\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 15,\\n  \\\"hackDifficulty\\\": 15,\\n  \\\"minDifficulty\\\": 5,\\n  \\\"moneyAvailable\\\": 1150000,\\n  \\\"moneyMax\\\": 11500000,\\n  \\\"numOpenPortsRequired\\\": 0,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 5,\\n  \\\"serverGrowth\\\": 10\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/joesguns.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"joesguns\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"83.4.3.5\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\"Joe's Guns\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 22.5,\\n  \\\"hackDifficulty\\\": 22.5,\\n  \\\"minDifficulty\\\": 8,\\n  \\\"moneyAvailable\\\": 1250000,\\n  \\\"moneyMax\\\": 12500000,\\n  \\\"numOpenPortsRequired\\\": 0,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 10,\\n  \\\"serverGrowth\\\": 20\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/CSEC.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"CSEC\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"21.1.6.3\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 8,\\n  \\\"organizationName\\\": \\\"CyberSec\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 0,\\n  \\\"hackDifficulty\\\": 0,\\n  \\\"minDifficulty\\\": 1,\\n  \\\"moneyAvailable\\\": 0,\\n  \\\"moneyMax\\\": 0,\\n  \\\"numOpenPortsRequired\\\": 1,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 56,\\n  \\\"serverGrowth\\\": 0\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/silver-helix.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"silver-helix\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"93.4.4.4\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 64,\\n  \\\"organizationName\\\": \\\"Silver Helix\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 45,\\n  \\\"hackDifficulty\\\": 45,\\n  \\\"minDifficulty\\\": 15,\\n  \\\"moneyAvailable\\\": 22500000,\\n  \\\"moneyMax\\\": 225000000,\\n  \\\"numOpenPortsRequired\\\": 2,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 150,\\n  \\\"serverGrowth\\\": 30\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/johnson-ortho.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"johnson-ortho\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"90.4.6.8\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Johnson Orthopedics\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 84,\\n  \\\"hackDifficulty\\\": 84,\\n  \\\"minDifficulty\\\": 28,\\n  \\\"moneyAvailable\\\": 40372732,\\n  \\\"moneyMax\\\": 403727320,\\n  \\\"numOpenPortsRequired\\\": 2,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 252,\\n  \\\"serverGrowth\\\": 59\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/rothman-uni.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"rothman-uni\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"47.9.9.3\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"Rothman University\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 70.5,\\n  \\\"hackDifficulty\\\": 70.5,\\n  \\\"minDifficulty\\\": 24,\\n  \\\"moneyAvailable\\\": 118893856,\\n  \\\"moneyMax\\\": 1188938560,\\n  \\\"numOpenPortsRequired\\\": 3,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 430,\\n  \\\"serverGrowth\\\": 38\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/crush-fitness.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"crush-fitness\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"22.6.6.5\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Crush Fitness\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 64.5,\\n  \\\"hackDifficulty\\\": 64.5,\\n  \\\"minDifficulty\\\": 22,\\n  \\\"moneyAvailable\\\": 25042475,\\n  \\\"moneyMax\\\": 250424750,\\n  \\\"numOpenPortsRequired\\\": 2,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 274,\\n  \\\"serverGrowth\\\": 32\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/syscore.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"syscore\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"64.2.9.4\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"SysCore Securities\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 108,\\n  \\\"hackDifficulty\\\": 108,\\n  \\\"minDifficulty\\\": 36,\\n  \\\"moneyAvailable\\\": 277383627.5,\\n  \\\"moneyMax\\\": 2773836275,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 552,\\n  \\\"serverGrowth\\\": 62\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/hong-fang-tea.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"hong-fang-tea\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"45.8.8.0\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\"HongFang Teahouse\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 22.5,\\n  \\\"hackDifficulty\\\": 22.5,\\n  \\\"minDifficulty\\\": 8,\\n  \\\"moneyAvailable\\\": 1500000,\\n  \\\"moneyMax\\\": 15000000,\\n  \\\"numOpenPortsRequired\\\": 0,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 30,\\n  \\\"serverGrowth\\\": 20\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/harakiri-sushi.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"harakiri-sushi\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"61.5.3.7\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\"HaraKiri Sushi Bar Network\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 22.5,\\n  \\\"hackDifficulty\\\": 22.5,\\n  \\\"minDifficulty\\\": 8,\\n  \\\"moneyAvailable\\\": 2000000,\\n  \\\"moneyMax\\\": 20000000,\\n  \\\"numOpenPortsRequired\\\": 0,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 40,\\n  \\\"serverGrowth\\\": 40\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/iron-gym.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"iron-gym\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"12.2.2.6\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"Iron Gym Network\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 45,\\n  \\\"hackDifficulty\\\": 45,\\n  \\\"minDifficulty\\\": 15,\\n  \\\"moneyAvailable\\\": 10000000,\\n  \\\"moneyMax\\\": 100000000,\\n  \\\"numOpenPortsRequired\\\": 1,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 100,\\n  \\\"serverGrowth\\\": 20\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/zer0.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"zer0\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"79.6.7.3\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"ZER0 Nightclub\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 37.5,\\n  \\\"hackDifficulty\\\": 37.5,\\n  \\\"minDifficulty\\\": 13,\\n  \\\"moneyAvailable\\\": 3750000,\\n  \\\"moneyMax\\\": 37500000,\\n  \\\"numOpenPortsRequired\\\": 1,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 75,\\n  \\\"serverGrowth\\\": 40\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/neo-net.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"neo-net\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"86.6.1.3\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"Neo Nightclub Network\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": true,\\n  \\\"baseDifficulty\\\": 37.5,\\n  \\\"hackDifficulty\\\": 37.5,\\n  \\\"minDifficulty\\\": 13,\\n  \\\"moneyAvailable\\\": 2500000,\\n  \\\"moneyMax\\\": 25000000,\\n  \\\"numOpenPortsRequired\\\": 1,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 50,\\n  \\\"serverGrowth\\\": 25\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/computek.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"computek\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"99.2.5.2\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"CompuTek\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 96,\\n  \\\"hackDifficulty\\\": 96,\\n  \\\"minDifficulty\\\": 32,\\n  \\\"moneyAvailable\\\": 114867657.5,\\n  \\\"moneyMax\\\": 1148676575,\\n  \\\"numOpenPortsRequired\\\": 3,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 318,\\n  \\\"serverGrowth\\\": 50\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/zb-institute.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"zb-institute\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"50.3.5.5\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 128,\\n  \\\"organizationName\\\": \\\"ZB Institute of Technology\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 105,\\n  \\\"hackDifficulty\\\": 105,\\n  \\\"minDifficulty\\\": 35,\\n  \\\"moneyAvailable\\\": 420873623.5,\\n  \\\"moneyMax\\\": 4208736235,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 768,\\n  \\\"serverGrowth\\\": 76\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/aevum-police.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"aevum-police\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"25.9.8.3\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 64,\\n  \\\"organizationName\\\": \\\"Aevum Police Headquarters\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 109.5,\\n  \\\"hackDifficulty\\\": 109.5,\\n  \\\"minDifficulty\\\": 37,\\n  \\\"moneyAvailable\\\": 155281020.5,\\n  \\\"moneyMax\\\": 1552810205,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 412,\\n  \\\"serverGrowth\\\": 43\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/aerocorp.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"aerocorp\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"71.1.5.0\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"AeroCorp\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 123,\\n  \\\"hackDifficulty\\\": 123,\\n  \\\"minDifficulty\\\": 41,\\n  \\\"moneyAvailable\\\": 512541830.5,\\n  \\\"moneyMax\\\": 5125418305,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 864,\\n  \\\"serverGrowth\\\": 55\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/unitalife.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"unitalife\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"59.2.7.8\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 64,\\n  \\\"organizationName\\\": \\\"UnitaLife Group\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 106.5,\\n  \\\"hackDifficulty\\\": 106.5,\\n  \\\"minDifficulty\\\": 36,\\n  \\\"moneyAvailable\\\": 516664132.5,\\n  \\\"moneyMax\\\": 5166641325,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 775,\\n  \\\"serverGrowth\\\": 76\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/icarus.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"icarus\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"6.9.0.4\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Icarus Microsystems\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 132,\\n  \\\"hackDifficulty\\\": 132,\\n  \\\"minDifficulty\\\": 44,\\n  \\\"moneyAvailable\\\": 484121290.5,\\n  \\\"moneyMax\\\": 4841212905,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 891,\\n  \\\"serverGrowth\\\": 92\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/univ-energy.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"univ-energy\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"33.6.4.6\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 16,\\n  \\\"organizationName\\\": \\\"Universal Energy\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 123,\\n  \\\"hackDifficulty\\\": 123,\\n  \\\"minDifficulty\\\": 41,\\n  \\\"moneyAvailable\\\": 557740015.5,\\n  \\\"moneyMax\\\": 5577400155,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 855,\\n  \\\"serverGrowth\\\": 80\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/nova-med.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"nova-med\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"89.9.2.0\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 0,\\n  \\\"organizationName\\\": \\\"Nova Medical\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 93,\\n  \\\"hackDifficulty\\\": 93,\\n  \\\"minDifficulty\\\": 31,\\n  \\\"moneyAvailable\\\": 605443229.5,\\n  \\\"moneyMax\\\": 6054432295,\\n  \\\"numOpenPortsRequired\\\": 4,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 816,\\n  \\\"serverGrowth\\\": 79\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/solaris.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"solaris\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"4.7.0.5\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 64,\\n  \\\"organizationName\\\": \\\"Solaris Space Systems\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 112.5,\\n  \\\"hackDifficulty\\\": 112.5,\\n  \\\"minDifficulty\\\": 38,\\n  \\\"moneyAvailable\\\": 401584998.5,\\n  \\\"moneyMax\\\": 4015849985,\\n  \\\"numOpenPortsRequired\\\": 5,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 814,\\n  \\\"serverGrowth\\\": 74\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/millenium-fitness.txt\",\"text\":\"{\\n  \\\"cpuCores\\\": 1,\\n  \\\"ftpPortOpen\\\": false,\\n  \\\"hasAdminRights\\\": true,\\n  \\\"hostname\\\": \\\"millenium-fitness\\\",\\n  \\\"httpPortOpen\\\": false,\\n  \\\"ip\\\": \\\"41.7.7.3\\\",\\n  \\\"isConnectedTo\\\": false,\\n  \\\"maxRam\\\": 32,\\n  \\\"organizationName\\\": \\\"Millenium Fitness Network\\\",\\n  \\\"ramUsed\\\": 0,\\n  \\\"smtpPortOpen\\\": false,\\n  \\\"sqlPortOpen\\\": false,\\n  \\\"sshPortOpen\\\": false,\\n  \\\"purchasedByPlayer\\\": false,\\n  \\\"backdoorInstalled\\\": false,\\n  \\\"baseDifficulty\\\": 82.5,\\n  \\\"hackDifficulty\\\": 82.5,\\n  \\\"minDifficulty\\\": 28,\\n  \\\"moneyAvailable\\\": 125000000,\\n  \\\"moneyMax\\\": 1250000000,\\n  \\\"numOpenPortsRequired\\\": 3,\\n  \\\"openPortCount\\\": 0,\\n  \\\"requiredHackingSkill\\\": 497,\\n  \\\"serverGrowth\\\": 43\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/tmp/incorp.txt\",\"text\":\"\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"63.1.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"ecorp\",\"moduleSequenceNumber\":29245,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":29247,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":29249,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":17794418300,\"moneyMax\":177944183000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1182,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"15.3.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"megacorp\",\"moduleSequenceNumber\":29257,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":29259,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":29261,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":29865706653.5,\"moneyMax\":298657066535,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1208,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"76.9.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"b-and-a\",\"moduleSequenceNumber\":29143,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":29145,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":29147,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":111,\"hackDifficulty\":111,\"minDifficulty\":37,\"moneyAvailable\":9289519699.5,\"moneyMax\":92895196995,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1067,\"serverGrowth\":77}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"45.4.7.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":127.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",0.9356244859956531],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":5852,\"ramUsage\":1.7,\"server\":\"blade\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/7d2202c5-5fce-4be8-9c08-22723a4a07c8\",\"moduleSequenceNumber\":32244}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",0.5385078033128481],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":5858,\"ramUsage\":1.7,\"server\":\"blade\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/7d2202c5-5fce-4be8-9c08-22723a4a07c8\",\"moduleSequenceNumber\":32244}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",0.7295277871899644],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":5861,\"ramUsage\":1.7,\"server\":\"blade\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/7d2202c5-5fce-4be8-9c08-22723a4a07c8\",\"moduleSequenceNumber\":32244}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",0.6237339774339052],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":5862,\"ramUsage\":1.75,\"server\":\"blade\",\"threads\":70,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/5d5f7028-b073-43cd-ad7b-ae481a503d15\",\"moduleSequenceNumber\":31733}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/7d2202c5-5fce-4be8-9c08-22723a4a07c8\",\"moduleSequenceNumber\":32244}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":32244,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/5d5f7028-b073-43cd-ad7b-ae481a503d15\",\"moduleSequenceNumber\":31733}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":31733,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/14daab02-02a2-4582-bd53-9dbd39684d31\",\"moduleSequenceNumber\":32754}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":32754,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":145.5,\"hackDifficulty\":145.5,\"minDifficulty\":49,\"moneyAvailable\":7346121658.5,\"moneyMax\":73461216585,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":960,\"serverGrowth\":69}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"30.1.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nwo\",\"moduleSequenceNumber\":29239,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":29241,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":29243,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"4sigma\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":13054820439.5,\"moneyMax\":130548204395,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1220,\"serverGrowth\":92}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"50.9.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"clarkinc\",\"moduleSequenceNumber\":29251,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":29253,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":29255,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"4sigma\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":11712202836.5,\"moneyMax\":117122028365,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1075,\"serverGrowth\":67}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"83.3.0.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",0.2020305740112689],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":5856,\"ramUsage\":1.75,\"server\":\"omnitek\",\"threads\":73,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/cba2b2da-6756-4e79-8d81-ffb435838cbe\",\"moduleSequenceNumber\":33011}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/99047a61-7417-41cc-8126-27c39593a8fc\",\"moduleSequenceNumber\":34280}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":34280,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/cba2b2da-6756-4e79-8d81-ffb435838cbe\",\"moduleSequenceNumber\":33011}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":33011,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/3e721da1-1136-43ef-9ea2-d49a37d8400b\",\"moduleSequenceNumber\":31990}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":31990,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":138,\"hackDifficulty\":138,\"minDifficulty\":46,\"moneyAvailable\":7582365802,\"moneyMax\":75823658020,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1082,\"serverGrowth\":95}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"90.8.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"4sigma\",\"moduleSequenceNumber\":29227,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":29229,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":29231,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"blade\",\"nwo\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":7929003959.5,\"moneyMax\":79290039595,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1211,\"serverGrowth\":93}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"30.1.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":29137,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":29139,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":29141,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"stormtech\",\"b-and-a\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":144,\"hackDifficulty\":144,\"minDifficulty\":48,\"moneyAvailable\":14761118584,\"moneyMax\":147611185840,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1098,\"serverGrowth\":95}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"21.7.5.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":1023.65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.9813268026974116],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":90.81000000000076,\"pid\":5735,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":421,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/51af7df3-e92b-4f23-95f5-b26e25412c67\",\"moduleSequenceNumber\":31729}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",0.8328629832119878],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":5843,\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/4e8d8deb-1e33-4e55-a178-d2160daa169d\",\"moduleSequenceNumber\":30965}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",0.6327429573902419],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":5846,\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/4e8d8deb-1e33-4e55-a178-d2160daa169d\",\"moduleSequenceNumber\":30965}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",0.8191177174930071],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":5847,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":162,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/51af7df3-e92b-4f23-95f5-b26e25412c67\",\"moduleSequenceNumber\":31729}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/4e8d8deb-1e33-4e55-a178-d2160daa169d\",\"moduleSequenceNumber\":30965}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":30965,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/51af7df3-e92b-4f23-95f5-b26e25412c67\",\"moduleSequenceNumber\":31729}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":31729,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cd933aa8-74ec-405c-838c-d5bcc3c30347\",\"moduleSequenceNumber\":30967}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":30967,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"titan-labs\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":126,\"hackDifficulty\":126,\"minDifficulty\":42,\"moneyAvailable\":740941538.5,\"moneyMax\":7409415385,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1247,\"serverGrowth\":99}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"0.4.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":29149,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":29151,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":29153,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":500000,\"moneyMax\":5000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1209,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"77.2.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"stormtech\",\"moduleSequenceNumber\":29125,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":29127,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":29129,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"microdyne\",\"omnitek\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":126,\"hackDifficulty\":126,\"minDifficulty\":42,\"moneyAvailable\":516323394,\"moneyMax\":5163233940,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1020,\"serverGrowth\":71}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"82.8.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":29107,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":29109,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":29111,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":139.5,\"hackDifficulty\":139.5,\"minDifficulty\":47,\"moneyAvailable\":433583531,\"moneyMax\":4335835310,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":998,\"serverGrowth\":49}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"29.2.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":29209,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":29211,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":29213,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":117,\"hackDifficulty\":117,\"minDifficulty\":39,\"moneyAvailable\":301099265.5,\"moneyMax\":3010992655,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":935,\"serverGrowth\":59}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"6.5.4.7\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":255.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.729361934881225],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":5849,\"ramUsage\":1.7,\"server\":\"helios\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/610dc2a2-c6f9-4f26-8f3e-569c28b04793\",\"moduleSequenceNumber\":29699}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.29154060580836183],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":5850,\"ramUsage\":1.75,\"server\":\"helios\",\"threads\":145,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/98b17f5c-9aea-496d-983b-150fcd18dc83\",\"moduleSequenceNumber\":32499}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/610dc2a2-c6f9-4f26-8f3e-569c28b04793\",\"moduleSequenceNumber\":29699}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":29699,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/98b17f5c-9aea-496d-983b-150fcd18dc83\",\"moduleSequenceNumber\":32499}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":32499,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/e429b761-633e-4102-9c82-f153917b5245\",\"moduleSequenceNumber\":31475}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":31475,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":132,\"hackDifficulty\":132,\"minDifficulty\":44,\"moneyAvailable\":281788412,\"moneyMax\":2817884120,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":850,\"serverGrowth\":77}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"47.8.0.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":10.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",0.6569691517543281],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":90.61000000000075,\"pid\":5757,\"ramUsage\":1.75,\"server\":\"vitalife\",\"threads\":6,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/78b0dc5a-66bd-493b-a654-430d4cddf7be\",\"moduleSequenceNumber\":35544}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":29263,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":29265,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/78b0dc5a-66bd-493b-a654-430d4cddf7be\",\"moduleSequenceNumber\":35544}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":35544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"titan-labs\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":124.5,\"hackDifficulty\":124.5,\"minDifficulty\":42,\"moneyAvailable\":372328837,\"moneyMax\":3723288370,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":782,\"serverGrowth\":75}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"6.9.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"icarus\",\"moduleSequenceNumber\":29419,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":29421,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":29423,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":132,\"hackDifficulty\":132,\"minDifficulty\":44,\"moneyAvailable\":484121290.5,\"moneyMax\":4841212905,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":891,\"serverGrowth\":92}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"33.6.4.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":29425,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":29427,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/21c4cd55-0017-4594-972a-c862856b3592\",\"moduleSequenceNumber\":45616}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":45616,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"unitalife\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":123,\"hackDifficulty\":123,\"minDifficulty\":41,\"moneyAvailable\":557740015.5,\"moneyMax\":5577400155,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":855,\"serverGrowth\":80}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"88.1.0.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",0.047245836646816475],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":5853,\"ramUsage\":1.75,\"server\":\"titan-labs\",\"threads\":73,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/561183c2-ac48-4598-9ecd-198b81f9bfce\",\"moduleSequenceNumber\":32756}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/db27374c-a467-49f6-a7ac-7f2e47360f7b\",\"moduleSequenceNumber\":32755}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":32755,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/561183c2-ac48-4598-9ecd-198b81f9bfce\",\"moduleSequenceNumber\":32756}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":32756,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/b31732c1-bad3-40cb-b9fa-380e486bf3d2\",\"moduleSequenceNumber\":31735}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":31735,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":105,\"hackDifficulty\":105,\"minDifficulty\":35,\"moneyAvailable\":379470659.5,\"moneyMax\":3794706595,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":842,\"serverGrowth\":74}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"22.5.8.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":10.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",0.4044877344138633],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":5857,\"ramUsage\":1.75,\"server\":\"microdyne\",\"threads\":6,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/7cb430ff-8875-40fc-9b98-d77eca2eca58\",\"moduleSequenceNumber\":31728}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":29119,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/a683900f-6781-4b79-9d5d-c7b4a5a5e0ee\",\"moduleSequenceNumber\":69760}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":69760,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/7cb430ff-8875-40fc-9b98-d77eca2eca58\",\"moduleSequenceNumber\":31728}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":31728,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"taiyang-digital\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":108,\"hackDifficulty\":108,\"minDifficulty\":36,\"moneyAvailable\":311798670.5,\"moneyMax\":3117986705,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":869,\"serverGrowth\":88}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"83.1.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":29113,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":29115,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":29117,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"defcomm\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":115.5,\"hackDifficulty\":115.5,\"minDifficulty\":39,\"moneyAvailable\":446608805,\"moneyMax\":4466088050,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":882,\"serverGrowth\":74}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"75.4.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":29191,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":29193,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":29195,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"alpha-ent\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94.5,\"hackDifficulty\":94.5,\"minDifficulty\":32,\"moneyAvailable\":415742957.5,\"moneyMax\":4157429575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":859,\"serverGrowth\":79}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"71.1.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":29407,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":29409,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":29411,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"aevum-police\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":123,\"hackDifficulty\":123,\"minDifficulty\":41,\"moneyAvailable\":512541830.5,\"moneyMax\":5125418305,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":864,\"serverGrowth\":55}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"39.3.9.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",0.3593025933843066],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":5868,\"ramUsage\":1.75,\"server\":\"omnia\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/1a160a58-fcbf-41c9-b85c-cc64396f5d28\",\"moduleSequenceNumber\":43851}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/aff2c048-c001-43aa-afe3-54efd14b5b52\",\"moduleSequenceNumber\":59686}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":59686,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/1a160a58-fcbf-41c9-b85c-cc64396f5d28\",\"moduleSequenceNumber\":43851}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":43851,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/dc543c6b-3da3-4ebd-b409-30cfef84e498\",\"moduleSequenceNumber\":39324}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":39324,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"global-pharm\",\"defcomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":138,\"hackDifficulty\":138,\"minDifficulty\":46,\"moneyAvailable\":498516752,\"moneyMax\":4985167520,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":931,\"serverGrowth\":69}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"87.9.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":29287,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":29289,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":29291,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zeus-med\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":533841819,\"moneyMax\":5338418190,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":800,\"serverGrowth\":67}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"42.4.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":29293,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":29295,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":29297,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":488930361.5,\"moneyMax\":4889303615,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":833,\"serverGrowth\":72}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"4.7.0.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",0.791607374241821],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.610000000000326,\"pid\":5784,\"ramUsage\":1.75,\"server\":\"solaris\",\"threads\":36,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/307588f4-c578-444a-b955-4d06609ad1a2\",\"moduleSequenceNumber\":36299}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/de7e05dd-1ccd-419d-8fea-be46f0611a5c\",\"moduleSequenceNumber\":34787}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":34787,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/307588f4-c578-444a-b955-4d06609ad1a2\",\"moduleSequenceNumber\":36299}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":36299,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc733642-7590-4e6d-a8e1-cf8a6c17fa4d\",\"moduleSequenceNumber\":32245}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":32245,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":112.5,\"hackDifficulty\":112.5,\"minDifficulty\":38,\"moneyAvailable\":401584998.5,\"moneyMax\":4015849985,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":814,\"serverGrowth\":74}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"39.3.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":29197,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":29199,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":29201,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":121.5,\"hackDifficulty\":121.5,\"minDifficulty\":41,\"moneyAvailable\":790423207,\"moneyMax\":7904232070,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":834,\"serverGrowth\":53}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"18.6.6.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":14,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",0.36215652258679554],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":90.61000000000075,\"pid\":5745,\"ramUsage\":1.75,\"server\":\"global-pharm\",\"threads\":8,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/03379432-952a-408b-8a57-04e153407fe8\",\"moduleSequenceNumber\":31472}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":29095,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":29097,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/03379432-952a-408b-8a57-04e153407fe8\",\"moduleSequenceNumber\":31472}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":31472,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"lexo-corp\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":126,\"hackDifficulty\":126,\"minDifficulty\":42,\"moneyAvailable\":792476728.5,\"moneyMax\":7924767285,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":790,\"serverGrowth\":82}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"89.9.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":29431,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":29433,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":29435,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":605443229.5,\"moneyMax\":6054432295,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":816,\"serverGrowth\":79}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"24.2.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zeus-med\",\"moduleSequenceNumber\":29203,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":29205,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":29207,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\",\"infocomm\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":115.5,\"hackDifficulty\":115.5,\"minDifficulty\":39,\"moneyAvailable\":746153521,\"moneyMax\":7461535210,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":831,\"serverGrowth\":74}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"59.2.7.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":43.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.03196738147848288],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":120.81000000000118,\"pid\":5726,\"ramUsage\":1.75,\"server\":\"unitalife\",\"threads\":25,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/e98f46d7-98ea-4889-ad7d-28b328e49fe8\",\"moduleSequenceNumber\":32246}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/a82ee99e-9110-467d-8d41-7ee578fe7902\",\"moduleSequenceNumber\":34026}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":34026,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/0f250eda-bbeb-4696-940b-f79654460999\",\"moduleSequenceNumber\":34027}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":34027,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/e98f46d7-98ea-4889-ad7d-28b328e49fe8\",\"moduleSequenceNumber\":32246}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":32246,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"aerocorp\",\"icarus\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":106.5,\"hackDifficulty\":106.5,\"minDifficulty\":36,\"moneyAvailable\":516664132.5,\"moneyMax\":5166641325,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":775,\"serverGrowth\":76}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"68.9.5.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":1.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",0.6638471267803869],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":5870,\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/475e81c7-8b07-4001-b489-f7357cabef32\",\"moduleSequenceNumber\":58930}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/475e81c7-8b07-4001-b489-f7357cabef32\",\"moduleSequenceNumber\":58930}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":58930,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/003faf50-b5d8-419b-9105-34c4140db9e4\",\"moduleSequenceNumber\":40332}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":40332,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/333759be-d58e-48a8-88fd-505021556a47\",\"moduleSequenceNumber\":30206}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":30206,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"catalyst\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":391254834.5,\"moneyMax\":3912548345,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":721,\"serverGrowth\":58}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"74.1.5.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.26126745127103534],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.809999999999924,\"pid\":5811,\"ramUsage\":1.75,\"server\":\"rho-construction\",\"threads\":9,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/a801f771-6c3c-4858-9698-19f7169cb662\",\"moduleSequenceNumber\":33518}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":29173,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":29175,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/a801f771-6c3c-4858-9698-19f7169cb662\",\"moduleSequenceNumber\":33518}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":33518,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67.5,\"hackDifficulty\":67.5,\"minDifficulty\":23,\"moneyAvailable\":335318587.5,\"moneyMax\":3353185875,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":504,\"serverGrowth\":48}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"53.2.2.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":127.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",0.3722626518973693],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":5855,\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/18266263-98fc-487e-99bc-af1ccedd2181\",\"moduleSequenceNumber\":33010}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",0.9191960119774099],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":5859,\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"threads\":72,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/2b79aa67-0f12-4b4a-a536-4285bd4e6ea7\",\"moduleSequenceNumber\":31989}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/18266263-98fc-487e-99bc-af1ccedd2181\",\"moduleSequenceNumber\":33010}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":33010,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/2b79aa67-0f12-4b4a-a536-4285bd4e6ea7\",\"moduleSequenceNumber\":31989}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":31989,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/5dea1e57-f575-419c-b0ad-02693595d795\",\"moduleSequenceNumber\":32498}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":32498,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"I.I.I.I\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":312994332,\"moneyMax\":3129943320,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":531,\"serverGrowth\":50}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"25.9.8.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":62.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.37316720796167524],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.809999999999924,\"pid\":5809,\"ramUsage\":1.7,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/3adcb047-7829-4dff-b40c-922d91cf1a8e\",\"moduleSequenceNumber\":32500}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",0.24721740460520403],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.410000000000004,\"pid\":5835,\"ramUsage\":1.75,\"server\":\"aevum-police\",\"threads\":19,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/6807d905-a589-4149-858f-26b3dc72d14d\",\"moduleSequenceNumber\":35292}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.9946173497198105],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":5851,\"ramUsage\":1.75,\"server\":\"aevum-police\",\"threads\":16,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/8a080cc5-7d11-4ef7-a887-031ceffb0f75\",\"moduleSequenceNumber\":33012}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/3adcb047-7829-4dff-b40c-922d91cf1a8e\",\"moduleSequenceNumber\":32500}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":32500,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/6807d905-a589-4149-858f-26b3dc72d14d\",\"moduleSequenceNumber\":35292}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":35292,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/8a080cc5-7d11-4ef7-a887-031ceffb0f75\",\"moduleSequenceNumber\":33012}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":33012,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-institute\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":109.5,\"hackDifficulty\":109.5,\"minDifficulty\":37,\"moneyAvailable\":155281020.5,\"moneyMax\":1552810205,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":412,\"serverGrowth\":43}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"47.9.9.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":10.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",0.07156982946019053],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.609999999999925,\"pid\":5826,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":3,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cf0647b0-1f64-4197-ab77-ca63889b1c18\",\"moduleSequenceNumber\":40080}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",0.7436095472081166],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.609999999999925,\"pid\":5832,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":3,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cf0647b0-1f64-4197-ab77-ca63889b1c18\",\"moduleSequenceNumber\":40080}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/13a2e236-880a-4b18-8766-97e04e61b564\",\"moduleSequenceNumber\":58678}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":58678,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/2e3af6dd-23c9-4cfd-8db3-fcf72146562c\",\"moduleSequenceNumber\":39323}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":39323,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cf0647b0-1f64-4197-ab77-ca63889b1c18\",\"moduleSequenceNumber\":40080}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":40080,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70.5,\"hackDifficulty\":70.5,\"minDifficulty\":24,\"moneyAvailable\":118893856,\"moneyMax\":1188938560,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":430,\"serverGrowth\":38}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"50.3.5.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":108.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",0.5479469747938714],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.809999999999924,\"pid\":5808,\"ramUsage\":1.75,\"server\":\"zb-institute\",\"threads\":62,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/ee75ee70-65ec-46a7-9395-6b859928f106\",\"moduleSequenceNumber\":31731}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/8963d004-027c-4b10-9142-faa5c517d4bc\",\"moduleSequenceNumber\":33519}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":33519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/9ff823fc-9190-4d84-b023-d8e6ed81627b\",\"moduleSequenceNumber\":35040}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":35040,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/ee75ee70-65ec-46a7-9395-6b859928f106\",\"moduleSequenceNumber\":31731}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":31731,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"computek\",\"aevum-police\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":105,\"hackDifficulty\":105,\"minDifficulty\":35,\"moneyAvailable\":420873623.5,\"moneyMax\":4208736235,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":768,\"serverGrowth\":76}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"1.8.2.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":29.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",0.9812816396276314],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.81000000000033,\"pid\":5773,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"threads\":12,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/17fd59cf-f8fb-447c-b4df-23f297b4fa87\",\"moduleSequenceNumber\":29954}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",0.14575461281469848],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.609999999999925,\"pid\":5820,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"threads\":5,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/17fd59cf-f8fb-447c-b4df-23f297b4fa87\",\"moduleSequenceNumber\":29954}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/05785593-f66b-4e22-a89a-8b379b08a8f2\",\"moduleSequenceNumber\":59687}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":59687,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/4964b1e7-4583-40f4-84a6-eebc5043abb8\",\"moduleSequenceNumber\":58931}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":58931,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/17fd59cf-f8fb-447c-b4df-23f297b4fa87\",\"moduleSequenceNumber\":29954}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":29954,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":131644655.5,\"moneyMax\":1316446555,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":449,\"serverGrowth\":56}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"64.2.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"moduleSequenceNumber\":29353,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":29355,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":29357,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":108,\"hackDifficulty\":108,\"minDifficulty\":36,\"moneyAvailable\":277383627.5,\"moneyMax\":2773836275,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":552,\"serverGrowth\":62}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"42.2.6.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":127.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",0.014807335567485369],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":5844,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":19,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/c7d83af5-2b00-4273-8faa-7d2e8e0e79c3\",\"moduleSequenceNumber\":33773}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",0.17051376126888163],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":5848,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":25,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/a8670272-03a5-4944-a40a-e749eb298c72\",\"moduleSequenceNumber\":31991}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",0.4790140454686709],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":5864,\"ramUsage\":1.7,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/e147ddb7-f2fc-4b1d-a7d1-a7c0c88a4503\",\"moduleSequenceNumber\":33771}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",0.7297814081865182],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":5865,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":28,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/c7d83af5-2b00-4273-8faa-7d2e8e0e79c3\",\"moduleSequenceNumber\":33773}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/e147ddb7-f2fc-4b1d-a7d1-a7c0c88a4503\",\"moduleSequenceNumber\":33771}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":33771,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/c7d83af5-2b00-4273-8faa-7d2e8e0e79c3\",\"moduleSequenceNumber\":33773}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":33773,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/a8670272-03a5-4944-a40a-e749eb298c72\",\"moduleSequenceNumber\":31991}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":31991,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":102,\"hackDifficulty\":102,\"minDifficulty\":34,\"moneyAvailable\":204605103,\"moneyMax\":2046051030,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":425,\"serverGrowth\":46}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"61.3.8.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.5029989393589895],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":90.81000000000076,\"pid\":5736,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":34,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/725b6393-611c-4121-9c58-d348ea376526\",\"moduleSequenceNumber\":31474}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",0.6387102108328828],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":5869,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":2,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/725b6393-611c-4121-9c58-d348ea376526\",\"moduleSequenceNumber\":31474}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/65d0adb8-b15a-45d4-8c30-0aabc1f22311\",\"moduleSequenceNumber\":38311}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":38311,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/38bafd4a-c785-4688-9fb9-3cbbd6bae94a\",\"moduleSequenceNumber\":33265}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":33265,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/725b6393-611c-4121-9c58-d348ea376526\",\"moduleSequenceNumber\":31474}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":31474,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omega-net\",\"summit-uni\",\"catalyst\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":93052746,\"moneyMax\":930527460,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":316,\"serverGrowth\":50}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":true,\"ip\":\"99.2.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"computek\",\"moduleSequenceNumber\":29389,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"computek\",\"moduleSequenceNumber\":29391,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"computek\",\"moduleSequenceNumber\":29393,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"neo-net\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":114867657.5,\"moneyMax\":1148676575,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":318,\"serverGrowth\":50}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"98.3.9.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.459123419650012],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.81000000000033,\"pid\":5775,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":73,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/c2772731-af9c-4895-8233-2e15aa98767b\",\"moduleSequenceNumber\":33772}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/324747b8-149a-4453-8f2c-22e2b90a1b6b\",\"moduleSequenceNumber\":31732}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":31732,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/c2772731-af9c-4895-8233-2e15aa98767b\",\"moduleSequenceNumber\":33772}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":33772,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/81ee4aa4-595c-49e8-98f1-338b7538a731\",\"moduleSequenceNumber\":32243}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":32243,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":106.5,\"hackDifficulty\":106.5,\"minDifficulty\":36,\"moneyAvailable\":137500000,\"moneyMax\":1375000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":404,\"serverGrowth\":46}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"90.4.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":29335,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":29337,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":29339,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":40372732,\"moneyMax\":403727320,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":252,\"serverGrowth\":59}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"18.0.0.4\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":3.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",0.0012341545305014634],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":5845,\"ramUsage\":1.75,\"server\":\"n00dles\",\"threads\":2,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/d601a215-14f1-481e-8da5-5c6213d274a9\",\"moduleSequenceNumber\":30712}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":29035,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/a0f538c3-2a03-4d36-9681-619a734c51e3\",\"moduleSequenceNumber\":31988}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":31988,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/d601a215-14f1-481e-8da5-5c6213d274a9\",\"moduleSequenceNumber\":30712}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":30712,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1.5,\"hackDifficulty\":1.002,\"minDifficulty\":1,\"moneyAvailable\":10563,\"moneyMax\":350000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":true,\"ip\":\"76.1.7.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",0.8036497726123528],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.610000000000326,\"pid\":5785,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":9,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/578814bf-18e2-47d5-866a-732b8f065e7c\",\"moduleSequenceNumber\":31219}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":29041,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/fbf6eaee-eb6f-449c-907b-cc215b0b3cfd\",\"moduleSequenceNumber\":45112}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":45112,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/578814bf-18e2-47d5-866a-732b8f065e7c\",\"moduleSequenceNumber\":31219}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":31219,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":749412.5605100685,\"moneyMax\":10000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":true,\"ip\":\"95.7.0.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":10.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",0.25146893663224845],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":5872,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"threads\":6,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cacc2270-ffb4-4813-a241-7207c6bbc68b\",\"moduleSequenceNumber\":44607}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":29311,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":29313,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cacc2270-ffb4-4813-a241-7207c6bbc68b\",\"moduleSequenceNumber\":44607}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":44607,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":9049607.2430898,\"moneyMax\":11500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":true,\"ip\":\"83.4.3.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":29317,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":29319,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/ae923e58-0adc-49fd-8812-874bd8302b54\",\"moduleSequenceNumber\":44608}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":44608,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":8.07,\"minDifficulty\":8,\"moneyAvailable\":8987470.881924635,\"moneyMax\":12500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"79.6.7.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",0.4293647384398709],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":5867,\"ramUsage\":1.7,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/739c22b2-9ce1-47a5-8b23-43b8ef5e7326\",\"moduleSequenceNumber\":40078}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",0.7381040707824122],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":5871,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":17,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/c29623cb-bb87-4d12-8464-8e2b2495efe8\",\"moduleSequenceNumber\":39321}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/739c22b2-9ce1-47a5-8b23-43b8ef5e7326\",\"moduleSequenceNumber\":40078}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":40078,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/c29623cb-bb87-4d12-8464-8e2b2495efe8\",\"moduleSequenceNumber\":39321}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":39321,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/900b538b-ac14-492a-934c-6a58aa230db7\",\"moduleSequenceNumber\":34283}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":34283,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"iron-gym\",\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":37.5,\"hackDifficulty\":13.206,\"minDifficulty\":13,\"moneyAvailable\":27311895.38798867,\"moneyMax\":37500000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":true,\"ip\":\"93.9.8.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":14,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",0.7876208410507737],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.609999999999925,\"pid\":5829,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":2,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/502317fa-9b7e-4ebb-8d75-e64fe515f03a\",\"moduleSequenceNumber\":31734}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",0.15187379973231252],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":5854,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":6,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/502317fa-9b7e-4ebb-8d75-e64fe515f03a\",\"moduleSequenceNumber\":31734}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":29047,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/4f3c1253-d4f0-4262-9f86-1dfb08979895\",\"moduleSequenceNumber\":31471}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":31471,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/502317fa-9b7e-4ebb-8d75-e64fe515f03a\",\"moduleSequenceNumber\":31734}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":31734,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"foodnstuff\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":5647853.054825593,\"moneyMax\":13750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":true,\"ip\":\"86.6.1.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",0.8570374887730556],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.609999999999925,\"pid\":5831,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":14,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/b940d709-4664-4367-a783-b5db0c2e8edd\",\"moduleSequenceNumber\":44354}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",0.6793817792091126],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":5866,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":4,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/8d8238a5-fc42-41f8-ae27-b4d03a67ca0d\",\"moduleSequenceNumber\":34028}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/19100179-9454-4274-90e5-fbbbc806bdd6\",\"moduleSequenceNumber\":39320}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":39320,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/b940d709-4664-4367-a783-b5db0c2e8edd\",\"moduleSequenceNumber\":44354}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":44354,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/8d8238a5-fc42-41f8-ae27-b4d03a67ca0d\",\"moduleSequenceNumber\":34028}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":34028,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zer0\",\"computek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":37.5,\"hackDifficulty\":13.194,\"minDifficulty\":13,\"moneyAvailable\":21328677.97950778,\"moneyMax\":25000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"93.4.4.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.14938747417097886],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.809999999999924,\"pid\":5810,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":36,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/972ad31e-fa5a-47b0-8f98-58f723d37d13\",\"moduleSequenceNumber\":32501}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/d21cbd36-ab48-484f-999e-d5599655bc3b\",\"moduleSequenceNumber\":37808}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":37808,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/972ad31e-fa5a-47b0-8f98-58f723d37d13\",\"moduleSequenceNumber\":32501}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":32501,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/a8a6cbb0-000c-4614-972a-7d8f16433b09\",\"moduleSequenceNumber\":33009}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":33009,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"CSEC\",\"johnson-ortho\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":22500000,\"moneyMax\":225000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":true,\"ip\":\"45.8.8.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":29359,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":29361,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c5b1c698-449a-466b-ae42-91b0dda8328d\",\"moduleSequenceNumber\":44609}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":44609,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":13226479.15013899,\"moneyMax\":15000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":true,\"ip\":\"61.5.3.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":29365,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":29367,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/a5784ba2-6935-4b07-a720-c5dda665a17a\",\"moduleSequenceNumber\":45615}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":45615,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":8.576,\"minDifficulty\":8,\"moneyAvailable\":8761874.337711668,\"moneyMax\":20000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"40.5.1.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",0.9028871837228747],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.609999999999925,\"pid\":5828,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":16,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/3c79b2ca-81b1-42b9-82ae-13c186641d3f\",\"moduleSequenceNumber\":29700}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",0.43359391347928966],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.410000000000004,\"pid\":5836,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":2,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/8499b406-6671-4c3a-9ae2-ada3f43a5cf5\",\"moduleSequenceNumber\":30459}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/71e74013-5750-46d5-b4f1-d55b5cda3b45\",\"moduleSequenceNumber\":59434}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":59434,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/3c79b2ca-81b1-42b9-82ae-13c186641d3f\",\"moduleSequenceNumber\":29700}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":29700,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/8499b406-6671-4c3a-9ae2-ada3f43a5cf5\",\"moduleSequenceNumber\":30459}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":30459,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":12000000,\"moneyMax\":120000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":true,\"ip\":\"97.9.3.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":8.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",0.8341819804124124],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.610000000000326,\"pid\":5797,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":5,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/9c77ba7b-b5af-4113-a7c0-06ffc4de76e9\",\"moduleSequenceNumber\":29701}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/fbb7087b-317a-403e-8b92-3104396f0ef0\",\"moduleSequenceNumber\":77829}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":77829,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/bcc89763-b3f7-4e91-99d9-d0eb140e0c3c\",\"moduleSequenceNumber\":30711}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":30711,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/9c77ba7b-b5af-4113-a7c0-06ffc4de76e9\",\"moduleSequenceNumber\":29701}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":29701,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"foodnstuff\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":8.440000000000001,\"minDifficulty\":8,\"moneyAvailable\":41152266.03840626,\"moneyMax\":50000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"61.8.2.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":26.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",0.9387617795024135],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":5860,\"ramUsage\":1.75,\"server\":\"omega-net\",\"threads\":15,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/04199ee2-d5df-420a-91df-2bc1cc6bcd5b\",\"moduleSequenceNumber\":34786}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/07c53267-82f5-421a-8ba8-62ccb3e4a0fc\",\"moduleSequenceNumber\":59939}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":59939,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/afb51548-dbb5-4ee0-91f7-34c6371fc074\",\"moduleSequenceNumber\":29953}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":29953,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/04199ee2-d5df-420a-91df-2bc1cc6bcd5b\",\"moduleSequenceNumber\":34786}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":34786,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"max-hardware\",\"the-hub\",\"netlink\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":33429753,\"moneyMax\":334297530,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":204,\"serverGrowth\":38}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"22.6.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":29347,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":29349,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":29351,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"silver-helix\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64.5,\"hackDifficulty\":64.5,\"minDifficulty\":22,\"moneyAvailable\":25042475,\"moneyMax\":250424750,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":274,\"serverGrowth\":32}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"12.2.2.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",0.44196028036073987],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.609999999999925,\"pid\":5819,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/afff2f50-a701-4dd4-8a21-c643ace9c038\",\"moduleSequenceNumber\":40079}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/514fb695-88b0-4a09-a32a-b6f6fa55e7ef\",\"moduleSequenceNumber\":39322}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":39322,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/afff2f50-a701-4dd4-8a21-c643ace9c038\",\"moduleSequenceNumber\":40079}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":40079,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/fd8ce2fa-4000-4ec0-bc85-ecbb3af4fb93\",\"moduleSequenceNumber\":40584}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":40584,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":10000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"41.7.7.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":26.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",0.0877672294406886],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.610000000000326,\"pid\":5796,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"threads\":15,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/c5c13944-0061-4895-b1a5-ada6d383b14d\",\"moduleSequenceNumber\":58175}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/a6694902-df54-489f-a798-7a91658d0435\",\"moduleSequenceNumber\":41591}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":41591,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/c5c13944-0061-4895-b1a5-ada6d383b14d\",\"moduleSequenceNumber\":58175}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":58175,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c91a67df-2785-48ef-ab4a-eff30e24e942\",\"moduleSequenceNumber\":33266}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":33266,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82.5,\"hackDifficulty\":82.5,\"minDifficulty\":28,\"moneyAvailable\":125000000,\"moneyMax\":1250000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":497,\"serverGrowth\":43}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"9.6.2.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":59.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",0.5806497867837004],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.809999999999924,\"pid\":5816,\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"threads\":34,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/fecb2820-1ba4-47b6-958f-c705de4bc693\",\"moduleSequenceNumber\":34788}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/489af5a9-3b2f-4316-9375-c284f6ee5b7c\",\"moduleSequenceNumber\":36298}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":36298,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/fecb2820-1ba4-47b6-958f-c705de4bc693\",\"moduleSequenceNumber\":34788}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":34788,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/45d1c7b8-b306-4064-9c41-8368f7335699\",\"moduleSequenceNumber\":31730}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":31730,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":450000000,\"moneyMax\":4500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1037,\"serverGrowth\":58}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"26.0.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":29167,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":29169,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":29171,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":225000000,\"moneyMax\":2250000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":722,\"serverGrowth\":45}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"54.0.1.5\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":510.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",0.22618495572832154],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000003,\"pid\":5837,\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/100f4838-2c79-472b-b974-0eb6bdd1dfc5\",\"moduleSequenceNumber\":30458}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",0.8491691879057901],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000003,\"pid\":5838,\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"threads\":291,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/8f4a9423-9db1-47b9-aa60-c57fd0d52942\",\"moduleSequenceNumber\":31473}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/100f4838-2c79-472b-b974-0eb6bdd1dfc5\",\"moduleSequenceNumber\":30458}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":30458,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/8f4a9423-9db1-47b9-aa60-c57fd0d52942\",\"moduleSequenceNumber\":31473}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":31473,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/32048b80-0f89-428c-92b7-f4f6d2d23571\",\"moduleSequenceNumber\":30713}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":30713,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"infocomm\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":543,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"72.2.6.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":54.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",0.8910811376837802],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.410000000000001,\"pid\":5842,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"threads\":31,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/90d1d655-cea4-4c60-a486-a44223f67188\",\"moduleSequenceNumber\":33774}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/9a0c5020-4c4c-4295-9118-477d40ee92fa\",\"moduleSequenceNumber\":33264}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":33264,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/eb46c310-6e9c-4d81-8403-15068655e3d1\",\"moduleSequenceNumber\":32757}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":32757,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/90d1d655-cea4-4c60-a486-a44223f67188\",\"moduleSequenceNumber\":33774}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":33774,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"the-hub\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":348,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"68.4.0.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",0.01910014254467085],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.81000000000033,\"pid\":5776,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"threads\":12,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/bd5627d4-1e9e-48f0-bb08-37c9fd093d8a\",\"moduleSequenceNumber\":32502}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",0.21560333283162603],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000003,\"pid\":5839,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"threads\":24,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/bd5627d4-1e9e-48f0-bb08-37c9fd093d8a\",\"moduleSequenceNumber\":32502}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/a41572f1-ecb2-426a-ae87-0e392bdccaeb\",\"moduleSequenceNumber\":34281}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":34281,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/5177101c-71fc-4b4d-979b-ca6f125bf8f6\",\"moduleSequenceNumber\":34282}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":34282,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/bd5627d4-1e9e-48f0-bb08-37c9fd093d8a\",\"moduleSequenceNumber\":32502}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":32502,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":209,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"87.2.8.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":10.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",0.9092406992217539],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":5863,\"ramUsage\":1.75,\"server\":\".\",\"threads\":6,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/4cfa9305-fc3b-4d59-88c2-25f9811dac9f\",\"moduleSequenceNumber\":44606}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":29269,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":29271,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/4cfa9305-fc3b-4d59-88c2-25f9811dac9f\",\"moduleSequenceNumber\":44606}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":44606,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":538,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"21.1.6.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":5.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",0.43587929075457255],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.809999999999924,\"pid\":5817,\"ramUsage\":1.75,\"server\":\"CSEC\",\"threads\":3,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/a03eecdb-2a0f-40f1-9681-f101158f24a2\",\"moduleSequenceNumber\":30966}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":29323,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/e054cd86-4069-4f98-9d45-0d23cd8dd184\",\"moduleSequenceNumber\":31727}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":31727,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/a03eecdb-2a0f-40f1-9681-f101158f24a2\",\"moduleSequenceNumber\":30966}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":30966,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"joesguns\",\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":56,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"51.5.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"The-Cave\",\"moduleSequenceNumber\":29155,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":29157,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":29159,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"2.2.0.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":6000,\"serverGrowth\":0}},\"hacknet-node-0\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-0\",\"httpPortOpen\":false,\"ip\":\"49.5.1.6\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst dollars = await ns.hack(ns.args[0]);\\n\\tawait ns.writePort(1, `${ns.args[0]}:${dollars}`);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hacknet-node-0\",\"moduleSequenceNumber\":29026,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst growth = await ns.grow(ns.args[0]);\\n\\tawait ns.writePort(3, `${ns.args[0]}:${growth}`);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hacknet-node-0\",\"moduleSequenceNumber\":29028,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst sec = await ns.weaken(ns.args[0]);\\n\\tawait ns.writePort(2, `${ns.args[0]}:${sec}`);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hacknet-node-0\",\"moduleSequenceNumber\":29030,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":1,\"hashCapacity\":64,\"hashRate\":0.0003178209916332212,\"level\":1,\"onlineTimeSeconds\":6369.399999996599,\"totalHashesGenerated\":2.024329024108775}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"36.3.5.8\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.158,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.158,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.158,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.158,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.158,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.158,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.158,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.158,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.158,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.158,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.158,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.158,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.158,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.158,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.158,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.158,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.158,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.158,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.158,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.158,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.158,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.158,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.158,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.158,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.158,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.158,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.158,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.158,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.158,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.158,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.158,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.158,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.158,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.158,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.158,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.158,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.158,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.158,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":96.4996,\"isBanned\":false,\"isMember\":true,\"name\":\"Aevum\",\"playerReputation\":343830.3313405705}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":107.3614,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":332746.9674751037}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":75.8762,\"isBanned\":false,\"isMember\":true,\"name\":\"Tetrads\",\"playerReputation\":229588.7732246381}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":310.7662,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":7162831.916930721}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":104.1633,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":288166.41232117236}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":100.4416,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":72722.80287399991}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":203.8897,\"isBanned\":false,\"isMember\":true,\"name\":\"Bladeburners\",\"playerReputation\":1631408.9205307565}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":10,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":30,\"CodeInstructionRunTime\":20,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":true,\"EnableBashHotkeys\":true,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":180,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":200,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":true,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#FFF\",\"primary\":\"#F8F8F2\",\"primarydark\":\"#FAFAEB\",\"successlight\":\"#ADE146\",\"success\":\"#A6E22E\",\"successdark\":\"#98E104\",\"errorlight\":\"#FF69A0\",\"error\":\"#F92672\",\"errordark\":\"#D10F56\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#E1D992\",\"warning\":\"#E6DB74\",\"warningdark\":\"#EDDD54\",\"infolight\":\"#92E1F1\",\"info\":\"#66D9EF\",\"infodark\":\"#31CDED\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#F92672\",\"money\":\"#E6DB74\",\"hack\":\"#A6E22E\",\"combat\":\"#75715E\",\"cha\":\"#AE81FF\",\"int\":\"#66D9EF\",\"rep\":\"#E69F66\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#272822\",\"backgroundsecondary\":\"#1B1C18\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":\"1.25\",\"fontFamily\":\"monospace\"},\"overview\":{\"x\":-444,\"y\":5,\"opened\":true},\"EditorTheme\":{\"base\":\"vs-dark\",\"inherit\":true,\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}}}}","VersionSave":"15","AllGangsSave":"{\"Slum Snakes\":{\"power\":1577.609707331163,\"territory\":1},\"Tetrads\":{\"power\":1393.506707351096,\"territory\":0},\"The Syndicate\":{\"power\":1378.8979817149323,\"territory\":0},\"The Dark Army\":{\"power\":1361.4753903063586,\"territory\":0},\"Speakers for the Dead\":{\"power\":363.720793919073,\"territory\":0},\"NiteSec\":{\"power\":1395.010993936795,\"territory\":0},\"The Black Hand\":{\"power\":21.190167885813604,\"territory\":0}}","LastExportBonus":"1652104689549","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}